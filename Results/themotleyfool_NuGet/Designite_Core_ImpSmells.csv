Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGet,ManifestReader,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestReader.cs,ReadMetadataValue,The method has 62 lines of code.
Long Method,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The method has 82 lines of code.
Long Method,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,TryUpdate,The method has 66 lines of code.
Long Method,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The method has 70 lines of code.
Long Method,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,The method has 75 lines of code.
Complex Method,NuGet,ManifestMetadata,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestMetadata.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,NuGet,ManifestReader,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestReader.cs,ReadMetadataValue,Cyclomatic complexity of the method is 55
Complex Method,NuGet,ManifestVersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestVersionUtility.cs,VisitProperty,Cyclomatic complexity of the method is 7
Complex Method,NuGet,MultipartWebRequest,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\MultipartWebRequest.cs,CreateMultipartRequest,Cyclomatic complexity of the method is 9
Complex Method,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,Cyclomatic complexity of the method is 9
Complex Method,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,Cyclomatic complexity of the method is 12
Complex Method,NuGet,AggregateQuery,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateQuery.cs,ReadOrderedQueues,Cyclomatic complexity of the method is 7
Complex Method,NuGet,PackageReferenceFile,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageReferenceFile.cs,GetPackageReferences,Cyclomatic complexity of the method is 11
Complex Method,NuGet,SharedPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,GetStoreDocument,Cyclomatic complexity of the method is 7
Complex Method,NuGet,PackageHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,Cyclomatic complexity of the method is 7
Complex Method,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,Cyclomatic complexity of the method is 9
Complex Method,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,Cyclomatic complexity of the method is 10
Complex Method,NuGet,ZipPackage,D:\newReposJune17\themotleyfool_NuGet\src\Core\Packages\ZipPackage.cs,EnsureManifest,Cyclomatic complexity of the method is 7
Complex Method,NuGet,PackageWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\PackageWalker.cs,Walk,Cyclomatic complexity of the method is 10
Complex Method,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,Cyclomatic complexity of the method is 8
Complex Method,NuGet,ProjectSystemExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\ProjectSystemExtensions.cs,AddFiles,Cyclomatic complexity of the method is 7
Complex Method,NuGet,ProjectSystemExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\ProjectSystemExtensions.cs,DeleteFiles,Cyclomatic complexity of the method is 10
Complex Method,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,Cyclomatic complexity of the method is 15
Complex Method,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,Cyclomatic complexity of the method is 22
Complex Method,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetUpgradeVersionSpec,Cyclomatic complexity of the method is 11
Complex Method,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,Cyclomatic complexity of the method is 9
Complex Method,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetShortFrameworkName,Cyclomatic complexity of the method is 9
Complex Method,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,IsCompatible,Cyclomatic complexity of the method is 7
Complex Method,NuGet,XElementExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\XElementExtensions.cs,Except,Cyclomatic complexity of the method is 9
Complex Method,NuGet,XElementExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\XElementExtensions.cs,MergeWith,Cyclomatic complexity of the method is 10
Complex Method,NuGet.Runtime,BindingRedirectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\Runtime\BindingRedirectManager.cs,AddBindingRedirects,Cyclomatic complexity of the method is 9
Complex Method,NuGet.Runtime,BindingRedirectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\Runtime\BindingRedirectManager.cs,RemoveBindingRedirects,Cyclomatic complexity of the method is 7
Long Parameter List,NuGet,PackageIssue,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\PackageIssue.cs,PackageIssue,The method has 4 parameters.
Long Parameter List,NuGet,SettingsCredentialProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\SettingsCredentialProvider.cs,GetCredentials,The method has 4 parameters.
Long Parameter List,NuGet,CredentialProviderExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\CredentialProviderExtensions.cs,GetCredentials,The method has 4 parameters.
Long Parameter List,NuGet,SettingsExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\SettingsExtensions.cs,SetEncryptedValue,The method has 4 parameters.
Long Parameter List,NuGet,SettingsExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\SettingsExtensions.cs,SetConfigValue,The method has 4 parameters.
Long Parameter List,NuGet,NullCredentialProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\NullCredentialProvider.cs,GetCredentials,The method has 4 parameters.
Long Parameter List,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The method has 5 parameters.
Long Parameter List,NuGet,IServiceBasedRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\IServiceBasedRepository.cs,GetUpdates,The method has 4 parameters.
Long Parameter List,NuGet,SemanticVersion,D:\newReposJune17\themotleyfool_NuGet\src\Core\SemanticVersion.cs,SemanticVersion,The method has 4 parameters.
Long Parameter List,NuGet,SemanticVersion,D:\newReposJune17\themotleyfool_NuGet\src\Core\SemanticVersion.cs,SemanticVersion,The method has 4 parameters.
Long Parameter List,NuGet,IPackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\IPackageManager.cs,InstallPackage,The method has 4 parameters.
Long Parameter List,NuGet,IPackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\IPackageManager.cs,UpdatePackage,The method has 4 parameters.
Long Parameter List,NuGet,IPackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\IPackageManager.cs,UpdatePackage,The method has 4 parameters.
Long Parameter List,NuGet,IPackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\IPackageManager.cs,UninstallPackage,The method has 4 parameters.
Long Parameter List,NuGet,IProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\IProjectManager.cs,AddPackageReference,The method has 4 parameters.
Long Parameter List,NuGet,IProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\IProjectManager.cs,UpdatePackageReference,The method has 4 parameters.
Long Parameter List,NuGet,IProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\IProjectManager.cs,UpdatePackageReference,The method has 4 parameters.
Long Parameter List,NuGet,PackageSourceProviderExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProviderExtensions.cs,GetAggregate,The method has 4 parameters.
Long Parameter List,NuGet,IDependencyResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\IDependencyResolver.cs,ResolveDependency,The method has 4 parameters.
Long Parameter List,NuGet,AggregateQuery,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateQuery.cs,AggregateQuery,The method has 4 parameters.
Long Parameter List,NuGet,AggregateQuery,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateQuery.cs,AggregateQuery,The method has 6 parameters.
Long Parameter List,NuGet,AggregateRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,ResolveDependency,The method has 4 parameters.
Long Parameter List,NuGet,AggregateRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,GetUpdates,The method has 4 parameters.
Long Parameter List,NuGet,PackageReference,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageReference.cs,PackageReference,The method has 4 parameters.
Long Parameter List,NuGet,PackageReferenceFile,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageReferenceFile.cs,AddEntry,The method has 4 parameters.
Long Parameter List,NuGet,ICredentialProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\ICredentialProvider.cs,GetCredentials,The method has 4 parameters.
Long Parameter List,NuGet,SharedPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,SharedPackageRepository,The method has 4 parameters.
Long Parameter List,NuGet,Preprocessor,D:\newReposJune17\themotleyfool_NuGet\src\Core\FileModifiers\Preprocessor.cs,RevertFile,The method has 4 parameters.
Long Parameter List,NuGet,XmlTransfomer,D:\newReposJune17\themotleyfool_NuGet\src\Core\FileModifiers\XmlTransfomer.cs,RevertFile,The method has 4 parameters.
Long Parameter List,NuGet,MemoryCache,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\MemoryCache.cs,GetOrAdd,The method has 4 parameters.
Long Parameter List,NuGet,PackageHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The method has 5 parameters.
Long Parameter List,NuGet,PackageHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The method has 6 parameters.
Long Parameter List,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,PackageManager,The method has 4 parameters.
Long Parameter List,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,InstallPackage,The method has 4 parameters.
Long Parameter List,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,InstallPackage,The method has 4 parameters.
Long Parameter List,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UninstallPackage,The method has 4 parameters.
Long Parameter List,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The method has 4 parameters.
Long Parameter List,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The method has 4 parameters.
Long Parameter List,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The method has 4 parameters.
Long Parameter List,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,PackageBuilder,The method has 4 parameters.
Long Parameter List,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,AddFiles,The method has 4 parameters.
Long Parameter List,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolveSearchPattern,The method has 4 parameters.
Long Parameter List,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,PerformWildcardSearchInternal,The method has 4 parameters.
Long Parameter List,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolvePackagePath,The method has 4 parameters.
Long Parameter List,NuGet,PackageSource,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSource.cs,PackageSource,The method has 4 parameters.
Long Parameter List,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,ProjectManager,The method has 4 parameters.
Long Parameter List,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,AddPackageReference,The method has 4 parameters.
Long Parameter List,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The method has 4 parameters.
Long Parameter List,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The method has 4 parameters.
Long Parameter List,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The method has 5 parameters.
Long Parameter List,NuGet,IPackageFileTransformer,D:\newReposJune17\themotleyfool_NuGet\src\Core\FileModifiers\IPackageFileTransformer.cs,RevertFile,The method has 4 parameters.
Long Parameter List,NuGet,DataServicePackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\DataServicePackageRepository.cs,GetUpdates,The method has 4 parameters.
Long Parameter List,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,InstallWalker,The method has 5 parameters.
Long Parameter List,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,InstallWalker,The method has 6 parameters.
Long Parameter List,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,InstallWalker,The method has 7 parameters.
Long Parameter List,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,TryUpdate,The method has 4 parameters.
Long Parameter List,NuGet,UpdateWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\UpdateWalker.cs,UpdateWalker,The method has 7 parameters.
Long Parameter List,NuGet,UpdateWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\UpdateWalker.cs,UpdateWalker,The method has 8 parameters.
Long Parameter List,NuGet,UninstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,UninstallWalker,The method has 5 parameters.
Long Parameter List,NuGet,UninstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,UninstallWalker,The method has 6 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,TryFindPackage,The method has 4 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The method has 5 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The method has 6 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The method has 6 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackages,The method has 5 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The method has 5 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindCompatiblePackages,The method has 6 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,Search,The method has 4 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependency,The method has 4 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependency,The method has 5 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependencyCore,The method has 5 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetUpdates,The method has 5 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetUpdatesCore,The method has 5 parameters.
Long Parameter List,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FilterPackagesByConstraints,The method has 4 parameters.
Long Parameter List,NuGet,FileSystemExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\FileSystemExtensions.cs,AddFiles,The method has 4 parameters.
Long Parameter List,NuGet,ProjectSystemExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\ProjectSystemExtensions.cs,DeleteFiles,The method has 4 parameters.
Long Parameter List,NuGet,ProjectSystemExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\ProjectSystemExtensions.cs,ResolveTargetPath,The method has 4 parameters.
Long Parameter List,NuGet,PackageUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageUtility.cs,IsSatellitePackage,The method has 4 parameters.
Long Parameter List,NuGet,Crc32,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\Crc32.cs,Calculate,The method has 4 parameters.
Long Identifier,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,Save,The length of the parameter requiresV4TargetFrameworkSchema is 31.
Long Identifier,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,IsPortableLibraryCompatible,The length of the parameter targetFrameworkPortableProfile is 30.
Long Statement,NuGet,ManifestFile,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestFile.cs,Validate,The length of the statement  "		yield return new ValidationResult (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_SourceContainsInvalidCharacters' Source)); " is 144.
Long Statement,NuGet,ManifestFile,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestFile.cs,Validate,The length of the statement  "		yield return new ValidationResult (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_TargetContainsInvalidCharacters' Target)); " is 144.
Long Statement,NuGet,ManifestFile,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestFile.cs,Validate,The length of the statement  "		yield return new ValidationResult (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_ExcludeContainsInvalidCharacters' Exclude)); " is 146.
Long Statement,NuGet,ManifestMetadata,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestMetadata.cs,Validate,The length of the statement  "			yield return new ValidationResult (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_IdMaxLengthExceeded)); " is 124.
Long Statement,NuGet,ManifestMetadata,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestMetadata.cs,Validate,The length of the statement  "		yield return new ValidationResult (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_UriCannotBeEmpty' "LicenseUrl")); " is 135.
Long Statement,NuGet,ManifestMetadata,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestMetadata.cs,Validate,The length of the statement  "		yield return new ValidationResult (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_UriCannotBeEmpty' "IconUrl")); " is 132.
Long Statement,NuGet,ManifestMetadata,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestMetadata.cs,Validate,The length of the statement  "		yield return new ValidationResult (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_UriCannotBeEmpty' "ProjectUrl")); " is 135.
Long Statement,NuGet,ManifestMetadata,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestMetadata.cs,CreatePackageDependencySet,The length of the statement  "	FrameworkName targetFramework = manifestDependencySet.TargetFramework == null ? null : VersionUtility.ParseFrameworkName (manifestDependencySet.TargetFramework); " is 161.
Long Statement,NuGet,ManifestMetadata,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestMetadata.cs,CreatePackageDependencySet,The length of the statement  "	select new PackageDependency (d.Id' String.IsNullOrEmpty (d.Version) ? null : VersionUtility.ParseVersionSpec (d.Version)); " is 123.
Long Statement,NuGet,ManifestReader,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestReader.cs,ReadDependencySet,The length of the statement  "	if (dependenciesElement.ElementsNoNamespace ("dependency").Any () && dependenciesElement.ElementsNoNamespace ("group").Any ()) { " is 128.
Long Statement,NuGet,ManifestReference,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestReference.cs,Validate,The length of the statement  "		yield return new ValidationResult (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_InvalidReferenceFile' File)); " is 131.
Long Statement,NuGet,ManifestSchemaUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestSchemaUtility.cs,GetSchemaNamespace,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnknownSchemaVersion' version)); " is 127.
Long Statement,NuGet,ManifestSchemaUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestSchemaUtility.cs,GetSchemaReader,The length of the statement  "		throw new ArgumentException (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_InvalidSchemaNamespace' schemaNamespace)); " is 138.
Long Statement,NuGet,ManifestVersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestVersionUtility.cs,GetVersionFromMetadata,The length of the statement  "	bool dependencyHasTargetFramework = metadata.DependencySets != null && metadata.DependencySets.Any (d => d.TargetFramework != null); " is 132.
Long Statement,NuGet,ManifestVersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestVersionUtility.cs,GetVersionFromMetadata,The length of the statement  "	if (SemanticVersion.TryParse (metadata.Version' out semanticVersion) && !String.IsNullOrEmpty (semanticVersion.SpecialVersion)) { " is 129.
Long Statement,NuGet,SettingsCredentialProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\SettingsCredentialProvider.cs,TryGetCredentials,The length of the statement  "		return !String.IsNullOrEmpty (p.UserName) && !String.IsNullOrEmpty (p.Password) && Uri.TryCreate (p.Source' UriKind.Absolute' out sourceUri) && UriUtility.UriEquals (sourceUri' uri); " is 182.
Long Statement,NuGet,NullSettings,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,SetValue,The length of the statement  "	throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "SetValue")); " is 138.
Long Statement,NuGet,NullSettings,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,SetValues,The length of the statement  "	throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "SetValues")); " is 139.
Long Statement,NuGet,NullSettings,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,SetNestedValues,The length of the statement  "	throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "SetNestedValues")); " is 145.
Long Statement,NuGet,NullSettings,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,DeleteValue,The length of the statement  "	throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "DeleteValue")); " is 141.
Long Statement,NuGet,NullSettings,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\NullSettings.cs,DeleteSection,The length of the statement  "	throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.InvalidNullSettingsOperation' "DeleteSection")); " is 143.
Long Statement,NuGet,Settings,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\Settings.cs,LoadDefaultSettings,The length of the statement  "		validSettingFiles.AddRange (GetSettingsFileNames (fileSystem).Select (f => ReadSettings (fileSystem' f)).Where (f => f != null)); " is 129.
Long Statement,NuGet,Settings,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\Settings.cs,ReadValue,The length of the statement  "		throw new InvalidDataException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UserSettings_UnableToParseConfigFile' ConfigFilePath)); " is 145.
Long Statement,NuGet,Settings,D:\newReposJune17\themotleyfool_NuGet\src\Core\Configuration\Settings.cs,FindElementByKey,The length of the statement  "		} else if (elementName.Equals ("add"' StringComparison.OrdinalIgnoreCase) && element.GetOptionalAttributeValue ("key").Equals (key' StringComparison.OrdinalIgnoreCase)) { " is 170.
Long Statement,NuGet,PackageOperationExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageOperationExtensions.cs,Reduce,The length of the statement  "	var operationLookup = operations.Select ((o' index) => new IndexedPackageOperation (index' o)).ToLookup (o => GetOperationKey (o.Operation)).ToDictionary (g => g.Key' g => g.ToList ()); " is 185.
Long Statement,NuGet,PackageOperationExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageOperationExtensions.cs,Reorder,The length of the statement  "		// For satellite packages' we need to ensure that the package is uninstalled prior to uninstalling the core package. This is because the satellite package has to remove  " is 168.
Long Statement,NuGet,PackageOperationExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageOperationExtensions.cs,Reorder,The length of the statement  "		// satellite files from the lib directory so that the core package does not leave any files left over. The reverse is true for install operations. As a trivial fix' we are " is 171.
Long Statement,NuGet,PackageOperationExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageOperationExtensions.cs,Reorder,The length of the statement  "		// going to trivially move all uninstall satellite operations to the beginning of our reduced list and all install operations at the end. " is 137.
Long Statement,NuGet,PackageOperationExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageOperationExtensions.cs,GetOpposingOperationKey,The length of the statement  "	return Tuple.Create (operation.Action == PackageAction.Install ? PackageAction.Uninstall : PackageAction.Install' operation.Package.Id' operation.Package.Version); " is 163.
Long Statement,NuGet,VersionExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\VersionExtensions.cs,GetComparableVersionStrings,The length of the statement  "	paths.Add (String.Format (CultureInfo.InvariantCulture' "{0}.{1}.{2}.{3}{4}"' coreVersion.Major' coreVersion.Minor' coreVersion.Build' coreVersion.Revision' specialVersion)); " is 174.
Long Statement,NuGet,VersionExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\VersionExtensions.cs,GetComparableVersionStrings,The length of the statement  "		paths.Add (String.Format (CultureInfo.InvariantCulture' "{0}.{1}.{2}{3}"' coreVersion.Major' coreVersion.Minor' coreVersion.Build' specialVersion)); " is 148.
Long Statement,NuGet,VersionExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\VersionExtensions.cs,GetComparableVersionStrings,The length of the statement  "			paths.Add (String.Format (CultureInfo.InvariantCulture' "{0}.{1}{2}"' coreVersion.Major' coreVersion.Minor' specialVersion)); " is 125.
Long Statement,NuGet,MultipartWebRequest,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\MultipartWebRequest.cs,CreateMultipartRequest,The length of the statement  "			string header = String.Format (CultureInfo.InvariantCulture' FileTemplate' boundary' file.FieldName' file.FieldName' file.ContentType); " is 135.
Long Statement,NuGet,ProxyCache,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\ProxyCache.cs,GetUserConfiguredProxy,The length of the statement  "	// Try reading from the settings. The values are stored as 3 config values http_proxy' http_proxy_user' http_proxy_password " is 123.
Long Statement,NuGet,ProxyCache,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\ProxyCache.cs,GetUserConfiguredProxy,The length of the statement  "	// Next try reading from the environment variable http_proxy. This would be specified as http://<username>:<password>@proxy.com " is 127.
Long Statement,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The length of the statement  "			request.Proxy.Credentials = credentialProvider.GetCredentials (request' CredentialType.ProxyCredentials' retrying: proxyCredentialsRetryCount > 0); " is 147.
Long Statement,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The length of the statement  "			// If we are using STS' the auth's being performed by a request header. We do not need to ask the user for credentials at this point. " is 133.
Long Statement,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The length of the statement  "			request.Credentials = credentialProvider.GetCredentials (request' CredentialType.RequestCredentials' retrying: credentialsRetryCount > 0); " is 138.
Long Statement,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,GetResponse,The length of the statement  "				if (previousStatusCode == HttpStatusCode.ProxyAuthenticationRequired && response.StatusCode != HttpStatusCode.ProxyAuthenticationRequired) { " is 140.
Long Statement,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,IsAuthenticationResponse,The length of the statement  "	return response.StatusCode == HttpStatusCode.Unauthorized || response.StatusCode == HttpStatusCode.ProxyAuthenticationRequired; " is 127.
Long Statement,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,SetKeepAliveHeaders,The length of the statement  "	// KeepAlive is required for NTLM and Kerberos authentication. If we've never been authenticated or are using a different auth' we  " is 130.
Long Statement,NuGet,RequestHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RequestHelper.cs,SetKeepAliveHeaders,The length of the statement  "	if (previousResponse == null || (!String.Equals (previousResponse.AuthType' "NTLM"' StringComparison.OrdinalIgnoreCase) && !String.Equals (previousResponse.AuthType' "Kerberos"' StringComparison.OrdinalIgnoreCase))) { " is 217.
Long Statement,NuGet,STSAuthHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\STSAuthHelper.cs,TryRetrieveSTSToken,The length of the statement  "	// TODO: We need to figure out a way to cache the token for the duration of the token's validity (which is available as part of it's result). " is 141.
Long Statement,NuGet,STSAuthHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\STSAuthHelper.cs,TryRetrieveSTSToken,The length of the statement  "	MemoryCache.Instance.GetOrAdd (cacheKey' () => GetSTSToken (requestUri' endPoint' realm)' TimeSpan.FromMinutes (30)' absoluteExpiration: true); " is 143.
Long Statement,NuGet,STSAuthHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\STSAuthHelper.cs,GetSTSToken,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnableToLocateWIF' requestUri)); " is 127.
Long Statement,NuGet,NetPortableProfile,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfile.cs,Equals,The length of the statement  "	return Name.Equals (other.Name' StringComparison.OrdinalIgnoreCase) && SupportedFrameworks.SetEquals (other.SupportedFrameworks); " is 129.
Long Statement,NuGet,NetPortableProfile,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfile.cs,IsCompatibleWith,The length of the statement  "	return other.SupportedFrameworks.All (projectFramework => this.SupportedFrameworks.Any (packageFramework => VersionUtility.IsCompatible (projectFramework' packageFramework))); " is 175.
Long Statement,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadProfilesFromFramework,The length of the statement  "		string profileFilesPath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ProgramFilesX86' Environment.SpecialFolderOption.DoNotVerify)' @"Reference Assemblies\Microsoft\Framework\.NETPortable\" + version + @"\Profile\"); " is 240.
Long Statement,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadPortableProfile,The length of the statement  "	var supportedFrameworks = Directory.EnumerateFiles (supportedFrameworkDirectory' "*.xml").Select (LoadSupportedFramework).Where (p => p != null); " is 145.
Long Statement,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The length of the statement  "				} else if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) { " is 186.
Long Statement,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The length of the statement  "					// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone". " is 128.
Long Statement,NuGet,PackageRestoreConsent,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageRestoreConsent.cs,IsSet,The length of the statement  "	return !String.IsNullOrEmpty (value) && ((Boolean.TryParse (value' out boolResult) && boolResult) || (Int32.TryParse (value' NumberStyles.Number' CultureInfo.InvariantCulture' out intResult) && (intResult == 1))); " is 213.
Long Statement,NuGet,LocalPackage,D:\newReposJune17\themotleyfool_NuGet\src\Core\Packages\LocalPackage.cs,IsAssemblyReference,The length of the statement  "	!filePath.EndsWith (ResourceAssemblyExtension' StringComparison.OrdinalIgnoreCase) && Constants.AssemblyReferencesExtensions.Contains (Path.GetExtension (filePath)' StringComparer.OrdinalIgnoreCase) && // If references are listed' ensure that the file is listed in it. " is 268.
Long Statement,NuGet,UnzippedPackage,D:\newReposJune17\themotleyfool_NuGet\src\Core\Packages\UnzippedPackage.cs,GetPackageRelativePath,The length of the statement  "	// Package paths returned by the file system contain the package name. We need to yank this out of the package name because the paths we are interested in are " is 158.
Long Statement,NuGet,UnzippedPackage,D:\newReposJune17\themotleyfool_NuGet\src\Core\Packages\UnzippedPackage.cs,EnsureManifest,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_NotFound' _repositoryFileSystem.GetFullPath (manifestFile))); " is 165.
Long Statement,NuGet,SemanticVersion,D:\newReposJune17\themotleyfool_NuGet\src\Core\SemanticVersion.cs,Parse,The length of the statement  "		throw new ArgumentException (String.Format (CultureInfo.CurrentCulture' NuGetResources.InvalidVersionString' version)' "version"); " is 130.
Long Statement,NuGet,SemanticVersion,D:\newReposJune17\themotleyfool_NuGet\src\Core\SemanticVersion.cs,TryParseInternal,The length of the statement  "	semVer = new SemanticVersion (NormalizeVersionValue (versionValue)' match.Groups ["Release"].Value.TrimStart ('-')' version.Replace (" "' "")); " is 143.
Long Statement,NuGet,SemanticVersion,D:\newReposJune17\themotleyfool_NuGet\src\Core\SemanticVersion.cs,Equals,The length of the statement  "	return !Object.ReferenceEquals (null' other) && Version.Equals (other.Version) && SpecialVersion.Equals (other.SpecialVersion' StringComparison.OrdinalIgnoreCase); " is 163.
Long Statement,NuGet,PackageServer,D:\newReposJune17\themotleyfool_NuGet\src\Core\Server\PackageServer.cs,EnsureSuccessfulResponse,The length of the statement  "			throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.PackageServerError' response.StatusDescription' String.Empty)); " is 158.
Long Statement,NuGet,PackageServer,D:\newReposJune17\themotleyfool_NuGet\src\Core\Server\PackageServer.cs,EnsureSuccessfulResponse,The length of the statement  "			throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.PackageServerError' response.StatusDescription' e.Message)' e); " is 158.
Long Statement,NuGet,PackageSourceProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProvider.cs,LoadPackageSources,The length of the statement  "		IEnumerable<KeyValuePair<string' string>> disabledSourcesValues = _settingsManager.GetValues (DisabledPackageSourcesSectionName) ?? Enumerable.Empty<KeyValuePair<string' string>> (); " is 182.
Long Statement,NuGet,PackageSourceProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProvider.cs,LoadPackageSources,The length of the statement  "		var disabledSources = new HashSet<string> (disabledSourcesValues.Select (s => s.Key)' StringComparer.CurrentCultureIgnoreCase); " is 127.
Long Statement,NuGet,PackageSourceProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProvider.cs,SavePackageSources,The length of the statement  "	_settingsManager.SetValues (PackageSourcesSectionName' sources.Select (p => new KeyValuePair<string' string> (p.Name' p.Source)).ToList ()); " is 140.
Long Statement,NuGet,PackageSourceProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProvider.cs,SavePackageSources,The length of the statement  "	_settingsManager.SetValues (DisabledPackageSourcesSectionName' sources.Where (p => !p.IsEnabled).Select (p => new KeyValuePair<string' string> (p.Name' "true")).ToList ()); " is 172.
Long Statement,NuGet,PackageSourceProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProvider.cs,SavePackageSources,The length of the statement  "	var sourceWithCredentials = sources.Where (s => !String.IsNullOrEmpty (s.UserName) && !String.IsNullOrEmpty (s.Password)); " is 122.
Long Statement,NuGet,PackageSourceProviderExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProviderExtensions.cs,GetAggregate,The length of the statement  "	return new AggregateRepository (factory' provider.GetEnabledPackageSources ().Select (s => s.Source)' ignoreFailingRepositories); " is 129.
Long Statement,NuGet,PackageSourceProviderExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSourceProviderExtensions.cs,ResolveSource,The length of the statement  "	where source.Name.Equals (value' StringComparison.CurrentCultureIgnoreCase) || source.Source.Equals (value' StringComparison.OrdinalIgnoreCase) " is 143.
Long Statement,NuGet,PackageOperation,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\PackageOperation.cs,Equals,The length of the statement  "	return operation != null && operation.Action == Action && operation.Package.Id.Equals (Package.Id' StringComparison.OrdinalIgnoreCase) && operation.Package.Version.Equals (Package.Version); " is 189.
Long Statement,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,GetFiles,The length of the statement  "		return Directory.EnumerateFiles (path' filter' recursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly).Select (MakeRelativePath); " is 146.
Long Statement,NuGet,AggregateConstraintProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\ConstraintProviders\AggregateConstraintProvider.cs,GetConstraint,The length of the statement  "	return _constraintProviders.Select (cp => cp.GetConstraint (packageId)).FirstOrDefault (constraint => constraint != null); " is 122.
Long Statement,NuGet,AggregateRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,GetPackages,The length of the statement  "	// We need to follow this pattern in all AggregateRepository methods to ensure it suppresses exceptions that may occur if the Ignore flag is set.  Oh how I despise my code.  " is 172.
Long Statement,NuGet,AggregateRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,ResolveDependency,The length of the statement  "		Func<IPackageRepository' IPackage> resolveDependency = Wrap (r => r.ResolveDependency (dependency' constraintProvider' allowPrereleaseVersions' preferListedPackages)); " is 167.
Long Statement,NuGet,AggregateRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,ResolveDependency,The length of the statement  "		return Repositories.Select (r => Task.Factory.StartNew (() => resolveDependency (r))).ToArray ().WhenAny (package => package != null); " is 134.
Long Statement,NuGet,AggregateRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,Search,The length of the statement  "	return CreateAggregateQuery (Repositories.Select (r => r.Search (searchTerm' targetFrameworks' allowPrereleaseVersions))); " is 122.
Long Statement,NuGet,AggregateRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,GetUpdates,The length of the statement  "	// GetUpdatesCore returns all updates. We'll allow the extension method to determine if we need to collapse based on allVersion. " is 128.
Long Statement,NuGet,AggregateRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\AggregateRepository.cs,GetUpdates,The length of the statement  "	var tasks = _repositories.Select (p => Task.Factory.StartNew (state => p.GetUpdates (packages' includePrerelease' includeAllVersions' targetFrameworks)' p)).ToArray (); " is 168.
Long Statement,NuGet,PackageReferenceFile,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageReferenceFile.cs,GetPackageReferences,The length of the statement  "			throw new InvalidDataException (String.Format (CultureInfo.CurrentCulture' NuGetResources.ReferenceFile_InvalidVersion' versionString' _path)); " is 143.
Long Statement,NuGet,PackageReferenceFile,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageReferenceFile.cs,GetPackageReferences,The length of the statement  "				throw new InvalidDataException (String.Format (CultureInfo.CurrentCulture' NuGetResources.ReferenceFile_InvalidVersion' versionConstraintString' _path)); " is 153.
Long Statement,NuGet,PackageReferenceFile,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageReferenceFile.cs,GetDocument,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.ErrorReadingFile' FileSystem.GetFullPath (_path))' e); " is 149.
Long Statement,NuGet,DataServiceContextWrapper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\DataServiceContextWrapper.cs,ExtractMetadataInternal,The length of the statement  "		SupportedProperties = new HashSet<string> (ExtractSupportedProperties (schemaDocument' packageEntityName)' StringComparer.OrdinalIgnoreCase) " is 140.
Long Statement,NuGet,DataServiceContextWrapper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\DataServiceContextWrapper.cs,ExtractSupportedProperties,The length of the statement  "	// The name is listed in the entity set listing as <EntitySet Name="Packages" EntityType="Gallery.Infrastructure.FeedModels.PublishedPackage" /> " is 144.
Long Statement,NuGet,DataServiceQueryWrapper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\DataServiceQueryWrapper.cs,RequiresBatch,The length of the statement  "	// Absolute uri returns the escaped url that would be sent to the server. Escaping exapnds the value and IIS uses this escaped query to determine if the  " is 152.
Long Statement,NuGet,DataServiceQueryWrapper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\DataServiceQueryWrapper.cs,Execute,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.InvalidFeed' _context.BaseUri)' exception); " is 138.
Long Statement,NuGet,DataServiceQueryWrapper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\DataServiceQueryWrapper.cs,ExtractMessageFromClientException,The length of the statement  "		if (dataServiceQueryException != null && XmlUtility.TryParseDocument (dataServiceClientException.Message' out document) && document.Root.Name.LocalName.Equals ("error"' StringComparison.OrdinalIgnoreCase)) { " is 207.
Long Statement,NuGet,SharedPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,Exists,The length of the statement  "		bool hasPackageDirectory = version.GetComparableVersionStrings ().Select (v => packageId + "." + v).Any (path => FileSystem.FileExists (Path.Combine (path' path + Constants.PackageExtension)) || FileSystem.FileExists (Path.Combine (path' path + Constants.ManifestExtension))); " is 276.
Long Statement,NuGet,SharedPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,OpenPackage,The length of the statement  "	// We could either be passed in manifest path or the path to the nupkg. The manifest path ensures that the calling code has already verified the existence of the  " is 161.
Long Statement,NuGet,SharedPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,OpenPackage,The length of the statement  "	// manifest and we can return an UnzippedPackageRepository. If the caller passed in a nupkg' we'll quickly verify if a manifest exists alongside. " is 145.
Long Statement,NuGet,SharedPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,OpenPackage,The length of the statement  "	if (extension.Equals (Constants.ManifestExtension' StringComparison.OrdinalIgnoreCase) || FileSystem.FileExists (Path.ChangeExtension (path' Constants.ManifestExtension))) { " is 173.
Long Statement,NuGet,SharedPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,GetStoreDocument,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.ErrorReadingFile' _storeFileSystem.GetFullPath (StoreFilePath))' e); " is 163.
Long Statement,NuGet,Preprocessor,D:\newReposJune17\themotleyfool_NuGet\src\Core\FileModifiers\Preprocessor.cs,ReplaceToken,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.TokenHasNoValue' propertyName)); " is 127.
Long Statement,NuGet,XmlTransfomer,D:\newReposJune17\themotleyfool_NuGet\src\Core\FileModifiers\XmlTransfomer.cs,RevertFile,The length of the statement  "	var mergedFragments = matchingFiles.Select (f => GetXml (f' projectSystem)).Aggregate (new XElement (xmlFragment.Name)' (left' right) => left.MergeWith (right' _nodeActions)); " is 175.
Long Statement,NuGet,FrameworkNameEqualityComparer,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\FrameworkNameEqualityComparer.cs,Equals,The length of the statement  "	return String.Equals (x.Identifier' y.Identifier' StringComparison.OrdinalIgnoreCase) && x.Version == y.Version && String.Equals (x.Profile' y.Profile' StringComparison.OrdinalIgnoreCase); " is 188.
Long Statement,NuGet,MemoryCache,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\MemoryCache.cs,GetOrAdd,The length of the statement  "	// none of the data that we cache is time sensitive. At worst' an item will be cached for an extra _cleanupInterval duration. " is 125.
Long Statement,NuGet,PackageHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The length of the statement  "	return ResolvePackage (sourceRepository' localRepository' constraintProvider: NullConstraintProvider.Instance' packageId: packageId' version: version' allowPrereleaseVersions: allowPrereleaseVersions); " is 201.
Long Statement,NuGet,PackageHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The length of the statement  "		package = sourceRepository.FindPackage (packageId' version' constraintProvider' allowPrereleaseVersions' allowUnlisted: false); " is 127.
Long Statement,NuGet,PackageHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The length of the statement  "			package = localRepository.FindPackage (package.Id' package.Version' allowPrereleaseVersions' allowUnlisted: true) ?? package; " is 125.
Long Statement,NuGet,PackageHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The length of the statement  "			throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnknownPackageSpecificVersion' packageId' version)); " is 147.
Long Statement,NuGet,PackageHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnknownPackage' packageId)); " is 123.
Long Statement,NuGet,PackageHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageHelper.cs,ResolvePackage,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnknownPackageSpecificVersion' packageId' version)); " is 147.
Long Statement,NuGet,PathValidator,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PathValidator.cs,IsValidSource,The length of the statement  "	return PathValidator.IsValidLocalPath (source) || PathValidator.IsValidUncPath (source) || PathValidator.IsValidUrl (source); " is 125.
Long Statement,NuGet,PathValidator,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PathValidator.cs,IsValidLocalPath,The length of the statement  "		return Regex.IsMatch (path.Trim ()' @"^[A-Za-z]:\\") && Path.IsPathRooted (path) && (path.IndexOfAny (_invalidPathChars) == -1); " is 128.
Long Statement,NuGet,PathValidator,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PathValidator.cs,IsValidUrl,The length of the statement  "	// Make sure url starts with protocol:// because Uri.TryCreate() returns true for local and UNC paths even if badly formed. " is 123.
Long Statement,NuGet,RedirectedHttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\RedirectedHttpClient.cs,GetResponseUri,The length of the statement  "			throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnableToResolveUri' Uri)); " is 121.
Long Statement,NuGet,VersionSpec,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,Equals,The length of the statement  "	return Equals (other.MinVersion' MinVersion) && other.IsMinInclusive.Equals (IsMinInclusive) && Equals (other.MaxVersion' MaxVersion) && other.IsMaxInclusive.Equals (IsMaxInclusive); " is 182.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,InstallPackage,The length of the statement  "	IPackage package = PackageHelper.ResolvePackage (SourceRepository' LocalRepository' packageId' version' allowPrereleaseVersions); " is 129.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,InstallPackage,The length of the statement  "	InstallPackage (package' targetFramework: null' ignoreDependencies: ignoreDependencies' allowPrereleaseVersions: allowPrereleaseVersions); " is 138.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,InstallPackage,The length of the statement  "	Execute (package' new InstallWalker (LocalRepository' SourceRepository' targetFramework' Logger' ignoreDependencies' allowPrereleaseVersions)); " is 143.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,ExpandFiles,The length of the statement  "		if (PackageUtility.IsSatellitePackage (package' LocalRepository' targetFramework: null' runtimePackage: out runtimePackage)) { " is 126.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UninstallPackage,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnknownPackage' packageId)); " is 123.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UninstallPackage,The length of the statement  "	Execute (package' new UninstallWalker (LocalRepository' new DependentsWalker (LocalRepository' targetFramework: null)' targetFramework: null' logger: Logger' removeDependencies: removeDependencies' forceRemove: forceRemove)); " is 225.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,RemoveFiles,The length of the statement  "	if (PackageUtility.IsSatellitePackage (package' LocalRepository' targetFramework: null' runtimePackage: out runtimePackage)) { " is 126.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The length of the statement  "	UpdatePackage (packageId' version: null' updateDependencies: updateDependencies' allowPrereleaseVersions: allowPrereleaseVersions); " is 131.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The length of the statement  "	UpdatePackage (packageId' () => SourceRepository.FindPackage (packageId' versionSpec' allowPrereleaseVersions' allowUnlisted: false)' updateDependencies' allowPrereleaseVersions); " is 179.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The length of the statement  "	UpdatePackage (packageId' () => SourceRepository.FindPackage (packageId' version' allowPrereleaseVersions' allowUnlisted: false)' updateDependencies' allowPrereleaseVersions); " is 175.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnknownPackage' packageId)); " is 123.
Long Statement,NuGet,PackageManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageManager.cs,UpdatePackage,The length of the statement  "	Execute (newPackage' new UpdateWalker (LocalRepository' SourceRepository' new DependentsWalker (LocalRepository' targetFramework: null)' NullConstraintProvider.Instance' targetFramework: null' logger: Logger' updateDependencies: updateDependencies' allowPrereleaseVersions: allowPrereleaseVersions)); " is 300.
Long Statement,NuGet,PhysicalPackageFile,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PhysicalPackageFile.cs,Equals,The length of the statement  "	return file != null && String.Equals (SourcePath' file.SourcePath' StringComparison.OrdinalIgnoreCase) && String.Equals (TargetPath' file.TargetPath' StringComparison.OrdinalIgnoreCase); " is 186.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,Save,The length of the statement  "		WriteManifest (package' requiresV4TargetFrameworkSchema ? ManifestVersionUtility.TargetFrameworkSupportVersion : ManifestVersionUtility.DefaultVersion); " is 152.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,RequiresV4TargetFrameworkSchema,The length of the statement  "	bool hasContentOrTool = files.Any (f => f.TargetFramework != null && f.TargetFramework != VersionUtility.UnsupportedFrameworkName && (f.Path.StartsWith (Constants.ContentDirectory + Path.DirectorySeparatorChar' StringComparison.OrdinalIgnoreCase) || f.Path.StartsWith (Constants.ToolsDirectory + Path.DirectorySeparatorChar' StringComparison.OrdinalIgnoreCase))); " is 363.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,RequiresV4TargetFrameworkSchema,The length of the statement  "	bool hasEmptyLibFolder = files.Any (f => f.TargetFramework != null && f.Path.StartsWith (Constants.LibDirectory + Path.DirectorySeparatorChar' StringComparison.OrdinalIgnoreCase) && f.EffectivePath == Constants.PackageEmptyFileName); " is 233.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,ValidateDependencySets,The length of the statement  "			throw new InvalidDataException (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_InvalidPrereleaseDependency' prereleaseDependency.ToString ())); " is 163.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,ValidateReferenceAssemblies,The length of the statement  "		if (!libFiles.Contains (reference) && !libFiles.Contains (reference + ".dll") && !libFiles.Contains (reference + ".exe")) { " is 123.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,ValidateReferenceAssemblies,The length of the statement  "			throw new InvalidDataException (String.Format (CultureInfo.CurrentCulture' NuGetResources.Manifest_InvalidReference' reference)); " is 129.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,AddFiles,The length of the statement  "	List<PhysicalPackageFile> searchFiles = PathResolver.ResolveSearchPattern (basePath' source' destination' _includeEmptyDirectories).ToList (); " is 142.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,AddFiles,The length of the statement  "		searchFiles.RemoveAll (file => file.TargetFramework == null && Path.GetFileName (file.TargetPath) == Constants.PackageEmptyFileName); " is 133.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,AddFiles,The length of the statement  "		throw new FileNotFoundException (String.Format (CultureInfo.CurrentCulture' NuGetResources.PackageAuthoring_FileNotFound' source)); " is 131.
Long Statement,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,IsPrereleaseDependency,The length of the statement  "		return (versionSpec.MinVersion != null && !String.IsNullOrEmpty (dependency.VersionSpec.MinVersion.SpecialVersion)) || (versionSpec.MaxVersion != null && !String.IsNullOrEmpty (dependency.VersionSpec.MaxVersion.SpecialVersion)); " is 228.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,WildcardToRegex,The length of the statement  "		.Replace (@"\*\*"' ".*")// For recursive wildcards that don't end in a slash e.g. **.txt would be treated as a .txt file at any depth " is 133.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,WildcardToRegex,The length of the statement  "		.Replace (@"\*\*"' ".*")// For recursive wildcards that don't end in a slash e.g. **.txt would be treated as a .txt file at any depth " is 133.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolveSearchPattern,The length of the statement  "	IEnumerable<SearchPathResult> searchResults = PerformWildcardSearchInternal (basePath' searchPath' includeEmptyDirectories' out normalizedBasePath); " is 148.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,PerformWildcardSearch,The length of the statement  "	var searchResults = PerformWildcardSearchInternal (basePath' searchPath' includeEmptyDirectories: false' normalizedBasePath: out normalizedBasePath); " is 149.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,PerformWildcardSearchInternal,The length of the statement  "	// Append the basePath to searchPattern and get the search regex. We need to do this because the search regex is matched from line start. " is 137.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,PerformWildcardSearchInternal,The length of the statement  "	// This is a hack to prevent enumerating over the entire directory tree if the only wildcard characters are the ones in the file name.  " is 134.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,PerformWildcardSearchInternal,The length of the statement  "	// Starting from the base path' enumerate over all files and match it using the wildcard expression provided by the user. " is 121.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,GetPathToEnumerateFrom,The length of the statement  "		// For paths without wildcard' we could either have base relative paths (such as lib\foo.dll) or paths outside the base path " is 124.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolvePackagePath,The length of the statement  "	bool isRecursiveWildcardSearch = isWildcardSearch && searchPattern.IndexOf ("**"' StringComparison.OrdinalIgnoreCase) != -1; " is 124.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolvePackagePath,The length of the statement  "	if ((isRecursiveWildcardSearch || isDirectorySearch) && fullPath.StartsWith (searchDirectory' StringComparison.OrdinalIgnoreCase)) { " is 132.
Long Statement,NuGet,PathResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PathResolver.cs,ResolvePackagePath,The length of the statement  "	} else if (!isWildcardSearch && Path.GetExtension (searchPattern).Equals (Path.GetExtension (targetPath)' StringComparison.OrdinalIgnoreCase)) { " is 144.
Long Statement,NuGet,Manifest,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,CreateDependencySet,The length of the statement  "		TargetFramework = dependencySet.TargetFramework != null ? VersionUtility.GetFrameworkString (dependencySet.TargetFramework) : null' " is 131.
Long Statement,NuGet,Manifest,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,CheckSchemaVersion,The length of the statement  "			throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.IncompatibleSchema' packageId' typeof(Manifest).Assembly.GetName ().Version)); " is 173.
Long Statement,NuGet,Manifest,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,ValidateDependencySets,The length of the statement  "				throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.DuplicateDependenciesDefined' metadata.Id' dependency.Id)); " is 154.
Long Statement,NuGet,Manifest,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,ValidateDependencyVersion,The length of the statement  "			if ((!dependency.VersionSpec.IsMaxInclusive || !dependency.VersionSpec.IsMinInclusive) && dependency.VersionSpec.MaxVersion == dependency.VersionSpec.MinVersion) { " is 163.
Long Statement,NuGet,Manifest,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,ValidateDependencyVersion,The length of the statement  "				throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.DependencyHasInvalidVersion' dependency.Id)); " is 140.
Long Statement,NuGet,Manifest,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\Manifest.cs,ValidateDependencyVersion,The length of the statement  "				throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.DependencyHasInvalidVersion' dependency.Id)); " is 140.
Long Statement,NuGet,PackageSource,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSource.cs,Equals,The length of the statement  "	return Name.Equals (other.Name' StringComparison.CurrentCultureIgnoreCase) && Source.Equals (other.Source' StringComparison.OrdinalIgnoreCase); " is 143.
Long Statement,NuGet,DataServicePackage,D:\newReposJune17\themotleyfool_NuGet\src\Core\Packages\DataServicePackage.cs,EnsurePackage,The length of the statement  "	bool refreshPackage = _package == null || !String.Equals (OldHash' PackageHash' StringComparison.OrdinalIgnoreCase) || (_usingMachineCache && !cacheRepository.Exists (Id' packageMetadata.Version)); " is 197.
Long Statement,NuGet,DataServicePackage,D:\newReposJune17\themotleyfool_NuGet\src\Core\Packages\DataServicePackage.cs,EnsurePackage,The length of the statement  "	if (refreshPackage && TryGetPackage (cacheRepository' packageMetadata' out _package) && _package.GetHash (HashProvider).Equals (PackageHash' StringComparison.OrdinalIgnoreCase)) { " is 179.
Long Statement,NuGet,DataServicePackage,D:\newReposJune17\themotleyfool_NuGet\src\Core\Packages\DataServicePackage.cs,ParseDependency,The length of the statement  "	var targetFramework = (tokens.Length > 2 && !String.IsNullOrEmpty (tokens [2])) ? VersionUtility.ParseFrameworkName (tokens [2]) : null; " is 136.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,AddPackageReference,The length of the statement  "	IPackage package = PackageHelper.ResolvePackage (SourceRepository' LocalRepository' NullConstraintProvider.Instance' packageId' version' allowPrereleaseVersions); " is 162.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,AddPackageReference,The length of the statement  "	Execute (package' new UpdateWalker (LocalRepository' SourceRepository' new DependentsWalker (LocalRepository' GetPackageTargetFramework (package.Id))' ConstraintProvider' Project.TargetFramework' NullLogger.Instance' !ignoreDependencies' allowPrereleaseVersions) { " is 264.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,Execute,The length of the statement  "		Logger.Log (MessageLevel.Info' NuGetResources.Log_ProjectAlreadyReferencesPackage' Project.ProjectName' package.GetFullName ()); " is 128.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,Execute,The length of the statement  "			Logger.Log (MessageLevel.Info' NuGetResources.Log_ProjectAlreadyReferencesPackage' Project.ProjectName' operation.Package.GetFullName ()); " is 138.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,AddPackageReferenceToProject,The length of the statement  "	Logger.Log (MessageLevel.Info' NuGetResources.Log_SuccessfullyAddedPackageReference' package.GetFullName ()' Project.ProjectName); " is 130.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The length of the statement  "	IList<IPackageAssemblyReference> assemblyReferences = Project.GetCompatibleItemsCore (package.AssemblyReferences).ToList (); " is 124.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The length of the statement  "	IList<FrameworkAssemblyReference> frameworkReferences = Project.GetCompatibleItemsCore (package.FrameworkAssemblies).ToList (); " is 127.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The length of the statement  "	if (assemblyReferences.Count == 0 && frameworkReferences.Count == 0 && contentFiles.Count == 0 && (package.FrameworkAssemblies.Any () || package.AssemblyReferences.Any () || package.GetContentFiles ().Any ())) { " is 211.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The length of the statement  "		// for portable framework' we want to show the friendly short form (e.g. portable-win8+net45+wp8) instead of ".NETPortable' Profile=Profile104". " is 144.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The length of the statement  "		string targetFrameworkString = VersionUtility.IsPortableFramework (Project.TargetFramework) ? VersionUtility.GetShortFrameworkName (Project.TargetFramework) : Project.TargetFramework.ToString (); " is 195.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnableToFindCompatibleItems' package.GetFullName ()' targetFrameworkString)); " is 172.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,RemovePackageReference,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnknownPackage' packageId)); " is 123.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,RemovePackageReference,The length of the statement  "	Execute (package' new UninstallWalker (LocalRepository' new DependentsWalker (LocalRepository' targetFramework)' targetFramework' NullLogger.Instance' removeDependencies' forceRemove)); " is 185.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,RemovePackageReferenceFromProject,The length of the statement  "	// Get the files and references for this package' that aren't in use by any other packages so we don't have to do reference counting " is 132.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,RemovePackageReferenceFromProject,The length of the statement  "	var assemblyReferencesToDelete = GetCompatibleItemsForPackage (package.Id' package.AssemblyReferences).Except (otherAssemblyReferences' PackageFileComparer.Default); " is 165.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,RemovePackageReferenceFromProject,The length of the statement  "	var contentFilesToDelete = GetCompatibleItemsForPackage (package.Id' package.GetContentFiles ()).Except (otherContentFiles' PackageFileComparer.Default); " is 153.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,RemovePackageReferenceFromProject,The length of the statement  "	Logger.Log (MessageLevel.Info' NuGetResources.Log_SuccessfullyRemovedPackageReference' package.GetFullName ()' Project.ProjectName); " is 132.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "	UpdatePackageReference (packageId' () => SourceRepository.FindPackage (packageId' versionSpec' ConstraintProvider' allowPrereleaseVersions' allowUnlisted: false)' updateDependencies' allowPrereleaseVersions' targetVersionSetExplicitly: versionSpec != null); " is 257.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "	UpdatePackageReference (packageId' () => SourceRepository.FindPackage (packageId' version' ConstraintProvider' allowPrereleaseVersions' allowUnlisted: false)' updateDependencies' allowPrereleaseVersions' targetVersionSetExplicitly: version != null); " is 249.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.ProjectDoesNotHaveReference' Project.ProjectName' packageId)); " is 157.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "	// the condition (allowPrereleaseVersions || targetVersionSetExplicitly || oldPackage.IsReleaseVersion() || !package.IsReleaseVersion() || oldPackage.Version < package.Version) " is 176.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "	if (package != null && oldPackage.Version != package.Version && (allowPrereleaseVersions || targetVersionSetExplicitly || oldPackage.IsReleaseVersion () || !package.IsReleaseVersion () || oldPackage.Version < package.Version)) { " is 228.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "		Logger.Log (MessageLevel.Info' NuGetResources.Log_UpdatingPackages' package.Id' oldPackage.Version' package.Version' Project.ProjectName); " is 138.
Long Statement,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The length of the statement  "			Logger.Log (MessageLevel.Info' NuGetResources.Log_ApplyingConstraints' packageId' VersionUtility.PrettyPrint (constraint)' ConstraintProvider.Source); " is 150.
Long Statement,NuGet,DataServicePackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\DataServicePackageRepository.cs,Search,The length of the statement  "	var shortFrameworkNames = targetFrameworks.Select (name => new FrameworkName (name)).Select (VersionUtility.GetShortFrameworkName); " is 131.
Long Statement,NuGet,DataServicePackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\DataServicePackageRepository.cs,GetUpdates,The length of the statement  "		return PackageRepositoryExtensions.GetUpdatesCore (this' packages' includePrerelease' includeAllVersions' targetFrameworks); " is 124.
Long Statement,NuGet,DataServicePackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\DataServicePackageRepository.cs,GetUpdates,The length of the statement  "	string targetFrameworksValue = targetFrameworks.IsEmpty () ? "" : String.Join ("|"' targetFrameworks.Select (VersionUtility.GetShortFrameworkName)); " is 148.
Long Statement,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,GetResponse,The length of the statement  "	return RequestHelper.GetResponse (webRequestFactory' RaiseSendingRequest' ProxyCache.Instance' CredentialStore.Instance' DefaultCredentialProvider); " is 148.
Long Statement,NuGet,PackageDownloader,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageDownloader.cs,DownloadPackage,The length of the statement  "	string operation = String.Format (CultureInfo.CurrentCulture' NuGetResources.DownloadProgressStatus' package.Id' package.Version); " is 130.
Long Statement,NuGet,ZipPackage,D:\newReposJune17\themotleyfool_NuGet\src\Core\Packages\ZipPackage.cs,EnsureManifest,The length of the statement  "		PackageRelationship relationshipType = package.GetRelationshipsByType (Constants.PackageRelationshipNamespace + PackageBuilder.ManifestRelationType).SingleOrDefault (); " is 168.
Long Statement,NuGet,ZipPackage,D:\newReposJune17\themotleyfool_NuGet\src\Core\Packages\ZipPackage.cs,IsPackageFile,The length of the statement  "	return !ExcludePaths.Any (p => path.StartsWith (p' StringComparison.OrdinalIgnoreCase)) && !PackageUtility.IsManifest (path); " is 125.
Long Statement,NuGet,PackageWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\PackageWalker.cs,Walk,The length of the statement  "			IPackage resolvedDependency = Marker.ResolveDependency (dependency' AllowPrereleaseVersions' preferListedPackages: false) ?? ResolveDependency (dependency); " is 156.
Long Statement,NuGet,PackageWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\PackageWalker.cs,Walk,The length of the statement  "					throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.CircularDependencyDetected' String.Join (" => "' packages.Select (p => p.GetFullName ())))); " is 187.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,OnBeforePackageWalk,The length of the statement  "	if (incompatiblePackages.Any () && !TryUpdate (incompatiblePackages' conflictResult' package' out incompatiblePackages)) { " is 122.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,OnBeforePackageWalk,The length of the statement  "		throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.NewerVersionAlreadyReferenced' package.Id)); " is 139.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,Uninstall,The length of the statement  "	var resolver = new UninstallWalker (repository' dependentsResolver' TargetFramework' NullLogger.Instance' removeDependencies: !IgnoreDependencies' forceRemove: false) { " is 168.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,TryUpdate,The length of the statement  "	var packages = from p in SourceRepository.FindCompatiblePackages (ConstraintProvider' dependentsLookup.Keys' package' TargetFramework' AllowPrereleaseVersions) " is 159.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,TryUpdate,The length of the statement  "		// B 1.5 or B 2.0. In order to achieve this' we add a constraint for version of B 1.0.1 so we stay within those bounds for B. " is 125.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,ResolveDependency,The length of the statement  "	IPackage package = Repository.ResolveDependency (dependency' ConstraintProvider' allowPrereleaseVersions: true' preferListedPackages: false); " is 141.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,ResolveDependency,The length of the statement  "	IPackage sourcePackage = SourceRepository.ResolveDependency (dependency' ConstraintProvider' AllowPrereleaseVersions' preferListedPackages: true); " is 146.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,OnDependencyResolveError,The length of the statement  "		message = String.Format (CultureInfo.CurrentCulture' NuGetResources.AdditonalConstraintsDefined' dependency.Id' VersionUtility.PrettyPrint (spec)' ConstraintProvider.Source); " is 174.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,OnDependencyResolveError,The length of the statement  "	throw new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.UnableToResolveDependency + message' dependency)); " is 145.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,GetDependents,The length of the statement  "	return conflict.DependentsResolver.GetDependents (conflict.Package).Except (packages' PackageEqualityComparer.IdAndVersion); " is 124.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,CreatePackageConflictException,The length of the statement  "		return new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.ConflictErrorWithDependent' package.GetFullName ()' resolvedPackage.GetFullName ()' dependents.Single ().Id)); " is 206.
Long Statement,NuGet,InstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\InstallWalker.cs,CreatePackageConflictException,The length of the statement  "	return new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.ConflictErrorWithDependents' package.GetFullName ()' resolvedPackage.GetFullName ()' String.Join ("' "' dependents.Select (d => d.Id)))); " is 233.
Long Statement,NuGet,UninstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,WarnRemovingPackageBreaksDependents,The length of the statement  "	Logger.Log (MessageLevel.Warning' NuGetResources.Warning_UninstallingPackageWillBreakDependents' package.GetFullName ()' String.Join ("' "' dependents.Select (d => d.GetFullName ()))); " is 184.
Long Statement,NuGet,UninstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,CreatePackageHasDependentsException,The length of the statement  "		return new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.PackageHasDependent' package.GetFullName ()' dependents.Single ().GetFullName ())); " is 179.
Long Statement,NuGet,UninstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,CreatePackageHasDependentsException,The length of the statement  "	return new InvalidOperationException (String.Format (CultureInfo.CurrentCulture' NuGetResources.PackageHasDependents' package.GetFullName ()' String.Join ("' "' dependents.Select (d => d.GetFullName ())))); " is 206.
Long Statement,NuGet,UninstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,ResolveOperations,The length of the statement  "		Logger.Log (MessageLevel.Warning' NuGetResources.Warning_UninstallingPackageWillBreakDependents' pair.Key' String.Join ("' "' pair.Value.Select (p => p.GetFullName ()))); " is 170.
Long Statement,NuGet,UninstallWalker,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageWalker\UninstallWalker.cs,ResolveOperations,The length of the statement  "		Logger.Log (MessageLevel.Warning' NuGetResources.Warning_PackageSkippedBecauseItIsInUse' pair.Key' String.Join ("' "' pair.Value.Select (p => p.GetFullName ()))); " is 162.
Long Statement,NuGet,PackageReferenceRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageReferenceRepository.cs,GetPackageReferences,The length of the statement  "	return _packageReferenceFile.GetPackageReferences ().Where (reference => IsValidReference (reference) && reference.Id.Equals (packageId' StringComparison.OrdinalIgnoreCase)); " is 174.
Long Statement,NuGet,PackageExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageExtensions.cs,IsSatellitePackage,The length of the statement  "	if (!String.IsNullOrEmpty (package.Language) && package.Id.EndsWith ('.' + package.Language' StringComparison.OrdinalIgnoreCase)) { " is 131.
Long Statement,NuGet,PackageExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageExtensions.cs,IsSatellitePackage,The length of the statement  "		return package.DependencySets.SelectMany (s => s.Dependencies).Any (d => d.Id.Equals (corePackageId' StringComparison.OrdinalIgnoreCase) && d.VersionSpec != null && d.VersionSpec.MaxVersion == d.VersionSpec.MinVersion && d.VersionSpec.IsMaxInclusive && d.VersionSpec.IsMinInclusive); " is 283.
Long Statement,NuGet,PackageExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageExtensions.cs,IsEmptyFolder,The length of the statement  "	return packageFile != null && Constants.PackageEmptyFileName.Equals (Path.GetFileName (packageFile.Path)' StringComparison.OrdinalIgnoreCase); " is 142.
Long Statement,NuGet,PackageExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageExtensions.cs,GetSatelliteFiles,The length of the statement  "	return package.GetLibFiles ().Where (file => Path.GetDirectoryName (file.Path).Split (Path.DirectorySeparatorChar).Contains (package.Language' StringComparer.OrdinalIgnoreCase)); " is 178.
Long Statement,NuGet,PackageExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageExtensions.cs,HasProjectContent,The length of the statement  "	return package.FrameworkAssemblies.Any () || package.AssemblyReferences.Any () || package.GetContentFiles ().Any () || package.GetLibFiles ().Any (); " is 149.
Long Statement,NuGet,PackageExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageExtensions.cs,GetCompatiblePackageDependencies,The length of the statement  "	} else if (!VersionUtility.TryGetCompatibleItems (targetFramework' package.DependencySets' out compatibleDependencySets)) { " is 123.
Long Statement,NuGet,PackageExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageExtensions.cs,CollapseById,The length of the statement  "	return source.GroupBy (p => p.Id' StringComparer.OrdinalIgnoreCase).Select (g => g.OrderByDescending (p => p.Version).First ()); " is 128.
Long Statement,NuGet,PackageExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\PackageExtensions.cs,BuildExpressionForTerm,The length of the statement  "	return Expression.AndAlso (Expression.NotEqual (propertyExpression' Expression.Constant (null))' Expression.Call (toLowerExpression' stringContains' Expression.Constant (term.ToLower ()))); " is 189.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The length of the statement  "	// Default allow pre release versions to true here because the caller typically wants to find all packages in this scenario for e.g when checking if a  " is 150.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The length of the statement  "	return FindPackage (repository' packageId' version' NullConstraintProvider.Instance' allowPrereleaseVersions: true' allowUnlisted: true); " is 137.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindPackage,The length of the statement  "	return FindPackage (repository' packageId' version' NullConstraintProvider.Instance' allowPrereleaseVersions' allowUnlisted); " is 125.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,FindCompatiblePackages,The length of the statement  "	where dependency != null && dependency.VersionSpec.Satisfies (package.Version) && (otherConstaint == null || otherConstaint.Satisfies (package.Version)) " is 152.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,Search,The length of the statement  "	return Search (repository' searchTerm' targetFrameworks: Enumerable.Empty<string> ()' allowPrereleaseVersions: allowPrereleaseVersions); " is 136.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependency,The length of the statement  "	return ResolveDependency (repository' dependency' constraintProvider: null' allowPrereleaseVersions: allowPrereleaseVersions' preferListedPackages: preferListedPackages); " is 170.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependency,The length of the statement  "		return dependencyResolver.ResolveDependency (dependency' constraintProvider' allowPrereleaseVersions' preferListedPackages); " is 124.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveDependency,The length of the statement  "	return ResolveDependencyCore (repository' dependency' constraintProvider' allowPrereleaseVersions' preferListedPackages); " is 121.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetUpdates,The length of the statement  "	return serviceBasedRepository != null ? serviceBasedRepository.GetUpdates (packages' includePrerelease' includeAllVersions' targetFrameworks) : repository.GetUpdatesCore (packages' includePrerelease' includeAllVersions' targetFrameworks); " is 238.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetUpdatesCore,The length of the statement  "	ILookup<string' IPackage> sourcePackages = GetUpdateCandidates (repository' packageList' includePrerelease).ToList ().ToLookup (package => package.Id' StringComparer.OrdinalIgnoreCase); " is 185.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,SupportsTargetFrameworks,The length of the statement  "	return targetFramework.IsEmpty () || targetFramework.Any (t => VersionUtility.IsCompatible (t' package.GetSupportedFrameworks ())); " is 131.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetFilterExpression,The length of the statement  "	Expression expressionBody = ids.Select (id => GetCompareExpression (parameterExpression' id.ToLower ())).Aggregate (Expression.OrElse); " is 135.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,GetCompareExpression,The length of the statement  "	Expression toLowerExpression = Expression.Call (propertyExpression' typeof(string).GetMethod ("ToLower"' Type.EmptyTypes)); " is 123.
Long Statement,NuGet,PackageRepositoryExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageRepositoryExtensions.cs,ResolveSafeVersion,The length of the statement  "	// major and minor combination (we want to make some versioning assumptions that the 3rd number is a non-breaking bug fix). This is so that we get the closest version " is 166.
Long Statement,NuGet,FileSystemExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\FileSystemExtensions.cs,DeleteFiles,The length of the statement  "		var directoryFiles = directoryLookup.Contains (directory) ? directoryLookup [directory] : Enumerable.Empty<IPackageFile> (); " is 124.
Long Statement,NuGet,ProjectSystemExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\ProjectSystemExtensions.cs,DeleteFiles,The length of the statement  "	var directoryLookup = files.ToLookup (p => Path.GetDirectoryName (ResolveTargetPath (project' fileTransformers' p.EffectivePath' out transformer))); " is 148.
Long Statement,NuGet,ProjectSystemExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\ProjectSystemExtensions.cs,DeleteFiles,The length of the statement  "		var directoryFiles = directoryLookup.Contains (directory) ? directoryLookup [directory] : Enumerable.Empty<IPackageFile> (); " is 124.
Long Statement,NuGet,CryptoHashProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\CryptoHashProvider.cs,GetHashAlgorithm,The length of the statement  "		return AllowOnlyFipsAlgorithms ? (HashAlgorithm)new SHA256CryptoServiceProvider () : (HashAlgorithm)new SHA256Managed (); " is 121.
Long Statement,NuGet,CryptoHashProvider,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\CryptoHashProvider.cs,GetHashAlgorithm,The length of the statement  "	return AllowOnlyFipsAlgorithms ? (HashAlgorithm)new SHA512CryptoServiceProvider () : (HashAlgorithm)new SHA512Managed (); " is 121.
Long Statement,NuGet,PackageUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageUtility.cs,IsAssembly,The length of the statement  "	return path.EndsWith (".dll"' StringComparison.OrdinalIgnoreCase) || path.EndsWith (".winmd"' StringComparison.OrdinalIgnoreCase) || path.EndsWith (".exe"' StringComparison.OrdinalIgnoreCase); " is 192.
Long Statement,NuGet,PackageUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\PackageUtility.cs,IsSatellitePackage,The length of the statement  "			runtimePackage = repository.FindPackage (runtimePackageId' versionSpec: dependency.VersionSpec' allowPrereleaseVersions: true' allowUnlisted: true); " is 148.
Long Statement,NuGet,Crc32,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\Crc32.cs,Calculate,The length of the statement  "	Debug.Assert ((buffer != null) && (offset >= 0) && (length >= 0) && (offset <= buffer.Length - length)' "check the caller"); " is 124.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,GetPackageLookupPaths,The length of the statement  "		string partialName = version.Version.Build < 1 ? String.Join ("."' packageId' version.Version.Major' version.Version.Minor) : String.Join ("."' packageId' version.Version.Major' version.Version.Minor' version.Version.Build); " is 224.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,GetPackageLookupPaths,The length of the statement  "		var partialNameMatches = GetPackageFiles (partialName).Where (path => FileNameMatchesPattern (packageId' version' path)); " is 121.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FindPackage,The length of the statement  "	// If caching is enabled' check if we have a cached path. Additionally' verify that the file actually exists on disk since it might have moved. " is 143.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FindPackage,The length of the statement  "	if (_enableCaching && _packagePathLookup.TryGetValue (lookupPackageName' out packagePath) && FileSystem.FileExists (packagePath)) { " is 131.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FindPackage,The length of the statement  "	// Lookup files which start with the name "<Id>." and attempt to match it with all possible version string combinations (e.g. 1.2.0' 1.2.0.0)  " is 141.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FindPackage,The length of the statement  "	// before opening the package. To avoid creating file name strings' we attempt to specifically match everything after the last path separator " is 141.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,GetPackage,The length of the statement  "	if (!_packageCache.TryGetValue (path' out cacheEntry) || (cacheEntry != null && lastModified > cacheEntry.LastModifiedTime)) { " is 126.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,OpenPackage,The length of the statement  "		throw new InvalidDataException (String.Format (CultureInfo.CurrentCulture' NuGetResources.ErrorReadingPackage' path)' ex); " is 122.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FileNameMatchesPattern,The length of the statement  "	// When matching by pattern' we will always have a version token. Packages without versions would be matched early on by the version-less path resolver  " is 151.
Long Statement,NuGet,LocalPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\LocalPackageRepository.cs,FileNameMatchesPattern,The length of the statement  "	return name.Length > packageId.Length && SemanticVersion.TryParse (name.Substring (packageId.Length + 1)' out parsedVersion) && parsedVersion == version; " is 153.
Long Statement,NuGet,UriUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\UriUtility.cs,UriEquals,The length of the statement  "	return Uri.Compare (uri1' uri2' UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase) == 0; " is 150.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The length of the statement  "		// We failed to parse the version string once more. So we need to decide if this is unsupported or if we use the default version. " is 129.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ValidatePortableFrameworkProfilePart,The length of the statement  "	if (parts.Any (p => p.StartsWith ("portable"' StringComparison.OrdinalIgnoreCase)) || parts.Any (p => p.StartsWith ("NETPortable"' StringComparison.OrdinalIgnoreCase)) || parts.Any (p => p.StartsWith (".NETPortable"' StringComparison.OrdinalIgnoreCase))) { " is 256.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,The length of the statement  "	if (versionSpec.MinVersion != null && versionSpec.IsMinInclusive && versionSpec.MaxVersion == null && !versionSpec.IsMaxInclusive) { " is 132.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,The length of the statement  "	if (versionSpec.MinVersion != null && versionSpec.MaxVersion != null && versionSpec.MinVersion == versionSpec.MaxVersion && versionSpec.IsMinInclusive && versionSpec.IsMaxInclusive) { " is 183.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetShortFrameworkName,The length of the statement  "	// "windowsphone" string' rather than "sl3-wp". The latter one is also prohibited in portable framework's profile string. " is 121.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkNameFromFilePath,The length of the statement  "				return VersionUtility.ParseFrameworkFolderName (frameworkPart' strictParsing: knownFolders [i] != Constants.ContentDirectory' effectivePath: out effectivePath); " is 160.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryGetCompatibleItems,The length of the statement  "	let frameworks = (item.SupportedFrameworks != null && item.SupportedFrameworks.Any ()) ? item.SupportedFrameworks : new FrameworkName[] { " is 137.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The length of the statement  "	compatibility += CalculateVersionDistance (frameworkName.Version' GetEffectiveFrameworkVersion (frameworkName' targetFrameworkName)); " is 133.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The length of the statement  "		// framework identifier a compatibility score of 10' to make sure it weighs more than the compatibility of matching version. " is 124.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,CalculateVersionDistance,The length of the statement  "	var distance = (projectVersion.Major - targetFrameworkVersion.Major) * 255L * 255 * 255 + (projectVersion.Minor - targetFrameworkVersion.Minor) * 255L * 255 + (projectVersion.Build - targetFrameworkVersion.Build) * 255L + (projectVersion.Revision - targetFrameworkVersion.Revision); " is 282.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetEffectiveFrameworkVersion,The length of the statement  "			var compatibleFramework = profile.SupportedFrameworks.FirstOrDefault (f => VersionUtility.IsCompatible (projectFramework' f)); " is 126.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetCompatibilityBetweenPortableLibraryAndPortableLibrary,The length of the statement  "	// Algorithms: Give a score from 0 to N indicating how close *in version* each package platform is the project’s platforms  " is 122.
Long Statement,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,IsPortableFramework,The length of the statement  "	return framework != null && PortableFrameworkIdentifier.Equals (framework.Identifier' StringComparison.OrdinalIgnoreCase); " is 122.
Long Statement,NuGet,XElementExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\XElementExtensions.cs,HasComment,The length of the statement  "	return element.Nodes ().Any (node => node.NodeType == XmlNodeType.Comment && ((XComment)node).Value.Equals (comment.Value' StringComparison.Ordinal)); " is 150.
Long Statement,NuGet.Analysis.Rules,InitScriptNotUnderToolsRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\InitScriptNotUnderToolsRule.cs,CreatePackageIssue,The length of the statement  "	return new PackageIssue (AnalysisResources.MisplacedInitScriptTitle' String.Format (CultureInfo.CurrentCulture' AnalysisResources.MisplacedInitScriptDescription' file.Path)' AnalysisResources.MisplacedInitScriptSolution); " is 221.
Long Statement,NuGet.Analysis.Rules,InvalidFrameworkFolderRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\InvalidFrameworkFolderRule.cs,CreatePackageIssue,The length of the statement  "	return new PackageIssue (AnalysisResources.InvalidFrameworkTitle' String.Format (CultureInfo.CurrentCulture' AnalysisResources.InvalidFrameworkDescription' target)' AnalysisResources.InvalidFrameworkSolution); " is 209.
Long Statement,NuGet.Analysis.Rules,MisplacedAssemblyRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedAssemblyRule.cs,Validate,The length of the statement  "		} else if (!directory.StartsWith (Constants.LibDirectory + Path.DirectorySeparatorChar' StringComparison.OrdinalIgnoreCase)) { " is 126.
Long Statement,NuGet.Analysis.Rules,MisplacedAssemblyRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedAssemblyRule.cs,Validate,The length of the statement  "			if (path.EndsWith (".dll"' StringComparison.OrdinalIgnoreCase) || path.EndsWith (".winmd"' StringComparison.OrdinalIgnoreCase)) { " is 129.
Long Statement,NuGet.Analysis.Rules,MisplacedAssemblyRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedAssemblyRule.cs,CreatePackageIssueForAssembliesUnderLib,The length of the statement  "	return new PackageIssue (AnalysisResources.AssemblyUnderLibTitle' String.Format (CultureInfo.CurrentCulture' AnalysisResources.AssemblyUnderLibDescription' target)' AnalysisResources.AssemblyUnderLibSolution); " is 209.
Long Statement,NuGet.Analysis.Rules,MisplacedAssemblyRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedAssemblyRule.cs,CreatePackageIssueForAssembliesOutsideLib,The length of the statement  "	return new PackageIssue (AnalysisResources.AssemblyOutsideLibTitle' String.Format (CultureInfo.CurrentCulture' AnalysisResources.AssemblyOutsideLibDescription' target)' AnalysisResources.AssemblyOutsideLibSolution); " is 215.
Long Statement,NuGet.Analysis.Rules,MisplacedScriptFileRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedScriptFileRule.cs,Validate,The length of the statement  "			if (!name.Equals ("install"' StringComparison.OrdinalIgnoreCase) && !name.Equals ("uninstall"' StringComparison.OrdinalIgnoreCase) && !name.Equals ("init"' StringComparison.OrdinalIgnoreCase)) { " is 194.
Long Statement,NuGet.Analysis.Rules,MisplacedScriptFileRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedScriptFileRule.cs,CreatePackageIssueForMisplacedScript,The length of the statement  "	return new PackageIssue (AnalysisResources.ScriptOutsideToolsTitle' String.Format (CultureInfo.CurrentCulture' AnalysisResources.ScriptOutsideToolsDescription' target)' AnalysisResources.ScriptOutsideToolsSolution); " is 215.
Long Statement,NuGet.Analysis.Rules,MisplacedScriptFileRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedScriptFileRule.cs,CreatePackageIssueForUnrecognizedScripts,The length of the statement  "	return new PackageIssue (AnalysisResources.UnrecognizedScriptTitle' String.Format (CultureInfo.CurrentCulture' AnalysisResources.UnrecognizedScriptDescription' target)' AnalysisResources.UnrecognizedScriptSolution); " is 215.
Long Statement,NuGet.Analysis.Rules,MisplacedTransformFileRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedTransformFileRule.cs,Validate,The length of the statement  "		if (!path.EndsWith (CodeTransformExtension' StringComparison.OrdinalIgnoreCase) && !path.EndsWith (ConfigTransformExtension' StringComparison.OrdinalIgnoreCase)) { " is 163.
Long Statement,NuGet.Analysis.Rules,MisplacedTransformFileRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MisplacedTransformFileRule.cs,CreatePackageIssueForMisplacedContent,The length of the statement  "	return new PackageIssue (AnalysisResources.MisplacedTransformFileTitle' String.Format (CultureInfo.CurrentCulture' AnalysisResources.MisplacedTransformFileDescription' path)' AnalysisResources.MisplacedTransformFileSolution); " is 225.
Long Statement,NuGet.Analysis.Rules,MissingSummaryRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\MissingSummaryRule.cs,Validate,The length of the statement  "		yield return new PackageIssue (AnalysisResources.MissingSummaryTitle' AnalysisResources.MissingSummaryDescription' AnalysisResources.MissingSummarySolution); " is 157.
Long Statement,NuGet.Analysis.Rules,WinRTNameIsObsoleteRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\WinRTNameIsObsoleteRule.cs,CreateIssue,The length of the statement  "	return new PackageIssue (AnalysisResources.WinRTObsoleteTitle' String.Format (CultureInfo.CurrentCulture' AnalysisResources.WinRTObsoleteDescription' file.Path)' AnalysisResources.WinRTObsoleteSolution); " is 203.
Long Statement,NuGet.Runtime,AssemblyNameExtensions,D:\newReposJune17\themotleyfool_NuGet\src\Core\Extensions\AssemblyNameExtensions.cs,GetPublicKeyTokenString,The length of the statement  "	return String.Join (String.Empty' assemblyName.GetPublicKeyToken ().Select (b => b.ToString ("x2"' CultureInfo.InvariantCulture))); " is 131.
Long Statement,NuGet.Runtime,AssemblyBinding,D:\newReposJune17\themotleyfool_NuGet\src\Core\Runtime\AssemblyBinding.cs,ToXElement,The length of the statement  "	XElement dependenyAssembly = new XElement (GetQualifiedName ("dependentAssembly")' new XElement (GetQualifiedName ("assemblyIdentity")' new XAttribute ("name"' Name)' new XAttribute ("publicKeyToken"' PublicKeyToken)' new XAttribute ("culture"' Culture)' new XAttribute ("processorArchitecture"' ProcessorArchitecture ?? String.Empty))' new XElement (GetQualifiedName ("bindingRedirect")' new XAttribute ("oldVersion"' OldVersion)' new XAttribute ("newVersion"' NewVersion))); " is 476.
Long Statement,NuGet.Runtime,AssemblyBinding,D:\newReposJune17\themotleyfool_NuGet\src\Core\Runtime\AssemblyBinding.cs,ToXElement,The length of the statement  "		dependenyAssembly.Add (new XElement (GetQualifiedName ("codeBase")' new XAttribute ("href"' CodeBaseHref)' new XAttribute ("version"' CodeBaseVersion))); " is 153.
Long Statement,NuGet.Runtime,AssemblyBinding,D:\newReposJune17\themotleyfool_NuGet\src\Core\Runtime\AssemblyBinding.cs,Equals,The length of the statement  "	return SafeEquals (Name' other.Name) && SafeEquals (PublicKeyToken' other.PublicKeyToken) && SafeEquals (Culture' other.Culture) && SafeEquals (ProcessorArchitecture' other.ProcessorArchitecture); " is 196.
Long Statement,NuGet.Runtime,BindingRedirectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\Runtime\BindingRedirectManager.cs,AddBindingRedirects,The length of the statement  "				// Since we have a binding element' the assembly binding node (parent node) must exist. We don't need to do anything more here. " is 127.
Long Statement,NuGet.Runtime,BindingRedirectResolver,D:\newReposJune17\themotleyfool_NuGet\src\Core\Runtime\BindingRedirectResolver.cs,GetAssemblies,The length of the statement  "	return GetAssemblies (Directory.GetFiles (path' "*.dll")' domain).Concat (GetAssemblies (Directory.GetFiles (path' "*.exe")' domain)); " is 134.
Complex Conditional,NuGet,VersionSpec,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,ToString,The conditional expression  "MinVersion != null && IsMinInclusive && MaxVersion == null && !IsMaxInclusive"  is complex.
Complex Conditional,NuGet,VersionSpec,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,ToString,The conditional expression  "MinVersion != null && MaxVersion != null && MinVersion == MaxVersion && IsMinInclusive && IsMaxInclusive"  is complex.
Complex Conditional,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,ExtractPackageFilesToProject,The conditional expression  "assemblyReferences.Count == 0 && frameworkReferences.Count == 0 && contentFiles.Count == 0 && (package.FrameworkAssemblies.Any () || package.AssemblyReferences.Any () || package.GetContentFiles ().Any ())"  is complex.
Complex Conditional,NuGet,ProjectManager,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectManager.cs,UpdatePackageReference,The conditional expression  "package != null && oldPackage.Version != package.Version && (allowPrereleaseVersions || targetVersionSetExplicitly || oldPackage.IsReleaseVersion () || !package.IsReleaseVersion () || oldPackage.Version < package.Version)"  is complex.
Complex Conditional,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,The conditional expression  "versionSpec.MinVersion != null && versionSpec.IsMinInclusive && versionSpec.MaxVersion == null && !versionSpec.IsMaxInclusive"  is complex.
Complex Conditional,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,PrettyPrint,The conditional expression  "versionSpec.MinVersion != null && versionSpec.MaxVersion != null && versionSpec.MinVersion == versionSpec.MaxVersion && versionSpec.IsMinInclusive && versionSpec.IsMaxInclusive"  is complex.
Empty Catch Block,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadProfilesFromFramework,The method has an empty catch block.
Empty Catch Block,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadProfilesFromFramework,The method has an empty catch block.
Empty Catch Block,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The method has an empty catch block.
Empty Catch Block,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The method has an empty catch block.
Empty Catch Block,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteDirectory,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,GetFiles,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,GetFiles,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,GetDirectories,The method has an empty catch block.
Empty Catch Block,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,GetDirectories,The method has an empty catch block.
Empty Catch Block,NuGet,MachineCache,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\MachineCache.cs,TryAct,The method has an empty catch block.
Empty Catch Block,NuGet,MachineCache,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\MachineCache.cs,TryAct,The method has an empty catch block.
Empty Catch Block,NuGet,SharedPackageRepository,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\SharedPackageRepository.cs,GetStoreDocument,The method has an empty catch block.
Magic Number,NuGet,STSAuthHelper,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\STSAuthHelper.cs,TryRetrieveSTSToken,The following statement contains a magic number: MemoryCache.Instance.GetOrAdd (cacheKey' () => GetSTSToken (requestUri' endPoint' realm)' TimeSpan.FromMinutes (30)' absoluteExpiration: true);  
Magic Number,NuGet,NetPortableProfile,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfile.cs,GetHashCode,The following statement contains a magic number: return Name.GetHashCode () * 3137 + SupportedFrameworks.GetHashCode ();  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: try {  	var document = XDocument.Load (stream);  	var root = document.Root;  	if (root.Name.LocalName.Equals ("Framework"' StringComparison.Ordinal)) {  		string identifer = root.GetOptionalAttributeValue ("Identifier");  		if (identifer == null) {  			return null;  		}  		string versionString = root.GetOptionalAttributeValue ("MinimumVersion");  		if (versionString == null) {  			return null;  		}  		Version version;  		if (!Version.TryParse (versionString' out version)) {  			return null;  		}  		string profile = root.GetOptionalAttributeValue ("Profile");  		if (profile == null) {  			profile = "";  		}  		if (profile.EndsWith ("*"' StringComparison.Ordinal)) {  			profile = profile.Substring (0' profile.Length - 1);  			// special case' if it was 'WindowsPhone7*'' we want it to be WindowsPhone71  			if (profile.Equals ("WindowsPhone7"' StringComparison.OrdinalIgnoreCase)) {  				profile = "WindowsPhone71";  			} else if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  				// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   				// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  				// This is how the Portable Library xml describes a WP7 platform' as shown here:  				//   				// <Framework  				//     Identifier="Silverlight"  				//     Profile="WindowsPhone*"  				//     MinimumVersion="4.0"  				//     DisplayName="Windows Phone"  				//     MinimumVersionDisplayName="7" />  				//  				// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  				version = new Version (3' 0);  			}  		}  		return new FrameworkName (identifer' version' profile);  	}  } catch (XmlException) {  } catch (IOException) {  } catch (SecurityException) {  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: try {  	var document = XDocument.Load (stream);  	var root = document.Root;  	if (root.Name.LocalName.Equals ("Framework"' StringComparison.Ordinal)) {  		string identifer = root.GetOptionalAttributeValue ("Identifier");  		if (identifer == null) {  			return null;  		}  		string versionString = root.GetOptionalAttributeValue ("MinimumVersion");  		if (versionString == null) {  			return null;  		}  		Version version;  		if (!Version.TryParse (versionString' out version)) {  			return null;  		}  		string profile = root.GetOptionalAttributeValue ("Profile");  		if (profile == null) {  			profile = "";  		}  		if (profile.EndsWith ("*"' StringComparison.Ordinal)) {  			profile = profile.Substring (0' profile.Length - 1);  			// special case' if it was 'WindowsPhone7*'' we want it to be WindowsPhone71  			if (profile.Equals ("WindowsPhone7"' StringComparison.OrdinalIgnoreCase)) {  				profile = "WindowsPhone71";  			} else if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  				// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   				// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  				// This is how the Portable Library xml describes a WP7 platform' as shown here:  				//   				// <Framework  				//     Identifier="Silverlight"  				//     Profile="WindowsPhone*"  				//     MinimumVersion="4.0"  				//     DisplayName="Windows Phone"  				//     MinimumVersionDisplayName="7" />  				//  				// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  				version = new Version (3' 0);  			}  		}  		return new FrameworkName (identifer' version' profile);  	}  } catch (XmlException) {  } catch (IOException) {  } catch (SecurityException) {  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: if (root.Name.LocalName.Equals ("Framework"' StringComparison.Ordinal)) {  	string identifer = root.GetOptionalAttributeValue ("Identifier");  	if (identifer == null) {  		return null;  	}  	string versionString = root.GetOptionalAttributeValue ("MinimumVersion");  	if (versionString == null) {  		return null;  	}  	Version version;  	if (!Version.TryParse (versionString' out version)) {  		return null;  	}  	string profile = root.GetOptionalAttributeValue ("Profile");  	if (profile == null) {  		profile = "";  	}  	if (profile.EndsWith ("*"' StringComparison.Ordinal)) {  		profile = profile.Substring (0' profile.Length - 1);  		// special case' if it was 'WindowsPhone7*'' we want it to be WindowsPhone71  		if (profile.Equals ("WindowsPhone7"' StringComparison.OrdinalIgnoreCase)) {  			profile = "WindowsPhone71";  		} else if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  			// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   			// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  			// This is how the Portable Library xml describes a WP7 platform' as shown here:  			//   			// <Framework  			//     Identifier="Silverlight"  			//     Profile="WindowsPhone*"  			//     MinimumVersion="4.0"  			//     DisplayName="Windows Phone"  			//     MinimumVersionDisplayName="7" />  			//  			// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  			version = new Version (3' 0);  		}  	}  	return new FrameworkName (identifer' version' profile);  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: if (root.Name.LocalName.Equals ("Framework"' StringComparison.Ordinal)) {  	string identifer = root.GetOptionalAttributeValue ("Identifier");  	if (identifer == null) {  		return null;  	}  	string versionString = root.GetOptionalAttributeValue ("MinimumVersion");  	if (versionString == null) {  		return null;  	}  	Version version;  	if (!Version.TryParse (versionString' out version)) {  		return null;  	}  	string profile = root.GetOptionalAttributeValue ("Profile");  	if (profile == null) {  		profile = "";  	}  	if (profile.EndsWith ("*"' StringComparison.Ordinal)) {  		profile = profile.Substring (0' profile.Length - 1);  		// special case' if it was 'WindowsPhone7*'' we want it to be WindowsPhone71  		if (profile.Equals ("WindowsPhone7"' StringComparison.OrdinalIgnoreCase)) {  			profile = "WindowsPhone71";  		} else if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  			// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   			// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  			// This is how the Portable Library xml describes a WP7 platform' as shown here:  			//   			// <Framework  			//     Identifier="Silverlight"  			//     Profile="WindowsPhone*"  			//     MinimumVersion="4.0"  			//     DisplayName="Windows Phone"  			//     MinimumVersionDisplayName="7" />  			//  			// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  			version = new Version (3' 0);  		}  	}  	return new FrameworkName (identifer' version' profile);  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: if (profile.EndsWith ("*"' StringComparison.Ordinal)) {  	profile = profile.Substring (0' profile.Length - 1);  	// special case' if it was 'WindowsPhone7*'' we want it to be WindowsPhone71  	if (profile.Equals ("WindowsPhone7"' StringComparison.OrdinalIgnoreCase)) {  		profile = "WindowsPhone71";  	} else if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  		// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   		// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  		// This is how the Portable Library xml describes a WP7 platform' as shown here:  		//   		// <Framework  		//     Identifier="Silverlight"  		//     Profile="WindowsPhone*"  		//     MinimumVersion="4.0"  		//     DisplayName="Windows Phone"  		//     MinimumVersionDisplayName="7" />  		//  		// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  		version = new Version (3' 0);  	}  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: if (profile.EndsWith ("*"' StringComparison.Ordinal)) {  	profile = profile.Substring (0' profile.Length - 1);  	// special case' if it was 'WindowsPhone7*'' we want it to be WindowsPhone71  	if (profile.Equals ("WindowsPhone7"' StringComparison.OrdinalIgnoreCase)) {  		profile = "WindowsPhone71";  	} else if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  		// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   		// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  		// This is how the Portable Library xml describes a WP7 platform' as shown here:  		//   		// <Framework  		//     Identifier="Silverlight"  		//     Profile="WindowsPhone*"  		//     MinimumVersion="4.0"  		//     DisplayName="Windows Phone"  		//     MinimumVersionDisplayName="7" />  		//  		// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  		version = new Version (3' 0);  	}  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: if (profile.Equals ("WindowsPhone7"' StringComparison.OrdinalIgnoreCase)) {  	profile = "WindowsPhone71";  } else if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  	// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   	// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  	// This is how the Portable Library xml describes a WP7 platform' as shown here:  	//   	// <Framework  	//     Identifier="Silverlight"  	//     Profile="WindowsPhone*"  	//     MinimumVersion="4.0"  	//     DisplayName="Windows Phone"  	//     MinimumVersionDisplayName="7" />  	//  	// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  	version = new Version (3' 0);  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: if (profile.Equals ("WindowsPhone7"' StringComparison.OrdinalIgnoreCase)) {  	profile = "WindowsPhone71";  } else if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  	// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   	// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  	// This is how the Portable Library xml describes a WP7 platform' as shown here:  	//   	// <Framework  	//     Identifier="Silverlight"  	//     Profile="WindowsPhone*"  	//     MinimumVersion="4.0"  	//     DisplayName="Windows Phone"  	//     MinimumVersionDisplayName="7" />  	//  	// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  	version = new Version (3' 0);  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  	// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   	// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  	// This is how the Portable Library xml describes a WP7 platform' as shown here:  	//   	// <Framework  	//     Identifier="Silverlight"  	//     Profile="WindowsPhone*"  	//     MinimumVersion="4.0"  	//     DisplayName="Windows Phone"  	//     MinimumVersionDisplayName="7" />  	//  	// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  	version = new Version (3' 0);  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: if (identifer.Equals ("Silverlight"' StringComparison.OrdinalIgnoreCase) && profile.Equals ("WindowsPhone"' StringComparison.OrdinalIgnoreCase) && version == new Version (4' 0)) {  	// Since the beginning of NuGet' we have been using "SL3-WP" as the moniker to target WP7 project.   	// However' it's been discovered recently that the real TFM for WP7 project is "Silverlight' Version=4.0' Profile=WindowsPhone".  	// This is how the Portable Library xml describes a WP7 platform' as shown here:  	//   	// <Framework  	//     Identifier="Silverlight"  	//     Profile="WindowsPhone*"  	//     MinimumVersion="4.0"  	//     DisplayName="Windows Phone"  	//     MinimumVersionDisplayName="7" />  	//  	// To maintain consistent behavior with previous versions of NuGet' we want to change it back to "SL3-WP" nonetheless.  	version = new Version (3' 0);  }  
Magic Number,NuGet,NetPortableProfileTable,D:\newReposJune17\themotleyfool_NuGet\src\Core\NETPortable\NetPortableProfileTable.cs,LoadSupportedFramework,The following statement contains a magic number: version = new Version (3' 0);  
Magic Number,NuGet,PackageName,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageName.cs,GetHashCode,The following statement contains a magic number: return _packageId.GetHashCode () * 3137 + _version.GetHashCode ();  
Magic Number,NuGet,SemanticVersion,D:\newReposJune17\themotleyfool_NuGet\src\Core\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: if (SpecialVersion != null) {  	hashCode = hashCode * 4567 + SpecialVersion.GetHashCode ();  }  
Magic Number,NuGet,SemanticVersion,D:\newReposJune17\themotleyfool_NuGet\src\Core\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * 4567 + SpecialVersion.GetHashCode ();  
Magic Number,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteDirectory,The following statement contains a magic number: try {  	path = GetFullPath (path);  	Directory.Delete (path' recursive);  	// The directory is not guranteed to be gone since there could be  	// other open handles. Wait' up to half a second' until the directory is gone.  	for (int i = 0; Directory.Exists (path) && i < 5; ++i) {  		System.Threading.Thread.Sleep (100);  	}  	Logger.Log (MessageLevel.Debug' NuGetResources.Debug_RemovedFolder' path);  } catch (DirectoryNotFoundException) {  }  
Magic Number,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteDirectory,The following statement contains a magic number: try {  	path = GetFullPath (path);  	Directory.Delete (path' recursive);  	// The directory is not guranteed to be gone since there could be  	// other open handles. Wait' up to half a second' until the directory is gone.  	for (int i = 0; Directory.Exists (path) && i < 5; ++i) {  		System.Threading.Thread.Sleep (100);  	}  	Logger.Log (MessageLevel.Debug' NuGetResources.Debug_RemovedFolder' path);  } catch (DirectoryNotFoundException) {  }  
Magic Number,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteDirectory,The following statement contains a magic number: for (int i = 0; Directory.Exists (path) && i < 5; ++i) {  	System.Threading.Thread.Sleep (100);  }  
Magic Number,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteDirectory,The following statement contains a magic number: for (int i = 0; Directory.Exists (path) && i < 5; ++i) {  	System.Threading.Thread.Sleep (100);  }  
Magic Number,NuGet,PhysicalFileSystem,D:\newReposJune17\themotleyfool_NuGet\src\Core\ProjectSystem\PhysicalFileSystem.cs,DeleteDirectory,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,NuGet,MachineCache,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\MachineCache.cs,AddPackage,The following statement contains a magic number: if (files.Count >= MaxPackages) {  	// It's expensive to hit the file system to get the last accessed date for files  	// To reduce this cost from occuring frequently' we'll purge packages in batches allowing for a 20% buffer.  	var filesToDelete = files.OrderBy (FileSystem.GetLastAccessed).Take (files.Count - (int)(0.8 * MaxPackages)).ToList ();  	TryClear (filesToDelete);  }  
Magic Number,NuGet,PackageReference,D:\newReposJune17\themotleyfool_NuGet\src\Core\Repositories\PackageReference.cs,GetHashCode,The following statement contains a magic number: return Id.GetHashCode () * 3137 + (Version == null ? 0 : Version.GetHashCode ());  
Magic Number,NuGet,VersionSpec,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = (MinVersion != null ? MinVersion.GetHashCode () : 0);  	result = (result * 397) ^ IsMinInclusive.GetHashCode ();  	result = (result * 397) ^ (MaxVersion != null ? MaxVersion.GetHashCode () : 0);  	result = (result * 397) ^ IsMaxInclusive.GetHashCode ();  	return result;  }  
Magic Number,NuGet,VersionSpec,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = (MinVersion != null ? MinVersion.GetHashCode () : 0);  	result = (result * 397) ^ IsMinInclusive.GetHashCode ();  	result = (result * 397) ^ (MaxVersion != null ? MaxVersion.GetHashCode () : 0);  	result = (result * 397) ^ IsMaxInclusive.GetHashCode ();  	return result;  }  
Magic Number,NuGet,VersionSpec,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = (MinVersion != null ? MinVersion.GetHashCode () : 0);  	result = (result * 397) ^ IsMinInclusive.GetHashCode ();  	result = (result * 397) ^ (MaxVersion != null ? MaxVersion.GetHashCode () : 0);  	result = (result * 397) ^ IsMaxInclusive.GetHashCode ();  	return result;  }  
Magic Number,NuGet,VersionSpec,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ IsMinInclusive.GetHashCode ();  
Magic Number,NuGet,VersionSpec,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (MaxVersion != null ? MaxVersion.GetHashCode () : 0);  
Magic Number,NuGet,VersionSpec,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionSpec.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ IsMaxInclusive.GetHashCode ();  
Magic Number,NuGet,PackageBuilder,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\PackageBuilder.cs,ValidateSpecialVersionLength,The following statement contains a magic number: return version == null || version.SpecialVersion == null || version.SpecialVersion.Length <= 20;  
Magic Number,NuGet,PackageSource,D:\newReposJune17\themotleyfool_NuGet\src\Core\PackageSource\PackageSource.cs,GetHashCode,The following statement contains a magic number: return Name.GetHashCode () * 3137 + Source.GetHashCode ();  
Magic Number,NuGet,HashCodeCombiner,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\HashCodeCombiner.cs,AddInt32,The following statement contains a magic number: _combinedHash64 = ((_combinedHash64 << 5) + _combinedHash64) ^ i;  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: using (var response = GetResponse ()) {  	// Total response length  	int length = (int)response.ContentLength;  	using (Stream stream = response.GetResponseStream ()) {  		// in some circumstances' the Content-Length response header is missing' resulting in  		// the ContentLength = -1. In which case' we copy the whole stream and do not report progress.  		if (length < 0) {  			using (var memoryStream = new MemoryStream ()) {  				stream.CopyTo (memoryStream' ChunkSize);  				buffer = memoryStream.ToArray ();  			}  			// reporting fake progress as 100%  			OnProgressAvailable (100);  		} else {  			// We read the response stream chunk by chunk (each chunk is 4KB).   			// After reading each chunk' we report the progress based on the total number bytes read so far.  			int totalReadSoFar = 0;  			buffer = new byte[length];  			while (totalReadSoFar < length) {  				int bytesRead = stream.Read (buffer' totalReadSoFar' Math.Min (length - totalReadSoFar' ChunkSize));  				if (bytesRead == 0) {  					break;  				} else {  					totalReadSoFar += bytesRead;  					OnProgressAvailable ((totalReadSoFar * 100) / length);  				}  			}  		}  	}  }  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: using (var response = GetResponse ()) {  	// Total response length  	int length = (int)response.ContentLength;  	using (Stream stream = response.GetResponseStream ()) {  		// in some circumstances' the Content-Length response header is missing' resulting in  		// the ContentLength = -1. In which case' we copy the whole stream and do not report progress.  		if (length < 0) {  			using (var memoryStream = new MemoryStream ()) {  				stream.CopyTo (memoryStream' ChunkSize);  				buffer = memoryStream.ToArray ();  			}  			// reporting fake progress as 100%  			OnProgressAvailable (100);  		} else {  			// We read the response stream chunk by chunk (each chunk is 4KB).   			// After reading each chunk' we report the progress based on the total number bytes read so far.  			int totalReadSoFar = 0;  			buffer = new byte[length];  			while (totalReadSoFar < length) {  				int bytesRead = stream.Read (buffer' totalReadSoFar' Math.Min (length - totalReadSoFar' ChunkSize));  				if (bytesRead == 0) {  					break;  				} else {  					totalReadSoFar += bytesRead;  					OnProgressAvailable ((totalReadSoFar * 100) / length);  				}  			}  		}  	}  }  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: using (Stream stream = response.GetResponseStream ()) {  	// in some circumstances' the Content-Length response header is missing' resulting in  	// the ContentLength = -1. In which case' we copy the whole stream and do not report progress.  	if (length < 0) {  		using (var memoryStream = new MemoryStream ()) {  			stream.CopyTo (memoryStream' ChunkSize);  			buffer = memoryStream.ToArray ();  		}  		// reporting fake progress as 100%  		OnProgressAvailable (100);  	} else {  		// We read the response stream chunk by chunk (each chunk is 4KB).   		// After reading each chunk' we report the progress based on the total number bytes read so far.  		int totalReadSoFar = 0;  		buffer = new byte[length];  		while (totalReadSoFar < length) {  			int bytesRead = stream.Read (buffer' totalReadSoFar' Math.Min (length - totalReadSoFar' ChunkSize));  			if (bytesRead == 0) {  				break;  			} else {  				totalReadSoFar += bytesRead;  				OnProgressAvailable ((totalReadSoFar * 100) / length);  			}  		}  	}  }  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: using (Stream stream = response.GetResponseStream ()) {  	// in some circumstances' the Content-Length response header is missing' resulting in  	// the ContentLength = -1. In which case' we copy the whole stream and do not report progress.  	if (length < 0) {  		using (var memoryStream = new MemoryStream ()) {  			stream.CopyTo (memoryStream' ChunkSize);  			buffer = memoryStream.ToArray ();  		}  		// reporting fake progress as 100%  		OnProgressAvailable (100);  	} else {  		// We read the response stream chunk by chunk (each chunk is 4KB).   		// After reading each chunk' we report the progress based on the total number bytes read so far.  		int totalReadSoFar = 0;  		buffer = new byte[length];  		while (totalReadSoFar < length) {  			int bytesRead = stream.Read (buffer' totalReadSoFar' Math.Min (length - totalReadSoFar' ChunkSize));  			if (bytesRead == 0) {  				break;  			} else {  				totalReadSoFar += bytesRead;  				OnProgressAvailable ((totalReadSoFar * 100) / length);  			}  		}  	}  }  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: if (length < 0) {  	using (var memoryStream = new MemoryStream ()) {  		stream.CopyTo (memoryStream' ChunkSize);  		buffer = memoryStream.ToArray ();  	}  	// reporting fake progress as 100%  	OnProgressAvailable (100);  } else {  	// We read the response stream chunk by chunk (each chunk is 4KB).   	// After reading each chunk' we report the progress based on the total number bytes read so far.  	int totalReadSoFar = 0;  	buffer = new byte[length];  	while (totalReadSoFar < length) {  		int bytesRead = stream.Read (buffer' totalReadSoFar' Math.Min (length - totalReadSoFar' ChunkSize));  		if (bytesRead == 0) {  			break;  		} else {  			totalReadSoFar += bytesRead;  			OnProgressAvailable ((totalReadSoFar * 100) / length);  		}  	}  }  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: if (length < 0) {  	using (var memoryStream = new MemoryStream ()) {  		stream.CopyTo (memoryStream' ChunkSize);  		buffer = memoryStream.ToArray ();  	}  	// reporting fake progress as 100%  	OnProgressAvailable (100);  } else {  	// We read the response stream chunk by chunk (each chunk is 4KB).   	// After reading each chunk' we report the progress based on the total number bytes read so far.  	int totalReadSoFar = 0;  	buffer = new byte[length];  	while (totalReadSoFar < length) {  		int bytesRead = stream.Read (buffer' totalReadSoFar' Math.Min (length - totalReadSoFar' ChunkSize));  		if (bytesRead == 0) {  			break;  		} else {  			totalReadSoFar += bytesRead;  			OnProgressAvailable ((totalReadSoFar * 100) / length);  		}  	}  }  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: OnProgressAvailable (100);  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: while (totalReadSoFar < length) {  	int bytesRead = stream.Read (buffer' totalReadSoFar' Math.Min (length - totalReadSoFar' ChunkSize));  	if (bytesRead == 0) {  		break;  	} else {  		totalReadSoFar += bytesRead;  		OnProgressAvailable ((totalReadSoFar * 100) / length);  	}  }  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: if (bytesRead == 0) {  	break;  } else {  	totalReadSoFar += bytesRead;  	OnProgressAvailable ((totalReadSoFar * 100) / length);  }  
Magic Number,NuGet,HttpClient,D:\newReposJune17\themotleyfool_NuGet\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: OnProgressAvailable ((totalReadSoFar * 100) / length);  
Magic Number,NuGet,Crc32,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\Crc32.cs,Calculate,The following statement contains a magic number: while (--length >= 0) {  	crc32 = crcTable [(crc32 ^ buffer [offset++]) & 0xFF] ^ (crc32 >> 8);  }  
Magic Number,NuGet,Crc32,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\Crc32.cs,Calculate,The following statement contains a magic number: crc32 = crcTable [(crc32 ^ buffer [offset++]) & 0xFF] ^ (crc32 >> 8);  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (parts.Length > 2) {  	throw new ArgumentException (NuGetResources.InvalidFrameworkNameFormat' "frameworkName");  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (Int32.TryParse (versionPart' out versionNumber)) {  	// Remove the extra numbers  	if (versionPart.Length > 4) {  		versionPart = versionPart.Substring (0' 4);  	}  	// Make sure it has at least 2 digits so it parses as a valid version  	versionPart = versionPart.PadRight (2' '0');  	versionPart = String.Join ("."' versionPart.ToCharArray ());  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (Int32.TryParse (versionPart' out versionNumber)) {  	// Remove the extra numbers  	if (versionPart.Length > 4) {  		versionPart = versionPart.Substring (0' 4);  	}  	// Make sure it has at least 2 digits so it parses as a valid version  	versionPart = versionPart.PadRight (2' '0');  	versionPart = String.Join ("."' versionPart.ToCharArray ());  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (Int32.TryParse (versionPart' out versionNumber)) {  	// Remove the extra numbers  	if (versionPart.Length > 4) {  		versionPart = versionPart.Substring (0' 4);  	}  	// Make sure it has at least 2 digits so it parses as a valid version  	versionPart = versionPart.PadRight (2' '0');  	versionPart = String.Join ("."' versionPart.ToCharArray ());  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (versionPart.Length > 4) {  	versionPart = versionPart.Substring (0' 4);  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: if (versionPart.Length > 4) {  	versionPart = versionPart.Substring (0' 4);  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: versionPart = versionPart.Substring (0' 4);  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,ParseFrameworkName,The following statement contains a magic number: versionPart = versionPart.PadRight (2' '0');  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,The following statement contains a magic number: if (value.Length < 3) {  	return false;  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,The following statement contains a magic number: value = value.Substring (1' value.Length - 2);  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,TryParseVersionSpec,The following statement contains a magic number: if (parts.Length > 2) {  	return false;  } else if (parts.All (String.IsNullOrEmpty)) {  	// If all parts are empty' then neither of upper or lower bounds were specified. Version spec is of the format (']  	return false;  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: if (targetFrameworkName.IsPortableFramework ()) {  	if (frameworkName.IsPortableFramework ()) {  		return GetCompatibilityBetweenPortableLibraryAndPortableLibrary (frameworkName' targetFrameworkName);  	} else {  		// we divide by 2 to ensure Portable framework has less compatibility value than specific framework.  		return GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary (frameworkName' targetFrameworkName) / 2;  	}  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: if (frameworkName.IsPortableFramework ()) {  	return GetCompatibilityBetweenPortableLibraryAndPortableLibrary (frameworkName' targetFrameworkName);  } else {  	// we divide by 2 to ensure Portable framework has less compatibility value than specific framework.  	return GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary (frameworkName' targetFrameworkName) / 2;  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: return GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary (frameworkName' targetFrameworkName) / 2;  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: if (targetFrameworkName.Identifier.Equals (frameworkName.Identifier' StringComparison.OrdinalIgnoreCase)) {  	// Let's say a package has two framework folders: 'net40' and 'portable-net45+wp8'.  	// The package is installed into a net45 project. We want to pick the 'net40' folder' even though  	// the 'net45' in portable folder has a matching version with the project's framework.  	//  	// So' in order to achieve that' here we give the folder that has matching identifer with the project's   	// framework identifier a compatibility score of 10' to make sure it weighs more than the compatibility of matching version.  	compatibility += 10 * (1L << 32);  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: if (targetFrameworkName.Identifier.Equals (frameworkName.Identifier' StringComparison.OrdinalIgnoreCase)) {  	// Let's say a package has two framework folders: 'net40' and 'portable-net45+wp8'.  	// The package is installed into a net45 project. We want to pick the 'net40' folder' even though  	// the 'net45' in portable folder has a matching version with the project's framework.  	//  	// So' in order to achieve that' here we give the folder that has matching identifer with the project's   	// framework identifier a compatibility score of 10' to make sure it weighs more than the compatibility of matching version.  	compatibility += 10 * (1L << 32);  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: compatibility += 10 * (1L << 32);  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetProfileCompatibility,The following statement contains a magic number: compatibility += 10 * (1L << 32);  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetCompatibilityBetweenPortableLibraryAndPortableLibrary,The following statement contains a magic number: score = score * 50 + targetFrameworkProfile.SupportedFrameworks.Count;  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary,The following statement contains a magic number: if (compatibleFramework != null) {  	var score = GetProfileCompatibility (frameworkName' compatibleFramework);  	// This is to ensure that if two portable frameworks have the same score'  	// we pick the one that has less number of supported platforms.  	// The *2 is to make up for the /2 to which the result of this method is subject.  	score -= (profile.SupportedFrameworks.Count * 2);  	return score;  }  
Magic Number,NuGet,VersionUtility,D:\newReposJune17\themotleyfool_NuGet\src\Core\Utility\VersionUtility.cs,GetCompatibilityBetweenPortableLibraryAndNonPortableLibrary,The following statement contains a magic number: score -= (profile.SupportedFrameworks.Count * 2);  
Magic Number,NuGet.Analysis.Rules,InvalidFrameworkFolderRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\InvalidFrameworkFolderRule.cs,Validate,The following statement contains a magic number: foreach (var file in package.GetFiles ()) {  	string path = file.Path;  	string[] parts = path.Split (Path.DirectorySeparatorChar);  	if (parts.Length >= 3 && parts [0].Equals (Constants.LibDirectory' StringComparison.OrdinalIgnoreCase)) {  		set.Add (parts [1]);  	}  }  
Magic Number,NuGet.Analysis.Rules,InvalidFrameworkFolderRule,D:\newReposJune17\themotleyfool_NuGet\src\Core\Analysis\Rules\InvalidFrameworkFolderRule.cs,Validate,The following statement contains a magic number: if (parts.Length >= 3 && parts [0].Equals (Constants.LibDirectory' StringComparison.OrdinalIgnoreCase)) {  	set.Add (parts [1]);  }  
Missing Default,NuGet,ManifestReader,D:\newReposJune17\themotleyfool_NuGet\src\Core\Authoring\ManifestReader.cs,ReadMetadataValue,The following switch statement is missing a default case: switch (element.Name.LocalName) {  case "id":  	manifestMetadata.Id = value;  	break;  case "version":  	manifestMetadata.Version = value;  	break;  case "authors":  	manifestMetadata.Authors = value;  	break;  case "owners":  	manifestMetadata.Owners = value;  	break;  case "licenseUrl":  	manifestMetadata.LicenseUrl = value;  	break;  case "projectUrl":  	manifestMetadata.ProjectUrl = value;  	break;  case "iconUrl":  	manifestMetadata.IconUrl = value;  	break;  case "requireLicenseAcceptance":  	manifestMetadata.RequireLicenseAcceptance = XmlConvert.ToBoolean (value);  	break;  case "description":  	manifestMetadata.Description = value;  	break;  case "summary":  	manifestMetadata.Summary = value;  	break;  case "releaseNotes":  	manifestMetadata.ReleaseNotes = value;  	break;  case "copyright":  	manifestMetadata.Copyright = value;  	break;  case "language":  	manifestMetadata.Language = value;  	break;  case "title":  	manifestMetadata.Title = value;  	break;  case "tags":  	manifestMetadata.Tags = value;  	break;  case "dependencies":  	manifestMetadata.DependencySets = ReadDependencySet (element);  	break;  case "frameworkAssemblies":  	manifestMetadata.FrameworkAssemblies = ReadFrameworkAssemblies (element);  	break;  case "references":  	manifestMetadata.References = ReadReferences (element);  	break;  }  
