Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NuGetConsole.Host.PowerShell.Implementation,NuGetHostUserInterface,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\NuGetHostUserInterface.cs,Prompt,Cyclomatic complexity of the method is 9
Complex Method,NuGetConsole.Host.PowerShell.Implementation,NuGetHostUserInterface,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\NuGetHostUserInterface.cs,PromptCollection,Cyclomatic complexity of the method is 8
Complex Method,NuGetConsole.Host,CommandExpansion,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\Utils\CommandExpansion.cs,GetExpansions,Cyclomatic complexity of the method is 8
Long Parameter List,NuGetConsole.Host.PowerShell.Implementation,NuGetHostUserInterface,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\NuGetHostUserInterface.cs,PromptForCredential,The method has 6 parameters. Parameters: caption' message' userName' targetName' allowedCredentialTypes' options
Long Parameter List,NuGetConsole.Host.PowerShell,NativeMethods,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\NativeMethods.cs,CredUIPromptForCredentials,The method has 10 parameters. Parameters: pUiInfo' pszTargetName' reserved' dwAuthError' pszUserName' ulUserNameMaxChars' pszPassword' ulPasswordMaxChars' pfSave' dwFlags
Long Parameter List,NuGetConsole.Host.PowerShell,NativeMethods,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\NativeMethods.cs,CredUIPromptForCredentials,The method has 7 parameters. Parameters: caption' message' userName' targetName' allowedCredentialTypes' options' parentHwnd
Long Parameter List,NuGetConsole.Host,MethodBinder,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\Utils\MethodBinder.cs,TryInvoke,The method has 5 parameters. Parameters: type' name' target' args' result
Long Identifier,NuGetConsole.Host.PowerShell.Implementation,PowerShellHost,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\PowerShellHost.cs,,The length of the parameter _updateWorkingDirectoryPending is 30.
Long Statement,NuGetConsole.Host.PowerShell.Implementation,RunspaceDispatcher,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\RunspaceDispatcher.cs,InvokeAsync,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' CommonResources.Argument_Cannot_Be_Null_Or_Empty' command)' "command"); " is 141.
Long Statement,NuGetConsole.Host.PowerShell.Implementation,RunspaceDispatcher,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\RunspaceDispatcher.cs,SetExecutionPolicy,The length of the statement  "            string command = string.Format(CultureInfo.InvariantCulture' "Set-ExecutionPolicy {0} -Scope {1} -Force"' policy.ToString()' scope.ToString()); " is 143.
Long Statement,NuGetConsole.Host.PowerShell.Implementation,RunspaceDispatcher,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\RunspaceDispatcher.cs,ExecuteScript,The length of the statement  "                   "$__pc_args=@(); $input|%{$__pc_args+=$_}; & " + PathHelper.EscapePSPath(fullPath) + " $__pc_args[0] $__pc_args[1] $__pc_args[2]; Remove-Variable __pc_args -Scope 0"' " is 166.
Long Statement,NuGetConsole.Host.PowerShell.Implementation,RunspaceDispatcher,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\RunspaceDispatcher.cs,InvokeCoreAsync,The length of the statement  "            // REVIEW: This could probably be done in a Task so that we can return to the caller before even taking the dispatcher lock " is 123.
Long Statement,NuGetConsole.Host.PowerShell.Implementation,PowerShellHost,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\PowerShellHost.cs,GetExpansions,The length of the statement  "                            @"$__pc_args=@();$input|%{$__pc_args+=$_};if(Test-Path Function:\TabExpansion2){(TabExpansion2 $__pc_args[0] $__pc_args[0].length).CompletionMatches|%{$_.CompletionText}}else{TabExpansion $__pc_args[0] $__pc_args[1]};Remove-Variable __pc_args -Scope 0;"' " is 254.
Long Statement,NuGetConsole.Host.PowerShell,HostUtilities,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\HostUtilities.cs,GetProfileCommands,The length of the statement  "            PSObject dollarProfile = HostUtilities.GetDollarProfile(allUsersAllHosts' allUsersCurrentHost' currentUserAllHosts' currentUserCurrentHost); " is 140.
Long Statement,NuGetConsole.Host.PowerShell,HostUtilities,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\HostUtilities.cs,GetProfileCommands,The length of the statement  "            string[] profilePaths = new string[] { allUsersAllHosts' allUsersCurrentHost' currentUserAllHosts' currentUserCurrentHost }; " is 124.
Empty Catch Block,NuGetConsole.Host.PowerShell,HostUtilities,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\HostUtilities.cs,GetAllUsersFolderPath,The method has an empty catch block.
Empty Catch Block,NuGetConsole.Host,ComplexCommand,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\Utils\ComplexCommand.cs,CheckComplete,The method has an empty catch block.
Magic Number,NuGetConsole.Host.PowerShell.Implementation,NuGetHostUserInterface,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\NuGetHostUserInterface.cs,ToColor,The following statement contains a magic number: _consoleColors = new Color[16] {                                                     Color.FromRgb(0x00' 0x00' 0x00)'                                                     Color.FromRgb(0x00' 0x00' 0x80)'                                                     Color.FromRgb(0x00' 0x80' 0x00)'                                                     Color.FromRgb(0x00' 0x80' 0x80)'                                                     Color.FromRgb(0x80' 0x00' 0x00)'                                                     Color.FromRgb(0x80' 0x00' 0x80)'                                                     Color.FromRgb(0x80' 0x80' 0x00)'                                                     Color.FromRgb(0xC0' 0xC0' 0xC0)'                                                     Color.FromRgb(0x80' 0x80' 0x80)'                                                     Color.FromRgb(0x00' 0x00' 0xFF)'                                                     Color.FromRgb(0x00' 0xFF' 0x00)'                                                     Color.FromRgb(0x00' 0xFF' 0xFF)'                                                     Color.FromRgb(0xFF' 0x00' 0x00)'                                                     Color.FromRgb(0xFF' 0x00' 0xFF)'                                                     Color.FromRgb(0xFF' 0xFF' 0x00)'                                                     Color.FromRgb(0xFF' 0xFF' 0xFF)'                                                 };
Missing Default,NuGetConsole.Host.PowerShell.Implementation,AsyncPowerShellHost,D:\research\architectureSmells\repos1\themotleyfool_NuGet\src\VsConsole\PowerShellHost\AsyncPowerShellHost.cs,ExecuteHost,The following switch statement is missing a default case: switch (e.PipelineStateInfo.State)                      {                          case PipelineState.Completed:                          case PipelineState.Failed:                          case PipelineState.Stopped:                              if (e.PipelineStateInfo.Reason != null)                              {                                  ReportError(e.PipelineStateInfo.Reason);                              }                                OnExecuteCommandEnd();                              ExecuteEnd.Raise(this' EventArgs.Empty);                              break;                      }
