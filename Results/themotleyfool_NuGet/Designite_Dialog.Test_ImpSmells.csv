Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,CreateOnlineProvider,Cyclomatic complexity of the method is 8
Complex Method,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,CreateSolutionInstalledProvider,Cyclomatic complexity of the method is 9
Complex Method,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,CreateSolutionOnlineProvider,Cyclomatic complexity of the method is 8
Complex Method,NuGet.Dialog.Test,SolutionUpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionUpdatesProviderTest.cs,CreateSolutionUpdatesProvider,Cyclomatic complexity of the method is 9
Complex Method,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,CreateUpdatesProvider,Cyclomatic complexity of the method is 9
Long Parameter List,NuGet.Dialog.Test,InstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\InstalledProviderTest.cs,CreateInstalledProvider,The method has 6 parameters. Parameters: packageManager' localRepository' project' scriptExecutor' solutionManager' packageRestoreManager
Long Parameter List,NuGet.Dialog.Test,MockTreeNode,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\Mocks\MockTreeNode.cs,MockTreeNode,The method has 5 parameters. Parameters: parent' provider' numberOfPackages' collapseVersions' supportsPrereleasePackages
Long Parameter List,NuGet.Dialog.Test,MockTreeNode,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\Mocks\MockTreeNode.cs,MockTreeNode,The method has 5 parameters. Parameters: parent' provider' packages' collapseVersions' supportsPrereleasePackages
Long Parameter List,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,CreateOnlineProvider,The method has 8 parameters. Parameters: packageManager' localRepository' repositoryFactory' packageSourceProvider' project' scriptExecutor' solutionManager' onlyOneSource
Long Parameter List,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,CreateSolutionInstalledProvider,The method has 8 parameters. Parameters: packageManager' localRepository' repositoryFactory' packageSourceProvider' scriptExecutor' solutionManager' userNotifierServices' packageRestoreManager
Long Parameter List,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,CreateSolutionOnlineProvider,The method has 7 parameters. Parameters: packageManager' localRepository' repositoryFactory' packageSourceProvider' scriptExecutor' solutionManager' userNotifierServices
Long Parameter List,NuGet.Dialog.Test,SolutionUpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionUpdatesProviderTest.cs,CreateSolutionUpdatesProvider,The method has 7 parameters. Parameters: packageManager' localRepository' repositoryFactory' packageSourceProvider' scriptExecutor' solutionManager' userNotifierServices
Long Parameter List,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,CreateUpdatesProvider,The method has 8 parameters. Parameters: packageManager' localRepository' repositoryFactory' packageSourceProvider' project' scriptExecutor' userNotifierServices' solutionManager
Long Statement,NuGet.Dialog.Test,InstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\InstalledProviderTest.cs,ExecuteMethodInvokesUninstallScriptWhenThePackageContainsOne,The length of the statement  "            var provider = CreateInstalledProvider(packageManager.Object' null' project.Object' scriptExecutor.Object' solutionManager.Object); " is 131.
Long Statement,NuGet.Dialog.Test,InstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\InstalledProviderTest.cs,ExecuteMethodInvokesUninstallScriptWhenThePackageContainsOne,The length of the statement  "                    scriptExecutor.Verify(p => p.Execute(It.IsAny<string>()' "uninstall.ps1"' packageA' project.Object' It.IsAny<FrameworkName>()' It.IsAny<ILogger>())' Times.Once()); " is 163.
Long Statement,NuGet.Dialog.Test,InstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\InstalledProviderTest.cs,CreateProjectManager,The length of the statement  "            return new ProjectManager(new MockPackageRepository()' new DefaultPackagePathResolver(projectSystem)' projectSystem' localRepository); " is 134.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodCallsInstallPackageMethodOnPackageManager,The length of the statement  "            packageManager.Setup(p => p.GetProjectManager(It.Is<Project>(s => s == project.Object))).Returns(projectManager.Object); " is 120.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodCallsInstallPackageMethodOnPackageManager,The length of the statement  "            var provider = CreateOnlineProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' project: project.Object); " is 142.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodCallsInstallPackageMethodOnPackageManager,The length of the statement  "            mockPackageManager.Setup(p => p.GetProjectManager(It.Is<Project>(s => s == project.Object))).Returns(projectManager.Object); " is 124.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodCallsInstallPackageMethodOnPackageManager,The length of the statement  "                mockPackageManager.Verify(p => p.InstallPackage(projectManager.Object' packageB' It.IsAny<IEnumerable<PackageOperation>>()' false' includePrerelease' provider)' Times.Once()); " is 175.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,SearchTreeNodeHonorsTheIncludePrereleaseAttribute,The length of the statement  "            packageManager.Setup(p => p.GetProjectManager(It.Is<Project>(s => s == project.Object))).Returns(projectManager.Object); " is 120.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,SearchTreeNodeHonorsTheIncludePrereleaseAttribute,The length of the statement  "            var provider = CreateOnlineProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' project: project.Object); " is 142.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,SearchTreeNodeHonorsTheIncludePrereleaseAttribute,The length of the statement  "            mockPackageManager.Setup(p => p.GetProjectManager(It.Is<Project>(s => s == project.Object))).Returns(projectManager.Object); " is 124.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodInvokesScript,The length of the statement  "            var packageB = PackageUtility.CreatePackage("B"' "2.0"' content: new string[] { "hello world" }' tools: new string[] { "install.ps1"' "uninstall.ps1" }); " is 153.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodInvokesScript,The length of the statement  "               projectManager' It.IsAny<IPackage>()' It.IsAny<IEnumerable<PackageOperation>>()' false' false' It.IsAny<ILogger>())).Callback( " is 126.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodInvokesScript,The length of the statement  "            var provider = CreateOnlineProvider(packageManager.Object' localRepository' null' null' project.Object' scriptExecutor.Object' solutionManager.Object); " is 151.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodInvokesScript,The length of the statement  "                    scriptExecutor.Verify(p => p.Execute(It.IsAny<string>()' PowerShellScripts.Install' packageB' project.Object' It.IsAny<FrameworkName>()' It.IsAny<ILogger>())' Times.Once()); " is 173.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodInstallPackagesWithInitScript,The length of the statement  "            var packageB = PackageUtility.CreatePackage("B"' "2.0"' content: new string[] { "hello world" }' tools: new string[] { "init.ps1" }); " is 133.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodInstallPackagesWithInitScript,The length of the statement  "            packageManager.Setup(p => p.InstallPackage(projectManager' packageB' It.IsAny<IEnumerable<PackageOperation>>()' false' false' It.IsAny<ILogger>())). " is 148.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodInstallPackagesWithInitScript,The length of the statement  "            var provider = CreateOnlineProvider(packageManager.Object' null' null' null' project.Object' scriptExecutor.Object' solutionManager.Object); " is 140.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodInstallPackagesWithInitScript,The length of the statement  "                    scriptExecutor.Verify(p => p.Execute(It.IsAny<string>()' PowerShellScripts.Init' packageB' null' null' It.IsAny<ILogger>())' Times.Once()); " is 139.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,ExecuteMethodInstallPackagesWithInitScript,The length of the statement  "                       projectManager' It.IsAny<IPackage>()' It.IsAny<IEnumerable<PackageOperation>>()' false' false' It.IsAny<ILogger>())' Times.Once()); " is 131.
Long Statement,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,CreateProjectManager,The length of the statement  "            return new ProjectManager(sourceRepository' new DefaultPackagePathResolver(projectSystem)' projectSystem' localRepository); " is 123.
Long Statement,NuGet.Dialog.Test,PackagesSearchNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesSearchNodeTest.cs,CreatePackagesSearchNode,The length of the statement  "            PackagesTreeNodeBase baseTreeNode = baseNode ?? new MockTreeNode(parentTreeNode' provider' numberOfPackages' collapseVersions); " is 127.
Long Statement,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,AreExpressionsEqual,The length of the statement  "                Assert.Equal((aConcatCall.Arguments[0] as MemberExpression).Member' (bConcatCall.Arguments[0] as MemberExpression).Member); " is 123.
Long Statement,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,AreExpressionsEqual,The length of the statement  "                Assert.Equal((aConcatCall.Arguments[1] as MemberExpression).Member' (bConcatCall.Arguments[1] as MemberExpression).Member); " is 123.
Long Statement,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,ExecuteMethodCallsInstallPackageMethodOnPackageManager,The length of the statement  "            var provider = CreateSolutionInstalledProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object); " is 128.
Long Statement,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,ExecuteMethodCallsUninstallPackageMethodOnPackageManager,The length of the statement  "            var provider = CreateSolutionInstalledProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' userNotifierServices: mockWindowService.Object); " is 176.
Long Statement,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,ExecuteMethodCallsUninstallPackageMethodForSolutionLevelPackage,The length of the statement  "            var provider = CreateSolutionInstalledProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object); " is 128.
Long Statement,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,ExecuteMethodDoNotCallInstallPackageIfUserPressCancelOnTheProjectSelectorButton,The length of the statement  "            var provider = CreateSolutionInstalledProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' userNotifierServices: mockWindowService.Object); " is 176.
Long Statement,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,ExecuteMethodCallsInstallPackageMethodOnPackageManager,The length of the statement  "            var provider = CreateSolutionOnlineProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object); " is 125.
Long Statement,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,InstallPackageInvokeInitScript,The length of the statement  "            var provider = CreateSolutionOnlineProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' scriptExecutor: scriptExecutor.Object); " is 164.
Long Statement,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,InstallPackageInvokeInitScript,The length of the statement  "                    scriptExecutor.Verify(p => p.Execute("x:\\nuget"' "init.ps1"' packageB' null' null' It.IsAny<ILogger>())' Times.Once()); " is 120.
Long Statement,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,InstallPackageInvokeInstallScript,The length of the statement  "                           .Raises(p => p.PackageReferenceAdded += (o' a) => { }' new PackageOperationEventArgs(packageB' fileSystem.As<IFileSystem>().Object' "x:\\nuget")); " is 146.
Long Statement,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,InstallPackageInvokeInstallScript,The length of the statement  "            var provider = CreateSolutionOnlineProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' scriptExecutor: scriptExecutor.Object); " is 164.
Long Statement,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,InstallPackageInvokeInstallScript,The length of the statement  "                    scriptExecutor.Verify(p => p.Execute("x:\\nuget"' "install.ps1"' packageB' project1' It.IsAny<FrameworkName>()' It.IsAny<ILogger>())' Times.Once()); " is 148.
Long Statement,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,ExecuteMethodDoNotCallInstallPackageIfUserPressCancelOnTheProjectSelectorButton,The length of the statement  "            var provider = CreateSolutionOnlineProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' userNotifierServices: mockWindowService.Object); " is 173.
Long Statement,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,ExecuteMethodDoNotCallInstallPackageIfUserDoesNotSelectAnyProject,The length of the statement  "            var provider = CreateSolutionOnlineProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' userNotifierServices: mockWindowService.Object); " is 173.
Long Statement,NuGet.Dialog.Test,SolutionUpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionUpdatesProviderTest.cs,ExecuteMethodCallUpdatePackageOnAllProjects,The length of the statement  "            var provider = CreateSolutionUpdatesProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' userNotifierServices: mockWindowService.Object); " is 174.
Long Statement,NuGet.Dialog.Test,SolutionUpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionUpdatesProviderTest.cs,ExecuteMethodDoNotCallUpdatePackageIfNoProjectIsChecked,The length of the statement  "            var provider = CreateSolutionUpdatesProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' userNotifierServices: mockWindowService.Object); " is 174.
Long Statement,NuGet.Dialog.Test,SolutionUpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionUpdatesProviderTest.cs,ExecuteUninstallsSolutionLevelPackageWhenUpdating,The length of the statement  "            var packageA_10 = PackageUtility.CreatePackage("A"' "1.0"' content: null' assemblyReferences: null' tools: new[] { "init.ps1" }' dependencies: null); " is 149.
Long Statement,NuGet.Dialog.Test,SolutionUpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionUpdatesProviderTest.cs,ExecuteUninstallsSolutionLevelPackageWhenUpdating,The length of the statement  "            var packageA_12 = PackageUtility.CreatePackage("A"' "1.2"' content: null' assemblyReferences: null' tools: new[] { "init.ps1" }' dependencies: null); " is 149.
Long Statement,NuGet.Dialog.Test,SolutionUpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionUpdatesProviderTest.cs,ExecuteUninstallsSolutionLevelPackageWhenUpdating,The length of the statement  "            var provider = CreateSolutionUpdatesProvider(packageManager.Object' localRepository' solutionManager: solutionManager.Object' userNotifierServices: mockWindowService.Object); " is 174.
Long Statement,NuGet.Dialog.Test,SolutionUpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionUpdatesProviderTest.cs,ExecuteUninstallsSolutionLevelPackageWhenUpdating,The length of the statement  "                        new[] { new PackageOperation(packageA_10' PackageAction.Uninstall)' new PackageOperation(packageA_12' PackageAction.Install) }' " is 127.
Long Statement,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,ExecuteMethodCallsUpdatePackageMethodOnPackageManager,The length of the statement  "            packageManager.Setup(p => p.GetProjectManager(It.Is<Project>(s => s == project.Object))).Returns(projectManager.Object); " is 120.
Long Statement,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,ExecuteMethodCallsUpdatePackageMethodOnPackageManager,The length of the statement  "            var provider = CreateUpdatesProvider(packageManager.Object' localRepository' project: project.Object' userNotifierServices: mockWindowServices.Object' solutionManager: solutionManager.Object); " is 192.
Long Statement,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,ExecuteMethodCallsUpdatePackageMethodOnPackageManager,The length of the statement  "                packageManager.Verify(p => p.UpdatePackage(projectManager.Object' packageA2' It.IsAny<IEnumerable<PackageOperation>>()' true' includePrerelease' provider)' Times.Once()); " is 170.
Long Statement,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,ExecuteMethodInvokeInstallScriptAndUninstallScript,The length of the statement  "            var packageA2 = PackageUtility.CreatePackage("A"' "2.0"' content: new string[] { "hello world" }' tools: new string[] { "install.ps1" }); " is 137.
Long Statement,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,ExecuteMethodInvokeInstallScriptAndUninstallScript,The length of the statement  "               projectManager' It.IsAny<IPackage>()' It.IsAny<IEnumerable<PackageOperation>>()' true' false' It.IsAny<ILogger>())).Callback( " is 125.
Long Statement,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,ExecuteMethodInvokeInstallScriptAndUninstallScript,The length of the statement  "            var provider = CreateUpdatesProvider(packageManager.Object' localRepository' null' null' project.Object' scriptExecutor.Object' null' solutionManager.Object); " is 158.
Long Statement,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,ExecuteMethodInvokeInstallScriptAndUninstallScript,The length of the statement  "                    scriptExecutor.Verify(p => p.Execute(It.IsAny<string>()' "uninstall.ps1"' packageA1' project.Object' It.IsAny<FrameworkName>()' It.IsAny<ILogger>())' Times.Once()); " is 164.
Long Statement,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,ExecuteMethodInvokeInstallScriptAndUninstallScript,The length of the statement  "                    scriptExecutor.Verify(p => p.Execute(It.IsAny<string>()' "install.ps1"' packageA2' project.Object' It.IsAny<FrameworkName>()' It.IsAny<ILogger>())' Times.Once()); " is 162.
Long Statement,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,CreateProjectManager,The length of the statement  "            return new ProjectManager(sourceRepository' new DefaultPackagePathResolver(projectSystem)' projectSystem' localRepository); " is 123.
Long Statement,NuGet.Dialog.Test,UpdatesTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesTreeNodeTest.cs,PropertyNameIsCorrect,The length of the statement  "            UpdatesTreeNode node = CreateUpdatesTreeNode(localRepository' sourceRepository' includePrerelease: true' category: category); " is 125.
Long Statement,NuGet.Dialog.Test,UpdatesTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesTreeNodeTest.cs,GetPackagesOnlyReturnPackagesCompatibleWithTheProjects,The length of the statement  "            sourceRepository.AddPackage(PackageUtility.CreatePackage("A"' "1.9"' assemblyReferences: new string[] { "lib\\sl4\\a.dll" })); " is 126.
Long Statement,NuGet.Dialog.Test,UpdatesTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesTreeNodeTest.cs,GetPackagesOnlyReturnPackagesCompatibleWithTheProjects,The length of the statement  "            sourceRepository.AddPackage(PackageUtility.CreatePackage("B"' "2.0"' assemblyReferences: new string[] { "lib\\net20\\b.dll" })); " is 128.
Long Statement,NuGet.Dialog.Test,UpdatesTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesTreeNodeTest.cs,GetPackagesFindsUpdatesForFilteredSetOfPackages,The length of the statement  "            sourceRepository.Setup(s => s.GetUpdates(It.IsAny<IEnumerable<IPackage>>()' true' false' It.IsAny<IEnumerable<FrameworkName>>())) " is 129.
Long Statement,NuGet.Dialog.Test,UpdatesTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesTreeNodeTest.cs,GetPackagesFindsUpdatesForFilteredSetOfPackages,The length of the statement  "                            .Callback((IEnumerable<IPackage> a' bool includePrerelease' bool includeAllVersions' IEnumerable<FrameworkName> frameworks) => actual = a) " is 138.
Long Statement,NuGet.Dialog.Test,UpdatesTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesTreeNodeTest.cs,GetPackagesFindsUpdatesForFilteredSetOfPackages,The length of the statement  "            var node = new UpdatesTreeNode(provider' "Mock"' parentTreeNode' localRepository' sourceRepository.As<IPackageRepository>().Object); " is 132.
Magic Number,NuGet.Dialog.Test,InstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\InstalledProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal(2' descriptors.Count);
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal(4' descriptors.Count);
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal("Title"' descriptors[2].SortProperties.First());
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal("Id"' descriptors[2].SortProperties.Last());
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal(ListSortDirection.Ascending' descriptors[2].Direction);
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal("Title"' descriptors[3].SortProperties.First());
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal("Id"' descriptors[3].SortProperties.Last());
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal(ListSortDirection.Descending' descriptors[3].Direction);
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,RootNodeIsPopulatedWithCorrectNumberOfNodes,The following statement contains a magic number: Assert.Equal(3' extentionsTree.Nodes.Count);
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,RootNodeIsPopulatedWithCorrectNumberOfNodes,The following statement contains a magic number: Assert.IsType(typeof(SimpleTreeNode)' extentionsTree.Nodes[2]);
Magic Number,NuGet.Dialog.Test,OnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\OnlineProviderTest.cs,RootNodeIsPopulatedWithCorrectNumberOfNodes,The following statement contains a magic number: Assert.Equal("Two"' extentionsTree.Nodes[2].Name);
Magic Number,NuGet.Dialog.Test,PackagesProviderBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesProviderBaseTest.cs,AfterSearchIsDoneTheOriginalNodeIsResetToTheFirstPage,The following statement contains a magic number: provider.SelectedNode.CurrentPage = 2;
Magic Number,NuGet.Dialog.Test,PackagesProviderBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesProviderBaseTest.cs,AfterSearchIsDoneTheOriginalNodeIsResetToTheFirstPage,The following statement contains a magic number: Assert.Equal(2' provider.SelectedNode.CurrentPage);
Magic Number,NuGet.Dialog.Test,PackagesSearchNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesSearchNodeTest.cs,SupportsPrereleasePackagesMatchBehaviorOfBaseNode,The following statement contains a magic number: var baseNode = new MockTreeNode(                  new Mock<IVsExtensionsTreeNode>().Object'                   new MockPackagesProvider()'                   10'                   true'                   supportsPrereleasePackages);
Magic Number,NuGet.Dialog.Test,PackagesSearchNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesSearchNodeTest.cs,SetSearchTextMethodChangesQuery,The following statement contains a magic number: PackagesSearchNode node = CreatePackagesSearchNode("A"' 5);
Magic Number,NuGet.Dialog.Test,PackagesSearchNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesSearchNodeTest.cs,GetPackagesReturnsCorrectPackagesBasedOnExtensions,The following statement contains a magic number: PackagesSearchNode node = CreatePackagesSearchNode("A"' 5);
Magic Number,NuGet.Dialog.Test,PackagesSearchNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesSearchNodeTest.cs,GetPackagesReturnsCorrectPackagesBasedOnExtensions,The following statement contains a magic number: Assert.Equal(5' packages.Count);
Magic Number,NuGet.Dialog.Test,PackagesSearchNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesSearchNodeTest.cs,GetPackagesReturnsUsesSearchTermPassedInConstructorForSearching,The following statement contains a magic number: Assert.Equal(2' packages.Count);
Magic Number,NuGet.Dialog.Test,PackagesSearchNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesSearchNodeTest.cs,GetPackagesDoNotCollapseVersionsIfBaseNodeDoesNotDoSo,The following statement contains a magic number: Assert.Equal(2' packages.Count);
Magic Number,NuGet.Dialog.Test,PackagesSearchNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesSearchNodeTest.cs,GetPackagesReturnsCorrectPackagesBasedOnExtensions2,The following statement contains a magic number: PackagesSearchNode node = CreatePackagesSearchNode("B"' 5);
Magic Number,NuGet.Dialog.Test,PackagesSearchNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesSearchNodeTest.cs,GetPackagesReturnPrereleasePackagesIfToldSo,The following statement contains a magic number: Assert.Equal(2' packages.Count);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,WhenConstructedLoadPageOneAutomatically,The following statement contains a magic number: TreeNodeActionTest(node =>              {                  // Act                  // Simply accessing the Extensions property will trigger loading the first page                  IList<IVsExtension> extensions = node.Extensions;              }'              node =>              {                  // Assert                  Assert.Equal(1' node.TotalPages);                  Assert.Equal(10' node.Extensions.Count);              });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodLoadTheCorrectExtensions,The following statement contains a magic number: TreeNodeActionTest(node => node.LoadPage(2)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(5' node.TotalPages);                                     Assert.Equal(2' node.CurrentPage);                                     Assert.Equal(2' node.Extensions.Count);                                       Assert.Equal("A7"' node.Extensions[0].Name);                                     Assert.Equal("A6"' node.Extensions[1].Name);                                 }'                                 pageSize: 2'                                 numberOfPackages: 10);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodLoadTheCorrectExtensions,The following statement contains a magic number: TreeNodeActionTest(node => node.LoadPage(2)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(5' node.TotalPages);                                     Assert.Equal(2' node.CurrentPage);                                     Assert.Equal(2' node.Extensions.Count);                                       Assert.Equal("A7"' node.Extensions[0].Name);                                     Assert.Equal("A6"' node.Extensions[1].Name);                                 }'                                 pageSize: 2'                                 numberOfPackages: 10);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodLoadTheCorrectExtensions,The following statement contains a magic number: TreeNodeActionTest(node => node.LoadPage(2)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(5' node.TotalPages);                                     Assert.Equal(2' node.CurrentPage);                                     Assert.Equal(2' node.Extensions.Count);                                       Assert.Equal("A7"' node.Extensions[0].Name);                                     Assert.Equal("A6"' node.Extensions[1].Name);                                 }'                                 pageSize: 2'                                 numberOfPackages: 10);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodLoadTheCorrectExtensions,The following statement contains a magic number: TreeNodeActionTest(node => node.LoadPage(2)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(5' node.TotalPages);                                     Assert.Equal(2' node.CurrentPage);                                     Assert.Equal(2' node.Extensions.Count);                                       Assert.Equal("A7"' node.Extensions[0].Name);                                     Assert.Equal("A6"' node.Extensions[1].Name);                                 }'                                 pageSize: 2'                                 numberOfPackages: 10);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodLoadTheCorrectExtensions,The following statement contains a magic number: TreeNodeActionTest(node => node.LoadPage(2)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(5' node.TotalPages);                                     Assert.Equal(2' node.CurrentPage);                                     Assert.Equal(2' node.Extensions.Count);                                       Assert.Equal("A7"' node.Extensions[0].Name);                                     Assert.Equal("A6"' node.Extensions[1].Name);                                 }'                                 pageSize: 2'                                 numberOfPackages: 10);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodLoadTheCorrectExtensions,The following statement contains a magic number: TreeNodeActionTest(node => node.LoadPage(2)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(5' node.TotalPages);                                     Assert.Equal(2' node.CurrentPage);                                     Assert.Equal(2' node.Extensions.Count);                                       Assert.Equal("A7"' node.Extensions[0].Name);                                     Assert.Equal("A6"' node.Extensions[1].Name);                                 }'                                 pageSize: 2'                                 numberOfPackages: 10);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodWithCustomSortLoadsExtensionsInTheCorrectOrder,The following statement contains a magic number: TreeNodeActionTest(node => node.SortSelectionChanged(idSortDescriptor)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(1' node.TotalPages);                                     Assert.Equal(1' node.CurrentPage);                                     Assert.Equal(5' node.Extensions.Count);                                       Assert.Equal("A4"' node.Extensions[0].Name);                                     Assert.Equal("A3"' node.Extensions[1].Name);                                     Assert.Equal("A2"' node.Extensions[2].Name);                                     Assert.Equal("A1"' node.Extensions[3].Name);                                     Assert.Equal("A0"' node.Extensions[4].Name);                                 }'                                 numberOfPackages: 5);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodWithCustomSortLoadsExtensionsInTheCorrectOrder,The following statement contains a magic number: TreeNodeActionTest(node => node.SortSelectionChanged(idSortDescriptor)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(1' node.TotalPages);                                     Assert.Equal(1' node.CurrentPage);                                     Assert.Equal(5' node.Extensions.Count);                                       Assert.Equal("A4"' node.Extensions[0].Name);                                     Assert.Equal("A3"' node.Extensions[1].Name);                                     Assert.Equal("A2"' node.Extensions[2].Name);                                     Assert.Equal("A1"' node.Extensions[3].Name);                                     Assert.Equal("A0"' node.Extensions[4].Name);                                 }'                                 numberOfPackages: 5);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodWithCustomSortLoadsExtensionsInTheCorrectOrder,The following statement contains a magic number: TreeNodeActionTest(node => node.SortSelectionChanged(idSortDescriptor)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(1' node.TotalPages);                                     Assert.Equal(1' node.CurrentPage);                                     Assert.Equal(5' node.Extensions.Count);                                       Assert.Equal("A4"' node.Extensions[0].Name);                                     Assert.Equal("A3"' node.Extensions[1].Name);                                     Assert.Equal("A2"' node.Extensions[2].Name);                                     Assert.Equal("A1"' node.Extensions[3].Name);                                     Assert.Equal("A0"' node.Extensions[4].Name);                                 }'                                 numberOfPackages: 5);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodWithCustomSortLoadsExtensionsInTheCorrectOrder,The following statement contains a magic number: TreeNodeActionTest(node => node.SortSelectionChanged(idSortDescriptor)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(1' node.TotalPages);                                     Assert.Equal(1' node.CurrentPage);                                     Assert.Equal(5' node.Extensions.Count);                                       Assert.Equal("A4"' node.Extensions[0].Name);                                     Assert.Equal("A3"' node.Extensions[1].Name);                                     Assert.Equal("A2"' node.Extensions[2].Name);                                     Assert.Equal("A1"' node.Extensions[3].Name);                                     Assert.Equal("A0"' node.Extensions[4].Name);                                 }'                                 numberOfPackages: 5);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageMethodWithCustomSortLoadsExtensionsInTheCorrectOrder,The following statement contains a magic number: TreeNodeActionTest(node => node.SortSelectionChanged(idSortDescriptor)'                                 node =>                                 {                                     // Assert                                     Assert.Equal(1' node.TotalPages);                                     Assert.Equal(1' node.CurrentPage);                                     Assert.Equal(5' node.Extensions.Count);                                       Assert.Equal("A4"' node.Extensions[0].Name);                                     Assert.Equal("A3"' node.Extensions[1].Name);                                     Assert.Equal("A2"' node.Extensions[2].Name);                                     Assert.Equal("A1"' node.Extensions[3].Name);                                     Assert.Equal("A0"' node.Extensions[4].Name);                                 }'                                 numberOfPackages: 5);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageFollowedBySortClearsCacheAndUsesNewSortOrder,The following statement contains a magic number: PackagesTreeNodeBase node = CreatePackagesTreeNodeBase(numberOfPackages: 5);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageFollowedBySortClearsCacheAndUsesNewSortOrder,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(5' n.Extensions.Count);                                     Assert.Equal("A4"' n.Extensions[0].Name);                                     Assert.Equal("A3"' n.Extensions[1].Name);                                     Assert.Equal("A2"' n.Extensions[2].Name);                                     Assert.Equal("A1"' n.Extensions[3].Name);                                     Assert.Equal("A0"' n.Extensions[4].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageFollowedBySortClearsCacheAndUsesNewSortOrder,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(5' n.Extensions.Count);                                     Assert.Equal("A4"' n.Extensions[0].Name);                                     Assert.Equal("A3"' n.Extensions[1].Name);                                     Assert.Equal("A2"' n.Extensions[2].Name);                                     Assert.Equal("A1"' n.Extensions[3].Name);                                     Assert.Equal("A0"' n.Extensions[4].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageFollowedBySortClearsCacheAndUsesNewSortOrder,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(5' n.Extensions.Count);                                     Assert.Equal("A4"' n.Extensions[0].Name);                                     Assert.Equal("A3"' n.Extensions[1].Name);                                     Assert.Equal("A2"' n.Extensions[2].Name);                                     Assert.Equal("A1"' n.Extensions[3].Name);                                     Assert.Equal("A0"' n.Extensions[4].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageFollowedBySortClearsCacheAndUsesNewSortOrder,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(5' n.Extensions.Count);                                     Assert.Equal("A4"' n.Extensions[0].Name);                                     Assert.Equal("A3"' n.Extensions[1].Name);                                     Assert.Equal("A2"' n.Extensions[2].Name);                                     Assert.Equal("A1"' n.Extensions[3].Name);                                     Assert.Equal("A0"' n.Extensions[4].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageFollowedBySortClearsCacheAndUsesNewSortOrder,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.SortSelectionChanged(idSortDescriptor)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(5' n.Extensions.Count);                                     Assert.Equal("A0"' n.Extensions[0].Name);                                     Assert.Equal("A1"' n.Extensions[1].Name);                                     Assert.Equal("A2"' n.Extensions[2].Name);                                     Assert.Equal("A3"' n.Extensions[3].Name);                                     Assert.Equal("A4"' n.Extensions[4].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageFollowedBySortClearsCacheAndUsesNewSortOrder,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.SortSelectionChanged(idSortDescriptor)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(5' n.Extensions.Count);                                     Assert.Equal("A0"' n.Extensions[0].Name);                                     Assert.Equal("A1"' n.Extensions[1].Name);                                     Assert.Equal("A2"' n.Extensions[2].Name);                                     Assert.Equal("A3"' n.Extensions[3].Name);                                     Assert.Equal("A4"' n.Extensions[4].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageFollowedBySortClearsCacheAndUsesNewSortOrder,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.SortSelectionChanged(idSortDescriptor)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(5' n.Extensions.Count);                                     Assert.Equal("A0"' n.Extensions[0].Name);                                     Assert.Equal("A1"' n.Extensions[1].Name);                                     Assert.Equal("A2"' n.Extensions[2].Name);                                     Assert.Equal("A3"' n.Extensions[3].Name);                                     Assert.Equal("A4"' n.Extensions[4].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,LoadPageFollowedBySortClearsCacheAndUsesNewSortOrder,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.SortSelectionChanged(idSortDescriptor)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(5' n.Extensions.Count);                                     Assert.Equal("A0"' n.Extensions[0].Name);                                     Assert.Equal("A1"' n.Extensions[1].Name);                                     Assert.Equal("A2"' n.Extensions[2].Name);                                     Assert.Equal("A3"' n.Extensions[3].Name);                                     Assert.Equal("A4"' n.Extensions[4].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreRemoved,The following statement contains a magic number: var node = CreatePackagesTreeNodeBase(new[]{                  PackageUtility.CreatePackage("A"' "1.0"' downloadCount: 1)'                  PackageUtility.CreatePackage("A"' "2.0"' downloadCount: 1)'                  PackageUtility.CreatePackage("A"' "3.0"' downloadCount: 1)'                  PackageUtility.CreatePackage("B"' "1.0"' downloadCount: 2)'                  PackageUtility.CreatePackage("B"' "2.0"' downloadCount: 2)'                  PackageUtility.CreatePackage("C"' "4.0"' downloadCount: 3)              });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreRemoved,The following statement contains a magic number: var node = CreatePackagesTreeNodeBase(new[]{                  PackageUtility.CreatePackage("A"' "1.0"' downloadCount: 1)'                  PackageUtility.CreatePackage("A"' "2.0"' downloadCount: 1)'                  PackageUtility.CreatePackage("A"' "3.0"' downloadCount: 1)'                  PackageUtility.CreatePackage("B"' "1.0"' downloadCount: 2)'                  PackageUtility.CreatePackage("B"' "2.0"' downloadCount: 2)'                  PackageUtility.CreatePackage("C"' "4.0"' downloadCount: 3)              });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreRemoved,The following statement contains a magic number: var node = CreatePackagesTreeNodeBase(new[]{                  PackageUtility.CreatePackage("A"' "1.0"' downloadCount: 1)'                  PackageUtility.CreatePackage("A"' "2.0"' downloadCount: 1)'                  PackageUtility.CreatePackage("A"' "3.0"' downloadCount: 1)'                  PackageUtility.CreatePackage("B"' "1.0"' downloadCount: 2)'                  PackageUtility.CreatePackage("B"' "2.0"' downloadCount: 2)'                  PackageUtility.CreatePackage("C"' "4.0"' downloadCount: 3)              });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreRemoved,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(3' n.Extensions.Count);                                      Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("A"' n.Extensions[2].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreRemoved,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(3' n.Extensions.Count);                                      Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("A"' n.Extensions[2].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreNotRemovedIfCollapseVersionsPropertyIsFalse,The following statement contains a magic number: var node = CreatePackagesTreeNodeBase(new[]{                      PackageUtility.CreatePackage("A"' "1.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "2.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "3.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("B"' "1.0"' downloadCount: 2)'                      PackageUtility.CreatePackage("B"' "2.0"' downloadCount: 2)'                      PackageUtility.CreatePackage("C"' "4.0"' downloadCount: 3)                  }'                  parentTreeNode: null'                  collapseVersions: false);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreNotRemovedIfCollapseVersionsPropertyIsFalse,The following statement contains a magic number: var node = CreatePackagesTreeNodeBase(new[]{                      PackageUtility.CreatePackage("A"' "1.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "2.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "3.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("B"' "1.0"' downloadCount: 2)'                      PackageUtility.CreatePackage("B"' "2.0"' downloadCount: 2)'                      PackageUtility.CreatePackage("C"' "4.0"' downloadCount: 3)                  }'                  parentTreeNode: null'                  collapseVersions: false);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreNotRemovedIfCollapseVersionsPropertyIsFalse,The following statement contains a magic number: var node = CreatePackagesTreeNodeBase(new[]{                      PackageUtility.CreatePackage("A"' "1.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "2.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "3.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("B"' "1.0"' downloadCount: 2)'                      PackageUtility.CreatePackage("B"' "2.0"' downloadCount: 2)'                      PackageUtility.CreatePackage("C"' "4.0"' downloadCount: 3)                  }'                  parentTreeNode: null'                  collapseVersions: false);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreNotRemovedIfCollapseVersionsPropertyIsFalse,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(6' n.Extensions.Count);                                     Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("B"' n.Extensions[2].Name);                                     Assert.Equal("A"' n.Extensions[3].Name);                                     Assert.Equal("A"' n.Extensions[4].Name);                                     Assert.Equal("A"' n.Extensions[5].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreNotRemovedIfCollapseVersionsPropertyIsFalse,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(6' n.Extensions.Count);                                     Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("B"' n.Extensions[2].Name);                                     Assert.Equal("A"' n.Extensions[3].Name);                                     Assert.Equal("A"' n.Extensions[4].Name);                                     Assert.Equal("A"' n.Extensions[5].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreNotRemovedIfCollapseVersionsPropertyIsFalse,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(6' n.Extensions.Count);                                     Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("B"' n.Extensions[2].Name);                                     Assert.Equal("A"' n.Extensions[3].Name);                                     Assert.Equal("A"' n.Extensions[4].Name);                                     Assert.Equal("A"' n.Extensions[5].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreNotRemovedIfCollapseVersionsPropertyIsFalse,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(6' n.Extensions.Count);                                     Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("B"' n.Extensions[2].Name);                                     Assert.Equal("A"' n.Extensions[3].Name);                                     Assert.Equal("A"' n.Extensions[4].Name);                                     Assert.Equal("A"' n.Extensions[5].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,DuplicateExtensionsAreNotRemovedIfCollapseVersionsPropertyIsFalse,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(6' n.Extensions.Count);                                     Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("B"' n.Extensions[2].Name);                                     Assert.Equal("A"' n.Extensions[3].Name);                                     Assert.Equal("A"' n.Extensions[4].Name);                                     Assert.Equal("A"' n.Extensions[5].Name);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,PrereleasePackagesAreNotLoadedIfSupportsPrereleaseIsFalse,The following statement contains a magic number: var node = CreatePackagesTreeNodeBase(new[]{                      PackageUtility.CreatePackage("A"' "1.0-alpha"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "2.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "3.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("B"' "1.0-beta"' downloadCount: 2)'                      PackageUtility.CreatePackage("B"' "2.0"' downloadCount: 2)'                      PackageUtility.CreatePackage("C"' "4.0"' downloadCount: 3)                  }'                  parentTreeNode: null'                  collapseVersions: true'                  supportsPrereleasePackages: false);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,PrereleasePackagesAreNotLoadedIfSupportsPrereleaseIsFalse,The following statement contains a magic number: var node = CreatePackagesTreeNodeBase(new[]{                      PackageUtility.CreatePackage("A"' "1.0-alpha"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "2.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "3.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("B"' "1.0-beta"' downloadCount: 2)'                      PackageUtility.CreatePackage("B"' "2.0"' downloadCount: 2)'                      PackageUtility.CreatePackage("C"' "4.0"' downloadCount: 3)                  }'                  parentTreeNode: null'                  collapseVersions: true'                  supportsPrereleasePackages: false);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,PrereleasePackagesAreNotLoadedIfSupportsPrereleaseIsFalse,The following statement contains a magic number: var node = CreatePackagesTreeNodeBase(new[]{                      PackageUtility.CreatePackage("A"' "1.0-alpha"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "2.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("A"' "3.0"' downloadCount: 1)'                      PackageUtility.CreatePackage("B"' "1.0-beta"' downloadCount: 2)'                      PackageUtility.CreatePackage("B"' "2.0"' downloadCount: 2)'                      PackageUtility.CreatePackage("C"' "4.0"' downloadCount: 3)                  }'                  parentTreeNode: null'                  collapseVersions: true'                  supportsPrereleasePackages: false);
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,PrereleasePackagesAreNotLoadedIfSupportsPrereleaseIsFalse,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(3' n.Extensions.Count);                                     Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("4.0"' ((PackageItem)n.Extensions[0]).Version);                                                                          Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("2.0"' ((PackageItem)n.Extensions[1]).Version);                                                                          Assert.Equal("A"' n.Extensions[2].Name);                                     Assert.Equal("3.0"' ((PackageItem)n.Extensions[2]).Version);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,PrereleasePackagesAreNotLoadedIfSupportsPrereleaseIsFalse,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(3' n.Extensions.Count);                                     Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("4.0"' ((PackageItem)n.Extensions[0]).Version);                                                                          Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("2.0"' ((PackageItem)n.Extensions[1]).Version);                                                                          Assert.Equal("A"' n.Extensions[2].Name);                                     Assert.Equal("3.0"' ((PackageItem)n.Extensions[2]).Version);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,PrereleasePackagesAreNotLoadedIfSupportsPrereleaseIsFalse,The following statement contains a magic number: TreeNodeActionTest(node'                                 n => n.LoadPage(1)'                                 n =>                                 {                                     // Assert                                     Assert.Equal(1' n.TotalPages);                                     Assert.Equal(1' n.CurrentPage);                                     Assert.Equal(3' n.Extensions.Count);                                     Assert.Equal("C"' n.Extensions[0].Name);                                     Assert.Equal("4.0"' ((PackageItem)n.Extensions[0]).Version);                                                                          Assert.Equal("B"' n.Extensions[1].Name);                                     Assert.Equal("2.0"' ((PackageItem)n.Extensions[1]).Version);                                                                          Assert.Equal("A"' n.Extensions[2].Name);                                     Assert.Equal("3.0"' ((PackageItem)n.Extensions[2]).Version);                                 });
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,TreeNodeActionTest,The following statement contains a magic number: const int defaultNumberOfPackages = 10;
Magic Number,NuGet.Dialog.Test,PackagesTreeNodeBaseTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackagesTreeNodeBaseTest.cs,SortSelectionChangedReturnsFalseIfCurrentSortDescriptorIsNull,The following statement contains a magic number: PackagesTreeNodeBase node = CreatePackagesTreeNodeBase(numberOfPackages: 10);
Magic Number,NuGet.Dialog.Test,PackageItemTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackageItemTest.cs,DependenciesAreFilteredByTargetFramework1,The following statement contains a magic number: Assert.Equal(2' dependencies.Count);
Magic Number,NuGet.Dialog.Test,PackageItemTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackageItemTest.cs,DependenciesAreFilteredByTargetFramework2,The following statement contains a magic number: Assert.Equal(2' dependencies.Count);
Magic Number,NuGet.Dialog.Test,PackageItemTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackageItemTest.cs,PackageItemReturnsAllDependenciesWhenTargetFrameworkIsNull,The following statement contains a magic number: Assert.Equal(6' dependencies.Count);
Magic Number,NuGet.Dialog.Test,PackageItemTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackageItemTest.cs,PackageItemReturnsAllDependenciesWhenTargetFrameworkIsNull,The following statement contains a magic number: Assert.Equal("C"' dependencies[2].Id);
Magic Number,NuGet.Dialog.Test,PackageItemTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackageItemTest.cs,PackageItemReturnsAllDependenciesWhenTargetFrameworkIsNull,The following statement contains a magic number: Assert.Equal("D"' dependencies[3].Id);
Magic Number,NuGet.Dialog.Test,PackageItemTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackageItemTest.cs,PackageItemReturnsAllDependenciesWhenTargetFrameworkIsNull,The following statement contains a magic number: Assert.Equal("E"' dependencies[4].Id);
Magic Number,NuGet.Dialog.Test,PackageItemTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\PackageItemTest.cs,PackageItemReturnsAllDependenciesWhenTargetFrameworkIsNull,The following statement contains a magic number: Assert.Equal("F"' dependencies[5].Id);
Magic Number,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,SortBySortsOnOneItem,The following statement contains a magic number: Assert.Equal(result.ElementAt(2).Id' "C");
Magic Number,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,SortBySortsOnOnePropertyDescending,The following statement contains a magic number: Assert.Equal(result.ElementAt(2).Id' "A");
Magic Number,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,SortBySortsOnMultiplePropertyAscending,The following statement contains a magic number: Assert.Equal(result.ElementAt(2).Id' "Q");
Magic Number,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,SortBySortsOnMultiplePropertyAscending,The following statement contains a magic number: Assert.Equal(result.ElementAt(3).Id' "Z");
Magic Number,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,SortBySortsOnMultiplePropertyDescending,The following statement contains a magic number: Assert.Equal(result.ElementAt(2).Id' "P");
Magic Number,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,SortBySortsOnMultiplePropertyDescending,The following statement contains a magic number: Assert.Equal(result.ElementAt(3).Id' "X");
Magic Number,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,SortBySortsOnMoreThanTwoProperties,The following statement contains a magic number: Assert.Equal(result.ElementAt(2).Id' "P");
Magic Number,NuGet.Dialog.Test,QueryExtensionsTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\QueryExtensionsTest.cs,SortBySortsOnMoreThanTwoProperties,The following statement contains a magic number: Assert.Equal(result.ElementAt(3).Id' "Z");
Magic Number,NuGet.Dialog.Test,SimpleTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SimpleTreeNodeTest.cs,GetPackagesReturnCorrectPackages,The following statement contains a magic number: int numberOfPackages = 3;
Magic Number,NuGet.Dialog.Test,SimpleTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SimpleTreeNodeTest.cs,GetPackagesReturnPrereleasePackages,The following statement contains a magic number: int numberOfPackages = 3;
Magic Number,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,SolutionInstalledProviderShowsAllVersions,The following statement contains a magic number: firstTreeNode.PackageLoadCompleted += delegate              {                  var allExtensions = firstTreeNode.Extensions;                    // Assert                  Assert.Equal(3' allExtensions.Count);                  Assert.Equal("A"' allExtensions[0].Id);                  Assert.Equal("1.0"' ((PackageItem)allExtensions[0]).Version);                  Assert.Equal("A"' allExtensions[1].Id);                  Assert.Equal("2.0"' ((PackageItem)allExtensions[1]).Version);                  Assert.Equal("B"' allExtensions[2].Id);                  Assert.Equal("2.0"' ((PackageItem)allExtensions[2]).Version);                    mre.Set();              };
Magic Number,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,SolutionInstalledProviderShowsAllVersions,The following statement contains a magic number: firstTreeNode.PackageLoadCompleted += delegate              {                  var allExtensions = firstTreeNode.Extensions;                    // Assert                  Assert.Equal(3' allExtensions.Count);                  Assert.Equal("A"' allExtensions[0].Id);                  Assert.Equal("1.0"' ((PackageItem)allExtensions[0]).Version);                  Assert.Equal("A"' allExtensions[1].Id);                  Assert.Equal("2.0"' ((PackageItem)allExtensions[1]).Version);                  Assert.Equal("B"' allExtensions[2].Id);                  Assert.Equal("2.0"' ((PackageItem)allExtensions[2]).Version);                    mre.Set();              };
Magic Number,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,SolutionInstalledProviderShowsAllVersions,The following statement contains a magic number: firstTreeNode.PackageLoadCompleted += delegate              {                  var allExtensions = firstTreeNode.Extensions;                    // Assert                  Assert.Equal(3' allExtensions.Count);                  Assert.Equal("A"' allExtensions[0].Id);                  Assert.Equal("1.0"' ((PackageItem)allExtensions[0]).Version);                  Assert.Equal("A"' allExtensions[1].Id);                  Assert.Equal("2.0"' ((PackageItem)allExtensions[1]).Version);                  Assert.Equal("B"' allExtensions[2].Id);                  Assert.Equal("2.0"' ((PackageItem)allExtensions[2]).Version);                    mre.Set();              };
Magic Number,NuGet.Dialog.Test,SolutionInstalledProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionInstalledProviderTest.cs,CreateSolutionInstalledProvider,The following statement contains a magic number: packageSourceProviderMock.Setup(p => p.LoadPackageSources()).Returns(                          new PackageSource[2] {                              new PackageSource("Test1"' "One")'                              new PackageSource("Test2"' "Two")                          }                      );
Magic Number,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,SupportedTargetFrameworksDoNotReturnNullValue,The following statement contains a magic number: Assert.Equal(2' frameworks.Count);
Magic Number,NuGet.Dialog.Test,SolutionOnlineProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionOnlineProviderTest.cs,CreateSolutionOnlineProvider,The following statement contains a magic number: packageSourceProviderMock.Setup(p => p.LoadPackageSources()).Returns(                          new PackageSource[2] {                              new PackageSource("Test1"' "One")'                              new PackageSource("Test2"' "Two")                          }                      );
Magic Number,NuGet.Dialog.Test,SolutionUpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionUpdatesProviderTest.cs,CreateSolutionUpdatesProvider,The following statement contains a magic number: packageSourceProviderMock.Setup(p => p.LoadPackageSources()).Returns(                          new PackageSource[2] {                              new PackageSource("Test1"' "One")'                              new PackageSource("Test2"' "Two")                          }                      );
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal(4' descriptors.Count);
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal("Title"' descriptors[2].SortProperties.First());
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal("Id"' descriptors[2].SortProperties.Last());
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal(ListSortDirection.Ascending' descriptors[2].Direction);
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal("Title"' descriptors[3].SortProperties.First());
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal("Id"' descriptors[3].SortProperties.Last());
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,VerifySortDescriptors,The following statement contains a magic number: Assert.Equal(ListSortDirection.Descending' descriptors[3].Direction);
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,RootNodeIsPopulatedWithCorrectNumberOfChildNodes,The following statement contains a magic number: Assert.Equal(3' extentionsTree.Nodes.Count);
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,RootNodeIsPopulatedWithCorrectNumberOfChildNodes,The following statement contains a magic number: Assert.IsType(typeof(UpdatesTreeNode)' extentionsTree.Nodes[2]);
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,RootNodeIsPopulatedWithCorrectNumberOfChildNodes,The following statement contains a magic number: Assert.Equal("Two"' extentionsTree.Nodes[2].Name);
Magic Number,NuGet.Dialog.Test,UpdatesProviderTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesProviderTest.cs,CreateUpdatesProvider,The following statement contains a magic number: packageSourceProviderMock.Setup(p => p.LoadPackageSources()).Returns(                          new PackageSource[2] {                              new PackageSource("Test1"' "One")'                              new PackageSource("Test2"' "Two")                          }                      );
Magic Number,NuGet.Dialog.Test,UpdatesTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesTreeNodeTest.cs,GetPackagesReturnsUpdatesForEachPackageFoundInTheSourceRepository,The following statement contains a magic number: Assert.Equal(2' packages.Count);
Magic Number,NuGet.Dialog.Test,UpdatesTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesTreeNodeTest.cs,GetPackagesReturnsPrereleasePackagesIfIncludePrereleaseIsTrue,The following statement contains a magic number: Assert.Equal(2' packages.Count);
Magic Number,NuGet.Dialog.Test,UpdatesTreeNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\UpdatesTreeNodeTest.cs,GetPackagesOnlyReturnPackagesCompatibleWithTheProjects,The following statement contains a magic number: Assert.Equal(2' packages.Count);
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,PropertyChildrenIsCorrect,The following statement contains a magic number: Assert.Equal(3' node.Children.Count);
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,SelectParentWillSelectAllChildrenExceptTheDisabledOnes,The following statement contains a magic number: ProjectNode[] children = new ProjectNode[3];
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,SelectParentWillSelectAllChildrenExceptTheDisabledOnes,The following statement contains a magic number: var node = new ProjectNode(project)                  {                      IsEnabled = i % 2 == 0                  };
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,SelectParentWillSelectAllChildrenExceptTheDisabledOnes,The following statement contains a magic number: i < 3
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,SelectParentWillSelectAllChildrenExceptTheDisabledOnes,The following statement contains a magic number: Assert.True(children[2].IsSelected == true);
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,UnselectParentWillUnselectAllChildrenExceptTheDisabledOnes,The following statement contains a magic number: ProjectNode[] children = new ProjectNode[3];
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,UnselectParentWillUnselectAllChildrenExceptTheDisabledOnes,The following statement contains a magic number: var node = new ProjectNode(project)                  {                      IsSelected = true'                      IsEnabled = i % 2 == 0'                  };
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,UnselectParentWillUnselectAllChildrenExceptTheDisabledOnes,The following statement contains a magic number: i < 3
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,UnselectParentWillUnselectAllChildrenExceptTheDisabledOnes,The following statement contains a magic number: Assert.True(children[2].IsSelected == true);
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,UnselectParentWillUnselectAllChildrenExceptTheDisabledOnes,The following statement contains a magic number: Assert.True(children[2].IsSelected == false);
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentFolderDoNotPropagateStateBackToChildrenWhenTheyAreFirstAddedToFolder,The following statement contains a magic number: ProjectNode[] children = new ProjectNode[3];
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentFolderDoNotPropagateStateBackToChildrenWhenTheyAreFirstAddedToFolder,The following statement contains a magic number: var node = new ProjectNode(project)                  {                      IsSelected = i % 2 == 0                  };
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentFolderDoNotPropagateStateBackToChildrenWhenTheyAreFirstAddedToFolder,The following statement contains a magic number: i < 3
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentFolderDoNotPropagateStateBackToChildrenWhenTheyAreFirstAddedToFolder,The following statement contains a magic number: Assert.True(children[2].IsSelected == true);
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentFolderDoNotPropagateStateBackToChildrenWhenTheyAreFirstAddedToFolder,The following statement contains a magic number: i < 3
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentNodeIsDisabledIfAllChildrenAreDisabled,The following statement contains a magic number: var children = new ProjectNode[3];
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentNodeIsDisabledIfAllChildrenAreDisabled,The following statement contains a magic number: i < 3
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentNodeIsEnabledIfAtLeastOneChildrenIsEnabled,The following statement contains a magic number: var children = new ProjectNode[3];
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentNodeIsEnabledIfAtLeastOneChildrenIsEnabled,The following statement contains a magic number: var node = new ProjectNode(project)                  {                      IsEnabled = i % 2 == 0                  };
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,ParentNodeIsEnabledIfAtLeastOneChildrenIsEnabled,The following statement contains a magic number: i < 3
Magic Number,NuGet.Dialog.Test.SolutionExplorer,FolderNodeTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\Dialog.Test\SolutionExplorer\FolderNodeTest.cs,CreateFolderNode,The following statement contains a magic number: i < 3
