Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGet.Commands,HelpCommandMarkdownTemplate,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\HelpCommandMarkdownTemplate.cs,Execute,The method has 109 lines of code.
Complex Method,NuGet,DefaultManifestValuesRule,C:\repos\themotleyfool_NuGet\src\CommandLine\DefaultManifestValuesRule.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,NuGet,ResourceHelper,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\ResourceHelper.cs,GetLocalizedString,Cyclomatic complexity of the method is 10
Long Parameter List,NuGet,CommandLineParser,C:\repos\themotleyfool_NuGet\src\CommandLine\CommandLineParser.cs,GetPartialOptionMatch,The method has 5 parameters. Parameters: source' getDisplayName' getAltName' option' value
Long Parameter List,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,RestorePackage,The method has 5 parameters. Parameters: fileSystem' packageId' version' packageRestoreConsent' satellitePackages
Long Parameter List,NuGet.Commands,PushCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PushCommand.cs,PushPackageCore,The method has 5 parameters. Parameters: source' apiKey' packageServer' packageToPush' timeout
Long Parameter List,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdatePackages,The method has 7 parameters. Parameters: localRepository' sharedRepositoryFileSystem' sharedPackageRepository' sourceRepository' constraintProvider' pathResolver' project
Long Statement,NuGet,CommandManager,C:\repos\themotleyfool_NuGet\src\CommandLine\CommandManager.cs,GetCommand,The length of the statement  "                matchedCommand = results.FirstOrDefault(c => c.CommandAttribute.CommandName.Equals(commandName' StringComparison.OrdinalIgnoreCase) " is 131.
Long Statement,NuGet,CommandManager,C:\repos\themotleyfool_NuGet\src\CommandLine\CommandManager.cs,GetCommandOptions,The length of the statement  "                        // If the property has neither a setter nor is of a type that can be cast to ICollection<> then there's no way to assign  " is 120.
Long Statement,NuGet,CommandLineUtility,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\CommandLineUtility.cs,GetSourceDisplayName,The length of the statement  "            if (String.IsNullOrEmpty(source) || source.Equals(NuGetConstants.DefaultGalleryServerUrl' StringComparison.OrdinalIgnoreCase)) " is 126.
Long Statement,NuGet,CommandLineUtility,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\CommandLineUtility.cs,GetPackageReferences,The length of the statement  "                    throw new InvalidDataException(String.Format(CultureInfo.CurrentCulture' NuGetResources.InstallCommandInvalidPackageReference' fileName)); " is 138.
Long Statement,NuGet,CommandLineUtility,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\CommandLineUtility.cs,GetPackageReferences,The length of the statement  "                    throw new InvalidDataException(String.Format(CultureInfo.CurrentCulture' NuGetResources.InstallCommandPackageReferenceInvalidVersion' package.Id)); " is 147.
Long Statement,NuGet,DebugHelper,C:\repos\themotleyfool_NuGet\src\CommandLine\DebugHelper.cs,WaitForAttach,The length of the statement  "            if (args.Length > 0 && (String.Equals(args[0]' "dbg"' StringComparison.OrdinalIgnoreCase) || String.Equals(args[0]' "debug"' StringComparison.OrdinalIgnoreCase))) " is 162.
Long Statement,NuGet,DefaultManifestValuesRule,C:\repos\themotleyfool_NuGet\src\CommandLine\DefaultManifestValuesRule.cs,Validate,The length of the statement  "            if (package.ProjectUrl != null && package.ProjectUrl.OriginalString.Equals(SpecCommand.SampleProjectUrl' StringComparison.Ordinal)) " is 131.
Long Statement,NuGet,DefaultManifestValuesRule,C:\repos\themotleyfool_NuGet\src\CommandLine\DefaultManifestValuesRule.cs,Validate,The length of the statement  "            if (package.LicenseUrl != null && package.LicenseUrl.OriginalString.Equals(SpecCommand.SampleLicenseUrl' StringComparison.Ordinal)) " is 131.
Long Statement,NuGet,DefaultManifestValuesRule,C:\repos\themotleyfool_NuGet\src\CommandLine\DefaultManifestValuesRule.cs,Validate,The length of the statement  "            if (package.IconUrl != null && package.IconUrl.OriginalString.Equals(SpecCommand.SampleIconUrl' StringComparison.Ordinal)) " is 122.
Long Statement,NuGet,DefaultManifestValuesRule,C:\repos\themotleyfool_NuGet\src\CommandLine\DefaultManifestValuesRule.cs,Validate,The length of the statement  "            if (!String.IsNullOrEmpty(package.Tags) && package.Tags.Trim().Equals(SpecCommand.SampleTags' StringComparison.Ordinal)) " is 120.
Long Statement,NuGet,DefaultManifestValuesRule,C:\repos\themotleyfool_NuGet\src\CommandLine\DefaultManifestValuesRule.cs,Validate,The length of the statement  "                                   && dependency.VersionSpec.ToString().Equals("[" + SpecCommand.SampleManifestDependency.Version + "]"' StringComparison.Ordinal)) " is 128.
Long Statement,NuGet,PackageSourceBuilder,C:\repos\themotleyfool_NuGet\src\CommandLine\PackageSourceBuilder.cs,CreateSourceProvider,The length of the statement  "            var legacyV2PackageSource = new PackageSource(NuGetConstants.V2LegacyFeedUrl' NuGetResources.OfficialPackageSourceName); " is 120.
Long Statement,NuGet,ResourceHelper,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\ResourceHelper.cs,GetLocalizedString,The length of the statement  "                PropertyInfo property = resourceType.GetProperty("ResourceManager"' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static); " is 136.
Long Statement,NuGet,ResourceHelper,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\ResourceHelper.cs,GetLocalizedString,The length of the statement  "                        String.Format(CultureInfo.CurrentCulture' NuGetResources.ResourceTypeDoesNotHaveProperty' resourceType' "ResourceManager")); " is 124.
Long Statement,NuGet,Program,C:\repos\themotleyfool_NuGet\src\CommandLine\Program.cs,Main,The length of the statement  "                    // If the AggregateException contains more than one InnerException' it cannot be unwrapped. In which case' simply print out individual error messages " is 149.
Long Statement,NuGet,Program,C:\repos\themotleyfool_NuGet\src\CommandLine\Program.cs,Main,The length of the statement  "                    message = String.Join(Environment.NewLine' exception.InnerExceptions.Select(ex => ex.Message).Distinct(StringComparer.CurrentCulture)); " is 135.
Long Statement,NuGet,Program,C:\repos\themotleyfool_NuGet\src\CommandLine\Program.cs,Initialize,The length of the statement  "                    var credentialProvider = new SettingsCredentialProvider(new ConsoleCredentialProvider(console)' packageSourceProvider' console); " is 128.
Long Statement,NuGet,Program,C:\repos\themotleyfool_NuGet\src\CommandLine\Program.cs,AddExtensionsToCatalog,The length of the statement  "            // Ideally we want to look for all files. However' using MEF to identify imports results in assemblies being loaded and locked by our App Domain " is 144.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,ExecuteCommand,The length of the statement  "            if (Arguments.Count == 0 || Path.GetFileName(Arguments[0]).Equals(Constants.PackageReferenceFile' StringComparison.OrdinalIgnoreCase)) " is 134.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,ResolveInstallPath,The length of the statement  "                var solutionSettingsFile = Path.Combine(SolutionDirectory.TrimEnd(Path.DirectorySeparatorChar)' NuGetConstants.NuGetSolutionSettingsFolder); " is 140.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,ResolveInstallPath,The length of the statement  "                HttpClient.DefaultCredentialProvider = new SettingsCredentialProvider(new ConsoleCredentialProvider(Console)' SourceProvider' Console); " is 135.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,GetRepository,The length of the statement  "            var repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources(RepositoryFactory' SourceProvider' Source); " is 123.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,GetRepository,The length of the statement  "                repository = new AggregateRepository(new[] { CacheRepository' repository }) { IgnoreFailingRepositories = ignoreFailingRepositories }; " is 134.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,ExecuteInParallel,The length of the statement  "            // The PackageSourceProvider reads from the underlying ISettings multiple times. One of the fields it reads is the password which is consequently decrypted " is 155.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,ExecuteInParallel,The length of the statement  "            // once for each package being installed. Per work item 2345' a couple of users are running into an issue where this results in an exception in native  " is 150.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,ExecuteInParallel,The length of the statement  "                            Task.Factory.StartNew(() => RestorePackage(fileSystem' package.Id' package.Version' packageRestoreConsent' satellitePackages))).ToArray(); " is 138.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,RestorePackage,The length of the statement  "                // During package restore with parallel build' multiple projects would try to write to disk simultaneously which results in write contentions. " is 142.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,IsPackageInstalled,The length of the statement  "                // If we allow side-by-side' we'll check if any version of a package is installed. This operation is expensive since it involves " is 128.
Long Statement,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,IsPackageInstalled,The length of the statement  "                Debug.Assert(localRepository != null' "The PackageManager's local repository instance is necessarily a LocalPackageRepository instance."); " is 138.
Long Statement,NuGet.Commands,ProjectFactory,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\ProjectFactory.cs,BuildProject,The length of the statement  "                using (var projectCollection = new ProjectCollection(ToolsetDefinitionLocations.Registry | ToolsetDefinitionLocations.ConfigurationFile)) " is 137.
Long Statement,NuGet.Commands,ProjectFactory,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\ProjectFactory.cs,BuildProject,The length of the statement  "                    BuildRequestData requestData = new BuildRequestData(_project.FullPath' ProjectProperties' _project.ToolsVersion' new string[0]' null); " is 134.
Long Statement,NuGet.Commands,ProjectFactory,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\ProjectFactory.cs,GetFiles,The length of the statement  "            return allowedExtensions.Select(extension => Directory.GetFiles(path' fileNameWithoutExtension + extension)).SelectMany(a => a); " is 128.
Long Statement,NuGet.Commands,ProjectFactory,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\ProjectFactory.cs,GetNuspecPaths,The length of the statement  "            yield return GetContentOrNone(file => Path.GetExtension(file).Equals(Constants.ManifestExtension' StringComparison.OrdinalIgnoreCase)); " is 135.
Long Statement,NuGet.Commands,ProjectFactory,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\ProjectFactory.cs,GetNuspecPaths,The length of the statement  "            yield return Path.Combine(_project.DirectoryPath' Path.GetFileNameWithoutExtension(_project.FullPath) + Constants.ManifestExtension); " is 133.
Long Statement,NuGet.Commands,ProjectFactory,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\ProjectFactory.cs,GetPackagesConfig,The length of the statement  "            return GetContentOrNone(file => Path.GetFileName(file).Equals(Constants.PackageReferenceFile' StringComparison.OrdinalIgnoreCase)); " is 131.
Long Statement,NuGet.Commands,ProjectFactory,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\ProjectFactory.cs,AddFiles,The length of the statement  "                IPackageFile targetFile = contentFilesInDependencies.Find(a => a.Path.Equals(targetPath' StringComparison.OrdinalIgnoreCase)); " is 126.
Long Statement,NuGet.Commands,SourcesCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\SourcesCommand.cs,EnableOrDisableSource,The length of the statement  "                enabled ? NuGetResources.SourcesCommandSourceEnabledSuccessfully : NuGetResources.SourcesCommandSourceDisabledSuccessfully' " is 123.
Long Statement,NuGet.Commands,SourcesCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\SourcesCommand.cs,RemoveSource,The length of the statement  "            var matchingSources = sourceList.Where(ps => String.Equals(Name' ps.Name' StringComparison.OrdinalIgnoreCase)).ToList(); " is 120.
Long Statement,NuGet.Commands,SpecCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\SpecCommand.cs,RemoveSchemaNamespace,The length of the statement  "            return Regex.Replace(content' @"(xmlns:?[^=]*=[""][^""]*[""])"' String.Empty' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 128.
Long Statement,NuGet.Commands,DeleteCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\DeleteCommand.cs,ExecuteCommand,The length of the statement  "            if (NonInteractive || Console.Confirm(String.Format(CultureInfo.CurrentCulture' NuGetResources.DeleteCommandConfirm' packageId' packageVersion' sourceDisplayName))) " is 164.
Long Statement,NuGet.Commands,ListCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\ListCommand.cs,GetRepository,The length of the statement  "            var repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources(RepositoryFactory' SourceProvider' Source); " is 123.
Long Statement,NuGet.Commands,PackCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PackCommand.cs,PrintVerbose,The length of the statement  "                Console.WriteLine("Dependencies: {0}"' String.Join("' "' package.DependencySets.SelectMany(d => d.Dependencies).Select(d => d.ToString()))); " is 140.
Long Statement,NuGet.Commands,PackCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PackCommand.cs,ExcludeFiles,The length of the statement  "            // Review: This exclusion should be done by the package builder because it knows which file would collide with the auto-generated " is 129.
Long Statement,NuGet.Commands,PackCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PackCommand.cs,BuildFromNuspec,The length of the statement  "                    throw new CommandLineException(String.Format(CultureInfo.CurrentCulture' NuGetResources.PackageCommandNoFilesForLibPackage' " is 123.
Long Statement,NuGet.Commands,PackCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PackCommand.cs,BuildSymbolsPackage,The length of the statement  "                throw new CommandLineException(String.Format(CultureInfo.CurrentCulture' NuGetResources.PackageCommandNoFilesForSymbolsPackage' " is 127.
Long Statement,NuGet.Commands,PackCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PackCommand.cs,AnalyzePackage,The length of the statement  "            IList<PackageIssue> issues = package.Validate(packageRules).OrderBy(p => p.Title' StringComparer.CurrentCulture).ToList(); " is 122.
Long Statement,NuGet.Commands,PackCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PackCommand.cs,GetInputFile,The length of the statement  "                    candidates.RemoveAll(file => Path.GetExtension(file).Equals(Constants.ManifestExtension' StringComparison.OrdinalIgnoreCase)); " is 126.
Long Statement,NuGet.Commands,PushCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PushCommand.cs,PushSymbols,The length of the statement  "                    Console.WriteWarning(NuGetResources.Warning_SymbolServerNotConfigured' Path.GetFileName(symbolPackagePath)' NuGetResources.DefaultSymbolServer); " is 144.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdateAllPackages,The length of the statement  "                Console.WriteLine(NuGetResources.FoundProjects' projects.Count' String.Join("' "' projects.Select(p => p.Project.ProjectName))); " is 128.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdateAllPackages,The length of the statement  "            IPackageRepository sourceRepository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources(RepositoryFactory' SourceProvider' Source); " is 144.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdatePackages,The length of the statement  "            var sharedPackageRepository = new SharedPackageRepository(pathResolver' sharedRepositoryFileSystem' sharedRepositoryFileSystem); " is 128.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdatePackages,The length of the statement  "            sourceRepository = sourceRepository ?? AggregateRepositoryHelper.CreateAggregateRepositoryFromSources(RepositoryFactory' SourceProvider' Source); " is 145.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdatePackages,The length of the statement  "            UpdatePackages(localRepository' sharedRepositoryFileSystem' sharedPackageRepository' sourceRepository' constraintProvider' pathResolver' project); " is 146.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdatePackages,The length of the statement  "            var packageManager = new PackageManager(sourceRepository' pathResolver' sharedRepositoryFileSystem' sharedPackageRepository); " is 125.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdatePackages,The length of the statement  "            // Consequently' when querying the package reference repository' we would have package references with no backing package files in " is 130.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdatePackages,The length of the statement  "            // the shared repository. This would cause the reference repository to skip the package assuming that the entry is invalid. " is 123.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdatePackages,The length of the statement  "                        // If the user explicitly allows prerelease or if the package being updated is prerelease we'll include prerelease versions in our list of packages " is 147.
Long Statement,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,UpdatePackages,The length of the statement  "                        projectManager.UpdatePackageReference(package.Id' spec' updateDependencies: true' allowPrereleaseVersions: allowPrerelease); " is 124.
Long Statement,NuGet.Common,PackageExtractor,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\PackageExtractor.cs,InstallPackage,The length of the statement  "            ExecuteLocked(uniqueToken' () => packageManager.InstallPackage(package' ignoreDependencies: true' allowPrereleaseVersions: true)); " is 130.
Long Statement,NuGet.Common,PackageExtractor,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\PackageExtractor.cs,GenerateUniqueToken,The length of the statement  "            var packagePath = packageManager.FileSystem.GetFullPath(packageManager.PathResolver.GetPackageFileName(packageId' version)); " is 124.
Long Statement,NuGet.Common,SelfUpdater,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\SelfUpdater.cs,SelfUpdate,The length of the statement  "                IPackageFile file = package.GetFiles().FirstOrDefault(f => Path.GetFileName(f.Path).Equals(NuGetExe' StringComparison.OrdinalIgnoreCase)); " is 138.
Long Statement,NuGet.Common,Console,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\Console.cs,Write,The length of the statement  "                // Don't try to format strings that do not have arguments. We end up throwing if the original string was not meant to be a format token  " is 135.
Long Statement,NuGet.Common,Console,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\Console.cs,Confirm,The length of the statement  "                System.Console.Write(String.Format(CultureInfo.CurrentCulture' LocalizedResourceManager.GetString("ConsoleConfirmMessage")' description)); " is 138.
Long Statement,NuGet.Common,Console,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\Console.cs,Confirm,The length of the statement  "                return result.StartsWith(LocalizedResourceManager.GetString("ConsoleConfirmMessageAccept")' StringComparison.OrdinalIgnoreCase); " is 128.
Long Statement,NuGet.Common,MSBuildProjectSystem,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\MSBuildProjectSystem.cs,GetProject,The length of the statement  "            return ProjectCollection.GlobalProjectCollection.GetLoadedProjects(projectFile).FirstOrDefault() ?? new Project(projectFile); " is 125.
Empty Catch Block,NuGet,Program,C:\repos\themotleyfool_NuGet\src\CommandLine\Program.cs,RemoveOldFile,The method has an empty catch block.
Empty Catch Block,NuGet.Commands,ProjectFactory,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\ProjectFactory.cs,GetPackagesPath,The method has an empty catch block.
Empty Catch Block,NuGet.Commands,UpdateCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\UpdateCommand.cs,GetProject,The method has an empty catch block.
Empty Catch Block,NuGet.Common,SelfUpdater,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\SelfUpdater.cs,GetNuGetVersion,The method has an empty catch block.
Empty Catch Block,NuGet.Common,SelfUpdater,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\SelfUpdater.cs,Move,The method has an empty catch block.
Magic Number,NuGet.Commands,InstallCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\InstallCommand.cs,ExecuteInParallel,The following statement contains a magic number: if (packageReferences.Count > defaultConnectionLimit)              {                  ServicePointManager.DefaultConnectionLimit = Math.Min(10' packageReferences.Count);              }
Magic Number,NuGet.Commands,SourcesCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\SourcesCommand.cs,PrintRegisteredSources,The following statement contains a magic number: var sourcePadding = new String(' '' 6);
Magic Number,NuGet.Commands,SourcesCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\SourcesCommand.cs,PrintRegisteredSources,The following statement contains a magic number: for (int i = 0; i < sourcesList.Count; i++)              {                  var source = sourcesList[i];                  var indexNumber = i + 1;                  var namePadding = new String(' '' i >= 9 ? 1 : 2);                  Console.WriteLine(                      "  {0}.{1}{2} [{3}]"'                      indexNumber'                      namePadding'                      source.Name'                      source.IsEnabled ? NuGetResources.SourcesCommandEnabled : NuGetResources.SourcesCommandDisabled);                  Console.WriteLine("{0}{1}"' sourcePadding' source.Source);              }
Magic Number,NuGet.Commands,SourcesCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\SourcesCommand.cs,PrintRegisteredSources,The following statement contains a magic number: for (int i = 0; i < sourcesList.Count; i++)              {                  var source = sourcesList[i];                  var indexNumber = i + 1;                  var namePadding = new String(' '' i >= 9 ? 1 : 2);                  Console.WriteLine(                      "  {0}.{1}{2} [{3}]"'                      indexNumber'                      namePadding'                      source.Name'                      source.IsEnabled ? NuGetResources.SourcesCommandEnabled : NuGetResources.SourcesCommandDisabled);                  Console.WriteLine("{0}{1}"' sourcePadding' source.Source);              }
Magic Number,NuGet.Commands,DeleteCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\DeleteCommand.cs,GetApiKey,The following statement contains a magic number: if (Arguments.Count > 2)              {                  apiKey = Arguments[2];              }
Magic Number,NuGet.Commands,DeleteCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\DeleteCommand.cs,GetApiKey,The following statement contains a magic number: if (Arguments.Count > 2)              {                  apiKey = Arguments[2];              }
Magic Number,NuGet.Commands,HelpCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\HelpCommand.cs,PrintCommand,The following statement contains a magic number: int descriptionPadding = maxWidth + 4;
Magic Number,NuGet.Commands,HelpCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\HelpCommand.cs,ViewHelpForCommand,The following statement contains a magic number: if (attribute.UsageDescription != null)              {                  const int padding = 5;                  Console.PrintJustified(padding' attribute.UsageDescription);                  Console.WriteLine();              }
Magic Number,NuGet.Commands,HelpCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\HelpCommand.cs,ViewHelpForCommand,The following statement contains a magic number: if (options.Count > 0)              {                  Console.WriteLine("options:");                  Console.WriteLine();                    // Get the max option width. +2 for showing + against multivalued properties                  int maxOptionWidth = options.Max(o => o.Value.Name.Length) + 2;                  // Get the max altname option width                  int maxAltOptionWidth = options.Max(o => (o.Key.AltName ?? String.Empty).Length);                    foreach (var o in options)                  {                      Console.Write(" -{0' -" + (maxOptionWidth + 2) + "}"' o.Value.Name +                          (TypeHelper.IsMultiValuedProperty(o.Value) ? " +" : String.Empty));                      Console.Write(" {0' -" + (maxAltOptionWidth + 4) + "}"' GetAltText(o.Key.AltName));                        Console.PrintJustified((10 + maxAltOptionWidth + maxOptionWidth)' o.Key.Description);                    }                    if (_helpUrl != null)                  {                      Console.WriteLine();                      Console.WriteLine("For more information' visit {0}"' _helpUrl);                  }                    Console.WriteLine();              }
Magic Number,NuGet.Commands,HelpCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\HelpCommand.cs,ViewHelpForCommand,The following statement contains a magic number: if (options.Count > 0)              {                  Console.WriteLine("options:");                  Console.WriteLine();                    // Get the max option width. +2 for showing + against multivalued properties                  int maxOptionWidth = options.Max(o => o.Value.Name.Length) + 2;                  // Get the max altname option width                  int maxAltOptionWidth = options.Max(o => (o.Key.AltName ?? String.Empty).Length);                    foreach (var o in options)                  {                      Console.Write(" -{0' -" + (maxOptionWidth + 2) + "}"' o.Value.Name +                          (TypeHelper.IsMultiValuedProperty(o.Value) ? " +" : String.Empty));                      Console.Write(" {0' -" + (maxAltOptionWidth + 4) + "}"' GetAltText(o.Key.AltName));                        Console.PrintJustified((10 + maxAltOptionWidth + maxOptionWidth)' o.Key.Description);                    }                    if (_helpUrl != null)                  {                      Console.WriteLine();                      Console.WriteLine("For more information' visit {0}"' _helpUrl);                  }                    Console.WriteLine();              }
Magic Number,NuGet.Commands,HelpCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\HelpCommand.cs,ViewHelpForCommand,The following statement contains a magic number: if (options.Count > 0)              {                  Console.WriteLine("options:");                  Console.WriteLine();                    // Get the max option width. +2 for showing + against multivalued properties                  int maxOptionWidth = options.Max(o => o.Value.Name.Length) + 2;                  // Get the max altname option width                  int maxAltOptionWidth = options.Max(o => (o.Key.AltName ?? String.Empty).Length);                    foreach (var o in options)                  {                      Console.Write(" -{0' -" + (maxOptionWidth + 2) + "}"' o.Value.Name +                          (TypeHelper.IsMultiValuedProperty(o.Value) ? " +" : String.Empty));                      Console.Write(" {0' -" + (maxAltOptionWidth + 4) + "}"' GetAltText(o.Key.AltName));                        Console.PrintJustified((10 + maxAltOptionWidth + maxOptionWidth)' o.Key.Description);                    }                    if (_helpUrl != null)                  {                      Console.WriteLine();                      Console.WriteLine("For more information' visit {0}"' _helpUrl);                  }                    Console.WriteLine();              }
Magic Number,NuGet.Commands,HelpCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\HelpCommand.cs,ViewHelpForCommand,The following statement contains a magic number: if (options.Count > 0)              {                  Console.WriteLine("options:");                  Console.WriteLine();                    // Get the max option width. +2 for showing + against multivalued properties                  int maxOptionWidth = options.Max(o => o.Value.Name.Length) + 2;                  // Get the max altname option width                  int maxAltOptionWidth = options.Max(o => (o.Key.AltName ?? String.Empty).Length);                    foreach (var o in options)                  {                      Console.Write(" -{0' -" + (maxOptionWidth + 2) + "}"' o.Value.Name +                          (TypeHelper.IsMultiValuedProperty(o.Value) ? " +" : String.Empty));                      Console.Write(" {0' -" + (maxAltOptionWidth + 4) + "}"' GetAltText(o.Key.AltName));                        Console.PrintJustified((10 + maxAltOptionWidth + maxOptionWidth)' o.Key.Description);                    }                    if (_helpUrl != null)                  {                      Console.WriteLine();                      Console.WriteLine("For more information' visit {0}"' _helpUrl);                  }                    Console.WriteLine();              }
Magic Number,NuGet.Commands,PackCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PackCommand.cs,GetInputFile,The following statement contains a magic number: switch (candidates.Count)              {                  case 1:                      return candidates.Single();                  case 2:                      // Remove all nuspec files                      candidates.RemoveAll(file => Path.GetExtension(file).Equals(Constants.ManifestExtension' StringComparison.OrdinalIgnoreCase));                      if (candidates.Count == 1)                      {                          return candidates.Single();                      }                      goto default;                  default:                      throw new CommandLineException(NuGetResources.PackageCommandSpecifyInputFileError);              }
Magic Number,NuGet.Commands,PushCommand,C:\repos\themotleyfool_NuGet\src\CommandLine\Commands\PushCommand.cs,ExecuteCommand,The following statement contains a magic number: if (timeout.Seconds <= 0)              {                  timeout = TimeSpan.FromMinutes(5); // Default to 5 minutes              }
Magic Number,NuGet.Common,PackageExtractor,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\PackageExtractor.cs,ExecuteLocked,The following statement contains a magic number: using (var mutex = new Mutex(initiallyOwned: true' name: name' createdNew: out created))              {                  try                  {                      // We need to ensure only one instance of the executable performs the install. All other instances need to wait                       // for the package to be installed. We'd cap the waiting duration so that other instances aren't waiting indefinitely.                      if (created)                      {                          action();                      }                      else                      {                          mutex.WaitOne(TimeSpan.FromMinutes(2));                      }                  }                  finally                  {                      mutex.ReleaseMutex();                  }              }
Magic Number,NuGet.Common,ProjectHelper,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\ProjectHelper.cs,GetSolutionDir,The following statement contains a magic number: const int maxDepth = 5;
Missing Default,NuGet.Common,Console,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\Console.cs,Log,The following switch statement is missing a default case: switch (level)              {                  case MessageLevel.Info:                      WriteLine(message' args);                      break;                  case MessageLevel.Warning:                      WriteWarning(message' args);                      break;                  case MessageLevel.Debug:                      WriteColor(Out' ConsoleColor.Gray' message' args);                      break;              }
Missing Default,NuGet.Common,ProjectHelper,C:\repos\themotleyfool_NuGet\src\CommandLine\Common\ProjectHelper.cs,TryGetProjectFile,The following switch statement is missing a default case: switch (candidates.Count)              {                  case 1:                      projectFile = candidates.Single();                      break;              }
