Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NuGet.Test.NuGetCommandLine.Commands,TestInstallCommand,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,TestInstallCommand,The method has 7 parameters. Parameters: factory' sourceProvider' fileSystem' packageManager' machineCacheRepository' allowPackageRestore' settings
Long Parameter List,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,AssertTwoPackages,The method has 5 parameters. Parameters: mirrorCommand' id' version' id2' version2
Long Parameter List,NuGet.Test.ServerExtensions,TestMirrorCommand,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,TestMirrorCommand,The method has 5 parameters. Parameters: packageId' factory' sourceProvider' fileSystem' machineCacheRepository
Long Statement,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptions_ThrowsCommandLineExpectionWhenOptionUnknow,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => parser.ExtractOptions(command' argsEnumerator)' expectedErrorMessage); " is 121.
Long Statement,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptions_ThrowsWhenOptionHasNoValue,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => parser.ExtractOptions(command' argsEnumerator)' expectedErrorMessage); " is 121.
Long Statement,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptions_ThrowsIfUnableToConvertType,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => parser.ExtractOptions(command' argsEnumerator)' expectedErrorMessage); " is 121.
Long Statement,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptions_ThrowsIfCommandHasNoProperties,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => parser.ExtractOptions(command' argsEnumerator)' expectedErrorMessage); " is 121.
Long Statement,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptions_ThrowsIfCommandOptionIsAmbigious,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => parser.ExtractOptions(command' argsEnumerator)' expectedErrorMessage); " is 121.
Long Statement,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptions_ThrowsIfCommandOptionDoesNotExist,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => parser.ExtractOptions(command' argsEnumerator)' expectedErrorMessage); " is 121.
Long Statement,NuGet.Test.NuGetCommandLine,CommandManagerTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandManagerTests.cs,GetCommand_ThrowsIfNoCommandFound,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => cm.GetCommand("NoCommandByThisName")' "Unknown command: 'NoCommandByThisName'"); " is 131.
Long Statement,NuGet.Test.NuGetCommandLine,CommandManagerTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandManagerTests.cs,GetCommandOptions_ThrowsWhenOptionHasNoSetter,The length of the statement  "            string expectedErrorText = "[option] on 'NuGet.Test.NuGetCommandLine.CommandManagerTests+MockCommandBadOption.Message' is invalid without a setter."; " is 149.
Long Statement,NuGet.Test.NuGetCommandLine,CommandManagerTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandManagerTests.cs,RegisterCommand_ThrowsIfCommandNamesAreAmbigious,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => cm.GetCommand("f")' "Ambiguous command 'f'. Possible values: Foo FooBar."); " is 126.
Long Statement,NuGet.Test.NuGetCommandLine,ResourceHelperTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ResourceHelperTests.cs,GetLocalizedString_ThrowsIfResourceManagerIsNotAProperty,The length of the statement  "                "The resource type 'NuGet.Test.NuGetCommandLine.ResourceHelperTests+BadResourceType' does not have an accessible static property named 'ResourceManager'."); " is 156.
Long Statement,NuGet.Test.NuGetCommandLine,ResourceHelperTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ResourceHelperTests.cs,GetLocalizedString_ThrowsIfGetPropertyIsNotAvalible,The length of the statement  "                "The resource type 'NuGet.Test.NuGetCommandLine.ResourceHelperTests+ResourceTypeWithNoGetter' does not have an accessible static property named 'ResourceManager'."); " is 165.
Long Statement,NuGet.Test,ConfigCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ConfigCommandTest.cs,ExecuteThrowsIfSettingAnd,The length of the statement  "                "\"SetValue\" cannot be called on a NullSettings. This may be caused on account of insufficient permissions to read or write to \"%AppData%\\NuGet\\NuGet.config\"."); " is 166.
Long Statement,NuGet.Test,DefaultSpecValuesRuleTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\DefaultSpecValuesRuleTest.cs,RuleReturnsIssueIfProjectUrlIsSampleValue,The length of the statement  "            Assert.Equal("The value \"http://PROJECT_URL_HERE_OR_DELETE_THIS_LINE\" for ProjectUrl is a sample value and should be removed."' result.First().Description); " is 158.
Long Statement,NuGet.Test,DefaultSpecValuesRuleTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\DefaultSpecValuesRuleTest.cs,RuleReturnsIssueIfIconUrlIsSampleValue,The length of the statement  "            Assert.Equal("The value \"http://ICON_URL_HERE_OR_DELETE_THIS_LINE\" for IconUrl is a sample value and should be removed."' result.First().Description); " is 152.
Long Statement,NuGet.Test,DefaultSpecValuesRuleTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\DefaultSpecValuesRuleTest.cs,RuleReturnsIssueIfLicenseUrlIsSampleValue,The length of the statement  "            Assert.Equal("The value \"http://LICENSE_URL_HERE_OR_DELETE_THIS_LINE\" for LicenseUrl is a sample value and should be removed."' result.First().Description); " is 158.
Long Statement,NuGet.Test,DefaultSpecValuesRuleTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\DefaultSpecValuesRuleTest.cs,RuleReturnsIssueIfReleaseNotesIsSampleValue,The length of the statement  "            Assert.Equal("The value \"Summary of changes made in this release of the package.\" for ReleaseNotes is a sample value and should be removed."' result.First().Description); " is 172.
Long Statement,NuGet.Test,DefaultSpecValuesRuleTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\DefaultSpecValuesRuleTest.cs,RuleReturnsIssueIfDescriptionIsSampleValue,The length of the statement  "            Assert.Equal("The value \"Package description\" for Description is a sample value and should be removed."' result.First().Description); " is 135.
Long Statement,NuGet.Test,DeleteCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\DeleteCommandTest.cs,DeleteCommandUsesUpApiKeyIfSpecifiedAsAnUnnammedArgument,The length of the statement  "            var deleteCommand = new DeleteCommand(new Mock<IPackageSourceProvider>(MockBehavior.Strict).Object' new Mock<ISettings>(MockBehavior.Strict).Object); " is 149.
Long Statement,NuGet.Test,DeleteCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\DeleteCommandTest.cs,DeleteCommandPrefersApiKeySpecifiedAsANamedArgument,The length of the statement  "            var deleteCommand = new DeleteCommand(new Mock<IPackageSourceProvider>(MockBehavior.Strict).Object' new Mock<ISettings>(MockBehavior.Strict).Object) " is 148.
Long Statement,NuGet.Test,LocalizedResourceManagerTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\LocalizedResourceManagerTest.cs,GetStringReturnsLocalizedResourceIfAvailable,The length of the statement  "            Assert.Equal("La fonctionnalité de restauration des packages est désactivée par défaut. Pour donner votre accord' ouvrez la boîte de dialogue Options de Visual Studio' cliquez sur le nœud Gestionnaire de package et activez l’option « Autoriser NuGet à télécharger les packages manquants lors de la génération ». Vous pouvez également donner votre accord en définissant la variable d’environnement « EnableNuGetPackageRestore » sur « true »."'  " is 442.
Long Statement,NuGet.Test,SetApiKeyCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SetApiKeyCommandTest.cs,SetApiKeyThrowsIfPackageSourceProviderIsNull,The length of the statement  "            ExceptionAssert.ThrowsArgNull(() => new SetApiKeyCommand(packageSourceProvider: null' settings: null)' "packageSourceProvider"); " is 128.
Long Statement,NuGet.Test,SetApiKeyCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SetApiKeyCommandTest.cs,SetApiKeyThrowsIfSettingsFileIsNullSettings,The length of the statement  "                "\"SetValue\" cannot be called on a NullSettings. This may be caused on account of insufficient permissions to read or write to \"%AppData%\\NuGet\\NuGet.config\"."); " is 166.
Long Statement,NuGet.Test,SetApiKeyCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SetApiKeyCommandTest.cs,SetApiKeyCommandUsesSettingsFile,The length of the statement  "            settingsFile.Setup(c => c.SetValue("apikeys"' NuGetConstants.DefaultGalleryServerUrl' It.IsAny<string>())).Verifiable(); " is 120.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandUsesPathFromSolutionRepositorySettings,The length of the statement  "            var installCommand = new Mock<TestInstallCommand>(GetFactory()' GetSourceProvider()' null' null' null' true' Mock.Of<ISettings>()) { CallBase = true }; " is 151.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandUsesPathFromConfigInSolutionRoot,The length of the statement  "            var installCommand = new Mock<TestInstallCommand>(GetFactory()' GetSourceProvider()' null' null' null' true' Mock.Of<ISettings>()) { CallBase = true }; " is 151.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandUsesPathFromConfigInSolutionRoot,The length of the statement  "                .Returns<string>(_ => GetFileSystemWithDefaultConfig(expectedPath' settingsFilePath: @"x:\solution-dir\nuget.config"' repositoryRoot: @"x:\solution-dir\.nuget")) " is 161.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandLogsWarningsForFailingRepositoriesIfNoSourcesAreSpecified,The length of the statement  "            console.Setup(c => c.Log(It.IsAny<MessageLevel>()' It.IsAny<string>()' It.IsAny<object[]>())).Callback((MessageLevel a' string b' object[] c) => " is 144.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandThrowsIfConfigFileDoesNotExist,The length of the statement  "            ExceptionAssert.Throws<FileNotFoundException>(() => installCommand.ExecuteCommand()' @"x:\test\packages.config not found."); " is 124.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandUsesLocalCacheIfNoCacheIsFalse,The length of the statement  "            localCache.Setup(c => c.GetPackages()).Returns(new[] { PackageUtility.CreatePackage("Gamma") }.AsQueryable()).Verifiable(); " is 123.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandUsesLocalCacheIfNoCacheIsFalse,The length of the statement  "            var installCommand = new TestInstallCommand(GetFactory()' GetSourceProvider()' fileSystem' machineCacheRepository: localCache.Object) " is 133.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandDoesNotUseLocalCacheIfNoCacheIsTrue,The length of the statement  "            var installCommand = new TestInstallCommand(GetFactory()' GetSourceProvider()' fileSystem' machineCacheRepository: localCache.Object) " is 133.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandUpdatesPackageIfAlreadyPresentAndNotUsingSideBySide,The length of the statement  "            var packageManager = new PackageManager(GetFactory().CreateRepository("Some source")' new DefaultPackagePathResolver(fileSystem)' fileSystem' repository); " is 154.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandUpdatesPackageFromPackagesConfigIfDifferentVersionAlreadyPresentAndNotUsingSideBySide,The length of the statement  "            var repository = new Mock<LocalPackageRepository>(new DefaultPackagePathResolver(fileSystem' useSideBySidePaths: false)' fileSystem) { CallBase = true }; " is 153.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandUpdatesPackageFromPackagesConfigIfDifferentVersionAlreadyPresentAndNotUsingSideBySide,The length of the statement  "            var packageManager = new PackageManager(GetFactory().CreateRepository("Some source")' new DefaultPackagePathResolver(fileSystem)' fileSystem' repository.Object); " is 161.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandNoOpsIfExcludingVersionAndALowerVersionOfThePackageIsAlreadyInstalled,The length of the statement  "            var repository = new Mock<LocalPackageRepository>(new DefaultPackagePathResolver(fileSystem' useSideBySidePaths: false)' fileSystem) { CallBase = true }; " is 153.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandNoOpsIfExcludingVersionAndALowerVersionOfThePackageIsAlreadyInstalled,The length of the statement  "            var packageManager = new PackageManager(GetFactory().CreateRepository("Some source")' new DefaultPackagePathResolver(fileSystem)' fileSystem' repository.Object); " is 161.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandFromConfigIgnoresDependencies,The length of the statement  "            var installCommand = new TestInstallCommand(repositoryFactory.Object' packageSourceProvider' fileSystem' packageManager.Object); " is 128.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandFromConfigPerformsQuickCheckForFiles,The length of the statement  "            var installCommand = new TestInstallCommand(repositoryFactory.Object' packageSourceProvider' fileSystem' packageManager.Object) " is 127.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandDoesNotPromptForConsentIfRequireConsentIsNotSet,The length of the statement  "            var installCommand = new TestInstallCommand(repositoryFactory.Object' packageSourceProvider' fileSystem' packageManager.Object' allowPackageRestore: false); " is 156.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandPromptsForConsentIfRequireConsentIsSet,The length of the statement  "            var installCommand = new TestInstallCommand(repositoryFactory.Object' packageSourceProvider' fileSystem' packageManager.Object' allowPackageRestore: false); " is 156.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandPromptsForConsentIfRequireConsentIsSet,The length of the statement  "            Assert.Equal("Package restore is disabled by default. To give consent' open the Visual Studio Options dialog' click on Package Manager node and check 'Allow NuGet to download missing packages during build.' You can also give consent by setting the environment variable 'EnableNuGetPackageRestore' to 'true'."' " is 309.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandInstallsSatellitePackagesAfterCorePackages,The length of the statement  "            // We *shouldn't* be testing if a sequence of operations worked rather that the outcome that satellite package was installed correctly'  " is 135.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandInstallsSatellitePackagesAfterCorePackages,The length of the statement  "            packageManager.Setup(p => p.InstallPackage(package2' true' true)).Callback(() => langPackInstalled = true).Verifiable(); " is 120.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandInstallsSatellitePackagesAfterCorePackages,The length of the statement  "            var installCommand = new TestInstallCommand(repositoryFactory.Object' packageSourceProvider' fileSystem' packageManager.Object); " is 128.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,GetFactory,The length of the statement  "            var repositoryA = new MockPackageRepository { PackageUtility.CreatePackage("Foo")' PackageUtility.CreatePackage("Baz"' "0.4")' PackageUtility.CreatePackage("Baz"' "0.7") }; " is 172.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,GetFactory,The length of the statement  "            var repositoryB = new MockPackageRepository { PackageUtility.CreatePackage("Bar"' "0.5")' PackageUtility.CreatePackage("Baz"' "0.8.1-alpha") }; " is 143.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,GetSourceProvider,The length of the statement  "            sources = sources ?? new[] { new PackageSource("Some source"' "Some source name")' new PackageSource("Some other source") }; " is 124.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,Dispose,The length of the statement  "            Environment.SetEnvironmentVariable("EnableNuGetPackageRestore"' _environmentVariableValue' EnvironmentVariableTarget.Process); " is 126.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,GetInputFileThrowsIfNoFiles,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => PackCommand.GetInputFile(Enumerable.Empty<string>())' "Please specify a nuspec or project file to use."); " is 156.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,GetInputFileMultipleProjectFilesThrows,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => PackCommand.GetInputFile(new[] { "a.csproj"' "b.fsproj" })' "Please specify a nuspec or project file to use."); " is 162.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,GetInputFileMultipleNuSpecFilesThrows,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(() => PackCommand.GetInputFile(new[] { "a.nuspec"' "b.NuspeC" })' "Please specify a nuspec or project file to use."); " is 162.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,PackCommandWarnsIfVersionContainsSpecialVersionButDoesNotConformToSemVer,The length of the statement  "            console.Setup(c => c.WriteWarning(It.IsAny<string>()' It.IsAny<object[]>())).Callback<string' object[]>((text' p) => builder.AppendFormat(text' p)); " is 148.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,PackCommandWarnsIfVersionContainsSpecialVersionButDoesNotConformToSemVer,The length of the statement  "            console.Setup(c => c.WriteWarning(It.IsAny<bool>()' It.IsAny<string>()' It.IsAny<object[]>())).Callback<bool' string' object[]>((b' text' p) => builder.AppendFormat(text' p)); " is 175.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,PackCommandWarnsIfVersionContainsSpecialVersionButDoesNotConformToSemVer,The length of the statement  "            Assert.Equal(@"1 issue(s) found with package 'A'.Issue: Use semantic versioningDescription: Version ""1.0-alpha"" does not follow semantic versioning guidelines.Solution: Update your nuspec file or use the AssemblyInformationalVersion assembly attribute to specify a semantic version as described at http://semver.org. "' " is 321.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,ProvidingNoArgumentListsPackages,The length of the statement  "            packageSourceProvider.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource("FirstSource"' "FirstName") }); " is 122.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,ProvidingListArgumentListsPackages,The length of the statement  "            packageSourceProvider.Setup(c => c.LoadPackageSources()).Returns(new[] { new PackageSource("FirstSource"' "FirstName"' isEnabled: false) }); " is 140.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,AddCommandThrowsIfNameIsNullOrEmpty,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "The name specified cannot be empty. Please provide a valid name."); " is 136.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,AddCommandThrowsIfSourceIsNullOrEmpty,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "The source specified cannot be empty. Please provide a valid source."); " is 140.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,AddCommandThrowsIfSourceIsInvalid,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "The source specified is invalid. Please provide a valid source."); " is 135.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,AddCommandThrowsIfNameAlreadyExists,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "The name specified has already been added to the list of available package sources. Please provide a unique name."); " is 185.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,AddCommandThrowsIfSourceAlreadyExists,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "The source specified has already been added to the list of available package sources. Please provide a unique source."); " is 189.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,AddCommandAddsSourceToSourceProvider,The length of the statement  "            var expectedSources = new [] { new PackageSource("http://TestSource"' "TestName")' new PackageSource("http://new-source"' "new-source-name") }; " is 143.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,RemoveCommandThrowsIfSourceIsNullOrEmpty,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "The name specified cannot be empty. Please provide a valid name."); " is 136.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,RemoveCommandThrowsIfSourceDoesNotExist,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "Unable to find any package source(s) matching name: efgh."); " is 129.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,UpdateCommandThrowsIfSourceIsNullOrEmpty,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "The name specified cannot be empty. Please provide a valid name."); " is 136.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,UpdateCommandThrowsIfNameDoesNotExist,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "Unable to find any package source(s) matching name: efgh."); " is 129.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,UpdateCommandThrowsIfSourceIsInvalid,The length of the statement  "            ExceptionAssert.Throws<CommandLineException>(sourceCommand.Execute' "The source specified is invalid. Please provide a valid source."); " is 135.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,UpdateCommandThrowsIfSourceAlreadyExists,The length of the statement  "                "The source specified has already been added to the list of available package sources. Please provide a unique source."); " is 121.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,UpdateCommandPreservesOrder,The length of the statement  "            var sources = new[] { new PackageSource("First")' new PackageSource("Abcd")' new PackageSource("http://test-source"' "source") }; " is 129.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,UpdateCommandStoresUsernameAndPassword,The length of the statement  "            var sources = new[] { new PackageSource("First")' new PackageSource("Abcd")' new PackageSource("http://test-source"' "source") }; " is 129.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,EnableCommandEnableDisabledSourcesCorrectly,The length of the statement  "            packageSourceProvider.Setup(s => s.LoadPackageSources()).Returns(new[] { new PackageSource("Two") { IsEnabled = false } }); " is 123.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,SourcesCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\SourcesCommandTest.cs,EnableCommandEnableDisabledSourcesCorrectly,The length of the statement  "                                 .Callback((IEnumerable<PackageSource> sources) => Assert.Equal(new[] { new PackageSource("Two") { IsEnabled = true } }' sources)) " is 129.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,UpdateCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\UpdateCommandTest.cs,UpdatePackages,The length of the statement  "            projectManager.Setup(pm => pm.UpdatePackageReference("Sample"' VersionUtility.GetUpgradeVersionSpec(new SemanticVersion("1.0")' PackageUpdateMode.Newest)' true' false)); " is 169.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,UpdateCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\UpdateCommandTest.cs,UpdatePackages_Minor,The length of the statement  "            projectManager.Setup(pm => pm.UpdatePackageReference("Sample"' VersionUtility.GetUpgradeVersionSpec(new SemanticVersion("1.0")' PackageUpdateMode.Minor)' true' false)); " is 168.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,UpdateCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\UpdateCommandTest.cs,UpdatePackages_Safe,The length of the statement  "            projectManager.Setup(pm => pm.UpdatePackageReference("Sample"' VersionUtility.GetUpgradeVersionSpec(new SemanticVersion("1.0")' PackageUpdateMode.Safe)' true' false)); " is 167.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,UpdateCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\UpdateCommandTest.cs,UpdatePackageAddsPackagesToSharedPackageRepositoryWhenReferencesAreAdded,The length of the statement  "            updateCommand.UpdatePackages(localRepository' fileSystem' sharedRepository.Object' sourceRepository' constraintProvider' pathResolver' projectSystem); " is 150.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,UpdateCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\UpdateCommandTest.cs,UpdatePackageUpdatesPackagesWithCommonDependency,The length of the statement  "            var package_A10 = PackageUtility.CreatePackage("A"' "1.0"' content: new[] { "A.txt" }' dependencies: new[] { new PackageDependency("C"' VersionUtility.ParseVersionSpec("1.0")) }); " is 179.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,UpdateCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\UpdateCommandTest.cs,UpdatePackageUpdatesPackagesWithCommonDependency,The length of the statement  "            var package_B10 = PackageUtility.CreatePackage("B"' "1.0"' content: new[] { "B.txt" }' dependencies: new[] { new PackageDependency("C"' VersionUtility.ParseVersionSpec("1.0")) }); " is 179.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,UpdateCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\UpdateCommandTest.cs,UpdatePackageUpdatesPackagesWithCommonDependency,The length of the statement  "            var package_A12 = PackageUtility.CreatePackage("A"' "1.2"' content: new[] { "A.txt" }' dependencies: new[] { new PackageDependency("C"' VersionUtility.ParseVersionSpec("1.0")) }); " is 179.
Long Statement,NuGet.Test.NuGetCommandLine.Commands,UpdateCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\UpdateCommandTest.cs,UpdatePackageUpdatesPackagesWithCommonDependency,The length of the statement  "            updateCommand.UpdatePackages(localRepository' fileSystem' sharedRepository.Object' sourceRepository' constraintProvider' pathResolver' projectSystem); " is 150.
Long Statement,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,MirrorCommandForPackageReferenceFileWarnsIfThereIsNoPackageToMirror,The length of the statement  "            console.Setup(c => c.Log(It.IsAny<MessageLevel>()' It.IsAny<string>()' It.IsAny<object[]>())).Callback((MessageLevel a' string b' object[] c) => " is 144.
Long Statement,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,MirrorCommandForPackageReferenceFileWarnsIfThereIsNoPackageToMirror,The length of the statement  "            var mirrorCommand = new TestMirrorCommand(@"x:\test\packages.config"' fileSystem: fileSystem) { Console = console.Object }; " is 123.
Long Statement,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,MirrorCommandLogsWarningsForFailingRepositoriesIfNoSourcesAreSpecified,The length of the statement  "            console.Setup(c => c.Log(It.IsAny<MessageLevel>()' It.IsAny<string>()' It.IsAny<object[]>())).Callback((MessageLevel a' string b' object[] c) => " is 144.
Long Statement,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,MirrorCommandThrowsIfConfigFileDoesNotExist,The length of the statement  "            ExceptionAssert.Throws<FileNotFoundException>(() => mirrorCommand.ExecuteCommand()' @"x:\test\packages.config not found."); " is 123.
Long Statement,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,MirrorCommandThrowsIfVersionAndPackageConfigBothSpecified,The length of the statement  "            ExceptionAssert.Throws<ArgumentException>(() => mirrorCommand.ExecuteCommand()' "Version should be specified in packages.config file instead."); " is 144.
Long Statement,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,MirrorCommandUsesLocalCacheIfNoCacheIsFalse,The length of the statement  "            localCache.Setup(c => c.GetPackages()).Returns(new[] { PackageUtility.CreatePackage("Gamma") }.AsQueryable()).Verifiable(); " is 123.
Long Statement,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,GetFactory,The length of the statement  "            var repositoryA = new MockPackageRepository { PackageUtility.CreatePackage("Foo")' PackageUtility.CreatePackage("Baz"' "0.4")' PackageUtility.CreatePackage("Baz"' "0.7") }; " is 172.
Long Statement,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,GetFactory,The length of the statement  "            var repositoryB = new MockPackageRepository { PackageUtility.CreatePackage("Bar"' "0.5")' PackageUtility.CreatePackage("Baz"' "0.8.1-alpha") }; " is 143.
Long Statement,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,GetSourceProvider,The length of the statement  "            sources = sources ?? new[] { new PackageSource("Some source"' "Some source name")' new PackageSource("Some other source") }; " is 124.
Magic Number,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptions_AddsArgumentsWhenItemsDoNotStartWithSlashOrDash,The following statement contains a magic number: Assert.Equal(2' command.Arguments.Count);
Magic Number,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptionAddsValuesToListCommand,The following statement contains a magic number: Assert.Equal(command.ListProperty.Count' 3);
Magic Number,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptionAddsValuesToListCommand,The following statement contains a magic number: Assert.Equal(command.ListProperty[2]' "Val3");
Magic Number,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptionsSplitsValueBySemiColorForCollectionOption,The following statement contains a magic number: Assert.Equal(command.ListProperty.Count' 5);
Magic Number,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptionsSplitsValueBySemiColorForCollectionOption,The following statement contains a magic number: Assert.Equal(command.ListProperty[2]' "Val3");
Magic Number,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptionsSplitsValueBySemiColorForCollectionOption,The following statement contains a magic number: Assert.Equal(command.ListProperty[3]' "Val4");
Magic Number,NuGet.Test.NuGetCommandLine,CommandLinePaserTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandLinePaserTests.cs,ExtractOptionsSplitsValueBySemiColorForCollectionOption,The following statement contains a magic number: Assert.Equal(command.ListProperty[4]' "Val5");
Magic Number,NuGet.Test.NuGetCommandLine,CommandManagerTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\CommandManagerTests.cs,GetCommandOptions_ReturnsCorrectOpionAttributeAndPropertyInfo,The following statement contains a magic number: Assert.Equal(2' actual.Count);
Magic Number,NuGet.Test.NuGetCommandLine,TypeHelperTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\TypeHelperTest.cs,ChangeType_ReturnsValueIfTypesMatch,The following statement contains a magic number: var actual = TypeHelper.ChangeType(3' typeof(int));
Magic Number,NuGet.Test.NuGetCommandLine,TypeHelperTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\TypeHelperTest.cs,ChangeType_ReturnsValueIfTypesMatch,The following statement contains a magic number: Assert.Equal(3' actual);
Magic Number,NuGet.Test.NuGetCommandLine,TypeHelperTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\TypeHelperTest.cs,ChangeType_ReturnsConvertedTypeWhenThereIsAConverterFromTheType,The following statement contains a magic number: Assert.Equal(3' actual);
Magic Number,NuGet.Test.NuGetCommandLine,TypeHelperTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\TypeHelperTest.cs,ChangeType_ReturnsConvertedTypeWhenThereIsAConverterFromTheValue,The following statement contains a magic number: var actual = TypeHelper.ChangeType(3' typeof(string));
Magic Number,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandInstallsAllPackagesFromConfigFileIfSpecifiedAsArgument,The following statement contains a magic number: Assert.Equal(3' fileSystem.Paths.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,InstallCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\InstallCommandTest.cs,InstallCommandInstallsAllPackagesUsePackagesConfigByDefaultIfNoArgumentIsSpecified,The following statement contains a magic number: Assert.Equal(3' fileSystem.Paths.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackagesUsesAggregateSourceIfNoSourceDefined,The following statement contains a magic number: Assert.Equal(6' packages.Count());
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackagesUsesAggregateSourceIfNoSourceDefined,The following statement contains a magic number: AssertPackage(new { Id = "DefaultUrlUsed"' Ver = "1.0" }' packages.ElementAt(2));
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackagesUsesAggregateSourceIfNoSourceDefined,The following statement contains a magic number: AssertPackage(new { Id = "jQuery"' Ver = "1.50" }' packages.ElementAt(3));
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackagesUsesAggregateSourceIfNoSourceDefined,The following statement contains a magic number: AssertPackage(new { Id = "NHibernate"' Ver = "1.2" }' packages.ElementAt(4));
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackagesUsesAggregateSourceIfNoSourceDefined,The following statement contains a magic number: AssertPackage(new { Id = "SearchPackage"' Ver = "1.0" }' packages.ElementAt(5));
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackageCollapsesVersionsByDefault,The following statement contains a magic number: Assert.Equal(2' packages.Count());
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackageReturnsAllVersionsIfAllVersionsFlagIsSet,The following statement contains a magic number: Assert.Equal(5' packages.Count());
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackageReturnsAllVersionsIfAllVersionsFlagIsSet,The following statement contains a magic number: AssertPackage(new { Id = "NHibernate"' Ver = "1.0" }' packages.ElementAt(2));
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackageReturnsAllVersionsIfAllVersionsFlagIsSet,The following statement contains a magic number: AssertPackage(new { Id = "NHibernate"' Ver = "1.1" }' packages.ElementAt(3));
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackageReturnsAllVersionsIfAllVersionsFlagIsSet,The following statement contains a magic number: AssertPackage(new { Id = "NHibernate"' Ver = "1.2" }' packages.ElementAt(4));
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackageDoesNotShowUnlistedPackagesOrPackagesWithLegacyDates,The following statement contains a magic number: packageC.SetupGet(p => p.Published).Returns(new DateTime(1900' 1' 1' 0' 0' 0));
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackageDoesNotShowUnlistedPackagesOrPackagesWithLegacyDates,The following statement contains a magic number: Assert.Equal(2' packages.Count());
Magic Number,NuGet.Test.NuGetCommandLine.Commands,ListCommandTests,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\ListCommandTests.cs,GetPackageUsesIsAbsoluteLatestVersionIfPrereleaseIfSpecifiedAndRespositoriesSupportsPrerelease,The following statement contains a magic number: Assert.Equal(2' packages.Count());
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,PackCommandDefaultFiltersRemovesManifestAndPackageFiles,The following statement contains a magic number: Assert.Equal(3' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,PackCommandDefaultFiltersRemovesManifestAndPackageFiles,The following statement contains a magic number: Assert.Equal(files[2].Path' @"x:\packagefiles\test.nuspec.bkp");
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,PackCommandDefaultFiltersRemovesRepoFiles,The following statement contains a magic number: Assert.Equal(2' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesUsesWildCardExtension,The following statement contains a magic number: Assert.Equal(2' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesExcludesWildCardPaths,The following statement contains a magic number: Assert.Equal(2' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesDoesNotExcludeDefaultFilesIfExcludeSpecialPathsIsDisabled,The following statement contains a magic number: Assert.Equal(3' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesDoesNotExcludeDefaultFilesIfExcludeSpecialPathsIsDisabled,The following statement contains a magic number: Assert.Equal(files[2].Path' @"p:\some-file\should-not-be-removed\test.ext\sample3.jpg");
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesPerformsCaseInsensitiveSearch,The following statement contains a magic number: Assert.Equal(2' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesDoesNotUseDefaultExcludesIfDisabled,The following statement contains a magic number: Assert.Equal(3' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesDoesNotUseDefaultExcludesIfDisabled,The following statement contains a magic number: Assert.Equal(files[2].Path' @"p:\some-file\should-not-be-removed\.hgignore");
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesForLibPackageRemovesAllPDBs,The following statement contains a magic number: Assert.Equal(3' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesForLibPackageRemovesAllPDBs,The following statement contains a magic number: Assert.Equal(files[2].Path' @"tools\mycmd.exe");
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesForLibPackageRemovesAllFilesFromSrcTargetFolder,The following statement contains a magic number: Assert.Equal(3' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesForLibPackageRemovesAllFilesFromSrcTargetFolder,The following statement contains a magic number: Assert.Equal(files[2].Path' @"content\default.aspx.cs");
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesForSymbolPackageRemovesAllContentFiles,The following statement contains a magic number: Assert.Equal(3' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesForSymbolPackageRemovesAllContentFiles,The following statement contains a magic number: Assert.Equal(files[2].Path' @"src\mylib.cs");
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesForSymbolPackageRemovesScripts,The following statement contains a magic number: Assert.Equal(4' files.Count);
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesForSymbolPackageRemovesScripts,The following statement contains a magic number: Assert.Equal(files[2].Path' @"tools\mycmd.exe");
Magic Number,NuGet.Test.NuGetCommandLine.Commands,PackCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\PackCommandTest.cs,ExcludeFilesForSymbolPackageRemovesScripts,The following statement contains a magic number: Assert.Equal(files[3].Path' @"src\mylib.cs");
Magic Number,NuGet.Test.ServerExtensions,MirrorCommandTest,D:\research\architectureSmells\repos1\themotleyfool_NuGet\test\CommandLine.Test\MirrorCommandTest.cs,AssertTwoPackages,The following statement contains a magic number: Assert.Equal(2' pack.Count());
