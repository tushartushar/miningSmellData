Implementation smell,Namespace,Class,File,Method,Description
Long Method,EntityFramework.PostgreSql,PostgreSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlGenerator.cs,Visit,The method has 116 lines of code.
Long Statement,EntityFramework.PostgreSql,PostgreSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlGenerator.cs,Visit,The length of the statement  "            //      Binary' Boolean' Byte' Date' DateTime' DateTimeOffset' Decimal' Double' Guid' Int16' Int32' Int64' Single' String' Time " is 127.
Long Statement,EntityFramework.PostgreSql,PostgreSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlGenerator.cs,Visit,The length of the statement  "                        //        ((DateTimeOffset)expression.Value).ToString("yyyy-MM-dd HH:mm:ss.fffffff zzz"' CultureInfo.InvariantCulture)' false " is 125.
Long Statement,EntityFramework.PostgreSql,PostgreSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlGenerator.cs,Visit,The length of the statement  "                        //// and does not need cast. if precision is lest then 20' then cast using Max(literal precision' sql default precision) " is 120.
Long Statement,EntityFramework.PostgreSql,PostgreSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlGenerator.cs,Visit,The length of the statement  "                        //    WrapWithCastIfNeeded(true' doubleValuexpression.ToString("R"' CultureInfo.InvariantCulture)' "float(53)"' result); " is 120.
Long Statement,EntityFramework.PostgreSql,PostgreSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlGenerator.cs,Visit,The length of the statement  "                        //WrapWithCastIfNeeded(true' EscapeSingleQuote(expression.Valuexpression.ToString()' false /* IsUnicode */)' "uniqueidentifier"' result); " is 137.
Long Statement,EntityFramework.PostgreSql,PostgreSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlGenerator.cs,Visit,The length of the statement  "                        //Strings.NoStoreTypeForEdmType(resultTypexpression.EdmTypexpression.Name' ((PrimitiveType)(resultTypexpression.EdmType)).PrimitiveTypeKind)); " is 142.
Complex Conditional,System.Data.Entity.Migrations.Sql,PostgreSqlMigrationSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlMigrationSqlGenerator.cs,Generate,The conditional expression  "(column.IsNullable != null)                      && !column.IsNullable.Value                      && (column.DefaultValue == null)                      && (string.IsNullOrWhiteSpace(column.DefaultValueSql))                      && !column.IsIdentity                      && !column.IsTimestamp                      && !column.StoreType.EqualsIgnoreCase("rowversion")                      && !column.StoreType.EqualsIgnoreCase("timestamp")"  is complex.
Magic Number,EntityFramework.PostgreSql,PostgreSqlVisitor,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlVisitor.cs,GetTargetTSql,The following statement contains a magic number: var builder = new StringBuilder(50);
Magic Number,System.Data.Entity.Migrations.Sql,PostgreSqlMigrationSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlMigrationSqlGenerator.cs,IndexName,The following statement contains a magic number: name.Add(string.Format(CultureInfo.InvariantCulture' "IX_{0}_{1}"'                                    index.Table'                                    index.Columns.Join(separator: "_")).RestrictTo(128));
Magic Number,EntityFramework.PostgreSql.Utilities,DatabaseName,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\Utilities\DatabaseName.cs,Parse,The following statement contains a magic number: if (parts.Length > 2)              {                  throw new ArgumentException(invalidDatabaseName);              }
Magic Number,EntityFramework.PostgreSql.Utilities,DatabaseName,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\Utilities\DatabaseName.cs,Parse,The following statement contains a magic number: if (parts.Length == 2)              {                  schema = parts[0];                    if (string.IsNullOrWhiteSpace(schema))                  {                      throw new ArgumentException(invalidDatabaseName);                  }                    objectName = parts[1];              }              else              {                  objectName = parts[0];              }
Magic Number,EntityFramework.PostgreSql.Utilities,DatabaseName,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\Utilities\DatabaseName.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (_name.GetHashCode() * 397) ^ (_schema != null ? _schema.GetHashCode() : 0);              }
Magic Number,EntityFramework.PostgreSql.Utilities,StringExtensions,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\Utilities\StringExtensions.cs,MigrationName,The following statement contains a magic number: return migrationId.Substring(16);
Missing Default,System.Data.Entity.Migrations.Sql,PostgreSqlMigrationSqlGenerator,C:\repos\darionato_PostgreSqlMigrationSqlGenerator\EntityFramework.PostgreSql\EntityFramework.PostgreSql\PostgreSqlMigrationSqlGenerator.cs,Generate,The following switch statement is missing a default case: switch (commandTree.CommandTreeKind)                          {                              case DbCommandTreeKind.Insert:                                    writer.Write(GetInsertHistorySql((DbInsertCommandTree)commandTree));                                   break;                          }
