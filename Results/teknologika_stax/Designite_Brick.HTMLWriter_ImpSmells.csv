Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Brick,HTMLWriter,C:\repos\teknologika_stax\dotnet\tools\TestRunner\Brick\Brick.HTMLWriter\HTMLWriter.cs,WriteSummaryTables,Cyclomatic complexity of the method is 19
Long Statement,Brick,HTMLWriter,C:\repos\teknologika_stax\dotnet\tools\TestRunner\Brick\Brick.HTMLWriter\HTMLWriter.cs,WriteHTMLResult,The length of the statement  "	string fileName = Directory.GetCurrentDirectory () + @"\TestResults\" + Environment.UserName.ToString () + "_" + Environment.MachineName + "" + DateTime.Now.ToString ("yyyy-mm-dd hh_mm_ss") + ".html"; " is 200.
Long Statement,Brick,HTMLWriter,C:\repos\teknologika_stax\dotnet\tools\TestRunner\Brick\Brick.HTMLWriter\HTMLWriter.cs,WriteSummaryTables,The length of the statement  "	bob.AppendLine (string.Format ("        <td >{0}&nbsp;({1}%)</td>"' SuccessfulGlobalTests' GetPercentage (SuccessfulGlobalTests' GlobalStats.TotalTests' 1))); " is 158.
Long Statement,Brick,HTMLWriter,C:\repos\teknologika_stax\dotnet\tools\TestRunner\Brick\Brick.HTMLWriter\HTMLWriter.cs,WriteSummaryTables,The length of the statement  "		bob.AppendLine (string.Format ("        <td >{0}&nbsp;({1}%)</td>"' SuccessfulTests' GetPercentage (SuccessfulTests' item.TotalTests' 1))); " is 139.
Magic Number,Brick,HTMLWriter,C:\repos\teknologika_stax\dotnet\tools\TestRunner\Brick\Brick.HTMLWriter\HTMLWriter.cs,GetPercentage,The following statement contains a magic number: if (value == 0 || total == 0) {  	percent = 0;  }  else {  	percent = Decimal.Divide (value' total) * 100;  	if (places > 0) {  		strplaces = "." + strplaces;  	}  }  
Magic Number,Brick,HTMLWriter,C:\repos\teknologika_stax\dotnet\tools\TestRunner\Brick\Brick.HTMLWriter\HTMLWriter.cs,GetPercentage,The following statement contains a magic number: percent = Decimal.Divide (value' total) * 100;  
Missing Default,Brick,HTMLWriter,C:\repos\teknologika_stax\dotnet\tools\TestRunner\Brick\Brick.HTMLWriter\HTMLWriter.cs,WriteSummaryTables,The following switch statement is missing a default case: switch (n.TestOutcome.ToLower ()) {  case "passed":  case "pass":  	GlobalStats.TotalPassed++;  	tmpStats.TotalPassed++;  	break;  case "failed":  case "fail":  	GlobalStats.TotalFailed++;  	tmpStats.TotalFailed++;  	break;  case "inconclusive":  case "ingnored":  case "aborted":  	GlobalStats.TotalInconclusive++;  	tmpStats.TotalInconclusive++;  	break;  }  
