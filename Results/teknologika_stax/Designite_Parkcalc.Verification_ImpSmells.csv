Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,Cyclomatic complexity of the method is 21
Long Parameter List,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The method has 7 parameters.
Long Statement,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,NoErrorIsShown,The length of the statement  "	Assert.IsTrue (!Physical.Parking.GetResult ().Contains ("ERROR")' "An error was shown when it was not expected./n The Error shown was: " + Physical.Parking.GetResult () + "."); " is 176.
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: switch (parkingType) {  case ParkingType.ShortTermParking:  	// $2 first hour; $1 each additional 1/2 hour $24 daily maximum  	break;  case ParkingType.EconomyParking:  	// $2 per hour $9 daily maximum $54 per week (7th day free)  	// NOTE: The "spec" says $2 per hour' but the app has $4 per hour  	int EconomyBaseRate = 2;  	// Calculate weeks  	ChargableWeeks = days / 7;  	cost = ChargableWeeks * 54;  	// calculate days  	ChargableDays = days % 7;  	cost = cost + ChargableDays * 9;  	// calculate hours  	ChargableHours = Remaininghours;  	int hourCost = Remaininghours * EconomyBaseRate;  	if (hourCost > 9) {  		hourCost = 9;  	}  	if ((Remainingminutes > 0) && (hourCost < 7)) {  		cost = cost + hourCost + EconomyBaseRate;  	}  	else {  		cost = cost + hourCost;  	}  	break;  case ParkingType.LongTermSurfaceParking:  	// $2 per hour $10 daily maximum $60 per week (7th day free)  	break;  case ParkingType.LongTermGarageParking:  	// $2 per hour $12 daily maximum $72 per week (7th day free)  	break;  case ParkingType.ValetParking:  	// $18 per day $12 for five hours or less  	break;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: switch (parkingType) {  case ParkingType.ShortTermParking:  	// $2 first hour; $1 each additional 1/2 hour $24 daily maximum  	break;  case ParkingType.EconomyParking:  	// $2 per hour $9 daily maximum $54 per week (7th day free)  	// NOTE: The "spec" says $2 per hour' but the app has $4 per hour  	int EconomyBaseRate = 2;  	// Calculate weeks  	ChargableWeeks = days / 7;  	cost = ChargableWeeks * 54;  	// calculate days  	ChargableDays = days % 7;  	cost = cost + ChargableDays * 9;  	// calculate hours  	ChargableHours = Remaininghours;  	int hourCost = Remaininghours * EconomyBaseRate;  	if (hourCost > 9) {  		hourCost = 9;  	}  	if ((Remainingminutes > 0) && (hourCost < 7)) {  		cost = cost + hourCost + EconomyBaseRate;  	}  	else {  		cost = cost + hourCost;  	}  	break;  case ParkingType.LongTermSurfaceParking:  	// $2 per hour $10 daily maximum $60 per week (7th day free)  	break;  case ParkingType.LongTermGarageParking:  	// $2 per hour $12 daily maximum $72 per week (7th day free)  	break;  case ParkingType.ValetParking:  	// $18 per day $12 for five hours or less  	break;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: switch (parkingType) {  case ParkingType.ShortTermParking:  	// $2 first hour; $1 each additional 1/2 hour $24 daily maximum  	break;  case ParkingType.EconomyParking:  	// $2 per hour $9 daily maximum $54 per week (7th day free)  	// NOTE: The "spec" says $2 per hour' but the app has $4 per hour  	int EconomyBaseRate = 2;  	// Calculate weeks  	ChargableWeeks = days / 7;  	cost = ChargableWeeks * 54;  	// calculate days  	ChargableDays = days % 7;  	cost = cost + ChargableDays * 9;  	// calculate hours  	ChargableHours = Remaininghours;  	int hourCost = Remaininghours * EconomyBaseRate;  	if (hourCost > 9) {  		hourCost = 9;  	}  	if ((Remainingminutes > 0) && (hourCost < 7)) {  		cost = cost + hourCost + EconomyBaseRate;  	}  	else {  		cost = cost + hourCost;  	}  	break;  case ParkingType.LongTermSurfaceParking:  	// $2 per hour $10 daily maximum $60 per week (7th day free)  	break;  case ParkingType.LongTermGarageParking:  	// $2 per hour $12 daily maximum $72 per week (7th day free)  	break;  case ParkingType.ValetParking:  	// $18 per day $12 for five hours or less  	break;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: switch (parkingType) {  case ParkingType.ShortTermParking:  	// $2 first hour; $1 each additional 1/2 hour $24 daily maximum  	break;  case ParkingType.EconomyParking:  	// $2 per hour $9 daily maximum $54 per week (7th day free)  	// NOTE: The "spec" says $2 per hour' but the app has $4 per hour  	int EconomyBaseRate = 2;  	// Calculate weeks  	ChargableWeeks = days / 7;  	cost = ChargableWeeks * 54;  	// calculate days  	ChargableDays = days % 7;  	cost = cost + ChargableDays * 9;  	// calculate hours  	ChargableHours = Remaininghours;  	int hourCost = Remaininghours * EconomyBaseRate;  	if (hourCost > 9) {  		hourCost = 9;  	}  	if ((Remainingminutes > 0) && (hourCost < 7)) {  		cost = cost + hourCost + EconomyBaseRate;  	}  	else {  		cost = cost + hourCost;  	}  	break;  case ParkingType.LongTermSurfaceParking:  	// $2 per hour $10 daily maximum $60 per week (7th day free)  	break;  case ParkingType.LongTermGarageParking:  	// $2 per hour $12 daily maximum $72 per week (7th day free)  	break;  case ParkingType.ValetParking:  	// $18 per day $12 for five hours or less  	break;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: switch (parkingType) {  case ParkingType.ShortTermParking:  	// $2 first hour; $1 each additional 1/2 hour $24 daily maximum  	break;  case ParkingType.EconomyParking:  	// $2 per hour $9 daily maximum $54 per week (7th day free)  	// NOTE: The "spec" says $2 per hour' but the app has $4 per hour  	int EconomyBaseRate = 2;  	// Calculate weeks  	ChargableWeeks = days / 7;  	cost = ChargableWeeks * 54;  	// calculate days  	ChargableDays = days % 7;  	cost = cost + ChargableDays * 9;  	// calculate hours  	ChargableHours = Remaininghours;  	int hourCost = Remaininghours * EconomyBaseRate;  	if (hourCost > 9) {  		hourCost = 9;  	}  	if ((Remainingminutes > 0) && (hourCost < 7)) {  		cost = cost + hourCost + EconomyBaseRate;  	}  	else {  		cost = cost + hourCost;  	}  	break;  case ParkingType.LongTermSurfaceParking:  	// $2 per hour $10 daily maximum $60 per week (7th day free)  	break;  case ParkingType.LongTermGarageParking:  	// $2 per hour $12 daily maximum $72 per week (7th day free)  	break;  case ParkingType.ValetParking:  	// $18 per day $12 for five hours or less  	break;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: switch (parkingType) {  case ParkingType.ShortTermParking:  	// $2 first hour; $1 each additional 1/2 hour $24 daily maximum  	break;  case ParkingType.EconomyParking:  	// $2 per hour $9 daily maximum $54 per week (7th day free)  	// NOTE: The "spec" says $2 per hour' but the app has $4 per hour  	int EconomyBaseRate = 2;  	// Calculate weeks  	ChargableWeeks = days / 7;  	cost = ChargableWeeks * 54;  	// calculate days  	ChargableDays = days % 7;  	cost = cost + ChargableDays * 9;  	// calculate hours  	ChargableHours = Remaininghours;  	int hourCost = Remaininghours * EconomyBaseRate;  	if (hourCost > 9) {  		hourCost = 9;  	}  	if ((Remainingminutes > 0) && (hourCost < 7)) {  		cost = cost + hourCost + EconomyBaseRate;  	}  	else {  		cost = cost + hourCost;  	}  	break;  case ParkingType.LongTermSurfaceParking:  	// $2 per hour $10 daily maximum $60 per week (7th day free)  	break;  case ParkingType.LongTermGarageParking:  	// $2 per hour $12 daily maximum $72 per week (7th day free)  	break;  case ParkingType.ValetParking:  	// $18 per day $12 for five hours or less  	break;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: switch (parkingType) {  case ParkingType.ShortTermParking:  	// $2 first hour; $1 each additional 1/2 hour $24 daily maximum  	break;  case ParkingType.EconomyParking:  	// $2 per hour $9 daily maximum $54 per week (7th day free)  	// NOTE: The "spec" says $2 per hour' but the app has $4 per hour  	int EconomyBaseRate = 2;  	// Calculate weeks  	ChargableWeeks = days / 7;  	cost = ChargableWeeks * 54;  	// calculate days  	ChargableDays = days % 7;  	cost = cost + ChargableDays * 9;  	// calculate hours  	ChargableHours = Remaininghours;  	int hourCost = Remaininghours * EconomyBaseRate;  	if (hourCost > 9) {  		hourCost = 9;  	}  	if ((Remainingminutes > 0) && (hourCost < 7)) {  		cost = cost + hourCost + EconomyBaseRate;  	}  	else {  		cost = cost + hourCost;  	}  	break;  case ParkingType.LongTermSurfaceParking:  	// $2 per hour $10 daily maximum $60 per week (7th day free)  	break;  case ParkingType.LongTermGarageParking:  	// $2 per hour $12 daily maximum $72 per week (7th day free)  	break;  case ParkingType.ValetParking:  	// $18 per day $12 for five hours or less  	break;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: switch (parkingType) {  case ParkingType.ShortTermParking:  	// $2 first hour; $1 each additional 1/2 hour $24 daily maximum  	break;  case ParkingType.EconomyParking:  	// $2 per hour $9 daily maximum $54 per week (7th day free)  	// NOTE: The "spec" says $2 per hour' but the app has $4 per hour  	int EconomyBaseRate = 2;  	// Calculate weeks  	ChargableWeeks = days / 7;  	cost = ChargableWeeks * 54;  	// calculate days  	ChargableDays = days % 7;  	cost = cost + ChargableDays * 9;  	// calculate hours  	ChargableHours = Remaininghours;  	int hourCost = Remaininghours * EconomyBaseRate;  	if (hourCost > 9) {  		hourCost = 9;  	}  	if ((Remainingminutes > 0) && (hourCost < 7)) {  		cost = cost + hourCost + EconomyBaseRate;  	}  	else {  		cost = cost + hourCost;  	}  	break;  case ParkingType.LongTermSurfaceParking:  	// $2 per hour $10 daily maximum $60 per week (7th day free)  	break;  case ParkingType.LongTermGarageParking:  	// $2 per hour $12 daily maximum $72 per week (7th day free)  	break;  case ParkingType.ValetParking:  	// $18 per day $12 for five hours or less  	break;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: ChargableWeeks = days / 7;  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: cost = ChargableWeeks * 54;  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: ChargableDays = days % 7;  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: cost = cost + ChargableDays * 9;  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: if (hourCost > 9) {  	hourCost = 9;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: if (hourCost > 9) {  	hourCost = 9;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: hourCost = 9;  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: if ((Remainingminutes > 0) && (hourCost < 7)) {  	cost = cost + hourCost + EconomyBaseRate;  }  else {  	cost = cost + hourCost;  }  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: Assert.AreEqual (days' Convert.ToInt32 (splitResult [2].Replace ("("' ""))' "Verification of number of days.");  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: Assert.AreEqual (ChargableHours' Convert.ToInt32 (splitResult [4])' "Verification of number of hours");  
Magic Number,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following statement contains a magic number: Assert.AreEqual (Remainingminutes' Convert.ToInt32 (splitResult [6])' "Verifciation of number of minutes.");  
Missing Default,Parkcalc.Verification,Verify,C:\repos\teknologika_stax\dotnet\Parkcalc VS2010 Sample\Parkcalc.Verification\Parkcalc.Verification.cs,VerifyResult,The following switch statement is missing a default case: switch (parkingType) {  case ParkingType.ShortTermParking:  	// $2 first hour; $1 each additional 1/2 hour $24 daily maximum  	break;  case ParkingType.EconomyParking:  	// $2 per hour $9 daily maximum $54 per week (7th day free)  	// NOTE: The "spec" says $2 per hour' but the app has $4 per hour  	int EconomyBaseRate = 2;  	// Calculate weeks  	ChargableWeeks = days / 7;  	cost = ChargableWeeks * 54;  	// calculate days  	ChargableDays = days % 7;  	cost = cost + ChargableDays * 9;  	// calculate hours  	ChargableHours = Remaininghours;  	int hourCost = Remaininghours * EconomyBaseRate;  	if (hourCost > 9) {  		hourCost = 9;  	}  	if ((Remainingminutes > 0) && (hourCost < 7)) {  		cost = cost + hourCost + EconomyBaseRate;  	}  	else {  		cost = cost + hourCost;  	}  	break;  case ParkingType.LongTermSurfaceParking:  	// $2 per hour $10 daily maximum $60 per week (7th day free)  	break;  case ParkingType.LongTermGarageParking:  	// $2 per hour $12 daily maximum $72 per week (7th day free)  	break;  case ParkingType.ValetParking:  	// $18 per day $12 for five hours or less  	break;  }  
