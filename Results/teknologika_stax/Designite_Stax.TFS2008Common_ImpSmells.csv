Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Stax.TFS2008Common,TfsManager,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSManager.cs,GenerateWorkItemQuery,Cyclomatic complexity of the method is 17
Complex Method,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,Cyclomatic complexity of the method is 8
Long Statement,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,The length of the statement  "	targetDirectory = targetDirectory + @"\TestGen\" + Environment.UserName.ToString () + "_" + Environment.MachineName + " " + DateTime.Now.ToString ("yyyy-mm-dd hh_mm_ss"); " is 170.
Long Statement,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,The length of the statement  "		WorkItemQuery = WorkItemQuery.Replace ("@project"' "'" + ConfigurationManager.AppSettings ["TFSProject"].ToString () + "'"); " is 124.
Long Statement,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,The length of the statement  "		_ProjectFileTop = new StreamReader (_assembly.GetManifestResourceStream ("Devtest.TFSCommon.CSProjPart1.txt")).ReadToEnd (); " is 124.
Long Statement,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,The length of the statement  "		_ProjectFileBottom = new StreamReader (_assembly.GetManifestResourceStream ("Devtest.TFSCommon.CSProjPart2.txt")).ReadToEnd (); " is 127.
Long Statement,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,The length of the statement  "				string errorText = "Error generating test.\n\n The test name '" + workItem.Title + "' is invalid' the test case could not be generated."; " is 137.
Long Statement,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,The length of the statement  "				System.Windows.Forms.MessageBox.Show (errorText' "Manual Test Case Generator"' System.Windows.Forms.MessageBoxButtons.OK' System.Windows.Forms.MessageBoxIcon.Error); " is 165.
Magic Number,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,The following statement contains a magic number: if (_testCaseCollection.Count > 0) {  	int lastPercent = 0;  	int totalNumberOfItems = _testCaseCollection.Count;  	int currentWorkItem = 0;  	int percentDone = 0;  	_bob.AppendLine ("    <ItemGroup>");  	// Loop through each of the returned work items.  	foreach (WorkItem workItem in _testCaseCollection) {  		currentWorkItem++;  		// Calculate the % done and update if we have increased  		percentDone = (currentWorkItem * 100) / totalNumberOfItems;  		if (percentDone > lastPercent) {  			worker.ReportProgress (percentDone);  		}  		lastPercent = percentDone;  		if (CheckTestNameForIllegalCharacters (workItem.Title)) {  			_bob.Append ("        <None Include=\"");  			_bob.Append (workItem.Title);  			_bob.AppendLine (".mtx\">");  			_bob.AppendLine ("            <CopyToOutputDirectory>Always</CopyToOutputDirectory>");  			_bob.AppendLine ("        </None>");  			GenerateManualTest (targetDirectory' workItem);  		}  		// If the test name includes a character that is illegal for the windows file system' show an error and then continue.  		else {  			string errorText = "Error generating test.\n\n The test name '" + workItem.Title + "' is invalid' the test case could not be generated.";  			System.Windows.Forms.MessageBox.Show (errorText' "Manual Test Case Generator"' System.Windows.Forms.MessageBoxButtons.OK' System.Windows.Forms.MessageBoxIcon.Error);  		}  	}  	_bob.AppendLine ("    </ItemGroup>");  }  
Magic Number,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,The following statement contains a magic number: foreach (WorkItem workItem in _testCaseCollection) {  	currentWorkItem++;  	// Calculate the % done and update if we have increased  	percentDone = (currentWorkItem * 100) / totalNumberOfItems;  	if (percentDone > lastPercent) {  		worker.ReportProgress (percentDone);  	}  	lastPercent = percentDone;  	if (CheckTestNameForIllegalCharacters (workItem.Title)) {  		_bob.Append ("        <None Include=\"");  		_bob.Append (workItem.Title);  		_bob.AppendLine (".mtx\">");  		_bob.AppendLine ("            <CopyToOutputDirectory>Always</CopyToOutputDirectory>");  		_bob.AppendLine ("        </None>");  		GenerateManualTest (targetDirectory' workItem);  	}  	// If the test name includes a character that is illegal for the windows file system' show an error and then continue.  	else {  		string errorText = "Error generating test.\n\n The test name '" + workItem.Title + "' is invalid' the test case could not be generated.";  		System.Windows.Forms.MessageBox.Show (errorText' "Manual Test Case Generator"' System.Windows.Forms.MessageBoxButtons.OK' System.Windows.Forms.MessageBoxIcon.Error);  	}  }  
Magic Number,Stax.TFS2008Common,TFSWriter,C:\repos\teknologika_stax\dotnet\tools\ManualTestSolutionGenerator\Stax.TFS2008Common\TFSWriter.cs,GenerateProject,The following statement contains a magic number: percentDone = (currentWorkItem * 100) / totalNumberOfItems;  
