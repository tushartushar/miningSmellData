Implementation smell,Namespace,Class,File,Method,Description
Long Method,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The method has 114 lines of code.
Long Method,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadStringIntoBuffer,The method has 160 lines of code.
Long Method,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseValue,The method has 109 lines of code.
Long Method,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The method has 156 lines of code.
Long Method,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateCurrentToken,The method has 111 lines of code.
Long Method,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,WriteValue,The method has 153 lines of code.
Long Method,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,SerializeNode,The method has 128 lines of code.
Long Method,Newtonsoft.Json.Linq,JToken,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JToken.cs,ToObject,The method has 103 lines of code.
Long Method,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The method has 134 lines of code.
Long Method,Newtonsoft.Json.Linq.JsonPath,JPath,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\JPath.cs,ParseArrayIndexer,The method has 106 lines of code.
Long Method,Newtonsoft.Json.Schema,JsonSchemaGenerator,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaGenerator.cs,GenerateInternal,The method has 117 lines of code.
Long Method,Newtonsoft.Json.Serialization,JsonArrayContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonArrayContract.cs,JsonArrayContract,The method has 112 lines of code.
Long Method,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The method has 127 lines of code.
Long Method,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The method has 108 lines of code.
Long Method,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The method has 104 lines of code.
Long Method,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,TryConvertInternal,The method has 131 lines of code.
Long Method,Newtonsoft.Json.Utilities,JavaScriptUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The method has 113 lines of code.
Complex Method,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDateTimeOffsetInternal,Cyclomatic complexity of the method is 9
Complex Method,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsBytesInternal,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDecimalInternal,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsInt32Internal,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDateTimeInternal,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,ApplySerializerSettings,Cyclomatic complexity of the method is 30
Complex Method,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,SetupReader,Cyclomatic complexity of the method is 9
Complex Method,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,ResetReader,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,SerializeInternal,Cyclomatic complexity of the method is 16
Complex Method,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,WriteToken,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateString,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateInteger,Cyclomatic complexity of the method is 13
Complex Method,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateFloat,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,AutoCompleteClose,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Converters,IsoDateTimeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\IsoDateTimeConverter.cs,ReadJson,Cyclomatic complexity of the method is 10
Complex Method,Newtonsoft.Json.Converters,StringEnumConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\StringEnumConverter.cs,ReadJson,Cyclomatic complexity of the method is 9
Complex Method,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,PushParentNamespaces,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,ReadJson,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Linq,JPropertyKeyedCollection,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JPropertyKeyedCollection.cs,Compare,Cyclomatic complexity of the method is 10
Complex Method,Newtonsoft.Json.Linq.JsonPath,ArraySliceFilter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\ArraySliceFilter.cs,ExecuteFilter,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Linq.JsonPath,JPath,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\JPath.cs,ParseExpression,Cyclomatic complexity of the method is 15
Complex Method,Newtonsoft.Json.Linq.JsonPath,JPath,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\JPath.cs,ParseOperator,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ResolveReferences,Cyclomatic complexity of the method is 21
Complex Method,Newtonsoft.Json.Schema,JsonSchemaGenerator,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaGenerator.cs,GenerateInternal,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json.Schema,JsonSchemaModelBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaModelBuilder.cs,AddSchema,Cyclomatic complexity of the method is 10
Complex Method,Newtonsoft.Json.Schema,JsonSchemaModelBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaModelBuilder.cs,BuildNodeModel,Cyclomatic complexity of the method is 10
Complex Method,Newtonsoft.Json.Schema,JsonSchemaWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaWriter.cs,WriteSchema,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,ResolveCallbackMethods,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,Cyclomatic complexity of the method is 9
Complex Method,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreateContract,Cyclomatic complexity of the method is 10
Complex Method,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,Cyclomatic complexity of the method is 15
Complex Method,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateList,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EnsureType,Cyclomatic complexity of the method is 9
Complex Method,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,Cyclomatic complexity of the method is 9
Complex Method,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,Cyclomatic complexity of the method is 12
Complex Method,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeDynamic,Cyclomatic complexity of the method is 8
Complex Method,Newtonsoft.Json.Utilities,Base64Encoder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\Base64Encoder.cs,Encode,Cyclomatic complexity of the method is 13
Complex Method,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,ToBigInteger,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,TryConvertInternal,Cyclomatic complexity of the method is 19
Complex Method,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Int32TryParse,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Int64TryParse,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json.Utilities,ExpressionReflectionDelegateFactory,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ExpressionReflectionDelegateFactory.cs,BuildMethodCall,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json.Utilities,JavaScriptUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,Cyclomatic complexity of the method is 13
Complex Method,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,Cyclomatic complexity of the method is 11
Complex Method,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,ImplementsGenericDefinition,Cyclomatic complexity of the method is 8
Long Parameter List,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,EnsureFloatFormat,The method has 5 parameters. Parameters: value' text' floatFormatHandling' quoteChar' nullable
Long Parameter List,Newtonsoft.Json,JsonReaderException,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReaderException.cs,JsonReaderException,The method has 5 parameters. Parameters: message' innerException' path' lineNumber' linePosition
Long Parameter List,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,SetupReader,The method has 7 parameters. Parameters: reader' previousCulture' previousDateTimeZoneHandling' previousDateParseHandling' previousFloatParseHandling' previousMaxDepth' previousDateFormatString
Long Parameter List,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,ResetReader,The method has 7 parameters. Parameters: reader' previousCulture' previousDateTimeZoneHandling' previousDateParseHandling' previousFloatParseHandling' previousMaxDepth' previousDateFormatString
Long Parameter List,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,BlockCopyChars,The method has 5 parameters. Parameters: src' srcOffset' dst' dstOffset' count
Long Parameter List,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,DeserializeValue,The method has 5 parameters. Parameters: reader' document' manager' propertyName' currentNode
Long Parameter List,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,ReadElement,The method has 5 parameters. Parameters: reader' document' currentNode' propertyName' manager
Long Parameter List,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,ReadArrayElements,The method has 5 parameters. Parameters: reader' document' propertyName' currentNode' manager
Long Parameter List,Newtonsoft.Json.Schema,JsonSchemaException,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaException.cs,JsonSchemaException,The method has 5 parameters. Parameters: message' innerException' path' lineNumber' linePosition
Long Parameter List,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The method has 6 parameters. Parameters: type' onSerializing' onSerialized' onDeserializing' onDeserialized' onError
Long Parameter List,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The method has 5 parameters. Parameters: method' parameters' attributeType' currentCallback' prevAttributeType
Long Parameter List,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The method has 6 parameters. Parameters: property' attributeProvider' name' declaringType' memberSerialization' allowNonPublicAccess
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalBase,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalBase.cs,IsErrorHandled,The method has 6 parameters. Parameters: currentObject' contract' keyValue' lineInfo' path' ex
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateValueInternal,The method has 7 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' existingValue
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The method has 7 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' existingValue
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The method has 9 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' existingValue' newValue' id
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataProperties,The method has 9 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' existingValue' newValue' id
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The method has 7 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' qualifiedTypeName
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateList,The method has 6 parameters. Parameters: reader' objectType' contract' member' existingValue' id
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EnsureType,The method has 5 parameters. Parameters: reader' value' culture' contract' targetType
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The method has 6 parameters. Parameters: property' propertyConverter' containerContract' containerProperty' reader' target
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The method has 10 parameters. Parameters: property' propertyConverter' containerContract' containerProperty' reader' target' useExistingValue' currentValue' propertyContract' gottenCurrentValue
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The method has 5 parameters. Parameters: dictionary' reader' contract' containerProperty' id
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The method has 5 parameters. Parameters: list' reader' contract' containerProperty' id
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateList,The method has 5 parameters. Parameters: list' reader' contract' containerProperty' id
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The method has 5 parameters. Parameters: reader' contract' containerProperty' creator' id
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The method has 5 parameters. Parameters: contract' containerProperty' reader' objectType' extensionData
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The method has 6 parameters. Parameters: reader' objectContract' containerMember' containerProperty' id' createdFromNonDefaultCreator
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The method has 5 parameters. Parameters: newObject' reader' contract' member' id
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,SetExtensionData,The method has 5 parameters. Parameters: contract' member' reader' memberName' o
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EndObject,The method has 5 parameters. Parameters: newObject' reader' contract' initialDepth' propertiesPresence
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializePrimitive,The method has 6 parameters. Parameters: writer' value' contract' member' containerContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The method has 6 parameters. Parameters: writer' value' valueContract' member' containerContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteReference,The method has 5 parameters. Parameters: value' property' valueContract' collectionContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The method has 6 parameters. Parameters: writer' value' property' contract' containerContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeObject,The method has 6 parameters. Parameters: writer' value' contract' member' collectionContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The method has 7 parameters. Parameters: writer' value' contract' member' property' memberContract' memberValue
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,WriteObjectStart,The method has 6 parameters. Parameters: writer' value' contract' member' collectionContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeConvertable,The method has 6 parameters. Parameters: writer' converter' value' contract' collectionContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeList,The method has 6 parameters. Parameters: writer' values' contract' member' collectionContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,The method has 6 parameters. Parameters: writer' values' contract' member' collectionContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,The method has 6 parameters. Parameters: writer' values' contract' member' initialDepth' indices
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,WriteStartArray,The method has 6 parameters. Parameters: writer' values' contract' member' containerContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeDynamic,The method has 6 parameters. Parameters: writer' value' contract' member' collectionContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteType,The method has 5 parameters. Parameters: typeNameHandlingFlag' contract' member' containerContract' containerProperty
Long Parameter List,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeDictionary,The method has 6 parameters. Parameters: writer' values' contract' member' collectionContract' containerProperty
Long Parameter List,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateTime,The method has 6 parameters. Parameters: s' dateParseHandling' dateTimeZoneHandling' dateFormatString' culture' dt
Long Parameter List,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateExact,The method has 6 parameters. Parameters: text' dateParseHandling' dateTimeZoneHandling' dateFormatString' culture' dt
Long Parameter List,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The method has 5 parameters. Parameters: writer' value' format' formatString' culture
Long Parameter List,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The method has 6 parameters. Parameters: chars' start' value' offset' kind' format
Long Parameter List,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeOffsetString,The method has 5 parameters. Parameters: writer' value' format' formatString' culture
Long Parameter List,Newtonsoft.Json.Utilities,DynamicProxyMetaObject<T>,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicProxyMetaObject.cs,CallMethodWithResult,The method has 5 parameters. Parameters: methodName' binder' args' fallback' fallbackInvoke
Long Parameter List,Newtonsoft.Json.Utilities,DynamicProxyMetaObject<T>,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicProxyMetaObject.cs,BuildCallMethodWithResult,The method has 5 parameters. Parameters: methodName' binder' args' fallbackResult' fallbackInvoke
Long Parameter List,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForDictionaryContract,The method has 5 parameters. Parameters: underlyingType' keyItemType' valueItemType' createdType' parameterizedCreator
Long Parameter List,Newtonsoft.Json.Utilities,JavaScriptUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The method has 7 parameters. Parameters: writer' s' delimiter' appendDelimiters' charEscapeFlags' stringEscapeHandling' writeBuffer
Long Parameter List,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,FormatWith,The method has 5 parameters. Parameters: format' provider' arg0' arg1' arg2
Long Parameter List,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,FormatWith,The method has 6 parameters. Parameters: format' provider' arg0' arg1' arg2' arg3
Long Parameter List,Newtonsoft.Json.Utilities,TypeExtensions,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\TypeExtensions.cs,GetMethod,The method has 6 parameters. Parameters: type' name' bindingFlags' placeHolder1' parameterTypes' placeHolder2
Long Parameter List,Newtonsoft.Json.Utilities,TypeExtensions,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\TypeExtensions.cs,GetProperty,The method has 7 parameters. Parameters: type' name' bindingFlags' placeholder1' propertyType' indexParameters' placeholder2
Long Parameter List,Newtonsoft.Json.Utilities,TypeExtensions,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\TypeExtensions.cs,GetConstructor,The method has 5 parameters. Parameters: type' bindingFlags' placeholder1' parameterTypes' placeholder2
Long Identifier,Newtonsoft.Json,JsonSerializerSettings,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializerSettings.cs,,The length of the parameter DefaultPreserveReferencesHandling is 33.
Long Identifier,Newtonsoft.Json,JsonSerializerSettings,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializerSettings.cs,,The length of the parameter DefaultMetadataPropertyHandling is 31.
Long Identifier,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,,The length of the parameter MaximumJavascriptIntegerCharacterLength is 39.
Long Identifier,Newtonsoft.Json.Schema,JsonSchemaConstants,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaConstants.cs,,The length of the parameter AdditionalPropertiesPropertyName is 32.
Long Identifier,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the parameter setExtensionDataDictionaryValue is 31.
Long Identifier,Newtonsoft.Json.Serialization,JsonArrayContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonArrayContract.cs,,The length of the parameter _genericCollectionDefinitionType is 32.
Long Identifier,Newtonsoft.Json.Serialization,JsonArrayContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonArrayContract.cs,,The length of the parameter _genericTemporaryCollectionCreator is 34.
Long Identifier,Newtonsoft.Json.Serialization,JsonDictionaryContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonDictionaryContract.cs,,The length of the parameter _genericCollectionDefinitionType is 32.
Long Identifier,Newtonsoft.Json.Serialization,JsonDictionaryContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonDictionaryContract.cs,,The length of the parameter _genericTemporaryDictionaryCreator is 34.
Long Identifier,Newtonsoft.Json.Serialization,JsonObjectContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonObjectContract.cs,,The length of the parameter _hasRequiredOrDefaultValueProperties is 36.
Long Identifier,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the parameter createdObjectCollectionWrapper is 30.
Long Identifier,Newtonsoft.Json.Utilities,BinderWrapper,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicUtils.cs,CreateMemberCalls,The length of the parameter csharpArgumentInfoTypeEnumerableType is 36.
Long Identifier,Newtonsoft.Json.Utilities,BinderWrapper,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicUtils.cs,,The length of the parameter CSharpArgumentInfoFlagsTypeName is 31.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableListGenericInterfaceTypeName is 37.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableQueueGenericInterfaceTypeName is 38.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableStackGenericInterfaceTypeName is 38.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableSetGenericInterfaceTypeName is 36.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableSortedSetGenericTypeName is 33.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableHashSetGenericTypeName is 31.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ArrayContractImmutableCollectionDefinitions is 43.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableDictionaryGenericInterfaceTypeName is 43.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableDictionaryGenericTypeName is 34.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableSortedDictionaryTypeName is 33.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableSortedDictionaryGenericTypeName is 40.
Long Identifier,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter DictionaryContractImmutableCollectionDefinitions is 48.
Long Statement,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The length of the statement  "                    throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type)); " is 135.
Long Statement,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSize,The length of the statement  "                    throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type)); " is 135.
Long Statement,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,ReadInternal,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected state: {0}".FormatWith(CultureInfo.InvariantCulture' _bsonReaderState)); " is 123.
Long Statement,Newtonsoft.Json.Bson,BsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonWriter.cs,AddToken,The length of the statement  "                    throw JsonWriterException.Create(this' "Error writing {0} value. BSON must start with an Object or Array.".FormatWith(CultureInfo.InvariantCulture' token.Type)' null); " is 167.
Long Statement,Newtonsoft.Json.Bson,BsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonWriter.cs,WriteValue,The length of the statement  "                throw JsonWriterException.Create(this' "Value is too large to fit in a signed 32 bit integer. BSON does not support unsigned values."' null); " is 141.
Long Statement,Newtonsoft.Json.Bson,BsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonWriter.cs,WriteValue,The length of the statement  "                throw JsonWriterException.Create(this' "Value is too large to fit in a signed 64 bit integer. BSON does not support unsigned values."' null); " is 141.
Long Statement,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,ToString,The length of the statement  "            return EnsureFloatFormat(value' EnsureDecimalPlace(value' value.ToString("R"' CultureInfo.InvariantCulture))' floatFormatHandling' quoteChar' nullable); " is 152.
Long Statement,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,ToString,The length of the statement  "            return EnsureFloatFormat(value' EnsureDecimalPlace(value' value.ToString("R"' CultureInfo.InvariantCulture))' floatFormatHandling' quoteChar' nullable); " is 152.
Long Statement,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,EnsureDecimalPlace,The length of the statement  "            if (double.IsNaN(value) || double.IsInfinity(value) || text.IndexOf('.') != -1 || text.IndexOf('E') != -1 || text.IndexOf('e') != -1) " is 133.
Long Statement,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,ToString,The length of the statement  "            throw new ArgumentException("Unsupported type: {0}. Use the JsonSerializer class to get the object's JSON representation.".FormatWith(CultureInfo.InvariantCulture' value.GetType())); " is 182.
Long Statement,Newtonsoft.Json,JsonPosition,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonPosition.cs,FormatMessage,The length of the statement  "                message += "' line {0}' position {1}".FormatWith(CultureInfo.InvariantCulture' lineInfo.LineNumber' lineInfo.LinePosition); " is 123.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,Push,The length of the statement  "                // this is a little hacky because Depth increases when first property/value is written but only testing here is faster/simpler " is 126.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,Push,The length of the statement  "                    throw JsonReaderException.Create(this' "The reader's MaxDepth of {0} has been exceeded.".FormatWith(CultureInfo.InvariantCulture' _maxDepth)); " is 142.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDateTimeOffsetInternal,The length of the statement  "                if (DateTimeUtils.TryParseDateTime(s' DateParseHandling.DateTimeOffset' DateTimeZoneHandling' _dateFormatString' Culture' out temp)) " is 132.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDateTimeOffsetInternal,The length of the statement  "                throw JsonReaderException.Create(this' "Could not convert string to DateTimeOffset: {0}.".FormatWith(CultureInfo.InvariantCulture' Value)); " is 139.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDateTimeOffsetInternal,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading date. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 129.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsBytesInternal,The length of the statement  "                            throw JsonReaderException.Create(this' "Unexpected token when reading bytes: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 128.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsBytesInternal,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 130.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDecimalInternal,The length of the statement  "                    throw JsonReaderException.Create(this' "Could not convert string to decimal: {0}.".FormatWith(CultureInfo.InvariantCulture' Value)); " is 132.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDecimalInternal,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading decimal. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 132.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsInt32Internal,The length of the statement  "                    throw JsonReaderException.Create(this' "Could not convert string to integer: {0}.".FormatWith(CultureInfo.InvariantCulture' Value)); " is 132.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsInt32Internal,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading integer. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' TokenType)); " is 140.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsStringInternal,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading string. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 131.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDateTimeInternal,The length of the statement  "                if (DateTimeUtils.TryParseDateTime(s' DateParseHandling.DateTime' DateTimeZoneHandling' _dateFormatString' Culture' out temp)) " is 126.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDateTimeInternal,The length of the statement  "                throw JsonReaderException.Create(this' "Could not convert string to DateTime: {0}.".FormatWith(CultureInfo.InvariantCulture' Value)); " is 133.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ReadAsDateTimeInternal,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading date. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' TokenType)); " is 137.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,IsWrappedInTypeObject,The length of the statement  "                throw JsonReaderException.Create(this' "Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' JsonToken.StartObject)); " is 150.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,ValidateEnd,The length of the statement  "                throw JsonReaderException.Create(this' "JsonToken {0} is not valid for closing JsonType {1}.".FormatWith(CultureInfo.InvariantCulture' endToken' currentObject)); " is 161.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,SetStateBasedOnCurrent,The length of the statement  "                    throw JsonReaderException.Create(this' "While setting the reader state back to current object an unexpected JsonType was encountered: {0}".FormatWith(CultureInfo.InvariantCulture' currentObject)); " is 196.
Long Statement,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,GetTypeForCloseToken,The length of the statement  "                    throw JsonReaderException.Create(this' "Not a valid close JsonToken: {0}".FormatWith(CultureInfo.InvariantCulture' token)); " is 123.
Long Statement,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,PopulateInternal,The length of the statement  "            SetupReader(reader' out previousCulture' out previousDateTimeZoneHandling' out previousDateParseHandling' out previousFloatParseHandling' out previousMaxDepth' out previousDateFormatString); " is 190.
Long Statement,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,PopulateInternal,The length of the statement  "            ResetReader(reader' previousCulture' previousDateTimeZoneHandling' previousDateParseHandling' previousFloatParseHandling' previousMaxDepth' previousDateFormatString); " is 166.
Long Statement,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,DeserializeInternal,The length of the statement  "            SetupReader(reader' out previousCulture' out previousDateTimeZoneHandling' out previousDateParseHandling' out previousFloatParseHandling' out previousMaxDepth' out previousDateFormatString); " is 190.
Long Statement,Newtonsoft.Json,JsonSerializer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonSerializer.cs,DeserializeInternal,The length of the statement  "            ResetReader(reader' previousCulture' previousDateTimeZoneHandling' previousDateParseHandling' previousFloatParseHandling' previousMaxDepth' previousDateFormatString); " is 166.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadInternal,The length of the statement  "                            throw JsonReaderException.Create(this' "Additional text encountered after finished reading JSON content: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 171.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadInternal,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadStringIntoBuffer,The length of the statement  "                                throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote)); " is 136.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadStringIntoBuffer,The length of the statement  "                            throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote)); " is 136.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadStringIntoBuffer,The length of the statement  "                                throw JsonReaderException.Create(this' "Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture' @"\" + currentChar)); " is 134.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadNumberIntoBuffer,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected character encountered while parsing number: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 156.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParsePostValue,The length of the statement  "                            throw JsonReaderException.Create(this' "After parsing a value an unexpected character was encountered: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 164.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseProperty,The length of the statement  "                throw JsonReaderException.Create(this' "Invalid property identifier character: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 145.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseProperty,The length of the statement  "                throw JsonReaderException.Create(this' "Invalid character after parsing property name. Expected ':' but got: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 175.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseUnquotedProperty,The length of the statement  "                        throw JsonReaderException.Create(this' "Invalid JavaScript property identifier character: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 151.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseValue,The length of the statement  "                                throw JsonReaderException.Create(this' "Unexpected character encountered while parsing value: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 160.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseValue,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected character encountered while parsing value: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 155.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseConstructor,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 149.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseConstructor,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 154.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                        throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex); " is 138.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                    ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value); " is 142.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                        throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 165.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                        throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 155.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                        throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex); " is 138.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                    if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value)) " is 120.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                        throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 155.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                        throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex); " is 137.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                    ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value); " is 142.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                            throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 152.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                        throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 165.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                                throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)); " is 134.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The length of the statement  "                                throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)); " is 133.
Long Statement,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseComment,The length of the statement  "                throw JsonReaderException.Create(this' "Error parsing comment. Expected: *' got {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 146.
Long Statement,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,WriteEscapedString,The length of the statement  "            JavaScriptUtils.WriteEscapedJavaScriptString(_writer' value' _quoteChar' quote' _charEscapeFlags' StringEscapeHandling' ref _writeBuffer); " is 138.
Long Statement,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,WriteValue,The length of the statement  "                pos = DateTimeUtils.WriteDateTimeString(_writeBuffer' pos' (DateFormatHandling == DateFormatHandling.IsoDateFormat) ? value.DateTime : value.UtcDateTime' value.Offset' DateTimeKind.Local' DateFormatHandling); " is 208.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,RaiseError,The length of the statement  "                ? message + " Line {0}' position {1}.".FormatWith(CultureInfo.InvariantCulture' lineInfo.LineNumber' lineInfo.LinePosition) " is 123.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,WriteToken,The length of the statement  "                bool isInUniqueArray = (schemaScope.TokenType == JTokenType.Array && schemaScope.IsUniqueArray && schemaScope.ArrayItemCount > 0); " is 130.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,WriteToken,The length of the statement  "                                RaiseError("Non-unique array item at index {0}.".FormatWith(CultureInfo.InvariantCulture' schemaScope.ArrayItemCount - 1)' schemaScope.Schemas.First(s => s.UniqueItems)); " is 170.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateEndObject,The length of the statement  "                    RaiseError("Required properties are missing from object: {0}.".FormatWith(CultureInfo.InvariantCulture' string.Join("' "' unmatchedRequiredProperties.ToArray()))' schema); " is 171.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateEndArray,The length of the statement  "                RaiseError("Array item count {0} exceeds maximum count of {1}.".FormatWith(CultureInfo.InvariantCulture' arrayItemCount' schema.MaximumItems)' schema); " is 151.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateEndArray,The length of the statement  "                RaiseError("Array item count {0} is less than minimum count of {1}.".FormatWith(CultureInfo.InvariantCulture' arrayItemCount' schema.MinimumItems)' schema); " is 156.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateString,The length of the statement  "                RaiseError("String '{0}' exceeds maximum length of {1}.".FormatWith(CultureInfo.InvariantCulture' value' schema.MaximumLength)' schema); " is 136.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateString,The length of the statement  "                RaiseError("String '{0}' is less than minimum length of {1}.".FormatWith(CultureInfo.InvariantCulture' value' schema.MinimumLength)' schema); " is 141.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateString,The length of the statement  "                        RaiseError("String '{0}' does not match regex pattern '{1}'.".FormatWith(CultureInfo.InvariantCulture' value' pattern)' schema); " is 128.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} exceeds maximum value of {1}.".FormatWith(CultureInfo.InvariantCulture' value' schema.Maximum)' schema); " is 128.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} equals maximum value of {1} and exclusive maximum is true.".FormatWith(CultureInfo.InvariantCulture' value' schema.Maximum)' schema); " is 157.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} is less than minimum value of {1}.".FormatWith(CultureInfo.InvariantCulture' value' schema.Minimum)' schema); " is 133.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} equals minimum value of {1} and exclusive minimum is true.".FormatWith(CultureInfo.InvariantCulture' value' schema.Minimum)' schema); " is 157.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} is not evenly divisible by {1}.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.DivisibleBy)' schema); " is 156.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ProcessValue,The length of the statement  "                    // if there is positional validation and the array index is past the number of item validation schemas and there is no additonal items then error " is 145.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ProcessValue,The length of the statement  "                        RaiseError("Index {0} has not been defined and the schema does not allow additional items.".FormatWith(CultureInfo.InvariantCulture' _currentScope.ArrayItemCount)' currentSchema); " is 179.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} exceeds maximum value of {1}.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.Maximum)' schema); " is 148.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} equals maximum value of {1} and exclusive maximum is true.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.Maximum)' schema); " is 177.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} is less than minimum value of {1}.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.Minimum)' schema); " is 153.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} equals minimum value of {1} and exclusive minimum is true.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.Minimum)' schema); " is 177.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} is not evenly divisible by {1}.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.DivisibleBy)' schema); " is 154.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ValidatePropertyName,The length of the statement  "                    RaiseError("Property '{0}' has not been defined and the schema does not allow additional properties.".FormatWith(CultureInfo.InvariantCulture' propertyName)' schema); " is 166.
Long Statement,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,TestType,The length of the statement  "                RaiseError("Invalid type. Expected {0} but got {1}.".FormatWith(CultureInfo.InvariantCulture' currentSchema.Type' currentType)' currentSchema); " is 143.
Long Statement,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,WriteConstructorDate,The length of the statement  "                throw JsonWriterException.Create(this' "Unexpected token when reading date constructor. Expected Integer' got " + reader.TokenType' null); " is 138.
Long Statement,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,WriteConstructorDate,The length of the statement  "                throw JsonWriterException.Create(this' "Unexpected token when reading date constructor. Expected EndConstructor' got " + reader.TokenType' null); " is 145.
Long Statement,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,AutoComplete,The length of the statement  "                throw JsonWriterException.Create(this' "Token {0} in state {1} would result in an invalid JSON object.".FormatWith(CultureInfo.InvariantCulture' tokenBeingWritten.ToString()' _currentState.ToString())' null); " is 208.
Long Statement,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,AutoComplete,The length of the statement  "            if ((_currentState == State.Object || _currentState == State.Array || _currentState == State.Constructor) && tokenBeingWritten != JsonToken.Comment) " is 148.
Long Statement,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,AutoComplete,The length of the statement  "                if ((_currentState == State.Array || _currentState == State.ArrayStart || _currentState == State.Constructor || _currentState == State.ConstructorStart) " is 152.
Long Statement,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,WriteValue,The length of the statement  "                        PrimitiveTypeCode resolvedTypeCode = (typeInformation.TypeCode == PrimitiveTypeCode.Object) ? PrimitiveTypeCode.String : typeInformation.TypeCode; " is 146.
Long Statement,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,CreateUnsupportedTypeException,The length of the statement  "            return JsonWriterException.Create(writer' "Unsupported type: {0}. Use the JsonSerializer class to get the object's JSON representation.".FormatWith(CultureInfo.InvariantCulture' value.GetType())' null); " is 202.
Long Statement,Newtonsoft.Json.Converters,BsonObjectIdConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\BsonObjectIdConverter.cs,ReadJson,The length of the statement  "                throw new JsonSerializationException("Expected Bytes but got {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 127.
Long Statement,Newtonsoft.Json.Converters,ExpandoObjectConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\ExpandoObjectConverter.cs,ReadValue,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Unexpected token when converting ExpandoObject: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 162.
Long Statement,Newtonsoft.Json.Converters,IsoDateTimeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\IsoDateTimeConverter.cs,WriteJson,The length of the statement  "                throw new JsonSerializationException("Unexpected value when converting date. Expected DateTime or DateTimeOffset' got {0}.".FormatWith(CultureInfo.InvariantCulture' ReflectionUtils.GetObjectType(value))); " is 204.
Long Statement,Newtonsoft.Json.Converters,IsoDateTimeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\IsoDateTimeConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 138.
Long Statement,Newtonsoft.Json.Converters,IsoDateTimeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\IsoDateTimeConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected token parsing date. Expected String' got {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 167.
Long Statement,Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 138.
Long Statement,Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "            if (reader.TokenType != JsonToken.StartConstructor || !string.Equals(reader.Value.ToString()' "Date"' StringComparison.Ordinal)) " is 128.
Long Statement,Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected token or value when parsing date. Token: {0}' Value: {1}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType' reader.Value)); " is 192.
Long Statement,Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected token parsing date. Expected Integer' got {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 168.
Long Statement,Newtonsoft.Json.Converters,JavaScriptDateTimeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected token parsing date. Expected EndConstructor' got {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 175.
Long Statement,Newtonsoft.Json.Converters,JsonValueConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\JsonValueConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Could not convert '{0}' to '{1}'.".FormatWith(CultureInfo.InvariantCulture' value.GetType()' objectType)); " is 155.
Long Statement,Newtonsoft.Json.Converters,JsonValueConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\JsonValueConverter.cs,CreateJsonValue,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Unexpected or unsupported token: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 147.
Long Statement,Newtonsoft.Json.Converters,StringEnumConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 138.
Long Statement,Newtonsoft.Json.Converters,StringEnumConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Integer value {0} is not allowed.".FormatWith(CultureInfo.InvariantCulture' reader.Value)); " is 140.
Long Statement,Newtonsoft.Json.Converters,StringEnumConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Error converting value {0} to type '{1}'.".FormatWith(CultureInfo.InvariantCulture' MiscellaneousUtils.FormatValueForPrint(reader.Value)' objectType)' ex); " is 204.
Long Statement,Newtonsoft.Json.Converters,StringEnumConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "            throw JsonSerializationException.Create(reader' "Unexpected token {0} when parsing enum.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 150.
Long Statement,Newtonsoft.Json.Converters,StringEnumConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\StringEnumConverter.cs,InitializeEnumType,The length of the statement  "                    throw new InvalidOperationException("Enum name '{0}' already exists on enum '{1}'.".FormatWith(CultureInfo.InvariantCulture' n2' type.Name)); " is 141.
Long Statement,Newtonsoft.Json.Converters,VersionConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\VersionConverter.cs,ReadJson,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Error parsing version string: {0}".FormatWith(CultureInfo.InvariantCulture' reader.Value)' ex); " is 144.
Long Statement,Newtonsoft.Json.Converters,VersionConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\VersionConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Unexpected token or value when parsing version. Token: {0}' Value: {1}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType' reader.Value)); " is 195.
Long Statement,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,ResolveFullName,The length of the statement  "            string prefix = (node.NamespaceUri == null || (node.LocalName == "xmlns" && node.NamespaceUri == "http://www.w3.org/2000/xmlns/")) " is 130.
Long Statement,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,ConvertTokenToXmlValue,The length of the statement  "                throw JsonSerializationException.Create(reader' "Cannot get an XML string value from token type '{0}'.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 164.
Long Statement,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,ReadArrayElements,The length of the statement  "                IXmlElement arrayElement = nestedArrayElement.ChildNodes.OfType<IXmlElement>().Single(n => n.LocalName == propertyName); " is 120.
Long Statement,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,CreateInstruction,The length of the statement  "                            throw new JsonSerializationException("Unexpected property name encountered while deserializing XmlDeclaration: " + reader.Value); " is 129.
Long Statement,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,CreateDocumentType,The length of the statement  "                        throw new JsonSerializationException("Unexpected property name encountered while deserializing XmlDeclaration: " + reader.Value); " is 129.
Long Statement,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,CreateElement,The length of the statement  "            IXmlElement element = (!string.IsNullOrEmpty(ns)) ? document.CreateElement(elementName' ns) : document.CreateElement(elementName); " is 130.
Long Statement,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,DeserializeNode,The length of the statement  "                            throw new JsonSerializationException("JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifing a DeserializeRootElementName."); " is 216.
Long Statement,Newtonsoft.Json.Linq,Extensions,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\Extensions.cs,Convert,The length of the statement  "                    throw new InvalidCastException("Cannot cast {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' token.GetType()' typeof(T))); " is 127.
Long Statement,Newtonsoft.Json.Linq,JArray,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JArray.cs,Load,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JArray from JsonReader. Current JsonReader item is not an array: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 186.
Long Statement,Newtonsoft.Json.Linq,JArray,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JArray.cs,FromObject,The length of the statement  "                throw new ArgumentException("Object serialized to {0}. JArray instance expected.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 136.
Long Statement,Newtonsoft.Json.Linq,JConstructor,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JConstructor.cs,Load,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JConstructor from JsonReader. Current JsonReader item is not a constructor: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 197.
Long Statement,Newtonsoft.Json.Linq,JContainer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JContainer.cs,CheckReentrancy,The length of the statement  "                throw new InvalidOperationException("Cannot change {0} during a collection change event.".FormatWith(CultureInfo.InvariantCulture' GetType())); " is 143.
Long Statement,Newtonsoft.Json.Linq,JContainer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JContainer.cs,SetItem,The length of the statement  "                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace' item' existing' index)); " is 120.
Long Statement,Newtonsoft.Json.Linq,JContainer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JContainer.cs,CopyItemsTo,The length of the statement  "                throw new ArgumentException("The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array."); " is 165.
Long Statement,Newtonsoft.Json.Linq,JContainer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JContainer.cs,ValidateToken,The length of the statement  "                throw new ArgumentException("Can not add {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' o.GetType()' GetType())); " is 120.
Long Statement,Newtonsoft.Json.Linq,JContainer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JContainer.cs,ReadTokenFrom,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading {0} from JsonReader.".FormatWith(CultureInfo.InvariantCulture' GetType().Name)); " is 136.
Long Statement,Newtonsoft.Json.Linq,JContainer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JContainer.cs,ReadTokenFrom,The length of the statement  "                throw JsonReaderException.Create(reader' "Unexpected end of content while loading {0}.".FormatWith(CultureInfo.InvariantCulture' GetType().Name)); " is 146.
Long Statement,Newtonsoft.Json.Linq,JContainer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JContainer.cs,ReadContentFrom,The length of the statement  "                        throw new InvalidOperationException("The JsonReader should not be on a token of type {0}.".FormatWith(CultureInfo.InvariantCulture' r.TokenType)); " is 146.
Long Statement,Newtonsoft.Json.Linq,JObject,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JObject.cs,ValidateToken,The length of the statement  "                throw new ArgumentException("Can not add {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' o.GetType()' GetType())); " is 120.
Long Statement,Newtonsoft.Json.Linq,JObject,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JObject.cs,ValidateToken,The length of the statement  "                throw new ArgumentException("Can not add property {0} to {1}. Property with the same name already exists on object.".FormatWith(CultureInfo.InvariantCulture' newProperty.Name' GetType())); " is 188.
Long Statement,Newtonsoft.Json.Linq,JObject,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JObject.cs,InternalPropertyChanged,The length of the statement  "                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace' childProperty' childProperty' IndexOfItem(childProperty))); " is 155.
Long Statement,Newtonsoft.Json.Linq,JObject,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JObject.cs,Load,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JObject from JsonReader. Current JsonReader item is not an object: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 188.
Long Statement,Newtonsoft.Json.Linq,JObject,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JObject.cs,FromObject,The length of the statement  "                throw new ArgumentException("Object serialized to {0}. JObject instance expected.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 137.
Long Statement,Newtonsoft.Json.Linq,JObject,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JObject.cs,CopyTo,The length of the statement  "                throw new ArgumentException("The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array."); " is 165.
Long Statement,Newtonsoft.Json.Linq,JProperty,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JProperty.cs,RemoveItem,The length of the statement  "            throw new JsonException("Cannot add or remove items from {0}.".FormatWith(CultureInfo.InvariantCulture' typeof(JProperty))); " is 124.
Long Statement,Newtonsoft.Json.Linq,JProperty,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JProperty.cs,RemoveItemAt,The length of the statement  "            throw new JsonException("Cannot add or remove items from {0}.".FormatWith(CultureInfo.InvariantCulture' typeof(JProperty))); " is 124.
Long Statement,Newtonsoft.Json.Linq,JProperty,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JProperty.cs,InsertItem,The length of the statement  "                throw new JsonException("{0} cannot have multiple values.".FormatWith(CultureInfo.InvariantCulture' typeof(JProperty))); " is 120.
Long Statement,Newtonsoft.Json.Linq,JProperty,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JProperty.cs,ClearItems,The length of the statement  "            throw new JsonException("Cannot add or remove items from {0}.".FormatWith(CultureInfo.InvariantCulture' typeof(JProperty))); " is 124.
Long Statement,Newtonsoft.Json.Linq,JProperty,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JProperty.cs,Load,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JProperty from JsonReader. Current JsonReader item is not a property: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 191.
Long Statement,Newtonsoft.Json.Linq,JToken,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JToken.cs,Value,The length of the statement  "            // null check to fix MonoTouch issue - https://github.com/dolbz/Newtonsoft.Json/commit/a24e3062846b30ee505f3271ac08862bb471b822 " is 127.
Long Statement,Newtonsoft.Json.Linq,JToken,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JToken.cs,Values,The length of the statement  "            throw new InvalidOperationException("Cannot access child value on {0}.".FormatWith(CultureInfo.InvariantCulture' GetType())); " is 125.
Long Statement,Newtonsoft.Json.Linq,JToken,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JToken.cs,ValidateToken,The length of the statement  "            return (Array.IndexOf(validTypes' o.Type) != -1) || (nullable && (o.Type == JTokenType.Null || o.Type == JTokenType.Undefined)); " is 128.
Long Statement,Newtonsoft.Json.Linq,JToken,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JToken.cs,ToBigInteger,The length of the statement  "                throw new ArgumentException("Can not convert {0} to BigInteger.".FormatWith(CultureInfo.InvariantCulture' GetType(value))); " is 123.
Long Statement,Newtonsoft.Json.Linq,JToken,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JToken.cs,ToBigIntegerNullable,The length of the statement  "                throw new ArgumentException("Can not convert {0} to BigInteger.".FormatWith(CultureInfo.InvariantCulture' GetType(value))); " is 123.
Long Statement,Newtonsoft.Json.Linq,JToken,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JToken.cs,ToObject,The length of the statement  "                        throw new ArgumentException("Could not convert '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture' (string)this' enumType.Name)' ex); " is 137.
Long Statement,Newtonsoft.Json.Linq,JToken,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JToken.cs,ReadFrom,The length of the statement  "                    throw JsonReaderException.Create(reader' "Error reading JToken from JsonReader. Unexpected token: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 163.
Long Statement,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Compare,The length of the statement  "                        return Convert.ToDecimal(objA' CultureInfo.InvariantCulture).CompareTo(Convert.ToDecimal(objB' CultureInfo.InvariantCulture)); " is 126.
Long Statement,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Compare,The length of the statement  "                        return Convert.ToInt64(objA' CultureInfo.InvariantCulture).CompareTo(Convert.ToInt64(objB' CultureInfo.InvariantCulture)); " is 122.
Long Statement,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Compare,The length of the statement  "                    throw MiscellaneousUtils.CreateArgumentOutOfRangeException("valueType"' valueType' "Unexpected value type: {0}".FormatWith(CultureInfo.InvariantCulture' valueType)); " is 165.
Long Statement,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The length of the statement  "                else if (objA is int || objA is uint || objA is long || objA is short || objA is ushort || objA is sbyte || objA is byte || " is 123.
Long Statement,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,GetValueType,The length of the statement  "            throw new ArgumentException("Could not determine JSON object type for type {0}.".FormatWith(CultureInfo.InvariantCulture' value.GetType())); " is 140.
Long Statement,Newtonsoft.Json.Linq.JsonPath,FieldFilter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\FieldFilter.cs,ExecuteFilter,The length of the statement  "                        throw new JsonException("Property '{0}' not valid on {1}.".FormatWith(CultureInfo.InvariantCulture' Name ?? "*"' t.GetType().Name)); " is 132.
Long Statement,Newtonsoft.Json.Linq.JsonPath,FieldMultipleFilter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\FieldMultipleFilter.cs,ExecuteFilter,The length of the statement  "                        throw new JsonException("Properties {0} not valid on {1}.".FormatWith(CultureInfo.InvariantCulture' string.Join("' "' Names.Select(n => "'" + n + "'").ToArray())' t.GetType().Name)); " is 182.
Long Statement,Newtonsoft.Json.Linq.JsonPath,JPath,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\JPath.cs,ParsePath,The length of the statement  "                        if (query && (currentChar == '=' || currentChar == '<' || currentChar == '!' || currentChar == '>' || currentChar == '|' || currentChar == '&')) " is 144.
Long Statement,Newtonsoft.Json.Linq.JsonPath,PathFilter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\PathFilter.cs,GetTokenIndex,The length of the statement  "                        throw new JsonException("Index {0} outside the bounds of JConstructor.".FormatWith(CultureInfo.InvariantCulture' index)); " is 121.
Long Statement,Newtonsoft.Json.Linq.JsonPath,PathFilter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\PathFilter.cs,GetTokenIndex,The length of the statement  "                    throw new JsonException("Index {0} not valid on {1}.".FormatWith(CultureInfo.InvariantCulture' index' t.GetType().Name)); " is 121.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ResolveReferences,The length of the statement  "                        string[] escapedParts = schema.DeferredReference.TrimStart('#').Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries); " is 124.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ResolveReferences,The length of the statement  "                        throw new JsonException("Could not resolve schema reference '{0}'.".FormatWith(CultureInfo.InvariantCulture' schema.DeferredReference)); " is 136.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,BuildSchema,The length of the statement  "                throw JsonException.Create(token' token.Path' "Expected object while parsing schema object' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 156.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ProcessEnum,The length of the statement  "                throw JsonException.Create(token' token.Path' "Expected Array token while parsing enum values' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 159.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ProcessProperties,The length of the statement  "                throw JsonException.Create(token' token.Path' "Expected Object token while parsing schema properties' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 166.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ProcessProperties,The length of the statement  "                    throw new JsonException("Property {0} has already been defined in schema.".FormatWith(CultureInfo.InvariantCulture' propertyToken.Name)); " is 137.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ProcessItems,The length of the statement  "                    throw JsonException.Create(token' token.Path' "Expected array or JSON schema object' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 149.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ProcessType,The length of the statement  "                            throw JsonException.Create(typeToken' typeToken.Path' "Exception JSON schema type string token' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 160.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ProcessType,The length of the statement  "                    throw JsonException.Create(token' token.Path' "Expected array or JSON schema type string token' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 160.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaGenerator,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaGenerator.cs,GenerateInternal,The length of the statement  "                throw new JsonException("Unresolved circular reference for type '{0}'. Explicitly define an Id for the type using a JsonObject/JsonArray attribute or automatically generate a type Id using the UndefinedSchemaIdHandling property.".FormatWith(CultureInfo.InvariantCulture' type)); " is 278.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaGenerator,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaGenerator.cs,GenerateInternal,The length of the statement  "                            CurrentSchema.Items.Add(GenerateInternal(collectionItemType' (!allowNullItem) ? Required.Always : Required.Default' false)); " is 124.
Long Statement,Newtonsoft.Json.Schema,JsonSchemaGenerator,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaGenerator.cs,GetJsonSchemaType,The length of the statement  "                    throw new JsonException("Unexpected type code '{0}' for type '{1}'.".FormatWith(CultureInfo.InvariantCulture' typeCode' type)); " is 127.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetSerializableMembers,The length of the statement  "            MemberSerialization memberSerialization = JsonTypeReflector.GetObjectMemberSerialization(objectType' ignoreSerializableAttribute); " is 130.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetSerializableMembers,The length of the statement  "            List<MemberInfo> allMembers = ReflectionUtils.GetFieldsAndProperties(objectType' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static) " is 172.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,ShouldSerializeEntityMember,The length of the statement  "                if (propertyInfo.PropertyType.IsGenericType() && propertyInfo.PropertyType.GetGenericTypeDefinition().FullName == "System.Data.Objects.DataClasses.EntityReference`1") " is 166.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "            contract.MemberSerialization = JsonTypeReflector.GetObjectMemberSerialization(contract.NonNullableUnderlyingType' ignoreSerializableAttribute); " is 143.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "            JsonObjectAttribute attribute = JsonTypeReflector.GetCachedAttribute<JsonObjectAttribute>(contract.NonNullableUnderlyingType); " is 126.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "                    // mimic DataContractSerializer behaviour when populating fields by overriding default creator to create an uninitialized object " is 128.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "                    // note that this is only possible when the application is fully trusted so fall back to using the default constructor (if available) in partial trust " is 150.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetExtensionDataMemberForType,The length of the statement  "                m.AddRange(baseType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)); " is 133.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetExtensionDataMemberForType,The length of the statement  "                m.AddRange(baseType.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)); " is 129.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetExtensionDataMemberForType,The length of the statement  "                throw new JsonException("Invalid extension data attribute on '{0}'. Member '{1}' type must implement IDictionary<string' JToken>.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(m.DeclaringType)' m.Name)); " is 218.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "            Func<object' object> getExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(member); " is 120.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "            Action<object' object> setExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateSet<object>(member); " is 122.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "            Func<object> createExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(t); " is 125.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "            MethodCall<object' object> setExtensionDataDictionaryValue = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(addMethod); " is 141.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "            ObjectConstructor<object> createEnumerableWrapper = JsonTypeReflector.ReflectionDelegateFactory.CreateParametrizedConstructor(constructors); " is 140.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetAttributeConstructor,The length of the statement  "            IList<ConstructorInfo> markedConstructors = objectType.GetConstructors(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Where(c => c.IsDefined(typeof(JsonConstructorAttribute)' true)).ToList(); " is 214.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreateConstructorParameters,The length of the statement  "                JsonProperty matchingMemberProperty = (parameterInfo.Name != null) ? memberProperties.GetClosestMatchProperty(parameterInfo.Name) : null; " is 137.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreatePropertyFromConstructorParameter,The length of the statement  "            SetPropertySettingsFromAttributes(property' parameterInfo' parameterInfo.Name' parameterInfo.Member.DeclaringType' MemberSerialization.OptOut' out allowNonPublicAccess); " is 169.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreatePropertyFromConstructorParameter,The length of the statement  "                property.PropertyName = (property.PropertyName != parameterInfo.Name) ? property.PropertyName : matchingMemberProperty.PropertyName; " is 132.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "            JsonContainerAttribute containerAttribute = JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(contract.NonNullableUnderlyingType); " is 141.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "                DataContractAttribute dataContractAttribute = JsonTypeReflector.GetDataContractAttribute(contract.NonNullableUnderlyingType); " is 125.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "            contract.InternalConverter = JsonSerializer.GetMatchingConverter(BuiltInConverters' contract.NonNullableUnderlyingType); " is 120.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,ResolveCallbackMethods,The length of the statement  "            GetCallbackMethodsForType(t' out onSerializing' out onSerialized' out onDeserializing' out onDeserialized' out onError); " is 120.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,ResolveCallbackMethods,The length of the statement  "                    // ConcurrentDictionary throws an error here so don't use its OnDeserialized - http://json.codeplex.com/discussions/257093 " is 122.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "                foreach (MethodInfo method in baseType.GetMethods(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)) " is 148.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "                    if (IsValidCallback(method' parameters' typeof(OnDeserializingAttribute)' currentOnDeserializing' ref prevAttributeType)) " is 121.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                throw new JsonException("Invalid attribute. Both '{0}' and '{1}' in type '{2}' have '{3}'.".FormatWith(CultureInfo.InvariantCulture' method' currentCallback' GetClrTypeFullName(method.DeclaringType)' attributeType)); " is 216.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                throw new JsonException("Invalid Callback. Method '{3}' in type '{2}' has both '{0}' and '{1}'.".FormatWith(CultureInfo.InvariantCulture' prevAttributeType' attributeType' GetClrTypeFullName(method.DeclaringType)' method)); " is 223.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                throw new JsonException("Virtual Method '{0}' of type '{1}' cannot be marked with '{2}' attribute.".FormatWith(CultureInfo.InvariantCulture' method' GetClrTypeFullName(method.DeclaringType)' attributeType)); " is 207.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                throw new JsonException("Serialization Callback '{1}' in type '{0}' must return void.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(method.DeclaringType)' method)); " is 179.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                if (parameters == null || parameters.Length != 2 || parameters[0].ParameterType != typeof(StreamingContext) || parameters[1].ParameterType != typeof(ErrorContext)) " is 163.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                    throw new JsonException("Serialization Error Callback '{1}' in type '{0}' must have two parameters of type '{2}' and '{3}'.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(method.DeclaringType)' method' typeof(StreamingContext)' typeof(ErrorContext))); " is 265.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                    throw new JsonException("Serialization Callback '{1}' in type '{0}' must have a single parameter of type '{2}'.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(method.DeclaringType)' method' typeof(StreamingContext))); " is 231.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreateProperty,The length of the statement  "            SetPropertySettingsFromAttributes(property' member' member.Name' member.DeclaringType' memberSerialization' out allowNonPublicAccess); " is 134.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The length of the statement  "                property.DefaultValueHandling = (!dataMemberAttribute.EmitDefaultValue) ? (DefaultValueHandling?)DefaultValueHandling.Ignore : null; " is 132.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The length of the statement  "                    ? JsonTypeReflector.CreateJsonConverterInstance(propertyAttribute.ItemConverterType' propertyAttribute.ItemConverterParameters) " is 127.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,CreateShouldSerializeTest,The length of the statement  "            MethodInfo shouldSerializeMethod = member.DeclaringType.GetMethod(JsonTypeReflector.ShouldSerializePrefix + member.Name' ReflectionUtils.EmptyTypes); " is 149.
Long Statement,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,SetIsSpecifiedActions,The length of the statement  "            Func<object' object> specifiedPropertyGet = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(specifiedMember); " is 123.
Long Statement,Newtonsoft.Json.Serialization,DefaultSerializationBinder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The length of the statement  "                    throw new JsonSerializationException("Could not load assembly '{0}'.".FormatWith(CultureInfo.InvariantCulture' assemblyName)); " is 126.
Long Statement,Newtonsoft.Json.Serialization,DefaultSerializationBinder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The length of the statement  "                    throw new JsonSerializationException("Could not find type '{0}' in assembly '{1}'.".FormatWith(CultureInfo.InvariantCulture' typeName' assembly.FullName)); " is 155.
Long Statement,Newtonsoft.Json.Serialization,ExpressionValueProvider,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\ExpressionValueProvider.cs,SetValue,The length of the statement  "                        throw new JsonSerializationException("Incompatible value. Cannot set {0} to null.".FormatWith(CultureInfo.InvariantCulture' _memberInfo)); " is 138.
Long Statement,Newtonsoft.Json.Serialization,ExpressionValueProvider,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\ExpressionValueProvider.cs,SetValue,The length of the statement  "                    throw new JsonSerializationException("Incompatible value. Cannot set {0} to type {1}.".FormatWith(CultureInfo.InvariantCulture' _memberInfo' value.GetType())); " is 159.
Long Statement,Newtonsoft.Json.Serialization,ExpressionValueProvider,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\ExpressionValueProvider.cs,SetValue,The length of the statement  "                throw new JsonSerializationException("Error setting value to '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 160.
Long Statement,Newtonsoft.Json.Serialization,ExpressionValueProvider,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\ExpressionValueProvider.cs,GetValue,The length of the statement  "                throw new JsonSerializationException("Error getting value from '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 162.
Long Statement,Newtonsoft.Json.Serialization,JsonArrayContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonArrayContract.cs,CreateWrapper,The length of the statement  "                _genericWrapperCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParametrizedConstructor(genericWrapperConstructor); " is 126.
Long Statement,Newtonsoft.Json.Serialization,JsonArrayContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonArrayContract.cs,CreateTemporaryCollection,The length of the statement  "                _genericTemporaryCollectionCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(temporaryListType); " is 133.
Long Statement,Newtonsoft.Json.Serialization,JsonDictionaryContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonDictionaryContract.cs,CreateWrapper,The length of the statement  "                ConstructorInfo genericWrapperConstructor = _genericWrapperType.GetConstructor(new[] { _genericCollectionDefinitionType }); " is 123.
Long Statement,Newtonsoft.Json.Serialization,JsonDictionaryContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonDictionaryContract.cs,CreateWrapper,The length of the statement  "                _genericWrapperCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParametrizedConstructor(genericWrapperConstructor); " is 126.
Long Statement,Newtonsoft.Json.Serialization,JsonDictionaryContract,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonDictionaryContract.cs,CreateTemporaryDictionary,The length of the statement  "                _genericTemporaryDictionaryCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(temporaryDictionaryType); " is 139.
Long Statement,Newtonsoft.Json.Serialization,JsonPropertyCollection,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonPropertyCollection.cs,AddProperty,The length of the statement  "                    throw new JsonSerializationException("A member with the name '{0}' already exists on '{1}'. Use the JsonPropertyAttribute to specify another name.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' _type)); " is 220.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                    PopulateList((arrayContract.ShouldCreateWrapper) ? arrayContract.CreateWrapper(target) : (IList)target' reader' arrayContract' null' null); " is 139.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot populate JSON array onto type '{0}'.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 148.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                    PopulateDictionary((dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper(target) : (IDictionary)target' reader' dictionaryContract' null' id); " is 164.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot populate JSON object onto type '{0}'.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 149.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected initial token '{0}' when populating object. Expected JSON object or array.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 196.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,Deserialize,The length of the statement  "                        throw JsonSerializationException.Create(reader' "No JSON content found and type '{0}' is not nullable.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 171.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateValueInternal,The length of the statement  "                        if (string.IsNullOrEmpty(s) && objectType != typeof(string) && objectType != typeof(object) && contract != null && contract.IsNullable) " is 135.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                if (ReadMetadataPropertiesToken(tokenReader' ref resolvedObjectType' ref contract' member' containerContract' containerMember' existingValue' out newValue' out id)) " is 164.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                if (ReadMetadataProperties(reader' ref resolvedObjectType' ref contract' member' containerContract' containerMember' existingValue' out newValue' out id)) " is 154.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                    if (existingValue != null && (resolvedObjectType == objectType || resolvedObjectType.IsAssignableFrom(existingValue.GetType()))) " is 128.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                            throw JsonSerializationException.Create(reader' "Unexpected token when deserializing primitive value: " + reader.TokenType); " is 124.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Cannot preserve reference to readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Cannot call OnSerializing on readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Cannot call OnError on readonly list' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 214.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Cannot deserialize readonly or fixed size dictionary: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 176.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                        targetDictionary = PopulateDictionary(dictionaryContract.ShouldCreateWrapper ? dictionaryContract.CreateWrapper(existingValue) : (IDictionary)existingValue' reader' dictionaryContract' member' id); " is 197.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "            string message = @"Cannot deserialize the current JSON object (e.g. {{""name"":""value""}}) into type '{0}' because the type requires a {1} to deserialize correctly." + Environment.NewLine + " is 190.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                             @"To fix this error either change the JSON to a {1} or change the deserialized type so that it is a normal .NET type (e.g. not a primitive type like integer' not a collection type like an array or List<T>) that can be deserialized from a JSON object. JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object." + Environment.NewLine; " is 371.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The length of the statement  "                        throw JsonSerializationException.Create(refToken' refToken.Path' "JSON reference {0} property must have a string or null value.".FormatWith(CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)' null); " is 212.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The length of the statement  "                            throw JsonSerializationException.Create(additionalContent' additionalContent.Path' "Additional content found in JSON reference object. A JSON reference object should only have a {0} property.".FormatWith(CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)' null); " is 276.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The length of the statement  "                            TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Resolved object reference '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture' reference' newValue.GetType()))' null); " is 222.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The length of the statement  "                    ResolveTypeName(typeTokenReader' ref objectType' ref contract' member' containerContract' containerMember' qualifiedTypeName); " is 126.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataProperties,The length of the statement  "                                throw JsonSerializationException.Create(reader' "JSON reference {0} property must have a string or null value.".FormatWith(CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)); " is 189.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataProperties,The length of the statement  "                                    throw JsonSerializationException.Create(reader' "Additional content found in JSON reference object. A JSON reference object should only have a {0} property.".FormatWith(CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)); " is 235.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataProperties,The length of the statement  "                                    TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Resolved object reference '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture' reference' newValue.GetType()))' null); " is 222.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Error resolving type specified in JSON '{0}'.".FormatWith(CultureInfo.InvariantCulture' qualifiedTypeName)' ex); " is 161.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Type specified in JSON '{0}' was not resolved.".FormatWith(CultureInfo.InvariantCulture' qualifiedTypeName)); " is 158.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The length of the statement  "                    TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Resolved type '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture' qualifiedTypeName' specifiedType))' null); " is 216.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Type specified in JSON '{0}' is not compatible with '{1}'.".FormatWith(CultureInfo.InvariantCulture' specifiedType.AssemblyQualifiedName' objectType.AssemblyQualifiedName)); " is 222.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EnsureArrayContract,The length of the statement  "                throw JsonSerializationException.Create(reader' "Could not resolve type '{0}' to a JsonContract.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 152.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EnsureArrayContract,The length of the statement  "                string message = @"Cannot deserialize the current JSON array (e.g. [1'2'3]) into type '{0}' because the type requires a {1} to deserialize correctly." + Environment.NewLine + " is 174.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EnsureArrayContract,The length of the statement  "                                 @"To fix this error either change the JSON to a {1} or change the deserialized type to an array or a type that implements a collection interface (e.g. ICollection' IList) like List<T> that can be deserialized from a JSON array. JsonArrayAttribute can also be added to the type to force it to deserialize from a JSON array." + Environment.NewLine; " is 346.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Cannot preserve reference to array or readonly list' or list created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 223.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Cannot call OnSerializing on an array or readonly list' or list created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Cannot call OnError on an array or readonly list' or list created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 220.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Cannot deserialize readonly or fixed size list: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 170.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        list = CollectionUtils.ToMultidimensionalArray(list' arrayContract.CollectionItemType' contract.CreatedType.GetArrayRank()); " is 124.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                value = PopulateList((arrayContract.ShouldCreateWrapper) ? arrayContract.CreateWrapper(existingValue) : (IList)existingValue' reader' arrayContract' member' id); " is 161.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EnsureType,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Error converting value {0} to type '{1}'.".FormatWith(CultureInfo.InvariantCulture' MiscellaneousUtils.FormatValueForPrint(value)' targetType)' ex); " is 197.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The length of the statement  "            if (CalculatePropertyDetails(property' ref propertyConverter' containerContract' containerProperty' reader' target' out useExistingValue' out currentValue' out propertyContract' out gottenCurrentValue)) " is 202.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The length of the statement  "                value = CreateValueInternal(reader' property.PropertyType' propertyContract' property' containerContract' containerProperty' (useExistingValue) ? currentValue : null); " is 167.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The length of the statement  "                        TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "IsSpecified for property '{0}' on {1} set to true.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType))' null); " is 252.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "            if (property.NullValueHandling.GetValueOrDefault(Serializer._nullValueHandling) == NullValueHandling.Ignore && tokenType == JsonToken.Null) " is 139.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "            if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) " is 123.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "                && !HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate) " is 125.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,AddReference,The length of the statement  "                    TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Read object reference Id '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture' id' value.GetType()))' null); " is 215.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,AddReference,The length of the statement  "                throw JsonSerializationException.Create(reader' "Error reading object reference '{0}'.".FormatWith(CultureInfo.InvariantCulture' id)' ex); " is 138.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ShouldSetPropertyValue,The length of the statement  "            if (property.NullValueHandling.GetValueOrDefault(Serializer._nullValueHandling) == NullValueHandling.Ignore && value == null) " is 125.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ShouldSetPropertyValue,The length of the statement  "            if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) " is 123.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ShouldSetPropertyValue,The length of the statement  "                && !HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate) " is 125.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "                throw JsonSerializationException.Create(reader' "Cannot create and populate list type {0}.".FormatWith(CultureInfo.InvariantCulture' contract.CreatedType)); " is 156.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "            else if (contract.DefaultCreator != null && (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)) " is 171.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unable to find a constructor to use for type {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 167.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,The length of the statement  "            else if (contract.DefaultCreator != null && (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)) " is 171.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unable to find a default constructor to use for type {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 175.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,OnDeserializing,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Started deserializing {0}".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 202.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,OnDeserialized,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Finished deserializing {0}".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 203.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "            JsonConverter dictionaryValueConverter = contract.ItemConverter ?? GetConverter(contract.ItemContract' null' contract' containerProperty); " is 138.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "            PrimitiveTypeCode keyTypeCode = (contract.KeyContract is JsonPrimitiveContract) ? ((JsonPrimitiveContract)contract.KeyContract).TypeCode : PrimitiveTypeCode.Empty; " is 163.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "                                if (dateParseHandling != DateParseHandling.None && DateTimeUtils.TryParseDateTime(keyValue.ToString()' dateParseHandling' reader.DateTimeZoneHandling' reader.DateFormatString' reader.Culture' out dt)) " is 200.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "                                    keyValue = EnsureType(reader' keyValue' CultureInfo.InvariantCulture' contract.KeyContract' contract.DictionaryKeyType); " is 120.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Could not convert string '{0}' to dictionary key type '{1}'. Create a TypeConverter to convert from the string to the key type object.".FormatWith(CultureInfo.InvariantCulture' reader.Value' contract.DictionaryKeyType)' ex); " is 273.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "                                itemValue = CreateValueInternal(reader' contract.DictionaryValueType' contract.ItemContract' null' contract' containerProperty' null); " is 134.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The length of the statement  "                                        value = CreateValueInternal(reader' contract.CollectionItemType' collectionItemContract' null' contract' containerProperty' null); " is 130.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Unexpected token when deserializing multidimensional array: " + reader.TokenType); " is 131.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateList,The length of the statement  "                                    value = CreateValueInternal(reader' contract.CollectionItemType' contract.ItemContract' null' contract' containerProperty' null); " is 129.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "                throw JsonSerializationException.Create(reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "                (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)) " is 127.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unable to find a default constructor to use for type {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 175.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 145.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "            Dictionary<JsonProperty' PropertyPresence> propertiesPresence = (contract.HasRequiredOrDefaultValueProperties || HasFlag(Serializer._defaultValueHandling' DefaultValueHandling.Populate)) " is 186.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Deserializing {0} using creator with parameters: {1}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType' parameters))' null); " is 242.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "            IDictionary<JsonProperty' object> propertyValues = ResolvePropertyAndCreatorValues(contract' containerProperty' reader' objectType' out extensionData); " is 151.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                    matchingCreatorParameter = contract.CreatorParameters.ForgivingCaseSensitiveFind(p => p.PropertyName' property.UnderlyingName); " is 127.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                            IDictionary targetDictionary = (dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper(createdObjectDictionary) : (IDictionary)createdObjectDictionary; " is 171.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                            IDictionary newValues = (dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper(value) : (IDictionary)value; " is 128.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,DeserializeConvertable,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Started deserializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture' objectType' converter.GetType()))' null); " is 230.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,DeserializeConvertable,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Finished deserializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture' objectType' converter.GetType()))' null); " is 231.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                            JsonConverter propertyConverter = GetConverter(property.PropertyContract' property.MemberConverter' contract' containerProperty); " is 129.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 145.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                    propertyValue = CreateValueInternal(reader' property.PropertyType' property.PropertyContract' property' contract' containerProperty' null); " is 139.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 145.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Could not find member '{0}' on {1}.".FormatWith(CultureInfo.InvariantCulture' memberName' contract.UnderlyingType))' null); " is 227.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Could not find member '{0}' on object of type '{1}'".FormatWith(CultureInfo.InvariantCulture' memberName' objectType.Name)); " is 173.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                    return CreateObjectUsingCreatorWithParameters(reader' objectContract' containerMember' objectContract.OverrideCreator' id); " is 123.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                     (!objectContract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor || objectContract.ParametrizedCreator == null)) " is 179.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                return CreateObjectUsingCreatorWithParameters(reader' objectContract' containerMember' objectContract.ParametrizedCreator' id); " is 127.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture' objectContract.UnderlyingType)); " is 232.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unable to find a constructor to use for type {0}. A class should either have a default constructor' one constructor with arguments or a constructor marked with the JsonConstructor attribute.".FormatWith(CultureInfo.InvariantCulture' objectContract.UnderlyingType)); " is 314.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "            Dictionary<JsonProperty' PropertyPresence> propertiesPresence = (contract.HasRequiredOrDefaultValueProperties || HasFlag(Serializer._defaultValueHandling' DefaultValueHandling.Populate)) " is 186.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "                                    TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Could not find member '{0}' on {1}".FormatWith(CultureInfo.InvariantCulture' memberName' contract.UnderlyingType))' null); " is 226.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "                                    throw JsonSerializationException.Create(reader' "Could not find member '{0}' on object of type '{1}'".FormatWith(CultureInfo.InvariantCulture' memberName' contract.UnderlyingType.Name)); " is 186.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 145.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,SetExtensionData,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Error setting value in extension data for type '{0}'.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)' ex); " is 175.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EndObject,The length of the statement  "                                        throw JsonSerializationException.Create(reader' "Required property '{0}' not found in JSON.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName)); " is 158.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EndObject,The length of the statement  "                                    if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate) && property.Writable && !property.Ignored) " is 168.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EndObject,The length of the statement  "                                        property.ValueProvider.SetValue(newObject' EnsureType(reader' property.GetResolvedDefaultValue()' CultureInfo.InvariantCulture' property.PropertyContract' property.PropertyType)); " is 179.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EndObject,The length of the statement  "                                        throw JsonSerializationException.Create(reader' "Required property '{0}' expects a value but got null.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName)); " is 169.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializePrimitive,The length of the statement  "                bool includeTypeDetails = ShouldWriteType(TypeNameHandling.Objects' contract' member' containerContract' containerProperty); " is 124.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "						SerializeDictionary(writer' (value is IDictionary) ? (IDictionary)value : dictionaryContract.CreateWrapper(value)' dictionaryContract' member' containerContract' containerProperty); " is 181.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "                    SerializeDynamic(writer' (IDynamicMetaObjectProvider)value' (JsonDynamicContract)valueContract' member' containerContract' containerProperty); " is 142.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "						SerializeISerializable(writer' (ISerializable)value' (JsonISerializableContract)valueContract' member' containerContract' containerProperty); " is 141.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "				//bool thereIsHandler = IsErrorHandled(underlyingDictionary' containerContract' propertyName' null' writer.ContainerPath' ex); " is 126.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteProperty,The length of the statement  "            if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) " is 123.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The length of the statement  "            if (value == null || contract.ContractType == JsonContractType.Primitive || contract.ContractType == JsonContractType.String) " is 125.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The length of the statement  "                            TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' message + ". Skipping serializing self referenced value.")' null); " is 150.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The length of the statement  "                            TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' message + ". Serializing self referenced value.")' null); " is 141.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,WriteReference,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Writing object reference to Id '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture' reference' value.GetType()))' null); " is 206.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,GetReference,The length of the statement  "                throw JsonSerializationException.Create(null' writer.ContainerPath' "Error writing object reference for '{0}'.".FormatWith(CultureInfo.InvariantCulture' value.GetType())' ex); " is 175.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,OnSerializing,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Started serializing {0}".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 181.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,OnSerialized,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Finished serializing {0}".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 182.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The length of the statement  "            if (!property.Ignored && property.Readable && ShouldSerialize(writer' property' value) && IsSpecified(writer' property' value)) " is 127.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The length of the statement  "                        Required resolvedRequired = property._required ?? ((objectContract != null) ? objectContract.ItemRequired : null) ?? Required.Default; " is 134.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The length of the statement  "                            throw JsonSerializationException.Create(null' writer.ContainerPath' "Cannot write a null value for property '{0}'. Property requires a value.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName)' null); " is 214.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,WriteObjectStart,The length of the statement  "            bool isReference = ResolveIsReference(contract' member' collectionContract' containerProperty) ?? HasFlag(Serializer._preserveReferencesHandling' PreserveReferencesHandling.Objects); " is 182.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,WriteReferenceIdProperty,The length of the statement  "                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' "Writing object reference Id '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture' reference' type))' null); " is 195.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,WriteTypeProperty,The length of the statement  "                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' "Writing type name '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture' typeName' type))' null); " is 184.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeConvertable,The length of the statement  "                    TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Started serializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture' value.GetType()' converter.GetType()))' null); " is 214.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeConvertable,The length of the statement  "                    TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Finished serializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture' value.GetType()' converter.GetType()))' null); " is 215.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeList,The length of the statement  "            bool hasWrittenMetadataObject = WriteStartArray(writer' underlyingList' contract' member' collectionContract' containerProperty); " is 129.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,The length of the statement  "            bool hasWrittenMetadataObject = WriteStartArray(writer' values' contract' member' collectionContract' containerProperty); " is 121.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,WriteStartArray,The length of the statement  "            bool isReference = ResolveIsReference(contract' member' containerContract' containerProperty) ?? HasFlag(Serializer._preserveReferencesHandling' PreserveReferencesHandling.Arrays); " is 180.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,WriteStartArray,The length of the statement  "            bool includeTypeDetails = ShouldWriteType(TypeNameHandling.Arrays' contract' member' containerContract' containerProperty); " is 123.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteDynamicProperty,The length of the statement  "                (memberValue == null || MiscellaneousUtils.ValueEquals(memberValue' ReflectionUtils.GetDefaultValue(memberValue.GetType())))) " is 125.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteType,The length of the statement  "            // instance type and the property's type's contract default type are different (no need to put the type in JSON because the type will be created by default) " is 156.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "                if (primitiveContract.TypeCode == PrimitiveTypeCode.DateTime || primitiveContract.TypeCode == PrimitiveTypeCode.DateTimeNullable) " is 129.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "                    DateTimeUtils.WriteDateTimeString(sw' (DateTime)name' writer.DateFormatHandling' writer.DateFormatString' writer.Culture); " is 122.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "                else if (primitiveContract.TypeCode == PrimitiveTypeCode.DateTimeOffset || primitiveContract.TypeCode == PrimitiveTypeCode.DateTimeOffsetNullable) " is 146.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "                    DateTimeUtils.WriteDateTimeOffsetString(sw' (DateTimeOffset)name' writer.DateFormatHandling' writer.DateFormatString' writer.Culture); " is 134.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,ShouldSerialize,The length of the statement  "                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' "ShouldSerialize result for property '{0}' on {1}: {2}".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType' shouldSerialize))' null); " is 253.
Long Statement,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,IsSpecified,The length of the statement  "                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' "IsSpecified result for property '{0}' on {1}: {2}".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType' isSpecified))' null); " is 245.
Long Statement,Newtonsoft.Json.Serialization,JsonTypeReflector,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonTypeReflector.cs,GetJsonConverterCreator,The length of the statement  "                            throw new JsonException("No matching parameterized constructor found for '{0}'.".FormatWith(CultureInfo.InvariantCulture' converterType)); " is 138.
Long Statement,Newtonsoft.Json.Serialization,JsonTypeReflector,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonTypeReflector.cs,GetJsonConverterCreator,The length of the statement  "                        throw new JsonException("No parameterless constructor defined for '{0}'.".FormatWith(CultureInfo.InvariantCulture' converterType)); " is 131.
Long Statement,Newtonsoft.Json.Serialization,ReflectionValueProvider,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\ReflectionValueProvider.cs,SetValue,The length of the statement  "                throw new JsonSerializationException("Error setting value to '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 160.
Long Statement,Newtonsoft.Json.Serialization,ReflectionValueProvider,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\ReflectionValueProvider.cs,GetValue,The length of the statement  "                throw new JsonSerializationException("Error getting value from '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 162.
Long Statement,Newtonsoft.Json.Serialization,MemoryTraceWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\MemoryTraceWriter.cs,Trace,The length of the statement  "            string traceMessage = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff"' CultureInfo.InvariantCulture) + " " + level.ToString("g") + " " + message; " is 157.
Long Statement,Newtonsoft.Json.Utilities,CollectionWrapper<T>,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\CollectionWrapper.cs,VerifyValueType,The length of the statement  "                throw new ArgumentException("The value '{0}' is not of type '{1}' and cannot be used in this generic collection.".FormatWith(CultureInfo.InvariantCulture' value' typeof(T))' "value"); " is 183.
Long Statement,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,IsConvertible,The length of the statement  "        t == typeof(bool) || t == typeof(byte) || t == typeof(char) || t == typeof(DateTime) || t == typeof(decimal) || t == typeof(double) || t == typeof(short) || t == typeof(int) || " is 176.
Long Statement,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,IsConvertible,The length of the statement  "        t == typeof(long) || t == typeof(sbyte) || t == typeof(float) || t == typeof(string) || t == typeof(ushort) || t == typeof(uint) || t == typeof(ulong) || t.IsEnum()); " is 166.
Long Statement,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,ToBigInteger,The length of the statement  "            throw new InvalidCastException("Cannot convert {0} to BigInteger.".FormatWith(CultureInfo.InvariantCulture' value.GetType())); " is 126.
Long Statement,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,FromBigInteger,The length of the statement  "                throw new InvalidOperationException("Can not convert from BigInteger to {0}.".FormatWith(CultureInfo.InvariantCulture' targetType)' ex); " is 136.
Long Statement,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Convert,The length of the statement  "                    throw new Exception("Can not convert null {0} into non-nullable {1}.".FormatWith(CultureInfo.InvariantCulture' initialValue.GetType()' targetType)); " is 148.
Long Statement,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Convert,The length of the statement  "                    throw new ArgumentException("Target type {0} is not a value type or a non-abstract class.".FormatWith(CultureInfo.InvariantCulture' targetType)' "targetType"); " is 159.
Long Statement,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Convert,The length of the statement  "                    throw new InvalidOperationException("Can not convert from {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' initialValue.GetType()' targetType)); " is 149.
Long Statement,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,EnsureTypeAssignable,The length of the statement  "            throw new ArgumentException("Could not cast or convert from {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' (initialType != null) ? initialType.ToString() : "{null}"' targetType)); " is 186.
Long Statement,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,TryConvertGuid,The length of the statement  "                "^({)?[0xA-Fa-f0-9]{3'10}(' {0'1}[0xA-Fa-f0-9]{3'6}){2}' {0'1}({)([0xA-Fa-f0-9]{3'4}' {0'1}){7}[0xA-Fa-f0-9]{3'4}(}})$"); " is 121.
Long Statement,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateIso,The length of the statement  "            DateTime d = new DateTime(dateTimeParser.Year' dateTimeParser.Month' dateTimeParser.Day' dateTimeParser.Hour' dateTimeParser.Minute' dateTimeParser.Second); " is 156.
Long Statement,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeOffsetString,The length of the statement  "                int pos = WriteDateTimeString(chars' 0' (format == DateFormatHandling.IsoDateFormat) ? value.DateTime : value.UtcDateTime' value.Offset' DateTimeKind.Local' format); " is 165.
Long Statement,Newtonsoft.Json.Utilities,DictionaryWrapper<TKey;TValue>,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DictionaryWrapper.cs,GetEnumerator,The length of the statement  "                return _dictionary.Cast<DictionaryEntry>().Select(de => new KeyValuePair<TKey' TValue>((TKey)de.Key' (TValue)de.Value)).GetEnumerator(); " is 136.
Long Statement,Newtonsoft.Json.Utilities,DynamicProxyMetaObject<T>,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicProxyMetaObject.cs,BindCreateInstance,The length of the statement  "                ? CallMethodWithResult("TryCreateInstance"' binder' GetArgArray(args)' e => binder.FallbackCreateInstance(this' args' e)) " is 121.
Long Statement,Newtonsoft.Json.Utilities,DynamicProxyMetaObject<T>,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicProxyMetaObject.cs,BindSetIndex,The length of the statement  "                ? CallMethodReturnLast("TrySetIndex"' binder' GetArgArray(indexes' value)' e => binder.FallbackSetIndex(this' indexes' value' e)) " is 129.
Long Statement,Newtonsoft.Json.Utilities,BinderWrapper,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicUtils.cs,Init,The length of the statement  "                        throw new InvalidOperationException("Could not resolve type '{0}'. You may need to add a reference to Microsoft.CSharp.dll to work with dynamic types.".FormatWith(CultureInfo.InvariantCulture' BinderTypeName)); " is 210.
Long Statement,Newtonsoft.Json.Utilities,BinderWrapper,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicUtils.cs,CreateSharpArgumentInfoArray,The length of the statement  "                    MethodInfo createArgumentInfoMethod = csharpArgumentInfoType.GetMethod("Create"' new[] { csharpArgumentInfoFlags' typeof(string) }); " is 132.
Long Statement,Newtonsoft.Json.Utilities,BinderWrapper,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicUtils.cs,CreateMemberCalls,The length of the statement  "                MethodInfo getMemberMethod = binderType.GetMethod("GetMember"' new[] { csharpBinderFlagsType' typeof(string)' typeof(Type)' csharpArgumentInfoTypeEnumerableType }); " is 164.
Long Statement,Newtonsoft.Json.Utilities,BinderWrapper,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicUtils.cs,CreateMemberCalls,The length of the statement  "                MethodInfo setMemberMethod = binderType.GetMethod("SetMember"' new[] { csharpBinderFlagsType' typeof(string)' typeof(Type)' csharpArgumentInfoTypeEnumerableType }); " is 164.
Long Statement,Newtonsoft.Json.Utilities,EnumUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\EnumUtils.cs,GetNamesAndValues,The length of the statement  "                    nameValues.Add(new EnumValue<TUnderlyingType>(enumNames[i]' (TUnderlyingType)Convert.ChangeType(enumValues[i]' typeof(TUnderlyingType)' CultureInfo.CurrentCulture))); " is 166.
Long Statement,Newtonsoft.Json.Utilities,EnumUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\EnumUtils.cs,GetNamesAndValues,The length of the statement  "                        string.Format(CultureInfo.InvariantCulture' "Value from enum with the underlying type of {0} cannot be added to dictionary with a value type of {1}. Value was too large: {2}"' " is 175.
Long Statement,Newtonsoft.Json.Utilities,EnumUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\EnumUtils.cs,GetNamesAndValues,The length of the statement  "                            Enum.GetUnderlyingType(enumType)' typeof(TUnderlyingType)' Convert.ToUInt64(enumValues[i]' CultureInfo.InvariantCulture))' e); " is 126.
Long Statement,Newtonsoft.Json.Utilities,ExpressionReflectionDelegateFactory,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ExpressionReflectionDelegateFactory.cs,CreateParametrizedConstructor,The length of the statement  "            LambdaExpression lambdaExpression = Expression.Lambda(typeof(ObjectConstructor<object>)' callExpression' argsParameterExpression); " is 130.
Long Statement,Newtonsoft.Json.Utilities,ExpressionReflectionDelegateFactory,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ExpressionReflectionDelegateFactory.cs,CreateMethodCall,The length of the statement  "            LambdaExpression lambdaExpression = Expression.Lambda(typeof(MethodCall<T' object>)' callExpression' targetParameterExpression' argsParameterExpression); " is 153.
Long Statement,Newtonsoft.Json.Utilities,ExpressionReflectionDelegateFactory,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ExpressionReflectionDelegateFactory.cs,CreateSet,The length of the statement  "            LambdaExpression lambdaExpression = Expression.Lambda(typeof(Action<T' object>)' assignExpression' sourceParameterExpression' valueParameterExpression); " is 152.
Long Statement,Newtonsoft.Json.Utilities,ExpressionReflectionDelegateFactory,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ExpressionReflectionDelegateFactory.cs,CreateSet,The length of the statement  "            LambdaExpression lambdaExpression = Expression.Lambda(typeof(Action<T' object>)' setExpression' instanceParameter' valueParameter); " is 131.
Long Statement,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForArrayContract,The length of the statement  "                ImmutableCollectionTypeInfo definition = ArrayContractImmutableCollectionDefinitions.FirstOrDefault(d => d.ContractTypeName == name); " is 133.
Long Statement,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForArrayContract,The length of the statement  "                        MethodInfo mb = builderTypeDefinition.GetMethods().FirstOrDefault(m => m.Name == "CreateRange" && m.GetParameters().Length == 1); " is 129.
Long Statement,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForDictionaryContract,The length of the statement  "                ImmutableCollectionTypeInfo definition = DictionaryContractImmutableCollectionDefinitions.FirstOrDefault(d => d.ContractTypeName == name); " is 138.
Long Statement,Newtonsoft.Json.Utilities,ImmutableCollectionsUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForDictionaryContract,The length of the statement  "                            return m.Name == "CreateRange" && parameters.Length == 1 && parameters[0].ParameterType.IsGenericType() && parameters[0].ParameterType.GetGenericTypeDefinition() == typeof(IEnumerable<>); " is 187.
Long Statement,Newtonsoft.Json.Utilities,MiscellaneousUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MiscellaneousUtils.cs,ValueEquals,The length of the statement  "                    return MathUtils.ApproxEquals(Convert.ToDouble(objA' CultureInfo.CurrentCulture)' Convert.ToDouble(objB' CultureInfo.CurrentCulture)); " is 134.
Long Statement,Newtonsoft.Json.Utilities,MiscellaneousUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MiscellaneousUtils.cs,CreateArgumentOutOfRangeException,The length of the statement  "            string newMessage = message + Environment.NewLine + @"Actual value was {0}.".FormatWith(CultureInfo.InvariantCulture' actualValue); " is 131.
Long Statement,Newtonsoft.Json.Utilities,ReflectionObject,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionObject.cs,Create,The length of the statement  "                    throw new ArgumentException("Expected a single member with the name '{0}'.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 130.
Long Statement,Newtonsoft.Json.Utilities,ReflectionObject,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionObject.cs,Create,The length of the statement  "                        throw new ArgumentException("Unexpected member type '{0}' for member '{1}'.".FormatWith(CultureInfo.InvariantCulture' member.MemberType()' member.Name)); " is 153.
Long Statement,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,ImplementsGenericDefinition,The length of the statement  "                throw new ArgumentNullException("'{0}' is not a generic interface definition.".FormatWith(CultureInfo.InvariantCulture' genericInterfaceDefinition)); " is 149.
Long Statement,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,InheritsGenericDefinition,The length of the statement  "                throw new ArgumentNullException("'{0}' is not a generic class definition.".FormatWith(CultureInfo.InvariantCulture' genericClassDefinition)); " is 141.
Long Statement,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,GetMemberValue,The length of the statement  "                        throw new ArgumentException("MemberInfo '{0}' has index parameters".FormatWith(CultureInfo.InvariantCulture' member.Name)' e); " is 126.
Long Statement,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,GetMemberValue,The length of the statement  "                    throw new ArgumentException("MemberInfo '{0}' is not of type FieldInfo or PropertyInfo".FormatWith(CultureInfo.InvariantCulture' CultureInfo.InvariantCulture' member.Name)' "member"); " is 183.
Long Statement,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,SetMemberValue,The length of the statement  "                    throw new ArgumentException("MemberInfo '{0}' must be of type FieldInfo or PropertyInfo".FormatWith(CultureInfo.InvariantCulture' member.Name)' "member"); " is 154.
Long Statement,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,GetFieldsAndProperties,The length of the statement  "            // http://social.msdn.microsoft.com/Forums/en-US/b5abbfee-e292-4a64-8907-4e3f0fb90cd9/reflection-overriden-abstract-generic-properties?forum=netfxbcl " is 149.
Long Statement,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,SplitFullyQualifiedTypeName,The length of the statement  "                assemblyName = fullyQualifiedTypeName.Substring(assemblyDelimiterIndex.Value + 1' fullyQualifiedTypeName.Length - assemblyDelimiterIndex.Value - 1).Trim(); " is 155.
Long Statement,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,GetAssemblyDelimiterIndex,The length of the statement  "            // e.g. System.Collections.Generic.Dictionary`2[[System.String' mscorlib'Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]'[System.String' mscorlib' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]]' mscorlib' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089 " is 310.
Long Statement,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,GetMemberInfoFromType,The length of the statement  "            const BindingFlags bindingAttr = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 124.
Long Statement,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,ForgivingCaseSensitiveFind,The length of the statement  "            var caseInsensitiveResults = source.Where(s => string.Equals(valueSelector(s)' testValue' StringComparison.OrdinalIgnoreCase)); " is 127.
Long Statement,Newtonsoft.Json.Utilities,TypeExtensions,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\TypeExtensions.cs,GetMember,The length of the statement  "            return type.GetTypeInfo().GetMembersRecursive().Where(m => m.Name == member && TestAccessibility(m' bindingFlags)).ToArray(); " is 125.
Long Statement,Newtonsoft.Json.Utilities,ValidationUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ValidationUtils.cs,ArgumentNotNullOrEmpty,The length of the statement  "                throw new ArgumentException("'{0}' cannot be empty.".FormatWith(CultureInfo.InvariantCulture' parameterName)' parameterName); " is 125.
Long Statement,Newtonsoft.Json.Utilities,ValidationUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ValidationUtils.cs,ArgumentTypeIsEnum,The length of the statement  "                throw new ArgumentException("Type {0} is not an Enum.".FormatWith(CultureInfo.InvariantCulture' enumType)' parameterName); " is 122.
Complex Conditional,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,EnsureDecimalPlace,The conditional expression  "double.IsNaN(value) || double.IsInfinity(value) || text.IndexOf('.') != -1 || text.IndexOf('E') != -1 || text.IndexOf('e') != -1"  is complex.
Complex Conditional,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadNumberIntoBuffer,The conditional expression  "char.IsWhiteSpace(currentChar)                              || currentChar == '''                              || currentChar == '}'                              || currentChar == ']'                              || currentChar == ')'                              || currentChar == '/'"  is complex.
Complex Conditional,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,ProcessValue,The conditional expression  "currentSchema != null                          && currentSchema.PositionalItemsValidation                          && !currentSchema.AllowAdditionalItems                          && (currentSchema.Items == null || _currentScope.ArrayItemCount - 1 >= currentSchema.Items.Count)"  is complex.
Complex Conditional,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,AutoComplete,The conditional expression  "(_currentState == State.Object || _currentState == State.Array || _currentState == State.Constructor) && tokenBeingWritten != JsonToken.Comment"  is complex.
Complex Conditional,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,AutoComplete,The conditional expression  "(_currentState == State.Array || _currentState == State.ArrayStart || _currentState == State.Constructor || _currentState == State.ConstructorStart)                      || (tokenBeingWritten == JsonToken.PropertyName && _currentState != State.Start)"  is complex.
Complex Conditional,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,ReadElement,The conditional expression  "reader.TokenType == JsonToken.String                      || reader.TokenType == JsonToken.Integer                      || reader.TokenType == JsonToken.Float                      || reader.TokenType == JsonToken.Boolean                      || reader.TokenType == JsonToken.Date"  is complex.
Complex Conditional,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,ReadAttributeElements,The conditional expression  "reader.TokenType != JsonToken.String                  && reader.TokenType != JsonToken.Null                  && reader.TokenType != JsonToken.Boolean                  && reader.TokenType != JsonToken.Integer                  && reader.TokenType != JsonToken.Float                  && reader.TokenType != JsonToken.Date                  && reader.TokenType != JsonToken.StartConstructor"  is complex.
Complex Conditional,Newtonsoft.Json.Linq,JContainer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JContainer.cs,EnsureParentToken,The conditional expression  "item.Parent != null || item == this || (item.HasValues && Root == item)"  is complex.
Complex Conditional,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Compare,The conditional expression  "objA is ulong || objB is ulong || objA is decimal || objB is decimal"  is complex.
Complex Conditional,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Compare,The conditional expression  "objA is float || objB is float || objA is double || objB is double"  is complex.
Complex Conditional,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The conditional expression  "objA is ulong || objB is ulong || objA is decimal || objB is decimal"  is complex.
Complex Conditional,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The conditional expression  "objA is float || objB is float || objA is double || objB is double"  is complex.
Complex Conditional,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The conditional expression  "objA is int || objA is uint || objA is long || objA is short || objA is ushort || objA is sbyte || objA is byte ||                           objB is int || objB is uint || objB is long || objB is short || objB is ushort || objB is sbyte || objB is byte"  is complex.
Complex Conditional,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,GetValueType,The conditional expression  "value is long || value is int || value is short || value is sbyte                       || value is ulong || value is uint || value is ushort || value is byte"  is complex.
Complex Conditional,Newtonsoft.Json.Linq.JsonPath,JPath,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JsonPath\JPath.cs,ParsePath,The conditional expression  "query && (currentChar == '=' || currentChar == '<' || currentChar == '!' || currentChar == '>' || currentChar == '|' || currentChar == '&')"  is complex.
Complex Conditional,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The conditional expression  "parameters == null || parameters.Length != 2 || parameters[0].ParameterType != typeof(StreamingContext) || parameters[1].ParameterType != typeof(ErrorContext)"  is complex.
Complex Conditional,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateValueInternal,The conditional expression  "string.IsNullOrEmpty(s) && objectType != typeof(string) && objectType != typeof(object) && contract != null && contract.IsNullable"  is complex.
Complex Conditional,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The conditional expression  "(objectCreationHandling != ObjectCreationHandling.Replace)                  && (tokenType == JsonToken.StartArray || tokenType == JsonToken.StartObject)                  && property.Readable"  is complex.
Complex Conditional,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The conditional expression  "HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Ignore)                  && !HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate)                  && JsonReader.IsPrimitiveToken(tokenType)                  && MiscellaneousUtils.ValueEquals(reader.Value' property.GetResolvedDefaultValue())"  is complex.
Complex Conditional,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The conditional expression  "objectContract.DefaultCreator != null &&                       (!objectContract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor || objectContract.ParametrizedCreator == null)"  is complex.
Complex Conditional,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The conditional expression  "!property.Ignored && property.Readable && ShouldSerialize(writer' property' value) && IsSpecified(writer' property' value)"  is complex.
Complex Conditional,Newtonsoft.Json.Utilities,CollectionWrapper<T>,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\CollectionWrapper.cs,IsCompatibleObject,The conditional expression  "!(value is T) && (value != null || (typeof(T).IsValueType() && !ReflectionUtils.IsNullableType(typeof(T))))"  is complex.
Complex Conditional,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseTime,The conditional expression  "!(Parse2Digit(start' out Hour)                    && Hour < 24                    && ParseChar(start + LzHH' ':')                    && Parse2Digit(start + LzHH_' out Minute)                    && Minute < 60                    && ParseChar(start + LzHH_mm' ':')                    && Parse2Digit(start + LzHH_mm_' out Second)                    && Second < 60)"  is complex.
Complex Conditional,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The conditional expression  "0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10"  is complex.
Complex Conditional,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse2Digit,The conditional expression  "0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10"  is complex.
Complex Conditional,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateTime,The conditional expression  "s.Length >= 19 && s.Length <= 40 && char.IsDigit(s[0]) && s[10] == 'T'"  is complex.
Complex Conditional,Newtonsoft.Json.Utilities,MiscellaneousUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MiscellaneousUtils.cs,ValueEquals,The conditional expression  "(objA is double || objA is float || objA is decimal) && (objB is double || objB is float || objB is decimal)"  is complex.
Virtual Method Call from Constructor,Newtonsoft.Json.Linq,JArray,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JArray.cs,JArray,The constructor "JArray" calls a virtual method "Add".
Virtual Method Call from Constructor,Newtonsoft.Json.Linq,JConstructor,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JConstructor.cs,JConstructor,The constructor "JConstructor" calls a virtual method "Add".
Virtual Method Call from Constructor,Newtonsoft.Json.Linq,JObject,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JObject.cs,JObject,The constructor "JObject" calls a virtual method "Add".
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                      _writer.Write(value.CalculatedSize);                      foreach (BsonProperty property in value)                      {                          _writer.Write((sbyte)property.Value.Type);                          WriteString((string)property.Name.Value' property.Name.ByteCount' null);                          WriteTokenInternal(property.Value);                      }                      _writer.Write((byte)0);                  }                      break;                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                      _writer.Write(value.CalculatedSize);                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          _writer.Write((sbyte)c.Type);                          WriteString(index.ToString(CultureInfo.InvariantCulture)' MathUtils.IntLength(index)' null);                          WriteTokenInternal(c);                          index++;                      }                      _writer.Write((byte)0);                  }                      break;                  case BsonType.Integer:                  {                      BsonValue value = (BsonValue)t;                      _writer.Write(Convert.ToInt32(value.Value' CultureInfo.InvariantCulture));                  }                      break;                  case BsonType.Long:                  {                      BsonValue value = (BsonValue)t;                      _writer.Write(Convert.ToInt64(value.Value' CultureInfo.InvariantCulture));                  }                      break;                  case BsonType.Number:                  {                      BsonValue value = (BsonValue)t;                      _writer.Write(Convert.ToDouble(value.Value' CultureInfo.InvariantCulture));                  }                      break;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      WriteString((string)value.Value' value.ByteCount' value.CalculatedSize - 4);                  }                      break;                  case BsonType.Boolean:                  {                      BsonValue value = (BsonValue)t;                      _writer.Write((bool)value.Value);                  }                      break;                  case BsonType.Null:                  case BsonType.Undefined:                      break;                  case BsonType.Date:                  {                      BsonValue value = (BsonValue)t;                        long ticks = 0;                        if (value.Value is DateTime)                      {                          DateTime dateTime = (DateTime)value.Value;                          if (DateTimeKindHandling == DateTimeKind.Utc)                              dateTime = dateTime.ToUniversalTime();                          else if (DateTimeKindHandling == DateTimeKind.Local)                              dateTime = dateTime.ToLocalTime();                            ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTime' false);                      }  #if !NET20                      else                      {                          DateTimeOffset dateTimeOffset = (DateTimeOffset)value.Value;                          ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTimeOffset.UtcDateTime' dateTimeOffset.Offset);                      }  #endif                        _writer.Write(ticks);                  }                      break;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      _writer.Write(data.Length);                      _writer.Write((byte)value.BinaryType);                      _writer.Write(data);                  }                      break;                  case BsonType.Oid:                  {                      BsonValue value = (BsonValue)t;                        byte[] data = (byte[])value.Value;                      _writer.Write(data);                  }                      break;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                        WriteString((string)value.Pattern.Value' value.Pattern.ByteCount' null);                      WriteString((string)value.Options.Value' value.Options.ByteCount' null);                  }                      break;                  default:                      throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,WriteUtf8Bytes,The following statement contains a magic number: if (s != null)              {                  if (_largeByteBuffer == null)                  {                      _largeByteBuffer = new byte[256];                  }                  if (byteCount <= 256)                  {                      Encoding.GetBytes(s' 0' s.Length' _largeByteBuffer' 0);                      _writer.Write(_largeByteBuffer' 0' byteCount);                  }                  else                  {                      byte[] bytes = Encoding.GetBytes(s);                      _writer.Write(bytes);                  }              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,WriteUtf8Bytes,The following statement contains a magic number: if (s != null)              {                  if (_largeByteBuffer == null)                  {                      _largeByteBuffer = new byte[256];                  }                  if (byteCount <= 256)                  {                      Encoding.GetBytes(s' 0' s.Length' _largeByteBuffer' 0);                      _writer.Write(_largeByteBuffer' 0' byteCount);                  }                  else                  {                      byte[] bytes = Encoding.GetBytes(s);                      _writer.Write(bytes);                  }              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSizeWithLength,The following statement contains a magic number: int baseSize = (includeSize)                  ? 5 // size bytes + terminator                  : 1;
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Newtonsoft.Json.Bson,BsonBinaryWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException("t"' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Newtonsoft.Json.Bson,BsonObjectId,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonObjectId.cs,BsonObjectId,The following statement contains a magic number: if (value.Length != 12)                  throw new ArgumentException("An ObjectId must be 12 bytes"' "value");
Magic Number,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,ReadReference,The following statement contains a magic number: switch (CurrentState)              {                  case State.ObjectStart:                  {                      SetToken(JsonToken.PropertyName' JsonTypeReflector.RefPropertyName);                      _bsonReaderState = BsonReaderState.ReferenceRef;                      return true;                  }                  case State.Property:                  {                      if (_bsonReaderState == BsonReaderState.ReferenceRef)                      {                          SetToken(JsonToken.String' ReadLengthString());                          return true;                      }                      else if (_bsonReaderState == BsonReaderState.ReferenceId)                      {                          SetToken(JsonToken.Bytes' ReadBytes(12));                          return true;                      }                      else                      {                          throw JsonReaderException.Create(this' "Unexpected state when reading BSON reference: " + _bsonReaderState);                      }                  }                  case State.PostValue:                  {                      if (_bsonReaderState == BsonReaderState.ReferenceRef)                      {                          SetToken(JsonToken.PropertyName' JsonTypeReflector.IdPropertyName);                          _bsonReaderState = BsonReaderState.ReferenceId;                          return true;                      }                      else if (_bsonReaderState == BsonReaderState.ReferenceId)                      {                          SetToken(JsonToken.EndObject);                          _bsonReaderState = BsonReaderState.Normal;                          return true;                      }                      else                      {                          throw JsonReaderException.Create(this' "Unexpected state when reading BSON reference: " + _bsonReaderState);                      }                  }                  default:                      throw JsonReaderException.Create(this' "Unexpected state when reading BSON reference: " + CurrentState);              }
Magic Number,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,ReadType,The following statement contains a magic number: switch (type)              {                  case BsonType.Number:                      double d = ReadDouble();                        if (_floatParseHandling == FloatParseHandling.Decimal)                          SetToken(JsonToken.Float' Convert.ToDecimal(d' CultureInfo.InvariantCulture));                      else                          SetToken(JsonToken.Float' d);                      break;                  case BsonType.String:                  case BsonType.Symbol:                      SetToken(JsonToken.String' ReadLengthString());                      break;                  case BsonType.Object:                  {                      SetToken(JsonToken.StartObject);                        ContainerContext newContext = new ContainerContext(BsonType.Object);                      PushContext(newContext);                      newContext.Length = ReadInt32();                      break;                  }                  case BsonType.Array:                  {                      SetToken(JsonToken.StartArray);                        ContainerContext newContext = new ContainerContext(BsonType.Array);                      PushContext(newContext);                      newContext.Length = ReadInt32();                      break;                  }                  case BsonType.Binary:                      BsonBinaryType binaryType;                      byte[] data = ReadBinary(out binaryType);                        object value = (binaryType != BsonBinaryType.Uuid)                          ? data                          : (object)new Guid(data);                        SetToken(JsonToken.Bytes' value);                      break;                  case BsonType.Undefined:                      SetToken(JsonToken.Undefined);                      break;                  case BsonType.Oid:                      byte[] oid = ReadBytes(12);                      SetToken(JsonToken.Bytes' oid);                      break;                  case BsonType.Boolean:                      bool b = Convert.ToBoolean(ReadByte());                      SetToken(JsonToken.Boolean' b);                      break;                  case BsonType.Date:                      long ticks = ReadInt64();                      DateTime utcDateTime = DateTimeUtils.ConvertJavaScriptTicksToDateTime(ticks);                        DateTime dateTime;                      switch (DateTimeKindHandling)                      {                          case DateTimeKind.Unspecified:                              dateTime = DateTime.SpecifyKind(utcDateTime' DateTimeKind.Unspecified);                              break;                          case DateTimeKind.Local:                              dateTime = utcDateTime.ToLocalTime();                              break;                          default:                              dateTime = utcDateTime;                              break;                      }                        SetToken(JsonToken.Date' dateTime);                      break;                  case BsonType.Null:                      SetToken(JsonToken.Null);                      break;                  case BsonType.Regex:                      string expression = ReadString();                      string modifiers = ReadString();                        string regex = @"/" + expression + @"/" + modifiers;                      SetToken(JsonToken.String' regex);                      break;                  case BsonType.Reference:                      SetToken(JsonToken.StartObject);                      _bsonReaderState = BsonReaderState.ReferenceStart;                      break;                  case BsonType.Code:                      SetToken(JsonToken.String' ReadLengthString());                      break;                  case BsonType.CodeWScope:                      SetToken(JsonToken.StartObject);                      _bsonReaderState = BsonReaderState.CodeWScopeStart;                      break;                  case BsonType.Integer:                      SetToken(JsonToken.Integer' (long)ReadInt32());                      break;                  case BsonType.TimeStamp:                  case BsonType.Long:                      SetToken(JsonToken.Integer' ReadInt64());                      break;                  default:                      throw new ArgumentOutOfRangeException("type"' "Unexpected BsonType value: " + type);              }
Magic Number,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,ReadString,The following statement contains a magic number: do              {                  int count = offset;                  byte b;                  while (count < MaxCharBytesSize && (b = _reader.ReadByte()) > 0)                  {                      _byteBuffer[count++] = b;                  }                  int byteCount = count - offset;                  totalBytesRead += byteCount;                    if (count < MaxCharBytesSize && builder == null)                  {                      // pref optimization to avoid reading into a string builder                      // if string is smaller than the buffer then return it directly                      int length = Encoding.UTF8.GetChars(_byteBuffer' 0' byteCount' _charBuffer' 0);                        MovePosition(totalBytesRead + 1);                      return new string(_charBuffer' 0' length);                  }                  else                  {                      // calculate the index of the end of the last full character in the buffer                      int lastFullCharStop = GetLastFullCharStop(count - 1);                        int charCount = Encoding.UTF8.GetChars(_byteBuffer' 0' lastFullCharStop + 1' _charBuffer' 0);                        if (builder == null)                          builder = new StringBuilder(MaxCharBytesSize * 2);                        builder.Append(_charBuffer' 0' charCount);                        if (lastFullCharStop < byteCount - 1)                      {                          offset = byteCount - lastFullCharStop - 1;                          // copy left over multi byte characters to beginning of buffer for next iteration                          Array.Copy(_byteBuffer' lastFullCharStop + 1' _byteBuffer' 0' offset);                      }                      else                      {                          // reached end of string                          if (count < MaxCharBytesSize)                          {                              MovePosition(totalBytesRead + 1);                              return builder.ToString();                          }                            offset = 0;                      }                  }              } while (true);
Magic Number,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: if (b >= SeqRange2[0] && b <= SeqRange2[1]) return 2;
Magic Number,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: if (b >= SeqRange3[0] && b <= SeqRange3[1]) return 3;
Magic Number,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: if (b >= SeqRange4[0] && b <= SeqRange4[1]) return 4;
Magic Number,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,ReadDouble,The following statement contains a magic number: MovePosition(8);
Magic Number,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,ReadInt32,The following statement contains a magic number: MovePosition(4);
Magic Number,Newtonsoft.Json.Bson,BsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonReader.cs,ReadInt64,The following statement contains a magic number: MovePosition(8);
Magic Number,Newtonsoft.Json.Bson,BsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Bson\BsonWriter.cs,WriteObjectId,The following statement contains a magic number: if (value.Length != 12)                  throw JsonWriterException.Create(this' "An object id must be 12 bytes"' null);
Magic Number,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,ToString,The following statement contains a magic number: using (StringWriter writer = StringUtils.CreateStringWriter(64))              {                  writer.Write('"');                  DateTimeUtils.WriteDateTimeString(writer' updatedDateTime' format' null' CultureInfo.InvariantCulture);                  writer.Write('"');                  return writer.ToString();              }
Magic Number,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,ToString,The following statement contains a magic number: using (StringWriter writer = StringUtils.CreateStringWriter(64))              {                  writer.Write('"');                  DateTimeUtils.WriteDateTimeOffsetString(writer' value' format' null' CultureInfo.InvariantCulture);                  writer.Write('"');                  return writer.ToString();              }
Magic Number,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,SerializeObjectInternal,The following statement contains a magic number: StringBuilder sb = new StringBuilder(256);
Magic Number,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,JsonReader,The following statement contains a magic number: _stack = new List<JsonPosition>(4);
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,JsonTextReader,The following statement contains a magic number: _chars = new char[1025];
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,GetBuffer,The following statement contains a magic number: if (_buffer == null)              {                  _buffer = new StringBuffer(1025);              }              else              {                  _buffer.Position = 0;              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,BlockCopyChars,The following statement contains a magic number: const int charByteCount = 2;
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ShiftBufferIfNeeded,The following statement contains a magic number: if (length - _charPos <= length * 0.1)              {                  int count = _charsUsed - _charPos;                  if (count > 0)                      BlockCopyChars(_chars' _charPos' _chars' 0' count);                    _lineStartPos -= _charPos;                  _charPos = 0;                  _charsUsed = count;                  _chars[_charsUsed] = '\0';              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadData,The following statement contains a magic number: if (_charsUsed + charsRequired >= _chars.Length - 1)              {                  if (append)                  {                      // copy to new array either double the size of the current or big enough to fit required content                      int newArrayLength = Math.Max(_chars.Length * 2' _charsUsed + charsRequired + 1);                        // increase the size of the buffer                      char[] dst = new char[newArrayLength];                        BlockCopyChars(_chars' 0' dst' 0' _chars.Length);                        _chars = dst;                  }                  else                  {                      int remainingCharCount = _charsUsed - _charPos;                        if (remainingCharCount + charsRequired + 1 >= _chars.Length)                      {                          // the remaining count plus the required is bigger than the current buffer size                          char[] dst = new char[remainingCharCount + charsRequired + 1];                            if (remainingCharCount > 0)                              BlockCopyChars(_chars' _charPos' dst' 0' remainingCharCount);                            _chars = dst;                      }                      else                      {                          // copy any remaining data to the beginning of the buffer if needed and reset positions                          if (remainingCharCount > 0)                              BlockCopyChars(_chars' _charPos' _chars' 0' remainingCharCount);                      }                        _lineStartPos -= _charPos;                      _charPos = 0;                      _charsUsed = remainingCharCount;                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: while (true)              {                  switch (_chars[charPos++])                  {                      case '\0':                          if (_charsUsed == charPos - 1)                          {                              charPos--;                                if (ReadData(true) == 0)                              {                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                              }                          }                          break;                      case '\\':                          _charPos = charPos;                          if (!EnsureChars(0' true))                          {                              _charPos = charPos;                              throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                          }                            // start of escape sequence                          int escapeStartPos = charPos - 1;                            char currentChar = _chars[charPos];                            char writeChar;                            switch (currentChar)                          {                              case 'b':                                  charPos++;                                  writeChar = '\b';                                  break;                              case 't':                                  charPos++;                                  writeChar = '\t';                                  break;                              case 'n':                                  charPos++;                                  writeChar = '\n';                                  break;                              case 'f':                                  charPos++;                                  writeChar = '\f';                                  break;                              case 'r':                                  charPos++;                                  writeChar = '\r';                                  break;                              case '\\':                                  charPos++;                                  writeChar = '\\';                                  break;                              case '"':                              case '\'':                              case '/':                                  writeChar = currentChar;                                  charPos++;                                  break;                              case 'u':                                  charPos++;                                  _charPos = charPos;                                  writeChar = ParseUnicode();                                    if (StringUtils.IsLowSurrogate(writeChar))                                  {                                      // low surrogate with no preceding high surrogate; this char is replaced                                      writeChar = UnicodeReplacementChar;                                  }                                  else if (StringUtils.IsHighSurrogate(writeChar))                                  {                                      bool anotherHighSurrogate;                                        // loop for handling situations where there are multiple consecutive high surrogates                                      do                                      {                                          anotherHighSurrogate = false;                                            // potential start of a surrogate pair                                          if (EnsureChars(2' true) && _chars[_charPos] == '\\' && _chars[_charPos + 1] == 'u')                                          {                                              char highSurrogate = writeChar;                                                _charPos += 2;                                              writeChar = ParseUnicode();                                                if (StringUtils.IsLowSurrogate(writeChar))                                              {                                                  // a valid surrogate pair!                                              }                                              else if (StringUtils.IsHighSurrogate(writeChar))                                              {                                                  // another high surrogate; replace current and start check over                                                  highSurrogate = UnicodeReplacementChar;                                                  anotherHighSurrogate = true;                                              }                                              else                                              {                                                  // high surrogate not followed by low surrogate; original char is replaced                                                  highSurrogate = UnicodeReplacementChar;                                              }                                                if (buffer == null)                                                  buffer = GetBuffer();                                                WriteCharToBuffer(buffer' highSurrogate' lastWritePosition' escapeStartPos);                                              lastWritePosition = _charPos;                                          }                                          else                                          {                                              // there are not enough remaining chars for the low surrogate or is not follow by unicode sequence                                              // replace high surrogate and continue on as usual                                              writeChar = UnicodeReplacementChar;                                          }                                      } while (anotherHighSurrogate);                                  }                                    charPos = _charPos;                                  break;                              default:                                  charPos++;                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture' @"\" + currentChar));                          }                            if (buffer == null)                              buffer = GetBuffer();                            WriteCharToBuffer(buffer' writeChar' lastWritePosition' escapeStartPos);                            lastWritePosition = charPos;                          break;                      case StringUtils.CarriageReturn:                          _charPos = charPos - 1;                          ProcessCarriageReturn(true);                          charPos = _charPos;                          break;                      case StringUtils.LineFeed:                          _charPos = charPos - 1;                          ProcessLineFeed();                          charPos = _charPos;                          break;                      case '"':                      case '\'':                          if (_chars[charPos - 1] == quote)                          {                              charPos--;                                if (initialPosition == lastWritePosition)                              {                                  _stringReference = new StringReference(_chars' initialPosition' charPos - initialPosition);                              }                              else                              {                                  if (buffer == null)                                      buffer = GetBuffer();                                    if (charPos > lastWritePosition)                                      buffer.Append(_chars' lastWritePosition' charPos - lastWritePosition);                                    _stringReference = new StringReference(buffer.GetInternalBuffer()' 0' buffer.Position);                              }                                charPos++;                              _charPos = charPos;                              return;                          }                          break;                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ReadStringIntoBuffer,The following statement contains a magic number: while (true)              {                  switch (_chars[charPos++])                  {                      case '\0':                          if (_charsUsed == charPos - 1)                          {                              charPos--;                                if (ReadData(true) == 0)                              {                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                              }                          }                          break;                      case '\\':                          _charPos = charPos;                          if (!EnsureChars(0' true))                          {                              _charPos = charPos;                              throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                          }                            // start of escape sequence                          int escapeStartPos = charPos - 1;                            char currentChar = _chars[charPos];                            char writeChar;                            switch (currentChar)                          {                              case 'b':                                  charPos++;                                  writeChar = '\b';                                  break;                              case 't':                                  charPos++;                                  writeChar = '\t';                                  break;                              case 'n':                                  charPos++;                                  writeChar = '\n';                                  break;                              case 'f':                                  charPos++;                                  writeChar = '\f';                                  break;                              case 'r':                                  charPos++;                                  writeChar = '\r';                                  break;                              case '\\':                                  charPos++;                                  writeChar = '\\';                                  break;                              case '"':                              case '\'':                              case '/':                                  writeChar = currentChar;                                  charPos++;                                  break;                              case 'u':                                  charPos++;                                  _charPos = charPos;                                  writeChar = ParseUnicode();                                    if (StringUtils.IsLowSurrogate(writeChar))                                  {                                      // low surrogate with no preceding high surrogate; this char is replaced                                      writeChar = UnicodeReplacementChar;                                  }                                  else if (StringUtils.IsHighSurrogate(writeChar))                                  {                                      bool anotherHighSurrogate;                                        // loop for handling situations where there are multiple consecutive high surrogates                                      do                                      {                                          anotherHighSurrogate = false;                                            // potential start of a surrogate pair                                          if (EnsureChars(2' true) && _chars[_charPos] == '\\' && _chars[_charPos + 1] == 'u')                                          {                                              char highSurrogate = writeChar;                                                _charPos += 2;                                              writeChar = ParseUnicode();                                                if (StringUtils.IsLowSurrogate(writeChar))                                              {                                                  // a valid surrogate pair!                                              }                                              else if (StringUtils.IsHighSurrogate(writeChar))                                              {                                                  // another high surrogate; replace current and start check over                                                  highSurrogate = UnicodeReplacementChar;                                                  anotherHighSurrogate = true;                                              }                                              else                                              {                                                  // high surrogate not followed by low surrogate; original char is replaced                                                  highSurrogate = UnicodeReplacementChar;                                              }                                                if (buffer == null)                                                  buffer = GetBuffer();                                                WriteCharToBuffer(buffer' highSurrogate' lastWritePosition' escapeStartPos);                                              lastWritePosition = _charPos;                                          }                                          else                                          {                                              // there are not enough remaining chars for the low surrogate or is not follow by unicode sequence                                              // replace high surrogate and continue on as usual                                              writeChar = UnicodeReplacementChar;                                          }                                      } while (anotherHighSurrogate);                                  }                                    charPos = _charPos;                                  break;                              default:                                  charPos++;                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture' @"\" + currentChar));                          }                            if (buffer == null)                              buffer = GetBuffer();                            WriteCharToBuffer(buffer' writeChar' lastWritePosition' escapeStartPos);                            lastWritePosition = charPos;                          break;                      case StringUtils.CarriageReturn:                          _charPos = charPos - 1;                          ProcessCarriageReturn(true);                          charPos = _charPos;                          break;                      case StringUtils.LineFeed:                          _charPos = charPos - 1;                          ProcessLineFeed();                          charPos = _charPos;                          break;                      case '"':                      case '\'':                          if (_chars[charPos - 1] == quote)                          {                              charPos--;                                if (initialPosition == lastWritePosition)                              {                                  _stringReference = new StringReference(_chars' initialPosition' charPos - initialPosition);                              }                              else                              {                                  if (buffer == null)                                      buffer = GetBuffer();                                    if (charPos > lastWritePosition)                                      buffer.Append(_chars' lastWritePosition' charPos - lastWritePosition);                                    _stringReference = new StringReference(buffer.GetInternalBuffer()' 0' buffer.Position);                              }                                charPos++;                              _charPos = charPos;                              return;                          }                          break;                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseUnicode,The following statement contains a magic number: if (EnsureChars(4' true))              {                  string hexValues = new string(_chars' _charPos' 4);                  char hexChar = Convert.ToChar(int.Parse(hexValues' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo));                  writeChar = hexChar;                    _charPos += 4;              }              else              {                  throw JsonReaderException.Create(this' "Unexpected end while parsing unicode character.");              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseUnicode,The following statement contains a magic number: if (EnsureChars(4' true))              {                  string hexValues = new string(_chars' _charPos' 4);                  char hexChar = Convert.ToChar(int.Parse(hexValues' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo));                  writeChar = hexChar;                    _charPos += 4;              }              else              {                  throw JsonReaderException.Create(this' "Unexpected end while parsing unicode character.");              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseUnicode,The following statement contains a magic number: if (EnsureChars(4' true))              {                  string hexValues = new string(_chars' _charPos' 4);                  char hexChar = Convert.ToChar(int.Parse(hexValues' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo));                  writeChar = hexChar;                    _charPos += 4;              }              else              {                  throw JsonReaderException.Create(this' "Unexpected end while parsing unicode character.");              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt32(number' 16)                              : Convert.ToInt32(number' 8);                            numberValue = integer;                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      int value;                      ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                          numberValue = value;                      else if (parseResult == ParseResult.Overflow)                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Integer;              }              else if (_readType == ReadType.ReadAsDecimal)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (decimal)firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          // decimal.Parse doesn't support parsing hexadecimal values                          long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                            numberValue = Convert.ToDecimal(integer);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      string number = _stringReference.ToString();                        decimal value;                      if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value))                          numberValue = value;                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Float;              }              else              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (long)firstChar - 48;                      numberType = JsonToken.Integer;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                        numberType = JsonToken.Integer;                  }                  else                  {                      long value;                      ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                      {                          numberValue = value;                          numberType = JsonToken.Integer;                      }                      else if (parseResult == ParseResult.Overflow)                      {  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                          string number = _stringReference.ToString();                            if (number.Length > MaximumJavascriptIntegerCharacterLength)                              throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                          numberType = JsonToken.Integer;  #else                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                      }                      else                      {                          string number = _stringReference.ToString();                            if (_floatParseHandling == FloatParseHandling.Decimal)                          {                              decimal d;                              if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number));                          }                          else                          {                              double d;                              if (double.TryParse(number' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number));                          }                            numberType = JsonToken.Float;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt32(number' 16)                              : Convert.ToInt32(number' 8);                            numberValue = integer;                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      int value;                      ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                          numberValue = value;                      else if (parseResult == ParseResult.Overflow)                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Integer;              }              else if (_readType == ReadType.ReadAsDecimal)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (decimal)firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          // decimal.Parse doesn't support parsing hexadecimal values                          long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                            numberValue = Convert.ToDecimal(integer);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      string number = _stringReference.ToString();                        decimal value;                      if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value))                          numberValue = value;                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Float;              }              else              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (long)firstChar - 48;                      numberType = JsonToken.Integer;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                        numberType = JsonToken.Integer;                  }                  else                  {                      long value;                      ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                      {                          numberValue = value;                          numberType = JsonToken.Integer;                      }                      else if (parseResult == ParseResult.Overflow)                      {  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                          string number = _stringReference.ToString();                            if (number.Length > MaximumJavascriptIntegerCharacterLength)                              throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                          numberType = JsonToken.Integer;  #else                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                      }                      else                      {                          string number = _stringReference.ToString();                            if (_floatParseHandling == FloatParseHandling.Decimal)                          {                              decimal d;                              if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number));                          }                          else                          {                              double d;                              if (double.TryParse(number' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number));                          }                            numberType = JsonToken.Float;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt32(number' 16)                              : Convert.ToInt32(number' 8);                            numberValue = integer;                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      int value;                      ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                          numberValue = value;                      else if (parseResult == ParseResult.Overflow)                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Integer;              }              else if (_readType == ReadType.ReadAsDecimal)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (decimal)firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          // decimal.Parse doesn't support parsing hexadecimal values                          long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                            numberValue = Convert.ToDecimal(integer);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      string number = _stringReference.ToString();                        decimal value;                      if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value))                          numberValue = value;                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Float;              }              else              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (long)firstChar - 48;                      numberType = JsonToken.Integer;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                        numberType = JsonToken.Integer;                  }                  else                  {                      long value;                      ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                      {                          numberValue = value;                          numberType = JsonToken.Integer;                      }                      else if (parseResult == ParseResult.Overflow)                      {  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                          string number = _stringReference.ToString();                            if (number.Length > MaximumJavascriptIntegerCharacterLength)                              throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                          numberType = JsonToken.Integer;  #else                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                      }                      else                      {                          string number = _stringReference.ToString();                            if (_floatParseHandling == FloatParseHandling.Decimal)                          {                              decimal d;                              if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number));                          }                          else                          {                              double d;                              if (double.TryParse(number' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number));                          }                            numberType = JsonToken.Float;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt32(number' 16)                              : Convert.ToInt32(number' 8);                            numberValue = integer;                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      int value;                      ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                          numberValue = value;                      else if (parseResult == ParseResult.Overflow)                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Integer;              }              else if (_readType == ReadType.ReadAsDecimal)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (decimal)firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          // decimal.Parse doesn't support parsing hexadecimal values                          long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                            numberValue = Convert.ToDecimal(integer);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      string number = _stringReference.ToString();                        decimal value;                      if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value))                          numberValue = value;                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Float;              }              else              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (long)firstChar - 48;                      numberType = JsonToken.Integer;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                        numberType = JsonToken.Integer;                  }                  else                  {                      long value;                      ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                      {                          numberValue = value;                          numberType = JsonToken.Integer;                      }                      else if (parseResult == ParseResult.Overflow)                      {  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                          string number = _stringReference.ToString();                            if (number.Length > MaximumJavascriptIntegerCharacterLength)                              throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                          numberType = JsonToken.Integer;  #else                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                      }                      else                      {                          string number = _stringReference.ToString();                            if (_floatParseHandling == FloatParseHandling.Decimal)                          {                              decimal d;                              if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number));                          }                          else                          {                              double d;                              if (double.TryParse(number' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number));                          }                            numberType = JsonToken.Float;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt32(number' 16)                              : Convert.ToInt32(number' 8);                            numberValue = integer;                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      int value;                      ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                          numberValue = value;                      else if (parseResult == ParseResult.Overflow)                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Integer;              }              else if (_readType == ReadType.ReadAsDecimal)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (decimal)firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          // decimal.Parse doesn't support parsing hexadecimal values                          long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                            numberValue = Convert.ToDecimal(integer);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      string number = _stringReference.ToString();                        decimal value;                      if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value))                          numberValue = value;                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Float;              }              else              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (long)firstChar - 48;                      numberType = JsonToken.Integer;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                        numberType = JsonToken.Integer;                  }                  else                  {                      long value;                      ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                      {                          numberValue = value;                          numberType = JsonToken.Integer;                      }                      else if (parseResult == ParseResult.Overflow)                      {  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                          string number = _stringReference.ToString();                            if (number.Length > MaximumJavascriptIntegerCharacterLength)                              throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                          numberType = JsonToken.Integer;  #else                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                      }                      else                      {                          string number = _stringReference.ToString();                            if (_floatParseHandling == FloatParseHandling.Decimal)                          {                              decimal d;                              if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number));                          }                          else                          {                              double d;                              if (double.TryParse(number' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number));                          }                            numberType = JsonToken.Float;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt32(number' 16)                              : Convert.ToInt32(number' 8);                            numberValue = integer;                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      int value;                      ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                          numberValue = value;                      else if (parseResult == ParseResult.Overflow)                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Integer;              }              else if (_readType == ReadType.ReadAsDecimal)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (decimal)firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          // decimal.Parse doesn't support parsing hexadecimal values                          long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                            numberValue = Convert.ToDecimal(integer);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      string number = _stringReference.ToString();                        decimal value;                      if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value))                          numberValue = value;                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Float;              }              else              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (long)firstChar - 48;                      numberType = JsonToken.Integer;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                        numberType = JsonToken.Integer;                  }                  else                  {                      long value;                      ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                      {                          numberValue = value;                          numberType = JsonToken.Integer;                      }                      else if (parseResult == ParseResult.Overflow)                      {  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                          string number = _stringReference.ToString();                            if (number.Length > MaximumJavascriptIntegerCharacterLength)                              throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                          numberType = JsonToken.Integer;  #else                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                      }                      else                      {                          string number = _stringReference.ToString();                            if (_floatParseHandling == FloatParseHandling.Decimal)                          {                              decimal d;                              if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number));                          }                          else                          {                              double d;                              if (double.TryParse(number' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number));                          }                            numberType = JsonToken.Float;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt32(number' 16)                              : Convert.ToInt32(number' 8);                            numberValue = integer;                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      int value;                      ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                          numberValue = value;                      else if (parseResult == ParseResult.Overflow)                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Integer;              }              else if (_readType == ReadType.ReadAsDecimal)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (decimal)firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          // decimal.Parse doesn't support parsing hexadecimal values                          long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                            numberValue = Convert.ToDecimal(integer);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      string number = _stringReference.ToString();                        decimal value;                      if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value))                          numberValue = value;                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Float;              }              else              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (long)firstChar - 48;                      numberType = JsonToken.Integer;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                        numberType = JsonToken.Integer;                  }                  else                  {                      long value;                      ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                      {                          numberValue = value;                          numberType = JsonToken.Integer;                      }                      else if (parseResult == ParseResult.Overflow)                      {  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                          string number = _stringReference.ToString();                            if (number.Length > MaximumJavascriptIntegerCharacterLength)                              throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                          numberType = JsonToken.Integer;  #else                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                      }                      else                      {                          string number = _stringReference.ToString();                            if (_floatParseHandling == FloatParseHandling.Decimal)                          {                              decimal d;                              if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number));                          }                          else                          {                              double d;                              if (double.TryParse(number' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number));                          }                            numberType = JsonToken.Float;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt32(number' 16)                              : Convert.ToInt32(number' 8);                            numberValue = integer;                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      int value;                      ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                          numberValue = value;                      else if (parseResult == ParseResult.Overflow)                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Integer;              }              else if (_readType == ReadType.ReadAsDecimal)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (decimal)firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          // decimal.Parse doesn't support parsing hexadecimal values                          long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                            numberValue = Convert.ToDecimal(integer);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      string number = _stringReference.ToString();                        decimal value;                      if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value))                          numberValue = value;                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Float;              }              else              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (long)firstChar - 48;                      numberType = JsonToken.Integer;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                        numberType = JsonToken.Integer;                  }                  else                  {                      long value;                      ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                      {                          numberValue = value;                          numberType = JsonToken.Integer;                      }                      else if (parseResult == ParseResult.Overflow)                      {  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                          string number = _stringReference.ToString();                            if (number.Length > MaximumJavascriptIntegerCharacterLength)                              throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                          numberType = JsonToken.Integer;  #else                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                      }                      else                      {                          string number = _stringReference.ToString();                            if (_floatParseHandling == FloatParseHandling.Decimal)                          {                              decimal d;                              if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number));                          }                          else                          {                              double d;                              if (double.TryParse(number' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number));                          }                            numberType = JsonToken.Float;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonTextReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextReader.cs,ParseNumber,The following statement contains a magic number: if (_readType == ReadType.ReadAsInt32)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt32(number' 16)                              : Convert.ToInt32(number' 8);                            numberValue = integer;                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      int value;                      ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                          numberValue = value;                      else if (parseResult == ParseResult.Overflow)                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Integer;              }              else if (_readType == ReadType.ReadAsDecimal)              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (decimal)firstChar - 48;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          // decimal.Parse doesn't support parsing hexadecimal values                          long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                            numberValue = Convert.ToDecimal(integer);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                  }                  else                  {                      string number = _stringReference.ToString();                        decimal value;                      if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out value))                          numberValue = value;                      else                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                  }                    numberType = JsonToken.Float;              }              else              {                  if (singleDigit)                  {                      // digit char values start at 48                      numberValue = (long)firstChar - 48;                      numberType = JsonToken.Integer;                  }                  else if (nonBase10)                  {                      string number = _stringReference.ToString();                        try                      {                          numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase)                              ? Convert.ToInt64(number' 16)                              : Convert.ToInt64(number' 8);                      }                      catch (Exception ex)                      {                          throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                      }                        numberType = JsonToken.Integer;                  }                  else                  {                      long value;                      ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out value);                      if (parseResult == ParseResult.Success)                      {                          numberValue = value;                          numberType = JsonToken.Integer;                      }                      else if (parseResult == ParseResult.Overflow)                      {  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                          string number = _stringReference.ToString();                            if (number.Length > MaximumJavascriptIntegerCharacterLength)                              throw JsonReaderException.Create(this' "JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                          numberType = JsonToken.Integer;  #else                          throw JsonReaderException.Create(this' "JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                      }                      else                      {                          string number = _stringReference.ToString();                            if (_floatParseHandling == FloatParseHandling.Decimal)                          {                              decimal d;                              if (decimal.TryParse(number' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number));                          }                          else                          {                              double d;                              if (double.TryParse(number' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out d))                                  numberValue = d;                              else                                  throw JsonReaderException.Create(this' "Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number));                          }                            numberType = JsonToken.Float;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,JsonTextWriter,The following statement contains a magic number: _indentation = 2;
Magic Number,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,WriteIndent,The following statement contains a magic number: if (currentIndentCount > 0)              {                  if (_indentChars == null)                      _indentChars = new string(_indentChar' 10).ToCharArray();                    while (currentIndentCount > 0)                  {                      int writeCount = Math.Min(currentIndentCount' 10);                        _writer.Write(_indentChars' 0' writeCount);                        currentIndentCount -= writeCount;                  }              }
Magic Number,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,WriteIndent,The following statement contains a magic number: if (currentIndentCount > 0)              {                  if (_indentChars == null)                      _indentChars = new string(_indentChar' 10).ToCharArray();                    while (currentIndentCount > 0)                  {                      int writeCount = Math.Min(currentIndentCount' 10);                        _writer.Write(_indentChars' 0' writeCount);                        currentIndentCount -= writeCount;                  }              }
Magic Number,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,EnsureWriteBuffer,The following statement contains a magic number: if (_writeBuffer == null)                  _writeBuffer = new char[35];
Magic Number,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: if (value >= 0 && value <= 9)              {                  _writer.Write((char)('0' + value));              }              else              {                  ulong uvalue = (value < 0) ? (ulong)-value : (ulong)value;                    if (value < 0)                      _writer.Write('-');                    WriteIntegerValue(uvalue);              }
Magic Number,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: if (uvalue <= 9)              {                  _writer.Write((char)('0' + uvalue));              }              else              {                  EnsureWriteBuffer();                    int totalLength = MathUtils.IntLength(uvalue);                  int length = 0;                    do                  {                      _writeBuffer[totalLength - ++length] = (char)('0' + (uvalue % 10));                      uvalue /= 10;                  } while (uvalue != 0);                    _writer.Write(_writeBuffer' 0' length);              }
Magic Number,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: if (uvalue <= 9)              {                  _writer.Write((char)('0' + uvalue));              }              else              {                  EnsureWriteBuffer();                    int totalLength = MathUtils.IntLength(uvalue);                  int length = 0;                    do                  {                      _writeBuffer[totalLength - ++length] = (char)('0' + (uvalue % 10));                      uvalue /= 10;                  } while (uvalue != 0);                    _writer.Write(_writeBuffer' 0' length);              }
Magic Number,Newtonsoft.Json,JsonTextWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonTextWriter.cs,WriteIntegerValue,The following statement contains a magic number: if (uvalue <= 9)              {                  _writer.Write((char)('0' + uvalue));              }              else              {                  EnsureWriteBuffer();                    int totalLength = MathUtils.IntLength(uvalue);                  int length = 0;                    do                  {                      _writeBuffer[totalLength - ++length] = (char)('0' + (uvalue % 10));                      uvalue /= 10;                  } while (uvalue != 0);                    _writer.Write(_writeBuffer' 0' length);              }
Magic Number,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,IsZero,The following statement contains a magic number: const double epsilon = 2.2204460492503131e-016;
Magic Number,Newtonsoft.Json,JsonValidatingReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonValidatingReader.cs,IsZero,The following statement contains a magic number: return Math.Abs(value) < 20.0 * epsilon;
Magic Number,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,BuildStateArray,The following statement contains a magic number: var valueStates = StateArrayTempate[7];
Magic Number,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,JsonWriter,The following statement contains a magic number: _stack = new List<JsonPosition>(4);
Magic Number,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,AutoCompleteClose,The following statement contains a magic number: if (_currentPosition.Type == type)              {                  levelsToComplete = 1;              }              else              {                  int top = Top - 2;                  for (int i = top; i >= 0; i--)                  {                      int currentLevel = top - i;                        if (_stack[currentLevel].Type == type)                      {                          levelsToComplete = i + 2;                          break;                      }                  }              }
Magic Number,Newtonsoft.Json,JsonWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonWriter.cs,AutoCompleteClose,The following statement contains a magic number: if (_currentPosition.Type == type)              {                  levelsToComplete = 1;              }              else              {                  int top = Top - 2;                  for (int i = top; i >= 0; i--)                  {                      int currentLevel = top - i;                        if (_stack[currentLevel].Type == type)                      {                          levelsToComplete = i + 2;                          break;                      }                  }              }
Magic Number,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.StartsWith("xmlns"' StringComparison.Ordinal))              {                  if (attributeName.Length == 5)                  {                      prefix = string.Empty;                      return true;                  }                  else if (attributeName[5] == ':')                  {                      prefix = attributeName.Substring(6' attributeName.Length - 6);                      return true;                  }              }
Magic Number,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.StartsWith("xmlns"' StringComparison.Ordinal))              {                  if (attributeName.Length == 5)                  {                      prefix = string.Empty;                      return true;                  }                  else if (attributeName[5] == ':')                  {                      prefix = attributeName.Substring(6' attributeName.Length - 6);                      return true;                  }              }
Magic Number,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.StartsWith("xmlns"' StringComparison.Ordinal))              {                  if (attributeName.Length == 5)                  {                      prefix = string.Empty;                      return true;                  }                  else if (attributeName[5] == ':')                  {                      prefix = attributeName.Substring(6' attributeName.Length - 6);                      return true;                  }              }
Magic Number,Newtonsoft.Json.Converters,XmlNodeConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: if (attributeName.StartsWith("xmlns"' StringComparison.Ordinal))              {                  if (attributeName.Length == 5)                  {                      prefix = string.Empty;                      return true;                  }                  else if (attributeName[5] == ':')                  {                      prefix = attributeName.Substring(6' attributeName.Length - 6);                      return true;                  }              }
Magic Number,Newtonsoft.Json.Serialization,DefaultContractResolver,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\DefaultContractResolver.cs,IsValidCallback,The following statement contains a magic number: if (attributeType == typeof(OnErrorAttribute))              {                  if (parameters == null || parameters.Length != 2 || parameters[0].ParameterType != typeof(StreamingContext) || parameters[1].ParameterType != typeof(ErrorContext))                      throw new JsonException("Serialization Error Callback '{1}' in type '{0}' must have two parameters of type '{2}' and '{3}'.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(method.DeclaringType)' method' typeof(StreamingContext)' typeof(ErrorContext)));              }              else              {                  if (parameters == null || parameters.Length != 1 || parameters[0].ParameterType != typeof(StreamingContext))                      throw new JsonException("Serialization Callback '{1}' in type '{0}' must have a single parameter of type '{2}'.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(method.DeclaringType)' method' typeof(StreamingContext)));              }
Magic Number,Newtonsoft.Json.Serialization,MemoryTraceWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\MemoryTraceWriter.cs,Trace,The following statement contains a magic number: if (_traceMessages.Count >= 1000)                  _traceMessages.Dequeue();
Magic Number,Newtonsoft.Json.Utilities,Base64Encoder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (_leftOverBytesCount > 0)              {                  int leftOverBytesCount = _leftOverBytesCount;                  while (leftOverBytesCount < 3 && count > 0)                  {                      _leftOverBytes[leftOverBytesCount++] = buffer[index++];                      count--;                  }                  if (count == 0 && leftOverBytesCount < 3)                  {                      _leftOverBytesCount = leftOverBytesCount;                      return;                  }                  int num2 = Convert.ToBase64CharArray(_leftOverBytes' 0' 3' _charsLine' 0);                  WriteChars(_charsLine' 0' num2);              }
Magic Number,Newtonsoft.Json.Utilities,Base64Encoder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (_leftOverBytesCount > 0)              {                  int leftOverBytesCount = _leftOverBytesCount;                  while (leftOverBytesCount < 3 && count > 0)                  {                      _leftOverBytes[leftOverBytesCount++] = buffer[index++];                      count--;                  }                  if (count == 0 && leftOverBytesCount < 3)                  {                      _leftOverBytesCount = leftOverBytesCount;                      return;                  }                  int num2 = Convert.ToBase64CharArray(_leftOverBytes' 0' 3' _charsLine' 0);                  WriteChars(_charsLine' 0' num2);              }
Magic Number,Newtonsoft.Json.Utilities,Base64Encoder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (_leftOverBytesCount > 0)              {                  int leftOverBytesCount = _leftOverBytesCount;                  while (leftOverBytesCount < 3 && count > 0)                  {                      _leftOverBytes[leftOverBytesCount++] = buffer[index++];                      count--;                  }                  if (count == 0 && leftOverBytesCount < 3)                  {                      _leftOverBytesCount = leftOverBytesCount;                      return;                  }                  int num2 = Convert.ToBase64CharArray(_leftOverBytes' 0' 3' _charsLine' 0);                  WriteChars(_charsLine' 0' num2);              }
Magic Number,Newtonsoft.Json.Utilities,Base64Encoder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: _leftOverBytesCount = count % 3;
Magic Number,Newtonsoft.Json.Utilities,Base64Encoder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: if (_leftOverBytesCount > 0)              {                  count -= _leftOverBytesCount;                  if (_leftOverBytes == null)                  {                      _leftOverBytes = new byte[3];                  }                  for (int i = 0; i < _leftOverBytesCount; i++)                  {                      _leftOverBytes[i] = buffer[(index + count) + i];                  }              }
Magic Number,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: for (int i = start; i < end; i++)              {                  int c = chars[i] - '0';                    if (c < 0 || c > 9)                      return ParseResult.Invalid;                    int newValue = (10 * value) - c;                    // overflow has caused the number to loop around                  if (newValue > value)                  {                      i++;                        // double check the rest of the string that there wasn't anything invalid                      // invalid result takes precedence over overflow result                      for (; i < end; i++)                      {                          c = chars[i] - '0';                            if (c < 0 || c > 9)                              return ParseResult.Invalid;                      }                        return ParseResult.Overflow;                  }                    value = newValue;              }
Magic Number,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: for (int i = start; i < end; i++)              {                  int c = chars[i] - '0';                    if (c < 0 || c > 9)                      return ParseResult.Invalid;                    int newValue = (10 * value) - c;                    // overflow has caused the number to loop around                  if (newValue > value)                  {                      i++;                        // double check the rest of the string that there wasn't anything invalid                      // invalid result takes precedence over overflow result                      for (; i < end; i++)                      {                          c = chars[i] - '0';                            if (c < 0 || c > 9)                              return ParseResult.Invalid;                      }                        return ParseResult.Overflow;                  }                    value = newValue;              }
Magic Number,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: for (int i = start; i < end; i++)              {                  int c = chars[i] - '0';                    if (c < 0 || c > 9)                      return ParseResult.Invalid;                    int newValue = (10 * value) - c;                    // overflow has caused the number to loop around                  if (newValue > value)                  {                      i++;                        // double check the rest of the string that there wasn't anything invalid                      // invalid result takes precedence over overflow result                      for (; i < end; i++)                      {                          c = chars[i] - '0';                            if (c < 0 || c > 9)                              return ParseResult.Invalid;                      }                        return ParseResult.Overflow;                  }                    value = newValue;              }
Magic Number,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: for (int i = start; i < end; i++)              {                  int c = chars[i] - '0';                    if (c < 0 || c > 9)                      return ParseResult.Invalid;                    long newValue = (10 * value) - c;                    // overflow has caused the number to loop around                  if (newValue > value)                  {                      i++;                        // double check the rest of the string that there wasn't anything invalid                      // invalid result takes precedence over overflow result                      for (; i < end; i++)                      {                          c = chars[i] - '0';                            if (c < 0 || c > 9)                              return ParseResult.Invalid;                      }                        return ParseResult.Overflow;                  }                    value = newValue;              }
Magic Number,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: for (int i = start; i < end; i++)              {                  int c = chars[i] - '0';                    if (c < 0 || c > 9)                      return ParseResult.Invalid;                    long newValue = (10 * value) - c;                    // overflow has caused the number to loop around                  if (newValue > value)                  {                      i++;                        // double check the rest of the string that there wasn't anything invalid                      // invalid result takes precedence over overflow result                      for (; i < end; i++)                      {                          c = chars[i] - '0';                            if (c < 0 || c > 9)                              return ParseResult.Invalid;                      }                        return ParseResult.Overflow;                  }                    value = newValue;              }
Magic Number,Newtonsoft.Json.Utilities,ConvertUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: for (int i = start; i < end; i++)              {                  int c = chars[i] - '0';                    if (c < 0 || c > 9)                      return ParseResult.Invalid;                    long newValue = (10 * value) - c;                    // overflow has caused the number to loop around                  if (newValue > value)                  {                      i++;                        // double check the rest of the string that there wasn't anything invalid                      // invalid result takes precedence over overflow result                      for (; i < end; i++)                      {                          c = chars[i] - '0';                            if (c < 0 || c > 9)                              return ParseResult.Invalid;                      }                        return ParseResult.Overflow;                  }                    value = newValue;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseDate,The following statement contains a magic number: return (Parse4Digit(start' out Year)                      && 1 <= Year                      && ParseChar(start + Lzyyyy' '-')                      && Parse2Digit(start + Lzyyyy_' out Month)                      && 1 <= Month                      && Month <= 12                      && ParseChar(start + Lzyyyy_MM' '-')                      && Parse2Digit(start + Lzyyyy_MM_' out Day)                      && 1 <= Day                      && Day <= DateTime.DaysInMonth(Year' Month));
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (!(Parse2Digit(start' out Hour)                    && Hour < 24                    && ParseChar(start + LzHH' ':')                    && Parse2Digit(start + LzHH_' out Minute)                    && Minute < 60                    && ParseChar(start + LzHH_mm' ':')                    && Parse2Digit(start + LzHH_mm_' out Second)                    && Second < 60))              {                  return false;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (!(Parse2Digit(start' out Hour)                    && Hour < 24                    && ParseChar(start + LzHH' ':')                    && Parse2Digit(start + LzHH_' out Minute)                    && Minute < 60                    && ParseChar(start + LzHH_mm' ':')                    && Parse2Digit(start + LzHH_mm_' out Second)                    && Second < 60))              {                  return false;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (!(Parse2Digit(start' out Hour)                    && Hour < 24                    && ParseChar(start + LzHH' ':')                    && Parse2Digit(start + LzHH_' out Minute)                    && Minute < 60                    && ParseChar(start + LzHH_mm' ':')                    && Parse2Digit(start + LzHH_mm_' out Second)                    && Second < 60))              {                  return false;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (ParseChar(start' '.'))              {                  Fraction = 0;                  int numberOfDigits = 0;                    while (++start < _length && numberOfDigits < MaxFractionDigits)                  {                      int digit = _text[start] - '0';                      if (digit < 0 || digit > 9)                          break;                        Fraction = (Fraction * 10) + digit;                        numberOfDigits++;                  }                    if (numberOfDigits < MaxFractionDigits)                  {                      if (numberOfDigits == 0)                          return false;                        Fraction *= Power10[MaxFractionDigits - numberOfDigits];                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: if (ParseChar(start' '.'))              {                  Fraction = 0;                  int numberOfDigits = 0;                    while (++start < _length && numberOfDigits < MaxFractionDigits)                  {                      int digit = _text[start] - '0';                      if (digit < 0 || digit > 9)                          break;                        Fraction = (Fraction * 10) + digit;                        numberOfDigits++;                  }                    if (numberOfDigits < MaxFractionDigits)                  {                      if (numberOfDigits == 0)                          return false;                        Fraction *= Power10[MaxFractionDigits - numberOfDigits];                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start < _length)              {                  char ch = _text[start];                  if (ch == 'Z' || ch == 'z')                  {                      Zone = ParserTimeZone.Utc;                      start++;                  }                  else                  {                      if (start + 2 < _length                          && Parse2Digit(start + Lz_' out ZoneHour)                          && ZoneHour <= 99)                      {                          switch (ch)                          {                              case '-':                                  Zone = ParserTimeZone.LocalWestOfUtc;                                  start += Lz_zz;                                  break;                                case '+':                                  Zone = ParserTimeZone.LocalEastOfUtc;                                  start += Lz_zz;                                  break;                          }                      }                        if (start < _length)                      {                          if (ParseChar(start' ':'))                          {                              start += 1;                                if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                          else                          {                              if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                      }                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start < _length)              {                  char ch = _text[start];                  if (ch == 'Z' || ch == 'z')                  {                      Zone = ParserTimeZone.Utc;                      start++;                  }                  else                  {                      if (start + 2 < _length                          && Parse2Digit(start + Lz_' out ZoneHour)                          && ZoneHour <= 99)                      {                          switch (ch)                          {                              case '-':                                  Zone = ParserTimeZone.LocalWestOfUtc;                                  start += Lz_zz;                                  break;                                case '+':                                  Zone = ParserTimeZone.LocalEastOfUtc;                                  start += Lz_zz;                                  break;                          }                      }                        if (start < _length)                      {                          if (ParseChar(start' ':'))                          {                              start += 1;                                if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                          else                          {                              if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                      }                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start < _length)              {                  char ch = _text[start];                  if (ch == 'Z' || ch == 'z')                  {                      Zone = ParserTimeZone.Utc;                      start++;                  }                  else                  {                      if (start + 2 < _length                          && Parse2Digit(start + Lz_' out ZoneHour)                          && ZoneHour <= 99)                      {                          switch (ch)                          {                              case '-':                                  Zone = ParserTimeZone.LocalWestOfUtc;                                  start += Lz_zz;                                  break;                                case '+':                                  Zone = ParserTimeZone.LocalEastOfUtc;                                  start += Lz_zz;                                  break;                          }                      }                        if (start < _length)                      {                          if (ParseChar(start' ':'))                          {                              start += 1;                                if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                          else                          {                              if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                      }                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start < _length)              {                  char ch = _text[start];                  if (ch == 'Z' || ch == 'z')                  {                      Zone = ParserTimeZone.Utc;                      start++;                  }                  else                  {                      if (start + 2 < _length                          && Parse2Digit(start + Lz_' out ZoneHour)                          && ZoneHour <= 99)                      {                          switch (ch)                          {                              case '-':                                  Zone = ParserTimeZone.LocalWestOfUtc;                                  start += Lz_zz;                                  break;                                case '+':                                  Zone = ParserTimeZone.LocalEastOfUtc;                                  start += Lz_zz;                                  break;                          }                      }                        if (start < _length)                      {                          if (ParseChar(start' ':'))                          {                              start += 1;                                if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                          else                          {                              if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                      }                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start < _length)              {                  char ch = _text[start];                  if (ch == 'Z' || ch == 'z')                  {                      Zone = ParserTimeZone.Utc;                      start++;                  }                  else                  {                      if (start + 2 < _length                          && Parse2Digit(start + Lz_' out ZoneHour)                          && ZoneHour <= 99)                      {                          switch (ch)                          {                              case '-':                                  Zone = ParserTimeZone.LocalWestOfUtc;                                  start += Lz_zz;                                  break;                                case '+':                                  Zone = ParserTimeZone.LocalEastOfUtc;                                  start += Lz_zz;                                  break;                          }                      }                        if (start < _length)                      {                          if (ParseChar(start' ':'))                          {                              start += 1;                                if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                          else                          {                              if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                      }                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseZone,The following statement contains a magic number: if (start < _length)              {                  char ch = _text[start];                  if (ch == 'Z' || ch == 'z')                  {                      Zone = ParserTimeZone.Utc;                      start++;                  }                  else                  {                      if (start + 2 < _length                          && Parse2Digit(start + Lz_' out ZoneHour)                          && ZoneHour <= 99)                      {                          switch (ch)                          {                              case '-':                                  Zone = ParserTimeZone.LocalWestOfUtc;                                  start += Lz_zz;                                  break;                                case '+':                                  Zone = ParserTimeZone.LocalEastOfUtc;                                  start += Lz_zz;                                  break;                          }                      }                        if (start < _length)                      {                          if (ParseChar(start' ':'))                          {                              start += 1;                                if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                          else                          {                              if (start + 1 < _length                                  && Parse2Digit(start' out ZoneMinute)                                  && ZoneMinute <= 99)                              {                                  start += 2;                              }                          }                      }                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: if (start + 3 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  int digit3 = _text[start + 2] - '0';                  int digit4 = _text[start + 3] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10)                  {                      num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: if (start + 1 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10)                  {                      num = (digit1 * 10) + digit2;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: if (start + 1 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10)                  {                      num = (digit1 * 10) + digit2;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: if (start + 1 < _length)              {                  int digit1 = _text[start] - '0';                  int digit2 = _text[start + 1] - '0';                  if (0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10)                  {                      num = (digit1 * 10) + digit2;                      return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,UniversialTicksToJavaScriptTicks,The following statement contains a magic number: long javaScriptTicks = (universialTicks - InitialJavaScriptDateTicks) / 10000;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,ConvertJavaScriptTicksToDateTime,The following statement contains a magic number: DateTime dateTime = new DateTime((javaScriptTicks * 10000) + InitialJavaScriptDateTicks' DateTimeKind.Utc);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateIso,The following statement contains a magic number: if (dateParseHandling == DateParseHandling.DateTimeOffset)              {                  TimeSpan offset;                    switch (dateTimeParser.Zone)                  {                      case ParserTimeZone.Utc:                          offset = new TimeSpan(0L);                          break;                      case ParserTimeZone.LocalWestOfUtc:                          offset = new TimeSpan(-dateTimeParser.ZoneHour' -dateTimeParser.ZoneMinute' 0);                          break;                      case ParserTimeZone.LocalEastOfUtc:                          offset = new TimeSpan(dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);                          break;                      default:                          offset = TimeZoneInfo.Local.GetUtcOffset(d);                          break;                  }                    long ticks = d.Ticks - offset.Ticks;                  if (ticks < 0 || ticks > 3155378975999999999)                  {                      dt = null;                      return false;                  }                    dt = new DateTimeOffset(d' offset);                  return true;              }              else  #endif              {                  long ticks;                    switch (dateTimeParser.Zone)                  {                      case ParserTimeZone.Utc:                          d = new DateTime(d.Ticks' DateTimeKind.Utc);                          break;                        case ParserTimeZone.LocalWestOfUtc:                      {                          TimeSpan offset = new TimeSpan(dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);                          ticks = d.Ticks + offset.Ticks;                          if (ticks <= DateTime.MaxValue.Ticks)                          {                              d = new DateTime(ticks' DateTimeKind.Utc).ToLocalTime();                          }                          else                          {                              ticks += d.GetUtcOffset().Ticks;                              if (ticks > DateTime.MaxValue.Ticks)                                  ticks = DateTime.MaxValue.Ticks;                                d = new DateTime(ticks' DateTimeKind.Local);                          }                          break;                      }                      case ParserTimeZone.LocalEastOfUtc:                      {                          TimeSpan offset = new TimeSpan(dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);                          ticks = d.Ticks - offset.Ticks;                          if (ticks >= DateTime.MinValue.Ticks)                          {                              d = new DateTime(ticks' DateTimeKind.Utc).ToLocalTime();                          }                          else                          {                              ticks += d.GetUtcOffset().Ticks;                              if (ticks < DateTime.MinValue.Ticks)                                  ticks = DateTime.MinValue.Ticks;                                d = new DateTime(ticks' DateTimeKind.Local);                          }                          break;                      }                  }                    dt = EnsureDateTime(d' dateTimeZoneHandling);                  return true;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s.Length > 0)              {                  if (s[0] == '/')                  {                      if (s.StartsWith("/Date("' StringComparison.Ordinal) && s.EndsWith(")/"' StringComparison.Ordinal))                      {                          if (TryParseDateMicrosoft(s' dateParseHandling' dateTimeZoneHandling' out dt))                              return true;                      }                  }                  else if (s.Length >= 19 && s.Length <= 40 && char.IsDigit(s[0]) && s[10] == 'T')                  {                      if (TryParseDateIso(s' dateParseHandling' dateTimeZoneHandling' out dt))                          return true;                  }                    if (!string.IsNullOrEmpty(dateFormatString))                  {                      if (TryParseDateExact(s' dateParseHandling' dateTimeZoneHandling' dateFormatString' culture' out dt))                          return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s.Length > 0)              {                  if (s[0] == '/')                  {                      if (s.StartsWith("/Date("' StringComparison.Ordinal) && s.EndsWith(")/"' StringComparison.Ordinal))                      {                          if (TryParseDateMicrosoft(s' dateParseHandling' dateTimeZoneHandling' out dt))                              return true;                      }                  }                  else if (s.Length >= 19 && s.Length <= 40 && char.IsDigit(s[0]) && s[10] == 'T')                  {                      if (TryParseDateIso(s' dateParseHandling' dateTimeZoneHandling' out dt))                          return true;                  }                    if (!string.IsNullOrEmpty(dateFormatString))                  {                      if (TryParseDateExact(s' dateParseHandling' dateTimeZoneHandling' dateFormatString' culture' out dt))                          return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: if (s.Length > 0)              {                  if (s[0] == '/')                  {                      if (s.StartsWith("/Date("' StringComparison.Ordinal) && s.EndsWith(")/"' StringComparison.Ordinal))                      {                          if (TryParseDateMicrosoft(s' dateParseHandling' dateTimeZoneHandling' out dt))                              return true;                      }                  }                  else if (s.Length >= 19 && s.Length <= 40 && char.IsDigit(s[0]) && s[10] == 'T')                  {                      if (TryParseDateIso(s' dateParseHandling' dateTimeZoneHandling' out dt))                          return true;                  }                    if (!string.IsNullOrEmpty(dateFormatString))                  {                      if (TryParseDateExact(s' dateParseHandling' dateTimeZoneHandling' dateFormatString' culture' out dt))                          return true;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateMicrosoft,The following statement contains a magic number: string value = text.Substring(6' text.Length - 8);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateMicrosoft,The following statement contains a magic number: string value = text.Substring(6' text.Length - 8);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,ReadOffset,The following statement contains a magic number: int hours = int.Parse(offsetText.Substring(1' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,ReadOffset,The following statement contains a magic number: if (offsetText.Length >= 5)                  minutes = int.Parse(offsetText.Substring(3' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,ReadOffset,The following statement contains a magic number: if (offsetText.Length >= 5)                  minutes = int.Parse(offsetText.Substring(3' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,ReadOffset,The following statement contains a magic number: if (offsetText.Length >= 5)                  minutes = int.Parse(offsetText.Substring(3' 2)' NumberStyles.Integer' CultureInfo.InvariantCulture);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (string.IsNullOrEmpty(formatString))              {                  char[] chars = new char[64];                  int pos = WriteDateTimeString(chars' 0' value' null' value.Kind' format);                  writer.Write(chars' 0' pos);              }              else              {                  writer.Write(value.ToString(formatString' culture));              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (format == DateFormatHandling.MicrosoftDateFormat)              {                  TimeSpan o = offset ?? value.GetUtcOffset();                    long javaScriptTicks = ConvertDateTimeToJavaScriptTicks(value' o);                    @"\/Date(".CopyTo(0' chars' pos' 7);                  pos += 7;                    string ticksText = javaScriptTicks.ToString(CultureInfo.InvariantCulture);                  ticksText.CopyTo(0' chars' pos' ticksText.Length);                  pos += ticksText.Length;                    switch (kind)                  {                      case DateTimeKind.Unspecified:                          if (value != DateTime.MaxValue && value != DateTime.MinValue)                              pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                  }                    @")\/".CopyTo(0' chars' pos' 3);                  pos += 3;              }              else              {                  pos = WriteDefaultIsoDate(chars' pos' value);                    switch (kind)                  {                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' offset ?? value.GetUtcOffset()' format);                          break;                      case DateTimeKind.Utc:                          chars[pos++] = 'Z';                          break;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (format == DateFormatHandling.MicrosoftDateFormat)              {                  TimeSpan o = offset ?? value.GetUtcOffset();                    long javaScriptTicks = ConvertDateTimeToJavaScriptTicks(value' o);                    @"\/Date(".CopyTo(0' chars' pos' 7);                  pos += 7;                    string ticksText = javaScriptTicks.ToString(CultureInfo.InvariantCulture);                  ticksText.CopyTo(0' chars' pos' ticksText.Length);                  pos += ticksText.Length;                    switch (kind)                  {                      case DateTimeKind.Unspecified:                          if (value != DateTime.MaxValue && value != DateTime.MinValue)                              pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                  }                    @")\/".CopyTo(0' chars' pos' 3);                  pos += 3;              }              else              {                  pos = WriteDefaultIsoDate(chars' pos' value);                    switch (kind)                  {                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' offset ?? value.GetUtcOffset()' format);                          break;                      case DateTimeKind.Utc:                          chars[pos++] = 'Z';                          break;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (format == DateFormatHandling.MicrosoftDateFormat)              {                  TimeSpan o = offset ?? value.GetUtcOffset();                    long javaScriptTicks = ConvertDateTimeToJavaScriptTicks(value' o);                    @"\/Date(".CopyTo(0' chars' pos' 7);                  pos += 7;                    string ticksText = javaScriptTicks.ToString(CultureInfo.InvariantCulture);                  ticksText.CopyTo(0' chars' pos' ticksText.Length);                  pos += ticksText.Length;                    switch (kind)                  {                      case DateTimeKind.Unspecified:                          if (value != DateTime.MaxValue && value != DateTime.MinValue)                              pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                  }                    @")\/".CopyTo(0' chars' pos' 3);                  pos += 3;              }              else              {                  pos = WriteDefaultIsoDate(chars' pos' value);                    switch (kind)                  {                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' offset ?? value.GetUtcOffset()' format);                          break;                      case DateTimeKind.Utc:                          chars[pos++] = 'Z';                          break;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: if (format == DateFormatHandling.MicrosoftDateFormat)              {                  TimeSpan o = offset ?? value.GetUtcOffset();                    long javaScriptTicks = ConvertDateTimeToJavaScriptTicks(value' o);                    @"\/Date(".CopyTo(0' chars' pos' 7);                  pos += 7;                    string ticksText = javaScriptTicks.ToString(CultureInfo.InvariantCulture);                  ticksText.CopyTo(0' chars' pos' ticksText.Length);                  pos += ticksText.Length;                    switch (kind)                  {                      case DateTimeKind.Unspecified:                          if (value != DateTime.MaxValue && value != DateTime.MinValue)                              pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                  }                    @")\/".CopyTo(0' chars' pos' 3);                  pos += 3;              }              else              {                  pos = WriteDefaultIsoDate(chars' pos' value);                    switch (kind)                  {                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' offset ?? value.GetUtcOffset()' format);                          break;                      case DateTimeKind.Utc:                          chars[pos++] = 'Z';                          break;                  }              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: int length = 19;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start' year' 4);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 4] = '-';
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 5' month' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 5' month' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 7] = '-';
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 8' day' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 8' day' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 10] = 'T';
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 11' dt.Hour' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 11' dt.Hour' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 13] = ':';
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 14' dt.Minute' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 14' dt.Minute' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 16] = ':';
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 17' dt.Second' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 17' dt.Second' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0)              {                  int digits = 7;                  while ((fraction % 10) == 0)                  {                      digits--;                      fraction /= 10;                  }                    chars[start + 19] = '.';                  CopyIntToCharArray(chars' start + 20' fraction' digits);                    length += digits + 1;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0)              {                  int digits = 7;                  while ((fraction % 10) == 0)                  {                      digits--;                      fraction /= 10;                  }                    chars[start + 19] = '.';                  CopyIntToCharArray(chars' start + 20' fraction' digits);                    length += digits + 1;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0)              {                  int digits = 7;                  while ((fraction % 10) == 0)                  {                      digits--;                      fraction /= 10;                  }                    chars[start + 19] = '.';                  CopyIntToCharArray(chars' start + 20' fraction' digits);                    length += digits + 1;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0)              {                  int digits = 7;                  while ((fraction % 10) == 0)                  {                      digits--;                      fraction /= 10;                  }                    chars[start + 19] = '.';                  CopyIntToCharArray(chars' start + 20' fraction' digits);                    length += digits + 1;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: if (fraction != 0)              {                  int digits = 7;                  while ((fraction % 10) == 0)                  {                      digits--;                      fraction /= 10;                  }                    chars[start + 19] = '.';                  CopyIntToCharArray(chars' start + 20' fraction' digits);                    length += digits + 1;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: while (digits-- != 0)              {                  chars[start + digits] = (char)((value % 10) + 48);                  value /= 10;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: while (digits-- != 0)              {                  chars[start + digits] = (char)((value % 10) + 48);                  value /= 10;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: while (digits-- != 0)              {                  chars[start + digits] = (char)((value % 10) + 48);                  value /= 10;              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: CopyIntToCharArray(chars' start' absHours' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: start += 2;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: CopyIntToCharArray(chars' start' absMinutes' 2);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: start += 2;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeOffsetString,The following statement contains a magic number: if (string.IsNullOrEmpty(formatString))              {                  char[] chars = new char[64];                  int pos = WriteDateTimeString(chars' 0' (format == DateFormatHandling.IsoDateFormat) ? value.DateTime : value.UtcDateTime' value.Offset' DateTimeKind.Local' format);                    writer.Write(chars' 0' pos);              }              else              {                  writer.Write(value.ToString(formatString' culture));              }
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: if (y100 == 4)                  y100 = 3;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: if (y100 == 4)                  y100 = 3;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: if (y1 == 4)                  y1 = 3;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: if (y1 == 4)                  y1 = 3;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: bool leapYear = y1 == 3 && (y4 != 24 || y100 == 3);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: bool leapYear = y1 == 3 && (y4 != 24 || y100 == 3);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: bool leapYear = y1 == 3 && (y4 != 24 || y100 == 3);
Magic Number,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: int m = n >> 5 + 1;
Magic Number,Newtonsoft.Json.Utilities,BinderWrapper,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DynamicUtils.cs,Init,The following statement contains a magic number: if (!_init)                  {                      Type binderType = Type.GetType(BinderTypeName' false);                      if (binderType == null)                          throw new InvalidOperationException("Could not resolve type '{0}'. You may need to add a reference to Microsoft.CSharp.dll to work with dynamic types.".FormatWith(CultureInfo.InvariantCulture' BinderTypeName));                        // None                      _getCSharpArgumentInfoArray = CreateSharpArgumentInfoArray(0);                      // None' Constant | UseCompileTimeType                      _setCSharpArgumentInfoArray = CreateSharpArgumentInfoArray(0' 3);                      CreateMemberCalls();                        _init = true;                  }
Magic Number,Newtonsoft.Json.Utilities,JavaScriptUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null)              {                  int lastWritePosition = 0;                    for (int i = 0; i < s.Length; i++)                  {                      var c = s[i];                        if (c < charEscapeFlags.Length && !charEscapeFlags[c])                          continue;                        string escapedValue;                        switch (c)                      {                          case '\t':                              escapedValue = @"\t";                              break;                          case '\n':                              escapedValue = @"\n";                              break;                          case '\r':                              escapedValue = @"\r";                              break;                          case '\f':                              escapedValue = @"\f";                              break;                          case '\b':                              escapedValue = @"\b";                              break;                          case '\\':                              escapedValue = @"\\";                              break;                          case '\u0085': // Next Line                              escapedValue = @"\u0085";                              break;                          case '\u2028': // Line Separator                              escapedValue = @"\u2028";                              break;                          case '\u2029': // Paragraph Separator                              escapedValue = @"\u2029";                              break;                          default:                              if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii)                              {                                  if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\'";                                  }                                  else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\""";                                  }                                  else                                  {                                      if (writeBuffer == null)                                          writeBuffer = new char[6];                                        StringUtils.ToCharAsUnicode(c' writeBuffer);                                        // slightly hacky but it saves multiple conditions in if test                                      escapedValue = EscapedUnicodeText;                                  }                              }                              else                              {                                  escapedValue = null;                              }                              break;                      }                        if (escapedValue == null)                          continue;                        bool isEscapedUnicodeText = string.Equals(escapedValue' EscapedUnicodeText);                        if (i > lastWritePosition)                      {                          int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);                          int start = (isEscapedUnicodeText) ? 6 : 0;                            if (writeBuffer == null || writeBuffer.Length < length)                          {                              char[] newBuffer = new char[length];                                // the unicode text is already in the buffer                              // copy it over when creating new buffer                              if (isEscapedUnicodeText)                                  Array.Copy(writeBuffer' newBuffer' 6);                                writeBuffer = newBuffer;                          }                            s.CopyTo(lastWritePosition' writeBuffer' start' length - start);                            // write unchanged chars before writing escaped text                          writer.Write(writeBuffer' start' length - start);                      }                        lastWritePosition = i + 1;                      if (!isEscapedUnicodeText)                          writer.Write(escapedValue);                      else                          writer.Write(writeBuffer' 0' 6);                  }                    if (lastWritePosition == 0)                  {                      // no escaped text' write entire string                      writer.Write(s);                  }                  else                  {                      int length = s.Length - lastWritePosition;                        if (writeBuffer == null || writeBuffer.Length < length)                          writeBuffer = new char[length];                        s.CopyTo(lastWritePosition' writeBuffer' 0' length);                        // write remaining text                      writer.Write(writeBuffer' 0' length);                  }              }
Magic Number,Newtonsoft.Json.Utilities,JavaScriptUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null)              {                  int lastWritePosition = 0;                    for (int i = 0; i < s.Length; i++)                  {                      var c = s[i];                        if (c < charEscapeFlags.Length && !charEscapeFlags[c])                          continue;                        string escapedValue;                        switch (c)                      {                          case '\t':                              escapedValue = @"\t";                              break;                          case '\n':                              escapedValue = @"\n";                              break;                          case '\r':                              escapedValue = @"\r";                              break;                          case '\f':                              escapedValue = @"\f";                              break;                          case '\b':                              escapedValue = @"\b";                              break;                          case '\\':                              escapedValue = @"\\";                              break;                          case '\u0085': // Next Line                              escapedValue = @"\u0085";                              break;                          case '\u2028': // Line Separator                              escapedValue = @"\u2028";                              break;                          case '\u2029': // Paragraph Separator                              escapedValue = @"\u2029";                              break;                          default:                              if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii)                              {                                  if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\'";                                  }                                  else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\""";                                  }                                  else                                  {                                      if (writeBuffer == null)                                          writeBuffer = new char[6];                                        StringUtils.ToCharAsUnicode(c' writeBuffer);                                        // slightly hacky but it saves multiple conditions in if test                                      escapedValue = EscapedUnicodeText;                                  }                              }                              else                              {                                  escapedValue = null;                              }                              break;                      }                        if (escapedValue == null)                          continue;                        bool isEscapedUnicodeText = string.Equals(escapedValue' EscapedUnicodeText);                        if (i > lastWritePosition)                      {                          int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);                          int start = (isEscapedUnicodeText) ? 6 : 0;                            if (writeBuffer == null || writeBuffer.Length < length)                          {                              char[] newBuffer = new char[length];                                // the unicode text is already in the buffer                              // copy it over when creating new buffer                              if (isEscapedUnicodeText)                                  Array.Copy(writeBuffer' newBuffer' 6);                                writeBuffer = newBuffer;                          }                            s.CopyTo(lastWritePosition' writeBuffer' start' length - start);                            // write unchanged chars before writing escaped text                          writer.Write(writeBuffer' start' length - start);                      }                        lastWritePosition = i + 1;                      if (!isEscapedUnicodeText)                          writer.Write(escapedValue);                      else                          writer.Write(writeBuffer' 0' 6);                  }                    if (lastWritePosition == 0)                  {                      // no escaped text' write entire string                      writer.Write(s);                  }                  else                  {                      int length = s.Length - lastWritePosition;                        if (writeBuffer == null || writeBuffer.Length < length)                          writeBuffer = new char[length];                        s.CopyTo(lastWritePosition' writeBuffer' 0' length);                        // write remaining text                      writer.Write(writeBuffer' 0' length);                  }              }
Magic Number,Newtonsoft.Json.Utilities,JavaScriptUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null)              {                  int lastWritePosition = 0;                    for (int i = 0; i < s.Length; i++)                  {                      var c = s[i];                        if (c < charEscapeFlags.Length && !charEscapeFlags[c])                          continue;                        string escapedValue;                        switch (c)                      {                          case '\t':                              escapedValue = @"\t";                              break;                          case '\n':                              escapedValue = @"\n";                              break;                          case '\r':                              escapedValue = @"\r";                              break;                          case '\f':                              escapedValue = @"\f";                              break;                          case '\b':                              escapedValue = @"\b";                              break;                          case '\\':                              escapedValue = @"\\";                              break;                          case '\u0085': // Next Line                              escapedValue = @"\u0085";                              break;                          case '\u2028': // Line Separator                              escapedValue = @"\u2028";                              break;                          case '\u2029': // Paragraph Separator                              escapedValue = @"\u2029";                              break;                          default:                              if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii)                              {                                  if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\'";                                  }                                  else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\""";                                  }                                  else                                  {                                      if (writeBuffer == null)                                          writeBuffer = new char[6];                                        StringUtils.ToCharAsUnicode(c' writeBuffer);                                        // slightly hacky but it saves multiple conditions in if test                                      escapedValue = EscapedUnicodeText;                                  }                              }                              else                              {                                  escapedValue = null;                              }                              break;                      }                        if (escapedValue == null)                          continue;                        bool isEscapedUnicodeText = string.Equals(escapedValue' EscapedUnicodeText);                        if (i > lastWritePosition)                      {                          int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);                          int start = (isEscapedUnicodeText) ? 6 : 0;                            if (writeBuffer == null || writeBuffer.Length < length)                          {                              char[] newBuffer = new char[length];                                // the unicode text is already in the buffer                              // copy it over when creating new buffer                              if (isEscapedUnicodeText)                                  Array.Copy(writeBuffer' newBuffer' 6);                                writeBuffer = newBuffer;                          }                            s.CopyTo(lastWritePosition' writeBuffer' start' length - start);                            // write unchanged chars before writing escaped text                          writer.Write(writeBuffer' start' length - start);                      }                        lastWritePosition = i + 1;                      if (!isEscapedUnicodeText)                          writer.Write(escapedValue);                      else                          writer.Write(writeBuffer' 0' 6);                  }                    if (lastWritePosition == 0)                  {                      // no escaped text' write entire string                      writer.Write(s);                  }                  else                  {                      int length = s.Length - lastWritePosition;                        if (writeBuffer == null || writeBuffer.Length < length)                          writeBuffer = new char[length];                        s.CopyTo(lastWritePosition' writeBuffer' 0' length);                        // write remaining text                      writer.Write(writeBuffer' 0' length);                  }              }
Magic Number,Newtonsoft.Json.Utilities,JavaScriptUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null)              {                  int lastWritePosition = 0;                    for (int i = 0; i < s.Length; i++)                  {                      var c = s[i];                        if (c < charEscapeFlags.Length && !charEscapeFlags[c])                          continue;                        string escapedValue;                        switch (c)                      {                          case '\t':                              escapedValue = @"\t";                              break;                          case '\n':                              escapedValue = @"\n";                              break;                          case '\r':                              escapedValue = @"\r";                              break;                          case '\f':                              escapedValue = @"\f";                              break;                          case '\b':                              escapedValue = @"\b";                              break;                          case '\\':                              escapedValue = @"\\";                              break;                          case '\u0085': // Next Line                              escapedValue = @"\u0085";                              break;                          case '\u2028': // Line Separator                              escapedValue = @"\u2028";                              break;                          case '\u2029': // Paragraph Separator                              escapedValue = @"\u2029";                              break;                          default:                              if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii)                              {                                  if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\'";                                  }                                  else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\""";                                  }                                  else                                  {                                      if (writeBuffer == null)                                          writeBuffer = new char[6];                                        StringUtils.ToCharAsUnicode(c' writeBuffer);                                        // slightly hacky but it saves multiple conditions in if test                                      escapedValue = EscapedUnicodeText;                                  }                              }                              else                              {                                  escapedValue = null;                              }                              break;                      }                        if (escapedValue == null)                          continue;                        bool isEscapedUnicodeText = string.Equals(escapedValue' EscapedUnicodeText);                        if (i > lastWritePosition)                      {                          int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);                          int start = (isEscapedUnicodeText) ? 6 : 0;                            if (writeBuffer == null || writeBuffer.Length < length)                          {                              char[] newBuffer = new char[length];                                // the unicode text is already in the buffer                              // copy it over when creating new buffer                              if (isEscapedUnicodeText)                                  Array.Copy(writeBuffer' newBuffer' 6);                                writeBuffer = newBuffer;                          }                            s.CopyTo(lastWritePosition' writeBuffer' start' length - start);                            // write unchanged chars before writing escaped text                          writer.Write(writeBuffer' start' length - start);                      }                        lastWritePosition = i + 1;                      if (!isEscapedUnicodeText)                          writer.Write(escapedValue);                      else                          writer.Write(writeBuffer' 0' 6);                  }                    if (lastWritePosition == 0)                  {                      // no escaped text' write entire string                      writer.Write(s);                  }                  else                  {                      int length = s.Length - lastWritePosition;                        if (writeBuffer == null || writeBuffer.Length < length)                          writeBuffer = new char[length];                        s.CopyTo(lastWritePosition' writeBuffer' 0' length);                        // write remaining text                      writer.Write(writeBuffer' 0' length);                  }              }
Magic Number,Newtonsoft.Json.Utilities,JavaScriptUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The following statement contains a magic number: if (s != null)              {                  int lastWritePosition = 0;                    for (int i = 0; i < s.Length; i++)                  {                      var c = s[i];                        if (c < charEscapeFlags.Length && !charEscapeFlags[c])                          continue;                        string escapedValue;                        switch (c)                      {                          case '\t':                              escapedValue = @"\t";                              break;                          case '\n':                              escapedValue = @"\n";                              break;                          case '\r':                              escapedValue = @"\r";                              break;                          case '\f':                              escapedValue = @"\f";                              break;                          case '\b':                              escapedValue = @"\b";                              break;                          case '\\':                              escapedValue = @"\\";                              break;                          case '\u0085': // Next Line                              escapedValue = @"\u0085";                              break;                          case '\u2028': // Line Separator                              escapedValue = @"\u2028";                              break;                          case '\u2029': // Paragraph Separator                              escapedValue = @"\u2029";                              break;                          default:                              if (c < charEscapeFlags.Length || stringEscapeHandling == StringEscapeHandling.EscapeNonAscii)                              {                                  if (c == '\'' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\'";                                  }                                  else if (c == '"' && stringEscapeHandling != StringEscapeHandling.EscapeHtml)                                  {                                      escapedValue = @"\""";                                  }                                  else                                  {                                      if (writeBuffer == null)                                          writeBuffer = new char[6];                                        StringUtils.ToCharAsUnicode(c' writeBuffer);                                        // slightly hacky but it saves multiple conditions in if test                                      escapedValue = EscapedUnicodeText;                                  }                              }                              else                              {                                  escapedValue = null;                              }                              break;                      }                        if (escapedValue == null)                          continue;                        bool isEscapedUnicodeText = string.Equals(escapedValue' EscapedUnicodeText);                        if (i > lastWritePosition)                      {                          int length = i - lastWritePosition + ((isEscapedUnicodeText) ? 6 : 0);                          int start = (isEscapedUnicodeText) ? 6 : 0;                            if (writeBuffer == null || writeBuffer.Length < length)                          {                              char[] newBuffer = new char[length];                                // the unicode text is already in the buffer                              // copy it over when creating new buffer                              if (isEscapedUnicodeText)                                  Array.Copy(writeBuffer' newBuffer' 6);                                writeBuffer = newBuffer;                          }                            s.CopyTo(lastWritePosition' writeBuffer' start' length - start);                            // write unchanged chars before writing escaped text                          writer.Write(writeBuffer' start' length - start);                      }                        lastWritePosition = i + 1;                      if (!isEscapedUnicodeText)                          writer.Write(escapedValue);                      else                          writer.Write(writeBuffer' 0' 6);                  }                    if (lastWritePosition == 0)                  {                      // no escaped text' write entire string                      writer.Write(s);                  }                  else                  {                      int length = s.Length - lastWritePosition;                        if (writeBuffer == null || writeBuffer.Length < length)                          writeBuffer = new char[length];                        s.CopyTo(lastWritePosition' writeBuffer' 0' length);                        // write remaining text                      writer.Write(writeBuffer' 0' length);                  }              }
Magic Number,Newtonsoft.Json.Utilities,JavaScriptUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\JavaScriptUtils.cs,ToEscapedJavaScriptString,The following statement contains a magic number: using (StringWriter w = StringUtils.CreateStringWriter(StringUtils.GetLength(value) ?? 16))              {                  char[] buffer = null;                  WriteEscapedJavaScriptString(w' value' delimiter' appendDelimiters' charEscapeFlags' stringEscapeHandling' ref buffer);                  return w.ToString();              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: if (i < 10000000000)              {                  if (i < 10) return 1;                  if (i < 100) return 2;                  if (i < 1000) return 3;                  if (i < 10000) return 4;                  if (i < 100000) return 5;                  if (i < 1000000) return 6;                  if (i < 10000000) return 7;                  if (i < 100000000) return 8;                  if (i < 1000000000) return 9;                    return 10;              }              else              {                  if (i < 100000000000) return 11;                  if (i < 1000000000000) return 12;                  if (i < 10000000000000) return 13;                  if (i < 100000000000000) return 14;                  if (i < 1000000000000000) return 15;                  if (i < 10000000000000000) return 16;                  if (i < 100000000000000000) return 17;                  if (i < 1000000000000000000) return 18;                  if (i < 10000000000000000000) return 19;                    return 20;              }
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: if (n <= 9)                  return (char)(n + 48);
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: if (n <= 9)                  return (char)(n + 48);
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 97);
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 97);
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,ApproxEquals,The following statement contains a magic number: const double epsilon = 2.2204460492503131E-16;
Magic Number,Newtonsoft.Json.Utilities,MathUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\MathUtils.cs,ApproxEquals,The following statement contains a magic number: double tolerance = ((Math.Abs(d1) + Math.Abs(d2)) + 10.0) * epsilon;
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Get,The following statement contains a magic number: hashCode += (hashCode << 7) ^ key[start];
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Get,The following statement contains a magic number: for (int i = start + 1; i < end; i++)              {                  hashCode += (hashCode << 7) ^ key[i];              }
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Get,The following statement contains a magic number: hashCode -= hashCode >> 17;
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Get,The following statement contains a magic number: hashCode -= hashCode >> 11;
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Get,The following statement contains a magic number: hashCode -= hashCode >> 5;
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Add,The following statement contains a magic number: for (int i = 0; i < key.Length; i++)              {                  hashCode += (hashCode << 7) ^ key[i];              }
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Add,The following statement contains a magic number: hashCode -= hashCode >> 17;
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Add,The following statement contains a magic number: hashCode -= hashCode >> 11;
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Add,The following statement contains a magic number: hashCode -= hashCode >> 5;
Magic Number,Newtonsoft.Json.Utilities,PropertyNameTable,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\PropertyNameTable.cs,Grow,The following statement contains a magic number: int newMask = (_mask * 2) + 1;
Magic Number,Newtonsoft.Json.Utilities,StringBuffer,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringBuffer.cs,EnsureSize,The following statement contains a magic number: char[] newBuffer = new char[(_position + appendLength) * 2];
Magic Number,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[2] = MathUtils.IntToHex((c >> 12) & '\x000f');
Magic Number,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[2] = MathUtils.IntToHex((c >> 12) & '\x000f');
Magic Number,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[3] = MathUtils.IntToHex((c >> 8) & '\x000f');
Magic Number,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[3] = MathUtils.IntToHex((c >> 8) & '\x000f');
Magic Number,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[4] = MathUtils.IntToHex((c >> 4) & '\x000f');
Magic Number,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[4] = MathUtils.IntToHex((c >> 4) & '\x000f');
Magic Number,Newtonsoft.Json.Utilities,StringUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[5] = MathUtils.IntToHex(c & '\x000f');
Duplicate Code,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The method contains a code clone-set at the following line numbers (starting from the method definition): ((57' 77)' (88' 108))
Missing Default,Newtonsoft.Json,JsonConvert,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonConvert.cs,ToString,The following switch statement is missing a default case: switch (typeCode)              {                  case PrimitiveTypeCode.String:                      return ToString((string)value);                  case PrimitiveTypeCode.Char:                      return ToString((char)value);                  case PrimitiveTypeCode.Boolean:                      return ToString((bool)value);                  case PrimitiveTypeCode.SByte:                      return ToString((sbyte)value);                  case PrimitiveTypeCode.Int16:                      return ToString((short)value);                  case PrimitiveTypeCode.UInt16:                      return ToString((ushort)value);                  case PrimitiveTypeCode.Int32:                      return ToString((int)value);                  case PrimitiveTypeCode.Byte:                      return ToString((byte)value);                  case PrimitiveTypeCode.UInt32:                      return ToString((uint)value);                  case PrimitiveTypeCode.Int64:                      return ToString((long)value);                  case PrimitiveTypeCode.UInt64:                      return ToString((ulong)value);                  case PrimitiveTypeCode.Single:                      return ToString((float)value);                  case PrimitiveTypeCode.Double:                      return ToString((double)value);                  case PrimitiveTypeCode.DateTime:                      return ToString((DateTime)value);                  case PrimitiveTypeCode.Decimal:                      return ToString((decimal)value);  #if !(NETFX_CORE || PORTABLE)                  case PrimitiveTypeCode.DBNull:                      return Null;  #endif  #if !NET20                  case PrimitiveTypeCode.DateTimeOffset:                      return ToString((DateTimeOffset)value);  #endif                  case PrimitiveTypeCode.Guid:                      return ToString((Guid)value);                  case PrimitiveTypeCode.Uri:                      return ToString((Uri)value);                  case PrimitiveTypeCode.TimeSpan:                      return ToString((TimeSpan)value);  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                  case PrimitiveTypeCode.BigInteger:                      return ToStringInternal((BigInteger)value);  #endif              }
Missing Default,Newtonsoft.Json,JsonPosition,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonPosition.cs,WriteTo,The following switch statement is missing a default case: switch (Type)              {                  case JsonContainerType.Object:                      if (sb.Length > 0)                          sb.Append('.');                        string propertyName = PropertyName;                      if (propertyName.IndexOfAny(SpecialCharacters) != -1)                      {                          sb.Append(@"['");                          sb.Append(propertyName);                          sb.Append(@"']");                      }                      else                      {                          sb.Append(propertyName);                      }                      break;                  case JsonContainerType.Array:                  case JsonContainerType.Constructor:                      sb.Append('[');                      sb.Append(Position);                      sb.Append(']');                      break;              }
Missing Default,Newtonsoft.Json,JsonReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\JsonReader.cs,SetToken,The following switch statement is missing a default case: switch (newToken)              {                  case JsonToken.StartObject:                      _currentState = State.ObjectStart;                      Push(JsonContainerType.Object);                      break;                  case JsonToken.StartArray:                      _currentState = State.ArrayStart;                      Push(JsonContainerType.Array);                      break;                  case JsonToken.StartConstructor:                      _currentState = State.ConstructorStart;                      Push(JsonContainerType.Constructor);                      break;                  case JsonToken.EndObject:                      ValidateEnd(JsonToken.EndObject);                      break;                  case JsonToken.EndArray:                      ValidateEnd(JsonToken.EndArray);                      break;                  case JsonToken.EndConstructor:                      ValidateEnd(JsonToken.EndConstructor);                      break;                  case JsonToken.PropertyName:                      _currentState = State.Property;                        _currentPosition.PropertyName = (string)value;                      break;                  case JsonToken.Undefined:                  case JsonToken.Integer:                  case JsonToken.Float:                  case JsonToken.Boolean:                  case JsonToken.Null:                  case JsonToken.Date:                  case JsonToken.String:                  case JsonToken.Raw:                  case JsonToken.Bytes:                      SetPostValueState(updateIndex);                      break;              }
Missing Default,Newtonsoft.Json.Converters,ExpandoObjectConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\ExpandoObjectConverter.cs,ReadObject,The following switch statement is missing a default case: switch (reader.TokenType)                  {                      case JsonToken.PropertyName:                          string propertyName = reader.Value.ToString();                            if (!reader.Read())                              throw JsonSerializationException.Create(reader' "Unexpected end when reading ExpandoObject.");                            object v = ReadValue(reader);                            expandoObject[propertyName] = v;                          break;                      case JsonToken.Comment:                          break;                      case JsonToken.EndObject:                          return expandoObject;                  }
Missing Default,Newtonsoft.Json.Converters,RegexConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\RegexConverter.cs,ReadRegexString,The following switch statement is missing a default case: switch (c)                  {                      case 'i':                          options |= RegexOptions.IgnoreCase;                          break;                      case 'm':                          options |= RegexOptions.Multiline;                          break;                      case 's':                          options |= RegexOptions.Singleline;                          break;                      case 'x':                          options |= RegexOptions.ExplicitCapture;                          break;                  }
Missing Default,Newtonsoft.Json.Converters,RegexConverter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Converters\RegexConverter.cs,ReadRegexObject,The following switch statement is missing a default case: switch (reader.TokenType)                  {                      case JsonToken.PropertyName:                          string propertyName = reader.Value.ToString();                            if (!reader.Read())                              throw JsonSerializationException.Create(reader' "Unexpected end when reading Regex.");                            if (string.Equals(propertyName' PatternName' StringComparison.OrdinalIgnoreCase))                              pattern = (string)reader.Value;                          else if (string.Equals(propertyName' OptionsName' StringComparison.OrdinalIgnoreCase))                              options = serializer.Deserialize<RegexOptions>(reader);                          else                              reader.Skip();                          break;                      case JsonToken.Comment:                          break;                      case JsonToken.EndObject:                          if (pattern == null)                              throw JsonSerializationException.Create(reader' "Error deserializing Regex. No pattern found.");                            return new Regex(pattern' options ?? RegexOptions.None);                  }
Missing Default,Newtonsoft.Json.Linq,JToken,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JToken.cs,ToObject,The following switch statement is missing a default case: switch (typeCode)                  {                      case PrimitiveTypeCode.BooleanNullable:                          return (bool?)this;                      case PrimitiveTypeCode.Boolean:                          return (bool)this;                      case PrimitiveTypeCode.CharNullable:                          return (char?)this;                      case PrimitiveTypeCode.Char:                          return (char)this;                      case PrimitiveTypeCode.SByte:                          return (sbyte?)this;                      case PrimitiveTypeCode.SByteNullable:                          return (sbyte)this;                      case PrimitiveTypeCode.ByteNullable:                          return (byte?)this;                      case PrimitiveTypeCode.Byte:                          return (byte)this;                      case PrimitiveTypeCode.Int16Nullable:                          return (short?)this;                      case PrimitiveTypeCode.Int16:                          return (short)this;                      case PrimitiveTypeCode.UInt16Nullable:                          return (ushort?)this;                      case PrimitiveTypeCode.UInt16:                          return (ushort)this;                      case PrimitiveTypeCode.Int32Nullable:                          return (int?)this;                      case PrimitiveTypeCode.Int32:                          return (int)this;                      case PrimitiveTypeCode.UInt32Nullable:                          return (uint?)this;                      case PrimitiveTypeCode.UInt32:                          return (uint)this;                      case PrimitiveTypeCode.Int64Nullable:                          return (long?)this;                      case PrimitiveTypeCode.Int64:                          return (long)this;                      case PrimitiveTypeCode.UInt64Nullable:                          return (ulong?)this;                      case PrimitiveTypeCode.UInt64:                          return (ulong)this;                      case PrimitiveTypeCode.SingleNullable:                          return (float?)this;                      case PrimitiveTypeCode.Single:                          return (float)this;                      case PrimitiveTypeCode.DoubleNullable:                          return (double?)this;                      case PrimitiveTypeCode.Double:                          return (double)this;                      case PrimitiveTypeCode.DecimalNullable:                          return (decimal?)this;                      case PrimitiveTypeCode.Decimal:                          return (decimal)this;                      case PrimitiveTypeCode.DateTimeNullable:                          return (DateTime?)this;                      case PrimitiveTypeCode.DateTime:                          return (DateTime)this;  #if !NET20                      case PrimitiveTypeCode.DateTimeOffsetNullable:                          return (DateTimeOffset?)this;                      case PrimitiveTypeCode.DateTimeOffset:                          return (DateTimeOffset)this;  #endif                      case PrimitiveTypeCode.String:                          return (string)this;                      case PrimitiveTypeCode.GuidNullable:                          return (Guid?)this;                      case PrimitiveTypeCode.Guid:                          return (Guid)this;                      case PrimitiveTypeCode.Uri:                          return (Uri)this;                      case PrimitiveTypeCode.TimeSpanNullable:                          return (TimeSpan?)this;                      case PrimitiveTypeCode.TimeSpan:                          return (TimeSpan)this;  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                      case PrimitiveTypeCode.BigIntegerNullable:                          return ToBigIntegerNullable(this);                      case PrimitiveTypeCode.BigInteger:                          return ToBigInteger(this);  #endif                  }
Missing Default,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The following switch statement is missing a default case: switch (operation)                  {                      case ExpressionType.Add:                      case ExpressionType.AddAssign:                          result = i1 + i2;                          return true;                      case ExpressionType.Subtract:                      case ExpressionType.SubtractAssign:                          result = i1 - i2;                          return true;                      case ExpressionType.Multiply:                      case ExpressionType.MultiplyAssign:                          result = i1 * i2;                          return true;                      case ExpressionType.Divide:                      case ExpressionType.DivideAssign:                          result = i1 / i2;                          return true;                  }
Missing Default,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The following switch statement is missing a default case: switch (operation)                      {                          case ExpressionType.Add:                          case ExpressionType.AddAssign:                              result = d1 + d2;                              return true;                          case ExpressionType.Subtract:                          case ExpressionType.SubtractAssign:                              result = d1 - d2;                              return true;                          case ExpressionType.Multiply:                          case ExpressionType.MultiplyAssign:                              result = d1 * d2;                              return true;                          case ExpressionType.Divide:                          case ExpressionType.DivideAssign:                              result = d1 / d2;                              return true;                      }
Missing Default,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The following switch statement is missing a default case: switch (operation)                      {                          case ExpressionType.Add:                          case ExpressionType.AddAssign:                              result = d1 + d2;                              return true;                          case ExpressionType.Subtract:                          case ExpressionType.SubtractAssign:                              result = d1 - d2;                              return true;                          case ExpressionType.Multiply:                          case ExpressionType.MultiplyAssign:                              result = d1 * d2;                              return true;                          case ExpressionType.Divide:                          case ExpressionType.DivideAssign:                              result = d1 / d2;                              return true;                      }
Missing Default,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,Operation,The following switch statement is missing a default case: switch (operation)                      {                          case ExpressionType.Add:                          case ExpressionType.AddAssign:                              result = l1 + l2;                              return true;                          case ExpressionType.Subtract:                          case ExpressionType.SubtractAssign:                              result = l1 - l2;                              return true;                          case ExpressionType.Multiply:                          case ExpressionType.MultiplyAssign:                              result = l1 * l2;                              return true;                          case ExpressionType.Divide:                          case ExpressionType.DivideAssign:                              result = l1 / l2;                              return true;                      }
Missing Default,Newtonsoft.Json.Linq,JValue,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,WriteTo,The following switch statement is missing a default case: switch (_valueType)              {                  case JTokenType.Comment:                      writer.WriteComment((_value != null) ? _value.ToString() : null);                      return;                  case JTokenType.Raw:                      writer.WriteRawValue((_value != null) ? _value.ToString() : null);                      return;                  case JTokenType.Null:                      writer.WriteNull();                      return;                  case JTokenType.Undefined:                      writer.WriteUndefined();                      return;                  case JTokenType.Integer:  #if !(NET20 || NET35 || PORTABLE40 || PORTABLE)                      if (_value is BigInteger)                          writer.WriteValue((BigInteger)_value);                      else  #endif                          writer.WriteValue(Convert.ToInt64(_value' CultureInfo.InvariantCulture));                      return;                  case JTokenType.Float:                      if (_value is decimal)                          writer.WriteValue((decimal)_value);                      else if (_value is double)                          writer.WriteValue((double)_value);                      else if (_value is float)                          writer.WriteValue((float)_value);                      else                          writer.WriteValue(Convert.ToDouble(_value' CultureInfo.InvariantCulture));                      return;                  case JTokenType.String:                      writer.WriteValue((_value != null) ? _value.ToString() : null);                      return;                  case JTokenType.Boolean:                      writer.WriteValue(Convert.ToBoolean(_value' CultureInfo.InvariantCulture));                      return;                  case JTokenType.Date:  #if !NET20                      if (_value is DateTimeOffset)                          writer.WriteValue((DateTimeOffset)_value);                      else  #endif                          writer.WriteValue(Convert.ToDateTime(_value' CultureInfo.InvariantCulture));                      return;                  case JTokenType.Bytes:                      writer.WriteValue((byte[])_value);                      return;                  case JTokenType.Guid:                  case JTokenType.Uri:                  case JTokenType.TimeSpan:                      writer.WriteValue((_value != null) ? _value.ToString() : null);                      return;              }
Missing Default,Newtonsoft.Json.Linq,JValueDynamicProxy,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Linq\JValue.cs,TryBinaryOperation,The following switch statement is missing a default case: switch (binder.Operation)                  {                      case ExpressionType.Equal:                          result = (Compare(instance.Type' instance.Value' compareValue) == 0);                          return true;                      case ExpressionType.NotEqual:                          result = (Compare(instance.Type' instance.Value' compareValue) != 0);                          return true;                      case ExpressionType.GreaterThan:                          result = (Compare(instance.Type' instance.Value' compareValue) > 0);                          return true;                      case ExpressionType.GreaterThanOrEqual:                          result = (Compare(instance.Type' instance.Value' compareValue) >= 0);                          return true;                      case ExpressionType.LessThan:                          result = (Compare(instance.Type' instance.Value' compareValue) < 0);                          return true;                      case ExpressionType.LessThanOrEqual:                          result = (Compare(instance.Type' instance.Value' compareValue) <= 0);                          return true;                      case ExpressionType.Add:                      case ExpressionType.AddAssign:                      case ExpressionType.Subtract:                      case ExpressionType.SubtractAssign:                      case ExpressionType.Multiply:                      case ExpressionType.MultiplyAssign:                      case ExpressionType.Divide:                      case ExpressionType.DivideAssign:                          if (Operation(binder.Operation' instance.Value' compareValue' out result))                          {                              result = new JValue(result);                              return true;                          }                          break;                  }
Missing Default,Newtonsoft.Json.Schema,JsonSchemaBuilder,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Schema\JsonSchemaBuilder.cs,ProcessSchemaProperties,The following switch statement is missing a default case: switch (property.Key)                  {                      case JsonSchemaConstants.TypePropertyName:                          CurrentSchema.Type = ProcessType(property.Value);                          break;                      case JsonSchemaConstants.IdPropertyName:                          CurrentSchema.Id = (string)property.Value;                          break;                      case JsonSchemaConstants.TitlePropertyName:                          CurrentSchema.Title = (string)property.Value;                          break;                      case JsonSchemaConstants.DescriptionPropertyName:                          CurrentSchema.Description = (string)property.Value;                          break;                      case JsonSchemaConstants.PropertiesPropertyName:                          CurrentSchema.Properties = ProcessProperties(property.Value);                          break;                      case JsonSchemaConstants.ItemsPropertyName:                          ProcessItems(property.Value);                          break;                      case JsonSchemaConstants.AdditionalPropertiesPropertyName:                          ProcessAdditionalProperties(property.Value);                          break;                      case JsonSchemaConstants.AdditionalItemsPropertyName:                          ProcessAdditionalItems(property.Value);                          break;                      case JsonSchemaConstants.PatternPropertiesPropertyName:                          CurrentSchema.PatternProperties = ProcessProperties(property.Value);                          break;                      case JsonSchemaConstants.RequiredPropertyName:                          CurrentSchema.Required = (bool)property.Value;                          break;                      case JsonSchemaConstants.RequiresPropertyName:                          CurrentSchema.Requires = (string)property.Value;                          break;                      case JsonSchemaConstants.MinimumPropertyName:                          CurrentSchema.Minimum = (double)property.Value;                          break;                      case JsonSchemaConstants.MaximumPropertyName:                          CurrentSchema.Maximum = (double)property.Value;                          break;                      case JsonSchemaConstants.ExclusiveMinimumPropertyName:                          CurrentSchema.ExclusiveMinimum = (bool)property.Value;                          break;                      case JsonSchemaConstants.ExclusiveMaximumPropertyName:                          CurrentSchema.ExclusiveMaximum = (bool)property.Value;                          break;                      case JsonSchemaConstants.MaximumLengthPropertyName:                          CurrentSchema.MaximumLength = (int)property.Value;                          break;                      case JsonSchemaConstants.MinimumLengthPropertyName:                          CurrentSchema.MinimumLength = (int)property.Value;                          break;                      case JsonSchemaConstants.MaximumItemsPropertyName:                          CurrentSchema.MaximumItems = (int)property.Value;                          break;                      case JsonSchemaConstants.MinimumItemsPropertyName:                          CurrentSchema.MinimumItems = (int)property.Value;                          break;                      case JsonSchemaConstants.DivisibleByPropertyName:                          CurrentSchema.DivisibleBy = (double)property.Value;                          break;                      case JsonSchemaConstants.DisallowPropertyName:                          CurrentSchema.Disallow = ProcessType(property.Value);                          break;                      case JsonSchemaConstants.DefaultPropertyName:                          CurrentSchema.Default = property.Value.DeepClone();                          break;                      case JsonSchemaConstants.HiddenPropertyName:                          CurrentSchema.Hidden = (bool)property.Value;                          break;                      case JsonSchemaConstants.ReadOnlyPropertyName:                          CurrentSchema.ReadOnly = (bool)property.Value;                          break;                      case JsonSchemaConstants.FormatPropertyName:                          CurrentSchema.Format = (string)property.Value;                          break;                      case JsonSchemaConstants.PatternPropertyName:                          CurrentSchema.Pattern = (string)property.Value;                          break;                      case JsonSchemaConstants.EnumPropertyName:                          ProcessEnum(property.Value);                          break;                      case JsonSchemaConstants.ExtendsPropertyName:                          ProcessExtends(property.Value);                          break;                      case JsonSchemaConstants.UniqueItemsPropertyName:                          CurrentSchema.UniqueItems = (bool)property.Value;                          break;                  }
Missing Default,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The following switch statement is missing a default case: switch (contract.ContractType)              {                  case JsonContractType.Object:                  {                      bool createdFromNonDefaultCreator = false;                      JsonObjectContract objectContract = (JsonObjectContract)contract;                      object targetObject;                      // check that if type name handling is being used that the existing value is compatible with the specified type                      if (existingValue != null && (resolvedObjectType == objectType || resolvedObjectType.IsAssignableFrom(existingValue.GetType())))                          targetObject = existingValue;                      else                          targetObject = CreateNewObject(reader' objectContract' member' containerMember' id' out createdFromNonDefaultCreator);                        // don't populate if read from non-default creator because the object has already been read                      if (createdFromNonDefaultCreator)                          return targetObject;                        return PopulateObject(targetObject' reader' objectContract' member' id);                  }                  case JsonContractType.Primitive:                  {                      JsonPrimitiveContract primitiveContract = (JsonPrimitiveContract)contract;                      // if the content is inside $value then read past it                      if (Serializer.MetadataPropertyHandling != MetadataPropertyHandling.Ignore                          && reader.TokenType == JsonToken.PropertyName                          && string.Equals(reader.Value.ToString()' JsonTypeReflector.ValuePropertyName' StringComparison.Ordinal))                      {                          CheckedRead(reader);                            // the token should not be an object because the $type value could have been included in the object                          // without needing the $value property                          if (reader.TokenType == JsonToken.StartObject)                              throw JsonSerializationException.Create(reader' "Unexpected token when deserializing primitive value: " + reader.TokenType);                            object value = CreateValueInternal(reader' resolvedObjectType' primitiveContract' member' null' null' existingValue);                            CheckedRead(reader);                          return value;                      }                      break;                  }                  case JsonContractType.Dictionary:                  {                      JsonDictionaryContract dictionaryContract = (JsonDictionaryContract)contract;                      object targetDictionary;                        if (existingValue == null)                      {                          bool createdFromNonDefaultCreator;                          IDictionary dictionary = CreateNewDictionary(reader' dictionaryContract' out createdFromNonDefaultCreator);                            if (createdFromNonDefaultCreator)                          {                              if (id != null)                                  throw JsonSerializationException.Create(reader' "Cannot preserve reference to readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType));                                if (contract.OnSerializingCallbacks.Count > 0)                                  throw JsonSerializationException.Create(reader' "Cannot call OnSerializing on readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType));                                if (contract.OnErrorCallbacks.Count > 0)                                  throw JsonSerializationException.Create(reader' "Cannot call OnError on readonly list' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType));                                if (!dictionaryContract.HasParametrizedCreator)                                  throw JsonSerializationException.Create(reader' "Cannot deserialize readonly or fixed size dictionary: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType));                          }                            PopulateDictionary(dictionary' reader' dictionaryContract' member' id);                            if (createdFromNonDefaultCreator)                          {                              return dictionaryContract.ParametrizedCreator(dictionary);                          }                          else if (dictionary is IWrappedDictionary)                          {                              return ((IWrappedDictionary)dictionary).UnderlyingDictionary;                          }                            targetDictionary = dictionary;                      }                      else                      {                          targetDictionary = PopulateDictionary(dictionaryContract.ShouldCreateWrapper ? dictionaryContract.CreateWrapper(existingValue) : (IDictionary)existingValue' reader' dictionaryContract' member' id);                      }                        return targetDictionary;                  }  #if !(NET35 || NET20 || PORTABLE40)                  case JsonContractType.Dynamic:                      JsonDynamicContract dynamicContract = (JsonDynamicContract)contract;                      return CreateDynamic(reader' dynamicContract' member' id);  #endif  #if !(NETFX_CORE || PORTABLE40 || PORTABLE)                  case JsonContractType.Serializable:                      JsonISerializableContract serializableContract = (JsonISerializableContract)contract;                      return CreateISerializable(reader' serializableContract' member' id);  #endif              }
Missing Default,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,CheckPropertyName,The following switch statement is missing a default case: switch (memberName)                  {                      case JsonTypeReflector.IdPropertyName:                      case JsonTypeReflector.RefPropertyName:                      case JsonTypeReflector.TypePropertyName:                      case JsonTypeReflector.ArrayValuesPropertyName:                          reader.Skip();                          return true;                  }
Missing Default,Newtonsoft.Json.Serialization,JsonSerializerInternalReader,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalReader.cs,EndObject,The following switch statement is missing a default case: switch (presence)                              {                                  case PropertyPresence.None:                                      if (resolvedRequired == Required.AllowNull || resolvedRequired == Required.Always)                                          throw JsonSerializationException.Create(reader' "Required property '{0}' not found in JSON.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName));                                        if (property.PropertyContract == null)                                          property.PropertyContract = GetContractSafe(property.PropertyType);                                        if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate) && property.Writable && !property.Ignored)                                          property.ValueProvider.SetValue(newObject' EnsureType(reader' property.GetResolvedDefaultValue()' CultureInfo.InvariantCulture' property.PropertyContract' property.PropertyType));                                      break;                                  case PropertyPresence.Null:                                      if (resolvedRequired == Required.Always)                                          throw JsonSerializationException.Create(reader' "Required property '{0}' expects a value but got null.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName));                                      break;                              }
Missing Default,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The following switch statement is missing a default case: switch (valueContract.ContractType)  				{  					case JsonContractType.Object:  						SerializeObject(writer' value' (JsonObjectContract)valueContract' member' containerContract' containerProperty);  						break;  					case JsonContractType.Array:  						JsonArrayContract arrayContract = (JsonArrayContract)valueContract;  						if (!arrayContract.IsMultidimensionalArray)  							SerializeList(writer' (IEnumerable)value' arrayContract' member' containerContract' containerProperty);  						else  							SerializeMultidimensionalArray(writer' (Array)value' arrayContract' member' containerContract' containerProperty);  						break;  					case JsonContractType.Primitive:  						SerializePrimitive(writer' value' (JsonPrimitiveContract)valueContract' member' containerContract' containerProperty);  						break;  					case JsonContractType.String:  						SerializeString(writer' value' (JsonStringContract)valueContract);  						break;  					case JsonContractType.Dictionary:  						JsonDictionaryContract dictionaryContract = (JsonDictionaryContract)valueContract;  						SerializeDictionary(writer' (value is IDictionary) ? (IDictionary)value : dictionaryContract.CreateWrapper(value)' dictionaryContract' member' containerContract' containerProperty);  						break;  	#if !(NET35 || NET20 || PORTABLE40)  															case JsonContractType.Dynamic:                      SerializeDynamic(writer' (IDynamicMetaObjectProvider)value' (JsonDynamicContract)valueContract' member' containerContract' containerProperty);                      break;  	#endif  	#if !(NETFX_CORE || PORTABLE40 || PORTABLE)  					case JsonContractType.Serializable:  						SerializeISerializable(writer' (ISerializable)value' (JsonISerializableContract)valueContract' member' containerContract' containerProperty);  						break;  	#endif  					case JsonContractType.Linq:  						((JToken)value).WriteTo(writer' Serializer.Converters.ToArray());  						break;  				}
Missing Default,Newtonsoft.Json.Serialization,JsonSerializerInternalWriter,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The following switch statement is missing a default case: switch (referenceLoopHandling.GetValueOrDefault(Serializer._referenceLoopHandling))                  {                      case ReferenceLoopHandling.Error:                          throw JsonSerializationException.Create(null' writer.ContainerPath' message' null);                      case ReferenceLoopHandling.Ignore:                          if (TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose)                              TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' message + ". Skipping serializing self referenced value.")' null);                            return false;                      case ReferenceLoopHandling.Serialize:                          if (TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose)                              TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' message + ". Serializing self referenced value.")' null);                            return true;                  }
Missing Default,Newtonsoft.Json.Utilities,DateTimeParser,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeParser.cs,ParseZone,The following switch statement is missing a default case: switch (ch)                          {                              case '-':                                  Zone = ParserTimeZone.LocalWestOfUtc;                                  start += Lz_zz;                                  break;                                case '+':                                  Zone = ParserTimeZone.LocalEastOfUtc;                                  start += Lz_zz;                                  break;                          }
Missing Default,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,SwitchToLocalTime,The following switch statement is missing a default case: switch (value.Kind)              {                  case DateTimeKind.Unspecified:                      return new DateTime(value.Ticks' DateTimeKind.Local);                    case DateTimeKind.Utc:                      return value.ToLocalTime();                    case DateTimeKind.Local:                      return value;              }
Missing Default,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,SwitchToUtcTime,The following switch statement is missing a default case: switch (value.Kind)              {                  case DateTimeKind.Unspecified:                      return new DateTime(value.Ticks' DateTimeKind.Utc);                    case DateTimeKind.Utc:                      return value;                    case DateTimeKind.Local:                      return value.ToUniversalTime();              }
Missing Default,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,TryParseDateIso,The following switch statement is missing a default case: switch (dateTimeParser.Zone)                  {                      case ParserTimeZone.Utc:                          d = new DateTime(d.Ticks' DateTimeKind.Utc);                          break;                        case ParserTimeZone.LocalWestOfUtc:                      {                          TimeSpan offset = new TimeSpan(dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);                          ticks = d.Ticks + offset.Ticks;                          if (ticks <= DateTime.MaxValue.Ticks)                          {                              d = new DateTime(ticks' DateTimeKind.Utc).ToLocalTime();                          }                          else                          {                              ticks += d.GetUtcOffset().Ticks;                              if (ticks > DateTime.MaxValue.Ticks)                                  ticks = DateTime.MaxValue.Ticks;                                d = new DateTime(ticks' DateTimeKind.Local);                          }                          break;                      }                      case ParserTimeZone.LocalEastOfUtc:                      {                          TimeSpan offset = new TimeSpan(dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);                          ticks = d.Ticks - offset.Ticks;                          if (ticks >= DateTime.MinValue.Ticks)                          {                              d = new DateTime(ticks' DateTimeKind.Utc).ToLocalTime();                          }                          else                          {                              ticks += d.GetUtcOffset().Ticks;                              if (ticks < DateTime.MinValue.Ticks)                                  ticks = DateTime.MinValue.Ticks;                                d = new DateTime(ticks' DateTimeKind.Local);                          }                          break;                      }                  }
Missing Default,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following switch statement is missing a default case: switch (kind)                  {                      case DateTimeKind.Unspecified:                          if (value != DateTime.MaxValue && value != DateTime.MinValue)                              pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                  }
Missing Default,Newtonsoft.Json.Utilities,DateTimeUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following switch statement is missing a default case: switch (kind)                  {                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' offset ?? value.GetUtcOffset()' format);                          break;                      case DateTimeKind.Utc:                          chars[pos++] = 'Z';                          break;                  }
Missing Default,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,GetAssemblyDelimiterIndex,The following switch statement is missing a default case: switch (current)                  {                      case '[':                          scope++;                          break;                      case ']':                          scope--;                          break;                      case ''':                          if (scope == 0)                              return i;                          break;                  }
Missing Default,Newtonsoft.Json.Utilities,ReflectionUtils,C:\repos\worldexplorer_SquareOne\Json6r6-src\Newtonsoft.Json\Utilities\ReflectionUtils.cs,GetDefaultValue,The following switch statement is missing a default case: switch (ConvertUtils.GetTypeCode(type))              {                  case PrimitiveTypeCode.Boolean:                      return false;                  case PrimitiveTypeCode.Char:                  case PrimitiveTypeCode.SByte:                  case PrimitiveTypeCode.Byte:                  case PrimitiveTypeCode.Int16:                  case PrimitiveTypeCode.UInt16:                  case PrimitiveTypeCode.Int32:                  case PrimitiveTypeCode.UInt32:                      return 0;                  case PrimitiveTypeCode.Int64:                  case PrimitiveTypeCode.UInt64:                      return 0L;                  case PrimitiveTypeCode.Single:                      return 0f;                  case PrimitiveTypeCode.Double:                      return 0.0;                  case PrimitiveTypeCode.Decimal:                      return 0m;                  case PrimitiveTypeCode.DateTime:                      return new DateTime();  #if !(PORTABLE || PORTABLE40 || NET35 || NET20)                  case PrimitiveTypeCode.BigInteger:                      return new BigInteger();  #endif                  case PrimitiveTypeCode.Guid:                      return new Guid();  #if !NET20                  case PrimitiveTypeCode.DateTimeOffset:                      return new DateTimeOffset();  #endif              }
