Implementation smell,Namespace,Class,File,Method,Description
Long Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,NeedCurlyBracket,The method has 73 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The method has 171 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketBackward,The method has 94 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketForward,The method has 93 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,NeedCurlyBracket,The method has 73 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The method has 75 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketBackward,The method has 94 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketForward,The method has 79 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Formatting,CSharpIndentationReformatter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\Indentation.cs,Step,The method has 257 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The method has 98 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MarkTokensInLine,The method has 90 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The method has 225 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MatchExpr,The method has 97 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Highlighting,HighlightingDefinitionParser,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingDefinitionParser.cs,Parse,The method has 73 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,The method has 92 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The method has 80 lines of code.
Long Method,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The method has 81 lines of code.
Long Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,The method has 69 lines of code.
Long Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The method has 159 lines of code.
Long Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetLogicalColumnInternal,The method has 60 lines of code.
Long Method,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnMouseDown,The method has 88 lines of code.
Long Method,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,The method has 67 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The method has 62 lines of code.
Long Method,DigitalRune.Windows.TextEditor.Selection,SelectionManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Selection\SelectionManager.cs,ExtendSelection,The method has 65 lines of code.
Complex Method,DigitalRune.Windows.TextEditor.Actions,Tab,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,InsertTabAtCaretPosition,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor.Actions,ShiftTab,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,RemoveTabs,Cyclomatic complexity of the method is 11
Complex Method,DigitalRune.Windows.TextEditor.Actions,ToggleLineComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Actions,ToggleBlockComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,FindSelectedCommentRegion,Cyclomatic complexity of the method is 11
Complex Method,DigitalRune.Windows.TextEditor.Actions,WordBackspace,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Actions,ToggleFolding,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\FoldActions.cs,Execute,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBookmark,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawArrow,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor.Document,DefaultDocument,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\DefaultDocument.cs,UpdateSegmentListOnDocumentChange,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor.Document,LineManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineManager.cs,NextDelimiter,Cyclomatic complexity of the method is 10
Complex Method,DigitalRune.Windows.TextEditor.Document,LineSegmentTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineSegmentTree.cs,GetNodeByOffset,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor.Document,LineSegment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineSegment.cs,RemovedLinePart,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Document,LineSegment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineSegment.cs,SplitTo,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,MarkBlocks,Cyclomatic complexity of the method is 27
Complex Method,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,MarkBlock,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,FindAndMarkRegions,Cyclomatic complexity of the method is 15
Complex Method,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,MarkBlocks,Cyclomatic complexity of the method is 10
Complex Method,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,MarkBlock,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor.Folding,XmlFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\XmlFoldingStrategy.cs,GenerateFolds,Cyclomatic complexity of the method is 13
Complex Method,DigitalRune.Windows.TextEditor.Folding,FoldingManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\FoldingManager.cs,GetFoldsByStartAfterColumn,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Folding,FoldingManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\FoldingManager.cs,GetFoldsByEndAfterColumn,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,NeedCurlyBracket,Cyclomatic complexity of the method is 40
Complex Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInsideStringOrComment,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,Cyclomatic complexity of the method is 47
Complex Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInNonVerbatimString,Cyclomatic complexity of the method is 11
Complex Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,GetStartType,Cyclomatic complexity of the method is 21
Complex Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketBackward,Cyclomatic complexity of the method is 40
Complex Method,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketForward,Cyclomatic complexity of the method is 40
Complex Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,NeedCurlyBracket,Cyclomatic complexity of the method is 40
Complex Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,IsInsideStringOrComment,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,Cyclomatic complexity of the method is 29
Complex Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,IsInNonVerbatimString,Cyclomatic complexity of the method is 11
Complex Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,GetStartType,Cyclomatic complexity of the method is 21
Complex Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketBackward,Cyclomatic complexity of the method is 40
Complex Method,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketForward,Cyclomatic complexity of the method is 36
Complex Method,DigitalRune.Windows.TextEditor.Formatting,CSharpIndentationReformatter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\Indentation.cs,Step,Cyclomatic complexity of the method is 108
Complex Method,DigitalRune.Windows.TextEditor.Formatting,DefaultFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\DefaultFormattingStrategy.cs,SmartReplaceLine,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor.Formatting,DefaultFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\DefaultFormattingStrategy.cs,IndentLine,Cyclomatic complexity of the method is 11
Complex Method,DigitalRune.Windows.TextEditor.Formatting,DefaultFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\DefaultFormattingStrategy.cs,SearchBracketBackward,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor.Formatting,DefaultFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\DefaultFormattingStrategy.cs,SearchBracketForward,Cyclomatic complexity of the method is 10
Complex Method,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,FormatLine,Cyclomatic complexity of the method is 12
Complex Method,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,Cyclomatic complexity of the method is 24
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ResolveRuleSetReferences,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MarkTokens,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MarkTokensInLine,Cyclomatic complexity of the method is 22
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MarkTokens,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,Cyclomatic complexity of the method is 58
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,PushCurWord,Cyclomatic complexity of the method is 15
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,GetRegString,Cyclomatic complexity of the method is 13
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MatchExpr,Cyclomatic complexity of the method is 14
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,HighlightColor,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,HighlightColor,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,HighlightingDefinitionParser,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingDefinitionParser.cs,Parse,Cyclomatic complexity of the method is 20
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,HighlightRuleSet,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightRuleSet.cs,HighlightRuleSet,Cyclomatic complexity of the method is 17
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,Span,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\Span.cs,Span,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Highlighting,FileSyntaxModeProvider,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\SyntaxModes\FileSyntaxModeProvider.cs,ScanDirectory,Cyclomatic complexity of the method is 11
Complex Method,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnInsert,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,RemoveNode,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnDelete,Cyclomatic complexity of the method is 10
Complex Method,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,Cyclomatic complexity of the method is 32
Complex Method,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,OpenStream,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,Cyclomatic complexity of the method is 18
Complex Method,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,FindPrevWordStart,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,Cyclomatic complexity of the method is 38
Complex Method,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,CommitUpdateRequested,Cyclomatic complexity of the method is 27
Complex Method,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,MeasurePrintingHeight,Cyclomatic complexity of the method is 11
Complex Method,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,DrawLine,Cyclomatic complexity of the method is 12
Complex Method,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,LoadFile,Cyclomatic complexity of the method is 21
Complex Method,DigitalRune.Windows.TextEditor,Caret,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Caret.cs,CreateCaret,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor,Caret,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Caret.cs,OnPositionChanged,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,SearchMatchingBracket,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,OnMouseMove,Cyclomatic complexity of the method is 10
Complex Method,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,OnPaint,Cyclomatic complexity of the method is 11
Complex Method,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,OnKeyPress,Cyclomatic complexity of the method is 14
Complex Method,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,Paste,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,Cyclomatic complexity of the method is 15
Complex Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,Cyclomatic complexity of the method is 13
Complex Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,Cyclomatic complexity of the method is 38
Complex Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetVisualColumnFast,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetLogicalColumn,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetLogicalColumnInternal,Cyclomatic complexity of the method is 24
Complex Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,CountColumns,Cyclomatic complexity of the method is 18
Complex Method,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetDrawingXPos,Cyclomatic complexity of the method is 10
Complex Method,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnMouseDown,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnToolTipRequest,Cyclomatic complexity of the method is 10
Complex Method,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,TextAreaMouseMove,Cyclomatic complexity of the method is 11
Complex Method,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,ExtendSelectionToMouse,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,DoubleClickSelectionExtend,Cyclomatic complexity of the method is 13
Complex Method,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnMouseDown,Cyclomatic complexity of the method is 16
Complex Method,DigitalRune.Windows.TextEditor,IconMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\IconMargin.cs,OnMouseDown,Cyclomatic complexity of the method is 9
Complex Method,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,Cyclomatic complexity of the method is 12
Complex Method,DigitalRune.Windows.TextEditor,TextAreaDragDropHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaDragDropHandler.cs,OnDragDrop,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor,BracketHighlightingScheme,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\BracketHighlighter.cs,GetHighlight,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionWindow.cs,SetLocation,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,Cyclomatic complexity of the method is 12
Complex Method,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,ProcessKeyEvent,Cyclomatic complexity of the method is 7
Complex Method,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,ProcessTextAreaKey,Cyclomatic complexity of the method is 24
Complex Method,DigitalRune.Windows.TextEditor.Insight,AbstractInsightDataProvider,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Insight\AbstractInsightDataProvider.cs,CaretOffsetChanged,Cyclomatic complexity of the method is 32
Complex Method,DigitalRune.Windows.TextEditor.Insight,InsightWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Insight\InsightWindow.cs,ProcessTextAreaKey,Cyclomatic complexity of the method is 8
Complex Method,DigitalRune.Windows.TextEditor.Selection,SelectionManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Selection\SelectionManager.cs,ExtendSelection,Cyclomatic complexity of the method is 10
Complex Method,DigitalRune.Windows.TextEditor.Selection,SelectionManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Selection\SelectionManager.cs,RemoveSelectedText,Cyclomatic complexity of the method is 9
Long Parameter List,DigitalRune.Windows.TextEditor.Actions,Tab,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,InsertTabs,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Actions,ShiftTab,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,RemoveTabs,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Actions,ToggleLineComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,RemoveCommentAt,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Actions,ToggleLineComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,SetCommentAt,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Actions,ToggleLineComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,ShouldComment,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Actions,ToggleBlockComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,FindSelectedCommentRegion,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Actions,ToggleBlockComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,SetCommentAt,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,BlockCommentRegion,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Document,DocumentEventArgs,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\DocumentEventArgs.cs,DocumentEventArgs,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,MarkBlock,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Folding,Fold,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\Fold.cs,Fold,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Folding,Fold,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\Fold.cs,Fold,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Folding,Fold,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\Fold.cs,Fold,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Folding,Fold,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\Fold.cs,Fold,The method has 7 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Folding,XmlFoldStart,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\XmlFoldingStrategy.cs,XmlFoldStart,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Folding,XmlFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\XmlFoldingStrategy.cs,CreateElementFold,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLine,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketBackward,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketForward,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLine,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketBackward,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketForward,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,DefaultFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\DefaultFormattingStrategy.cs,FormatLine,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,DefaultFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\DefaultFormattingStrategy.cs,SearchBracketBackward,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,DefaultFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\DefaultFormattingStrategy.cs,SearchBracketForward,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,IFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\IFormattingStrategy.cs,FormatLine,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,IFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\IFormattingStrategy.cs,SearchBracketBackward,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,IFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\IFormattingStrategy.cs,SearchBracketForward,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,FormatLine,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,GetColor,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,GetColor,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,OverrideSpan,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,GetRegString,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MatchExpr,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MatchExpr,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,HighlightBackground,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightBackground.cs,HighlightBackground,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,HighlightBackground,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightBackground.cs,HighlightBackground,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,HighlightColor,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,HighlightColor,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,IHighlightingStrategyUsingRuleSets,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\IHighlightingStrategy.cs,GetColor,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Highlighting,TextWord,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\TextWord.cs,TextWord,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Markers,Marker,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Markers\Marker.cs,Marker,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Markers,Marker,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Markers\Marker.cs,Marker,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,CheckNodeProperties,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,FindOpeningBracket,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,FindClosingBracket,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,CompareSegment,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,CompareSegment,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,CompareSegment,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,Advance,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,DrawLine,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,LoadFile,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,Ime,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Ime.cs,SendMessage,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,Ime,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Ime.cs,SendMessage,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetTipSize,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetLeftHandSideTipSize,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawTip,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetLeftHandSideDrawingSizeHelpTipFromCombinedDescription,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetDrawingSizeHelpTipFromCombinedDescription,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawHelpTipFromCombinedDescription,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawFixedWidthHelpTipFromCombinedDescription,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetDrawingSizeDrawHelpTip,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetLeftHandSideDrawingSizeDrawHelpTip,The method has 7 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawHelpTip,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawFixedWidthHelpTip,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,Caret,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Caret.cs,CreateCaret,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintFoldingText,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetMarkerBrushAt,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawDocumentWord,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetLogicalColumnInternal,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,CountColumns,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawString,The method has 6 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawSpaceMarker,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTabMarker,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawEOLMarker,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,IconMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\IconMargin.cs,IsLineInsideRegion,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,DrawFolds,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionDataProvider,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionDataProvider.cs,InsertAction,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,ShowCompletionWindow,The method has 8 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,CompletionWindow,The method has 7 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Completion,ICompletionDataProvider,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\ICompletionDataProvider.cs,InsertAction,The method has 4 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Completion,Snippet,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Snippets\Snippet.cs,ShowTemplateCompletionWindow,The method has 5 parameters.
Long Parameter List,DigitalRune.Windows.TextEditor.Undo,UndoableReplace,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Undo\UndoableReplace.cs,UndoableReplace,The method has 4 parameters.
Long Statement,DigitalRune.Windows.TextEditor.Actions,CaretUp,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\CaretActions.cs,Execute,The length of the statement  "		Point pos = new Point (xpos' textArea.TextView.DrawingPosition.Y + (visualLine - 1) * textArea.TextView.LineHeight - textArea.TextView.TextArea.VirtualTop.Y); " is 158.
Long Statement,DigitalRune.Windows.TextEditor.Actions,CaretDown,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\CaretActions.cs,Execute,The length of the statement  "		Point pos = new Point (textArea.TextView.GetDrawingXPos (lineNr' position.X)' textArea.TextView.DrawingPosition.Y + (visualLine + 1) * textArea.TextView.LineHeight - textArea.TextView.TextArea.VirtualTop.Y); " is 207.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ScrollLineUp,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\CaretActions.cs,Execute,The length of the statement  "	textArea.MotherTextAreaControl.VScrollBar.Value = Math.Max (textArea.MotherTextAreaControl.VScrollBar.Minimum' textArea.VirtualTop.Y - textArea.TextView.LineHeight); " is 165.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ScrollLineDown,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\CaretActions.cs,Execute,The length of the statement  "	textArea.MotherTextAreaControl.VScrollBar.Value = Math.Min (textArea.MotherTextAreaControl.VScrollBar.Maximum' textArea.VirtualTop.Y + textArea.TextView.LineHeight); " is 165.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ShiftTab,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,RemoveTabs,The length of the statement  "					for (leadingSpaces = 1; leadingSpaces < line.Length && document.GetCharAt (line.Offset + leadingSpaces) == ' '; leadingSpaces++) { " is 130.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ShiftTab,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "		textArea.Caret.DesiredColumn = (remainder == 0) ? Math.Max (0' currentColumn - tabIndent) : Math.Max (0' currentColumn - remainder); " is 132.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ToggleComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "	} else if (textArea.Document.HighlightingStrategy.Properties.ContainsKey ("BlockCommentBegin") && textArea.Document.HighlightingStrategy.Properties.ContainsKey ("BlockCommentEnd")) { " is 182.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ToggleBlockComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "	BlockCommentRegion commentRegion = FindSelectedCommentRegion (textArea.Document' commentStart' commentEnd' selectionStartOffset' selectionEndOffset); " is 149.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ToggleBlockComment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,FindSelectedCommentRegion,The length of the statement  "			int commentEndBeforeStartOffset = text.IndexOf (commentEnd' commentStartOffset' selectionStartOffset - commentStartOffset); " is 123.
Long Statement,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Equals,The length of the statement  "	return commentStart == other.commentStart && commentEnd == other.commentEnd && startOffset == other.startOffset && endOffset == other.endOffset; " is 144.
Long Statement,DigitalRune.Windows.TextEditor.Actions,Backspace,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "				textArea.Document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.PositionToEnd' new TextLocation (0' curLineNr - 1))); " is 125.
Long Statement,DigitalRune.Windows.TextEditor.Actions,Backspace,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "				textArea.Document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.PositionToLineEnd' new TextLocation (textArea.Caret.Offset - textArea.Document.GetLineSegment (curLineNr).Offset' curLineNr))); " is 199.
Long Statement,DigitalRune.Windows.TextEditor.Actions,Delete,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "					textArea.Document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.PositionToEnd' new TextLocation (0' curLineNr))); " is 121.
Long Statement,DigitalRune.Windows.TextEditor.Actions,MovePageDown,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "	int requestedLineNumber = Math.Min (textArea.Document.GetNextVisibleLineAfter (curLineNr' textArea.TextView.NumberOfVisibleLines)' textArea.Document.TotalNumberOfLines - 1); " is 173.
Long Statement,DigitalRune.Windows.TextEditor.Actions,MovePageUp,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "	int requestedLineNumber = Math.Max (textArea.Document.GetNextVisibleLineBefore (curLineNr' textArea.TextView.NumberOfVisibleLines)' 0); " is 135.
Long Statement,DigitalRune.Windows.TextEditor.Actions,Return,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "		textArea.Document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.PositionToEnd' new TextLocation (0' curLineNr - 1))); " is 125.
Long Statement,DigitalRune.Windows.TextEditor.Actions,WordBackspace,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "	textArea.Document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.PositionToEnd' new TextLocation (0' textArea.Document.GetLineNumberForOffset (textArea.Caret.Offset)))); " is 176.
Long Statement,DigitalRune.Windows.TextEditor.Actions,DeleteWord,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "	textArea.Document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.PositionToEnd' new TextLocation (0' textArea.Document.GetLineNumberForOffset (textArea.Caret.Offset)))); " is 176.
Long Statement,DigitalRune.Windows.TextEditor.Actions,SelectWholeDocument,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\SelectionActions.cs,Execute,The length of the statement  "		if (textArea.SelectionManager.Selections [0].StartPosition == startPoint && textArea.SelectionManager.Selections [0].EndPosition == endPoint) { " is 143.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ToggleFolding,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\FoldActions.cs,Execute,The length of the statement  "				if (new TextLocation (folds [i].StartColumn' folds [i].StartLine) > new TextLocation (innerMost.StartColumn' innerMost.StartLine)) { " is 132.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ConvertLeadingTabsToSpaces,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\FormatActions.cs,Convert,The length of the statement  "			for (whiteSpace = 0; whiteSpace < line.Length && Char.IsWhiteSpace (document.GetCharAt (line.Offset + whiteSpace)); whiteSpace++) { " is 131.
Long Statement,DigitalRune.Windows.TextEditor.Actions,ConvertLeadingSpacesToTabs,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\FormatActions.cs,Convert,The length of the statement  "			string newLine = TextHelper.LeadingWhitespaceToTabs (document.GetText (line.Offset' line.Length)' document.TextEditorProperties.TabIndent); " is 139.
Long Statement,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawArrow,The length of the statement  "	using (Brush brush = new LinearGradientBrush (new Point (rect.Left' rect.Top)' new Point (rect.Right' rect.Bottom)' Color.LightYellow' Color.Yellow)) { " is 151.
Long Statement,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawArrow,The length of the statement  "	using (Brush brush = new LinearGradientBrush (new Point (rect.Left' rect.Top)' new Point (rect.Right' rect.Bottom)' Color.Yellow' Color.Brown)) { " is 145.
Long Statement,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkManager.cs,ToggleMarkAt,The length of the statement  "	Bookmark newMark = (Factory != null) ? Factory.CreateBookmark (_document' location) : new Bookmark (_document' location); " is 121.
Long Statement,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkManager.cs,GetFirstMark,The length of the statement  "		if (predicate (_bookmarks [i]) && _bookmarks [i].Enabled && (first == null || _bookmarks [i].LineNumber < first.LineNumber)) " is 124.
Long Statement,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkManager.cs,GetLastMark,The length of the statement  "		if (predicate (_bookmarks [i]) && _bookmarks [i].Enabled && (last == null || _bookmarks [i].LineNumber > last.LineNumber)) " is 122.
Long Statement,DigitalRune.Windows.TextEditor.Bookmarks,Bookmark,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\Bookmark.cs,CreateAnchor,The length of the statement  "		LineSegment line = _document.GetLineSegment (Math.Max (0' Math.Min (_location.Line' _document.TotalNumberOfLines - 1))); " is 120.
Long Statement,DigitalRune.Windows.TextEditor.Document,DocumentEventArgs,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\DocumentEventArgs.cs,ToString,The length of the statement  "	return String.Format ("[DocumentEventArgs: Document = {0}' Offset = {1}' Text = {2}' Length = {3}]"' Document' Offset' Text' Length); " is 133.
Long Statement,DigitalRune.Windows.TextEditor.Document,LineManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineManager.cs,GetNextVisibleLineAfter,The length of the statement  "			while (curLineNumber < TotalNumberOfLines && (curLineNumber >= _lineSegments.Count || !_document.FoldingManager.IsLineVisible (curLineNumber))) " is 143.
Long Statement,DigitalRune.Windows.TextEditor.Document,LineSegment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineSegment.cs,ToString,The length of the statement  "		return "[LineSegment: (deleted) Length = " + Length + "' TotalLength = " + TotalLength + "' DelimiterLength = " + _delimiterLength + "]"; " is 137.
Long Statement,DigitalRune.Windows.TextEditor.Document,LineSegment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineSegment.cs,ToString,The length of the statement  "		return "[LineSegment: LineNumber=" + LineNumber + "' Offset = " + Offset + "' Length = " + Length + "' TotalLength = " + TotalLength + "' DelimiterLength = " + _delimiterLength + "]"; " is 183.
Long Statement,DigitalRune.Windows.TextEditor.Document,LineSegment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineSegment.cs,InsertedLinePart,The length of the statement  "			if (anchor.MovementType == AnchorMovementType.BeforeInsertion ? anchor.ColumnNumber > startColumn : anchor.ColumnNumber >= startColumn) { " is 137.
Long Statement,DigitalRune.Windows.TextEditor.Document,LineSegment,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineSegment.cs,SplitTo,The length of the statement  "			if (anchor.MovementType == AnchorMovementType.BeforeInsertion ? anchor.ColumnNumber > Length : anchor.ColumnNumber >= Length) { " is 127.
Long Statement,DigitalRune.Windows.TextEditor.Document,LineLengthChangedEventArgs,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineLengthChangedEventArgs.cs,ToString,The length of the statement  "	return string.Format ("[LineLengthEventArgs Document={0} LineSegment={1} LengthDifference={2}]"' Document' LineSegment' _difference); " is 133.
Long Statement,DigitalRune.Windows.TextEditor.Folding,Fold,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\Fold.cs,ToString,The length of the statement  "	return String.Format ("[Fold: Offset = {0}' Length = {1}' Text = {2}' IsFolded = {3}]"' Offset' Length' _foldText' isFolded); " is 125.
Long Statement,DigitalRune.Windows.TextEditor.Folding,XmlFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\XmlFoldingStrategy.cs,CreateElementFoldStart,The length of the statement  "	XmlFoldStart newFoldStart = new XmlFoldStart (reader.Prefix' reader.LocalName' reader.LineNumber - 1' reader.LinePosition - 2); " is 127.
Long Statement,DigitalRune.Windows.TextEditor.Folding,FoldingManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\FoldingManager.cs,GetFoldsFromPosition,The length of the statement  "			if ((fold.StartLine == line && column > fold.StartColumn && !(fold.EndLine == line && column >= fold.EndColumn)) || (fold.EndLine == line && column < fold.EndColumn && !(fold.StartLine == line && column <= fold.StartColumn)) || (line > fold.StartLine && line < fold.EndLine)) { " is 277.
Long Statement,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInsideDocumentationComment,The length of the statement  "		if (ch == '/' && i + 2 < cursorOffset && textArea.Document.GetCharAt (i + 1) == '/' && textArea.Document.GetCharAt (i + 2) == '/') { " is 132.
Long Statement,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The length of the statement  "		if (curLineText != null && curLineText.EndsWith ("///") && (lineAboveText == null || !lineAboveText.Trim ().StartsWith ("///"))) { " is 130.
Long Statement,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The length of the statement  "                      textArea.Caret.Position = textArea.Document.OffsetToPosition(cursorOffset + indentation.Length + "/// ".Length + " <summary>".Length + terminator.Length);" is 154.
Long Statement,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The length of the statement  "		LineSegment nextLine = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetLineSegment (lineNr + 1) : null; " is 128.
Long Statement,DigitalRune.Windows.TextEditor.Formatting,CSharpIndentationReformatter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\Indentation.cs,Step,The length of the statement  "			_block.Indent (set' (oldBlock.OneLineBlock ? set.IndentString : "") + (oldBlock.Continuation ? set.IndentString : "") + (i == line.Length - 1 ? set.IndentString : new String (' '' i + 1))); " is 189.
Long Statement,DigitalRune.Windows.TextEditor.Formatting,CSharpIndentationReformatter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\Indentation.cs,Step,The length of the statement  "		if (!oldBlock.Continuation && !oldBlock.OneLineBlock && oldBlock.StartLine == _block.StartLine && _block.StartLine < doc.LineNumber && _lastRealChar != ':') { " is 158.
Long Statement,DigitalRune.Windows.TextEditor.Formatting,CSharpIndentationReformatter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\Indentation.cs,Step,The length of the statement  "	if (indent.Length != (doc.Text.Length - line.Length) || !doc.Text.StartsWith (indent.ToString ()) || Char.IsWhiteSpace (doc.Text [indent.Length])) { " is 148.
Long Statement,DigitalRune.Windows.TextEditor.Formatting,DefaultFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\DefaultFormattingStrategy.cs,SmartReplaceLine,The length of the statement  "			document.Replace (lineOffset + pos + newLineTextTrim.Length' line.Length - pos - newLineTextTrim.Length' newLineText.Substring (newLineText.Length - endWhitespaceLength)); " is 171.
Long Statement,DigitalRune.Windows.TextEditor.Formatting,DefaultFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\DefaultFormattingStrategy.cs,IndentLine,The length of the statement  "		throw new NotSupportedException ("Unsupported value for IndentStyle: " + textArea.Document.TextEditorProperties.IndentStyle); " is 125.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ResolveRuleSetReferences,The length of the statement  "					throw new HighlightingDefinitionInvalidException ("The RuleSet " + aSpan.Rule + " could not be found in mode definition " + Name); " is 130.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ResolveExternalReferences,The length of the statement  "				throw new HighlightingDefinitionInvalidException ("The mode defintion " + ruleSet.Reference + " which is refered from the " + Name + " mode definition could not be found"); " is 172.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ResolveExternalReferences,The length of the statement  "				throw new HighlightingDefinitionInvalidException ("The mode defintion " + ruleSet.Reference + " which is refered from the " + Name + " mode definition does not implement IHighlightingStrategyUsingRuleSets"); " is 207.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MarkTokens,The length of the statement  "		_currentSpanStack = ((previousLine != null && previousLine.HighlightSpanStack != null) ? previousLine.HighlightSpanStack.Clone () : null); " is 138.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MarkTokensInLine,The length of the statement  "	_currentSpanStack = ((previousLine != null && previousLine.HighlightSpanStack != null) ? previousLine.HighlightSpanStack.Clone () : null); " is 138.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MarkTokens,The length of the statement  "		//				document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.SingleLine' document.GetLineNumberForOffset(document.Caret.Offset))); " is 136.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The length of the statement  "				if (_activeSpan != null && _activeSpan.End != null && _activeSpan.End.Length == 1 && escapeCharacter == _activeSpan.End [0]) { " is 126.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The length of the statement  "			if ((!_inSpan || (_activeRuleSet != null && _activeRuleSet.HighlightDigits)) && (Char.IsDigit (ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1)))) && _currentLength == 0) { " is 234.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The length of the statement  "					while (i + 1 < currentLineLength && hex.IndexOf (Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1))) != -1) { " is 120.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The length of the statement  "					if (i + 1 < currentLineLength && (document.GetCharAt (currentLineOffset + i + 1) == '+' || document.GetCharAt (_currentLine.Offset + i + 1) == '-')) { " is 150.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The length of the statement  "					if ((!span.IsBeginSingleWord || _currentLength == 0) && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (_currentLength == 0 && words.TrueForAll (delegate (TextWord textWord) { " is 199.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,PushCurWord,The length of the statement  "			words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' markNext ?? highlightColor' hasDefaultColor)); " is 127.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,PushCurWord,The length of the statement  "			NextMarker nextMarker = (NextMarker)_activeRuleSet.NextMarkers [document' _currentLine' _currentOffset' _currentLength]; " is 120.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MatchExpr,The length of the statement  "						char docChar = ignoreCase ? Char.ToUpperInvariant (document.GetCharAt (lineSegment.Offset + index + j + k)) : document.GetCharAt (lineSegment.Offset + index + j + k); " is 166.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MatchExpr,The length of the statement  "						char docChar = ignoreCase ? Char.ToUpperInvariant (document.GetCharAt (lineSegment.Offset + index - whatmatch.Length + k)) : document.GetCharAt (lineSegment.Offset + index - whatmatch.Length + k); " is 196.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MatchExpr,The length of the statement  "			char docChar = ignoreCase ? Char.ToUpperInvariant (document.GetCharAt (lineSegment.Offset + index + j)) : document.GetCharAt (lineSegment.Offset + index + j); " is 158.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,ParseColorString,The length of the statement  "	PropertyInfo myPropInfo = typeof(SystemColors).GetProperty (cNames [0]' BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 139.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,ToString,The length of the statement  "	return "[HighlightColor: Bold = " + Bold + "' Italic = " + Italic + "' Color = " + Color + "' BackgroundColor = " + BackgroundColor + "]"; " is 138.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightingDefinitionParser,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingDefinitionParser.cs,Parse,The length of the statement  "		Stream shemaStream = typeof(HighlightingDefinitionParser).Assembly.GetManifestResourceStream ("DigitalRune.Windows.TextEditor.Resources.Mode.xsd"); " is 147.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightingDefinitionParser,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingDefinitionParser.cs,Parse,The length of the statement  "			KeyValuePair<SyntaxMode' ISyntaxModeFileProvider> entry = HighlightingManager.Manager.FindHighlighterEntry (doc.DocumentElement.GetAttribute ("extends")); " is 154.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightingDefinitionParser,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingDefinitionParser.cs,Parse,The length of the statement  "				throw new HighlightingDefinitionInvalidException ("Cannot find referenced highlighting source " + doc.DocumentElement.GetAttribute ("extends")); " is 144.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightingDefinitionParser,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingDefinitionParser.cs,Parse,The length of the statement  "						highlighter.SetColorFor (el.GetAttribute ("name")' el.HasAttribute ("bgcolor") ? new HighlightBackground (el) : new HighlightColor (el)); " is 137.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightingDefinitionParser,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingDefinitionParser.cs,Parse,The length of the statement  "						highlighter.SetColorFor (el.Name' el.HasAttribute ("bgcolor") ? new HighlightBackground (el) : new HighlightColor (el)); " is 120.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightingDefinitionParser,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingDefinitionParser.cs,Parse,The length of the statement  "				highlighter.Properties [propertyElement.Attributes ["name"].InnerText] = propertyElement.Attributes ["value"].InnerText; " is 120.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightingDefinitionParser,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingDefinitionParser.cs,Parse,The length of the statement  "		throw new HighlightingDefinitionInvalidException ("Could not load mode definition file '" + syntaxMode.FileName + "'.\n"' e); " is 125.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,HighlightingManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightingManager.cs,LoadDefinition,The length of the statement  "			throw new HighlightingDefinitionInvalidException ("The name specified in the .xshd '" + highlightingStrategy.Name + "' must be equal the syntax mode name '" + syntaxMode.Name + "'"); " is 182.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,TextWord,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\TextWord.cs,Split,The length of the statement  "	TextWord after = new TextWord (word._document' word._line' word._offset + pos' word._length - pos' word._color' word._hasDefaultColor); " is 135.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,SyntaxMode,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\SyntaxModes\SyntaxMode.cs,GetSyntaxModes,The length of the statement  "				syntaxModes.Add (new SyntaxMode (reader.GetAttribute ("file")' reader.GetAttribute ("name")' reader.GetAttribute ("extensions"))); " is 130.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,SyntaxMode,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\SyntaxModes\SyntaxMode.cs,ToString,The length of the statement  "	return String.Format ("[SyntaxMode: FileName={0}' Name={1}' Extensions=({2})]"' _fileName' _name' String.Join ("'"' _extensions)); " is 130.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,ResourceSyntaxModeProvider,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\SyntaxModes\ResourceSyntaxModeProvider.cs,GetSyntaxModeFile,The length of the statement  "	return new XmlTextReader (assembly.GetManifestResourceStream ("DigitalRune.Windows.TextEditor.Resources." + syntaxMode.FileName)); " is 130.
Long Statement,DigitalRune.Windows.TextEditor.Highlighting,FileSyntaxModeProvider,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\SyntaxModes\FileSyntaxModeProvider.cs,GetSyntaxModeFile,The length of the statement  "		throw new HighlightingDefinitionInvalidException ("Can't load highlighting definition " + syntaxModeFile + " (file not found)!"); " is 129.
Long Statement,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnDelete,The length of the statement  "	if (parentNode.Color == BLACK && sibling.Color == BLACK && GetColor (sibling.Left) == BLACK && GetColor (sibling.Right) == BLACK) { " is 131.
Long Statement,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnDelete,The length of the statement  "	if (parentNode.Color == RED && sibling.Color == BLACK && GetColor (sibling.Left) == BLACK && GetColor (sibling.Right) == BLACK) { " is 129.
Long Statement,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnDelete,The length of the statement  "	if (node == parentNode.Left && sibling.Color == BLACK && GetColor (sibling.Left) == RED && GetColor (sibling.Right) == BLACK) { " is 127.
Long Statement,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnDelete,The length of the statement  "	} else if (node == parentNode.Right && sibling.Color == BLACK && GetColor (sibling.Right) == RED && GetColor (sibling.Left) == BLACK) { " is 135.
Long Statement,DigitalRune.Windows.TextEditor.Utilities,WeakCollection,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\WeakCollection.cs,CheckNoEnumerator,The length of the statement  "		throw new InvalidOperationException ("The WeakCollection is already being enumerated' it cannot be modified at the same time. Ensure you dispose the first enumerator before modifying the WeakCollection."); " is 205.
Long Statement,DigitalRune.Windows.TextEditor.Utilities,WeakCollection,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\WeakCollection.cs,GetEnumerator,The length of the statement  "		throw new InvalidOperationException ("The WeakCollection is already being enumerated' it cannot be enumerated twice at the same time. Ensure you dispose the first enumerator before using another enumerator."); " is 209.
Long Statement,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,ShowCompletionWindow,The length of the statement  "	completionWindow = CompletionWindow.ShowCompletionWindow (ParentForm' this' ""' completionDataProvider' ch' true' false' closeAutomatically); " is 141.
Long Statement,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,MeasurePrintingHeight,The length of the statement  "			SizeF drawingSize = g.MeasureString (word.Word' word.GetFont (fontContainer)' new SizeF (maxWidth' fontHeight * 100)' _printingStringFormat); " is 141.
Long Statement,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,DrawLine,The length of the statement  "			SizeF drawingSize = g.MeasureString (word.Word' word.GetFont (fontContainer)' new SizeF (margin.Width' fontHeight * 100)' _printingStringFormat); " is 145.
Long Statement,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,OnReloadHighlighting,The length of the statement  "			Document.HighlightingStrategy = HighlightingStrategyFactory.CreateHighlightingStrategy (Document.HighlightingStrategy.Name); " is 124.
Long Statement,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetTipSize,The length of the statement  "	SizeF maxLayoutSize = new SizeF (workingArea.Right - screenLocation.X - HorizontalBorder * 2' workingArea.Bottom - screenLocation.Y - VerticalBorder * 2); " is 154.
Long Statement,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetLeftHandSideTipSize,The length of the statement  "	SizeF maxLayoutSize = new SizeF (screenLocation.X - HorizontalBorder * 2' workingArea.Bottom - screenLocation.Y - VerticalBorder * 2); " is 134.
Long Statement,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawTip,The length of the statement  "	SizeF maxLayoutSize = new SizeF (workingArea.Right - screenLocation.X - HorizontalBorder * 2' workingArea.Bottom - screenLocation.Y - VerticalBorder * 2); " is 154.
Long Statement,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawTip,The length of the statement  "		RectangleF displayRectangle = new RectangleF (HorizontalBorder' VerticalBorder' tipSizeF.Width - HorizontalBorder * 2' tipSizeF.Height - VerticalBorder * 2); " is 157.
Long Statement,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawFixedWidthTip,The length of the statement  "	SizeF maxLayoutSize = new SizeF (screenLocation.X - HorizontalBorder * 2' workingArea.Bottom - screenLocation.Y - VerticalBorder * 2); " is 134.
Long Statement,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawFixedWidthTip,The length of the statement  "		RectangleF displayRectangle = new RectangleF (HorizontalBorder' VerticalBorder' tipSizeF.Width - HorizontalBorder * 2' tipSizeF.Height - VerticalBorder * 2); " is 157.
Long Statement,DigitalRune.Windows.TextEditor,TipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The length of the statement  "		Rectangle rectangle = new Rectangle ((int)(location.X + 1)' (int)location.Y' (int)AllocatedSize.Width' (int)AllocatedSize.Height); " is 130.
Long Statement,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The length of the statement  "		DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight)); " is 147.
Long Statement,DigitalRune.Windows.TextEditor,TipSpacer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipSpacer.cs,OnMaximumSizeChanged,The length of the statement  "	SetRequiredSize (new Size ((int)Math.Min (MaximumSize.Width' spacerSize.Width)' (int)Math.Min (MaximumSize.Height' spacerSize.Height))); " is 136.
Long Statement,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetLeftHandSideDrawingSizeHelpTipFromCombinedDescription,The length of the statement  "	return GetLeftHandSideDrawingSizeDrawHelpTip (control' graphics' font' countMessage' basicDescription' documentation' p); " is 121.
Long Statement,DigitalRune.Windows.TextEditor,Caret,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Caret.cs,CreateCaret,The length of the statement  "			_caretCreated = CreateCaret (_textArea.Handle' IntPtr.Zero' _textArea.TextView.SpaceWidth' _textArea.TextView.FontHeight); " is 122.
Long Statement,DigitalRune.Windows.TextEditor,Caret,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Caret.cs,UpdateCaretPosition,The length of the statement  "	if (_textArea.MotherTextAreaControl.TextEditorProperties.LineViewerStyle == LineViewerStyle.FullRow && _oldLine != _line) { " is 123.
Long Statement,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,SearchMatchingBracket,The length of the statement  "	if (_textView.Highlight != null && _textView.Highlight.OpeningBrace.Y >= 0 && _textView.Highlight.OpeningBrace.Y < Document.TotalNumberOfLines) { " is 145.
Long Statement,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,SearchMatchingBracket,The length of the statement  "	if (_textView.Highlight != null && _textView.Highlight.ClosingBrace.Y >= 0 && _textView.Highlight.ClosingBrace.Y < Document.TotalNumberOfLines) { " is 145.
Long Statement,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,RequestToolTip,The length of the statement  "	TextLocation logicPos = _textView.GetLogicalPosition (mousePos.X - _textView.DrawingPosition.Left' mousePos.Y - _textView.DrawingPosition.Top); " is 143.
Long Statement,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,RequestToolTip,The length of the statement  "	bool inDocument = _textView.DrawingPosition.Contains (mousePos) && logicPos.Y >= 0 && logicPos.Y < Document.TotalNumberOfLines; " is 127.
Long Statement,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,OnMouseMove,The length of the statement  "		TextLocation realmousepos = TextView.GetLogicalPosition (e.X - TextView.DrawingPosition.X' e.Y - TextView.DrawingPosition.Y); " is 125.
Long Statement,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,OnPaint,The length of the statement  "	bool isFullRepaint = clipRectangle.X == 0 && clipRectangle.Y == 0 && clipRectangle.Width == Width && clipRectangle.Height == Height; " is 132.
Long Statement,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,InsertChar,The length of the statement  "	if (Document.TextEditorProperties.DocumentSelectionMode == DocumentSelectionMode.Normal && SelectionManager.Selections.Count > 0) { " is 131.
Long Statement,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,InsertString,The length of the statement  "		if (Document.TextEditorProperties.DocumentSelectionMode == DocumentSelectionMode.Normal && SelectionManager.Selections.Count > 0) { " is 131.
Long Statement,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,ReplaceChar,The length of the statement  "	if (Document.TextEditorProperties.DocumentSelectionMode == DocumentSelectionMode.Normal && SelectionManager.Selections.Count > 0) { " is 131.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,Cut,The length of the statement  "		_textArea.SelectionManager.SetSelection (_textArea.Document.OffsetToPosition (lineWhereCaretIs.Offset)' _textArea.Document.OffsetToPosition (lineWhereCaretIs.Offset + lineWhereCaretIs.TotalLength)); " is 198.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,Cut,The length of the statement  "			_textArea.Document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.PositionToEnd' new TextLocation (0' curLineNr))); " is 122.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,Copy,The length of the statement  "	if (!CopyTextToClipboard (_textArea.SelectionManager.SelectedText) && _textArea.Document.TextEditorProperties.CutCopyWholeLine) { " is 129.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,OnPaint,The length of the statement  "		Rectangle lineRectangle = new Rectangle (DrawingPosition.X - horizontalDelta' DrawingPosition.Top + y * LineHeight - RemainderOfFirstVisibleLine' DrawingPosition.Width + horizontalDelta' LineHeight); " is 199.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,The length of the statement  "					physicalXPos = PaintLinePart (g' lineNumber' column' TextArea.Document.GetLineSegment (lineNumber).Length' lineRectangle' physicalXPos); " is 136.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,The length of the statement  "			bool drawSelected = ColumnRange.WholeColumn.Equals (selectionRange2) || firstFolding.StartColumn >= selectionRange2.StartColumn && firstFolding.EndColumn <= selectionRange2.EndColumn; " is 183.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,The length of the statement  "		physicalXPos = PaintLinePart (g' lineNumber' 0' TextArea.Document.GetLineSegment (lineNumber).Length' lineRectangle' physicalXPos); " is 131.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,The length of the statement  "		HighlightColor selectionColor = TextArea.Focused ? TextArea.Document.HighlightingStrategy.GetColorFor ("Selection") : TextArea.Document.HighlightingStrategy.GetColorFor ("SelectionInactive"); " is 191.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,The length of the statement  "		bool selectionBeyondEOL = selectionRange.EndColumn > currentLine.Length || ColumnRange.WholeColumn.Equals (selectionRange); " is 123.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,The length of the statement  "			physicalXPos += DrawEOLMarker (g' eolMarkerColor.Color' selectionBeyondEOL ? bgColorBrush : backgroundBrush' physicalXPos' lineRectangle.Y); " is 140.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,The length of the statement  "				g.FillRectangle (BrushRegistry.GetBrush (selectionColor.BackgroundColor)' new RectangleF (physicalXPos' lineRectangle.Y' ColumnWidth' lineRectangle.Height)); " is 157.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintDocumentLine,The length of the statement  "		g.FillRectangle (fillBrush' new RectangleF (physicalXPos' lineRectangle.Y' lineRectangle.Width - physicalXPos + lineRectangle.X' lineRectangle.Height)); " is 152.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawLineMarkerAtLine,The length of the statement  "	return lineNumber == TextArea.Caret.Line && TextArea.MotherTextAreaControl.TextEditorProperties.LineViewerStyle == LineViewerStyle.FullRow; " is 139.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintFoldingText,The length of the statement  "	HighlightColor selectionColor = TextArea.Focused ? TextArea.Document.HighlightingStrategy.GetColorFor ("Selection") : TextArea.Document.HighlightingStrategy.GetColorFor ("SelectionInactive"); " is 191.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintFoldingText,The length of the statement  "	Brush bgColorBrush = drawSelected ? BrushRegistry.GetBrush (selectionColor.BackgroundColor) : GetBgColorBrush (lineNumber); " is 123.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintFoldingText,The length of the statement  "	g.DrawRectangle (BrushRegistry.GetPen (drawSelected ? Color.DarkGray : Color.Gray)' rect.X' rect.Y' rect.Width' rect.Height); " is 125.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The length of the statement  "	HighlightColor selectionColor = TextArea.Focused ? TextArea.Document.HighlightingStrategy.GetColorFor ("Selection") : TextArea.Document.HighlightingStrategy.GetColorFor ("SelectionInactive"); " is 191.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The length of the statement  "		Brush wordBackBrush = GetMarkerBrushAt (currentLine.Offset + currentWordOffset' currentWord.Length' ref wordForeColor' out markers); " is 132.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The length of the statement  "		if (ColumnRange.WholeColumn.Equals (selectionRange) || (selectionRange.StartColumn <= currentWordOffset && selectionRange.EndColumn > currentWordEndOffset)) { " is 158.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The length of the statement  "			int physicalTabEnd = ((physicalXPos + MinTabWidth - lineRectangle.X) / ColumnWidth / TextEditorProperties.TabIndent) * ColumnWidth * TextEditorProperties.TabIndent + lineRectangle.X; " is 182.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The length of the statement  "			int wordWidth = DrawDocumentWord (g' currentWord.Word' new Point (physicalXPos' lineRectangle.Y)' currentWord.GetFont (fontContainer)' wordForeColor' wordBackBrush); " is 165.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The length of the statement  "			if (_highlight.OpeningBrace.Y == lineNumber && _highlight.OpeningBrace.X == currentWordOffset || _highlight.ClosingBrace.Y == lineNumber && _highlight.ClosingBrace.X == currentWordOffset) { " is 189.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The length of the statement  "				DrawBracketHighlight (g' new Rectangle ((int)wordRectangle.X' lineRectangle.Y' (int)wordRectangle.Width - 1' lineRectangle.Height - 1)); " is 136.
Long Statement,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawVerticalRuler,The length of the statement  "	g.DrawLine (BrushRegistry.GetPen (vRulerColor.Color)' DrawingPosition.Left + xpos' lineRectangle.Top' DrawingPosition.Left + xpos' lineRectangle.Bottom); " is 153.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnPaint,The length of the statement  "	g.DrawLine (dottedPen' backgroundRectangle.Right - 2' backgroundRectangle.Top' backgroundRectangle.Right - 2' backgroundRectangle.Bottom); " is 138.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnPaint,The length of the statement  "			int curLine = TextArea.Document.GetFirstLogicalLine (TextArea.Document.GetVisibleLine (TextArea.TextView.FirstLogicalLine) + y); " is 128.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnPaint,The length of the statement  "				TextRenderer.DrawText (g' (curLine + 1).ToString ()' font' textRectangle' foregroundColor' backgroundColor' textFormatFlags); " is 125.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnMouseDown,The length of the statement  "						TextArea.SelectionManager.SetSelection (new DefaultSelection (TextArea.Document' selectionStartPos' new TextLocation (0' realline + 1))); " is 137.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnMouseDown,The length of the statement  "						TextArea.SelectionManager.SetSelection (new DefaultSelection (TextArea.Document' selectionStartPos' new TextLocation (TextArea.Document.GetLineSegment (realline).Length + 1' realline))); " is 186.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnMouseDown,The length of the statement  "					TextArea.SelectionManager.SetSelection (new DefaultSelection (TextArea.Document' selectionStartPos' new TextLocation (selectionStartPos.X' selectionStartPos.Y))); " is 162.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnMouseDown,The length of the statement  "					TextArea.SelectionManager.ExtendSelection (new TextLocation (selectionStartPos.X' selectionStartPos.Y)' new TextLocation (0' realline)); " is 136.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnMouseDown,The length of the statement  "				TextArea.SelectionManager.SetSelection (new DefaultSelection (TextArea.Document' selectionStartPos' new TextLocation (selectionStartPos.X' selectionStartPos.Y + 1))); " is 166.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnMouseDown,The length of the statement  "				TextArea.SelectionManager.SetSelection (new DefaultSelection (TextArea.Document' new TextLocation (0' realline)' new TextLocation (TextArea.Document.GetLineSegment (realline).Length + 1' selectionStartPos.Y))); " is 210.
Long Statement,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnMouseDown,The length of the statement  "				TextArea.Caret.Position = new TextLocation (TextArea.Document.GetLineSegment (realline).Length + 1' selectionStartPos.Y); " is 121.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,ResizeTextArea,The length of the statement  "		_textArea.Bounds = new Rectangle (0' y' Width - SystemInformation.HorizontalScrollBarArrowWidth' Height - SystemInformation.VerticalScrollBarArrowHeight - h); " is 158.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,SetScrollBarBounds,The length of the statement  "	_vScrollBar.Bounds = new Rectangle (_textArea.Bounds.Right' 0' SystemInformation.HorizontalScrollBarArrowWidth' Height - SystemInformation.VerticalScrollBarArrowHeight); " is 169.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,SetScrollBarBounds,The length of the statement  "	_hScrollBar.Bounds = new Rectangle (0' _textArea.Bounds.Bottom' Width - SystemInformation.HorizontalScrollBarArrowWidth' SystemInformation.VerticalScrollBarArrowHeight); " is 169.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,AdjustScrollBars,The length of the statement  "	int lastLine = Document.GetFirstLogicalLine (_textArea.TextView.FirstPhysicalLine + _textArea.TextView.NumberOfVisibleLines); " is 125.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,HandleMouseWheel,The length of the statement  "			_motherTextEditorControl.Font = new Font (_motherTextEditorControl.Font.Name' Math.Max (6' _motherTextEditorControl.Font.Size - 1)); " is 132.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,HandleMouseWheel,The length of the statement  "		_vScrollBar.Value = Math.Max (_vScrollBar.Minimum' Math.Min (_vScrollBar.Maximum - _vScrollBar.LargeChange + 1' newValue)); " is 123.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,ScrollTo,The length of the statement  "				_hScrollBar.Value = Math.Max (0' Math.Min (_hScrollBar.Maximum' (pos - _textArea.TextView.NumberOfVisibleColumns + _scrollMarginHeight))); " is 138.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,ScrollTo,The length of the statement  "		_vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight + 3) * _textArea.TextView.LineHeight)); " is 131.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,ScrollTo,The length of the statement  "				_vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight - 1) * _textArea.TextView.LineHeight)); " is 131.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,ScrollTo,The length of the statement  "				_vScrollBar.Value = Math.Min (_vScrollBar.Maximum' (line - _textArea.TextView.NumberOfVisibleLines + _scrollMarginHeight - 1) * _textArea.TextView.LineHeight); " is 159.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,CenterViewOn,The length of the statement  "		_vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight + 3) * _textArea.TextView.LineHeight)); " is 131.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnToolTipRequest,The length of the statement  "	Fold fold = _textArea.TextView.GetFoldMarkerFromPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y); " is 160.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,ShowHiddenCursorIfMovedOrLeft,The length of the statement  "	_textArea.ShowHiddenCursor (!_textArea.Focused || !_textArea.ClientRectangle.Contains (_textArea.PointToClient (Cursor.Position))); " is 131.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,TextAreaClick,The length of the statement  "		TextLocation clickPosition = _textArea.TextView.GetLogicalPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y); " is 170.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,TextAreaMouseMove,The length of the statement  "		if (Math.Abs (_mouseDownPosition.X - e.X) >= SystemInformation.DragSize.Width / 2 || Math.Abs (_mouseDownPosition.Y - e.Y) >= SystemInformation.DragSize.Height / 2) { " is 166.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,ExtendSelectionToMouse,The length of the statement  "	TextLocation realmousepos = _textArea.TextView.GetLogicalPosition (Math.Max (0' mousepos.X - _textArea.TextView.DrawingPosition.X)' mousepos.Y - _textArea.TextView.DrawingPosition.Y); " is 183.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,ExtendSelectionToMouse,The length of the statement  "	if (!_minSelection.IsEmpty && _textArea.SelectionManager.Selections.Count > 0 && _textArea.SelectionManager.SelectFrom.Where == WhereFrom.TextArea) { " is 149.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,ExtendSelectionToMouse,The length of the statement  "		TextLocation min = SelectionManager.IsPositionGreaterOrEqual (_minSelection' _maxSelection) ? _maxSelection : _minSelection; " is 124.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,ExtendSelectionToMouse,The length of the statement  "		TextLocation max = SelectionManager.IsPositionGreaterOrEqual (_minSelection' _maxSelection) ? _minSelection : _maxSelection; " is 124.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,ExtendSelectionToMouse,The length of the statement  "		if (SelectionManager.IsPositionGreaterOrEqual (max' realmousepos) && SelectionManager.IsPositionGreaterOrEqual (realmousepos' min)) { " is 133.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,DoubleClickSelectionExtend,The length of the statement  "		Fold marker = _textArea.TextView.GetFoldMarkerFromPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y); " is 162.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnMouseDown,The length of the statement  "			Fold marker = _textArea.TextView.GetFoldMarkerFromPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y); " is 162.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnMouseDown,The length of the statement  "				_textArea.SelectionManager.SetSelection (new DefaultSelection (_textArea.TextView.Document' startLocation' endLocation)); " is 121.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnMouseDown,The length of the statement  "				TextLocation realmousepos = _textArea.TextView.GetLogicalPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y); " is 169.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnMouseDown,The length of the statement  "			TextLocation realmousepos = _textArea.TextView.GetLogicalPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y); " is 169.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,FindWordStart,The length of the statement  "	if (offset > 0 && Char.IsWhiteSpace (document.GetCharAt (offset - 1)) && Char.IsWhiteSpace (document.GetCharAt (offset))) { " is 123.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,FindWordStart,The length of the statement  "	} else if (IsSelectableChar (document.GetCharAt (offset)) || (offset > 0 && Char.IsWhiteSpace (document.GetCharAt (offset)) && IsSelectableChar (document.GetCharAt (offset - 1)))) { " is 181.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,FindWordStart,The length of the statement  "		if (offset > 0 && !Char.IsWhiteSpace (document.GetCharAt (offset - 1)) && !IsSelectableChar (document.GetCharAt (offset - 1))) { " is 128.
Long Statement,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,The length of the statement  "		RectangleF foldMarkerRectangle = new RectangleF (drawingRectangle.X + (drawingRectangle.Width - foldMarkerSize) / 2' foldMarkerYPos' foldMarkerSize' foldMarkerSize); " is 165.
Long Statement,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,DrawFolds,The length of the statement  "	g.DrawLine (foldMarkerPen' rectangle.X + space' rectangle.Y + mid' rectangle.X + rectangle.Width - space' rectangle.Y + mid); " is 125.
Long Statement,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,DrawFolds,The length of the statement  "		g.DrawLine (foldMarkerPen' rectangle.X + mid' rectangle.Y + space' rectangle.X + mid' rectangle.Y + rectangle.Height - space); " is 126.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaDragDropHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaDragDropHandler.cs,InsertString,The length of the statement  "	_textArea.SelectionManager.SetSelection (new DefaultSelection (_textArea.Document' _textArea.Document.OffsetToPosition (offset)' _textArea.Document.OffsetToPosition (offset + str.Length))); " is 189.
Long Statement,DigitalRune.Windows.TextEditor,TextAreaDragDropHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaDragDropHandler.cs,OnDragOver,The length of the statement  "		TextLocation realmousepos = _textArea.TextView.GetLogicalPosition (p.X - _textArea.TextView.DrawingPosition.X' p.Y - _textArea.TextView.DrawingPosition.Y); " is 155.
Long Statement,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,OnPaint,The length of the statement  "	for (float x = _textArea.TextView.DrawingPosition.Left; x < _textArea.TextView.DrawingPosition.Right; x += columnWidth' ++column) { " is 131.
Long Statement,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,OnPaintBackground,The length of the statement  "		e.Graphics.DrawLine (pen' ClientRectangle.Left' ClientRectangle.Bottom - 1' ClientRectangle.Right' ClientRectangle.Bottom - 1); " is 127.
Long Statement,DigitalRune.Windows.TextEditor.TextBuffer,GapTextBufferStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\TextBuffer\GapTextBufferStrategy.cs,MakeNewBuffer,The length of the statement  "		Array.Copy (buffer' gapEndOffset' newBuffer' newBuffer.Length - (buffer.Length - gapEndOffset)' buffer.Length - gapEndOffset); " is 126.
Long Statement,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionWindow.cs,SetLocation,The length of the statement  "	Point pos = new Point (textArea.TextView.DrawingPosition.X + xpos' textArea.TextView.DrawingPosition.Y + (textArea.Document.GetVisibleLine (caretLocation.Y)) * textArea.TextView.LineHeight - textArea.TextView.TextArea.VirtualTop.Y + textArea.TextView.LineHeight + rulerHeight); " is 277.
Long Statement,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,ShowCompletionWindow,The length of the statement  "	ICompletionData[] completionData = completionDataProvider.GenerateCompletionData (fileName' control.ActiveTextAreaControl.TextArea' firstChar); " is 143.
Long Statement,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,ShowCompletionWindow,The length of the statement  "	CompletionWindow codeCompletionWindow = new CompletionWindow (completionDataProvider' completionData' parent' control' showDeclarationWindow' fixedListViewWidth' closeAutomatically); " is 182.
Long Statement,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,SetDeclarationViewLocation,The length of the statement  "		_declarationViewWindow.Width = _declarationViewWindow.GetRequiredLeftHandSideWidth (new Point (Bounds.Left' Bounds.Top)); " is 121.
Long Statement,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,HandleMouseWheel,The length of the statement  "	_vScrollBar.Value = Math.Max (_vScrollBar.Minimum' Math.Min (_vScrollBar.Maximum - _vScrollBar.LargeChange + 1' newValue)); " is 123.
Long Statement,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,CaretOffsetChanged,The length of the statement  "		_completionListView.SelectItemWithStart (TextEditorControl.Document.GetText (_startOffset' caretOffset - _startOffset)); " is 120.
Long Statement,DigitalRune.Windows.TextEditor.Completion,DeclarationViewWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\DeclarationViewWindow.cs,GetRequiredLeftHandSideWidth,The length of the statement  "			Size s = TipPainterTools.GetLeftHandSideDrawingSizeHelpTipFromCombinedDescription (this' g' Font' null' _description' p); " is 121.
Long Statement,DigitalRune.Windows.TextEditor.Completion,Snippet,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Snippets\Snippet.cs,ShowTemplateCompletionWindow,The length of the statement  "	SnippetCompletionDataProvider snippetCompletionDataProvider = new SnippetCompletionDataProvider (snippets' imageList' snippetImageIndex); " is 137.
Long Statement,DigitalRune.Windows.TextEditor.Insight,InsightWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Insight\InsightWindow.cs,CaretOffsetChanged,The length of the statement  "	int ypos = (TextEditorControl.Document.GetVisibleLine (caretPos.Y) + 1) * TextEditorControl.ActiveTextAreaControl.TextArea.TextView.LineHeight - TextEditorControl.ActiveTextAreaControl.TextArea.VirtualTop.Y; " is 207.
Long Statement,DigitalRune.Windows.TextEditor.Insight,InsightWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Insight\InsightWindow.cs,CaretOffsetChanged,The length of the statement  "	int rulerHeight = TextEditorControl.TextEditorProperties.ShowHorizontalRuler ? TextEditorControl.ActiveTextAreaControl.TextArea.TextView.LineHeight : 0; " is 152.
Long Statement,DigitalRune.Windows.TextEditor.Insight,InsightWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Insight\InsightWindow.cs,OnPaint,The length of the statement  "	DrawingSize = TipPainterTools.GetDrawingSizeHelpTipFromCombinedDescription (this' pe.Graphics' Font' methodCountMessage' description); " is 134.
Long Statement,DigitalRune.Windows.TextEditor.Selection,DefaultSelection,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Selection\DefaultSelection.cs,ContainsPosition,The length of the statement  "	return _startPosition.Y < position.Y && position.Y < _endPosition.Y || _startPosition.Y == position.Y && _startPosition.X <= position.X && (_startPosition.Y != _endPosition.Y || position.X <= _endPosition.X) || _endPosition.Y == position.Y && _startPosition.Y != _endPosition.Y && position.X <= _endPosition.X; " is 310.
Long Statement,DigitalRune.Windows.TextEditor.Selection,SelectionManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Selection\SelectionManager.cs,SetSelection,The length of the statement  "		if (Selections.Count == 1 && selection.StartPosition == Selections [0].StartPosition && selection.EndPosition == Selections [0].EndPosition) { " is 142.
Long Statement,DigitalRune.Windows.TextEditor.Selection,SelectionManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Selection\SelectionManager.cs,SetSelection,The length of the statement  "		_document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.LinesBetween' selection.StartPosition.Y' selection.EndPosition.Y)); " is 131.
Long Statement,DigitalRune.Windows.TextEditor.Selection,SelectionManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Selection\SelectionManager.cs,ClearWithoutUpdate,The length of the statement  "		_document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.LinesBetween' selection.StartPosition.Y' selection.EndPosition.Y)); " is 131.
Long Statement,DigitalRune.Windows.TextEditor.Selection,SelectionManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Selection\SelectionManager.cs,ClearSelection,The length of the statement  "	TextLocation newSelectionStart = _textArea.TextView.GetLogicalPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y); " is 174.
Complex Conditional,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkManager.cs,GetFirstMark,The conditional expression  "predicate (_bookmarks [i]) && _bookmarks [i].Enabled && (first == null || _bookmarks [i].LineNumber < first.LineNumber)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkManager.cs,GetLastMark,The conditional expression  "predicate (_bookmarks [i]) && _bookmarks [i].Enabled && (last == null || _bookmarks [i].LineNumber > last.LineNumber)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Folding,FoldingManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\FoldingManager.cs,GetFoldsFromPosition,The conditional expression  "(fold.StartLine == line && column > fold.StartColumn && !(fold.EndLine == line && column >= fold.EndColumn)) || (fold.EndLine == line && column < fold.EndColumn && !(fold.StartLine == line && column <= fold.StartColumn)) || (line > fold.StartLine && line < fold.EndLine)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Folding,FoldingManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\FoldingManager.cs,GetTopLevelFoldedFoldings,The conditional expression  "fold.IsFolded && (fold.StartLine > end.Line || fold.StartLine == end.Line && fold.StartColumn >= end.Column)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,NeedCurlyBracket,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,NeedCurlyBracket,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInsideDocumentationComment,The conditional expression  "ch == '/' && i + 2 < cursorOffset && textArea.Document.GetCharAt (i + 1) == '/' && textArea.Document.GetCharAt (i + 2) == '/'"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The conditional expression  "curLineText != null && curLineText.EndsWith ("///") && (lineAboveText == null || !lineAboveText.Trim ().StartsWith ("///"))"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInNonVerbatimString,The conditional expression  "!inString && i > 0 && start [i - 1] == '/' && (c == '/' || c == '*')"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInNonVerbatimString,The conditional expression  "!inString && i > 0 && end [i - 1] == '/' && (c == '/' || c == '*')"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketBackward,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketBackward,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketForward,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,SearchBracketForward,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,NeedCurlyBracket,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,NeedCurlyBracket,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,IsInNonVerbatimString,The conditional expression  "!inString && i > 0 && start [i - 1] == '/' && (c == '/' || c == '*')"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,IsInNonVerbatimString,The conditional expression  "!inString && i > 0 && end [i - 1] == '/' && (c == '/' || c == '*')"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketBackward,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketBackward,The conditional expression  "!(inString || inChar || lineComment || blockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketForward,The conditional expression  "!(inString || inChar || inLineComment || inBlockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,SearchBracketForward,The conditional expression  "!(inString || inChar || inLineComment || inBlockComment)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpIndentationReformatter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\Indentation.cs,Step,The conditional expression  "_lineComment || _blockComment || _inString || _inChar"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Formatting,CSharpIndentationReformatter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\Indentation.cs,Step,The conditional expression  "!oldBlock.Continuation && !oldBlock.OneLineBlock && oldBlock.StartLine == _block.StartLine && _block.StartLine < doc.LineNumber && _lastRealChar != ':'"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The conditional expression  "_activeSpan != null && _activeSpan.End != null && _activeSpan.End.Length == 1 && escapeCharacter == _activeSpan.End [0]"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The conditional expression  "(!_inSpan || (_activeRuleSet != null && _activeRuleSet.HighlightDigits)) && (Char.IsDigit (ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1)))) && _currentLength == 0"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The conditional expression  "nextCh == 'I' || nextCh == 'L' || nextCh == 'S' || nextCh == 'T'"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The conditional expression  "(!span.IsBeginSingleWord || _currentLength == 0) && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (_currentLength == 0 && words.TrueForAll (delegate (TextWord textWord) {  	return textWord.Type != TextWordType.Word;  }))) && MatchExpr (_currentLine' span.Begin' i' document' _activeRuleSet.IgnoreCase' span.IsBeginSingleWord)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Markers,MarkerStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Markers\MarkerStrategy.cs,GetMarkers,The conditional expression  "marker.Offset <= offset && offset <= marker.EndOffset // start in marker region  || marker.Offset <= endOffset && endOffset <= marker.EndOffset // end in marker region  || offset <= marker.Offset && marker.Offset <= endOffset // marker start in region  || offset <= marker.EndOffset && marker.EndOffset <= endOffset"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnDelete,The conditional expression  "parentNode.Color == BLACK && sibling.Color == BLACK && GetColor (sibling.Left) == BLACK && GetColor (sibling.Right) == BLACK"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnDelete,The conditional expression  "parentNode.Color == RED && sibling.Color == BLACK && GetColor (sibling.Left) == BLACK && GetColor (sibling.Right) == BLACK"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnDelete,The conditional expression  "node == parentNode.Left && sibling.Color == BLACK && GetColor (sibling.Left) == RED && GetColor (sibling.Right) == BLACK"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,FixTreeOnDelete,The conditional expression  "node == parentNode.Right && sibling.Color == BLACK && GetColor (sibling.Right) == RED && GetColor (sibling.Left) == BLACK"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,PaintLinePart,The conditional expression  "_highlight.OpeningBrace.Y == lineNumber && _highlight.OpeningBrace.X == currentWordOffset || _highlight.ClosingBrace.Y == lineNumber && _highlight.ClosingBrace.X == currentWordOffset"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetDrawingXPos,The conditional expression  "f == null || !(f.StartLine < logicalLine || f.StartLine == logicalLine && f.StartColumn < logicalColumn)"  is complex.
Complex Conditional,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,FindWordStart,The conditional expression  "IsSelectableChar (document.GetCharAt (offset)) || (offset > 0 && Char.IsWhiteSpace (document.GetCharAt (offset)) && IsSelectableChar (document.GetCharAt (offset - 1)))"  is complex.
Empty Catch Block,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,IndentLines,The method has an empty catch block.
Empty Catch Block,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The method has an empty catch block.
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	if (commentStart != null)  		hashCode += 1000000007 * commentStart.GetHashCode ();  	if (commentEnd != null)  		hashCode += 1000000009 * commentEnd.GetHashCode ();  	hashCode += 1000000021 * startOffset.GetHashCode ();  	hashCode += 1000000033 * endOffset.GetHashCode ();  }  
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	if (commentStart != null)  		hashCode += 1000000007 * commentStart.GetHashCode ();  	if (commentEnd != null)  		hashCode += 1000000009 * commentEnd.GetHashCode ();  	hashCode += 1000000021 * startOffset.GetHashCode ();  	hashCode += 1000000033 * endOffset.GetHashCode ();  }  
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	if (commentStart != null)  		hashCode += 1000000007 * commentStart.GetHashCode ();  	if (commentEnd != null)  		hashCode += 1000000009 * commentEnd.GetHashCode ();  	hashCode += 1000000021 * startOffset.GetHashCode ();  	hashCode += 1000000033 * endOffset.GetHashCode ();  }  
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	if (commentStart != null)  		hashCode += 1000000007 * commentStart.GetHashCode ();  	if (commentEnd != null)  		hashCode += 1000000009 * commentEnd.GetHashCode ();  	hashCode += 1000000021 * startOffset.GetHashCode ();  	hashCode += 1000000033 * endOffset.GetHashCode ();  }  
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: if (commentStart != null)  	hashCode += 1000000007 * commentStart.GetHashCode ();  
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000007 * commentStart.GetHashCode ();  
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: if (commentEnd != null)  	hashCode += 1000000009 * commentEnd.GetHashCode ();  
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000009 * commentEnd.GetHashCode ();  
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000021 * startOffset.GetHashCode ();  
Magic Number,DigitalRune.Windows.TextEditor.Actions,BlockCommentRegion,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000033 * endOffset.GetHashCode ();  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	path.AddEllipse (rect);  	using (PathGradientBrush pthGrBrush = new PathGradientBrush (path)) {  		pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  		pthGrBrush.CenterColor = Color.MistyRose;  		Color[] colors =  {  			willBeHit ? Color.Firebrick : Color.Olive  		};  		pthGrBrush.SurroundColors = colors;  		if (enabled) {  			g.FillEllipse (pthGrBrush' rect);  		} else {  			g.FillEllipse (SystemBrushes.Control' rect);  			using (Pen pen = new Pen (pthGrBrush)) {  				g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  			}  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	path.AddEllipse (rect);  	using (PathGradientBrush pthGrBrush = new PathGradientBrush (path)) {  		pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  		pthGrBrush.CenterColor = Color.MistyRose;  		Color[] colors =  {  			willBeHit ? Color.Firebrick : Color.Olive  		};  		pthGrBrush.SurroundColors = colors;  		if (enabled) {  			g.FillEllipse (pthGrBrush' rect);  		} else {  			g.FillEllipse (SystemBrushes.Control' rect);  			using (Pen pen = new Pen (pthGrBrush)) {  				g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  			}  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	path.AddEllipse (rect);  	using (PathGradientBrush pthGrBrush = new PathGradientBrush (path)) {  		pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  		pthGrBrush.CenterColor = Color.MistyRose;  		Color[] colors =  {  			willBeHit ? Color.Firebrick : Color.Olive  		};  		pthGrBrush.SurroundColors = colors;  		if (enabled) {  			g.FillEllipse (pthGrBrush' rect);  		} else {  			g.FillEllipse (SystemBrushes.Control' rect);  			using (Pen pen = new Pen (pthGrBrush)) {  				g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  			}  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	path.AddEllipse (rect);  	using (PathGradientBrush pthGrBrush = new PathGradientBrush (path)) {  		pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  		pthGrBrush.CenterColor = Color.MistyRose;  		Color[] colors =  {  			willBeHit ? Color.Firebrick : Color.Olive  		};  		pthGrBrush.SurroundColors = colors;  		if (enabled) {  			g.FillEllipse (pthGrBrush' rect);  		} else {  			g.FillEllipse (SystemBrushes.Control' rect);  			using (Pen pen = new Pen (pthGrBrush)) {  				g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  			}  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (PathGradientBrush pthGrBrush = new PathGradientBrush (path)) {  	pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  	pthGrBrush.CenterColor = Color.MistyRose;  	Color[] colors =  {  		willBeHit ? Color.Firebrick : Color.Olive  	};  	pthGrBrush.SurroundColors = colors;  	if (enabled) {  		g.FillEllipse (pthGrBrush' rect);  	} else {  		g.FillEllipse (SystemBrushes.Control' rect);  		using (Pen pen = new Pen (pthGrBrush)) {  			g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (PathGradientBrush pthGrBrush = new PathGradientBrush (path)) {  	pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  	pthGrBrush.CenterColor = Color.MistyRose;  	Color[] colors =  {  		willBeHit ? Color.Firebrick : Color.Olive  	};  	pthGrBrush.SurroundColors = colors;  	if (enabled) {  		g.FillEllipse (pthGrBrush' rect);  	} else {  		g.FillEllipse (SystemBrushes.Control' rect);  		using (Pen pen = new Pen (pthGrBrush)) {  			g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (PathGradientBrush pthGrBrush = new PathGradientBrush (path)) {  	pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  	pthGrBrush.CenterColor = Color.MistyRose;  	Color[] colors =  {  		willBeHit ? Color.Firebrick : Color.Olive  	};  	pthGrBrush.SurroundColors = colors;  	if (enabled) {  		g.FillEllipse (pthGrBrush' rect);  	} else {  		g.FillEllipse (SystemBrushes.Control' rect);  		using (Pen pen = new Pen (pthGrBrush)) {  			g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (PathGradientBrush pthGrBrush = new PathGradientBrush (path)) {  	pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  	pthGrBrush.CenterColor = Color.MistyRose;  	Color[] colors =  {  		willBeHit ? Color.Firebrick : Color.Olive  	};  	pthGrBrush.SurroundColors = colors;  	if (enabled) {  		g.FillEllipse (pthGrBrush' rect);  	} else {  		g.FillEllipse (SystemBrushes.Control' rect);  		using (Pen pen = new Pen (pthGrBrush)) {  			g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: pthGrBrush.CenterPoint = new PointF (rect.Left + rect.Width / 3' rect.Top + rect.Height / 3);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: if (enabled) {  	g.FillEllipse (pthGrBrush' rect);  } else {  	g.FillEllipse (SystemBrushes.Control' rect);  	using (Pen pen = new Pen (pthGrBrush)) {  		g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: if (enabled) {  	g.FillEllipse (pthGrBrush' rect);  } else {  	g.FillEllipse (SystemBrushes.Control' rect);  	using (Pen pen = new Pen (pthGrBrush)) {  		g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (Pen pen = new Pen (pthGrBrush)) {  	g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: using (Pen pen = new Pen (pthGrBrush)) {  	g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  }  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,DrawBreakpoint,The following statement contains a magic number: g.DrawEllipse (pen' new Rectangle (rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2));  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine (r.X' r.Y + halfY / 2' r.X + halfX' r.Y + halfY / 2);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine (r.X' r.Y + halfY / 2' r.X + halfX' r.Y + halfY / 2);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine (r.X + halfX' r.Y + halfY / 2' r.X + halfX' r.Y);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine (r.X + halfX' r.Bottom' r.X + halfX' r.Bottom - halfY / 2);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine (r.X + halfX' r.Bottom - halfY / 2' r.X' r.Bottom - halfY / 2);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine (r.X + halfX' r.Bottom - halfY / 2' r.X' r.Bottom - halfY / 2);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine (r.X' r.Bottom - halfY / 2' r.X' r.Y + halfY / 2);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine (r.X' r.Bottom - halfY / 2' r.X' r.Y + halfY / 2);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc (r.Right - radius' r.Y' radius' radius' 270' 90);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc (r.Right - radius' r.Y' radius' radius' 270' 90);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc (r.Right - radius' r.Bottom - radius' radius' radius' 0' 90);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc (r.X' r.Bottom - radius' radius' radius' 90' 90);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc (r.X' r.Bottom - radius' radius' radius' 90' 90);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc (r.X' r.Y' radius' radius' 180' 90);  
Magic Number,DigitalRune.Windows.TextEditor.Bookmarks,BookmarkRenderer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Bookmarks\BookmarkRenderer.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc (r.X' r.Y' radius' radius' 180' 90);  
Magic Number,DigitalRune.Windows.TextEditor.Document,LineManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineManager.cs,NextDelimiter,The following statement contains a magic number: for (int i = offset; i < text.Length; i++) {  	switch (text [i]) {  	case '\r':  		if (i + 1 < text.Length) {  			if (text [i + 1] == '\n') {  				_delimiterSegment.Offset = i;  				_delimiterSegment.Length = 2;  				return _delimiterSegment;  			}  		}  		#if DATACONSISTENCYTEST  		Debug.Assert (false' "Found lone \\r' data consistency problems?");  		#endif  		goto case '\n';  	case '\n':  		_delimiterSegment.Offset = i;  		_delimiterSegment.Length = 1;  		return _delimiterSegment;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Document,LineManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineManager.cs,NextDelimiter,The following statement contains a magic number: switch (text [i]) {  case '\r':  	if (i + 1 < text.Length) {  		if (text [i + 1] == '\n') {  			_delimiterSegment.Offset = i;  			_delimiterSegment.Length = 2;  			return _delimiterSegment;  		}  	}  	#if DATACONSISTENCYTEST  	Debug.Assert (false' "Found lone \\r' data consistency problems?");  	#endif  	goto case '\n';  case '\n':  	_delimiterSegment.Offset = i;  	_delimiterSegment.Length = 1;  	return _delimiterSegment;  }  
Magic Number,DigitalRune.Windows.TextEditor.Document,LineManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineManager.cs,NextDelimiter,The following statement contains a magic number: if (i + 1 < text.Length) {  	if (text [i + 1] == '\n') {  		_delimiterSegment.Offset = i;  		_delimiterSegment.Length = 2;  		return _delimiterSegment;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Document,LineManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineManager.cs,NextDelimiter,The following statement contains a magic number: if (text [i + 1] == '\n') {  	_delimiterSegment.Offset = i;  	_delimiterSegment.Length = 2;  	return _delimiterSegment;  }  
Magic Number,DigitalRune.Windows.TextEditor.Document,LineManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineManager.cs,NextDelimiter,The following statement contains a magic number: _delimiterSegment.Length = 2;  
Magic Number,DigitalRune.Windows.TextEditor.Document,TextLocation,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\TextLocation.cs,GetHashCode,The following statement contains a magic number: return unchecked(87 * _x.GetHashCode () ^ _y.GetHashCode ());  
Magic Number,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (current == '/' && next == '/') {  	// Skip line comment "//"  	LineSegment line = document.GetLineSegmentForOffset (offset);  	int offsetOfNextLine = line.Offset + line.TotalLength;  	return offsetOfNextLine;  } else if (current == '/' && next == '*') {  	// Skip block comment "/* ... */"  	offset += 2;  	while (offset + 1 < document.TextLength) {  		if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  			offset = offset + 2;  			break;  		}  		offset++;  	}  	return offset;  } else {  	return offset + 1;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (current == '/' && next == '/') {  	// Skip line comment "//"  	LineSegment line = document.GetLineSegmentForOffset (offset);  	int offsetOfNextLine = line.Offset + line.TotalLength;  	return offsetOfNextLine;  } else if (current == '/' && next == '*') {  	// Skip block comment "/* ... */"  	offset += 2;  	while (offset + 1 < document.TextLength) {  		if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  			offset = offset + 2;  			break;  		}  		offset++;  	}  	return offset;  } else {  	return offset + 1;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (current == '/' && next == '*') {  	// Skip block comment "/* ... */"  	offset += 2;  	while (offset + 1 < document.TextLength) {  		if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  			offset = offset + 2;  			break;  		}  		offset++;  	}  	return offset;  } else {  	return offset + 1;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (current == '/' && next == '*') {  	// Skip block comment "/* ... */"  	offset += 2;  	while (offset + 1 < document.TextLength) {  		if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  			offset = offset + 2;  			break;  		}  		offset++;  	}  	return offset;  } else {  	return offset + 1;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,SkipComment,The following statement contains a magic number: offset += 2;  
Magic Number,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,SkipComment,The following statement contains a magic number: while (offset + 1 < document.TextLength) {  	if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  		offset = offset + 2;  		break;  	}  	offset++;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  	offset = offset + 2;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,CSharpFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\CSharpFoldingStrategy.cs,SkipComment,The following statement contains a magic number: offset = offset + 2;  
Magic Number,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (current == '/' && next == '/') {  	// Skip line comment "//"  	LineSegment line = document.GetLineSegmentForOffset (offset);  	int offsetOfNextLine = line.Offset + line.TotalLength;  	return offsetOfNextLine;  } else if (current == '/' && next == '*') {  	// Skip block comment "/* ... */"  	offset += 2;  	while (offset + 1 < document.TextLength) {  		if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  			offset = offset + 2;  			break;  			// End loop  		}  		offset++;  	}  } else {  	offset++;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (current == '/' && next == '/') {  	// Skip line comment "//"  	LineSegment line = document.GetLineSegmentForOffset (offset);  	int offsetOfNextLine = line.Offset + line.TotalLength;  	return offsetOfNextLine;  } else if (current == '/' && next == '*') {  	// Skip block comment "/* ... */"  	offset += 2;  	while (offset + 1 < document.TextLength) {  		if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  			offset = offset + 2;  			break;  			// End loop  		}  		offset++;  	}  } else {  	offset++;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (current == '/' && next == '*') {  	// Skip block comment "/* ... */"  	offset += 2;  	while (offset + 1 < document.TextLength) {  		if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  			offset = offset + 2;  			break;  			// End loop  		}  		offset++;  	}  } else {  	offset++;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (current == '/' && next == '*') {  	// Skip block comment "/* ... */"  	offset += 2;  	while (offset + 1 < document.TextLength) {  		if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  			offset = offset + 2;  			break;  			// End loop  		}  		offset++;  	}  } else {  	offset++;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,SkipComment,The following statement contains a magic number: offset += 2;  
Magic Number,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,SkipComment,The following statement contains a magic number: while (offset + 1 < document.TextLength) {  	if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  		offset = offset + 2;  		break;  		// End loop  	}  	offset++;  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,SkipComment,The following statement contains a magic number: if (document.GetCharAt (offset) == '*' && document.GetCharAt (offset + 1) == '/') {  	offset = offset + 2;  	break;  	// End loop  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,HlslFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\HlslFoldingStrategy.cs,SkipComment,The following statement contains a magic number: offset = offset + 2;  
Magic Number,DigitalRune.Windows.TextEditor.Folding,XmlFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\XmlFoldingStrategy.cs,CreateCommentFold,The following statement contains a magic number: if (reader.Value != null) {  	string comment = reader.Value.Replace ("\r\n"' "\n");  	string[] lines = comment.Split ('\n');  	if (lines.Length > 1) {  		// Take off 5 chars to get the actual comment start (takes  		// into account the <!-- chars.  		int startCol = reader.LinePosition - 5;  		int startLine = reader.LineNumber - 1;  		// Add 3 to the end col value to take into account the '-->'  		int endCol = lines [lines.Length - 1].Length + startCol + 3;  		int endLine = startLine + lines.Length - 1;  		string foldText = String.Concat ("<!--"' lines [0]' "-->");  		Fold fold = new Fold (document' startLine' startCol' endLine' endCol' foldText);  		foldMarkers.Add (fold);  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,XmlFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\XmlFoldingStrategy.cs,CreateCommentFold,The following statement contains a magic number: if (reader.Value != null) {  	string comment = reader.Value.Replace ("\r\n"' "\n");  	string[] lines = comment.Split ('\n');  	if (lines.Length > 1) {  		// Take off 5 chars to get the actual comment start (takes  		// into account the <!-- chars.  		int startCol = reader.LinePosition - 5;  		int startLine = reader.LineNumber - 1;  		// Add 3 to the end col value to take into account the '-->'  		int endCol = lines [lines.Length - 1].Length + startCol + 3;  		int endLine = startLine + lines.Length - 1;  		string foldText = String.Concat ("<!--"' lines [0]' "-->");  		Fold fold = new Fold (document' startLine' startCol' endLine' endCol' foldText);  		foldMarkers.Add (fold);  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,XmlFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\XmlFoldingStrategy.cs,CreateCommentFold,The following statement contains a magic number: if (lines.Length > 1) {  	// Take off 5 chars to get the actual comment start (takes  	// into account the <!-- chars.  	int startCol = reader.LinePosition - 5;  	int startLine = reader.LineNumber - 1;  	// Add 3 to the end col value to take into account the '-->'  	int endCol = lines [lines.Length - 1].Length + startCol + 3;  	int endLine = startLine + lines.Length - 1;  	string foldText = String.Concat ("<!--"' lines [0]' "-->");  	Fold fold = new Fold (document' startLine' startCol' endLine' endCol' foldText);  	foldMarkers.Add (fold);  }  
Magic Number,DigitalRune.Windows.TextEditor.Folding,XmlFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\XmlFoldingStrategy.cs,CreateCommentFold,The following statement contains a magic number: if (lines.Length > 1) {  	// Take off 5 chars to get the actual comment start (takes  	// into account the <!-- chars.  	int startCol = reader.LinePosition - 5;  	int startLine = reader.LineNumber - 1;  	// Add 3 to the end col value to take into account the '-->'  	int endCol = lines [lines.Length - 1].Length + startCol + 3;  	int endLine = startLine + lines.Length - 1;  	string foldText = String.Concat ("<!--"' lines [0]' "-->");  	Fold fold = new Fold (document' startLine' startCol' endLine' endCol' foldText);  	foldMarkers.Add (fold);  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInsideDocumentationComment,The following statement contains a magic number: for (int i = curLine.Offset; i < cursorOffset; ++i) {  	char ch = textArea.Document.GetCharAt (i);  	if (ch == '"') {  		// parsing strings correctly is too complicated (see above)'  		// but I don't now any case where a doc comment is after a string...  		return false;  	}  	if (ch == '/' && i + 2 < cursorOffset && textArea.Document.GetCharAt (i + 1) == '/' && textArea.Document.GetCharAt (i + 2) == '/') {  		return true;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInsideDocumentationComment,The following statement contains a magic number: for (int i = curLine.Offset; i < cursorOffset; ++i) {  	char ch = textArea.Document.GetCharAt (i);  	if (ch == '"') {  		// parsing strings correctly is too complicated (see above)'  		// but I don't now any case where a doc comment is after a string...  		return false;  	}  	if (ch == '/' && i + 2 < cursorOffset && textArea.Document.GetCharAt (i + 1) == '/' && textArea.Document.GetCharAt (i + 2) == '/') {  		return true;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInsideDocumentationComment,The following statement contains a magic number: if (ch == '/' && i + 2 < cursorOffset && textArea.Document.GetCharAt (i + 1) == '/' && textArea.Document.GetCharAt (i + 2) == '/') {  	return true;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,IsInsideDocumentationComment,The following statement contains a magic number: if (ch == '/' && i + 2 < cursorOffset && textArea.Document.GetCharAt (i + 1) == '/' && textArea.Document.GetCharAt (i + 2) == '/') {  	return true;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: switch (ch) {  case '>':  	if (IsInsideDocumentationComment (textArea' curLine' cursorOffset)) {  		curLineText = textArea.Document.GetText (curLine);  		int column = textArea.Caret.Offset - curLine.Offset;  		int index = Math.Min (column - 1' curLineText.Length - 1);  		while (index >= 0 && curLineText [index] != '<') {  			--index;  			if (curLineText [index] == '/')  				return;  			// the tag was an end tag or already  		}  		if (index > 0) {  			StringBuilder commentBuilder = new StringBuilder ("");  			for (int i = index; i < curLineText.Length && i < column && !Char.IsWhiteSpace (curLineText [i]); ++i) {  				commentBuilder.Append (curLineText [i]);  			}  			string tag = commentBuilder.ToString ().Trim ();  			if (!tag.EndsWith (">")) {  				tag += ">";  			}  			if (!tag.StartsWith ("/")) {  				textArea.Document.Insert (textArea.Caret.Offset' "</" + tag.Substring (1));  			}  		}  	}  	break;  case ':':  case ')':  case ']':  case '}':  case '{':  	if (textArea.Document.TextEditorProperties.IndentStyle == IndentStyle.Smart) {  		textArea.Document.FormattingStrategy.IndentLine (textArea' lineNr);  	}  	break;  case '\n':  	string lineAboveText = lineAbove == null ? "" : textArea.Document.GetText (lineAbove);  	//// curLine might have some text which should be added to indentation  	curLineText = "";  	if (curLine.Length > 0) {  		curLineText = textArea.Document.GetText (curLine);  	}  	LineSegment nextLine = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetLineSegment (lineNr + 1) : null;  	string nextLineText = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetText (nextLine) : "";  	int addCursorOffset = 0;  	if (lineAboveText.Trim ().StartsWith ("#region") && NeedEndregion (textArea.Document)) {  		textArea.Document.Insert (curLine.Offset' "#endregion");  		textArea.Caret.Column = IndentLine (textArea' lineNr);  		return;  	}  	if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  		if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  			// case for /* style comments  			int index = lineAboveText.IndexOf ("/*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline text  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  				textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  				return;  			}  			index = lineAboveText.IndexOf ("*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  				textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  				return;  			}  		} else {  			// don't handle // lines' because they're only one lined comments  			int indexAbove = lineAboveText.IndexOf ("///");  			int indexNext = nextLineText.IndexOf ("///");  			if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < indexAbove; ++i) {  					indentation.Append (' ');  				}  				// adding curline text if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  				textArea.Caret.Column = indentation.Length + 4;  				return;  			}  			if (IsInNonVerbatimString (lineAboveText' curLineText)) {  				textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  				curLine = textArea.Document.GetLineSegment (lineNr);  				textArea.Document.Insert (curLine.Offset' "\"");  				addCursorOffset = 1;  			}  		}  	}  	int result = IndentLine (textArea' lineNr) + addCursorOffset;  	if (textArea.TextEditorProperties.AutoInsertCurlyBracket) {  		string oldLineText = TextHelper.GetLineAsString (textArea.Document' lineNr - 1);  		if (oldLineText.EndsWith ("{")) {  			if (NeedCurlyBracket (textArea.Document.TextContent)) {  				textArea.Document.Insert (curLine.Offset + curLine.Length' terminator + "}");  				IndentLine (textArea' lineNr + 1);  			}  		}  	}  	textArea.Caret.Column = result;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: switch (ch) {  case '>':  	if (IsInsideDocumentationComment (textArea' curLine' cursorOffset)) {  		curLineText = textArea.Document.GetText (curLine);  		int column = textArea.Caret.Offset - curLine.Offset;  		int index = Math.Min (column - 1' curLineText.Length - 1);  		while (index >= 0 && curLineText [index] != '<') {  			--index;  			if (curLineText [index] == '/')  				return;  			// the tag was an end tag or already  		}  		if (index > 0) {  			StringBuilder commentBuilder = new StringBuilder ("");  			for (int i = index; i < curLineText.Length && i < column && !Char.IsWhiteSpace (curLineText [i]); ++i) {  				commentBuilder.Append (curLineText [i]);  			}  			string tag = commentBuilder.ToString ().Trim ();  			if (!tag.EndsWith (">")) {  				tag += ">";  			}  			if (!tag.StartsWith ("/")) {  				textArea.Document.Insert (textArea.Caret.Offset' "</" + tag.Substring (1));  			}  		}  	}  	break;  case ':':  case ')':  case ']':  case '}':  case '{':  	if (textArea.Document.TextEditorProperties.IndentStyle == IndentStyle.Smart) {  		textArea.Document.FormattingStrategy.IndentLine (textArea' lineNr);  	}  	break;  case '\n':  	string lineAboveText = lineAbove == null ? "" : textArea.Document.GetText (lineAbove);  	//// curLine might have some text which should be added to indentation  	curLineText = "";  	if (curLine.Length > 0) {  		curLineText = textArea.Document.GetText (curLine);  	}  	LineSegment nextLine = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetLineSegment (lineNr + 1) : null;  	string nextLineText = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetText (nextLine) : "";  	int addCursorOffset = 0;  	if (lineAboveText.Trim ().StartsWith ("#region") && NeedEndregion (textArea.Document)) {  		textArea.Document.Insert (curLine.Offset' "#endregion");  		textArea.Caret.Column = IndentLine (textArea' lineNr);  		return;  	}  	if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  		if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  			// case for /* style comments  			int index = lineAboveText.IndexOf ("/*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline text  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  				textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  				return;  			}  			index = lineAboveText.IndexOf ("*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  				textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  				return;  			}  		} else {  			// don't handle // lines' because they're only one lined comments  			int indexAbove = lineAboveText.IndexOf ("///");  			int indexNext = nextLineText.IndexOf ("///");  			if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < indexAbove; ++i) {  					indentation.Append (' ');  				}  				// adding curline text if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  				textArea.Caret.Column = indentation.Length + 4;  				return;  			}  			if (IsInNonVerbatimString (lineAboveText' curLineText)) {  				textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  				curLine = textArea.Document.GetLineSegment (lineNr);  				textArea.Document.Insert (curLine.Offset' "\"");  				addCursorOffset = 1;  			}  		}  	}  	int result = IndentLine (textArea' lineNr) + addCursorOffset;  	if (textArea.TextEditorProperties.AutoInsertCurlyBracket) {  		string oldLineText = TextHelper.GetLineAsString (textArea.Document' lineNr - 1);  		if (oldLineText.EndsWith ("{")) {  			if (NeedCurlyBracket (textArea.Document.TextContent)) {  				textArea.Document.Insert (curLine.Offset + curLine.Length' terminator + "}");  				IndentLine (textArea' lineNr + 1);  			}  		}  	}  	textArea.Caret.Column = result;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: switch (ch) {  case '>':  	if (IsInsideDocumentationComment (textArea' curLine' cursorOffset)) {  		curLineText = textArea.Document.GetText (curLine);  		int column = textArea.Caret.Offset - curLine.Offset;  		int index = Math.Min (column - 1' curLineText.Length - 1);  		while (index >= 0 && curLineText [index] != '<') {  			--index;  			if (curLineText [index] == '/')  				return;  			// the tag was an end tag or already  		}  		if (index > 0) {  			StringBuilder commentBuilder = new StringBuilder ("");  			for (int i = index; i < curLineText.Length && i < column && !Char.IsWhiteSpace (curLineText [i]); ++i) {  				commentBuilder.Append (curLineText [i]);  			}  			string tag = commentBuilder.ToString ().Trim ();  			if (!tag.EndsWith (">")) {  				tag += ">";  			}  			if (!tag.StartsWith ("/")) {  				textArea.Document.Insert (textArea.Caret.Offset' "</" + tag.Substring (1));  			}  		}  	}  	break;  case ':':  case ')':  case ']':  case '}':  case '{':  	if (textArea.Document.TextEditorProperties.IndentStyle == IndentStyle.Smart) {  		textArea.Document.FormattingStrategy.IndentLine (textArea' lineNr);  	}  	break;  case '\n':  	string lineAboveText = lineAbove == null ? "" : textArea.Document.GetText (lineAbove);  	//// curLine might have some text which should be added to indentation  	curLineText = "";  	if (curLine.Length > 0) {  		curLineText = textArea.Document.GetText (curLine);  	}  	LineSegment nextLine = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetLineSegment (lineNr + 1) : null;  	string nextLineText = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetText (nextLine) : "";  	int addCursorOffset = 0;  	if (lineAboveText.Trim ().StartsWith ("#region") && NeedEndregion (textArea.Document)) {  		textArea.Document.Insert (curLine.Offset' "#endregion");  		textArea.Caret.Column = IndentLine (textArea' lineNr);  		return;  	}  	if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  		if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  			// case for /* style comments  			int index = lineAboveText.IndexOf ("/*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline text  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  				textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  				return;  			}  			index = lineAboveText.IndexOf ("*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  				textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  				return;  			}  		} else {  			// don't handle // lines' because they're only one lined comments  			int indexAbove = lineAboveText.IndexOf ("///");  			int indexNext = nextLineText.IndexOf ("///");  			if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < indexAbove; ++i) {  					indentation.Append (' ');  				}  				// adding curline text if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  				textArea.Caret.Column = indentation.Length + 4;  				return;  			}  			if (IsInNonVerbatimString (lineAboveText' curLineText)) {  				textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  				curLine = textArea.Document.GetLineSegment (lineNr);  				textArea.Document.Insert (curLine.Offset' "\"");  				addCursorOffset = 1;  			}  		}  	}  	int result = IndentLine (textArea' lineNr) + addCursorOffset;  	if (textArea.TextEditorProperties.AutoInsertCurlyBracket) {  		string oldLineText = TextHelper.GetLineAsString (textArea.Document' lineNr - 1);  		if (oldLineText.EndsWith ("{")) {  			if (NeedCurlyBracket (textArea.Document.TextContent)) {  				textArea.Document.Insert (curLine.Offset + curLine.Length' terminator + "}");  				IndentLine (textArea' lineNr + 1);  			}  		}  	}  	textArea.Caret.Column = result;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: switch (ch) {  case '>':  	if (IsInsideDocumentationComment (textArea' curLine' cursorOffset)) {  		curLineText = textArea.Document.GetText (curLine);  		int column = textArea.Caret.Offset - curLine.Offset;  		int index = Math.Min (column - 1' curLineText.Length - 1);  		while (index >= 0 && curLineText [index] != '<') {  			--index;  			if (curLineText [index] == '/')  				return;  			// the tag was an end tag or already  		}  		if (index > 0) {  			StringBuilder commentBuilder = new StringBuilder ("");  			for (int i = index; i < curLineText.Length && i < column && !Char.IsWhiteSpace (curLineText [i]); ++i) {  				commentBuilder.Append (curLineText [i]);  			}  			string tag = commentBuilder.ToString ().Trim ();  			if (!tag.EndsWith (">")) {  				tag += ">";  			}  			if (!tag.StartsWith ("/")) {  				textArea.Document.Insert (textArea.Caret.Offset' "</" + tag.Substring (1));  			}  		}  	}  	break;  case ':':  case ')':  case ']':  case '}':  case '{':  	if (textArea.Document.TextEditorProperties.IndentStyle == IndentStyle.Smart) {  		textArea.Document.FormattingStrategy.IndentLine (textArea' lineNr);  	}  	break;  case '\n':  	string lineAboveText = lineAbove == null ? "" : textArea.Document.GetText (lineAbove);  	//// curLine might have some text which should be added to indentation  	curLineText = "";  	if (curLine.Length > 0) {  		curLineText = textArea.Document.GetText (curLine);  	}  	LineSegment nextLine = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetLineSegment (lineNr + 1) : null;  	string nextLineText = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetText (nextLine) : "";  	int addCursorOffset = 0;  	if (lineAboveText.Trim ().StartsWith ("#region") && NeedEndregion (textArea.Document)) {  		textArea.Document.Insert (curLine.Offset' "#endregion");  		textArea.Caret.Column = IndentLine (textArea' lineNr);  		return;  	}  	if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  		if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  			// case for /* style comments  			int index = lineAboveText.IndexOf ("/*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline text  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  				textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  				return;  			}  			index = lineAboveText.IndexOf ("*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  				textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  				return;  			}  		} else {  			// don't handle // lines' because they're only one lined comments  			int indexAbove = lineAboveText.IndexOf ("///");  			int indexNext = nextLineText.IndexOf ("///");  			if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < indexAbove; ++i) {  					indentation.Append (' ');  				}  				// adding curline text if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  				textArea.Caret.Column = indentation.Length + 4;  				return;  			}  			if (IsInNonVerbatimString (lineAboveText' curLineText)) {  				textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  				curLine = textArea.Document.GetLineSegment (lineNr);  				textArea.Document.Insert (curLine.Offset' "\"");  				addCursorOffset = 1;  			}  		}  	}  	int result = IndentLine (textArea' lineNr) + addCursorOffset;  	if (textArea.TextEditorProperties.AutoInsertCurlyBracket) {  		string oldLineText = TextHelper.GetLineAsString (textArea.Document' lineNr - 1);  		if (oldLineText.EndsWith ("{")) {  			if (NeedCurlyBracket (textArea.Document.TextContent)) {  				textArea.Document.Insert (curLine.Offset + curLine.Length' terminator + "}");  				IndentLine (textArea' lineNr + 1);  			}  		}  	}  	textArea.Caret.Column = result;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  	if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  		// case for /* style comments  		int index = lineAboveText.IndexOf ("/*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline text  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  			textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  			return;  		}  		index = lineAboveText.IndexOf ("*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  			textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  			return;  		}  	} else {  		// don't handle // lines' because they're only one lined comments  		int indexAbove = lineAboveText.IndexOf ("///");  		int indexNext = nextLineText.IndexOf ("///");  		if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < indexAbove; ++i) {  				indentation.Append (' ');  			}  			// adding curline text if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  			textArea.Caret.Column = indentation.Length + 4;  			return;  		}  		if (IsInNonVerbatimString (lineAboveText' curLineText)) {  			textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  			curLine = textArea.Document.GetLineSegment (lineNr);  			textArea.Document.Insert (curLine.Offset' "\"");  			addCursorOffset = 1;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  	if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  		// case for /* style comments  		int index = lineAboveText.IndexOf ("/*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline text  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  			textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  			return;  		}  		index = lineAboveText.IndexOf ("*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  			textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  			return;  		}  	} else {  		// don't handle // lines' because they're only one lined comments  		int indexAbove = lineAboveText.IndexOf ("///");  		int indexNext = nextLineText.IndexOf ("///");  		if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < indexAbove; ++i) {  				indentation.Append (' ');  			}  			// adding curline text if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  			textArea.Caret.Column = indentation.Length + 4;  			return;  		}  		if (IsInNonVerbatimString (lineAboveText' curLineText)) {  			textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  			curLine = textArea.Document.GetLineSegment (lineNr);  			textArea.Document.Insert (curLine.Offset' "\"");  			addCursorOffset = 1;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  	if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  		// case for /* style comments  		int index = lineAboveText.IndexOf ("/*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline text  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  			textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  			return;  		}  		index = lineAboveText.IndexOf ("*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  			textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  			return;  		}  	} else {  		// don't handle // lines' because they're only one lined comments  		int indexAbove = lineAboveText.IndexOf ("///");  		int indexNext = nextLineText.IndexOf ("///");  		if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < indexAbove; ++i) {  				indentation.Append (' ');  			}  			// adding curline text if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  			textArea.Caret.Column = indentation.Length + 4;  			return;  		}  		if (IsInNonVerbatimString (lineAboveText' curLineText)) {  			textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  			curLine = textArea.Document.GetLineSegment (lineNr);  			textArea.Document.Insert (curLine.Offset' "\"");  			addCursorOffset = 1;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  	if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  		// case for /* style comments  		int index = lineAboveText.IndexOf ("/*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline text  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  			textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  			return;  		}  		index = lineAboveText.IndexOf ("*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  			textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  			return;  		}  	} else {  		// don't handle // lines' because they're only one lined comments  		int indexAbove = lineAboveText.IndexOf ("///");  		int indexNext = nextLineText.IndexOf ("///");  		if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < indexAbove; ++i) {  				indentation.Append (' ');  			}  			// adding curline text if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  			textArea.Caret.Column = indentation.Length + 4;  			return;  		}  		if (IsInNonVerbatimString (lineAboveText' curLineText)) {  			textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  			curLine = textArea.Document.GetLineSegment (lineNr);  			textArea.Document.Insert (curLine.Offset' "\"");  			addCursorOffset = 1;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  	// case for /* style comments  	int index = lineAboveText.IndexOf ("/*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline text  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  		textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  		return;  	}  	index = lineAboveText.IndexOf ("*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  		textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  		return;  	}  } else {  	// don't handle // lines' because they're only one lined comments  	int indexAbove = lineAboveText.IndexOf ("///");  	int indexNext = nextLineText.IndexOf ("///");  	if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < indexAbove; ++i) {  			indentation.Append (' ');  		}  		// adding curline text if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  		textArea.Caret.Column = indentation.Length + 4;  		return;  	}  	if (IsInNonVerbatimString (lineAboveText' curLineText)) {  		textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  		curLine = textArea.Document.GetLineSegment (lineNr);  		textArea.Document.Insert (curLine.Offset' "\"");  		addCursorOffset = 1;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  	// case for /* style comments  	int index = lineAboveText.IndexOf ("/*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline text  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  		textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  		return;  	}  	index = lineAboveText.IndexOf ("*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  		textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  		return;  	}  } else {  	// don't handle // lines' because they're only one lined comments  	int indexAbove = lineAboveText.IndexOf ("///");  	int indexNext = nextLineText.IndexOf ("///");  	if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < indexAbove; ++i) {  			indentation.Append (' ');  		}  		// adding curline text if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  		textArea.Caret.Column = indentation.Length + 4;  		return;  	}  	if (IsInNonVerbatimString (lineAboveText' curLineText)) {  		textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  		curLine = textArea.Document.GetLineSegment (lineNr);  		textArea.Document.Insert (curLine.Offset' "\"");  		addCursorOffset = 1;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  	// case for /* style comments  	int index = lineAboveText.IndexOf ("/*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline text  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  		textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  		return;  	}  	index = lineAboveText.IndexOf ("*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  		textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  		return;  	}  } else {  	// don't handle // lines' because they're only one lined comments  	int indexAbove = lineAboveText.IndexOf ("///");  	int indexNext = nextLineText.IndexOf ("///");  	if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < indexAbove; ++i) {  			indentation.Append (' ');  		}  		// adding curline text if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  		textArea.Caret.Column = indentation.Length + 4;  		return;  	}  	if (IsInNonVerbatimString (lineAboveText' curLineText)) {  		textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  		curLine = textArea.Document.GetLineSegment (lineNr);  		textArea.Document.Insert (curLine.Offset' "\"");  		addCursorOffset = 1;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  	// case for /* style comments  	int index = lineAboveText.IndexOf ("/*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline text  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  		textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  		return;  	}  	index = lineAboveText.IndexOf ("*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  		textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  		return;  	}  } else {  	// don't handle // lines' because they're only one lined comments  	int indexAbove = lineAboveText.IndexOf ("///");  	int indexNext = nextLineText.IndexOf ("///");  	if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < indexAbove; ++i) {  			indentation.Append (' ');  		}  		// adding curline text if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  		textArea.Caret.Column = indentation.Length + 4;  		return;  	}  	if (IsInNonVerbatimString (lineAboveText' curLineText)) {  		textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  		curLine = textArea.Document.GetLineSegment (lineNr);  		textArea.Document.Insert (curLine.Offset' "\"");  		addCursorOffset = 1;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (index > 0) {  	StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  	for (int i = indentation.Length; i < index; ++i) {  		indentation.Append (' ');  	}  	// adding curline text  	textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  	textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (index > 0) {  	StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  	for (int i = indentation.Length; i < index; ++i) {  		indentation.Append (' ');  	}  	// adding curline if present  	textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  	textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  	StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  	for (int i = indentation.Length; i < indexAbove; ++i) {  		indentation.Append (' ');  	}  	// adding curline text if present  	textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  	textArea.Caret.Column = indentation.Length + 4;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  	StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  	for (int i = indentation.Length; i < indexAbove; ++i) {  		indentation.Append (' ');  	}  	// adding curline text if present  	textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  	textArea.Caret.Column = indentation.Length + 4;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: textArea.Caret.Column = indentation.Length + 4;  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,GetStartType,The following statement contains a magic number: return (inString || inChar) ? 2 : 0;  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: switch (ch) {  case ':':  case ')':  case ']':  case '}':  case '{':  	if (textArea.Document.TextEditorProperties.IndentStyle == IndentStyle.Smart)  		IndentLine (textArea' lineNr);  	break;  case '\n':  	string lineAboveText = (lineAbove == null) ? "" : textArea.Document.GetText (lineAbove);  	// curLine might have some text which should be added to indentation  	curLineText = "";  	if (curLine.Length > 0)  		curLineText = textArea.Document.GetText (curLine);  	int addCursorOffset = 0;  	if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  		if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  			// case for /* style comments  			int index = lineAboveText.IndexOf ("/*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline text  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  				textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  				return;  			}  			index = lineAboveText.IndexOf ("*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  				textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  				return;  			}  		} else {  			if (IsInNonVerbatimString (lineAboveText' curLineText)) {  				textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  				curLine = textArea.Document.GetLineSegment (lineNr);  				textArea.Document.Insert (curLine.Offset' "\"");  				addCursorOffset = 1;  			}  		}  	}  	int result = IndentLine (textArea' lineNr) + addCursorOffset;  	if (textArea.TextEditorProperties.AutoInsertCurlyBracket) {  		string oldLineText = TextHelper.GetLineAsString (textArea.Document' lineNr - 1);  		if (oldLineText.EndsWith ("{")) {  			if (NeedCurlyBracket (textArea.Document.TextContent)) {  				textArea.Document.Insert (curLine.Offset + curLine.Length' terminator + "}");  				IndentLine (textArea' lineNr + 1);  			}  		}  	}  	textArea.Caret.Column = result;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: switch (ch) {  case ':':  case ')':  case ']':  case '}':  case '{':  	if (textArea.Document.TextEditorProperties.IndentStyle == IndentStyle.Smart)  		IndentLine (textArea' lineNr);  	break;  case '\n':  	string lineAboveText = (lineAbove == null) ? "" : textArea.Document.GetText (lineAbove);  	// curLine might have some text which should be added to indentation  	curLineText = "";  	if (curLine.Length > 0)  		curLineText = textArea.Document.GetText (curLine);  	int addCursorOffset = 0;  	if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  		if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  			// case for /* style comments  			int index = lineAboveText.IndexOf ("/*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline text  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  				textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  				return;  			}  			index = lineAboveText.IndexOf ("*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  				textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  				return;  			}  		} else {  			if (IsInNonVerbatimString (lineAboveText' curLineText)) {  				textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  				curLine = textArea.Document.GetLineSegment (lineNr);  				textArea.Document.Insert (curLine.Offset' "\"");  				addCursorOffset = 1;  			}  		}  	}  	int result = IndentLine (textArea' lineNr) + addCursorOffset;  	if (textArea.TextEditorProperties.AutoInsertCurlyBracket) {  		string oldLineText = TextHelper.GetLineAsString (textArea.Document' lineNr - 1);  		if (oldLineText.EndsWith ("{")) {  			if (NeedCurlyBracket (textArea.Document.TextContent)) {  				textArea.Document.Insert (curLine.Offset + curLine.Length' terminator + "}");  				IndentLine (textArea' lineNr + 1);  			}  		}  	}  	textArea.Caret.Column = result;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  	if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  		// case for /* style comments  		int index = lineAboveText.IndexOf ("/*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline text  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  			textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  			return;  		}  		index = lineAboveText.IndexOf ("*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  			textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  			return;  		}  	} else {  		if (IsInNonVerbatimString (lineAboveText' curLineText)) {  			textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  			curLine = textArea.Document.GetLineSegment (lineNr);  			textArea.Document.Insert (curLine.Offset' "\"");  			addCursorOffset = 1;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  	if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  		// case for /* style comments  		int index = lineAboveText.IndexOf ("/*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline text  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  			textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  			return;  		}  		index = lineAboveText.IndexOf ("*");  		if (index > 0) {  			StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  			for (int i = indentation.Length; i < index; ++i) {  				indentation.Append (' ');  			}  			// adding curline if present  			textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  			textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  			return;  		}  	} else {  		if (IsInNonVerbatimString (lineAboveText' curLineText)) {  			textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  			curLine = textArea.Document.GetLineSegment (lineNr);  			textArea.Document.Insert (curLine.Offset' "\"");  			addCursorOffset = 1;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  	// case for /* style comments  	int index = lineAboveText.IndexOf ("/*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline text  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  		textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  		return;  	}  	index = lineAboveText.IndexOf ("*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  		textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  		return;  	}  } else {  	if (IsInNonVerbatimString (lineAboveText' curLineText)) {  		textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  		curLine = textArea.Document.GetLineSegment (lineNr);  		textArea.Document.Insert (curLine.Offset' "\"");  		addCursorOffset = 1;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  	// case for /* style comments  	int index = lineAboveText.IndexOf ("/*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline text  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  		textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  		return;  	}  	index = lineAboveText.IndexOf ("*");  	if (index > 0) {  		StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  		for (int i = indentation.Length; i < index; ++i) {  			indentation.Append (' ');  		}  		// adding curline if present  		textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  		textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  		return;  	}  } else {  	if (IsInNonVerbatimString (lineAboveText' curLineText)) {  		textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  		curLine = textArea.Document.GetLineSegment (lineNr);  		textArea.Document.Insert (curLine.Offset' "\"");  		addCursorOffset = 1;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (index > 0) {  	StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  	for (int i = indentation.Length; i < index; ++i) {  		indentation.Append (' ');  	}  	// adding curline text  	textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  	textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: if (index > 0) {  	StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  	for (int i = indentation.Length; i < index; ++i) {  		indentation.Append (' ');  	}  	// adding curline if present  	textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  	textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following statement contains a magic number: textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,GetStartType,The following statement contains a magic number: return (inString || inChar) ? 2 : 0;  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,FormatLine,The following statement contains a magic number: try {  	if (charTyped == '>') {  		StringBuilder stringBuilder = new StringBuilder ();  		int offset = Math.Min (caretOffset - 2' textArea.Document.TextLength - 1);  		while (true) {  			if (offset < 0) {  				break;  			}  			char ch = textArea.Document.GetCharAt (offset);  			if (ch == '<') {  				string reversedTag = stringBuilder.ToString ().Trim ();  				if (!reversedTag.StartsWith ("/") && !reversedTag.EndsWith ("/")) {  					bool validXml = true;  					try {  						XmlDocument doc = new XmlDocument ();  						doc.LoadXml (textArea.Document.TextContent);  					} catch (Exception) {  						validXml = false;  					}  					// only insert the tag' if something is missing  					if (!validXml) {  						StringBuilder tag = new StringBuilder ();  						for (int i = reversedTag.Length - 1; i >= 0 && !Char.IsWhiteSpace (reversedTag [i]); --i) {  							tag.Append (reversedTag [i]);  						}  						string tagString = tag.ToString ();  						if (tagString.Length > 0 && !tagString.StartsWith ("!") && !tagString.StartsWith ("?")) {  							textArea.Document.Insert (caretOffset' "</" + tagString + ">");  						}  					}  				}  				break;  			}  			stringBuilder.Append (ch);  			--offset;  		}  	}  } catch (Exception e) {  	// Insanity check  	Debug.Assert (false' e.ToString ());  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,FormatLine,The following statement contains a magic number: if (charTyped == '>') {  	StringBuilder stringBuilder = new StringBuilder ();  	int offset = Math.Min (caretOffset - 2' textArea.Document.TextLength - 1);  	while (true) {  		if (offset < 0) {  			break;  		}  		char ch = textArea.Document.GetCharAt (offset);  		if (ch == '<') {  			string reversedTag = stringBuilder.ToString ().Trim ();  			if (!reversedTag.StartsWith ("/") && !reversedTag.EndsWith ("/")) {  				bool validXml = true;  				try {  					XmlDocument doc = new XmlDocument ();  					doc.LoadXml (textArea.Document.TextContent);  				} catch (Exception) {  					validXml = false;  				}  				// only insert the tag' if something is missing  				if (!validXml) {  					StringBuilder tag = new StringBuilder ();  					for (int i = reversedTag.Length - 1; i >= 0 && !Char.IsWhiteSpace (reversedTag [i]); --i) {  						tag.Append (reversedTag [i]);  					}  					string tagString = tag.ToString ();  					if (tagString.Length > 0 && !tagString.StartsWith ("!") && !tagString.StartsWith ("?")) {  						textArea.Document.Insert (caretOffset' "</" + tagString + ">");  					}  				}  			}  			break;  		}  		stringBuilder.Append (ch);  		--offset;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The following statement contains a magic number: using (StringReader stringReader = new StringReader (document.TextContent)) {  	XmlTextReader reader = new XmlTextReader (stringReader);  	reader.XmlResolver = null;  	// prevent XmlTextReader from loading external DTDs  	while (reader.Read ()) {  		if (wasEmptyElement) {  			if (tagStack.Count == 0)  				currentIndentation = "";  			else  				currentIndentation = (string)tagStack.Pop ();  		}  		if (reader.NodeType == XmlNodeType.EndElement) {  			// Indent lines before closing tag.  			while (nextLine + 1 < reader.LineNumber) {  				// Set indentation of 'nextLine'  				LineSegment line = document.GetLineSegment (nextLine);  				string lineText = document.GetText (line);  				string newText = currentIndentation + lineText.Trim ();  				if (newText != lineText)  					document.Replace (line.Offset' line.Length' newText);  				nextLine += 1;  			}  			if (tagStack.Count == 0)  				currentIndentation = "";  			else  				currentIndentation = (string)tagStack.Pop ();  		}  		while (reader.LineNumber > nextLine) {  			// Caution: here we compare 1-based and 0-based line numbers  			if (nextLine > end)  				break;  			if (lastType == XmlNodeType.CDATA || lastType == XmlNodeType.Comment) {  				nextLine += 1;  				continue;  			}  			// Set indentation of 'nextLine'  			LineSegment line = document.GetLineSegment (nextLine);  			string lineText = document.GetText (line);  			string newText;  			// Special case: Opening tag has closing bracket on extra line: remove one indentation level.  			if (lineText.Trim () == ">")  				newText = (string)tagStack.Peek () + lineText.Trim ();  			else  				newText = currentIndentation + lineText.Trim ();  			if (newText != lineText)  				document.Replace (line.Offset' line.Length' newText);  			nextLine += 1;  		}  		if (reader.LineNumber > end)  			break;  		wasEmptyElement = reader.NodeType == XmlNodeType.Element && reader.IsEmptyElement;  		string attribIndent = null;  		if (reader.NodeType == XmlNodeType.Element) {  			tagStack.Push (currentIndentation);  			if (reader.LineNumber < begin)  				currentIndentation = GetIndentation (textArea' reader.LineNumber - 1);  			if (reader.Name.Length < 16)  				attribIndent = currentIndentation + new String (' '' 2 + reader.Name.Length);  			else  				attribIndent = currentIndentation + tab;  			currentIndentation += tab;  		}  		lastType = reader.NodeType;  		if (reader.NodeType == XmlNodeType.Element && reader.HasAttributes) {  			int startLine = reader.LineNumber;  			reader.MoveToAttribute (0);  			// move to first attribute  			if (reader.LineNumber != startLine)  				attribIndent = currentIndentation;  			// change to tab-indentation  			reader.MoveToAttribute (reader.AttributeCount - 1);  			while (reader.LineNumber > nextLine) {  				// caution: here we compare 1-based and 0-based line numbers  				if (nextLine > end)  					break;  				// set indentation of 'nextLine'  				LineSegment line = document.GetLineSegment (nextLine);  				string lineText = document.GetText (line);  				string newText = attribIndent + lineText.Trim ();  				if (newText != lineText)  					document.Replace (line.Offset' line.Length' newText);  				nextLine += 1;  			}  		}  	}  	reader.Close ();  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The following statement contains a magic number: using (StringReader stringReader = new StringReader (document.TextContent)) {  	XmlTextReader reader = new XmlTextReader (stringReader);  	reader.XmlResolver = null;  	// prevent XmlTextReader from loading external DTDs  	while (reader.Read ()) {  		if (wasEmptyElement) {  			if (tagStack.Count == 0)  				currentIndentation = "";  			else  				currentIndentation = (string)tagStack.Pop ();  		}  		if (reader.NodeType == XmlNodeType.EndElement) {  			// Indent lines before closing tag.  			while (nextLine + 1 < reader.LineNumber) {  				// Set indentation of 'nextLine'  				LineSegment line = document.GetLineSegment (nextLine);  				string lineText = document.GetText (line);  				string newText = currentIndentation + lineText.Trim ();  				if (newText != lineText)  					document.Replace (line.Offset' line.Length' newText);  				nextLine += 1;  			}  			if (tagStack.Count == 0)  				currentIndentation = "";  			else  				currentIndentation = (string)tagStack.Pop ();  		}  		while (reader.LineNumber > nextLine) {  			// Caution: here we compare 1-based and 0-based line numbers  			if (nextLine > end)  				break;  			if (lastType == XmlNodeType.CDATA || lastType == XmlNodeType.Comment) {  				nextLine += 1;  				continue;  			}  			// Set indentation of 'nextLine'  			LineSegment line = document.GetLineSegment (nextLine);  			string lineText = document.GetText (line);  			string newText;  			// Special case: Opening tag has closing bracket on extra line: remove one indentation level.  			if (lineText.Trim () == ">")  				newText = (string)tagStack.Peek () + lineText.Trim ();  			else  				newText = currentIndentation + lineText.Trim ();  			if (newText != lineText)  				document.Replace (line.Offset' line.Length' newText);  			nextLine += 1;  		}  		if (reader.LineNumber > end)  			break;  		wasEmptyElement = reader.NodeType == XmlNodeType.Element && reader.IsEmptyElement;  		string attribIndent = null;  		if (reader.NodeType == XmlNodeType.Element) {  			tagStack.Push (currentIndentation);  			if (reader.LineNumber < begin)  				currentIndentation = GetIndentation (textArea' reader.LineNumber - 1);  			if (reader.Name.Length < 16)  				attribIndent = currentIndentation + new String (' '' 2 + reader.Name.Length);  			else  				attribIndent = currentIndentation + tab;  			currentIndentation += tab;  		}  		lastType = reader.NodeType;  		if (reader.NodeType == XmlNodeType.Element && reader.HasAttributes) {  			int startLine = reader.LineNumber;  			reader.MoveToAttribute (0);  			// move to first attribute  			if (reader.LineNumber != startLine)  				attribIndent = currentIndentation;  			// change to tab-indentation  			reader.MoveToAttribute (reader.AttributeCount - 1);  			while (reader.LineNumber > nextLine) {  				// caution: here we compare 1-based and 0-based line numbers  				if (nextLine > end)  					break;  				// set indentation of 'nextLine'  				LineSegment line = document.GetLineSegment (nextLine);  				string lineText = document.GetText (line);  				string newText = attribIndent + lineText.Trim ();  				if (newText != lineText)  					document.Replace (line.Offset' line.Length' newText);  				nextLine += 1;  			}  		}  	}  	reader.Close ();  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The following statement contains a magic number: while (reader.Read ()) {  	if (wasEmptyElement) {  		if (tagStack.Count == 0)  			currentIndentation = "";  		else  			currentIndentation = (string)tagStack.Pop ();  	}  	if (reader.NodeType == XmlNodeType.EndElement) {  		// Indent lines before closing tag.  		while (nextLine + 1 < reader.LineNumber) {  			// Set indentation of 'nextLine'  			LineSegment line = document.GetLineSegment (nextLine);  			string lineText = document.GetText (line);  			string newText = currentIndentation + lineText.Trim ();  			if (newText != lineText)  				document.Replace (line.Offset' line.Length' newText);  			nextLine += 1;  		}  		if (tagStack.Count == 0)  			currentIndentation = "";  		else  			currentIndentation = (string)tagStack.Pop ();  	}  	while (reader.LineNumber > nextLine) {  		// Caution: here we compare 1-based and 0-based line numbers  		if (nextLine > end)  			break;  		if (lastType == XmlNodeType.CDATA || lastType == XmlNodeType.Comment) {  			nextLine += 1;  			continue;  		}  		// Set indentation of 'nextLine'  		LineSegment line = document.GetLineSegment (nextLine);  		string lineText = document.GetText (line);  		string newText;  		// Special case: Opening tag has closing bracket on extra line: remove one indentation level.  		if (lineText.Trim () == ">")  			newText = (string)tagStack.Peek () + lineText.Trim ();  		else  			newText = currentIndentation + lineText.Trim ();  		if (newText != lineText)  			document.Replace (line.Offset' line.Length' newText);  		nextLine += 1;  	}  	if (reader.LineNumber > end)  		break;  	wasEmptyElement = reader.NodeType == XmlNodeType.Element && reader.IsEmptyElement;  	string attribIndent = null;  	if (reader.NodeType == XmlNodeType.Element) {  		tagStack.Push (currentIndentation);  		if (reader.LineNumber < begin)  			currentIndentation = GetIndentation (textArea' reader.LineNumber - 1);  		if (reader.Name.Length < 16)  			attribIndent = currentIndentation + new String (' '' 2 + reader.Name.Length);  		else  			attribIndent = currentIndentation + tab;  		currentIndentation += tab;  	}  	lastType = reader.NodeType;  	if (reader.NodeType == XmlNodeType.Element && reader.HasAttributes) {  		int startLine = reader.LineNumber;  		reader.MoveToAttribute (0);  		// move to first attribute  		if (reader.LineNumber != startLine)  			attribIndent = currentIndentation;  		// change to tab-indentation  		reader.MoveToAttribute (reader.AttributeCount - 1);  		while (reader.LineNumber > nextLine) {  			// caution: here we compare 1-based and 0-based line numbers  			if (nextLine > end)  				break;  			// set indentation of 'nextLine'  			LineSegment line = document.GetLineSegment (nextLine);  			string lineText = document.GetText (line);  			string newText = attribIndent + lineText.Trim ();  			if (newText != lineText)  				document.Replace (line.Offset' line.Length' newText);  			nextLine += 1;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The following statement contains a magic number: while (reader.Read ()) {  	if (wasEmptyElement) {  		if (tagStack.Count == 0)  			currentIndentation = "";  		else  			currentIndentation = (string)tagStack.Pop ();  	}  	if (reader.NodeType == XmlNodeType.EndElement) {  		// Indent lines before closing tag.  		while (nextLine + 1 < reader.LineNumber) {  			// Set indentation of 'nextLine'  			LineSegment line = document.GetLineSegment (nextLine);  			string lineText = document.GetText (line);  			string newText = currentIndentation + lineText.Trim ();  			if (newText != lineText)  				document.Replace (line.Offset' line.Length' newText);  			nextLine += 1;  		}  		if (tagStack.Count == 0)  			currentIndentation = "";  		else  			currentIndentation = (string)tagStack.Pop ();  	}  	while (reader.LineNumber > nextLine) {  		// Caution: here we compare 1-based and 0-based line numbers  		if (nextLine > end)  			break;  		if (lastType == XmlNodeType.CDATA || lastType == XmlNodeType.Comment) {  			nextLine += 1;  			continue;  		}  		// Set indentation of 'nextLine'  		LineSegment line = document.GetLineSegment (nextLine);  		string lineText = document.GetText (line);  		string newText;  		// Special case: Opening tag has closing bracket on extra line: remove one indentation level.  		if (lineText.Trim () == ">")  			newText = (string)tagStack.Peek () + lineText.Trim ();  		else  			newText = currentIndentation + lineText.Trim ();  		if (newText != lineText)  			document.Replace (line.Offset' line.Length' newText);  		nextLine += 1;  	}  	if (reader.LineNumber > end)  		break;  	wasEmptyElement = reader.NodeType == XmlNodeType.Element && reader.IsEmptyElement;  	string attribIndent = null;  	if (reader.NodeType == XmlNodeType.Element) {  		tagStack.Push (currentIndentation);  		if (reader.LineNumber < begin)  			currentIndentation = GetIndentation (textArea' reader.LineNumber - 1);  		if (reader.Name.Length < 16)  			attribIndent = currentIndentation + new String (' '' 2 + reader.Name.Length);  		else  			attribIndent = currentIndentation + tab;  		currentIndentation += tab;  	}  	lastType = reader.NodeType;  	if (reader.NodeType == XmlNodeType.Element && reader.HasAttributes) {  		int startLine = reader.LineNumber;  		reader.MoveToAttribute (0);  		// move to first attribute  		if (reader.LineNumber != startLine)  			attribIndent = currentIndentation;  		// change to tab-indentation  		reader.MoveToAttribute (reader.AttributeCount - 1);  		while (reader.LineNumber > nextLine) {  			// caution: here we compare 1-based and 0-based line numbers  			if (nextLine > end)  				break;  			// set indentation of 'nextLine'  			LineSegment line = document.GetLineSegment (nextLine);  			string lineText = document.GetText (line);  			string newText = attribIndent + lineText.Trim ();  			if (newText != lineText)  				document.Replace (line.Offset' line.Length' newText);  			nextLine += 1;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The following statement contains a magic number: if (reader.NodeType == XmlNodeType.Element) {  	tagStack.Push (currentIndentation);  	if (reader.LineNumber < begin)  		currentIndentation = GetIndentation (textArea' reader.LineNumber - 1);  	if (reader.Name.Length < 16)  		attribIndent = currentIndentation + new String (' '' 2 + reader.Name.Length);  	else  		attribIndent = currentIndentation + tab;  	currentIndentation += tab;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The following statement contains a magic number: if (reader.NodeType == XmlNodeType.Element) {  	tagStack.Push (currentIndentation);  	if (reader.LineNumber < begin)  		currentIndentation = GetIndentation (textArea' reader.LineNumber - 1);  	if (reader.Name.Length < 16)  		attribIndent = currentIndentation + new String (' '' 2 + reader.Name.Length);  	else  		attribIndent = currentIndentation + tab;  	currentIndentation += tab;  }  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The following statement contains a magic number: if (reader.Name.Length < 16)  	attribIndent = currentIndentation + new String (' '' 2 + reader.Name.Length);  else  	attribIndent = currentIndentation + tab;  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The following statement contains a magic number: if (reader.Name.Length < 16)  	attribIndent = currentIndentation + new String (' '' 2 + reader.Name.Length);  else  	attribIndent = currentIndentation + tab;  
Magic Number,DigitalRune.Windows.TextEditor.Formatting,XmlFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\XmlFormattingStrategy.cs,TryIndent,The following statement contains a magic number: attribIndent = currentIndentation + new String (' '' 2 + reader.Name.Length);  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MarkTokens,The following statement contains a magic number: if (spanChanged || inputLines.Count > 20) {  	// if the span was changed (more than inputLines lines had to be reevaluated)  	// or if there are many lines in inputLines' it's faster to update the whole  	// text area instead of many small segments  	document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.WholeTextArea));  } else {  	//				document.Caret.ValidateCaretPos();  	//				document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.SingleLine' document.GetLineNumberForOffset(document.Caret.Offset)));  	foreach (LineSegment lineToProcess in inputLines) {  		document.RequestUpdate (new TextAreaUpdate (TextAreaUpdateType.SingleLine' lineToProcess.LineNumber));  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: for (int i = 0; i < currentLineLength; ++i) {  	char ch = document.GetCharAt (currentLineOffset + i);  	switch (ch) {  	case '\n':  	case '\r':  		PushCurWord (document' ref markNext' words);  		++_currentOffset;  		break;  	case ' ':  		PushCurWord (document' ref markNext' words);  		if (_activeSpan != null && _activeSpan.Color.HasBackground) {  			words.Add (new TextWord.SpaceTextWord (_activeSpan.Color));  		} else {  			words.Add (TextWord.Space);  		}  		++_currentOffset;  		break;  	case '\t':  		PushCurWord (document' ref markNext' words);  		if (_activeSpan != null && _activeSpan.Color.HasBackground) {  			words.Add (new TextWord.TabTextWord (_activeSpan.Color));  		} else {  			words.Add (TextWord.Tab);  		}  		++_currentOffset;  		break;  	default: {  		// handle escape characters  		char escapeCharacter = '\0';  		if (_activeSpan != null && _activeSpan.EscapeCharacter != '\0') {  			escapeCharacter = _activeSpan.EscapeCharacter;  		} else if (_activeRuleSet != null) {  			escapeCharacter = _activeRuleSet.EscapeCharacter;  		}  		if (escapeCharacter != '\0' && escapeCharacter == ch) {  			// we found the escape character  			if (_activeSpan != null && _activeSpan.End != null && _activeSpan.End.Length == 1 && escapeCharacter == _activeSpan.End [0]) {  				// the escape character is a end-doubling escape character  				// it may count as escape only when the next character is the escape' too  				if (i + 1 < currentLineLength) {  					if (document.GetCharAt (currentLineOffset + i + 1) == escapeCharacter) {  						_currentLength += 2;  						PushCurWord (document' ref markNext' words);  						++i;  						continue;  					}  				}  			} else {  				// this is a normal \-style escape  				++_currentLength;  				if (i + 1 < currentLineLength) {  					++_currentLength;  				}  				PushCurWord (document' ref markNext' words);  				++i;  				continue;  			}  		}  		// highlight digits  		if ((!_inSpan || (_activeRuleSet != null && _activeRuleSet.HighlightDigits)) && (Char.IsDigit (ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1)))) && _currentLength == 0) {  			bool ishex = false;  			bool isfloatingpoint = false;  			if (ch == '0' && i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'X') {  				// hex digits  				const string hex = "0123456789ABCDEF";  				++_currentLength;  				++i;  				// skip 'x'  				++_currentLength;  				ishex = true;  				while (i + 1 < currentLineLength && hex.IndexOf (Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1))) != -1) {  					++i;  					++_currentLength;  				}  			} else {  				++_currentLength;  				while (i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  					++i;  					++_currentLength;  				}  			}  			if (!ishex && i + 1 < currentLineLength && document.GetCharAt (currentLineOffset + i + 1) == '.') {  				isfloatingpoint = true;  				++i;  				++_currentLength;  				while (i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  					++i;  					++_currentLength;  				}  			}  			if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'E') {  				isfloatingpoint = true;  				++i;  				++_currentLength;  				if (i + 1 < currentLineLength && (document.GetCharAt (currentLineOffset + i + 1) == '+' || document.GetCharAt (_currentLine.Offset + i + 1) == '-')) {  					++i;  					++_currentLength;  				}  				while (i + 1 < _currentLine.Length && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  					++i;  					++_currentLength;  				}  			}  			if (i + 1 < _currentLine.Length) {  				char nextch = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  				if (nextch == 'F' || nextch == 'M' || nextch == 'D') {  					isfloatingpoint = true;  					++i;  					++_currentLength;  				} else if (isShaderEffect && (nextch == 'H' || nextch == 'X'))// Hardcoded path for HLSL suffixes  				 {  					isfloatingpoint = true;  					++i;  					++_currentLength;  				}  			}  			if (!isfloatingpoint) {  				if (!isShaderEffect) {  					bool isunsigned = false;  					if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'U') {  						++i;  						++_currentLength;  						isunsigned = true;  					}  					if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'L') {  						++i;  						++_currentLength;  						if (!isunsigned && i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'U') {  							++i;  							++_currentLength;  						}  					}  				} else {  					// Hardcoded path for HLSL number formats  					if (i + 1 < currentLineLength) {  						char nextCh = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  						if (nextCh == 'U') {  							++i;  							++_currentLength;  						}  					}  					if (i + 1 < currentLineLength) {  						char nextCh = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  						if (nextCh == 'I' || nextCh == 'L' || nextCh == 'S' || nextCh == 'T') {  							++i;  							++_currentLength;  						}  					}  				}  			}  			words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' DigitColor' false));  			_currentOffset += _currentLength;  			_currentLength = 0;  			continue;  		}  		// Check for SPAN ENDs  		if (_inSpan) {  			if (_activeSpan.End != null && _activeSpan.End.Length > 0) {  				if (MatchExpr (_currentLine' _activeSpan.End' i' document' _activeSpan.IgnoreCase)) {  					PushCurWord (document' ref markNext' words);  					string regex = GetRegString (_currentLine' _activeSpan.End' i' document);  					_currentLength += regex.Length;  					words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' _activeSpan.EndColor' false));  					_currentOffset += _currentLength;  					_currentLength = 0;  					i += regex.Length - 1;  					_currentSpanStack.Pop ();  					UpdateSpanStateVariables ();  					continue;  				}  			}  		}  		// check for SPAN BEGIN  		if (_activeRuleSet != null) {  			foreach (Span span in _activeRuleSet.Spans) {  				if ((!span.IsBeginSingleWord || _currentLength == 0) && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (_currentLength == 0 && words.TrueForAll (delegate (TextWord textWord) {  					return textWord.Type != TextWordType.Word;  				}))) && MatchExpr (_currentLine' span.Begin' i' document' _activeRuleSet.IgnoreCase' span.IsBeginSingleWord)) {  					PushCurWord (document' ref markNext' words);  					string regex = GetRegString (_currentLine' span.Begin' i' document);  					if (!OverrideSpan (regex' document' words' span' ref i)) {  						_currentLength += regex.Length;  						words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' span.BeginColor' false));  						_currentOffset += _currentLength;  						_currentLength = 0;  						i += regex.Length - 1;  						if (_currentSpanStack == null) {  							_currentSpanStack = new SpanStack ();  						}  						_currentSpanStack.Push (span);  						span.IgnoreCase = _activeRuleSet.IgnoreCase;  						UpdateSpanStateVariables ();  					}  					goto skip;  				}  			}  		}  		// check if the char is a delimiter  		if (_activeRuleSet != null && ch < 256 && _activeRuleSet.Delimiters [ch]) {  			PushCurWord (document' ref markNext' words);  			if (_currentOffset + _currentLength + 1 < _currentLine.Length) {  				++_currentLength;  				PushCurWord (document' ref markNext' words);  				goto skip;  			}  		}  		++_currentLength;  		skip:  		continue;  	}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: for (int i = 0; i < currentLineLength; ++i) {  	char ch = document.GetCharAt (currentLineOffset + i);  	switch (ch) {  	case '\n':  	case '\r':  		PushCurWord (document' ref markNext' words);  		++_currentOffset;  		break;  	case ' ':  		PushCurWord (document' ref markNext' words);  		if (_activeSpan != null && _activeSpan.Color.HasBackground) {  			words.Add (new TextWord.SpaceTextWord (_activeSpan.Color));  		} else {  			words.Add (TextWord.Space);  		}  		++_currentOffset;  		break;  	case '\t':  		PushCurWord (document' ref markNext' words);  		if (_activeSpan != null && _activeSpan.Color.HasBackground) {  			words.Add (new TextWord.TabTextWord (_activeSpan.Color));  		} else {  			words.Add (TextWord.Tab);  		}  		++_currentOffset;  		break;  	default: {  		// handle escape characters  		char escapeCharacter = '\0';  		if (_activeSpan != null && _activeSpan.EscapeCharacter != '\0') {  			escapeCharacter = _activeSpan.EscapeCharacter;  		} else if (_activeRuleSet != null) {  			escapeCharacter = _activeRuleSet.EscapeCharacter;  		}  		if (escapeCharacter != '\0' && escapeCharacter == ch) {  			// we found the escape character  			if (_activeSpan != null && _activeSpan.End != null && _activeSpan.End.Length == 1 && escapeCharacter == _activeSpan.End [0]) {  				// the escape character is a end-doubling escape character  				// it may count as escape only when the next character is the escape' too  				if (i + 1 < currentLineLength) {  					if (document.GetCharAt (currentLineOffset + i + 1) == escapeCharacter) {  						_currentLength += 2;  						PushCurWord (document' ref markNext' words);  						++i;  						continue;  					}  				}  			} else {  				// this is a normal \-style escape  				++_currentLength;  				if (i + 1 < currentLineLength) {  					++_currentLength;  				}  				PushCurWord (document' ref markNext' words);  				++i;  				continue;  			}  		}  		// highlight digits  		if ((!_inSpan || (_activeRuleSet != null && _activeRuleSet.HighlightDigits)) && (Char.IsDigit (ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1)))) && _currentLength == 0) {  			bool ishex = false;  			bool isfloatingpoint = false;  			if (ch == '0' && i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'X') {  				// hex digits  				const string hex = "0123456789ABCDEF";  				++_currentLength;  				++i;  				// skip 'x'  				++_currentLength;  				ishex = true;  				while (i + 1 < currentLineLength && hex.IndexOf (Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1))) != -1) {  					++i;  					++_currentLength;  				}  			} else {  				++_currentLength;  				while (i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  					++i;  					++_currentLength;  				}  			}  			if (!ishex && i + 1 < currentLineLength && document.GetCharAt (currentLineOffset + i + 1) == '.') {  				isfloatingpoint = true;  				++i;  				++_currentLength;  				while (i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  					++i;  					++_currentLength;  				}  			}  			if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'E') {  				isfloatingpoint = true;  				++i;  				++_currentLength;  				if (i + 1 < currentLineLength && (document.GetCharAt (currentLineOffset + i + 1) == '+' || document.GetCharAt (_currentLine.Offset + i + 1) == '-')) {  					++i;  					++_currentLength;  				}  				while (i + 1 < _currentLine.Length && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  					++i;  					++_currentLength;  				}  			}  			if (i + 1 < _currentLine.Length) {  				char nextch = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  				if (nextch == 'F' || nextch == 'M' || nextch == 'D') {  					isfloatingpoint = true;  					++i;  					++_currentLength;  				} else if (isShaderEffect && (nextch == 'H' || nextch == 'X'))// Hardcoded path for HLSL suffixes  				 {  					isfloatingpoint = true;  					++i;  					++_currentLength;  				}  			}  			if (!isfloatingpoint) {  				if (!isShaderEffect) {  					bool isunsigned = false;  					if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'U') {  						++i;  						++_currentLength;  						isunsigned = true;  					}  					if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'L') {  						++i;  						++_currentLength;  						if (!isunsigned && i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'U') {  							++i;  							++_currentLength;  						}  					}  				} else {  					// Hardcoded path for HLSL number formats  					if (i + 1 < currentLineLength) {  						char nextCh = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  						if (nextCh == 'U') {  							++i;  							++_currentLength;  						}  					}  					if (i + 1 < currentLineLength) {  						char nextCh = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  						if (nextCh == 'I' || nextCh == 'L' || nextCh == 'S' || nextCh == 'T') {  							++i;  							++_currentLength;  						}  					}  				}  			}  			words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' DigitColor' false));  			_currentOffset += _currentLength;  			_currentLength = 0;  			continue;  		}  		// Check for SPAN ENDs  		if (_inSpan) {  			if (_activeSpan.End != null && _activeSpan.End.Length > 0) {  				if (MatchExpr (_currentLine' _activeSpan.End' i' document' _activeSpan.IgnoreCase)) {  					PushCurWord (document' ref markNext' words);  					string regex = GetRegString (_currentLine' _activeSpan.End' i' document);  					_currentLength += regex.Length;  					words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' _activeSpan.EndColor' false));  					_currentOffset += _currentLength;  					_currentLength = 0;  					i += regex.Length - 1;  					_currentSpanStack.Pop ();  					UpdateSpanStateVariables ();  					continue;  				}  			}  		}  		// check for SPAN BEGIN  		if (_activeRuleSet != null) {  			foreach (Span span in _activeRuleSet.Spans) {  				if ((!span.IsBeginSingleWord || _currentLength == 0) && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (_currentLength == 0 && words.TrueForAll (delegate (TextWord textWord) {  					return textWord.Type != TextWordType.Word;  				}))) && MatchExpr (_currentLine' span.Begin' i' document' _activeRuleSet.IgnoreCase' span.IsBeginSingleWord)) {  					PushCurWord (document' ref markNext' words);  					string regex = GetRegString (_currentLine' span.Begin' i' document);  					if (!OverrideSpan (regex' document' words' span' ref i)) {  						_currentLength += regex.Length;  						words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' span.BeginColor' false));  						_currentOffset += _currentLength;  						_currentLength = 0;  						i += regex.Length - 1;  						if (_currentSpanStack == null) {  							_currentSpanStack = new SpanStack ();  						}  						_currentSpanStack.Push (span);  						span.IgnoreCase = _activeRuleSet.IgnoreCase;  						UpdateSpanStateVariables ();  					}  					goto skip;  				}  			}  		}  		// check if the char is a delimiter  		if (_activeRuleSet != null && ch < 256 && _activeRuleSet.Delimiters [ch]) {  			PushCurWord (document' ref markNext' words);  			if (_currentOffset + _currentLength + 1 < _currentLine.Length) {  				++_currentLength;  				PushCurWord (document' ref markNext' words);  				goto skip;  			}  		}  		++_currentLength;  		skip:  		continue;  	}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: switch (ch) {  case '\n':  case '\r':  	PushCurWord (document' ref markNext' words);  	++_currentOffset;  	break;  case ' ':  	PushCurWord (document' ref markNext' words);  	if (_activeSpan != null && _activeSpan.Color.HasBackground) {  		words.Add (new TextWord.SpaceTextWord (_activeSpan.Color));  	} else {  		words.Add (TextWord.Space);  	}  	++_currentOffset;  	break;  case '\t':  	PushCurWord (document' ref markNext' words);  	if (_activeSpan != null && _activeSpan.Color.HasBackground) {  		words.Add (new TextWord.TabTextWord (_activeSpan.Color));  	} else {  		words.Add (TextWord.Tab);  	}  	++_currentOffset;  	break;  default: {  	// handle escape characters  	char escapeCharacter = '\0';  	if (_activeSpan != null && _activeSpan.EscapeCharacter != '\0') {  		escapeCharacter = _activeSpan.EscapeCharacter;  	} else if (_activeRuleSet != null) {  		escapeCharacter = _activeRuleSet.EscapeCharacter;  	}  	if (escapeCharacter != '\0' && escapeCharacter == ch) {  		// we found the escape character  		if (_activeSpan != null && _activeSpan.End != null && _activeSpan.End.Length == 1 && escapeCharacter == _activeSpan.End [0]) {  			// the escape character is a end-doubling escape character  			// it may count as escape only when the next character is the escape' too  			if (i + 1 < currentLineLength) {  				if (document.GetCharAt (currentLineOffset + i + 1) == escapeCharacter) {  					_currentLength += 2;  					PushCurWord (document' ref markNext' words);  					++i;  					continue;  				}  			}  		} else {  			// this is a normal \-style escape  			++_currentLength;  			if (i + 1 < currentLineLength) {  				++_currentLength;  			}  			PushCurWord (document' ref markNext' words);  			++i;  			continue;  		}  	}  	// highlight digits  	if ((!_inSpan || (_activeRuleSet != null && _activeRuleSet.HighlightDigits)) && (Char.IsDigit (ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1)))) && _currentLength == 0) {  		bool ishex = false;  		bool isfloatingpoint = false;  		if (ch == '0' && i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'X') {  			// hex digits  			const string hex = "0123456789ABCDEF";  			++_currentLength;  			++i;  			// skip 'x'  			++_currentLength;  			ishex = true;  			while (i + 1 < currentLineLength && hex.IndexOf (Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1))) != -1) {  				++i;  				++_currentLength;  			}  		} else {  			++_currentLength;  			while (i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  				++i;  				++_currentLength;  			}  		}  		if (!ishex && i + 1 < currentLineLength && document.GetCharAt (currentLineOffset + i + 1) == '.') {  			isfloatingpoint = true;  			++i;  			++_currentLength;  			while (i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  				++i;  				++_currentLength;  			}  		}  		if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'E') {  			isfloatingpoint = true;  			++i;  			++_currentLength;  			if (i + 1 < currentLineLength && (document.GetCharAt (currentLineOffset + i + 1) == '+' || document.GetCharAt (_currentLine.Offset + i + 1) == '-')) {  				++i;  				++_currentLength;  			}  			while (i + 1 < _currentLine.Length && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  				++i;  				++_currentLength;  			}  		}  		if (i + 1 < _currentLine.Length) {  			char nextch = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  			if (nextch == 'F' || nextch == 'M' || nextch == 'D') {  				isfloatingpoint = true;  				++i;  				++_currentLength;  			} else if (isShaderEffect && (nextch == 'H' || nextch == 'X'))// Hardcoded path for HLSL suffixes  			 {  				isfloatingpoint = true;  				++i;  				++_currentLength;  			}  		}  		if (!isfloatingpoint) {  			if (!isShaderEffect) {  				bool isunsigned = false;  				if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'U') {  					++i;  					++_currentLength;  					isunsigned = true;  				}  				if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'L') {  					++i;  					++_currentLength;  					if (!isunsigned && i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'U') {  						++i;  						++_currentLength;  					}  				}  			} else {  				// Hardcoded path for HLSL number formats  				if (i + 1 < currentLineLength) {  					char nextCh = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  					if (nextCh == 'U') {  						++i;  						++_currentLength;  					}  				}  				if (i + 1 < currentLineLength) {  					char nextCh = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  					if (nextCh == 'I' || nextCh == 'L' || nextCh == 'S' || nextCh == 'T') {  						++i;  						++_currentLength;  					}  				}  			}  		}  		words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' DigitColor' false));  		_currentOffset += _currentLength;  		_currentLength = 0;  		continue;  	}  	// Check for SPAN ENDs  	if (_inSpan) {  		if (_activeSpan.End != null && _activeSpan.End.Length > 0) {  			if (MatchExpr (_currentLine' _activeSpan.End' i' document' _activeSpan.IgnoreCase)) {  				PushCurWord (document' ref markNext' words);  				string regex = GetRegString (_currentLine' _activeSpan.End' i' document);  				_currentLength += regex.Length;  				words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' _activeSpan.EndColor' false));  				_currentOffset += _currentLength;  				_currentLength = 0;  				i += regex.Length - 1;  				_currentSpanStack.Pop ();  				UpdateSpanStateVariables ();  				continue;  			}  		}  	}  	// check for SPAN BEGIN  	if (_activeRuleSet != null) {  		foreach (Span span in _activeRuleSet.Spans) {  			if ((!span.IsBeginSingleWord || _currentLength == 0) && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (_currentLength == 0 && words.TrueForAll (delegate (TextWord textWord) {  				return textWord.Type != TextWordType.Word;  			}))) && MatchExpr (_currentLine' span.Begin' i' document' _activeRuleSet.IgnoreCase' span.IsBeginSingleWord)) {  				PushCurWord (document' ref markNext' words);  				string regex = GetRegString (_currentLine' span.Begin' i' document);  				if (!OverrideSpan (regex' document' words' span' ref i)) {  					_currentLength += regex.Length;  					words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' span.BeginColor' false));  					_currentOffset += _currentLength;  					_currentLength = 0;  					i += regex.Length - 1;  					if (_currentSpanStack == null) {  						_currentSpanStack = new SpanStack ();  					}  					_currentSpanStack.Push (span);  					span.IgnoreCase = _activeRuleSet.IgnoreCase;  					UpdateSpanStateVariables ();  				}  				goto skip;  			}  		}  	}  	// check if the char is a delimiter  	if (_activeRuleSet != null && ch < 256 && _activeRuleSet.Delimiters [ch]) {  		PushCurWord (document' ref markNext' words);  		if (_currentOffset + _currentLength + 1 < _currentLine.Length) {  			++_currentLength;  			PushCurWord (document' ref markNext' words);  			goto skip;  		}  	}  	++_currentLength;  	skip:  	continue;  }  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: switch (ch) {  case '\n':  case '\r':  	PushCurWord (document' ref markNext' words);  	++_currentOffset;  	break;  case ' ':  	PushCurWord (document' ref markNext' words);  	if (_activeSpan != null && _activeSpan.Color.HasBackground) {  		words.Add (new TextWord.SpaceTextWord (_activeSpan.Color));  	} else {  		words.Add (TextWord.Space);  	}  	++_currentOffset;  	break;  case '\t':  	PushCurWord (document' ref markNext' words);  	if (_activeSpan != null && _activeSpan.Color.HasBackground) {  		words.Add (new TextWord.TabTextWord (_activeSpan.Color));  	} else {  		words.Add (TextWord.Tab);  	}  	++_currentOffset;  	break;  default: {  	// handle escape characters  	char escapeCharacter = '\0';  	if (_activeSpan != null && _activeSpan.EscapeCharacter != '\0') {  		escapeCharacter = _activeSpan.EscapeCharacter;  	} else if (_activeRuleSet != null) {  		escapeCharacter = _activeRuleSet.EscapeCharacter;  	}  	if (escapeCharacter != '\0' && escapeCharacter == ch) {  		// we found the escape character  		if (_activeSpan != null && _activeSpan.End != null && _activeSpan.End.Length == 1 && escapeCharacter == _activeSpan.End [0]) {  			// the escape character is a end-doubling escape character  			// it may count as escape only when the next character is the escape' too  			if (i + 1 < currentLineLength) {  				if (document.GetCharAt (currentLineOffset + i + 1) == escapeCharacter) {  					_currentLength += 2;  					PushCurWord (document' ref markNext' words);  					++i;  					continue;  				}  			}  		} else {  			// this is a normal \-style escape  			++_currentLength;  			if (i + 1 < currentLineLength) {  				++_currentLength;  			}  			PushCurWord (document' ref markNext' words);  			++i;  			continue;  		}  	}  	// highlight digits  	if ((!_inSpan || (_activeRuleSet != null && _activeRuleSet.HighlightDigits)) && (Char.IsDigit (ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1)))) && _currentLength == 0) {  		bool ishex = false;  		bool isfloatingpoint = false;  		if (ch == '0' && i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'X') {  			// hex digits  			const string hex = "0123456789ABCDEF";  			++_currentLength;  			++i;  			// skip 'x'  			++_currentLength;  			ishex = true;  			while (i + 1 < currentLineLength && hex.IndexOf (Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1))) != -1) {  				++i;  				++_currentLength;  			}  		} else {  			++_currentLength;  			while (i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  				++i;  				++_currentLength;  			}  		}  		if (!ishex && i + 1 < currentLineLength && document.GetCharAt (currentLineOffset + i + 1) == '.') {  			isfloatingpoint = true;  			++i;  			++_currentLength;  			while (i + 1 < currentLineLength && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  				++i;  				++_currentLength;  			}  		}  		if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'E') {  			isfloatingpoint = true;  			++i;  			++_currentLength;  			if (i + 1 < currentLineLength && (document.GetCharAt (currentLineOffset + i + 1) == '+' || document.GetCharAt (_currentLine.Offset + i + 1) == '-')) {  				++i;  				++_currentLength;  			}  			while (i + 1 < _currentLine.Length && Char.IsDigit (document.GetCharAt (currentLineOffset + i + 1))) {  				++i;  				++_currentLength;  			}  		}  		if (i + 1 < _currentLine.Length) {  			char nextch = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  			if (nextch == 'F' || nextch == 'M' || nextch == 'D') {  				isfloatingpoint = true;  				++i;  				++_currentLength;  			} else if (isShaderEffect && (nextch == 'H' || nextch == 'X'))// Hardcoded path for HLSL suffixes  			 {  				isfloatingpoint = true;  				++i;  				++_currentLength;  			}  		}  		if (!isfloatingpoint) {  			if (!isShaderEffect) {  				bool isunsigned = false;  				if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'U') {  					++i;  					++_currentLength;  					isunsigned = true;  				}  				if (i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'L') {  					++i;  					++_currentLength;  					if (!isunsigned && i + 1 < currentLineLength && Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1)) == 'U') {  						++i;  						++_currentLength;  					}  				}  			} else {  				// Hardcoded path for HLSL number formats  				if (i + 1 < currentLineLength) {  					char nextCh = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  					if (nextCh == 'U') {  						++i;  						++_currentLength;  					}  				}  				if (i + 1 < currentLineLength) {  					char nextCh = Char.ToUpper (document.GetCharAt (currentLineOffset + i + 1));  					if (nextCh == 'I' || nextCh == 'L' || nextCh == 'S' || nextCh == 'T') {  						++i;  						++_currentLength;  					}  				}  			}  		}  		words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' DigitColor' false));  		_currentOffset += _currentLength;  		_currentLength = 0;  		continue;  	}  	// Check for SPAN ENDs  	if (_inSpan) {  		if (_activeSpan.End != null && _activeSpan.End.Length > 0) {  			if (MatchExpr (_currentLine' _activeSpan.End' i' document' _activeSpan.IgnoreCase)) {  				PushCurWord (document' ref markNext' words);  				string regex = GetRegString (_currentLine' _activeSpan.End' i' document);  				_currentLength += regex.Length;  				words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' _activeSpan.EndColor' false));  				_currentOffset += _currentLength;  				_currentLength = 0;  				i += regex.Length - 1;  				_currentSpanStack.Pop ();  				UpdateSpanStateVariables ();  				continue;  			}  		}  	}  	// check for SPAN BEGIN  	if (_activeRuleSet != null) {  		foreach (Span span in _activeRuleSet.Spans) {  			if ((!span.IsBeginSingleWord || _currentLength == 0) && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (_currentLength == 0 && words.TrueForAll (delegate (TextWord textWord) {  				return textWord.Type != TextWordType.Word;  			}))) && MatchExpr (_currentLine' span.Begin' i' document' _activeRuleSet.IgnoreCase' span.IsBeginSingleWord)) {  				PushCurWord (document' ref markNext' words);  				string regex = GetRegString (_currentLine' span.Begin' i' document);  				if (!OverrideSpan (regex' document' words' span' ref i)) {  					_currentLength += regex.Length;  					words.Add (new TextWord (document' _currentLine' _currentOffset' _currentLength' span.BeginColor' false));  					_currentOffset += _currentLength;  					_currentLength = 0;  					i += regex.Length - 1;  					if (_currentSpanStack == null) {  						_currentSpanStack = new SpanStack ();  					}  					_currentSpanStack.Push (span);  					span.IgnoreCase = _activeRuleSet.IgnoreCase;  					UpdateSpanStateVariables ();  				}  				goto skip;  			}  		}  	}  	// check if the char is a delimiter  	if (_activeRuleSet != null && ch < 256 && _activeRuleSet.Delimiters [ch]) {  		PushCurWord (document' ref markNext' words);  		if (_currentOffset + _currentLength + 1 < _currentLine.Length) {  			++_currentLength;  			PushCurWord (document' ref markNext' words);  			goto skip;  		}  	}  	++_currentLength;  	skip:  	continue;  }  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: if (escapeCharacter != '\0' && escapeCharacter == ch) {  	// we found the escape character  	if (_activeSpan != null && _activeSpan.End != null && _activeSpan.End.Length == 1 && escapeCharacter == _activeSpan.End [0]) {  		// the escape character is a end-doubling escape character  		// it may count as escape only when the next character is the escape' too  		if (i + 1 < currentLineLength) {  			if (document.GetCharAt (currentLineOffset + i + 1) == escapeCharacter) {  				_currentLength += 2;  				PushCurWord (document' ref markNext' words);  				++i;  				continue;  			}  		}  	} else {  		// this is a normal \-style escape  		++_currentLength;  		if (i + 1 < currentLineLength) {  			++_currentLength;  		}  		PushCurWord (document' ref markNext' words);  		++i;  		continue;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: if (_activeSpan != null && _activeSpan.End != null && _activeSpan.End.Length == 1 && escapeCharacter == _activeSpan.End [0]) {  	// the escape character is a end-doubling escape character  	// it may count as escape only when the next character is the escape' too  	if (i + 1 < currentLineLength) {  		if (document.GetCharAt (currentLineOffset + i + 1) == escapeCharacter) {  			_currentLength += 2;  			PushCurWord (document' ref markNext' words);  			++i;  			continue;  		}  	}  } else {  	// this is a normal \-style escape  	++_currentLength;  	if (i + 1 < currentLineLength) {  		++_currentLength;  	}  	PushCurWord (document' ref markNext' words);  	++i;  	continue;  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: if (i + 1 < currentLineLength) {  	if (document.GetCharAt (currentLineOffset + i + 1) == escapeCharacter) {  		_currentLength += 2;  		PushCurWord (document' ref markNext' words);  		++i;  		continue;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: if (document.GetCharAt (currentLineOffset + i + 1) == escapeCharacter) {  	_currentLength += 2;  	PushCurWord (document' ref markNext' words);  	++i;  	continue;  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: _currentLength += 2;  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: if (_activeRuleSet != null && ch < 256 && _activeRuleSet.Delimiters [ch]) {  	PushCurWord (document' ref markNext' words);  	if (_currentOffset + _currentLength + 1 < _currentLine.Length) {  		++_currentLength;  		PushCurWord (document' ref markNext' words);  		goto skip;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,FontContainer,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\FontContainer.cs,ParseFont,The following statement contains a magic number: return new Font (descr [1]' Single.Parse (descr [3]));  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,ParseColorString,The following statement contains a magic number: if (cNames.Length == 2) {  	// hack : can't figure out how to parse doubles with '.' (culture info might set the '.' to ''')  	double factor = Double.Parse (cNames [1]) / 100;  	c = Color.FromArgb ((int)(c.R * factor)' (int)(c.G * factor)' (int)(c.B * factor));  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,ParseColorString,The following statement contains a magic number: if (cNames.Length == 2) {  	// hack : can't figure out how to parse doubles with '.' (culture info might set the '.' to ''')  	double factor = Double.Parse (cNames [1]) / 100;  	c = Color.FromArgb ((int)(c.R * factor)' (int)(c.G * factor)' (int)(c.B * factor));  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,ParseColor,The following statement contains a magic number: if (c.Length > 7) {  	offset = 2;  	a = Int32.Parse (c.Substring (1' 2)' NumberStyles.HexNumber);  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,ParseColor,The following statement contains a magic number: if (c.Length > 7) {  	offset = 2;  	a = Int32.Parse (c.Substring (1' 2)' NumberStyles.HexNumber);  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,ParseColor,The following statement contains a magic number: if (c.Length > 7) {  	offset = 2;  	a = Int32.Parse (c.Substring (1' 2)' NumberStyles.HexNumber);  }  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,ParseColor,The following statement contains a magic number: offset = 2;  
Magic Number,DigitalRune.Windows.TextEditor.Highlighting,HighlightColor,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\HighlightColor.cs,ParseColor,The following statement contains a magic number: a = Int32.Parse (c.Substring (1' 2)' NumberStyles.HexNumber);  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,AugmentableRedBlackTree,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\Red-Black Tree\AugmentableRedBlackTree.cs,AppendTreeToString,The following statement contains a magic number: indent += 2;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,The following statement contains a magic number: foreach (ISelection selection in textArea.SelectionManager.Selections) {  	int selectionOffset = textArea.Document.PositionToOffset (selection.StartPosition);  	int selectionEndOffset = textArea.Document.PositionToOffset (selection.EndPosition);  	for (int i = selection.StartPosition.Y; i <= selection.EndPosition.Y; ++i) {  		LineSegment line = textArea.Document.GetLineSegment (i);  		int offset = line.Offset;  		if (line.Words == null) {  			continue;  		}  		foreach (TextWord word in line.Words) {  			switch (word.Type) {  			case TextWordType.Space:  				if (selection.ContainsOffset (offset)) {  					rtf.Append (' ');  				}  				++offset;  				break;  			case TextWordType.Tab:  				if (selection.ContainsOffset (offset)) {  					rtf.Append (@"\tab");  				}  				++offset;  				escapeSequence = true;  				break;  			case TextWordType.Word:  				Color c = word.Color;  				if (offset + word.Word.Length > selectionOffset && offset < selectionEndOffset) {  					string colorstr = c.R + "' " + c.G + "' " + c.B;  					if (!_colors.ContainsKey (colorstr)) {  						_colors [colorstr] = ++_colorNum;  						_colorString.Append (@"\red" + c.R + @"\green" + c.G + @"\blue" + c.B + ";");  					}  					if (c != curColor || firstLine) {  						rtf.Append (@"\cf" + _colors [colorstr]);  						curColor = c;  						escapeSequence = true;  					}  					if (oldItalic != word.Italic) {  						if (word.Italic) {  							rtf.Append (@"\i");  						} else {  							rtf.Append (@"\i0");  						}  						oldItalic = word.Italic;  						escapeSequence = true;  					}  					if (oldBold != word.Bold) {  						if (word.Bold) {  							rtf.Append (@"\b");  						} else {  							rtf.Append (@"\b0");  						}  						oldBold = word.Bold;  						escapeSequence = true;  					}  					if (firstLine) {  						rtf.Append (@"\f0\fs" + (Math.Round (textArea.TextEditorProperties.Font.Size * 2)));  						firstLine = false;  					}  					if (escapeSequence) {  						rtf.Append (' ');  						escapeSequence = false;  					}  					string printWord;  					if (offset < selectionOffset) {  						printWord = word.Word.Substring (selectionOffset - offset);  					} else if (offset + word.Word.Length > selectionEndOffset) {  						printWord = word.Word.Substring (0' (offset + word.Word.Length) - selectionEndOffset);  					} else {  						printWord = word.Word;  					}  					rtf.Append (printWord.Replace (@"\"' @"\\").Replace ("{"' "\\{").Replace ("}"' "\\}"));  				}  				offset += word.Length;  				break;  			}  		}  		if (offset < selectionEndOffset) {  			rtf.Append (@"\par");  		}  		rtf.Append ('\n');  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,The following statement contains a magic number: for (int i = selection.StartPosition.Y; i <= selection.EndPosition.Y; ++i) {  	LineSegment line = textArea.Document.GetLineSegment (i);  	int offset = line.Offset;  	if (line.Words == null) {  		continue;  	}  	foreach (TextWord word in line.Words) {  		switch (word.Type) {  		case TextWordType.Space:  			if (selection.ContainsOffset (offset)) {  				rtf.Append (' ');  			}  			++offset;  			break;  		case TextWordType.Tab:  			if (selection.ContainsOffset (offset)) {  				rtf.Append (@"\tab");  			}  			++offset;  			escapeSequence = true;  			break;  		case TextWordType.Word:  			Color c = word.Color;  			if (offset + word.Word.Length > selectionOffset && offset < selectionEndOffset) {  				string colorstr = c.R + "' " + c.G + "' " + c.B;  				if (!_colors.ContainsKey (colorstr)) {  					_colors [colorstr] = ++_colorNum;  					_colorString.Append (@"\red" + c.R + @"\green" + c.G + @"\blue" + c.B + ";");  				}  				if (c != curColor || firstLine) {  					rtf.Append (@"\cf" + _colors [colorstr]);  					curColor = c;  					escapeSequence = true;  				}  				if (oldItalic != word.Italic) {  					if (word.Italic) {  						rtf.Append (@"\i");  					} else {  						rtf.Append (@"\i0");  					}  					oldItalic = word.Italic;  					escapeSequence = true;  				}  				if (oldBold != word.Bold) {  					if (word.Bold) {  						rtf.Append (@"\b");  					} else {  						rtf.Append (@"\b0");  					}  					oldBold = word.Bold;  					escapeSequence = true;  				}  				if (firstLine) {  					rtf.Append (@"\f0\fs" + (Math.Round (textArea.TextEditorProperties.Font.Size * 2)));  					firstLine = false;  				}  				if (escapeSequence) {  					rtf.Append (' ');  					escapeSequence = false;  				}  				string printWord;  				if (offset < selectionOffset) {  					printWord = word.Word.Substring (selectionOffset - offset);  				} else if (offset + word.Word.Length > selectionEndOffset) {  					printWord = word.Word.Substring (0' (offset + word.Word.Length) - selectionEndOffset);  				} else {  					printWord = word.Word;  				}  				rtf.Append (printWord.Replace (@"\"' @"\\").Replace ("{"' "\\{").Replace ("}"' "\\}"));  			}  			offset += word.Length;  			break;  		}  	}  	if (offset < selectionEndOffset) {  		rtf.Append (@"\par");  	}  	rtf.Append ('\n');  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,The following statement contains a magic number: foreach (TextWord word in line.Words) {  	switch (word.Type) {  	case TextWordType.Space:  		if (selection.ContainsOffset (offset)) {  			rtf.Append (' ');  		}  		++offset;  		break;  	case TextWordType.Tab:  		if (selection.ContainsOffset (offset)) {  			rtf.Append (@"\tab");  		}  		++offset;  		escapeSequence = true;  		break;  	case TextWordType.Word:  		Color c = word.Color;  		if (offset + word.Word.Length > selectionOffset && offset < selectionEndOffset) {  			string colorstr = c.R + "' " + c.G + "' " + c.B;  			if (!_colors.ContainsKey (colorstr)) {  				_colors [colorstr] = ++_colorNum;  				_colorString.Append (@"\red" + c.R + @"\green" + c.G + @"\blue" + c.B + ";");  			}  			if (c != curColor || firstLine) {  				rtf.Append (@"\cf" + _colors [colorstr]);  				curColor = c;  				escapeSequence = true;  			}  			if (oldItalic != word.Italic) {  				if (word.Italic) {  					rtf.Append (@"\i");  				} else {  					rtf.Append (@"\i0");  				}  				oldItalic = word.Italic;  				escapeSequence = true;  			}  			if (oldBold != word.Bold) {  				if (word.Bold) {  					rtf.Append (@"\b");  				} else {  					rtf.Append (@"\b0");  				}  				oldBold = word.Bold;  				escapeSequence = true;  			}  			if (firstLine) {  				rtf.Append (@"\f0\fs" + (Math.Round (textArea.TextEditorProperties.Font.Size * 2)));  				firstLine = false;  			}  			if (escapeSequence) {  				rtf.Append (' ');  				escapeSequence = false;  			}  			string printWord;  			if (offset < selectionOffset) {  				printWord = word.Word.Substring (selectionOffset - offset);  			} else if (offset + word.Word.Length > selectionEndOffset) {  				printWord = word.Word.Substring (0' (offset + word.Word.Length) - selectionEndOffset);  			} else {  				printWord = word.Word;  			}  			rtf.Append (printWord.Replace (@"\"' @"\\").Replace ("{"' "\\{").Replace ("}"' "\\}"));  		}  		offset += word.Length;  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,The following statement contains a magic number: switch (word.Type) {  case TextWordType.Space:  	if (selection.ContainsOffset (offset)) {  		rtf.Append (' ');  	}  	++offset;  	break;  case TextWordType.Tab:  	if (selection.ContainsOffset (offset)) {  		rtf.Append (@"\tab");  	}  	++offset;  	escapeSequence = true;  	break;  case TextWordType.Word:  	Color c = word.Color;  	if (offset + word.Word.Length > selectionOffset && offset < selectionEndOffset) {  		string colorstr = c.R + "' " + c.G + "' " + c.B;  		if (!_colors.ContainsKey (colorstr)) {  			_colors [colorstr] = ++_colorNum;  			_colorString.Append (@"\red" + c.R + @"\green" + c.G + @"\blue" + c.B + ";");  		}  		if (c != curColor || firstLine) {  			rtf.Append (@"\cf" + _colors [colorstr]);  			curColor = c;  			escapeSequence = true;  		}  		if (oldItalic != word.Italic) {  			if (word.Italic) {  				rtf.Append (@"\i");  			} else {  				rtf.Append (@"\i0");  			}  			oldItalic = word.Italic;  			escapeSequence = true;  		}  		if (oldBold != word.Bold) {  			if (word.Bold) {  				rtf.Append (@"\b");  			} else {  				rtf.Append (@"\b0");  			}  			oldBold = word.Bold;  			escapeSequence = true;  		}  		if (firstLine) {  			rtf.Append (@"\f0\fs" + (Math.Round (textArea.TextEditorProperties.Font.Size * 2)));  			firstLine = false;  		}  		if (escapeSequence) {  			rtf.Append (' ');  			escapeSequence = false;  		}  		string printWord;  		if (offset < selectionOffset) {  			printWord = word.Word.Substring (selectionOffset - offset);  		} else if (offset + word.Word.Length > selectionEndOffset) {  			printWord = word.Word.Substring (0' (offset + word.Word.Length) - selectionEndOffset);  		} else {  			printWord = word.Word;  		}  		rtf.Append (printWord.Replace (@"\"' @"\\").Replace ("{"' "\\{").Replace ("}"' "\\}"));  	}  	offset += word.Length;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,The following statement contains a magic number: if (offset + word.Word.Length > selectionOffset && offset < selectionEndOffset) {  	string colorstr = c.R + "' " + c.G + "' " + c.B;  	if (!_colors.ContainsKey (colorstr)) {  		_colors [colorstr] = ++_colorNum;  		_colorString.Append (@"\red" + c.R + @"\green" + c.G + @"\blue" + c.B + ";");  	}  	if (c != curColor || firstLine) {  		rtf.Append (@"\cf" + _colors [colorstr]);  		curColor = c;  		escapeSequence = true;  	}  	if (oldItalic != word.Italic) {  		if (word.Italic) {  			rtf.Append (@"\i");  		} else {  			rtf.Append (@"\i0");  		}  		oldItalic = word.Italic;  		escapeSequence = true;  	}  	if (oldBold != word.Bold) {  		if (word.Bold) {  			rtf.Append (@"\b");  		} else {  			rtf.Append (@"\b0");  		}  		oldBold = word.Bold;  		escapeSequence = true;  	}  	if (firstLine) {  		rtf.Append (@"\f0\fs" + (Math.Round (textArea.TextEditorProperties.Font.Size * 2)));  		firstLine = false;  	}  	if (escapeSequence) {  		rtf.Append (' ');  		escapeSequence = false;  	}  	string printWord;  	if (offset < selectionOffset) {  		printWord = word.Word.Substring (selectionOffset - offset);  	} else if (offset + word.Word.Length > selectionEndOffset) {  		printWord = word.Word.Substring (0' (offset + word.Word.Length) - selectionEndOffset);  	} else {  		printWord = word.Word;  	}  	rtf.Append (printWord.Replace (@"\"' @"\\").Replace ("{"' "\\{").Replace ("}"' "\\}"));  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,The following statement contains a magic number: if (firstLine) {  	rtf.Append (@"\f0\fs" + (Math.Round (textArea.TextEditorProperties.Font.Size * 2)));  	firstLine = false;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,The following statement contains a magic number: rtf.Append (@"\f0\fs" + (Math.Round (textArea.TextEditorProperties.Font.Size * 2)));  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,IsUnicode,The following statement contains a magic number: return codepage == 65001 || codepage == 65000 || codepage == 1200 || codepage == 1201;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,IsUnicode,The following statement contains a magic number: return codepage == 65001 || codepage == 65000 || codepage == 1200 || codepage == 1201;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,IsUnicode,The following statement contains a magic number: return codepage == 65001 || codepage == 65000 || codepage == 1200 || codepage == 1201;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,IsUnicode,The following statement contains a magic number: return codepage == 65001 || codepage == 65000 || codepage == 1200 || codepage == 1201;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,OpenStream,The following statement contains a magic number: if (fs.Length >= 2) {  	// the autodetection of StreamReader is not capable of detecting the difference  	// between ISO-8859-1 and UTF-8 without BOM.  	int firstByte = fs.ReadByte ();  	int secondByte = fs.ReadByte ();  	switch ((firstByte << 8) | secondByte) {  	case 0x0000:  	// either UTF-32 Big Endian or a binary file; use StreamReader  	case 0xfffe:  	// Unicode BOM (UTF-16 LE or UTF-32 LE)  	case 0xfeff:  	// UTF-16 BE BOM  	case 0xefbb:  		// start of UTF-8 BOM  		// StreamReader autodetection works  		fs.Position = 0;  		return new StreamReader (fs);  	default:  		return AutoDetect (fs' (byte)firstByte' (byte)secondByte' defaultEncoding);  	}  } else {  	if (defaultEncoding != null) {  		return new StreamReader (fs' defaultEncoding);  	} else {  		return new StreamReader (fs);  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,OpenStream,The following statement contains a magic number: if (fs.Length >= 2) {  	// the autodetection of StreamReader is not capable of detecting the difference  	// between ISO-8859-1 and UTF-8 without BOM.  	int firstByte = fs.ReadByte ();  	int secondByte = fs.ReadByte ();  	switch ((firstByte << 8) | secondByte) {  	case 0x0000:  	// either UTF-32 Big Endian or a binary file; use StreamReader  	case 0xfffe:  	// Unicode BOM (UTF-16 LE or UTF-32 LE)  	case 0xfeff:  	// UTF-16 BE BOM  	case 0xefbb:  		// start of UTF-8 BOM  		// StreamReader autodetection works  		fs.Position = 0;  		return new StreamReader (fs);  	default:  		return AutoDetect (fs' (byte)firstByte' (byte)secondByte' defaultEncoding);  	}  } else {  	if (defaultEncoding != null) {  		return new StreamReader (fs' defaultEncoding);  	} else {  		return new StreamReader (fs);  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,OpenStream,The following statement contains a magic number: switch ((firstByte << 8) | secondByte) {  case 0x0000:  // either UTF-32 Big Endian or a binary file; use StreamReader  case 0xfffe:  // Unicode BOM (UTF-16 LE or UTF-32 LE)  case 0xfeff:  // UTF-16 BE BOM  case 0xefbb:  	// start of UTF-8 BOM  	// StreamReader autodetection works  	fs.Position = 0;  	return new StreamReader (fs);  default:  	return AutoDetect (fs' (byte)firstByte' (byte)secondByte' defaultEncoding);  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: for (int i = 0; i < max; i++) {  	byte b;  	if (i == 0)  		b = firstByte;  	else if (i == 1)  		b = secondByte;  	else  		b = (byte)fs.ReadByte ();  	if (b < 0x80) {  		// normal ASCII character  		if (state == UTF8Sequence) {  			state = Error;  			break;  		}  	} else if (b < 0xc0) {  		// 10xxxxxx : continues UTF8 byte sequence  		if (state == UTF8Sequence) {  			--sequenceLength;  			if (sequenceLength < 0) {  				state = Error;  				break;  			} else if (sequenceLength == 0) {  				state = UTF8;  			}  		} else {  			state = Error;  			break;  		}  	} else if (b >= 0xc2 && b < 0xf5) {  		// beginning of byte sequence  		if (state == UTF8 || state == ASCII) {  			state = UTF8Sequence;  			if (b < 0xe0)  				sequenceLength = 1;  			// one more byte following  			else if (b < 0xf0)  				sequenceLength = 2;  			// two more bytes following  			else  				sequenceLength = 3;  			// three more bytes following  		} else {  			state = Error;  			break;  		}  	} else {  		// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  		state = Error;  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: for (int i = 0; i < max; i++) {  	byte b;  	if (i == 0)  		b = firstByte;  	else if (i == 1)  		b = secondByte;  	else  		b = (byte)fs.ReadByte ();  	if (b < 0x80) {  		// normal ASCII character  		if (state == UTF8Sequence) {  			state = Error;  			break;  		}  	} else if (b < 0xc0) {  		// 10xxxxxx : continues UTF8 byte sequence  		if (state == UTF8Sequence) {  			--sequenceLength;  			if (sequenceLength < 0) {  				state = Error;  				break;  			} else if (sequenceLength == 0) {  				state = UTF8;  			}  		} else {  			state = Error;  			break;  		}  	} else if (b >= 0xc2 && b < 0xf5) {  		// beginning of byte sequence  		if (state == UTF8 || state == ASCII) {  			state = UTF8Sequence;  			if (b < 0xe0)  				sequenceLength = 1;  			// one more byte following  			else if (b < 0xf0)  				sequenceLength = 2;  			// two more bytes following  			else  				sequenceLength = 3;  			// three more bytes following  		} else {  			state = Error;  			break;  		}  	} else {  		// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  		state = Error;  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b < 0x80) {  	// normal ASCII character  	if (state == UTF8Sequence) {  		state = Error;  		break;  	}  } else if (b < 0xc0) {  	// 10xxxxxx : continues UTF8 byte sequence  	if (state == UTF8Sequence) {  		--sequenceLength;  		if (sequenceLength < 0) {  			state = Error;  			break;  		} else if (sequenceLength == 0) {  			state = UTF8;  		}  	} else {  		state = Error;  		break;  	}  } else if (b >= 0xc2 && b < 0xf5) {  	// beginning of byte sequence  	if (state == UTF8 || state == ASCII) {  		state = UTF8Sequence;  		if (b < 0xe0)  			sequenceLength = 1;  		// one more byte following  		else if (b < 0xf0)  			sequenceLength = 2;  		// two more bytes following  		else  			sequenceLength = 3;  		// three more bytes following  	} else {  		state = Error;  		break;  	}  } else {  	// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  	state = Error;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b < 0x80) {  	// normal ASCII character  	if (state == UTF8Sequence) {  		state = Error;  		break;  	}  } else if (b < 0xc0) {  	// 10xxxxxx : continues UTF8 byte sequence  	if (state == UTF8Sequence) {  		--sequenceLength;  		if (sequenceLength < 0) {  			state = Error;  			break;  		} else if (sequenceLength == 0) {  			state = UTF8;  		}  	} else {  		state = Error;  		break;  	}  } else if (b >= 0xc2 && b < 0xf5) {  	// beginning of byte sequence  	if (state == UTF8 || state == ASCII) {  		state = UTF8Sequence;  		if (b < 0xe0)  			sequenceLength = 1;  		// one more byte following  		else if (b < 0xf0)  			sequenceLength = 2;  		// two more bytes following  		else  			sequenceLength = 3;  		// three more bytes following  	} else {  		state = Error;  		break;  	}  } else {  	// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  	state = Error;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b < 0xc0) {  	// 10xxxxxx : continues UTF8 byte sequence  	if (state == UTF8Sequence) {  		--sequenceLength;  		if (sequenceLength < 0) {  			state = Error;  			break;  		} else if (sequenceLength == 0) {  			state = UTF8;  		}  	} else {  		state = Error;  		break;  	}  } else if (b >= 0xc2 && b < 0xf5) {  	// beginning of byte sequence  	if (state == UTF8 || state == ASCII) {  		state = UTF8Sequence;  		if (b < 0xe0)  			sequenceLength = 1;  		// one more byte following  		else if (b < 0xf0)  			sequenceLength = 2;  		// two more bytes following  		else  			sequenceLength = 3;  		// three more bytes following  	} else {  		state = Error;  		break;  	}  } else {  	// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  	state = Error;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b < 0xc0) {  	// 10xxxxxx : continues UTF8 byte sequence  	if (state == UTF8Sequence) {  		--sequenceLength;  		if (sequenceLength < 0) {  			state = Error;  			break;  		} else if (sequenceLength == 0) {  			state = UTF8;  		}  	} else {  		state = Error;  		break;  	}  } else if (b >= 0xc2 && b < 0xf5) {  	// beginning of byte sequence  	if (state == UTF8 || state == ASCII) {  		state = UTF8Sequence;  		if (b < 0xe0)  			sequenceLength = 1;  		// one more byte following  		else if (b < 0xf0)  			sequenceLength = 2;  		// two more bytes following  		else  			sequenceLength = 3;  		// three more bytes following  	} else {  		state = Error;  		break;  	}  } else {  	// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  	state = Error;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b >= 0xc2 && b < 0xf5) {  	// beginning of byte sequence  	if (state == UTF8 || state == ASCII) {  		state = UTF8Sequence;  		if (b < 0xe0)  			sequenceLength = 1;  		// one more byte following  		else if (b < 0xf0)  			sequenceLength = 2;  		// two more bytes following  		else  			sequenceLength = 3;  		// three more bytes following  	} else {  		state = Error;  		break;  	}  } else {  	// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  	state = Error;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b >= 0xc2 && b < 0xf5) {  	// beginning of byte sequence  	if (state == UTF8 || state == ASCII) {  		state = UTF8Sequence;  		if (b < 0xe0)  			sequenceLength = 1;  		// one more byte following  		else if (b < 0xf0)  			sequenceLength = 2;  		// two more bytes following  		else  			sequenceLength = 3;  		// three more bytes following  	} else {  		state = Error;  		break;  	}  } else {  	// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  	state = Error;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (state == UTF8 || state == ASCII) {  	state = UTF8Sequence;  	if (b < 0xe0)  		sequenceLength = 1;  	// one more byte following  	else if (b < 0xf0)  		sequenceLength = 2;  	// two more bytes following  	else  		sequenceLength = 3;  	// three more bytes following  } else {  	state = Error;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (state == UTF8 || state == ASCII) {  	state = UTF8Sequence;  	if (b < 0xe0)  		sequenceLength = 1;  	// one more byte following  	else if (b < 0xf0)  		sequenceLength = 2;  	// two more bytes following  	else  		sequenceLength = 3;  	// three more bytes following  } else {  	state = Error;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b < 0xe0)  	sequenceLength = 1;  // one more byte following  else if (b < 0xf0)  	sequenceLength = 2;  // two more bytes following  else  	sequenceLength = 3;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b < 0xe0)  	sequenceLength = 1;  // one more byte following  else if (b < 0xf0)  	sequenceLength = 2;  // two more bytes following  else  	sequenceLength = 3;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b < 0xf0)  	sequenceLength = 2;  // two more bytes following  else  	sequenceLength = 3;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: if (b < 0xf0)  	sequenceLength = 2;  // two more bytes following  else  	sequenceLength = 3;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: sequenceLength = 2;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,FileReader,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\FileReader.cs,AutoDetect,The following statement contains a magic number: sequenceLength = 3;  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,WeakCollection,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\WeakCollection.cs,Add,The following statement contains a magic number: if (_innerList.Count == _innerList.Capacity || (_innerList.Count % 32) == 31)  	_innerList.RemoveAll (IsDeadPredicate);  
Magic Number,DigitalRune.Windows.TextEditor.Utilities,WeakCollection,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\WeakCollection.cs,Add,The following statement contains a magic number: if (_innerList.Count == _innerList.Capacity || (_innerList.Count % 32) == 31)  	_innerList.RemoveAll (IsDeadPredicate);  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: while (offset - 1 > 0) {  	switch (document.GetCharAt (offset - 1)) {  	case '\n':  	case '\r':  	case '}':  		goto done;  	//						offset = FindOpeningBracket(document' offset - 2' '{'''}');  	//						break;  	case ']':  		offset = FindOpeningBracket (document' offset - 2' '['' ']');  		break;  	case ')':  		offset = FindOpeningBracket (document' offset - 2' '('' ')');  		break;  	case '.':  		--offset;  		break;  	case '"':  		if (offset < initialOffset - 1) {  			return null;  		}  		return "\"\"";  	case '\'':  		if (offset < initialOffset - 1) {  			return null;  		}  		return "'a'";  	case '>':  		if (document.GetCharAt (offset - 2) == '-') {  			offset -= 2;  			break;  		}  		goto done;  	default:  		if (Char.IsWhiteSpace (document.GetCharAt (offset - 1))) {  			--offset;  			break;  		}  		int start = offset - 1;  		if (!IsLetterDigitOrUnderscore (document.GetCharAt (start))) {  			goto done;  		}  		while (start > 0 && IsLetterDigitOrUnderscore (document.GetCharAt (start - 1))) {  			--start;  		}  		string word = document.GetText (start' offset - start).Trim ();  		switch (word) {  		case "ref":  		case "out":  		case "in":  		case "return":  		case "throw":  		case "case":  			goto done;  		}  		if (word.Length > 0 && !IsLetterDigitOrUnderscore (word [0])) {  			goto done;  		}  		offset = start;  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: while (offset - 1 > 0) {  	switch (document.GetCharAt (offset - 1)) {  	case '\n':  	case '\r':  	case '}':  		goto done;  	//						offset = FindOpeningBracket(document' offset - 2' '{'''}');  	//						break;  	case ']':  		offset = FindOpeningBracket (document' offset - 2' '['' ']');  		break;  	case ')':  		offset = FindOpeningBracket (document' offset - 2' '('' ')');  		break;  	case '.':  		--offset;  		break;  	case '"':  		if (offset < initialOffset - 1) {  			return null;  		}  		return "\"\"";  	case '\'':  		if (offset < initialOffset - 1) {  			return null;  		}  		return "'a'";  	case '>':  		if (document.GetCharAt (offset - 2) == '-') {  			offset -= 2;  			break;  		}  		goto done;  	default:  		if (Char.IsWhiteSpace (document.GetCharAt (offset - 1))) {  			--offset;  			break;  		}  		int start = offset - 1;  		if (!IsLetterDigitOrUnderscore (document.GetCharAt (start))) {  			goto done;  		}  		while (start > 0 && IsLetterDigitOrUnderscore (document.GetCharAt (start - 1))) {  			--start;  		}  		string word = document.GetText (start' offset - start).Trim ();  		switch (word) {  		case "ref":  		case "out":  		case "in":  		case "return":  		case "throw":  		case "case":  			goto done;  		}  		if (word.Length > 0 && !IsLetterDigitOrUnderscore (word [0])) {  			goto done;  		}  		offset = start;  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: while (offset - 1 > 0) {  	switch (document.GetCharAt (offset - 1)) {  	case '\n':  	case '\r':  	case '}':  		goto done;  	//						offset = FindOpeningBracket(document' offset - 2' '{'''}');  	//						break;  	case ']':  		offset = FindOpeningBracket (document' offset - 2' '['' ']');  		break;  	case ')':  		offset = FindOpeningBracket (document' offset - 2' '('' ')');  		break;  	case '.':  		--offset;  		break;  	case '"':  		if (offset < initialOffset - 1) {  			return null;  		}  		return "\"\"";  	case '\'':  		if (offset < initialOffset - 1) {  			return null;  		}  		return "'a'";  	case '>':  		if (document.GetCharAt (offset - 2) == '-') {  			offset -= 2;  			break;  		}  		goto done;  	default:  		if (Char.IsWhiteSpace (document.GetCharAt (offset - 1))) {  			--offset;  			break;  		}  		int start = offset - 1;  		if (!IsLetterDigitOrUnderscore (document.GetCharAt (start))) {  			goto done;  		}  		while (start > 0 && IsLetterDigitOrUnderscore (document.GetCharAt (start - 1))) {  			--start;  		}  		string word = document.GetText (start' offset - start).Trim ();  		switch (word) {  		case "ref":  		case "out":  		case "in":  		case "return":  		case "throw":  		case "case":  			goto done;  		}  		if (word.Length > 0 && !IsLetterDigitOrUnderscore (word [0])) {  			goto done;  		}  		offset = start;  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: while (offset - 1 > 0) {  	switch (document.GetCharAt (offset - 1)) {  	case '\n':  	case '\r':  	case '}':  		goto done;  	//						offset = FindOpeningBracket(document' offset - 2' '{'''}');  	//						break;  	case ']':  		offset = FindOpeningBracket (document' offset - 2' '['' ']');  		break;  	case ')':  		offset = FindOpeningBracket (document' offset - 2' '('' ')');  		break;  	case '.':  		--offset;  		break;  	case '"':  		if (offset < initialOffset - 1) {  			return null;  		}  		return "\"\"";  	case '\'':  		if (offset < initialOffset - 1) {  			return null;  		}  		return "'a'";  	case '>':  		if (document.GetCharAt (offset - 2) == '-') {  			offset -= 2;  			break;  		}  		goto done;  	default:  		if (Char.IsWhiteSpace (document.GetCharAt (offset - 1))) {  			--offset;  			break;  		}  		int start = offset - 1;  		if (!IsLetterDigitOrUnderscore (document.GetCharAt (start))) {  			goto done;  		}  		while (start > 0 && IsLetterDigitOrUnderscore (document.GetCharAt (start - 1))) {  			--start;  		}  		string word = document.GetText (start' offset - start).Trim ();  		switch (word) {  		case "ref":  		case "out":  		case "in":  		case "return":  		case "throw":  		case "case":  			goto done;  		}  		if (word.Length > 0 && !IsLetterDigitOrUnderscore (word [0])) {  			goto done;  		}  		offset = start;  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: switch (document.GetCharAt (offset - 1)) {  case '\n':  case '\r':  case '}':  	goto done;  //						offset = FindOpeningBracket(document' offset - 2' '{'''}');  //						break;  case ']':  	offset = FindOpeningBracket (document' offset - 2' '['' ']');  	break;  case ')':  	offset = FindOpeningBracket (document' offset - 2' '('' ')');  	break;  case '.':  	--offset;  	break;  case '"':  	if (offset < initialOffset - 1) {  		return null;  	}  	return "\"\"";  case '\'':  	if (offset < initialOffset - 1) {  		return null;  	}  	return "'a'";  case '>':  	if (document.GetCharAt (offset - 2) == '-') {  		offset -= 2;  		break;  	}  	goto done;  default:  	if (Char.IsWhiteSpace (document.GetCharAt (offset - 1))) {  		--offset;  		break;  	}  	int start = offset - 1;  	if (!IsLetterDigitOrUnderscore (document.GetCharAt (start))) {  		goto done;  	}  	while (start > 0 && IsLetterDigitOrUnderscore (document.GetCharAt (start - 1))) {  		--start;  	}  	string word = document.GetText (start' offset - start).Trim ();  	switch (word) {  	case "ref":  	case "out":  	case "in":  	case "return":  	case "throw":  	case "case":  		goto done;  	}  	if (word.Length > 0 && !IsLetterDigitOrUnderscore (word [0])) {  		goto done;  	}  	offset = start;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: switch (document.GetCharAt (offset - 1)) {  case '\n':  case '\r':  case '}':  	goto done;  //						offset = FindOpeningBracket(document' offset - 2' '{'''}');  //						break;  case ']':  	offset = FindOpeningBracket (document' offset - 2' '['' ']');  	break;  case ')':  	offset = FindOpeningBracket (document' offset - 2' '('' ')');  	break;  case '.':  	--offset;  	break;  case '"':  	if (offset < initialOffset - 1) {  		return null;  	}  	return "\"\"";  case '\'':  	if (offset < initialOffset - 1) {  		return null;  	}  	return "'a'";  case '>':  	if (document.GetCharAt (offset - 2) == '-') {  		offset -= 2;  		break;  	}  	goto done;  default:  	if (Char.IsWhiteSpace (document.GetCharAt (offset - 1))) {  		--offset;  		break;  	}  	int start = offset - 1;  	if (!IsLetterDigitOrUnderscore (document.GetCharAt (start))) {  		goto done;  	}  	while (start > 0 && IsLetterDigitOrUnderscore (document.GetCharAt (start - 1))) {  		--start;  	}  	string word = document.GetText (start' offset - start).Trim ();  	switch (word) {  	case "ref":  	case "out":  	case "in":  	case "return":  	case "throw":  	case "case":  		goto done;  	}  	if (word.Length > 0 && !IsLetterDigitOrUnderscore (word [0])) {  		goto done;  	}  	offset = start;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: switch (document.GetCharAt (offset - 1)) {  case '\n':  case '\r':  case '}':  	goto done;  //						offset = FindOpeningBracket(document' offset - 2' '{'''}');  //						break;  case ']':  	offset = FindOpeningBracket (document' offset - 2' '['' ']');  	break;  case ')':  	offset = FindOpeningBracket (document' offset - 2' '('' ')');  	break;  case '.':  	--offset;  	break;  case '"':  	if (offset < initialOffset - 1) {  		return null;  	}  	return "\"\"";  case '\'':  	if (offset < initialOffset - 1) {  		return null;  	}  	return "'a'";  case '>':  	if (document.GetCharAt (offset - 2) == '-') {  		offset -= 2;  		break;  	}  	goto done;  default:  	if (Char.IsWhiteSpace (document.GetCharAt (offset - 1))) {  		--offset;  		break;  	}  	int start = offset - 1;  	if (!IsLetterDigitOrUnderscore (document.GetCharAt (start))) {  		goto done;  	}  	while (start > 0 && IsLetterDigitOrUnderscore (document.GetCharAt (start - 1))) {  		--start;  	}  	string word = document.GetText (start' offset - start).Trim ();  	switch (word) {  	case "ref":  	case "out":  	case "in":  	case "return":  	case "throw":  	case "case":  		goto done;  	}  	if (word.Length > 0 && !IsLetterDigitOrUnderscore (word [0])) {  		goto done;  	}  	offset = start;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: switch (document.GetCharAt (offset - 1)) {  case '\n':  case '\r':  case '}':  	goto done;  //						offset = FindOpeningBracket(document' offset - 2' '{'''}');  //						break;  case ']':  	offset = FindOpeningBracket (document' offset - 2' '['' ']');  	break;  case ')':  	offset = FindOpeningBracket (document' offset - 2' '('' ')');  	break;  case '.':  	--offset;  	break;  case '"':  	if (offset < initialOffset - 1) {  		return null;  	}  	return "\"\"";  case '\'':  	if (offset < initialOffset - 1) {  		return null;  	}  	return "'a'";  case '>':  	if (document.GetCharAt (offset - 2) == '-') {  		offset -= 2;  		break;  	}  	goto done;  default:  	if (Char.IsWhiteSpace (document.GetCharAt (offset - 1))) {  		--offset;  		break;  	}  	int start = offset - 1;  	if (!IsLetterDigitOrUnderscore (document.GetCharAt (start))) {  		goto done;  	}  	while (start > 0 && IsLetterDigitOrUnderscore (document.GetCharAt (start - 1))) {  		--start;  	}  	string word = document.GetText (start' offset - start).Trim ();  	switch (word) {  	case "ref":  	case "out":  	case "in":  	case "return":  	case "throw":  	case "case":  		goto done;  	}  	if (word.Length > 0 && !IsLetterDigitOrUnderscore (word [0])) {  		goto done;  	}  	offset = start;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: offset = FindOpeningBracket (document' offset - 2' '['' ']');  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: offset = FindOpeningBracket (document' offset - 2' '('' ')');  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: if (document.GetCharAt (offset - 2) == '-') {  	offset -= 2;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: if (document.GetCharAt (offset - 2) == '-') {  	offset -= 2;  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following statement contains a magic number: offset -= 2;  
Magic Number,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,MeasurePrintingHeight,The following statement contains a magic number: foreach (TextWord word in line.Words) {  	switch (word.Type) {  	case TextWordType.Space:  		Advance (ref xPos' ref yPos' maxWidth' _primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  		break;  	case TextWordType.Tab:  		Advance (ref xPos' ref yPos' maxWidth' TabIndent * _primaryTextArea.TextArea.TextView.ColumnWidth' fontHeight);  		break;  	case TextWordType.Word:  		SizeF drawingSize = g.MeasureString (word.Word' word.GetFont (fontContainer)' new SizeF (maxWidth' fontHeight * 100)' _printingStringFormat);  		Advance (ref xPos' ref yPos' maxWidth' drawingSize.Width' fontHeight);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,MeasurePrintingHeight,The following statement contains a magic number: switch (word.Type) {  case TextWordType.Space:  	Advance (ref xPos' ref yPos' maxWidth' _primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  	break;  case TextWordType.Tab:  	Advance (ref xPos' ref yPos' maxWidth' TabIndent * _primaryTextArea.TextArea.TextView.ColumnWidth' fontHeight);  	break;  case TextWordType.Word:  	SizeF drawingSize = g.MeasureString (word.Word' word.GetFont (fontContainer)' new SizeF (maxWidth' fontHeight * 100)' _printingStringFormat);  	Advance (ref xPos' ref yPos' maxWidth' drawingSize.Width' fontHeight);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,DrawLine,The following statement contains a magic number: foreach (TextWord word in line.Words) {  	switch (word.Type) {  	case TextWordType.Space:  		Advance (ref xPos' ref yPos' margin.Width' _primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  		break;  	case TextWordType.Tab:  		Advance (ref xPos' ref yPos' margin.Width' TabIndent * _primaryTextArea.TextArea.TextView.ColumnWidth' fontHeight);  		break;  	case TextWordType.Word:  		g.DrawString (word.Word' word.GetFont (fontContainer)' BrushRegistry.GetBrush (word.Color)' xPos + margin.X' yPos);  		SizeF drawingSize = g.MeasureString (word.Word' word.GetFont (fontContainer)' new SizeF (margin.Width' fontHeight * 100)' _printingStringFormat);  		Advance (ref xPos' ref yPos' margin.Width' drawingSize.Width' fontHeight);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,DrawLine,The following statement contains a magic number: switch (word.Type) {  case TextWordType.Space:  	Advance (ref xPos' ref yPos' margin.Width' _primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  	break;  case TextWordType.Tab:  	Advance (ref xPos' ref yPos' margin.Width' TabIndent * _primaryTextArea.TextArea.TextView.ColumnWidth' fontHeight);  	break;  case TextWordType.Word:  	g.DrawString (word.Word' word.GetFont (fontContainer)' BrushRegistry.GetBrush (word.Color)' xPos + margin.X' yPos);  	SizeF drawingSize = g.MeasureString (word.Word' word.GetFont (fontContainer)' new SizeF (margin.Width' fontHeight * 100)' _printingStringFormat);  	Advance (ref xPos' ref yPos' margin.Width' drawingSize.Width' fontHeight);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,ToggleSplitView,The following statement contains a magic number: if (_secondaryTextArea == null) {  	_secondaryTextArea = new TextAreaControl (this) {  		Dock = DockStyle.Bottom'  		Height = (Height / 2)  	};  	_secondaryTextArea.TextArea.GotFocus += delegate {  		ActiveTextAreaControl = _secondaryTextArea;  	};  	_textAreaSplitter = new Splitter {  		BorderStyle = BorderStyle.FixedSingle'  		Height = 8'  		Dock = DockStyle.Bottom  	};  	_textAreaPanel.Controls.Add (_textAreaSplitter);  	_textAreaPanel.Controls.Add (_secondaryTextArea);  	InitializeTextAreaControl (_secondaryTextArea);  	_secondaryTextArea.OptionsChanged ();  } else {  	ActiveTextAreaControl = _primaryTextArea;  	_textAreaPanel.Controls.Remove (_secondaryTextArea);  	_textAreaPanel.Controls.Remove (_textAreaSplitter);  	_secondaryTextArea.Dispose ();  	_textAreaSplitter.Dispose ();  	_secondaryTextArea = null;  	_textAreaSplitter = null;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,ToggleSplitView,The following statement contains a magic number: if (_secondaryTextArea == null) {  	_secondaryTextArea = new TextAreaControl (this) {  		Dock = DockStyle.Bottom'  		Height = (Height / 2)  	};  	_secondaryTextArea.TextArea.GotFocus += delegate {  		ActiveTextAreaControl = _secondaryTextArea;  	};  	_textAreaSplitter = new Splitter {  		BorderStyle = BorderStyle.FixedSingle'  		Height = 8'  		Dock = DockStyle.Bottom  	};  	_textAreaPanel.Controls.Add (_textAreaSplitter);  	_textAreaPanel.Controls.Add (_secondaryTextArea);  	InitializeTextAreaControl (_secondaryTextArea);  	_secondaryTextArea.OptionsChanged ();  } else {  	ActiveTextAreaControl = _primaryTextArea;  	_textAreaPanel.Controls.Remove (_secondaryTextArea);  	_textAreaPanel.Controls.Remove (_textAreaSplitter);  	_secondaryTextArea.Dispose ();  	_textAreaSplitter.Dispose ();  	_secondaryTextArea = null;  	_textAreaSplitter = null;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,ToggleSplitView,The following statement contains a magic number: _secondaryTextArea = new TextAreaControl (this) {  	Dock = DockStyle.Bottom'  	Height = (Height / 2)  };  
Magic Number,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,ToggleSplitView,The following statement contains a magic number: _textAreaSplitter = new Splitter {  	BorderStyle = BorderStyle.FixedSingle'  	Height = 8'  	Dock = DockStyle.Bottom  };  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetTipSize,The following statement contains a magic number: if (maxLayoutSize.Width > 0 && maxLayoutSize.Height > 0) {  	tipData.SetMaximumSize (maxLayoutSize);  	SizeF tipSizeF = tipData.GetRequiredSize ();  	tipData.SetAllocatedSize (tipSizeF);  	tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  	tipSize = Size.Ceiling (tipSizeF);  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetTipSize,The following statement contains a magic number: if (maxLayoutSize.Width > 0 && maxLayoutSize.Height > 0) {  	tipData.SetMaximumSize (maxLayoutSize);  	SizeF tipSizeF = tipData.GetRequiredSize ();  	tipData.SetAllocatedSize (tipSizeF);  	tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  	tipSize = Size.Ceiling (tipSizeF);  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetTipSize,The following statement contains a magic number: tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetTipSize,The following statement contains a magic number: tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetLeftHandSideTipSize,The following statement contains a magic number: if (maxLayoutSize.Width > 0 && maxLayoutSize.Height > 0) {  	tipData.SetMaximumSize (maxLayoutSize);  	tipSizeF = tipData.GetRequiredSize ();  	tipData.SetAllocatedSize (tipSizeF);  	tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  	tipSize = Size.Ceiling (tipSizeF);  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetLeftHandSideTipSize,The following statement contains a magic number: if (maxLayoutSize.Width > 0 && maxLayoutSize.Height > 0) {  	tipData.SetMaximumSize (maxLayoutSize);  	tipSizeF = tipData.GetRequiredSize ();  	tipData.SetAllocatedSize (tipSizeF);  	tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  	tipSize = Size.Ceiling (tipSizeF);  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetLeftHandSideTipSize,The following statement contains a magic number: tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,GetLeftHandSideTipSize,The following statement contains a magic number: tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawTip,The following statement contains a magic number: if (maxLayoutSize.Width > 0 && maxLayoutSize.Height > 0) {  	tipData.SetMaximumSize (maxLayoutSize);  	tipSizeF = tipData.GetRequiredSize ();  	tipData.SetAllocatedSize (tipSizeF);  	tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  	tipSize = Size.Ceiling (tipSizeF);  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawTip,The following statement contains a magic number: if (maxLayoutSize.Width > 0 && maxLayoutSize.Height > 0) {  	tipData.SetMaximumSize (maxLayoutSize);  	tipSizeF = tipData.GetRequiredSize ();  	tipData.SetAllocatedSize (tipSizeF);  	tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  	tipSize = Size.Ceiling (tipSizeF);  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawTip,The following statement contains a magic number: tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawTip,The following statement contains a magic number: tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawTip,The following statement contains a magic number: if (tipSize != Size.Empty) {  	Rectangle borderRectangle = new Rectangle (Point.Empty' tipSize - new Size (1' 1));  	RectangleF displayRectangle = new RectangleF (HorizontalBorder' VerticalBorder' tipSizeF.Width - HorizontalBorder * 2' tipSizeF.Height - VerticalBorder * 2);  	// DrawRectangle draws from Left to Left + Width. A bug? :-/  	graphics.DrawRectangle (SystemPens.WindowFrame' borderRectangle);  	tipData.Draw (new PointF (HorizontalBorder' VerticalBorder));  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawTip,The following statement contains a magic number: if (tipSize != Size.Empty) {  	Rectangle borderRectangle = new Rectangle (Point.Empty' tipSize - new Size (1' 1));  	RectangleF displayRectangle = new RectangleF (HorizontalBorder' VerticalBorder' tipSizeF.Width - HorizontalBorder * 2' tipSizeF.Height - VerticalBorder * 2);  	// DrawRectangle draws from Left to Left + Width. A bug? :-/  	graphics.DrawRectangle (SystemPens.WindowFrame' borderRectangle);  	tipData.Draw (new PointF (HorizontalBorder' VerticalBorder));  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: if (maxLayoutSize.Width > 0 && maxLayoutSize.Height > 0) {  	tipData.SetMaximumSize (maxLayoutSize);  	tipSizeF = tipData.GetRequiredSize ();  	tipData.SetAllocatedSize (tipSizeF);  	tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  	tipSize = Size.Ceiling (tipSizeF);  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: if (maxLayoutSize.Width > 0 && maxLayoutSize.Height > 0) {  	tipData.SetMaximumSize (maxLayoutSize);  	tipSizeF = tipData.GetRequiredSize ();  	tipData.SetAllocatedSize (tipSizeF);  	tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  	tipSize = Size.Ceiling (tipSizeF);  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: tipSizeF += new SizeF (HorizontalBorder * 2' VerticalBorder * 2);  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: if (tipSize != Size.Empty) {  	Rectangle borderRectangle = new Rectangle (Point.Empty' control.Size - new Size (1' 1));  	RectangleF displayRectangle = new RectangleF (HorizontalBorder' VerticalBorder' tipSizeF.Width - HorizontalBorder * 2' tipSizeF.Height - VerticalBorder * 2);  	// DrawRectangle draws from Left to Left + Width. A bug? :-/  	graphics.DrawRectangle (SystemPens.WindowFrame' borderRectangle);  	tipData.Draw (new PointF (HorizontalBorder' VerticalBorder));  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: if (tipSize != Size.Empty) {  	Rectangle borderRectangle = new Rectangle (Point.Empty' control.Size - new Size (1' 1));  	RectangleF displayRectangle = new RectangleF (HorizontalBorder' VerticalBorder' tipSizeF.Width - HorizontalBorder * 2' tipSizeF.Height - VerticalBorder * 2);  	// DrawRectangle draws from Left to Left + Width. A bug? :-/  	graphics.DrawRectangle (SystemPens.WindowFrame' borderRectangle);  	tipData.Draw (new PointF (HorizontalBorder' VerticalBorder));  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,DrawTriangle,The following statement contains a magic number: if (flipped) {  	Graphics.FillPolygon (brush' new PointF[] {  		new PointF (x' y + triHeight2 - triHeight4)'  		new PointF (x + triWidth / 2' y + triHeight2 + triHeight4)'  		new PointF (x + triWidth' y + triHeight2 - triHeight4)'  	});  } else {  	Graphics.FillPolygon (brush' new PointF[] {  		new PointF (x' y + triHeight2 + triHeight4)'  		new PointF (x + triWidth / 2' y + triHeight2 - triHeight4)'  		new PointF (x + triWidth' y + triHeight2 + triHeight4)'  	});  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,DrawTriangle,The following statement contains a magic number: if (flipped) {  	Graphics.FillPolygon (brush' new PointF[] {  		new PointF (x' y + triHeight2 - triHeight4)'  		new PointF (x + triWidth / 2' y + triHeight2 + triHeight4)'  		new PointF (x + triWidth' y + triHeight2 - triHeight4)'  	});  } else {  	Graphics.FillPolygon (brush' new PointF[] {  		new PointF (x' y + triHeight2 + triHeight4)'  		new PointF (x + triWidth / 2' y + triHeight2 - triHeight4)'  		new PointF (x + triWidth' y + triHeight2 + triHeight4)'  	});  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,DrawTriangle,The following statement contains a magic number: Graphics.FillPolygon (brush' new PointF[] {  	new PointF (x' y + triHeight2 - triHeight4)'  	new PointF (x + triWidth / 2' y + triHeight2 + triHeight4)'  	new PointF (x + triWidth' y + triHeight2 - triHeight4)'  });  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,DrawTriangle,The following statement contains a magic number: Graphics.FillPolygon (brush' new PointF[] {  	new PointF (x' y + triHeight2 + triHeight4)'  	new PointF (x + triWidth / 2' y + triHeight2 - triHeight4)'  	new PointF (x + triWidth' y + triHeight2 + triHeight4)'  });  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: if (tipText != null && tipText.Length > 0) {  	base.Draw (new PointF (location.X + triWidth + 4' location.Y));  	DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawTriangle (location.X + 2' location.Y + 2' false);  	DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: if (tipText != null && tipText.Length > 0) {  	base.Draw (new PointF (location.X + triWidth + 4' location.Y));  	DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawTriangle (location.X + 2' location.Y + 2' false);  	DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: if (tipText != null && tipText.Length > 0) {  	base.Draw (new PointF (location.X + triWidth + 4' location.Y));  	DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawTriangle (location.X + 2' location.Y + 2' false);  	DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: if (tipText != null && tipText.Length > 0) {  	base.Draw (new PointF (location.X + triWidth + 4' location.Y));  	DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawTriangle (location.X + 2' location.Y + 2' false);  	DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: if (tipText != null && tipText.Length > 0) {  	base.Draw (new PointF (location.X + triWidth + 4' location.Y));  	DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawTriangle (location.X + 2' location.Y + 2' false);  	DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: if (tipText != null && tipText.Length > 0) {  	base.Draw (new PointF (location.X + triWidth + 4' location.Y));  	DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawTriangle (location.X + 2' location.Y + 2' false);  	DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: if (tipText != null && tipText.Length > 0) {  	base.Draw (new PointF (location.X + triWidth + 4' location.Y));  	DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawTriangle (location.X + 2' location.Y + 2' false);  	DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: if (tipText != null && tipText.Length > 0) {  	base.Draw (new PointF (location.X + triWidth + 4' location.Y));  	DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawTriangle (location.X + 2' location.Y + 2' false);  	DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: if (tipText != null && tipText.Length > 0) {  	base.Draw (new PointF (location.X + triWidth + 4' location.Y));  	DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  	DrawTriangle (location.X + 2' location.Y + 2' false);  	DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: base.Draw (new PointF (location.X + triWidth + 4' location.Y));  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: DrawingRectangle1 = new Rectangle ((int)location.X + 2' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: DrawingRectangle2 = new Rectangle ((int)(location.X + AllocatedSize.Width - triWidth - 2)' (int)location.Y + 2' (int)(triWidth)' (int)(triHeight));  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: DrawTriangle (location.X + 2' location.Y + 2' false);  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: DrawTriangle (location.X + 2' location.Y + 2' false);  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,Draw,The following statement contains a magic number: DrawTriangle (location.X + AllocatedSize.Width - triWidth - 2' location.Y + 2' true);  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,OnMaximumSizeChanged,The following statement contains a magic number: if (IsTextVisible ()) {  	Size tipSize = TextRenderer.MeasureText (tipText' tipFont);  	tipSize.Width += (int)(triWidth * 2 + 8);  	SetRequiredSize (tipSize);  } else {  	SetRequiredSize (Size.Empty);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,OnMaximumSizeChanged,The following statement contains a magic number: if (IsTextVisible ()) {  	Size tipSize = TextRenderer.MeasureText (tipText' tipFont);  	tipSize.Width += (int)(triWidth * 2 + 8);  	SetRequiredSize (tipSize);  } else {  	SetRequiredSize (Size.Empty);  }  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,OnMaximumSizeChanged,The following statement contains a magic number: tipSize.Width += (int)(triWidth * 2 + 8);  
Magic Number,DigitalRune.Windows.TextEditor,CountTipText,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipText.cs,OnMaximumSizeChanged,The following statement contains a magic number: tipSize.Width += (int)(triWidth * 2 + 8);  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetLeftHandSideDrawingSizeHelpTipFromCombinedDescription,The following statement contains a magic number: if (IsVisibleText (description)) {  	string[] splitDescription = description.Split (new char[] {  		'\n'  	}' 2);  	if (splitDescription.Length > 0) {  		basicDescription = splitDescription [0];  		if (splitDescription.Length > 1) {  			documentation = splitDescription [1].Trim ();  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetDrawingSizeHelpTipFromCombinedDescription,The following statement contains a magic number: if (IsVisibleText (description)) {  	string[] splitDescription = description.Split (new char[] {  		'\n'  	}' 2);  	if (splitDescription.Length > 0) {  		basicDescription = splitDescription [0];  		if (splitDescription.Length > 1) {  			documentation = splitDescription [1].Trim ();  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawHelpTipFromCombinedDescription,The following statement contains a magic number: if (IsVisibleText (description)) {  	string[] splitDescription = description.Split (new char[] {  		'\n'  	}' 2);  	if (splitDescription.Length > 0) {  		basicDescription = splitDescription [0];  		if (splitDescription.Length > 1) {  			documentation = splitDescription [1].Trim ();  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawFixedWidthHelpTipFromCombinedDescription,The following statement contains a magic number: if (IsVisibleText (description)) {  	string[] splitDescription = description.Split (new char[] {  		'\n'  	}' 2);  	if (splitDescription.Length > 0) {  		basicDescription = splitDescription [0];  		if (splitDescription.Length > 1) {  			documentation = splitDescription [1].Trim ();  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetDrawingSizeDrawHelpTip,The following statement contains a magic number: if (IsVisibleText (countMessage) || IsVisibleText (basicDescription) || IsVisibleText (documentation)) {  	// Create all the TipSection objects.  	CountTipText countMessageTip = new CountTipText (graphics' font' countMessage);  	TipSpacer countSpacer = new TipSpacer (graphics' new SizeF (IsVisibleText (countMessage) ? 4 : 0' 0));  	TipText descriptionTip = new TipText (graphics' font' basicDescription);  	TipSpacer docSpacer = new TipSpacer (graphics' new SizeF (0' IsVisibleText (documentation) ? 4 : 0));  	TipText docTip = new TipText (graphics' font' documentation);  	// Now put them together.  	TipSplitter descSplitter = new TipSplitter (graphics' false' descriptionTip' docSpacer);  	TipSplitter mainSplitter = new TipSplitter (graphics' true' countMessageTip' countSpacer' descSplitter);  	TipSplitter mainSplitter2 = new TipSplitter (graphics' false' mainSplitter' docTip);  	// Show it.  	Size size = TipPainter.GetTipSize (control' graphics' mainSplitter2);  	DrawingRectangle1 = countMessageTip.DrawingRectangle1;  	DrawingRectangle2 = countMessageTip.DrawingRectangle2;  	return size;  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetDrawingSizeDrawHelpTip,The following statement contains a magic number: if (IsVisibleText (countMessage) || IsVisibleText (basicDescription) || IsVisibleText (documentation)) {  	// Create all the TipSection objects.  	CountTipText countMessageTip = new CountTipText (graphics' font' countMessage);  	TipSpacer countSpacer = new TipSpacer (graphics' new SizeF (IsVisibleText (countMessage) ? 4 : 0' 0));  	TipText descriptionTip = new TipText (graphics' font' basicDescription);  	TipSpacer docSpacer = new TipSpacer (graphics' new SizeF (0' IsVisibleText (documentation) ? 4 : 0));  	TipText docTip = new TipText (graphics' font' documentation);  	// Now put them together.  	TipSplitter descSplitter = new TipSplitter (graphics' false' descriptionTip' docSpacer);  	TipSplitter mainSplitter = new TipSplitter (graphics' true' countMessageTip' countSpacer' descSplitter);  	TipSplitter mainSplitter2 = new TipSplitter (graphics' false' mainSplitter' docTip);  	// Show it.  	Size size = TipPainter.GetTipSize (control' graphics' mainSplitter2);  	DrawingRectangle1 = countMessageTip.DrawingRectangle1;  	DrawingRectangle2 = countMessageTip.DrawingRectangle2;  	return size;  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetLeftHandSideDrawingSizeDrawHelpTip,The following statement contains a magic number: if (IsVisibleText (countMessage) || IsVisibleText (basicDescription) || IsVisibleText (documentation)) {  	// Create all the TipSection objects.  	CountTipText countMessageTip = new CountTipText (graphics' font' countMessage);  	TipSpacer countSpacer = new TipSpacer (graphics' new SizeF (IsVisibleText (countMessage) ? 4 : 0' 0));  	TipText descriptionTip = new TipText (graphics' font' basicDescription);  	TipSpacer docSpacer = new TipSpacer (graphics' new SizeF (0' IsVisibleText (documentation) ? 4 : 0));  	TipText docTip = new TipText (graphics' font' documentation);  	// Now put them together.  	TipSplitter descSplitter = new TipSplitter (graphics' false' descriptionTip' docSpacer);  	TipSplitter mainSplitter = new TipSplitter (graphics' true' countMessageTip' countSpacer' descSplitter);  	TipSplitter mainSplitter2 = new TipSplitter (graphics' false' mainSplitter' docTip);  	// Show it.  	Size size = TipPainter.GetLeftHandSideTipSize (control' graphics' mainSplitter2' p);  	return size;  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,GetLeftHandSideDrawingSizeDrawHelpTip,The following statement contains a magic number: if (IsVisibleText (countMessage) || IsVisibleText (basicDescription) || IsVisibleText (documentation)) {  	// Create all the TipSection objects.  	CountTipText countMessageTip = new CountTipText (graphics' font' countMessage);  	TipSpacer countSpacer = new TipSpacer (graphics' new SizeF (IsVisibleText (countMessage) ? 4 : 0' 0));  	TipText descriptionTip = new TipText (graphics' font' basicDescription);  	TipSpacer docSpacer = new TipSpacer (graphics' new SizeF (0' IsVisibleText (documentation) ? 4 : 0));  	TipText docTip = new TipText (graphics' font' documentation);  	// Now put them together.  	TipSplitter descSplitter = new TipSplitter (graphics' false' descriptionTip' docSpacer);  	TipSplitter mainSplitter = new TipSplitter (graphics' true' countMessageTip' countSpacer' descSplitter);  	TipSplitter mainSplitter2 = new TipSplitter (graphics' false' mainSplitter' docTip);  	// Show it.  	Size size = TipPainter.GetLeftHandSideTipSize (control' graphics' mainSplitter2' p);  	return size;  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawHelpTip,The following statement contains a magic number: if (IsVisibleText (countMessage) || IsVisibleText (basicDescription) || IsVisibleText (documentation)) {  	// Create all the TipSection objects.  	CountTipText countMessageTip = new CountTipText (graphics' font' countMessage);  	TipSpacer countSpacer = new TipSpacer (graphics' new SizeF (IsVisibleText (countMessage) ? 4 : 0' 0));  	TipText descriptionTip = new TipText (graphics' font' basicDescription);  	TipSpacer docSpacer = new TipSpacer (graphics' new SizeF (0' IsVisibleText (documentation) ? 4 : 0));  	TipText docTip = new TipText (graphics' font' documentation);  	// Now put them together.  	TipSplitter descSplitter = new TipSplitter (graphics' false' descriptionTip' docSpacer);  	TipSplitter mainSplitter = new TipSplitter (graphics' true' countMessageTip' countSpacer' descSplitter);  	TipSplitter mainSplitter2 = new TipSplitter (graphics' false' mainSplitter' docTip);  	// Show it.  	Size size = TipPainter.DrawTip (control' graphics' mainSplitter2);  	DrawingRectangle1 = countMessageTip.DrawingRectangle1;  	DrawingRectangle2 = countMessageTip.DrawingRectangle2;  	return size;  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawHelpTip,The following statement contains a magic number: if (IsVisibleText (countMessage) || IsVisibleText (basicDescription) || IsVisibleText (documentation)) {  	// Create all the TipSection objects.  	CountTipText countMessageTip = new CountTipText (graphics' font' countMessage);  	TipSpacer countSpacer = new TipSpacer (graphics' new SizeF (IsVisibleText (countMessage) ? 4 : 0' 0));  	TipText descriptionTip = new TipText (graphics' font' basicDescription);  	TipSpacer docSpacer = new TipSpacer (graphics' new SizeF (0' IsVisibleText (documentation) ? 4 : 0));  	TipText docTip = new TipText (graphics' font' documentation);  	// Now put them together.  	TipSplitter descSplitter = new TipSplitter (graphics' false' descriptionTip' docSpacer);  	TipSplitter mainSplitter = new TipSplitter (graphics' true' countMessageTip' countSpacer' descSplitter);  	TipSplitter mainSplitter2 = new TipSplitter (graphics' false' mainSplitter' docTip);  	// Show it.  	Size size = TipPainter.DrawTip (control' graphics' mainSplitter2);  	DrawingRectangle1 = countMessageTip.DrawingRectangle1;  	DrawingRectangle2 = countMessageTip.DrawingRectangle2;  	return size;  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawFixedWidthHelpTip,The following statement contains a magic number: if (IsVisibleText (countMessage) || IsVisibleText (basicDescription) || IsVisibleText (documentation)) {  	// Create all the TipSection objects.  	CountTipText countMessageTip = new CountTipText (graphics' font' countMessage);  	TipSpacer countSpacer = new TipSpacer (graphics' new SizeF (IsVisibleText (countMessage) ? 4 : 0' 0));  	TipText descriptionTip = new TipText (graphics' font' basicDescription);  	TipSpacer docSpacer = new TipSpacer (graphics' new SizeF (0' IsVisibleText (documentation) ? 4 : 0));  	TipText docTip = new TipText (graphics' font' documentation);  	// Now put them together.  	TipSplitter descSplitter = new TipSplitter (graphics' false' descriptionTip' docSpacer);  	TipSplitter mainSplitter = new TipSplitter (graphics' true' countMessageTip' countSpacer' descSplitter);  	TipSplitter mainSplitter2 = new TipSplitter (graphics' false' mainSplitter' docTip);  	// Show it.  	Size size = TipPainter.DrawFixedWidthTip (control' graphics' mainSplitter2);  	DrawingRectangle1 = countMessageTip.DrawingRectangle1;  	DrawingRectangle2 = countMessageTip.DrawingRectangle2;  	return size;  }  
Magic Number,DigitalRune.Windows.TextEditor,TipPainterTools,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Tip\TipPainterTools.cs,DrawFixedWidthHelpTip,The following statement contains a magic number: if (IsVisibleText (countMessage) || IsVisibleText (basicDescription) || IsVisibleText (documentation)) {  	// Create all the TipSection objects.  	CountTipText countMessageTip = new CountTipText (graphics' font' countMessage);  	TipSpacer countSpacer = new TipSpacer (graphics' new SizeF (IsVisibleText (countMessage) ? 4 : 0' 0));  	TipText descriptionTip = new TipText (graphics' font' basicDescription);  	TipSpacer docSpacer = new TipSpacer (graphics' new SizeF (0' IsVisibleText (documentation) ? 4 : 0));  	TipText docTip = new TipText (graphics' font' documentation);  	// Now put them together.  	TipSplitter descSplitter = new TipSplitter (graphics' false' descriptionTip' docSpacer);  	TipSplitter mainSplitter = new TipSplitter (graphics' true' countMessageTip' countSpacer' descSplitter);  	TipSplitter mainSplitter2 = new TipSplitter (graphics' false' mainSplitter' docTip);  	// Show it.  	Size size = TipPainter.DrawFixedWidthTip (control' graphics' mainSplitter2);  	DrawingRectangle1 = countMessageTip.DrawingRectangle1;  	DrawingRectangle2 = countMessageTip.DrawingRectangle2;  	return size;  }  
Magic Number,DigitalRune.Windows.TextEditor,Caret,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Caret.cs,CreateCaret,The following statement contains a magic number: while (!_caretCreated) {  	switch (_caretMode) {  	case CaretMode.InsertMode:  		_caretCreated = CreateCaret (_textArea.Handle' IntPtr.Zero' 2' _textArea.TextView.FontHeight);  		break;  	case CaretMode.OverwriteMode:  		_caretCreated = CreateCaret (_textArea.Handle' IntPtr.Zero' _textArea.TextView.SpaceWidth' _textArea.TextView.FontHeight);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,Caret,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Caret.cs,CreateCaret,The following statement contains a magic number: switch (_caretMode) {  case CaretMode.InsertMode:  	_caretCreated = CreateCaret (_textArea.Handle' IntPtr.Zero' 2' _textArea.TextView.FontHeight);  	break;  case CaretMode.OverwriteMode:  	_caretCreated = CreateCaret (_textArea.Handle' IntPtr.Zero' _textArea.TextView.SpaceWidth' _textArea.TextView.FontHeight);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,Caret,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Caret.cs,CreateCaret,The following statement contains a magic number: _caretCreated = CreateCaret (_textArea.Handle' IntPtr.Zero' 2' _textArea.TextView.FontHeight);  
Magic Number,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,SetToolTip,The following statement contains a magic number: if (text == null) {  	_toolTip.Hide ();  } else {  	Point p = MousePosition;  	Point cp = PointToClient (p);  	if (lineNumber >= 0) {  		lineNumber = Document.GetVisibleLine (lineNumber);  		p.Y = (p.Y - cp.Y) + (lineNumber * TextView.LineHeight) - _virtualTop.Y;  	}  	p.Offset (3' 3);  	_toolTip.Location = p;  	_toolTip.Description = text;  	_toolTip.HideOnClick = true;  	_toolTip.Show ();  }  
Magic Number,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,SetToolTip,The following statement contains a magic number: if (text == null) {  	_toolTip.Hide ();  } else {  	Point p = MousePosition;  	Point cp = PointToClient (p);  	if (lineNumber >= 0) {  		lineNumber = Document.GetVisibleLine (lineNumber);  		p.Y = (p.Y - cp.Y) + (lineNumber * TextView.LineHeight) - _virtualTop.Y;  	}  	p.Offset (3' 3);  	_toolTip.Location = p;  	_toolTip.Description = text;  	_toolTip.HideOnClick = true;  	_toolTip.Show ();  }  
Magic Number,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,SetToolTip,The following statement contains a magic number: p.Offset (3' 3);  
Magic Number,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,SetToolTip,The following statement contains a magic number: p.Offset (3' 3);  
Magic Number,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,RequestToolTip,The following statement contains a magic number: _toolTipRectangle = new Rectangle (mousePos.X - 4' mousePos.Y - 4' 8' 8);  
Magic Number,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,RequestToolTip,The following statement contains a magic number: _toolTipRectangle = new Rectangle (mousePos.X - 4' mousePos.Y - 4' 8' 8);  
Magic Number,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,RequestToolTip,The following statement contains a magic number: _toolTipRectangle = new Rectangle (mousePos.X - 4' mousePos.Y - 4' 8' 8);  
Magic Number,DigitalRune.Windows.TextEditor,TextArea,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextArea.cs,RequestToolTip,The following statement contains a magic number: _toolTipRectangle = new Rectangle (mousePos.X - 4' mousePos.Y - 4' 8' 8);  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: try {  	Clipboard.SetDataObject (dataObject' true);  } catch (ExternalException) {  	Timer timer = new Timer ();  	timer.Interval = 100;  	timer.Tick += delegate {  		timer.Stop ();  		timer.Dispose ();  		if (_safeSetClipboardDataVersion == version) {  			try {  				Clipboard.SetDataObject (dataObject' true' 10' 50);  			} catch (ExternalException) {  			}  		}  	};  	timer.Start ();  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: try {  	Clipboard.SetDataObject (dataObject' true);  } catch (ExternalException) {  	Timer timer = new Timer ();  	timer.Interval = 100;  	timer.Tick += delegate {  		timer.Stop ();  		timer.Dispose ();  		if (_safeSetClipboardDataVersion == version) {  			try {  				Clipboard.SetDataObject (dataObject' true' 10' 50);  			} catch (ExternalException) {  			}  		}  	};  	timer.Start ();  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: try {  	Clipboard.SetDataObject (dataObject' true);  } catch (ExternalException) {  	Timer timer = new Timer ();  	timer.Interval = 100;  	timer.Tick += delegate {  		timer.Stop ();  		timer.Dispose ();  		if (_safeSetClipboardDataVersion == version) {  			try {  				Clipboard.SetDataObject (dataObject' true' 10' 50);  			} catch (ExternalException) {  			}  		}  	};  	timer.Start ();  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: timer.Interval = 100;  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: timer.Tick += delegate {  	timer.Stop ();  	timer.Dispose ();  	if (_safeSetClipboardDataVersion == version) {  		try {  			Clipboard.SetDataObject (dataObject' true' 10' 50);  		} catch (ExternalException) {  		}  	}  };  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: timer.Tick += delegate {  	timer.Stop ();  	timer.Dispose ();  	if (_safeSetClipboardDataVersion == version) {  		try {  			Clipboard.SetDataObject (dataObject' true' 10' 50);  		} catch (ExternalException) {  		}  	}  };  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: if (_safeSetClipboardDataVersion == version) {  	try {  		Clipboard.SetDataObject (dataObject' true' 10' 50);  	} catch (ExternalException) {  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: if (_safeSetClipboardDataVersion == version) {  	try {  		Clipboard.SetDataObject (dataObject' true' 10' 50);  	} catch (ExternalException) {  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: try {  	Clipboard.SetDataObject (dataObject' true' 10' 50);  } catch (ExternalException) {  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: try {  	Clipboard.SetDataObject (dataObject' true' 10' 50);  } catch (ExternalException) {  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: Clipboard.SetDataObject (dataObject' true' 10' 50);  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,SafeSetClipboard,The following statement contains a magic number: Clipboard.SetDataObject (dataObject' true' 10' 50);  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,Paste,The following statement contains a magic number: for (int i = 0; ; i++) {  	try {  		IDataObject data = Clipboard.GetDataObject ();  		if (data == null)  			return;  		bool fullLine = data.GetDataPresent (LineSelectedType);  		if (data.GetDataPresent (DataFormats.UnicodeText)) {  			string text = (string)data.GetData (DataFormats.UnicodeText);  			if (text.Length > 0) {  				_textArea.Document.UndoStack.StartUndoGroup ();  				try {  					if (_textArea.SelectionManager.HasSomethingSelected) {  						_textArea.Caret.Position = _textArea.SelectionManager.Selections [0].StartPosition;  						_textArea.SelectionManager.RemoveSelectedText ();  					}  					if (fullLine) {  						int col = _textArea.Caret.Column;  						_textArea.Caret.Column = 0;  						if (!_textArea.IsReadOnly (_textArea.Caret.Offset))  							_textArea.InsertString (text);  						_textArea.Caret.Column = col;  					} else {  						// _textArea.EnableCutOrPaste already checked readonly for this case  						_textArea.InsertString (text);  					}  				} finally {  					_textArea.Document.UndoStack.EndUndoGroup ();  				}  			}  		}  		return;  	} catch (ExternalException) {  		// GetDataObject does not provide RetryTimes parameter  		if (i > 5)  			throw;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,Paste,The following statement contains a magic number: try {  	IDataObject data = Clipboard.GetDataObject ();  	if (data == null)  		return;  	bool fullLine = data.GetDataPresent (LineSelectedType);  	if (data.GetDataPresent (DataFormats.UnicodeText)) {  		string text = (string)data.GetData (DataFormats.UnicodeText);  		if (text.Length > 0) {  			_textArea.Document.UndoStack.StartUndoGroup ();  			try {  				if (_textArea.SelectionManager.HasSomethingSelected) {  					_textArea.Caret.Position = _textArea.SelectionManager.Selections [0].StartPosition;  					_textArea.SelectionManager.RemoveSelectedText ();  				}  				if (fullLine) {  					int col = _textArea.Caret.Column;  					_textArea.Caret.Column = 0;  					if (!_textArea.IsReadOnly (_textArea.Caret.Offset))  						_textArea.InsertString (text);  					_textArea.Caret.Column = col;  				} else {  					// _textArea.EnableCutOrPaste already checked readonly for this case  					_textArea.InsertString (text);  				}  			} finally {  				_textArea.Document.UndoStack.EndUndoGroup ();  			}  		}  	}  	return;  } catch (ExternalException) {  	// GetDataObject does not provide RetryTimes parameter  	if (i > 5)  		throw;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaClipboardHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaClipboardHandler.cs,Paste,The following statement contains a magic number: if (i > 5)  	throw;  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: foreach (MarkerToDraw m in _markersToDraw) {  	Marker marker = m.Marker;  	RectangleF drawingRect = m.DrawingRectangle;  	float drawYPos = drawingRect.Bottom - 1;  	switch (marker.MarkerType) {  	case MarkerType.Underlined:  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  		break;  	case MarkerType.WaveLine:  		int reminder = ((int)drawingRect.X) % 4;  		for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  			if (i + 2 < drawingRect.Right)  				g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  		}  		break;  	case MarkerType.SolidBlock:  		g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  	if (i + 2 < drawingRect.Right)  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: i += 4
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: if (i + 2 < drawingRect.Right)  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: if (i + 2 < drawingRect.Right)  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: if (i + 2 < drawingRect.Right)  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: if (i + 2 < drawingRect.Right)  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: if (i + 2 < drawingRect.Right)  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: if (i + 2 < drawingRect.Right)  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following statement contains a magic number: g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetDrawingXPos,The following statement contains a magic number: for (i = foldings.Count - 1; i >= 0; --i) {  	f = foldings [i];  	if (f.StartLine < logicalLine || f.StartLine == logicalLine && f.StartColumn < logicalColumn) {  		break;  	}  	Fold f2 = foldings [i / 2];  	if (f2.StartLine > logicalLine || f2.StartLine == logicalLine && f2.StartColumn >= logicalColumn) {  		i /= 2;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetDrawingXPos,The following statement contains a magic number: for (i = foldings.Count - 1; i >= 0; --i) {  	f = foldings [i];  	if (f.StartLine < logicalLine || f.StartLine == logicalLine && f.StartColumn < logicalColumn) {  		break;  	}  	Fold f2 = foldings [i / 2];  	if (f2.StartLine > logicalLine || f2.StartLine == logicalLine && f2.StartColumn >= logicalColumn) {  		i /= 2;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetDrawingXPos,The following statement contains a magic number: if (f2.StartLine > logicalLine || f2.StartLine == logicalLine && f2.StartColumn >= logicalColumn) {  	i /= 2;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,GetDrawingXPos,The following statement contains a magic number: i /= 2;  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawBracketHighlight,The following statement contains a magic number: g.FillRectangle (BrushRegistry.GetBrush (Color.FromArgb (50' 0' 0' 255))' rect);  
Magic Number,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawBracketHighlight,The following statement contains a magic number: g.FillRectangle (BrushRegistry.GetBrush (Color.FromArgb (50' 0' 0' 255))' rect);  
Magic Number,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnPaint,The following statement contains a magic number: g.DrawLine (dottedPen' backgroundRectangle.Right - 2' backgroundRectangle.Top' backgroundRectangle.Right - 2' backgroundRectangle.Bottom);  
Magic Number,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnPaint,The following statement contains a magic number: g.DrawLine (dottedPen' backgroundRectangle.Right - 2' backgroundRectangle.Top' backgroundRectangle.Right - 2' backgroundRectangle.Bottom);  
Magic Number,DigitalRune.Windows.TextEditor,LineNumberMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\LineNumberMargin.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < (DrawingPosition.Height + visibleLineDrawingRemainder) / lineHeight + 1; ++y) {  	int ypos = DrawingPosition.Y + lineHeight * y - visibleLineDrawingRemainder;  	Rectangle textRectangle = new Rectangle (DrawingPosition.X' ypos' DrawingPosition.Width - 3' lineHeight);  	if (rect.IntersectsWith (textRectangle)) {  		int curLine = TextArea.Document.GetFirstLogicalLine (TextArea.Document.GetVisibleLine (TextArea.TextView.FirstLogicalLine) + y);  		if (curLine < TextArea.Document.TotalNumberOfLines)  			TextRenderer.DrawText (g' (curLine + 1).ToString ()' font' textRectangle' foregroundColor' backgroundColor' textFormatFlags);  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,AdjustScrollBarsClearCache,The following statement contains a magic number: if (_lineLengthCache != null) {  	if (_lineLengthCache.Length < Document.TotalNumberOfLines + 2 * _LineLengthCacheAdditionalSize) {  		_lineLengthCache = null;  	} else {  		Array.Clear (_lineLengthCache' 0' _lineLengthCache.Length);  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,AdjustScrollBarsClearCache,The following statement contains a magic number: if (_lineLengthCache.Length < Document.TotalNumberOfLines + 2 * _LineLengthCacheAdditionalSize) {  	_lineLengthCache = null;  } else {  	Array.Clear (_lineLengthCache' 0' _lineLengthCache.Length);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,AdjustScrollBars,The following statement contains a magic number: _hScrollBar.Maximum = (Math.Max (max + 20' _textArea.TextView.NumberOfVisibleColumns - 1));  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,HandleMouseWheel,The following statement contains a magic number: if ((ModifierKeys & Keys.Control) != 0 && TextEditorProperties.MouseWheelTextZoom) {  	if (scrollDistance > 0) {  		_motherTextEditorControl.Font = new Font (_motherTextEditorControl.Font.Name' _motherTextEditorControl.Font.Size + 1);  	} else {  		_motherTextEditorControl.Font = new Font (_motherTextEditorControl.Font.Name' Math.Max (6' _motherTextEditorControl.Font.Size - 1));  	}  } else {  	if (TextEditorProperties.MouseWheelScrollDown)  		scrollDistance = -scrollDistance;  	int newValue = _vScrollBar.Value + _vScrollBar.SmallChange * scrollDistance;  	_vScrollBar.Value = Math.Max (_vScrollBar.Minimum' Math.Min (_vScrollBar.Maximum - _vScrollBar.LargeChange + 1' newValue));  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,HandleMouseWheel,The following statement contains a magic number: if (scrollDistance > 0) {  	_motherTextEditorControl.Font = new Font (_motherTextEditorControl.Font.Name' _motherTextEditorControl.Font.Size + 1);  } else {  	_motherTextEditorControl.Font = new Font (_motherTextEditorControl.Font.Name' Math.Max (6' _motherTextEditorControl.Font.Size - 1));  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,HandleMouseWheel,The following statement contains a magic number: _motherTextEditorControl.Font = new Font (_motherTextEditorControl.Font.Name' Math.Max (6' _motherTextEditorControl.Font.Size - 1));  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,ScrollTo,The following statement contains a magic number: if (line - _scrollMarginHeight + 3 < curLineMin) {  	_vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight + 3) * _textArea.TextView.LineHeight));  	VScrollBarValueChanged (this' EventArgs.Empty);  } else {  	int curLineMax = curLineMin + _textArea.TextView.NumberOfVisibleLines;  	if (line + _scrollMarginHeight - 1 > curLineMax) {  		if (_textArea.TextView.NumberOfVisibleLines == 1) {  			_vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight - 1) * _textArea.TextView.LineHeight));  		} else {  			_vScrollBar.Value = Math.Min (_vScrollBar.Maximum' (line - _textArea.TextView.NumberOfVisibleLines + _scrollMarginHeight - 1) * _textArea.TextView.LineHeight);  		}  		VScrollBarValueChanged (this' EventArgs.Empty);  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,ScrollTo,The following statement contains a magic number: if (line - _scrollMarginHeight + 3 < curLineMin) {  	_vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight + 3) * _textArea.TextView.LineHeight));  	VScrollBarValueChanged (this' EventArgs.Empty);  } else {  	int curLineMax = curLineMin + _textArea.TextView.NumberOfVisibleLines;  	if (line + _scrollMarginHeight - 1 > curLineMax) {  		if (_textArea.TextView.NumberOfVisibleLines == 1) {  			_vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight - 1) * _textArea.TextView.LineHeight));  		} else {  			_vScrollBar.Value = Math.Min (_vScrollBar.Maximum' (line - _textArea.TextView.NumberOfVisibleLines + _scrollMarginHeight - 1) * _textArea.TextView.LineHeight);  		}  		VScrollBarValueChanged (this' EventArgs.Empty);  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,ScrollTo,The following statement contains a magic number: _vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight + 3) * _textArea.TextView.LineHeight));  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,CenterViewOn,The following statement contains a magic number: line -= _textArea.TextView.NumberOfVisibleLines / 2;  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,CenterViewOn,The following statement contains a magic number: if (Math.Abs (curLineMin - line) > treshold) {  	// scroll:  	_vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight + 3) * _textArea.TextView.LineHeight));  	VScrollBarValueChanged (this' EventArgs.Empty);  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,CenterViewOn,The following statement contains a magic number: _vScrollBar.Value = Math.Max (0' Math.Min (_vScrollBar.Maximum' (line - _scrollMarginHeight + 3) * _textArea.TextView.LineHeight));  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,WndProc,The following statement contains a magic number: if (m.Msg == 0x007B) {  	// handle WM_CONTEXTMENU  	if (ContextMenuRequest != null) {  		long lParam = m.LParam.ToInt64 ();  		int x = unchecked((short)(lParam & 0xffff));  		int y = unchecked((short)((lParam & 0xffff0000) >> 16));  		if (x == -1 && y == -1) {  			Point pos = Caret.ScreenPosition;  			ContextMenuRequest (this' new MouseEventArgs (MouseButtons.None' 0' pos.X' pos.Y + _textArea.TextView.LineHeight' 0));  		} else {  			Point pos = PointToClient (new Point (x' y));  			ContextMenuRequest (this' new MouseEventArgs (MouseButtons.Right' 1' pos.X' pos.Y' 0));  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaControl.cs,WndProc,The following statement contains a magic number: if (ContextMenuRequest != null) {  	long lParam = m.LParam.ToInt64 ();  	int x = unchecked((short)(lParam & 0xffff));  	int y = unchecked((short)((lParam & 0xffff0000) >> 16));  	if (x == -1 && y == -1) {  		Point pos = Caret.ScreenPosition;  		ContextMenuRequest (this' new MouseEventArgs (MouseButtons.None' 0' pos.X' pos.Y + _textArea.TextView.LineHeight' 0));  	} else {  		Point pos = PointToClient (new Point (x' y));  		ContextMenuRequest (this' new MouseEventArgs (MouseButtons.Right' 1' pos.X' pos.Y' 0));  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnToolTipRequest,The following statement contains a magic number: if (fold != null && fold.IsFolded) {  	StringBuilder sb = new StringBuilder (fold.InnerText);  	// Skip leading newlines  	int i = 0;  	while (sb [i] == '\r' || sb [i] == '\n')  		i++;  	if (i > 0)  		sb.Remove (0' i);  	// max 10 lines  	int endLines = 0;  	for (i = 0; i < sb.Length; ++i) {  		if (sb [i] == '\n') {  			++endLines;  			if (endLines >= 10) {  				sb.Remove (i + 1' sb.Length - i - 1);  				sb.Append (Environment.NewLine);  				sb.Append ("...");  				break;  			}  		}  	}  	sb.Replace ("\t"' "    ");  	e.ShowToolTip (sb.ToString ());  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnToolTipRequest,The following statement contains a magic number: for (i = 0; i < sb.Length; ++i) {  	if (sb [i] == '\n') {  		++endLines;  		if (endLines >= 10) {  			sb.Remove (i + 1' sb.Length - i - 1);  			sb.Append (Environment.NewLine);  			sb.Append ("...");  			break;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnToolTipRequest,The following statement contains a magic number: if (sb [i] == '\n') {  	++endLines;  	if (endLines >= 10) {  		sb.Remove (i + 1' sb.Length - i - 1);  		sb.Append (Environment.NewLine);  		sb.Append ("...");  		break;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnToolTipRequest,The following statement contains a magic number: if (endLines >= 10) {  	sb.Remove (i + 1' sb.Length - i - 1);  	sb.Append (Environment.NewLine);  	sb.Append ("...");  	break;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,TextAreaMouseMove,The following statement contains a magic number: if (_clickedOnSelectedText) {  	if (Math.Abs (_mouseDownPosition.X - e.X) >= SystemInformation.DragSize.Width / 2 || Math.Abs (_mouseDownPosition.Y - e.Y) >= SystemInformation.DragSize.Height / 2) {  		_clickedOnSelectedText = false;  		ISelection selection = _textArea.SelectionManager.GetSelectionAt (_textArea.Caret.Offset);  		if (selection != null) {  			string text = selection.SelectedText;  			bool isReadOnly = SelectionManager.SelectionIsReadOnly (_textArea.Document' selection);  			if (!String.IsNullOrEmpty (text)) {  				DataObject dataObject = new DataObject ();  				dataObject.SetData (DataFormats.UnicodeText' true' text);  				dataObject.SetData (selection);  				_doDragDrop = true;  				_textArea.DoDragDrop (dataObject' isReadOnly ? DragDropEffects.All & ~DragDropEffects.Move : DragDropEffects.All);  			}  		}  	}  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,TextAreaMouseMove,The following statement contains a magic number: if (_clickedOnSelectedText) {  	if (Math.Abs (_mouseDownPosition.X - e.X) >= SystemInformation.DragSize.Width / 2 || Math.Abs (_mouseDownPosition.Y - e.Y) >= SystemInformation.DragSize.Height / 2) {  		_clickedOnSelectedText = false;  		ISelection selection = _textArea.SelectionManager.GetSelectionAt (_textArea.Caret.Offset);  		if (selection != null) {  			string text = selection.SelectedText;  			bool isReadOnly = SelectionManager.SelectionIsReadOnly (_textArea.Document' selection);  			if (!String.IsNullOrEmpty (text)) {  				DataObject dataObject = new DataObject ();  				dataObject.SetData (DataFormats.UnicodeText' true' text);  				dataObject.SetData (selection);  				_doDragDrop = true;  				_textArea.DoDragDrop (dataObject' isReadOnly ? DragDropEffects.All & ~DragDropEffects.Move : DragDropEffects.All);  			}  		}  	}  	return;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,TextAreaMouseMove,The following statement contains a magic number: if (Math.Abs (_mouseDownPosition.X - e.X) >= SystemInformation.DragSize.Width / 2 || Math.Abs (_mouseDownPosition.Y - e.Y) >= SystemInformation.DragSize.Height / 2) {  	_clickedOnSelectedText = false;  	ISelection selection = _textArea.SelectionManager.GetSelectionAt (_textArea.Caret.Offset);  	if (selection != null) {  		string text = selection.SelectedText;  		bool isReadOnly = SelectionManager.SelectionIsReadOnly (_textArea.Document' selection);  		if (!String.IsNullOrEmpty (text)) {  			DataObject dataObject = new DataObject ();  			dataObject.SetData (DataFormats.UnicodeText' true' text);  			dataObject.SetData (selection);  			_doDragDrop = true;  			_textArea.DoDragDrop (dataObject' isReadOnly ? DragDropEffects.All & ~DragDropEffects.Move : DragDropEffects.All);  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,TextAreaMouseMove,The following statement contains a magic number: if (Math.Abs (_mouseDownPosition.X - e.X) >= SystemInformation.DragSize.Width / 2 || Math.Abs (_mouseDownPosition.Y - e.Y) >= SystemInformation.DragSize.Height / 2) {  	_clickedOnSelectedText = false;  	ISelection selection = _textArea.SelectionManager.GetSelectionAt (_textArea.Caret.Offset);  	if (selection != null) {  		string text = selection.SelectedText;  		bool isReadOnly = SelectionManager.SelectionIsReadOnly (_textArea.Document' selection);  		if (!String.IsNullOrEmpty (text)) {  			DataObject dataObject = new DataObject ();  			dataObject.SetData (DataFormats.UnicodeText' true' text);  			dataObject.SetData (selection);  			_doDragDrop = true;  			_textArea.DoDragDrop (dataObject' isReadOnly ? DragDropEffects.All & ~DragDropEffects.Move : DragDropEffects.All);  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnMouseDown,The following statement contains a magic number: if (_textArea.TextView.DrawingPosition.Contains (mousepos.X' mousepos.Y)) {  	_gotMouseDown = true;  	_textArea.SelectionManager.SelectFrom.Where = WhereFrom.TextArea;  	_button = e.Button;  	// double-click  	if (_button == MouseButtons.Left && e.Clicks == 2) {  		int deltaX = Math.Abs (_lastMouseDownPosition.X - e.X);  		int deltaY = Math.Abs (_lastMouseDownPosition.Y - e.Y);  		if (deltaX <= SystemInformation.DoubleClickSize.Width && deltaY <= SystemInformation.DoubleClickSize.Height) {  			DoubleClickSelectionExtend ();  			_lastMouseDownPosition = new Point (e.X' e.Y);  			if (_textArea.SelectionManager.SelectFrom.Where == WhereFrom.Gutter) {  				if (!_minSelection.IsEmpty && !_maxSelection.IsEmpty && _textArea.SelectionManager.Selections.Count > 0) {  					_textArea.SelectionManager.Selections [0].StartPosition = _minSelection;  					_textArea.SelectionManager.Selections [0].EndPosition = _maxSelection;  					_textArea.SelectionManager.SelectionStart = _minSelection;  					_minSelection = TextLocation.Empty;  					_maxSelection = TextLocation.Empty;  				}  			}  			return;  		}  	}  	_minSelection = TextLocation.Empty;  	_maxSelection = TextLocation.Empty;  	_lastMouseDownPosition = _mouseDownPosition = new Point (e.X' e.Y);  	if (_button == MouseButtons.Left) {  		Fold marker = _textArea.TextView.GetFoldMarkerFromPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y);  		if (marker != null && marker.IsFolded) {  			if (_textArea.SelectionManager.HasSomethingSelected)  				_clickedOnSelectedText = true;  			TextLocation startLocation = new TextLocation (marker.StartColumn' marker.StartLine);  			TextLocation endLocation = new TextLocation (marker.EndColumn' marker.EndLine);  			_textArea.SelectionManager.SetSelection (new DefaultSelection (_textArea.TextView.Document' startLocation' endLocation));  			_textArea.Caret.Position = startLocation;  			_textArea.SetDesiredColumn ();  			_textArea.Focus ();  			return;  		}  		if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift) {  			ExtendSelectionToMouse ();  		} else {  			TextLocation realmousepos = _textArea.TextView.GetLogicalPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y);  			_clickedOnSelectedText = false;  			int offset = _textArea.Document.PositionToOffset (realmousepos);  			if (_textArea.SelectionManager.HasSomethingSelected && _textArea.SelectionManager.IsSelected (offset)) {  				_clickedOnSelectedText = true;  			} else {  				_textArea.SelectionManager.ClearSelection ();  				if (mousepos.Y > 0 && mousepos.Y < _textArea.TextView.DrawingPosition.Height) {  					TextLocation pos = new TextLocation {  						X = realmousepos.X'  						Y = Math.Min (_textArea.Document.TotalNumberOfLines - 1' realmousepos.Y)'  					};  					_textArea.Caret.Position = pos;  					_textArea.SetDesiredColumn ();  				}  			}  		}  	} else if (_button == MouseButtons.Right) {  		// Rightclick sets the cursor to the click position unless  		// the previous selection was clicked  		TextLocation realmousepos = _textArea.TextView.GetLogicalPosition (mousepos.X - _textArea.TextView.DrawingPosition.X' mousepos.Y - _textArea.TextView.DrawingPosition.Y);  		int offset = _textArea.Document.PositionToOffset (realmousepos);  		if (!_textArea.SelectionManager.HasSomethingSelected || !_textArea.SelectionManager.IsSelected (offset)) {  			_textArea.SelectionManager.ClearSelection ();  			if (mousepos.Y > 0 && mousepos.Y < _textArea.TextView.DrawingPosition.Height) {  				TextLocation pos = new TextLocation {  					X = realmousepos.X'  					Y = Math.Min (_textArea.Document.TotalNumberOfLines - 1' realmousepos.Y)'  				};  				_textArea.Caret.Position = pos;  				_textArea.SetDesiredColumn ();  			}  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,OnMouseDown,The following statement contains a magic number: if (_button == MouseButtons.Left && e.Clicks == 2) {  	int deltaX = Math.Abs (_lastMouseDownPosition.X - e.X);  	int deltaY = Math.Abs (_lastMouseDownPosition.Y - e.Y);  	if (deltaX <= SystemInformation.DoubleClickSize.Width && deltaY <= SystemInformation.DoubleClickSize.Height) {  		DoubleClickSelectionExtend ();  		_lastMouseDownPosition = new Point (e.X' e.Y);  		if (_textArea.SelectionManager.SelectFrom.Where == WhereFrom.Gutter) {  			if (!_minSelection.IsEmpty && !_maxSelection.IsEmpty && _textArea.SelectionManager.Selections.Count > 0) {  				_textArea.SelectionManager.Selections [0].StartPosition = _minSelection;  				_textArea.SelectionManager.Selections [0].EndPosition = _maxSelection;  				_textArea.SelectionManager.SelectionStart = _minSelection;  				_minSelection = TextLocation.Empty;  				_maxSelection = TextLocation.Empty;  			}  		}  		return;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: foldMarkerSize -= (foldMarkerSize) % 2;  
Magic Number,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: if (isFoldStart) {  	bool isVisible = true;  	bool moreLinedOpenFold = false;  	foreach (Fold fold in foldingsWithStart) {  		if (fold.IsFolded)  			isVisible = false;  		else  			moreLinedOpenFold = fold.EndLine > fold.StartLine;  	}  	bool isFoldEndFromUpperFold = false;  	foreach (Fold fold in foldingsWithEnd)  		if (fold.EndLine > fold.StartLine && !fold.IsFolded)  			isFoldEndFromUpperFold = true;  	RectangleF foldMarkerRectangle = new RectangleF (drawingRectangle.X + (drawingRectangle.Width - foldMarkerSize) / 2' foldMarkerYPos' foldMarkerSize' foldMarkerSize);  	DrawFolds (g' foldMarkerRectangle' isVisible' isStartSelected);  	// draw line above fold marker  	if (isBetween || isFoldEndFromUpperFold) {  		Pen pen = BrushRegistry.GetPen (isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color);  		g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' foldMarkerYPos - 1);  	}  	// draw line below fold marker  	if (isBetween || moreLinedOpenFold) {  		bool isSelected = isEndSelected || (isStartSelected && isVisible) || isBetweenSelected;  		Color color = (isSelected) ? selectedFoldLineColor.Color : foldLineColor.Color;  		Pen pen = BrushRegistry.GetPen (color);  		g.DrawLine (pen' xPos' foldMarkerYPos + foldMarkerSize + 1' xPos' drawingRectangle.Bottom);  	}  } else if (isFoldEnd) {  	int midy = drawingRectangle.Top + drawingRectangle.Height / 2;  	// draw fold end marker  	Color color = isEndSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' midy' xPos + foldMarkerSize / 2' midy);  	// draw line above fold end marker  	// must be drawn after fold marker because it might have a different color than the fold marker  	color = (isBetweenSelected || isEndSelected) ? selectedFoldLineColor.Color : foldLineColor.Color;  	pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' midy);  	// draw line below fold end marker  	if (isBetween) {  		color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  		pen = BrushRegistry.GetPen (color);  		g.DrawLine (pen' xPos' midy + 1' xPos' drawingRectangle.Bottom);  	}  } else if (isBetween) {  	// just draw the line :)  	Color color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' drawingRectangle.Bottom);  }  
Magic Number,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: if (isFoldStart) {  	bool isVisible = true;  	bool moreLinedOpenFold = false;  	foreach (Fold fold in foldingsWithStart) {  		if (fold.IsFolded)  			isVisible = false;  		else  			moreLinedOpenFold = fold.EndLine > fold.StartLine;  	}  	bool isFoldEndFromUpperFold = false;  	foreach (Fold fold in foldingsWithEnd)  		if (fold.EndLine > fold.StartLine && !fold.IsFolded)  			isFoldEndFromUpperFold = true;  	RectangleF foldMarkerRectangle = new RectangleF (drawingRectangle.X + (drawingRectangle.Width - foldMarkerSize) / 2' foldMarkerYPos' foldMarkerSize' foldMarkerSize);  	DrawFolds (g' foldMarkerRectangle' isVisible' isStartSelected);  	// draw line above fold marker  	if (isBetween || isFoldEndFromUpperFold) {  		Pen pen = BrushRegistry.GetPen (isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color);  		g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' foldMarkerYPos - 1);  	}  	// draw line below fold marker  	if (isBetween || moreLinedOpenFold) {  		bool isSelected = isEndSelected || (isStartSelected && isVisible) || isBetweenSelected;  		Color color = (isSelected) ? selectedFoldLineColor.Color : foldLineColor.Color;  		Pen pen = BrushRegistry.GetPen (color);  		g.DrawLine (pen' xPos' foldMarkerYPos + foldMarkerSize + 1' xPos' drawingRectangle.Bottom);  	}  } else if (isFoldEnd) {  	int midy = drawingRectangle.Top + drawingRectangle.Height / 2;  	// draw fold end marker  	Color color = isEndSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' midy' xPos + foldMarkerSize / 2' midy);  	// draw line above fold end marker  	// must be drawn after fold marker because it might have a different color than the fold marker  	color = (isBetweenSelected || isEndSelected) ? selectedFoldLineColor.Color : foldLineColor.Color;  	pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' midy);  	// draw line below fold end marker  	if (isBetween) {  		color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  		pen = BrushRegistry.GetPen (color);  		g.DrawLine (pen' xPos' midy + 1' xPos' drawingRectangle.Bottom);  	}  } else if (isBetween) {  	// just draw the line :)  	Color color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' drawingRectangle.Bottom);  }  
Magic Number,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: if (isFoldStart) {  	bool isVisible = true;  	bool moreLinedOpenFold = false;  	foreach (Fold fold in foldingsWithStart) {  		if (fold.IsFolded)  			isVisible = false;  		else  			moreLinedOpenFold = fold.EndLine > fold.StartLine;  	}  	bool isFoldEndFromUpperFold = false;  	foreach (Fold fold in foldingsWithEnd)  		if (fold.EndLine > fold.StartLine && !fold.IsFolded)  			isFoldEndFromUpperFold = true;  	RectangleF foldMarkerRectangle = new RectangleF (drawingRectangle.X + (drawingRectangle.Width - foldMarkerSize) / 2' foldMarkerYPos' foldMarkerSize' foldMarkerSize);  	DrawFolds (g' foldMarkerRectangle' isVisible' isStartSelected);  	// draw line above fold marker  	if (isBetween || isFoldEndFromUpperFold) {  		Pen pen = BrushRegistry.GetPen (isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color);  		g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' foldMarkerYPos - 1);  	}  	// draw line below fold marker  	if (isBetween || moreLinedOpenFold) {  		bool isSelected = isEndSelected || (isStartSelected && isVisible) || isBetweenSelected;  		Color color = (isSelected) ? selectedFoldLineColor.Color : foldLineColor.Color;  		Pen pen = BrushRegistry.GetPen (color);  		g.DrawLine (pen' xPos' foldMarkerYPos + foldMarkerSize + 1' xPos' drawingRectangle.Bottom);  	}  } else if (isFoldEnd) {  	int midy = drawingRectangle.Top + drawingRectangle.Height / 2;  	// draw fold end marker  	Color color = isEndSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' midy' xPos + foldMarkerSize / 2' midy);  	// draw line above fold end marker  	// must be drawn after fold marker because it might have a different color than the fold marker  	color = (isBetweenSelected || isEndSelected) ? selectedFoldLineColor.Color : foldLineColor.Color;  	pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' midy);  	// draw line below fold end marker  	if (isBetween) {  		color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  		pen = BrushRegistry.GetPen (color);  		g.DrawLine (pen' xPos' midy + 1' xPos' drawingRectangle.Bottom);  	}  } else if (isBetween) {  	// just draw the line :)  	Color color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' drawingRectangle.Bottom);  }  
Magic Number,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: if (isFoldEnd) {  	int midy = drawingRectangle.Top + drawingRectangle.Height / 2;  	// draw fold end marker  	Color color = isEndSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' midy' xPos + foldMarkerSize / 2' midy);  	// draw line above fold end marker  	// must be drawn after fold marker because it might have a different color than the fold marker  	color = (isBetweenSelected || isEndSelected) ? selectedFoldLineColor.Color : foldLineColor.Color;  	pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' midy);  	// draw line below fold end marker  	if (isBetween) {  		color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  		pen = BrushRegistry.GetPen (color);  		g.DrawLine (pen' xPos' midy + 1' xPos' drawingRectangle.Bottom);  	}  } else if (isBetween) {  	// just draw the line :)  	Color color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' drawingRectangle.Bottom);  }  
Magic Number,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: if (isFoldEnd) {  	int midy = drawingRectangle.Top + drawingRectangle.Height / 2;  	// draw fold end marker  	Color color = isEndSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' midy' xPos + foldMarkerSize / 2' midy);  	// draw line above fold end marker  	// must be drawn after fold marker because it might have a different color than the fold marker  	color = (isBetweenSelected || isEndSelected) ? selectedFoldLineColor.Color : foldLineColor.Color;  	pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' midy);  	// draw line below fold end marker  	if (isBetween) {  		color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  		pen = BrushRegistry.GetPen (color);  		g.DrawLine (pen' xPos' midy + 1' xPos' drawingRectangle.Bottom);  	}  } else if (isBetween) {  	// just draw the line :)  	Color color = isBetweenSelected ? selectedFoldLineColor.Color : foldLineColor.Color;  	Pen pen = BrushRegistry.GetPen (color);  	g.DrawLine (pen' xPos' drawingRectangle.Top' xPos' drawingRectangle.Bottom);  }  
Magic Number,DigitalRune.Windows.TextEditor,FoldMargin,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: g.DrawLine (pen' xPos' midy' xPos + foldMarkerSize / 2' midy);  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaDragDropHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaDragDropHandler.cs,GetDragDropEffect,The following statement contains a magic number: if ((e.AllowedEffect & DragDropEffects.Move) > 0 && (e.AllowedEffect & DragDropEffects.Copy) > 0) {  	return (e.KeyState & 8) > 0 ? DragDropEffects.Copy : DragDropEffects.Move;  } else if ((e.AllowedEffect & DragDropEffects.Move) > 0) {  	return DragDropEffects.Move;  } else if ((e.AllowedEffect & DragDropEffects.Copy) > 0) {  	return DragDropEffects.Copy;  }  
Magic Number,DigitalRune.Windows.TextEditor,TextAreaDragDropHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaDragDropHandler.cs,GetDragDropEffect,The following statement contains a magic number: return (e.KeyState & 8) > 0 ? DragDropEffects.Copy : DragDropEffects.Move;  
Magic Number,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,HRuler,The following statement contains a magic number: Height = textSize.Height * 5 / 4;  
Magic Number,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,HRuler,The following statement contains a magic number: Height = textSize.Height * 5 / 4;  
Magic Number,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,OnPaint,The following statement contains a magic number: for (float x = _textArea.TextView.DrawingPosition.Left; x < _textArea.TextView.DrawingPosition.Right; x += columnWidth' ++column) {  	int lineHeight = (column % 5 == 0) ? Height / 3 : Height / 5;  	if (column % 10 == 0) {  		string columnNumber = column.ToString ();  		Size textSize = TextRenderer.MeasureText (columnNumber' Font);  		Rectangle textRectangle = new Rectangle ((int)x - textSize.Width / 2' 0' textSize.Width' textSize.Height);  		TextRenderer.DrawText (g' columnNumber' Font' textRectangle' Color.Black' textFormat);  	}  	g.DrawLine (Pens.Black' (int)x' Bottom - 1' (int)x' Bottom - lineHeight);  }  
Magic Number,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,OnPaint,The following statement contains a magic number: for (float x = _textArea.TextView.DrawingPosition.Left; x < _textArea.TextView.DrawingPosition.Right; x += columnWidth' ++column) {  	int lineHeight = (column % 5 == 0) ? Height / 3 : Height / 5;  	if (column % 10 == 0) {  		string columnNumber = column.ToString ();  		Size textSize = TextRenderer.MeasureText (columnNumber' Font);  		Rectangle textRectangle = new Rectangle ((int)x - textSize.Width / 2' 0' textSize.Width' textSize.Height);  		TextRenderer.DrawText (g' columnNumber' Font' textRectangle' Color.Black' textFormat);  	}  	g.DrawLine (Pens.Black' (int)x' Bottom - 1' (int)x' Bottom - lineHeight);  }  
Magic Number,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,OnPaint,The following statement contains a magic number: for (float x = _textArea.TextView.DrawingPosition.Left; x < _textArea.TextView.DrawingPosition.Right; x += columnWidth' ++column) {  	int lineHeight = (column % 5 == 0) ? Height / 3 : Height / 5;  	if (column % 10 == 0) {  		string columnNumber = column.ToString ();  		Size textSize = TextRenderer.MeasureText (columnNumber' Font);  		Rectangle textRectangle = new Rectangle ((int)x - textSize.Width / 2' 0' textSize.Width' textSize.Height);  		TextRenderer.DrawText (g' columnNumber' Font' textRectangle' Color.Black' textFormat);  	}  	g.DrawLine (Pens.Black' (int)x' Bottom - 1' (int)x' Bottom - lineHeight);  }  
Magic Number,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,OnPaint,The following statement contains a magic number: for (float x = _textArea.TextView.DrawingPosition.Left; x < _textArea.TextView.DrawingPosition.Right; x += columnWidth' ++column) {  	int lineHeight = (column % 5 == 0) ? Height / 3 : Height / 5;  	if (column % 10 == 0) {  		string columnNumber = column.ToString ();  		Size textSize = TextRenderer.MeasureText (columnNumber' Font);  		Rectangle textRectangle = new Rectangle ((int)x - textSize.Width / 2' 0' textSize.Width' textSize.Height);  		TextRenderer.DrawText (g' columnNumber' Font' textRectangle' Color.Black' textFormat);  	}  	g.DrawLine (Pens.Black' (int)x' Bottom - 1' (int)x' Bottom - lineHeight);  }  
Magic Number,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,OnPaint,The following statement contains a magic number: for (float x = _textArea.TextView.DrawingPosition.Left; x < _textArea.TextView.DrawingPosition.Right; x += columnWidth' ++column) {  	int lineHeight = (column % 5 == 0) ? Height / 3 : Height / 5;  	if (column % 10 == 0) {  		string columnNumber = column.ToString ();  		Size textSize = TextRenderer.MeasureText (columnNumber' Font);  		Rectangle textRectangle = new Rectangle ((int)x - textSize.Width / 2' 0' textSize.Width' textSize.Height);  		TextRenderer.DrawText (g' columnNumber' Font' textRectangle' Color.Black' textFormat);  	}  	g.DrawLine (Pens.Black' (int)x' Bottom - 1' (int)x' Bottom - lineHeight);  }  
Magic Number,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,OnPaint,The following statement contains a magic number: if (column % 10 == 0) {  	string columnNumber = column.ToString ();  	Size textSize = TextRenderer.MeasureText (columnNumber' Font);  	Rectangle textRectangle = new Rectangle ((int)x - textSize.Width / 2' 0' textSize.Width' textSize.Height);  	TextRenderer.DrawText (g' columnNumber' Font' textRectangle' Color.Black' textFormat);  }  
Magic Number,DigitalRune.Windows.TextEditor,HRuler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\HRuler.cs,OnPaint,The following statement contains a magic number: if (column % 10 == 0) {  	string columnNumber = column.ToString ();  	Size textSize = TextRenderer.MeasureText (columnNumber' Font);  	Rectangle textRectangle = new Rectangle ((int)x - textSize.Width / 2' 0' textSize.Width' textSize.Height);  	TextRenderer.DrawText (g' columnNumber' Font' textRectangle' Color.Black' textFormat);  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionWindow.cs,AbstractCompletionWindow,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT) {  	Version ver = Environment.OSVersion.Version;  	if (ver.Major > 5 || ver.Major == 5 && ver.Minor >= 1) {  		_addDropShadow = true;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionWindow.cs,AbstractCompletionWindow,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT) {  	Version ver = Environment.OSVersion.Version;  	if (ver.Major > 5 || ver.Major == 5 && ver.Minor >= 1) {  		_addDropShadow = true;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionWindow.cs,AbstractCompletionWindow,The following statement contains a magic number: if (ver.Major > 5 || ver.Major == 5 && ver.Minor >= 1) {  	_addDropShadow = true;  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionWindow.cs,AbstractCompletionWindow,The following statement contains a magic number: if (ver.Major > 5 || ver.Major == 5 && ver.Minor >= 1) {  	_addDropShadow = true;  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionWindow.cs,OnKeyDown,The following statement contains a magic number: if (e.KeyCode == Keys.ControlKey && Visible) {  	Opacity = 0.1;  	OnOpacityChanged ();  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionWindow.cs,OnKeyDown,The following statement contains a magic number: Opacity = 0.1;  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: for (int i = 0; i < _filteredCompletionData.Count; ++i) {  	string itemText = _filteredCompletionData [i].Text;  	if (itemText.StartsWith (startText' StringComparison.InvariantCultureIgnoreCase)) {  		double priority = _filteredCompletionData [i].Priority;  		int quality;  		if (String.Compare (itemText' startText' StringComparison.InvariantCultureIgnoreCase) == 0) {  			if (String.Compare (itemText' startText' StringComparison.InvariantCulture) == 0) {  				// full match case-sensitive  				quality = 3;  			} else {  				// full match case-insensitive  				quality = 2;  			}  		} else if (itemText.StartsWith (startText' StringComparison.InvariantCulture)) {  			// match start case-sensitive  			quality = 1;  		} else {  			// match start case-insensitive  			quality = 0;  		}  		bool useThisItem;  		if (bestQuality < quality) {  			useThisItem = true;  		} else {  			if (bestIndex == _selectedIndex) {  				useThisItem = false;  			} else if (i == _selectedIndex) {  				useThisItem = (bestQuality == quality);  			} else {  				useThisItem = (bestQuality == quality && bestPriority < priority);  			}  		}  		if (useThisItem) {  			bestIndex = i;  			bestPriority = priority;  			bestQuality = quality;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: for (int i = 0; i < _filteredCompletionData.Count; ++i) {  	string itemText = _filteredCompletionData [i].Text;  	if (itemText.StartsWith (startText' StringComparison.InvariantCultureIgnoreCase)) {  		double priority = _filteredCompletionData [i].Priority;  		int quality;  		if (String.Compare (itemText' startText' StringComparison.InvariantCultureIgnoreCase) == 0) {  			if (String.Compare (itemText' startText' StringComparison.InvariantCulture) == 0) {  				// full match case-sensitive  				quality = 3;  			} else {  				// full match case-insensitive  				quality = 2;  			}  		} else if (itemText.StartsWith (startText' StringComparison.InvariantCulture)) {  			// match start case-sensitive  			quality = 1;  		} else {  			// match start case-insensitive  			quality = 0;  		}  		bool useThisItem;  		if (bestQuality < quality) {  			useThisItem = true;  		} else {  			if (bestIndex == _selectedIndex) {  				useThisItem = false;  			} else if (i == _selectedIndex) {  				useThisItem = (bestQuality == quality);  			} else {  				useThisItem = (bestQuality == quality && bestPriority < priority);  			}  		}  		if (useThisItem) {  			bestIndex = i;  			bestPriority = priority;  			bestQuality = quality;  		}  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: if (itemText.StartsWith (startText' StringComparison.InvariantCultureIgnoreCase)) {  	double priority = _filteredCompletionData [i].Priority;  	int quality;  	if (String.Compare (itemText' startText' StringComparison.InvariantCultureIgnoreCase) == 0) {  		if (String.Compare (itemText' startText' StringComparison.InvariantCulture) == 0) {  			// full match case-sensitive  			quality = 3;  		} else {  			// full match case-insensitive  			quality = 2;  		}  	} else if (itemText.StartsWith (startText' StringComparison.InvariantCulture)) {  		// match start case-sensitive  		quality = 1;  	} else {  		// match start case-insensitive  		quality = 0;  	}  	bool useThisItem;  	if (bestQuality < quality) {  		useThisItem = true;  	} else {  		if (bestIndex == _selectedIndex) {  			useThisItem = false;  		} else if (i == _selectedIndex) {  			useThisItem = (bestQuality == quality);  		} else {  			useThisItem = (bestQuality == quality && bestPriority < priority);  		}  	}  	if (useThisItem) {  		bestIndex = i;  		bestPriority = priority;  		bestQuality = quality;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: if (itemText.StartsWith (startText' StringComparison.InvariantCultureIgnoreCase)) {  	double priority = _filteredCompletionData [i].Priority;  	int quality;  	if (String.Compare (itemText' startText' StringComparison.InvariantCultureIgnoreCase) == 0) {  		if (String.Compare (itemText' startText' StringComparison.InvariantCulture) == 0) {  			// full match case-sensitive  			quality = 3;  		} else {  			// full match case-insensitive  			quality = 2;  		}  	} else if (itemText.StartsWith (startText' StringComparison.InvariantCulture)) {  		// match start case-sensitive  		quality = 1;  	} else {  		// match start case-insensitive  		quality = 0;  	}  	bool useThisItem;  	if (bestQuality < quality) {  		useThisItem = true;  	} else {  		if (bestIndex == _selectedIndex) {  			useThisItem = false;  		} else if (i == _selectedIndex) {  			useThisItem = (bestQuality == quality);  		} else {  			useThisItem = (bestQuality == quality && bestPriority < priority);  		}  	}  	if (useThisItem) {  		bestIndex = i;  		bestPriority = priority;  		bestQuality = quality;  	}  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: if (String.Compare (itemText' startText' StringComparison.InvariantCultureIgnoreCase) == 0) {  	if (String.Compare (itemText' startText' StringComparison.InvariantCulture) == 0) {  		// full match case-sensitive  		quality = 3;  	} else {  		// full match case-insensitive  		quality = 2;  	}  } else if (itemText.StartsWith (startText' StringComparison.InvariantCulture)) {  	// match start case-sensitive  	quality = 1;  } else {  	// match start case-insensitive  	quality = 0;  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: if (String.Compare (itemText' startText' StringComparison.InvariantCultureIgnoreCase) == 0) {  	if (String.Compare (itemText' startText' StringComparison.InvariantCulture) == 0) {  		// full match case-sensitive  		quality = 3;  	} else {  		// full match case-insensitive  		quality = 2;  	}  } else if (itemText.StartsWith (startText' StringComparison.InvariantCulture)) {  	// match start case-sensitive  	quality = 1;  } else {  	// match start case-insensitive  	quality = 0;  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: if (String.Compare (itemText' startText' StringComparison.InvariantCulture) == 0) {  	// full match case-sensitive  	quality = 3;  } else {  	// full match case-insensitive  	quality = 2;  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: if (String.Compare (itemText' startText' StringComparison.InvariantCulture) == 0) {  	// full match case-sensitive  	quality = 3;  } else {  	// full match case-insensitive  	quality = 2;  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: quality = 3;  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: quality = 2;  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,OnPaint,The following statement contains a magic number: while (curItem < _filteredCompletionData.Count && yPos < Height) {  	RectangleF drawingBackground = new RectangleF (1' yPos' Width - 2' itemHeight);  	if (drawingBackground.IntersectsWith (pe.ClipRectangle)) {  		// draw Background  		Brush brush = (curItem == _selectedIndex) ? SystemBrushes.Highlight : SystemBrushes.Window;  		g.FillRectangle (brush' drawingBackground);  		// draw Icon  		int imageIndex = _filteredCompletionData [curItem].ImageIndex;  		if (_imageList != null && 0 <= imageIndex && imageIndex < _imageList.Images.Count)  			g.DrawImage (_imageList.Images [imageIndex]' new RectangleF (1' yPos' imageWidth' itemHeight));  		// draw text  		int xPos = imageWidth + 3;  		brush = (curItem == _selectedIndex) ? SystemBrushes.HighlightText : SystemBrushes.WindowText;  		g.DrawString (_filteredCompletionData [curItem].Text' Font' brush' xPos' yPos);  	}  	yPos += itemHeight;  	++curItem;  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,OnPaint,The following statement contains a magic number: while (curItem < _filteredCompletionData.Count && yPos < Height) {  	RectangleF drawingBackground = new RectangleF (1' yPos' Width - 2' itemHeight);  	if (drawingBackground.IntersectsWith (pe.ClipRectangle)) {  		// draw Background  		Brush brush = (curItem == _selectedIndex) ? SystemBrushes.Highlight : SystemBrushes.Window;  		g.FillRectangle (brush' drawingBackground);  		// draw Icon  		int imageIndex = _filteredCompletionData [curItem].ImageIndex;  		if (_imageList != null && 0 <= imageIndex && imageIndex < _imageList.Images.Count)  			g.DrawImage (_imageList.Images [imageIndex]' new RectangleF (1' yPos' imageWidth' itemHeight));  		// draw text  		int xPos = imageWidth + 3;  		brush = (curItem == _selectedIndex) ? SystemBrushes.HighlightText : SystemBrushes.WindowText;  		g.DrawString (_filteredCompletionData [curItem].Text' Font' brush' xPos' yPos);  	}  	yPos += itemHeight;  	++curItem;  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,OnPaint,The following statement contains a magic number: if (drawingBackground.IntersectsWith (pe.ClipRectangle)) {  	// draw Background  	Brush brush = (curItem == _selectedIndex) ? SystemBrushes.Highlight : SystemBrushes.Window;  	g.FillRectangle (brush' drawingBackground);  	// draw Icon  	int imageIndex = _filteredCompletionData [curItem].ImageIndex;  	if (_imageList != null && 0 <= imageIndex && imageIndex < _imageList.Images.Count)  		g.DrawImage (_imageList.Images [imageIndex]' new RectangleF (1' yPos' imageWidth' itemHeight));  	// draw text  	int xPos = imageWidth + 3;  	brush = (curItem == _selectedIndex) ? SystemBrushes.HighlightText : SystemBrushes.WindowText;  	g.DrawString (_filteredCompletionData [curItem].Text' Font' brush' xPos' yPos);  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionListView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionListView.cs,OnMouseDown,The following statement contains a magic number: while (curItem < _filteredCompletionData.Count && yPos < Height) {  	RectangleF drawingBackground = new RectangleF (1' yPos' Width - 2' itemHeight);  	if (drawingBackground.Contains (e.X' e.Y)) {  		SelectItem (curItem);  		break;  	}  	yPos += itemHeight;  	++curItem;  }  
Magic Number,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,SetDeclarationViewLocation,The following statement contains a magic number: if (rightSpace * 2 > leftSpace) {  	_declarationViewWindow.FixedWidth = false;  	pos = new Point (Bounds.Right' Bounds.Top);  	if (_declarationViewWindow.Location != pos) {  		_declarationViewWindow.Location = pos;  	}  } else {  	_declarationViewWindow.Width = _declarationViewWindow.GetRequiredLeftHandSideWidth (new Point (Bounds.Left' Bounds.Top));  	_declarationViewWindow.FixedWidth = true;  	if (Bounds.Left < _declarationViewWindow.Width) {  		pos = new Point (0' Bounds.Top);  	} else {  		pos = new Point (Bounds.Left - _declarationViewWindow.Width' Bounds.Top);  	}  	if (_declarationViewWindow.Location != pos) {  		_declarationViewWindow.Location = pos;  	}  	_declarationViewWindow.Refresh ();  }  
Magic Number,DigitalRune.Windows.TextEditor.Selection,ColumnRange,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Selection\ColumnRange.cs,GetHashCode,The following statement contains a magic number: return _startColumn + (_endColumn << 16);  
Magic Number,DigitalRune.Windows.TextEditor.Properties,DefaultTextEditorProperties,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\DefaultTextEditorProperties.cs,DefaultTextEditorProperties,The following statement contains a magic number: if (_defaultFont == null)  	_defaultFont = new Font ("Courier New"' 10);  
Magic Number,DigitalRune.Windows.TextEditor.Properties,DefaultTextEditorProperties,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\DefaultTextEditorProperties.cs,DefaultTextEditorProperties,The following statement contains a magic number: _defaultFont = new Font ("Courier New"' 10);  
Missing Default,DigitalRune.Windows.TextEditor.Actions,Tab,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,InsertTabAtCaretPosition,The following switch statement is missing a default case: switch (textArea.Caret.CaretMode) {  case CaretMode.InsertMode:  	textArea.InsertString (GetIndentationString (textArea.Document' textArea));  	break;  case CaretMode.OverwriteMode:  	string indentStr = GetIndentationString (textArea.Document' textArea);  	textArea.ReplaceChar (indentStr [0]);  	if (indentStr.Length > 1) {  		textArea.InsertString (indentStr.Substring (1));  	}  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Actions,ToggleEditMode,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Actions\MiscActions.cs,Execute,The following switch statement is missing a default case: switch (textArea.Caret.CaretMode) {  case CaretMode.InsertMode:  	textArea.Caret.CaretMode = CaretMode.OverwriteMode;  	break;  case CaretMode.OverwriteMode:  	textArea.Caret.CaretMode = CaretMode.InsertMode;  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Document,LineManager,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\LineManager\LineManager.cs,NextDelimiter,The following switch statement is missing a default case: switch (text [i]) {  case '\r':  	if (i + 1 < text.Length) {  		if (text [i + 1] == '\n') {  			_delimiterSegment.Offset = i;  			_delimiterSegment.Length = 2;  			return _delimiterSegment;  		}  	}  	#if DATACONSISTENCYTEST  	Debug.Assert (false' "Found lone \\r' data consistency problems?");  	#endif  	goto case '\n';  case '\n':  	_delimiterSegment.Offset = i;  	_delimiterSegment.Length = 1;  	return _delimiterSegment;  }  
Missing Default,DigitalRune.Windows.TextEditor.Folding,XmlFoldingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Folding\XmlFoldingStrategy.cs,GenerateFolds,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.Element:  	if (!reader.IsEmptyElement) {  		XmlFoldStart newFoldStart = CreateElementFoldStart (reader);  		stack.Push (newFoldStart);  	}  	break;  case XmlNodeType.EndElement:  	XmlFoldStart foldStart = (XmlFoldStart)stack.Pop ();  	CreateElementFold (document' foldMarkers' reader' foldStart);  	break;  case XmlNodeType.Comment:  	CreateCommentFold (document' foldMarkers' reader);  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,NeedCurlyBracket,The following switch statement is missing a default case: switch (text [i]) {  case '\r':  case '\n':  	lineComment = false;  	inChar = false;  	if (!verbatim)  		inString = false;  	break;  case '/':  	if (blockComment) {  		Debug.Assert (i > 0);  		if (text [i - 1] == '*') {  			blockComment = false;  		}  	}  	if (!inString && !inChar && i + 1 < text.Length) {  		if (!blockComment && text [i + 1] == '/') {  			lineComment = true;  		}  		if (!lineComment && text [i + 1] == '*') {  			blockComment = true;  		}  	}  	break;  case '"':  	if (!(inChar || lineComment || blockComment)) {  		if (inString && verbatim) {  			if (i + 1 < text.Length && text [i + 1] == '"') {  				++i;  				// skip escaped quote  				inString = false;  				// let the string go on  			} else {  				verbatim = false;  			}  		} else if (!inString && i > 0 && text [i - 1] == '@') {  			verbatim = true;  		}  		inString = !inString;  	}  	break;  case '\'':  	if (!(inString || lineComment || blockComment)) {  		inChar = !inChar;  	}  	break;  case '{':  	if (!(inString || inChar || lineComment || blockComment)) {  		++curlyCounter;  	}  	break;  case '}':  	if (!(inString || inChar || lineComment || blockComment)) {  		--curlyCounter;  	}  	break;  case '\\':  	if ((inString && !verbatim) || inChar)  		++i;  	// skip next character  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,FormatLineInternal,The following switch statement is missing a default case: switch (ch) {  case '>':  	if (IsInsideDocumentationComment (textArea' curLine' cursorOffset)) {  		curLineText = textArea.Document.GetText (curLine);  		int column = textArea.Caret.Offset - curLine.Offset;  		int index = Math.Min (column - 1' curLineText.Length - 1);  		while (index >= 0 && curLineText [index] != '<') {  			--index;  			if (curLineText [index] == '/')  				return;  			// the tag was an end tag or already  		}  		if (index > 0) {  			StringBuilder commentBuilder = new StringBuilder ("");  			for (int i = index; i < curLineText.Length && i < column && !Char.IsWhiteSpace (curLineText [i]); ++i) {  				commentBuilder.Append (curLineText [i]);  			}  			string tag = commentBuilder.ToString ().Trim ();  			if (!tag.EndsWith (">")) {  				tag += ">";  			}  			if (!tag.StartsWith ("/")) {  				textArea.Document.Insert (textArea.Caret.Offset' "</" + tag.Substring (1));  			}  		}  	}  	break;  case ':':  case ')':  case ']':  case '}':  case '{':  	if (textArea.Document.TextEditorProperties.IndentStyle == IndentStyle.Smart) {  		textArea.Document.FormattingStrategy.IndentLine (textArea' lineNr);  	}  	break;  case '\n':  	string lineAboveText = lineAbove == null ? "" : textArea.Document.GetText (lineAbove);  	//// curLine might have some text which should be added to indentation  	curLineText = "";  	if (curLine.Length > 0) {  		curLineText = textArea.Document.GetText (curLine);  	}  	LineSegment nextLine = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetLineSegment (lineNr + 1) : null;  	string nextLineText = lineNr + 1 < textArea.Document.TotalNumberOfLines ? textArea.Document.GetText (nextLine) : "";  	int addCursorOffset = 0;  	if (lineAboveText.Trim ().StartsWith ("#region") && NeedEndregion (textArea.Document)) {  		textArea.Document.Insert (curLine.Offset' "#endregion");  		textArea.Caret.Column = IndentLine (textArea' lineNr);  		return;  	}  	if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  		if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  			// case for /* style comments  			int index = lineAboveText.IndexOf ("/*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline text  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  				textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  				return;  			}  			index = lineAboveText.IndexOf ("*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  				textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  				return;  			}  		} else {  			// don't handle // lines' because they're only one lined comments  			int indexAbove = lineAboveText.IndexOf ("///");  			int indexNext = nextLineText.IndexOf ("///");  			if (indexAbove > 0 && (indexNext != -1 || indexAbove + 4 < lineAbove.Length)) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < indexAbove; ++i) {  					indentation.Append (' ');  				}  				// adding curline text if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "/// " + curLineText);  				textArea.Caret.Column = indentation.Length + 4;  				return;  			}  			if (IsInNonVerbatimString (lineAboveText' curLineText)) {  				textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  				curLine = textArea.Document.GetLineSegment (lineNr);  				textArea.Document.Insert (curLine.Offset' "\"");  				addCursorOffset = 1;  			}  		}  	}  	int result = IndentLine (textArea' lineNr) + addCursorOffset;  	if (textArea.TextEditorProperties.AutoInsertCurlyBracket) {  		string oldLineText = TextHelper.GetLineAsString (textArea.Document' lineNr - 1);  		if (oldLineText.EndsWith ("{")) {  			if (NeedCurlyBracket (textArea.Document.TextContent)) {  				textArea.Document.Insert (curLine.Offset + curLine.Length' terminator + "}");  				IndentLine (textArea' lineNr + 1);  			}  		}  	}  	textArea.Caret.Column = result;  	return;  }  
Missing Default,DigitalRune.Windows.TextEditor.Formatting,CSharpFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\CSharpFormattingStrategy.cs,GetStartType,The following switch statement is missing a default case: switch (document.GetCharAt (i)) {  case '/':  	if (!inString && !inChar && i + 1 < document.TextLength) {  		if (document.GetCharAt (i + 1) == '/') {  			return 1;  		}  	}  	break;  case '"':  	if (!inChar) {  		if (inString && verbatim) {  			if (i + 1 < document.TextLength && document.GetCharAt (i + 1) == '"') {  				++i;  				// skip escaped quote  				inString = false;  				// let the string go on  			} else {  				verbatim = false;  			}  		} else if (!inString && i > 0 && document.GetCharAt (i - 1) == '@') {  			verbatim = true;  		}  		inString = !inString;  	}  	break;  case '\'':  	if (!inString)  		inChar = !inChar;  	break;  case '\\':  	if ((inString && !verbatim) || inChar)  		++i;  	// skip next character  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,NeedCurlyBracket,The following switch statement is missing a default case: switch (text [i]) {  case '\r':  case '\n':  	lineComment = false;  	inChar = false;  	if (!verbatim)  		inString = false;  	break;  case '/':  	if (blockComment) {  		Debug.Assert (i > 0);  		if (text [i - 1] == '*') {  			blockComment = false;  		}  	}  	if (!inString && !inChar && i + 1 < text.Length) {  		if (!blockComment && text [i + 1] == '/') {  			lineComment = true;  		}  		if (!lineComment && text [i + 1] == '*') {  			blockComment = true;  		}  	}  	break;  case '"':  	if (!(inChar || lineComment || blockComment)) {  		if (inString && verbatim) {  			if (i + 1 < text.Length && text [i + 1] == '"') {  				++i;  				// skip escaped quote  				inString = false;  				// let the string go on  			} else {  				verbatim = false;  			}  		} else if (!inString && i > 0 && text [i - 1] == '@') {  			verbatim = true;  		}  		inString = !inString;  	}  	break;  case '\'':  	if (!(inString || lineComment || blockComment)) {  		inChar = !inChar;  	}  	break;  case '{':  	if (!(inString || inChar || lineComment || blockComment)) {  		++curlyCounter;  	}  	break;  case '}':  	if (!(inString || inChar || lineComment || blockComment)) {  		--curlyCounter;  	}  	break;  case '\\':  	if ((inString && !verbatim) || inChar)  		++i;  	// skip next character  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,FormatLineInternal,The following switch statement is missing a default case: switch (ch) {  case ':':  case ')':  case ']':  case '}':  case '{':  	if (textArea.Document.TextEditorProperties.IndentStyle == IndentStyle.Smart)  		IndentLine (textArea' lineNr);  	break;  case '\n':  	string lineAboveText = (lineAbove == null) ? "" : textArea.Document.GetText (lineAbove);  	// curLine might have some text which should be added to indentation  	curLineText = "";  	if (curLine.Length > 0)  		curLineText = textArea.Document.GetText (curLine);  	int addCursorOffset = 0;  	if (lineAbove != null && lineAbove.HighlightSpanStack != null && !lineAbove.HighlightSpanStack.IsEmpty) {  		if (!lineAbove.HighlightSpanStack.Peek ().StopEOL) {  			// case for /* style comments  			int index = lineAboveText.IndexOf ("/*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline text  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + " * " + curLineText);  				textArea.Caret.Column = indentation.Length + 3 + curLineText.Length;  				return;  			}  			index = lineAboveText.IndexOf ("*");  			if (index > 0) {  				StringBuilder indentation = new StringBuilder (GetIndentation (textArea' lineNr - 1));  				for (int i = indentation.Length; i < index; ++i) {  					indentation.Append (' ');  				}  				// adding curline if present  				textArea.Document.Replace (curLine.Offset' curLine.Length' indentation + "* " + curLineText);  				textArea.Caret.Column = indentation.Length + 2 + curLineText.Length;  				return;  			}  		} else {  			if (IsInNonVerbatimString (lineAboveText' curLineText)) {  				textArea.Document.Insert (lineAbove.Offset + lineAbove.Length' "\" +");  				curLine = textArea.Document.GetLineSegment (lineNr);  				textArea.Document.Insert (curLine.Offset' "\"");  				addCursorOffset = 1;  			}  		}  	}  	int result = IndentLine (textArea' lineNr) + addCursorOffset;  	if (textArea.TextEditorProperties.AutoInsertCurlyBracket) {  		string oldLineText = TextHelper.GetLineAsString (textArea.Document' lineNr - 1);  		if (oldLineText.EndsWith ("{")) {  			if (NeedCurlyBracket (textArea.Document.TextContent)) {  				textArea.Document.Insert (curLine.Offset + curLine.Length' terminator + "}");  				IndentLine (textArea' lineNr + 1);  			}  		}  	}  	textArea.Caret.Column = result;  	return;  }  
Missing Default,DigitalRune.Windows.TextEditor.Formatting,HlslFormattingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\HlslFormattingStrategy.cs,GetStartType,The following switch statement is missing a default case: switch (document.GetCharAt (i)) {  case '/':  	if (!inString && !inChar && i + 1 < document.TextLength) {  		if (document.GetCharAt (i + 1) == '/') {  			return 1;  		}  	}  	break;  case '"':  	if (!inChar) {  		if (inString && verbatim) {  			if (i + 1 < document.TextLength && document.GetCharAt (i + 1) == '"') {  				++i;  				// skip escaped quote  				inString = false;  				// let the string go on  			} else {  				verbatim = false;  			}  		} else if (!inString && i > 0 && document.GetCharAt (i - 1) == '@') {  			verbatim = true;  		}  		inString = !inString;  	}  	break;  case '\'':  	if (!inString)  		inChar = !inChar;  	break;  case '\\':  	if ((inString && !verbatim) || inChar)  		++i;  	// skip next character  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Formatting,CSharpIndentationReformatter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\Indentation.cs,Step,The following switch statement is missing a default case: switch (c) {  case '/':  	if (_blockComment && lastchar == '*')  		_blockComment = false;  	if (!_inString && !_inChar) {  		if (!_blockComment && nextchar == '/')  			_lineComment = true;  		if (!_lineComment && nextchar == '*')  			_blockComment = true;  	}  	break;  case '#':  	if (!(_inChar || _blockComment || _inString))  		_lineComment = true;  	break;  case '"':  	if (!(_inChar || _lineComment || _blockComment)) {  		_inString = !_inString;  		if (!_inString && _verbatim) {  			if (nextchar == '"') {  				_escape = true;  				// skip escaped quote  				_inString = true;  			} else {  				_verbatim = false;  			}  		} else if (_inString && lastchar == '@') {  			_verbatim = true;  		}  	}  	break;  case '\'':  	if (!(_inString || _lineComment || _blockComment)) {  		_inChar = !_inChar;  	}  	break;  case '\\':  	if ((_inString && !_verbatim) || _inChar)  		_escape = true;  	// skip next character  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Formatting,CSharpIndentationReformatter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Formatting\Indentation.cs,Step,The following switch statement is missing a default case: switch (c) {  case '{':  	_block.OneLineBlock = false;  	_blocks.Push (_block);  	_block.StartLine = doc.LineNumber;  	if (_block.LastWord == "switch") {  		_block.Indent (set' set.IndentString + set.IndentString);  		/* oldBlock refers to the previous line' not the previous block                * The block we want is not available anymore because it was never pushed.                * } else if (oldBlock.OneLineBlock) {               // Inside a one-line-block is another statement               // with a full block: indent the inner full block               // by one additional level               block.Indent(set' set.IndentString + set.IndentString);               block.OuterIndent += set.IndentString;               // Indent current line if it starts with the '{' character               if (i == 0) {                 oldBlock.InnerIndent += set.IndentString;               }*/} else {  		_block.Indent (set);  	}  	_block.Bracket = '{';  	break;  case '}':  	while (_block.Bracket != '{') {  		if (_blocks.Count == 0)  			break;  		_block = _blocks.Pop ();  	}  	if (_blocks.Count == 0)  		break;  	_block = _blocks.Pop ();  	_block.Continuation = false;  	_block.OneLineBlock = false;  	break;  case '(':  case '[':  	_blocks.Push (_block);  	if (_block.StartLine == doc.LineNumber)  		_block.InnerIndent = _block.OuterIndent;  	else  		_block.StartLine = doc.LineNumber;  	_block.Indent (set' (oldBlock.OneLineBlock ? set.IndentString : "") + (oldBlock.Continuation ? set.IndentString : "") + (i == line.Length - 1 ? set.IndentString : new String (' '' i + 1)));  	_block.Bracket = c;  	break;  case ')':  	if (_blocks.Count == 0)  		break;  	if (_block.Bracket == '(') {  		_block = _blocks.Pop ();  		if (IsSingleStatementKeyword (_block.LastWord))  			_block.Continuation = false;  	}  	break;  case ']':  	if (_blocks.Count == 0)  		break;  	if (_block.Bracket == '[')  		_block = _blocks.Pop ();  	break;  case ';':  case ''':  	_block.Continuation = false;  	_block.OneLineBlock = false;  	break;  case ':':  	if (_block.LastWord == "case" || line.StartsWith ("case ") || line.StartsWith (_block.LastWord + ":")) {  		_block.Continuation = false;  		_block.OneLineBlock = false;  	}  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,GetRegString,The following switch statement is missing a default case: switch (expr [i]) {  case '!':  	// don't match the following expression  	StringBuilder whatmatch = new StringBuilder ();  	++i;  	while (i < expr.Length && expr [i] != '@') {  		whatmatch.Append (expr [i++]);  	}  	break;  case '@':  	// matches @  	regexpr.Append (document.GetCharAt (lineSegment.Offset + index + j));  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Highlighting,DefaultHighlightingStrategy,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Document\Highlighting\DefaultHighlightingStrategy.cs,MatchExpr,The following switch statement is missing a default case: switch (expr [i]) {  case 'C':  	// match whitespace or punctuation  	if (index + j == lineSegment.Offset || index + j >= lineSegment.Offset + lineSegment.Length) {  		// nothing (EOL or SOL)  	} else {  		char ch = document.GetCharAt (lineSegment.Offset + index + j);  		if (!Char.IsWhiteSpace (ch) && !Char.IsPunctuation (ch)) {  			return false;  		}  	}  	break;  case '!':// don't match the following expression   {  	StringBuilder whatmatch = new StringBuilder ();  	++i;  	while (i < expr.Length && expr [i] != '@') {  		whatmatch.Append (expr [i++]);  	}  	if (lineSegment.Offset + index + j + whatmatch.Length < document.TextLength) {  		int k = 0;  		for (; k < whatmatch.Length; ++k) {  			char docChar = ignoreCase ? Char.ToUpperInvariant (document.GetCharAt (lineSegment.Offset + index + j + k)) : document.GetCharAt (lineSegment.Offset + index + j + k);  			char spanChar = ignoreCase ? Char.ToUpperInvariant (whatmatch [k]) : whatmatch [k];  			if (docChar != spanChar) {  				break;  			}  		}  		if (k >= whatmatch.Length) {  			return false;  		}  	}  	//									--j;  	break;  }  case '-':// don't match the  expression before   {  	StringBuilder whatmatch = new StringBuilder ();  	++i;  	while (i < expr.Length && expr [i] != '@') {  		whatmatch.Append (expr [i++]);  	}  	if (index - whatmatch.Length >= 0) {  		int k = 0;  		for (; k < whatmatch.Length; ++k) {  			char docChar = ignoreCase ? Char.ToUpperInvariant (document.GetCharAt (lineSegment.Offset + index - whatmatch.Length + k)) : document.GetCharAt (lineSegment.Offset + index - whatmatch.Length + k);  			char spanChar = ignoreCase ? Char.ToUpperInvariant (whatmatch [k]) : whatmatch [k];  			if (docChar != spanChar)  				break;  		}  		if (k >= whatmatch.Length) {  			return false;  		}  	}  	//									--j;  	break;  }  case '@':  	// matches @  	if (index + j >= lineSegment.Length || '@' != document.GetCharAt (lineSegment.Offset + index + j)) {  		return false;  	}  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Utilities,RtfWriter,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\RtfWriter.cs,BuildFileContent,The following switch statement is missing a default case: switch (word.Type) {  case TextWordType.Space:  	if (selection.ContainsOffset (offset)) {  		rtf.Append (' ');  	}  	++offset;  	break;  case TextWordType.Tab:  	if (selection.ContainsOffset (offset)) {  		rtf.Append (@"\tab");  	}  	++offset;  	escapeSequence = true;  	break;  case TextWordType.Word:  	Color c = word.Color;  	if (offset + word.Word.Length > selectionOffset && offset < selectionEndOffset) {  		string colorstr = c.R + "' " + c.G + "' " + c.B;  		if (!_colors.ContainsKey (colorstr)) {  			_colors [colorstr] = ++_colorNum;  			_colorString.Append (@"\red" + c.R + @"\green" + c.G + @"\blue" + c.B + ";");  		}  		if (c != curColor || firstLine) {  			rtf.Append (@"\cf" + _colors [colorstr]);  			curColor = c;  			escapeSequence = true;  		}  		if (oldItalic != word.Italic) {  			if (word.Italic) {  				rtf.Append (@"\i");  			} else {  				rtf.Append (@"\i0");  			}  			oldItalic = word.Italic;  			escapeSequence = true;  		}  		if (oldBold != word.Bold) {  			if (word.Bold) {  				rtf.Append (@"\b");  			} else {  				rtf.Append (@"\b0");  			}  			oldBold = word.Bold;  			escapeSequence = true;  		}  		if (firstLine) {  			rtf.Append (@"\f0\fs" + (Math.Round (textArea.TextEditorProperties.Font.Size * 2)));  			firstLine = false;  		}  		if (escapeSequence) {  			rtf.Append (' ');  			escapeSequence = false;  		}  		string printWord;  		if (offset < selectionOffset) {  			printWord = word.Word.Substring (selectionOffset - offset);  		} else if (offset + word.Word.Length > selectionEndOffset) {  			printWord = word.Word.Substring (0' (offset + word.Word.Length) - selectionEndOffset);  		} else {  			printWord = word.Word;  		}  		rtf.Append (printWord.Replace (@"\"' @"\\").Replace ("{"' "\\{").Replace ("}"' "\\}"));  	}  	offset += word.Length;  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor,TextHelper,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\Utilities\TextHelper.cs,GetExpressionBeforeOffset,The following switch statement is missing a default case: switch (word) {  case "ref":  case "out":  case "in":  case "return":  case "throw":  case "case":  	goto done;  }  
Missing Default,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,CommitUpdateRequested,The following switch statement is missing a default case: switch (update.TextAreaUpdateType) {  case TextAreaUpdateType.PositionToEnd:  	_primaryTextArea.TextArea.UpdateToEnd (update.Position.Y);  	if (_secondaryTextArea != null)  		_secondaryTextArea.TextArea.UpdateToEnd (update.Position.Y);  	break;  case TextAreaUpdateType.PositionToLineEnd:  case TextAreaUpdateType.SingleLine:  	_primaryTextArea.TextArea.UpdateLine (update.Position.Y);  	if (_secondaryTextArea != null)  		_secondaryTextArea.TextArea.UpdateLine (update.Position.Y);  	break;  case TextAreaUpdateType.SinglePosition:  	_primaryTextArea.TextArea.UpdateLine (update.Position.Y' update.Position.X' update.Position.X);  	if (_secondaryTextArea != null)  		_secondaryTextArea.TextArea.UpdateLine (update.Position.Y' update.Position.X' update.Position.X);  	break;  case TextAreaUpdateType.LinesBetween:  	_primaryTextArea.TextArea.UpdateLines (update.Position.X' update.Position.Y);  	if (_secondaryTextArea != null)  		_secondaryTextArea.TextArea.UpdateLines (update.Position.X' update.Position.Y);  	break;  case TextAreaUpdateType.WholeTextArea:  	_primaryTextArea.TextArea.Invalidate ();  	if (_secondaryTextArea != null)  		_secondaryTextArea.TextArea.Invalidate ();  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,MeasurePrintingHeight,The following switch statement is missing a default case: switch (word.Type) {  case TextWordType.Space:  	Advance (ref xPos' ref yPos' maxWidth' _primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  	break;  case TextWordType.Tab:  	Advance (ref xPos' ref yPos' maxWidth' TabIndent * _primaryTextArea.TextArea.TextView.ColumnWidth' fontHeight);  	break;  case TextWordType.Word:  	SizeF drawingSize = g.MeasureString (word.Word' word.GetFont (fontContainer)' new SizeF (maxWidth' fontHeight * 100)' _printingStringFormat);  	Advance (ref xPos' ref yPos' maxWidth' drawingSize.Width' fontHeight);  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor,TextEditorControl,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextEditorControl_EditActions.cs,DrawLine,The following switch statement is missing a default case: switch (word.Type) {  case TextWordType.Space:  	Advance (ref xPos' ref yPos' margin.Width' _primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  	break;  case TextWordType.Tab:  	Advance (ref xPos' ref yPos' margin.Width' TabIndent * _primaryTextArea.TextArea.TextView.ColumnWidth' fontHeight);  	break;  case TextWordType.Word:  	g.DrawString (word.Word' word.GetFont (fontContainer)' BrushRegistry.GetBrush (word.Color)' xPos + margin.X' yPos);  	SizeF drawingSize = g.MeasureString (word.Word' word.GetFont (fontContainer)' new SizeF (margin.Width' fontHeight * 100)' _printingStringFormat);  	Advance (ref xPos' ref yPos' margin.Width' drawingSize.Width' fontHeight);  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor,Caret,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Caret.cs,CreateCaret,The following switch statement is missing a default case: switch (_caretMode) {  case CaretMode.InsertMode:  	_caretCreated = CreateCaret (_textArea.Handle' IntPtr.Zero' 2' _textArea.TextView.FontHeight);  	break;  case CaretMode.OverwriteMode:  	_caretCreated = CreateCaret (_textArea.Handle' IntPtr.Zero' _textArea.TextView.SpaceWidth' _textArea.TextView.FontHeight);  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,DrawTextMarkers,The following switch statement is missing a default case: switch (marker.MarkerType) {  case MarkerType.Underlined:  	g.DrawLine (BrushRegistry.GetPen (marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  	break;  case MarkerType.WaveLine:  	int reminder = ((int)drawingRect.X) % 4;  	for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 4) {  		g.DrawLine (BrushRegistry.GetPen (marker.Color)' i' drawYPos + 3 - 4' i + 2' drawYPos + 1 - 4);  		if (i + 2 < drawingRect.Right)  			g.DrawLine (BrushRegistry.GetPen (marker.Color)' i + 2' drawYPos + 1 - 4' i + 4' drawYPos + 3 - 4);  	}  	break;  case MarkerType.SolidBlock:  	g.FillRectangle (BrushRegistry.GetBrush (marker.Color)' drawingRect);  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor,TextView,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextView.cs,CountColumns,The following switch statement is missing a default case: switch (word.Type) {  case TextWordType.Space:  	drawingPos += spaceWidth;  	break;  case TextWordType.Tab:  	// go to next tab position  	drawingPos = (int)((drawingPos + MinTabWidth) / tabIndent / ColumnWidth) * tabIndent * ColumnWidth;  	drawingPos += tabIndent * ColumnWidth;  	break;  case TextWordType.Word:  	int wordStart = Math.Max (wordOffset' start);  	int wordLength = Math.Min (wordOffset + word.Length' end) - wordStart;  	string text = Document.GetText (currentLine.Offset + wordStart' wordLength);  	drawingPos += MeasureStringWidth (g' text' word.GetFont (fontContainer) ?? fontContainer.RegularFont);  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor,TextAreaMouseHandler,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\TextAreaMouseHandler.cs,TextAreaMouseMove,The following switch statement is missing a default case: switch (_textArea.SelectionManager.SelectFrom.Where) {  case WhereFrom.Gutter:  	ExtendSelectionToMouse ();  	return;  case WhereFrom.TextArea:  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Completion,AbstractCompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\AbstractCompletionWindow.cs,ProcessTextAreaKey,The following switch statement is missing a default case: switch (keyEventArgs.KeyData) {  case Keys.Escape:  	Close ();  	keyEventArgs.Handled = true;  	return;  }  
Missing Default,DigitalRune.Windows.TextEditor.Completion,CompletionWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Completion\CompletionWindow.cs,ProcessTextAreaKey,The following switch statement is missing a default case: switch (keyEventArgs.KeyData) {  case Keys.Home:  	_completionListView.SelectItem (0);  	keyEventArgs.Handled = true;  	return;  case Keys.End:  	_completionListView.SelectItem (_completionListView.ItemCount - 1);  	keyEventArgs.Handled = true;  	return;  case Keys.PageDown:  	_completionListView.PageDown ();  	keyEventArgs.Handled = true;  	return;  case Keys.PageUp:  	_completionListView.PageUp ();  	keyEventArgs.Handled = true;  	return;  case Keys.Down:  	_completionListView.SelectNextItem ();  	keyEventArgs.Handled = true;  	return;  case Keys.Up:  	_completionListView.SelectPrevItem ();  	keyEventArgs.Handled = true;  	return;  case Keys.Tab:  	InsertSelectedItem ('\t');  	keyEventArgs.Handled = true;  	return;  case Keys.Return:  	InsertSelectedItem ('\n');  	keyEventArgs.Handled = true;  	return;  }  
Missing Default,DigitalRune.Windows.TextEditor.Insight,AbstractInsightDataProvider,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Insight\AbstractInsightDataProvider.cs,CaretOffsetChanged,The following switch statement is missing a default case: switch (ch) {  case '\'':  	insideChar = !insideChar;  	break;  case '(':  	if (!(insideChar || insideString)) {  		++brackets;  	}  	break;  case ')':  	if (!(insideChar || insideString)) {  		--brackets;  	}  	if (brackets <= 0) {  		return true;  	}  	break;  case '"':  	insideString = !insideString;  	break;  case '}':  	if (!(insideChar || insideString)) {  		--curlyBrackets;  	}  	if (curlyBrackets < 0) {  		return true;  	}  	break;  case '{':  	if (!(insideChar || insideString)) {  		++curlyBrackets;  	}  	break;  case ';':  	if (!(insideChar || insideString)) {  		return true;  	}  	break;  }  
Missing Default,DigitalRune.Windows.TextEditor.Insight,InsightWindow,D:\newReposJune17\worldexplorer_SquareOne\DigitalRune-TextEditor-1.3.1\DigitalRune.Windows.TextEditor\GUI\Insight\InsightWindow.cs,ProcessTextAreaKey,The following switch statement is missing a default case: switch (keyEventArgs.KeyData) {  case Keys.Down:  	if (DataProvider != null && DataProvider.InsightDataCount > 0) {  		CurrentData = (CurrentData + 1) % DataProvider.InsightDataCount;  		Refresh ();  	}  	keyEventArgs.Handled = true;  	return;  case Keys.Up:  	if (DataProvider != null && DataProvider.InsightDataCount > 0) {  		CurrentData = (CurrentData + DataProvider.InsightDataCount - 1) % DataProvider.InsightDataCount;  		Refresh ();  	}  	keyEventArgs.Handled = true;  	return;  }  
