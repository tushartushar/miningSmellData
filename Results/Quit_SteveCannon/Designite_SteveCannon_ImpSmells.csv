Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SteveCannon,Program,C:\repos\Quit_SteveCannon\SteveCannon\Program.cs,Main,Cyclomatic complexity of the method is 11
Complex Method,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,Check,Cyclomatic complexity of the method is 12
Complex Method,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,Cyclomatic complexity of the method is 13
Long Statement,SteveCannon,Program,C:\repos\Quit_SteveCannon\SteveCannon\Program.cs,checkSMod,The length of the statement  "		Console.Error.WriteLine ("While operating on {0} an {2} exception occured: {1}"' fileInfo.Name' ex.Message' ex.GetType ().ToString ()); " is 135.
Long Statement,SteveCannon,Program,C:\repos\Quit_SteveCannon\SteveCannon\Program.cs,Main,The length of the statement  "			Console.Error.WriteLine ("Not-really-caught exception {0} happened while trying to fetch {2}: {1}"' ex.GetType ().ToString ()' ex.Message' smodPath); " is 149.
Long Statement,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,Check,The length of the statement  "			Console.Error.WriteLine ("WebException {0} ({3}): Server replied with {1} {2}"' ex.Message' response.StatusCode' response.StatusDescription' ex.Status); " is 152.
Long Statement,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The length of the statement  "				throw new UpdateException (this' "Expected last_modified to be either a string or a value but got " + lastModified.Type.ToString ()); " is 133.
Long Statement,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The length of the statement  "				Console.WriteLine ("JSON reports last_modified {0}' which is newer than {1}"' this.ServerModifiedTime' this.ArchiveModifiedTime); " is 129.
Long Statement,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The length of the statement  "			Console.WriteLine ("JSON reports last_modified {0}' which is older than {1}"' this.ServerModifiedTime' this.ArchiveModifiedTime); " is 129.
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,createRequest,The following statement contains a magic number: request.Timeout = 10000;  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkStream,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (stream)) {  	// Try to identify the first few bytes.  	byte[] geoffers = reader.ReadBytes (4);  	int first = BitConverter.ToInt32 (geoffers' 0);  	if (first == 0x04034b50) {  		Console.WriteLine ("Likely is... a zip?");  		MemoryStream other = new MemoryStream ();  		other.Write (geoffers' 0' 4);  		stream.CopyTo (other);  		other.Seek (0' SeekOrigin.Begin);  		stream.Dispose ();  		// Check for integrity  		try {  			var entries = new System.IO.Compression.ZipArchive (other).Entries;  			other.Seek (0' SeekOrigin.Begin);  		}  		catch (Exception ex) {  			throw new UpdateException (this' "Server likely replied with a zip; but ZipArchive failed: " + ex.Message' ex);  		}  		downloadFile (other);  	}  	else if (geoffers [0] == '{') {  		Console.WriteLine ("Likely is... a json?");  		MemoryStream other = new MemoryStream ();  		other.Write (geoffers' 0' 4);  		stream.CopyTo (other);  		other.Seek (0' SeekOrigin.Begin);  		stream.Dispose ();  		downloadJson (other);  	}  	else  		throw new UpdateException (this' "No idea what " + (first) + " could indicate as file type.");  }  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkStream,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (stream)) {  	// Try to identify the first few bytes.  	byte[] geoffers = reader.ReadBytes (4);  	int first = BitConverter.ToInt32 (geoffers' 0);  	if (first == 0x04034b50) {  		Console.WriteLine ("Likely is... a zip?");  		MemoryStream other = new MemoryStream ();  		other.Write (geoffers' 0' 4);  		stream.CopyTo (other);  		other.Seek (0' SeekOrigin.Begin);  		stream.Dispose ();  		// Check for integrity  		try {  			var entries = new System.IO.Compression.ZipArchive (other).Entries;  			other.Seek (0' SeekOrigin.Begin);  		}  		catch (Exception ex) {  			throw new UpdateException (this' "Server likely replied with a zip; but ZipArchive failed: " + ex.Message' ex);  		}  		downloadFile (other);  	}  	else if (geoffers [0] == '{') {  		Console.WriteLine ("Likely is... a json?");  		MemoryStream other = new MemoryStream ();  		other.Write (geoffers' 0' 4);  		stream.CopyTo (other);  		other.Seek (0' SeekOrigin.Begin);  		stream.Dispose ();  		downloadJson (other);  	}  	else  		throw new UpdateException (this' "No idea what " + (first) + " could indicate as file type.");  }  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkStream,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (stream)) {  	// Try to identify the first few bytes.  	byte[] geoffers = reader.ReadBytes (4);  	int first = BitConverter.ToInt32 (geoffers' 0);  	if (first == 0x04034b50) {  		Console.WriteLine ("Likely is... a zip?");  		MemoryStream other = new MemoryStream ();  		other.Write (geoffers' 0' 4);  		stream.CopyTo (other);  		other.Seek (0' SeekOrigin.Begin);  		stream.Dispose ();  		// Check for integrity  		try {  			var entries = new System.IO.Compression.ZipArchive (other).Entries;  			other.Seek (0' SeekOrigin.Begin);  		}  		catch (Exception ex) {  			throw new UpdateException (this' "Server likely replied with a zip; but ZipArchive failed: " + ex.Message' ex);  		}  		downloadFile (other);  	}  	else if (geoffers [0] == '{') {  		Console.WriteLine ("Likely is... a json?");  		MemoryStream other = new MemoryStream ();  		other.Write (geoffers' 0' 4);  		stream.CopyTo (other);  		other.Seek (0' SeekOrigin.Begin);  		stream.Dispose ();  		downloadJson (other);  	}  	else  		throw new UpdateException (this' "No idea what " + (first) + " could indicate as file type.");  }  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkStream,The following statement contains a magic number: if (first == 0x04034b50) {  	Console.WriteLine ("Likely is... a zip?");  	MemoryStream other = new MemoryStream ();  	other.Write (geoffers' 0' 4);  	stream.CopyTo (other);  	other.Seek (0' SeekOrigin.Begin);  	stream.Dispose ();  	// Check for integrity  	try {  		var entries = new System.IO.Compression.ZipArchive (other).Entries;  		other.Seek (0' SeekOrigin.Begin);  	}  	catch (Exception ex) {  		throw new UpdateException (this' "Server likely replied with a zip; but ZipArchive failed: " + ex.Message' ex);  	}  	downloadFile (other);  }  else if (geoffers [0] == '{') {  	Console.WriteLine ("Likely is... a json?");  	MemoryStream other = new MemoryStream ();  	other.Write (geoffers' 0' 4);  	stream.CopyTo (other);  	other.Seek (0' SeekOrigin.Begin);  	stream.Dispose ();  	downloadJson (other);  }  else  	throw new UpdateException (this' "No idea what " + (first) + " could indicate as file type.");  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkStream,The following statement contains a magic number: if (first == 0x04034b50) {  	Console.WriteLine ("Likely is... a zip?");  	MemoryStream other = new MemoryStream ();  	other.Write (geoffers' 0' 4);  	stream.CopyTo (other);  	other.Seek (0' SeekOrigin.Begin);  	stream.Dispose ();  	// Check for integrity  	try {  		var entries = new System.IO.Compression.ZipArchive (other).Entries;  		other.Seek (0' SeekOrigin.Begin);  	}  	catch (Exception ex) {  		throw new UpdateException (this' "Server likely replied with a zip; but ZipArchive failed: " + ex.Message' ex);  	}  	downloadFile (other);  }  else if (geoffers [0] == '{') {  	Console.WriteLine ("Likely is... a json?");  	MemoryStream other = new MemoryStream ();  	other.Write (geoffers' 0' 4);  	stream.CopyTo (other);  	other.Seek (0' SeekOrigin.Begin);  	stream.Dispose ();  	downloadJson (other);  }  else  	throw new UpdateException (this' "No idea what " + (first) + " could indicate as file type.");  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkStream,The following statement contains a magic number: other.Write (geoffers' 0' 4);  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkStream,The following statement contains a magic number: if (geoffers [0] == '{') {  	Console.WriteLine ("Likely is... a json?");  	MemoryStream other = new MemoryStream ();  	other.Write (geoffers' 0' 4);  	stream.CopyTo (other);  	other.Seek (0' SeekOrigin.Begin);  	stream.Dispose ();  	downloadJson (other);  }  else  	throw new UpdateException (this' "No idea what " + (first) + " could indicate as file type.");  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkStream,The following statement contains a magic number: other.Write (geoffers' 0' 4);  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The following statement contains a magic number: if (value.Type == JTokenType.String) {  	// Set new location + go again!  	this.Uri = new Uri (value.Value<string> ());  	Console.WriteLine ("JSON redirects us to {0}"' this.Uri);  	this.Check ();  }  else if (value.Type == JTokenType.Object) {  	// OK' we need to have an URI entry  	JToken uri = value ["uri"];  	if (uri == null)  		throw new UpdateException (this' "Mod exists in JSON' but uri is not defined");  	if (uri.Type != JTokenType.String)  		throw new UpdateException (this' "Mod specified URI' but is not a string.");  	// No last-modified has been set; set the uri  	this.Uri = new Uri (uri.Value<string> ());  	Console.WriteLine ("JSON redirects us to {0}"' this.Uri);  	// Does it specify a last_modified field?  	JToken lastModified = value ["last_modified"];  	if (lastModified != null) {  		// OK..?  		if (lastModified.Type == JTokenType.Date) {  			this.ServerModifiedTime = lastModified.Value<DateTime> ();  		}  		else if (lastModified.Type == JTokenType.String) {  			// ... try to parse it  			DateTime result;  			if (!DateTime.TryParse (lastModified.Value<string> ()' out result))  				throw new UpdateException (this' "Unable to parse date string provided (" + lastModified.Value<string> () + ")");  			this.ServerModifiedTime = result;  		}  		else if (lastModified.Type == JTokenType.Integer) {  			this.ServerModifiedTime = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds (lastModified.Value<int> ());  		}  		else  			throw new UpdateException (this' "Expected last_modified to be either a string or a value but got " + lastModified.Type.ToString ());  		// Now that we got the time' check it.  		if (this.ServerModifiedTime > this.ArchiveModifiedTime) {  			Console.WriteLine ("JSON reports last_modified {0}' which is newer than {1}"' this.ServerModifiedTime' this.ArchiveModifiedTime);  			this.Action = UpdateAction.Update;  			this.downloadFile ();  			return;  		}  		Console.WriteLine ("JSON reports last_modified {0}' which is older than {1}"' this.ServerModifiedTime' this.ArchiveModifiedTime);  		this.Action = UpdateAction.None;  		return;  	}  	// vOv check the new URI I guess. It /should/ be a smod archive.  	this.Check ();  }  else  	throw new UpdateException (this' "JSON contained " + value.Type + "; expected object/string");  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The following statement contains a magic number: if (value.Type == JTokenType.Object) {  	// OK' we need to have an URI entry  	JToken uri = value ["uri"];  	if (uri == null)  		throw new UpdateException (this' "Mod exists in JSON' but uri is not defined");  	if (uri.Type != JTokenType.String)  		throw new UpdateException (this' "Mod specified URI' but is not a string.");  	// No last-modified has been set; set the uri  	this.Uri = new Uri (uri.Value<string> ());  	Console.WriteLine ("JSON redirects us to {0}"' this.Uri);  	// Does it specify a last_modified field?  	JToken lastModified = value ["last_modified"];  	if (lastModified != null) {  		// OK..?  		if (lastModified.Type == JTokenType.Date) {  			this.ServerModifiedTime = lastModified.Value<DateTime> ();  		}  		else if (lastModified.Type == JTokenType.String) {  			// ... try to parse it  			DateTime result;  			if (!DateTime.TryParse (lastModified.Value<string> ()' out result))  				throw new UpdateException (this' "Unable to parse date string provided (" + lastModified.Value<string> () + ")");  			this.ServerModifiedTime = result;  		}  		else if (lastModified.Type == JTokenType.Integer) {  			this.ServerModifiedTime = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds (lastModified.Value<int> ());  		}  		else  			throw new UpdateException (this' "Expected last_modified to be either a string or a value but got " + lastModified.Type.ToString ());  		// Now that we got the time' check it.  		if (this.ServerModifiedTime > this.ArchiveModifiedTime) {  			Console.WriteLine ("JSON reports last_modified {0}' which is newer than {1}"' this.ServerModifiedTime' this.ArchiveModifiedTime);  			this.Action = UpdateAction.Update;  			this.downloadFile ();  			return;  		}  		Console.WriteLine ("JSON reports last_modified {0}' which is older than {1}"' this.ServerModifiedTime' this.ArchiveModifiedTime);  		this.Action = UpdateAction.None;  		return;  	}  	// vOv check the new URI I guess. It /should/ be a smod archive.  	this.Check ();  }  else  	throw new UpdateException (this' "JSON contained " + value.Type + "; expected object/string");  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The following statement contains a magic number: if (lastModified != null) {  	// OK..?  	if (lastModified.Type == JTokenType.Date) {  		this.ServerModifiedTime = lastModified.Value<DateTime> ();  	}  	else if (lastModified.Type == JTokenType.String) {  		// ... try to parse it  		DateTime result;  		if (!DateTime.TryParse (lastModified.Value<string> ()' out result))  			throw new UpdateException (this' "Unable to parse date string provided (" + lastModified.Value<string> () + ")");  		this.ServerModifiedTime = result;  	}  	else if (lastModified.Type == JTokenType.Integer) {  		this.ServerModifiedTime = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds (lastModified.Value<int> ());  	}  	else  		throw new UpdateException (this' "Expected last_modified to be either a string or a value but got " + lastModified.Type.ToString ());  	// Now that we got the time' check it.  	if (this.ServerModifiedTime > this.ArchiveModifiedTime) {  		Console.WriteLine ("JSON reports last_modified {0}' which is newer than {1}"' this.ServerModifiedTime' this.ArchiveModifiedTime);  		this.Action = UpdateAction.Update;  		this.downloadFile ();  		return;  	}  	Console.WriteLine ("JSON reports last_modified {0}' which is older than {1}"' this.ServerModifiedTime' this.ArchiveModifiedTime);  	this.Action = UpdateAction.None;  	return;  }  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The following statement contains a magic number: if (lastModified.Type == JTokenType.Date) {  	this.ServerModifiedTime = lastModified.Value<DateTime> ();  }  else if (lastModified.Type == JTokenType.String) {  	// ... try to parse it  	DateTime result;  	if (!DateTime.TryParse (lastModified.Value<string> ()' out result))  		throw new UpdateException (this' "Unable to parse date string provided (" + lastModified.Value<string> () + ")");  	this.ServerModifiedTime = result;  }  else if (lastModified.Type == JTokenType.Integer) {  	this.ServerModifiedTime = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds (lastModified.Value<int> ());  }  else  	throw new UpdateException (this' "Expected last_modified to be either a string or a value but got " + lastModified.Type.ToString ());  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The following statement contains a magic number: if (lastModified.Type == JTokenType.String) {  	// ... try to parse it  	DateTime result;  	if (!DateTime.TryParse (lastModified.Value<string> ()' out result))  		throw new UpdateException (this' "Unable to parse date string provided (" + lastModified.Value<string> () + ")");  	this.ServerModifiedTime = result;  }  else if (lastModified.Type == JTokenType.Integer) {  	this.ServerModifiedTime = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds (lastModified.Value<int> ());  }  else  	throw new UpdateException (this' "Expected last_modified to be either a string or a value but got " + lastModified.Type.ToString ());  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The following statement contains a magic number: if (lastModified.Type == JTokenType.Integer) {  	this.ServerModifiedTime = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds (lastModified.Value<int> ());  }  else  	throw new UpdateException (this' "Expected last_modified to be either a string or a value but got " + lastModified.Type.ToString ());  
Magic Number,SteveCannon,Update,C:\repos\Quit_SteveCannon\SteveCannon\UpdateCheck.cs,checkJson,The following statement contains a magic number: this.ServerModifiedTime = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds (lastModified.Value<int> ());  
