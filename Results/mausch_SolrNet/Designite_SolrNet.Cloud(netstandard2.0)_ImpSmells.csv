Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,ISolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\ISolrCollectionsAdmin.cs,CreateCollection,The method has 14 parameters. Parameters: collection' routerName' numShards' configName' shards' maxShardsPerNode' replicationFactor' createNodeSet' createNodeSetShuffle' rooterField' coreProperties' autoAddReplicas' rule' snitch
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,ISolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\ISolrCollectionsAdmin.cs,DeleteShard,The method has 5 parameters. Parameters: collection' shard' deleteInstanceDir' deleteDataDir' deleteIndex
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,ISolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\ISolrCollectionsAdmin.cs,ModifyCollection,The method has 6 parameters. Parameters: collection' maxShardsPerNode' replicationFactor' autoAddReplicas' rule' snitch
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,ISolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\ISolrCollectionsAdmin.cs,SplitShard,The method has 5 parameters. Parameters: collection' shard' ranges' splitKey' coreProperties
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,ISolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\ISolrCollectionsAdmin.cs,DeleteReplica,The method has 7 parameters. Parameters: collection' shard' replica' deleteInstanceDir' deleteDataDir' deleteIndex' onlyIfDown
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,ISolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\ISolrCollectionsAdmin.cs,AddReplica,The method has 7 parameters. Parameters: collection' shard' route' node' instanceDir' dataDir' coreProperties
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,ISolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\ISolrCollectionsAdmin.cs,Migrate,The method has 5 parameters. Parameters: collection' targetCollection' splitKey' forwardTimeout' coreProperties
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,ISolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\ISolrCollectionsAdmin.cs,AddReplicaProperty,The method has 6 parameters. Parameters: collection' shard' replica' property' propertyValue' shardUnique
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,SolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\SolrCollectionsAdmin.cs,CreateCollection,The method has 14 parameters. Parameters: collection' routerName' numShards' configName' shards' maxShardsPerNode' replicationFactor' createNodeSet' createNodeSetShuffle' rooterField' coreProperties' autoAddReplicas' rule' snitch
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,SolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\SolrCollectionsAdmin.cs,DeleteShard,The method has 5 parameters. Parameters: collection' shard' deleteInstanceDir' deleteDataDir' deleteIndex
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,SolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\SolrCollectionsAdmin.cs,ModifyCollection,The method has 6 parameters. Parameters: collection' maxShardsPerNode' replicationFactor' autoAddReplicas' rule' snitch
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,SolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\SolrCollectionsAdmin.cs,SplitShard,The method has 5 parameters. Parameters: collection' shard' ranges' splitKey' coreProperties
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,SolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\SolrCollectionsAdmin.cs,DeleteReplica,The method has 7 parameters. Parameters: collection' shard' replica' deleteInstanceDir' deleteDataDir' deleteIndex' onlyIfDown
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,SolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\SolrCollectionsAdmin.cs,AddReplica,The method has 7 parameters. Parameters: collection' shard' route' node' instanceDir' dataDir' coreProperties
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,SolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\SolrCollectionsAdmin.cs,Migrate,The method has 5 parameters. Parameters: collection' targetCollection' splitKey' forwardTimeout' coreProperties
Long Parameter List,SolrNet.Cloud.CollectionsAdmin,SolrCollectionsAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\CollectionsAdmin\SolrCollectionsAdmin.cs,AddReplicaProperty,The method has 6 parameters. Parameters: collection' shard' replica' property' propertyValue' shardUnique
Long Parameter List,SolrNet.Cloud,SolrCloudShard,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\SolrCloudShard.cs,SolrCloudShard,The method has 5 parameters. Parameters: isActive' name' rangeEnd' rangeStart' replicas
Long Statement,SolrNet.Cloud.ZooKeeperClient,SolrCloudStateProvider,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\ZooKeeperClient\SolrCloudStateProvider.cs,InitAsync,The length of the statement  "                        throw new Exceptions.SolrNetCloudConnectionException($"Cannot connect to the Zookeeper instance {zooKeeperConnection}. Current state: {zooKeeper.getState()} "); " is 160.
Long Statement,SolrNet.Cloud.ZooKeeperClient,SolrCloudStateProvider,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\ZooKeeperClient\SolrCloudStateProvider.cs,UpdateAsync,The length of the statement  "                ? (await GetInternalCollectionsStateAsync().ConfigureAwait(false)).Merge(await GetExternalCollectionsStateAsync().ConfigureAwait(false)) " is 136.
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: var chunk = reader.ReadBytes(4);
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following statement contains a magic number: chunk = reader.ReadBytes(4);
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Rotl32,The following statement contains a magic number: return (x << r) | (x >> (32 - r));
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Fmix,The following statement contains a magic number: h ^= h >> 16;
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Fmix,The following statement contains a magic number: h ^= h >> 13;
Magic Number,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Fmix,The following statement contains a magic number: h ^= h >> 16;
Missing Default,SolrNet.Cloud,MurMurHash3,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet.Cloud\MurMurHash3.cs,Compute,The following switch statement is missing a default case: switch (chunk.Length)                      {                          case 4:                              /* Get four bytes from the input into an uint */                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16                                | chunk[3] << 24);                                /* bitmagic hash */                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                                h1 ^= k1;                              h1 = Rotl32(h1' 13);                              h1 = h1 * 5 + 0xe6546b64;                              break;                          case 3:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8                                | chunk[2] << 16);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 2:                              k1 = (uint)                                 (chunk[0]                                | chunk[1] << 8);                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                          case 1:                              k1 = chunk[0];                              k1 *= C1;                              k1 = Rotl32(k1' 15);                              k1 *= C2;                              h1 ^= k1;                              break;                        }
