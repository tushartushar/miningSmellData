Implementation smell,Namespace,Class,File,Method,Description
Long Method,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,HtmlDecode,The method has 140 lines of code.
Long Method,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,InitEntities,The method has 258 lines of code.
Complex Method,SolrNet.Commands,ExtractCommand,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Commands\ExtractCommand.cs,ConvertToQueryParameters,Cyclomatic complexity of the method is 14
Complex Method,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,Cyclomatic complexity of the method is 21
Complex Method,SolrNet.Impl,SolrDocumentSerializer<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDocumentSerializer.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetCommonParameters,Cyclomatic complexity of the method is 10
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetAllParameters,Cyclomatic complexity of the method is 16
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetFacetFieldOptions,Cyclomatic complexity of the method is 13
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetMoreLikeThisParameters,Cyclomatic complexity of the method is 11
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetHighlightingParameters,Cyclomatic complexity of the method is 20
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetSpellCheckingParameters,Cyclomatic complexity of the method is 9
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetStatsQueryOptions,Cyclomatic complexity of the method is 10
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetGroupingQueryOptions,Cyclomatic complexity of the method is 16
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetClusteringParameters,Cyclomatic complexity of the method is 14
Complex Method,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetTermsParameters,Cyclomatic complexity of the method is 17
Complex Method,SolrNet.Impl,SolrStatusResponseParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrStatusResponseParser.cs,ParseCore,Cyclomatic complexity of the method is 13
Complex Method,SolrNet.Impl,SolrStatusResponseParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrStatusResponseParser.cs,ParseCoreIndex,Cyclomatic complexity of the method is 23
Complex Method,SolrNet.Impl.FacetQuerySerializers,SolrFacetFieldQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FacetQuerySerializers\SolrFacetFieldQuerySerializer.cs,Serialize,Cyclomatic complexity of the method is 11
Complex Method,SolrNet.Impl.ResponseParsers,FacetsResponseParser<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\ResponseParsers\FacetsResponseParser.cs,ParseDateFacetingNode,Cyclomatic complexity of the method is 8
Complex Method,SolrNet.Impl.ResponseParsers,FacetsResponseParser<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\ResponseParsers\FacetsResponseParser.cs,ParseRangeFacetingNode,Cyclomatic complexity of the method is 11
Complex Method,SolrNet.Impl.ResponseParsers,ReplicationDetailsResponseParser<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\ResponseParsers\ReplicationDetailsResponseParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,SolrNet.Impl.ResponseParsers,SpellCheckResponseParser<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\ResponseParsers\SpellCheckResponseParser.cs,ParseSpellChecking,Cyclomatic complexity of the method is 11
Complex Method,SolrNet.Impl.ResponseParsers,StatsResponseParser<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\ResponseParsers\StatsResponseParser.cs,ParseStatsNode,Cyclomatic complexity of the method is 11
Complex Method,SolrNet.Mapping.Validation.Rules,MappedPropertiesIsInSolrSchemaRule,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\MappedPropertiesIsInSolrSchemaRule.cs,Validate,Cyclomatic complexity of the method is 10
Complex Method,SolrNet.Schema,SolrSchemaParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Schema\SolrSchemaParser.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,HtmlEncode,Cyclomatic complexity of the method is 14
Complex Method,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,HtmlAttributeEncode,Cyclomatic complexity of the method is 10
Complex Method,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,HtmlDecode,Cyclomatic complexity of the method is 24
Complex Method,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 10
Complex Method,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 15
Complex Method,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecodeToBytes,Cyclomatic complexity of the method is 9
Complex Method,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 11
Long Parameter List,SolrNet,IStreamSolrConnection,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\ISolrConnection.cs,PostStreamAsStreamAsync,The method has 5 parameters. Parameters: relativeUrl' contentType' content' getParameters' cancellationToken
Long Parameter List,SolrNet,ISolrCoreAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\ISolrCoreAdmin.cs,Create,The method has 5 parameters. Parameters: coreName' instanceDir' configFile' schemaFile' dataDir
Long Parameter List,SolrNet,SolrQueryByDistance,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\SolrQueryByDistance.cs,SolrQueryByDistance,The method has 5 parameters. Parameters: fieldName' pointLatitude' pointLongitude' distance' accuracy
Long Parameter List,SolrNet,SolrQueryByRange<RT>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\SolrQueryByRange.cs,SolrQueryByRange,The method has 5 parameters. Parameters: fieldName' from' to' inclusiveFrom' inclusiveTo
Long Parameter List,SolrNet.Commands.Cores,CreateCommand,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Commands\Cores\CreateCommand.cs,CreateCommand,The method has 5 parameters. Parameters: name' instanceDir' configFile' schemaFile' dataDir
Long Parameter List,SolrNet.Impl,AutoSolrConnection,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\AutoSolrConnection.cs,PostStreamAsStreamAsync,The method has 5 parameters. Parameters: relativeUrl' contentType' content' getParameters' cancellationToken
Long Parameter List,SolrNet.Impl,ReplicationDetailsResponse,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\ReplicationDetailsResponse.cs,ReplicationDetailsResponse,The method has 10 parameters. Parameters: ResponseHeader' IndexSize' IndexPath' IsMaster' IsSlave' IndexVersion' Generation' IsReplicating' TotalPercent' TimeRemaining
Long Parameter List,SolrNet.Impl,SolrBasicServer<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrBasicServer.cs,SolrBasicServer,The method has 8 parameters. Parameters: connection' queryExecuter' documentSerializer' schemaParser' headerParser' querySerializer' dihStatusParser' extractResponseParser
Long Parameter List,SolrNet.Impl,SolrCoreAdmin,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrCoreAdmin.cs,Create,The method has 5 parameters. Parameters: coreName' instanceDir' configFile' schemaFile' dataDir
Long Parameter List,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,SolrQueryExecuter,The method has 5 parameters. Parameters: resultParser' connection' querySerializer' facetQuerySerializer' mlthResultParser
Long Parameter List,SolrNet.Impl,TermVectorResult,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\TermVectorDocumentResult.cs,TermVectorResult,The method has 7 parameters. Parameters: field' term' tf' df' tfIdf' offsets' positions
Long Parameter List,SolrNet.Impl.QuerySerializers,RangeQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\QuerySerializers\RangeQuerySerializer.cs,BuildRange,The method has 5 parameters. Parameters: fieldName' from' to' inclusiveFrom' inclusiveTo
Long Identifier,SolrNet.Mapping.Validation.Rules,RequiredFieldsAreMappedRule,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\RequiredFieldsAreMappedRule.cs,Validate,The length of the parameter fieldFoundInMappingOrCopyFields is 31.
Long Statement,SolrNet,Money,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Money.cs,ToString,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' "{0}{1}{2}"' Value' string.IsNullOrEmpty(Currency) ? "" : "'"' Currency); " is 124.
Long Statement,SolrNet,SolrNet,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\SolrNet.cs,GetBasicServer,The length of the statement  "            ISolrMoreLikeThisHandlerQueryResultsParser<T> mlthResultParser = new SolrMoreLikeThisHandlerQueryResultsParser<T>(new[] {resultParser}); " is 136.
Long Statement,SolrNet,SolrNet,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\SolrNet.cs,GetBasicServer,The length of the statement  "            ISolrQueryExecuter<T> executor = new SolrQueryExecuter<T>(resultParser' connection' querySerializer' facetQuerySerializer' mlthResultParser); " is 141.
Long Statement,SolrNet,SolrNet,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\SolrNet.cs,GetBasicServer,The length of the statement  "            ISolrBasicOperations<T> basicServer = new SolrBasicServer<T>(connection' executor' documentSerializer' schemaParser' headerParser' querySerializer' dihStatusParser' extractResponseParser); " is 188.
Long Statement,SolrNet.Commands,AtomicUpdateCommand,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Commands\AtomicUpdateCommand.cs,GetAtomicUpdateJson,The length of the statement  "                json += "'" + JsonConvert.SerializeObject(updateSpec.Field) + ":{\"" + updateSpec.Type.ToString().ToLowerInvariant() + "\":" + JsonConvert.SerializeObject(updateSpec.Value) + "}"; " is 179.
Long Statement,SolrNet.Commands,ExtractCommand,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Commands\ExtractCommand.cs,ConvertToQueryParameters,The length of the statement  "                        throw new ArgumentException("ExtractField named 'id' is not permitted in ExtractParameters.Fields - use ExtractParameters.Id instead"); " is 135.
Long Statement,SolrNet.Impl,AutoSolrConnection,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\AutoSolrConnection.cs,PostAsync,The length of the statement  "                using (var responseStream = await PostStreamAsStreamAsync(relativeUrl' "text/xml; charset=utf-8"' content' null' cancellationToken)) " is 132.
Long Statement,SolrNet.Impl,AutoSolrConnection,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\AutoSolrConnection.cs,PostStreamAsync,The length of the statement  "            using (var responseStream = await PostStreamAsStreamAsync(relativeUrl' contentType' content' getParameters' CancellationToken.None)) " is 132.
Long Statement,SolrNet.Impl,SolrBasicServer<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrBasicServer.cs,GetSchemaAsync,The length of the statement  "            string schemaXml = await connection.GetAsync("/admin/file"' new[] { new KeyValuePair<string' string>("file"' schemaFileName) }); " is 128.
Long Statement,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The length of the statement  "                            result.TimeElapsed = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1])); " is 221.
Long Statement,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The length of the statement  "                            result.TimeTaken = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1])); " is 219.
Long Statement,SolrNet.Impl,SolrQueryExecuter<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrQueryExecuter.cs,GetTermVectorParameterOptions,The length of the statement  "                if ((o & TermVectorParameterOptions.TermFrequency_InverseDocumentFrequency) == TermVectorParameterOptions.TermFrequency_InverseDocumentFrequency) { " is 147.
Long Statement,SolrNet.Impl,SolrServer<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrServer.cs,Delete,The length of the statement  "                    throw new SolrNetException(string.Format("This operation requires a unique key' but type '{0}' has no declared unique key"' typeof(T))); " is 136.
Long Statement,SolrNet.Impl,SolrServer<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrServer.cs,GetId,The length of the statement  "                throw new SolrNetException(string.Format("This operation requires a unique key' but type '{0}' has no declared unique key"' typeof(T))); " is 136.
Long Statement,SolrNet.Impl.DocumentPropertyVisitors,RegularDocumentVisitor,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\DocumentPropertyVisitors\RegularDocumentVisitor.cs,Visit,The length of the statement  "                    throw new ArgumentException(string.Format("Could not convert value '{0}' to property '{1}' of document type {2}"' v' thisField.Property.Name' thisField.Property.DeclaringType)' e); " is 180.
Long Statement,SolrNet.Impl.FacetQuerySerializers,SolrFacetDateQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FacetQuerySerializers\SolrFacetDateQuerySerializer.cs,Serialize,The length of the statement  "                yield return KV.Create(string.Format("f.{0}.facet.date.hardend"' fieldWithoutLocalParams)' SerializeSingle(q.HardEnd.Value)); " is 125.
Long Statement,SolrNet.Impl.FacetQuerySerializers,SolrFacetFieldQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FacetQuerySerializers\SolrFacetFieldQuerySerializer.cs,Serialize,The length of the statement  "                yield return KV.Create(string.Format("f.{0}.facet.sort"' fieldWithoutLocalParams)' q.Sort.ToString().ToLowerInvariant()); " is 121.
Long Statement,SolrNet.Impl.FacetQuerySerializers,SolrFacetFieldQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FacetQuerySerializers\SolrFacetFieldQuerySerializer.cs,Serialize,The length of the statement  "                yield return KV.Create(string.Format("f.{0}.facet.missing"' fieldWithoutLocalParams)' q.Missing.ToString().ToLowerInvariant()); " is 127.
Long Statement,SolrNet.Impl.FacetQuerySerializers,SolrFacetFieldQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FacetQuerySerializers\SolrFacetFieldQuerySerializer.cs,Serialize,The length of the statement  "                yield return KV.Create(string.Format("f.{0}.facet.enum.cache.minDf"' fieldWithoutLocalParams)' q.EnumCacheMinDf.ToString()); " is 124.
Long Statement,SolrNet.Impl.FacetQuerySerializers,SolrFacetFieldQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FacetQuerySerializers\SolrFacetFieldQuerySerializer.cs,Serialize,The length of the statement  "                yield return KV.Create(string.Format("f.{0}.facet.contains.ignoreCase"' fieldWithoutLocalParams)' q.ContainsIgnoreCase.ToString().ToLowerInvariant()); " is 150.
Long Statement,SolrNet.Impl.FacetQuerySerializers,SolrFacetFieldQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FacetQuerySerializers\SolrFacetFieldQuerySerializer.cs,Serialize,The length of the statement  "                yield return KV.Create(string.Format("f.{0}.facet.exists"' fieldWithoutLocalParams)' q.Exists.ToString().ToLowerInvariant()); " is 125.
Long Statement,SolrNet.Impl.FacetQuerySerializers,SolrFacetRangeQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FacetQuerySerializers\SolrFacetRangeQuerySerializer.cs,Serialize,The length of the statement  "                yield return KV.Create(string.Format("f.{0}.facet.range.hardend"' fieldWithoutLocalParams)' SerializeSingle(q.HardEnd.Value)); " is 126.
Long Statement,SolrNet.Impl.FieldParsers,DateTimeFieldParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FieldParsers\DateTimeFieldParser.cs,ParseDate,The length of the statement  "            if (!DateTime.TryParseExact(s' "yyyy-MM-dd'T'HH:mm:ss.FFF'Z'"' CultureInfo.InvariantCulture' DateTimeStyles.None' out result)) " is 126.
Long Statement,SolrNet.Impl.QuerySerializers,BoostQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\QuerySerializers\BoostQuerySerializer.cs,Serialize,The length of the statement  "            return string.Format("({0})^{1}"' serializer.Serialize(q.Query)' q.Factor.ToString(CultureInfo.InvariantCulture.NumberFormat)); " is 127.
Long Statement,SolrNet.Impl.QuerySerializers,ConstantScoreQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\QuerySerializers\ConstantScoreQuerySerializer.cs,Serialize,The length of the statement  "            return string.Format("({0})^={1}"' serializer.Serialize(q.Query)' q.Score.ToString(CultureInfo.InvariantCulture.NumberFormat)); " is 127.
Long Statement,SolrNet.Impl.QuerySerializers,DateTimeRangeQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\QuerySerializers\DateTimeRangeQuerySerializer.cs,Serialize,The length of the statement  "            return RangeQuerySerializer.BuildRange(q.FieldName' SerializeSingle(q.From)' SerializeSingle(q.To)' q.InclusiveFrom' q.InclusiveTo); " is 132.
Long Statement,SolrNet.Impl.QuerySerializers,NullableDateTimeRangeQuerySerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\QuerySerializers\NullableDateTimeRangeQuerySerializer.cs,Serialize,The length of the statement  "            return RangeQuerySerializer.BuildRange(q.FieldName' SerializeSingle(q.From)' SerializeSingle(q.To)' q.InclusiveFrom' q.InclusiveTo); " is 132.
Long Statement,SolrNet.Impl.QuerySerializers,QueryByFieldSerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\QuerySerializers\QueryByFieldSerializer.cs,Serialize,The length of the statement  "            return q.Quoted ? string.Format("{0}:({1})"' EscapeSpaces(q.FieldName)' Quote(q.FieldValue)) : string.Format("{0}:({1})"' q.FieldName' q.FieldValue); " is 149.
Long Statement,SolrNet.Impl.QuerySerializers,QueryInListSerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\QuerySerializers\QueryInListSerializer.cs,Serialize,The length of the statement  "            return "(" + serializer.Serialize(new SolrQueryByField(QueryByFieldSerializer.EscapeSpaces(q.FieldName)'string.Join(" OR "'array)){Quoted = false}) + ")"; " is 154.
Long Statement,SolrNet.Impl.ResponseParsers,ReplicationDetailsResponseParser<T>,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\ResponseParsers\ReplicationDetailsResponseParser.cs,Parse,The length of the statement  "            return new ReplicationDetailsResponse(responseHeader' indexSize' indexPath' isMaster' isSlave' indexVersion' generation' isReplicating' totalPercent' timeRemaining);" is 165.
Long Statement,SolrNet.Mapping,AttributesMappingManager,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\AttributesMappingManager.cs,GetFields,The length of the statement  "                throw new SolrNetException($"Type {type.Name} contains duplicate fields: {string.Join("' "' fieldNameCounts.Where(k=>k.Count() > 1).Select(k=>k.Key))}"); " is 153.
Long Statement,SolrNet.Mapping,MappingManager,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\MappingManager.cs,SetUniqueKey,The length of the statement  "                throw new ArgumentException(string.Format("Property '{0}.{1}' not mapped. Please use Add() to map it first"' declaringType' property.Name)); " is 140.
Long Statement,SolrNet.Mapping,MappingManager,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\MappingManager.cs,SetUniqueKey,The length of the statement  "                throw new ArgumentException(string.Format("Property '{0}.{1}' not mapped. Please use Add() to map it first"' declaringType' property.Name)); " is 140.
Long Statement,SolrNet.Mapping.Validation.Rules,AbstractSolrFieldTypeChecker,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\AbstractSolrFieldTypeChecker.cs,Validate,The length of the statement  "                return new ValidationWarning(String.Format("Property '{0}' of type '{1}' is mapped to a solr field of type '{2}'. These types are not fully compatible."' propertyName' propertyType.FullName' solrFieldType.Name)); " is 212.
Long Statement,SolrNet.Mapping.Validation.Rules,AbstractSolrFieldTypeChecker,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\AbstractSolrFieldTypeChecker.cs,Validate,The length of the statement  "            return new ValidationError(String.Format("Property '{0}' of type '{1}' cannot be stored in solr field type '{2}'."' propertyName' propertyType.FullName' solrFieldType.Name)); " is 174.
Long Statement,SolrNet.Mapping.Validation.Rules,DecimalSolrFieldTypeChecker,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\DecimalSolrFieldTypeChecker.cs,Validate,The length of the statement  "                return new ValidationWarning(String.Format("Property '{0}' of type '{1}' is mapped to a solr field of type '{2}'. These types are not fully compatible. You won't be able to use this field for range queries."' propertyName' propertyType.FullName' solrFieldType.Name)); " is 267.
Long Statement,SolrNet.Mapping.Validation.Rules,DecimalSolrFieldTypeChecker,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\DecimalSolrFieldTypeChecker.cs,Validate,The length of the statement  "                return new ValidationWarning(String.Format("Property '{0}' of type '{1}' is mapped to a solr field of type '{2}'. These types are not fully compatible. You might lose precision or get OverflowExceptions"' propertyName' propertyType.FullName' solrFieldType.Name)); " is 263.
Long Statement,SolrNet.Mapping.Validation.Rules,DecimalSolrFieldTypeChecker,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\DecimalSolrFieldTypeChecker.cs,Validate,The length of the statement  "            return new ValidationError(String.Format("Property '{0}' of type '{1}' cannot be stored in solr field type '{2}'."' propertyName' propertyType.FullName' solrFieldType.Name)); " is 174.
Long Statement,SolrNet.Mapping.Validation.Rules,MappedPropertiesIsInSolrSchemaRule,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\MappedPropertiesIsInSolrSchemaRule.cs,Validate,The length of the statement  "                    yield return new ValidationError(String.Format("No matching SolrField or DynamicField '{0}' found in the Solr schema for document property '{1}' in type '{2}'."' " is 161.
Long Statement,SolrNet.Mapping.Validation.Rules,MultivaluedMappedToCollectionRule,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\MultivaluedMappedToCollectionRule.cs,Validate,The length of the statement  "                    yield return new ValidationError(String.Format("SolrField '{0}' is multivalued while property '{1}.{2}' is not mapped as a collection."' solrField.Name' prop.Value.Property.DeclaringType' prop.Value.Property.Name)); " is 215.
Long Statement,SolrNet.Mapping.Validation.Rules,MultivaluedMappedToCollectionRule,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\MultivaluedMappedToCollectionRule.cs,Validate,The length of the statement  "                    yield return new ValidationError(String.Format("SolrField '{0}' is not multivalued while property '{1}.{2}' is mapped as a collection."' solrField.Name' prop.Value.Property.DeclaringType' prop.Value.Property.Name)); " is 215.
Long Statement,SolrNet.Mapping.Validation.Rules,UniqueKeyMatchesMappingRule,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\UniqueKeyMatchesMappingRule.cs,Validate,The length of the statement  "                yield return new ValidationWarning(string.Format("Solr schema has unique key field '{0}' but mapped type '{1}' doesn't have a declared unique key"' solrSchema.UniqueKey' documentType)); " is 185.
Long Statement,SolrNet.Mapping.Validation.Rules,UniqueKeyMatchesMappingRule,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\UniqueKeyMatchesMappingRule.cs,Validate,The length of the statement  "                yield return new ValidationError(string.Format("Type '{0}' has a declared unique key '{1}' but Solr schema doesn't have a unique key"' documentType' mappedKey.FieldName)); " is 171.
Long Statement,SolrNet.Mapping.Validation.Rules,UniqueKeyMatchesMappingRule,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\Validation\Rules\UniqueKeyMatchesMappingRule.cs,Validate,The length of the statement  "                yield return new ValidationError(String.Format("Solr schema unique key '{0}' does not match document unique key '{1}' in type '{2}'."' solrSchema.UniqueKey' mappedKey' documentType)); " is 183.
Long Statement,SolrNet.Schema,SolrSchemaParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Schema\SolrSchemaParser.cs,Parse,The length of the statement  "                field.IsRequired = fieldNode.Attribute("required") != null ? fieldNode.Attribute("required").Value.ToLower().Equals(Boolean.TrueString.ToLower()) : false; " is 154.
Long Statement,SolrNet.Schema,SolrSchemaParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Schema\SolrSchemaParser.cs,Parse,The length of the statement  "                field.IsMultiValued = fieldNode.Attribute("multiValued") != null ? fieldNode.Attribute("multiValued").Value.ToLower().Equals(Boolean.TrueString.ToLower()) : false; " is 163.
Long Statement,SolrNet.Schema,SolrSchemaParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Schema\SolrSchemaParser.cs,Parse,The length of the statement  "                field.IsStored = fieldNode.Attribute("stored") != null ? fieldNode.Attribute("stored").Value.ToLower().Equals(Boolean.TrueString.ToLower()) : false; " is 148.
Long Statement,SolrNet.Schema,SolrSchemaParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Schema\SolrSchemaParser.cs,Parse,The length of the statement  "                field.IsIndexed = fieldNode.Attribute("indexed") != null ? fieldNode.Attribute("indexed").Value.ToLower().Equals(Boolean.TrueString.ToLower()) : false; " is 151.
Long Statement,SolrNet.Schema,SolrSchemaParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Schema\SolrSchemaParser.cs,Parse,The length of the statement  "                field.IsDocValues = fieldNode.Attribute("docValues") != null ? fieldNode.Attribute("docValues").Value.ToLower().Equals(Boolean.TrueString.ToLower()) : false;  " is 157.
Complex Conditional,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||                 (c < 'A' && c > '9') ||                 (c > 'Z' && c < 'a') ||                 (c > 'z')"  is complex.
Complex Conditional,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Empty Catch Block,SolrNet.Mapping,AttributesMappingManager,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\AttributesMappingManager.cs,GetRegisteredTypes,The method has an empty catch block.
Empty Catch Block,SolrNet.Mapping,AttributesMappingManager,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Mapping\AttributesMappingManager.cs,GetRegisteredTypes,The method has an empty catch block.
Magic Number,SolrNet,Location,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Location.cs,IsValidLatitude,The following statement contains a magic number: return latitude >= -90 && latitude <= 90;
Magic Number,SolrNet,Location,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Location.cs,IsValidLatitude,The following statement contains a magic number: return latitude >= -90 && latitude <= 90;
Magic Number,SolrNet,Location,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Location.cs,IsValidLongitude,The following statement contains a magic number: return longitude >= -180 && longitude <= 180;
Magic Number,SolrNet,Location,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Location.cs,IsValidLongitude,The following statement contains a magic number: return longitude >= -180 && longitude <= 180;
Magic Number,SolrNet,Location,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Location.cs,GetHashCode,The following statement contains a magic number: return (Latitude.GetHashCode()*397) ^ Longitude.GetHashCode();
Magic Number,SolrNet,SortOrder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\SortOrder.cs,GetHashCode,The following statement contains a magic number: return ((fieldName != null ? fieldName.GetHashCode() : 0)*397) ^ order.GetHashCode();
Magic Number,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The following statement contains a magic number: switch (fieldNode.Attribute("name").Value) {                      case "Time Elapsed":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeElapsed = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                                                    break;                      case "Total Requests made to DataSource":                          result.TotalRequestToDataSource = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Rows Fetched":                          result.TotalRowsFetched = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Processed":                          result.TotalDocumentsProcessed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Skipped":                          result.TotalDocumentsSkipped = Convert.ToInt32(fieldNode.Value);                            break;                      case "Full Dump Started":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.FullDumpStarted = tempDate;                                                    break;                      case "Committed":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.Committed = tempDate;                            break;                      case "Optimized":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                              result.Optimized = tempDate;                            break;                      case "Total Documents Failed":                          result.TotalDocumentsFailed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Time taken ":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeTaken = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                            break;                      case "":                          result.Summary = fieldNode.Value;                          break;                  }
Magic Number,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The following statement contains a magic number: switch (fieldNode.Attribute("name").Value) {                      case "Time Elapsed":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeElapsed = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                                                    break;                      case "Total Requests made to DataSource":                          result.TotalRequestToDataSource = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Rows Fetched":                          result.TotalRowsFetched = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Processed":                          result.TotalDocumentsProcessed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Skipped":                          result.TotalDocumentsSkipped = Convert.ToInt32(fieldNode.Value);                            break;                      case "Full Dump Started":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.FullDumpStarted = tempDate;                                                    break;                      case "Committed":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.Committed = tempDate;                            break;                      case "Optimized":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                              result.Optimized = tempDate;                            break;                      case "Total Documents Failed":                          result.TotalDocumentsFailed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Time taken ":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeTaken = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                            break;                      case "":                          result.Summary = fieldNode.Value;                          break;                  }
Magic Number,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The following statement contains a magic number: switch (fieldNode.Attribute("name").Value) {                      case "Time Elapsed":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeElapsed = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                                                    break;                      case "Total Requests made to DataSource":                          result.TotalRequestToDataSource = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Rows Fetched":                          result.TotalRowsFetched = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Processed":                          result.TotalDocumentsProcessed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Skipped":                          result.TotalDocumentsSkipped = Convert.ToInt32(fieldNode.Value);                            break;                      case "Full Dump Started":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.FullDumpStarted = tempDate;                                                    break;                      case "Committed":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.Committed = tempDate;                            break;                      case "Optimized":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                              result.Optimized = tempDate;                            break;                      case "Total Documents Failed":                          result.TotalDocumentsFailed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Time taken ":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeTaken = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                            break;                      case "":                          result.Summary = fieldNode.Value;                          break;                  }
Magic Number,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The following statement contains a magic number: switch (fieldNode.Attribute("name").Value) {                      case "Time Elapsed":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeElapsed = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                                                    break;                      case "Total Requests made to DataSource":                          result.TotalRequestToDataSource = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Rows Fetched":                          result.TotalRowsFetched = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Processed":                          result.TotalDocumentsProcessed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Skipped":                          result.TotalDocumentsSkipped = Convert.ToInt32(fieldNode.Value);                            break;                      case "Full Dump Started":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.FullDumpStarted = tempDate;                                                    break;                      case "Committed":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.Committed = tempDate;                            break;                      case "Optimized":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                              result.Optimized = tempDate;                            break;                      case "Total Documents Failed":                          result.TotalDocumentsFailed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Time taken ":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeTaken = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                            break;                      case "":                          result.Summary = fieldNode.Value;                          break;                  }
Magic Number,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The following statement contains a magic number: switch (fieldNode.Attribute("name").Value) {                      case "Time Elapsed":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeElapsed = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                                                    break;                      case "Total Requests made to DataSource":                          result.TotalRequestToDataSource = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Rows Fetched":                          result.TotalRowsFetched = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Processed":                          result.TotalDocumentsProcessed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Skipped":                          result.TotalDocumentsSkipped = Convert.ToInt32(fieldNode.Value);                            break;                      case "Full Dump Started":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.FullDumpStarted = tempDate;                                                    break;                      case "Committed":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.Committed = tempDate;                            break;                      case "Optimized":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                              result.Optimized = tempDate;                            break;                      case "Total Documents Failed":                          result.TotalDocumentsFailed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Time taken ":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeTaken = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                            break;                      case "":                          result.Summary = fieldNode.Value;                          break;                  }
Magic Number,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The following statement contains a magic number: switch (fieldNode.Attribute("name").Value) {                      case "Time Elapsed":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeElapsed = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                                                    break;                      case "Total Requests made to DataSource":                          result.TotalRequestToDataSource = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Rows Fetched":                          result.TotalRowsFetched = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Processed":                          result.TotalDocumentsProcessed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Skipped":                          result.TotalDocumentsSkipped = Convert.ToInt32(fieldNode.Value);                            break;                      case "Full Dump Started":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.FullDumpStarted = tempDate;                                                    break;                      case "Committed":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.Committed = tempDate;                            break;                      case "Optimized":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                              result.Optimized = tempDate;                            break;                      case "Total Documents Failed":                          result.TotalDocumentsFailed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Time taken ":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeTaken = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                            break;                      case "":                          result.Summary = fieldNode.Value;                          break;                  }
Magic Number,SolrNet.Impl.FieldParsers,DateTimeFieldParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FieldParsers\DateTimeFieldParser.cs,ParseDate,The following statement contains a magic number: s = p[0].PadLeft(4' '0') + '-' + string.Join("-"' p.Skip(1).ToArray());
Magic Number,SolrNet.Impl.FieldParsers,LocationFieldParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\FieldParsers\LocationFieldParser.cs,Parse,The following statement contains a magic number: m.Length != 2
Magic Number,SolrNet.Impl.QuerySerializers,QueryByFieldRegexSerializer,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\QuerySerializers\QueryByFieldRegexSerializer.cs,Serialize,The following statement contains a magic number: expression = expression.Substring(1'expression.Length-2);
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: (ch < 32 && ch != 9) || ch == 127
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: (ch < 32 && ch != 9) || ch == 127
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: (ch < 32 && ch != 9) || ch == 127
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: c == '&' || c == '"' || c == '<' || c == '>' || c > 159
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: switch (s[i]) {                     case '&':                         output.Append("&amp;");                         break;                     case '>':                         output.Append("&gt;");                         break;                     case '<':                         output.Append("&lt;");                         break;                     case '"':                         output.Append("&quot;");                         break; #if NET_4_0 					case '\'': 						output.Append ("&#39;"); 						break; #endif                     case '\uff1c':                         output.Append("&#65308;");                         break;                      case '\uff1e':                         output.Append("&#65310;");                         break;                      default:                         ch = s[i];                         if (ch > 159 && ch < 256) {                             output.Append("&#");                             output.Append(((int)ch).ToString(CultureInfo.InvariantCulture));                             output.Append(";");                         } else                             output.Append(ch);                         break;                 }
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: switch (s[i]) {                     case '&':                         output.Append("&amp;");                         break;                     case '>':                         output.Append("&gt;");                         break;                     case '<':                         output.Append("&lt;");                         break;                     case '"':                         output.Append("&quot;");                         break; #if NET_4_0 					case '\'': 						output.Append ("&#39;"); 						break; #endif                     case '\uff1c':                         output.Append("&#65308;");                         break;                      case '\uff1e':                         output.Append("&#65310;");                         break;                      default:                         ch = s[i];                         if (ch > 159 && ch < 256) {                             output.Append("&#");                             output.Append(((int)ch).ToString(CultureInfo.InvariantCulture));                             output.Append(";");                         } else                             output.Append(ch);                         break;                 }
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: idx = i >> 12;
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 8) & 0x0F;
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 4) & 0x0F;
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: c > 255
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: isUnicode && c > 127
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: int idx = ((int)c) >> 4;
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: int idx = ((int)bIn[i]) >> 4;
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: c < 33 || c > 126
Magic Number,SolrNet.Utils,HttpEncoder,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: c < 33 || c > 126
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: ch > 255
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar(s' i + 2' 4);
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar(s' i + 2' 4);
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 5;
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: s[i + 1] == 'u' && i + 5 < len
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: ch == '%' && i + 2 < len && s[i + 1] != '%'
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,GetInt,The following statement contains a magic number: return c - 'a' + 10;
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,GetInt,The following statement contains a magic number: return c - 'A' + 10;
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,GetChar,The following statement contains a magic number: value = (value << 4) + current;
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,GetChar,The following statement contains a magic number: c > 127
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,GetChar,The following statement contains a magic number: val = (val << 4) + current;
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar(bytes' i + 2' 4);
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar(bytes' i + 2' 4);
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 5;
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: bytes[i + 1] == (byte) 'u' && i + 5 < end
Magic Number,SolrNet.Utils,HttpUtility,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\HttpUtility.cs,UrlDecode,The following statement contains a magic number: bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%'
Magic Number,SolrNet.Utils,Tuple2,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Utils\Memoizer.cs,GetHashCode,The following statement contains a magic number: return (first.GetHashCode()*397) ^ second.GetHashCode();
Missing Default,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The following switch statement is missing a default case: switch (fieldNode.Attribute("name").Value) {                      case "status":                          switch (fieldNode.Value) {                              case "idle":                                  result.Status = DIHStatus.IDLE;                                  break;                              case "busy":                                  result.Status = DIHStatus.BUSY;                                  break;                          }                          break;                      case "importResponse":                          result.ImportResponse = fieldNode.Value;                          break;                  }
Missing Default,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The following switch statement is missing a default case: switch (fieldNode.Value) {                              case "idle":                                  result.Status = DIHStatus.IDLE;                                  break;                              case "busy":                                  result.Status = DIHStatus.BUSY;                                  break;                          }
Missing Default,SolrNet.Impl,SolrDIHStatusParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrDIHStatusParser.cs,Parse,The following switch statement is missing a default case: switch (fieldNode.Attribute("name").Value) {                      case "Time Elapsed":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeElapsed = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                                                    break;                      case "Total Requests made to DataSource":                          result.TotalRequestToDataSource = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Rows Fetched":                          result.TotalRowsFetched = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Processed":                          result.TotalDocumentsProcessed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Total Documents Skipped":                          result.TotalDocumentsSkipped = Convert.ToInt32(fieldNode.Value);                            break;                      case "Full Dump Started":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.FullDumpStarted = tempDate;                                                    break;                      case "Committed":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                               result.Committed = tempDate;                            break;                      case "Optimized":                          if (DateTime.TryParse(fieldNode.Value' out tempDate))                              result.Optimized = tempDate;                            break;                      case "Total Documents Failed":                          result.TotalDocumentsFailed = Convert.ToInt32(fieldNode.Value);                            break;                      case "Time taken ":                          tempTimeSpanSplit = fieldNode.Value.Split(':');                          if (tempTimeSpanSplit.Length == 3)                              result.TimeTaken = new TimeSpan(0' Convert.ToInt32(tempTimeSpanSplit[0])' Convert.ToInt32(tempTimeSpanSplit[1])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[0])' Convert.ToInt32(tempTimeSpanSplit[2].Split('.')[1]));                            break;                      case "":                          result.Summary = fieldNode.Value;                          break;                  }
Missing Default,SolrNet.Impl,SolrStatusResponseParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrStatusResponseParser.cs,ParseCore,The following switch statement is missing a default case: switch (propNode.Attribute("name").Value.ToLower()) {                      case "name":                          if (!string.IsNullOrEmpty(nodeValue))                              core.Name = nodeValue;                          break;                      case "isdefaultcore":                          core.IsDefaultCore = bool.Parse(nodeValue);                          break;                      case "instancedir":                          if (!string.IsNullOrEmpty(nodeValue))                              core.InstanceDir = nodeValue;                          break;                      case "datadir":                          if (!string.IsNullOrEmpty(nodeValue))                              core.DataDir = nodeValue;                          break;                      case "starttime":                          if (!string.IsNullOrEmpty(nodeValue))                              core.StartTime = DateTime.Parse(nodeValue);                          break;                      case "uptime":                          if (!string.IsNullOrEmpty(nodeValue))                              core.Uptime = long.Parse(nodeValue);                          break;                      case "index":                          // Parse all Index responses.                          core.Index = ParseCoreIndex(propNode);                          break;                  }
Missing Default,SolrNet.Impl,SolrStatusResponseParser,D:\research\architectureSmells\repos\mausch_SolrNet\SolrNet\Impl\SolrStatusResponseParser.cs,ParseCoreIndex,The following switch statement is missing a default case: switch (indexNode.Attribute("name").Value.ToLower()) {                      case "numdocs":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.SearchableDocumentCount = long.Parse(nodeValue);                          break;                      case "maxdoc":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.TotalDocumentCount = long.Parse(nodeValue);                          break;                      case "version":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.Version = long.Parse(nodeValue);                          break;                      case "segmentcount":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.SegmentCount = int.Parse(nodeValue);                          break;                      case "current":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.IsCurrent = bool.Parse(nodeValue);                          break;                      case "hasdeletions":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.HasDeletions = bool.Parse(nodeValue);                          break;                      case "optimized":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.IsOptimized = bool.Parse(nodeValue);                          break;                      case "directory":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.Directory = nodeValue;                          break;                      case "lastmodified":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.LastModified = DateTime.Parse(nodeValue);                          break;                      case "sizeinbytes":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.SizeInBytes = long.Parse(nodeValue);                          break;                      case "size":                          if (!string.IsNullOrEmpty(nodeValue))                              coreIndex.Size = nodeValue;                          break;                  }
