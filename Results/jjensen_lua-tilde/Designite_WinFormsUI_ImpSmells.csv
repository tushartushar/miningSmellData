Implementation smell,Namespace,Class,File,Method,Description
Long Method,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,SaveAsXml,The method has 120 lines of code.
Long Method,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFromXml,The method has 177 lines of code.
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,IsClipRectsChanged,Cyclomatic complexity of the method is 10
Complex Method,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,AnimateWindow,Cyclomatic complexity of the method is 15
Complex Method,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockAreasEditor.cs,SetStates,Cyclomatic complexity of the method is 8
Complex Method,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockContentHandler.cs,SetDockState,Cyclomatic complexity of the method is 15
Complex Method,WeifenLuo.WinFormsUI.Docking,DockDragHandler,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,TestDrop,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,ValidateActiveContent,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,SetDockState,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,RefreshStateChange,Cyclomatic complexity of the method is 13
Complex Method,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,SaveAsXml,Cyclomatic complexity of the method is 11
Complex Method,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFromXml,Cyclomatic complexity of the method is 38
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,CalculateTabs_ToolWindow,Cyclomatic complexity of the method is 13
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,Cyclomatic complexity of the method is 8
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,DockPane,The method has 5 parameters. Parameters: content' previousPane' alignment' proportion' show
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,InternalConstruct,The method has 8 parameters. Parameters: content' dockState' flagBounds' floatWindowBounds' prevPane' alignment' proportion' show
Long Parameter List,WeifenLuo.WinFormsUI.Docking,IDockPaneFactory,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanelExtender.cs,CreateDockPane,The method has 5 parameters. Parameters: content' previousPane' alignment' proportion' show
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DefaultDockPaneFactory,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanelExtender.cs,CreateDockPane,The method has 5 parameters. Parameters: content' prevPane' alignment' proportion' show
Long Parameter List,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,SetBoundsCore,The method has 5 parameters. Parameters: x' y' width' height' specified
Long Parameter List,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,MergeNestedPanes,The method has 5 parameters. Parameters: nestedPanesFrom' nestedPanesTo' prevPane' alignment' proportion
Long Parameter List,WeifenLuo.WinFormsUI.Docking,NativeMethods,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Win32\NativeMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndAfter' X' Y' Width' Height' flags
Long Identifier,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,,The length of the parameter m_dummyControlPaintEventHandler is 31.
Long Identifier,WeifenLuo.WinFormsUI.Docking,PaneIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,,The length of the parameter _bitmapPaneDiamondHotSpotIndex is 30.
Long Identifier,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,,The length of the parameter IsActiveDocumentPaneChangedEvent is 32.
Long Identifier,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,,The length of the parameter _ToolWindowTabSeperatorGapBottom is 32.
Long Identifier,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,,The length of the parameter _imageButtonWindowListOverflow is 30.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\AutoHideStripBase.cs,GetTabStripRectangle,The length of the statement  "				return new Rectangle(RectangleBottomLeft.Width' Height - height' Width - RectangleBottomLeft.Width - RectangleBottomRight.Width' height); " is 137.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\AutoHideStripBase.cs,GetTabStripRectangle,The length of the statement  "				return new Rectangle(Width - height' RectangleTopRight.Width' height' Height - RectangleTopRight.Height - RectangleBottomRight.Height); " is 135.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,AnimateWindow,The length of the statement  "                    Bounds = DockPanel.GetAutoHideWindowBounds(new Rectangle(-rectTarget.Width' -rectTarget.Height' rectTarget.Width' rectTarget.Height)); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,LayoutAnimateWindow,The length of the statement  "                    ActivePane.Location = new Point(rectClient.Right - 2 - Measures.SplitterSize - ActivePane.Width' ActivePane.Location.Y); " is 120.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,LayoutAnimateWindow,The length of the statement  "                    ActivePane.Location = new Point(ActivePane.Location.X' rectClient.Bottom - 2 - Measures.SplitterSize - ActivePane.Height); " is 122.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The length of the statement  "                Rectangle rectHidden = new Rectangle(-rectDisplaying.Width' rectDisplaying.Y' rectDisplaying.Width' rectDisplaying.Height); " is 123.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The length of the statement  "                    g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1); " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The length of the statement  "                    g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom); " is 120.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VisibleNestedPaneCollection.cs,Remove,The length of the statement  "				lastNestedDock.SetDisplayingStatus(true' statusPane.DisplayingPreviousPane' statusPane.DisplayingAlignment' statusPane.DisplayingProportion); " is 141.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "			this[0].NestedDockingStatus.SetDisplayingBounds(Container.DisplayingRectangle' Container.DisplayingRectangle' Rectangle.Empty); " is 127.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "				bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right); " is 129.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "					rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2); " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelLeft.Location = new Point(rectDockArea.X + _PanelIndicatorMargin' rectDockArea.Y + (rectDockArea.Height - PanelRight.Height) / 2); " is 135.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelRight.Location = new Point(rectDockArea.X + rectDockArea.Width - PanelRight.Width - _PanelIndicatorMargin' rectDockArea.Y + (rectDockArea.Height - PanelRight.Height) / 2); " is 176.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelTop.Location = new Point(rectDockArea.X + (rectDockArea.Width - PanelTop.Width) / 2' rectDockArea.Y + _PanelIndicatorMargin); " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelBottom.Location = new Point(rectDockArea.X + (rectDockArea.Width - PanelBottom.Width) / 2' rectDockArea.Y + rectDockArea.Height - PanelBottom.Height - _PanelIndicatorMargin); " is 179.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelFill.Location = new Point(rectDocumentWindow.X + (rectDocumentWindow.Width - PanelFill.Width) / 2' rectDocumentWindow.Y + (rectDocumentWindow.Height - PanelFill.Height) / 2); " is 179.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PaneDiamond.Location = new Point(rect.Left + (rect.Width - PaneDiamond.Width) / 2' rect.Top + (rect.Height - PaneDiamond.Height) / 2); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,PaneIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,HitTest,The length of the statement  "                            if (_bitmapPaneDiamondHotSpot.GetPixel(pt.X' pt.Y) == _bitmapPaneDiamondHotSpotIndex.GetPixel(_hotSpots[i].X' _hotSpots[i].Y)) " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockOutline,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,SetOutline,The length of the statement  "                            using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) })) " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\NestedPaneCollection.cs,Add,The length of the statement  "			NestedPaneCollection oldNestedPanes = (pane.NestedPanesContainer == null) ? null : pane.NestedPanesContainer.NestedPanes; " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,SetNestedDockingProportion,The length of the statement  "			NestedDockingStatus.SetStatus(NestedDockingStatus.NestedPanes' NestedDockingStatus.PreviousPane' NestedDockingStatus.Alignment' proportion); " is 140.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneCaption.cs,DrawCaption,The length of the statement  "                using (LinearGradientBrush brush = new LinearGradientBrush(ClientRectangle' ActiveBackColorGradientBegin' ActiveBackColorGradientEnd' LinearGradientMode.Vertical)) " is 163.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneCaption.cs,DrawCaption,The length of the statement  "            TextRenderer.DrawText(g' DockPane.CaptionText' TextFont' DrawHelper.RtlTransform(this' rectCaptionText)' TextColor' TextFormat); " is 128.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                xmlOut.WriteAttributeString("ActiveDocumentPane"' dockPanel.Panes.IndexOf(dockPanel.ActiveDocumentPane).ToString(CultureInfo.InvariantCulture)); " is 144.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                xmlOut.WriteAttributeString("ActivePane"' dockPanel.Panes.IndexOf(dockPanel.ActivePane).ToString(CultureInfo.InvariantCulture)); " is 128.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                    xmlOut.WriteAttributeString("AutoHidePortion"' content.DockHandler.AutoHidePortion.ToString(CultureInfo.InvariantCulture)); " is 123.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                    xmlOut.WriteAttributeString("ActiveContent"' dockPanel.Contents.IndexOf(pane.ActiveContent).ToString(CultureInfo.InvariantCulture)); " is 132.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                        xmlOut.WriteAttributeString("PrevPane"' dockPanel.Panes.IndexOf(status.PreviousPane).ToString(CultureInfo.InvariantCulture)); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                    xmlOut.WriteAttributeString("ZOrderIndex"' fw.DockPanel.FloatWindows.IndexOf(fw).ToString(CultureInfo.InvariantCulture)); " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                        xmlOut.WriteAttributeString("PrevPane"' dockPanel.Panes.IndexOf(status.PreviousPane).ToString(CultureInfo.InvariantCulture)); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadDockWindows,The length of the statement  "                        dockWindows[i].NestedPanes[j].IndexPrevPane = Convert.ToInt32(xmlIn.GetAttribute("PrevPane")' CultureInfo.InvariantCulture); " is 124.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadDockWindows,The length of the statement  "                        dockWindows[i].NestedPanes[j].Alignment = (DockAlignment)dockAlignmentConverter.ConvertFrom(xmlIn.GetAttribute("Alignment")); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadDockWindows,The length of the statement  "                        dockWindows[i].NestedPanes[j].Proportion = Convert.ToDouble(xmlIn.GetAttribute("Proportion")' CultureInfo.InvariantCulture); " is 124.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFloatWindows,The length of the statement  "                        floatWindows[i].NestedPanes[j].IndexPrevPane = Convert.ToInt32(xmlIn.GetAttribute("PrevPane")' CultureInfo.InvariantCulture); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFloatWindows,The length of the statement  "                        floatWindows[i].NestedPanes[j].Alignment = (DockAlignment)dockAlignmentConverter.ConvertFrom(xmlIn.GetAttribute("Alignment")); " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFloatWindows,The length of the statement  "                        floatWindows[i].NestedPanes[j].Proportion = Convert.ToDouble(xmlIn.GetAttribute("Proportion")' CultureInfo.InvariantCulture); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                dockPanelStruct.DockLeftPortion = Convert.ToDouble(xmlIn.GetAttribute("DockLeftPortion")' CultureInfo.InvariantCulture); " is 120.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                dockPanelStruct.DockRightPortion = Convert.ToDouble(xmlIn.GetAttribute("DockRightPortion")' CultureInfo.InvariantCulture); " is 122.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                dockPanelStruct.DockBottomPortion = Convert.ToDouble(xmlIn.GetAttribute("DockBottomPortion")' CultureInfo.InvariantCulture); " is 124.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                dockPanelStruct.IndexActiveDocumentPane = Convert.ToInt32(xmlIn.GetAttribute("ActiveDocumentPane")' CultureInfo.InvariantCulture); " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                    IDockContent content = contents[i].PersistType == null ? null : deserializeContent(contents[i].PersistType' contents[i].PersistString); " is 135.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                        DockPane prevPane = (indexPrevPane == -1) ? dw.NestedPanes.GetDefaultPreviousPane(pane) : dockPanel.Panes[indexPrevPane]; " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                    dockPanel.Panes[i].ActiveContent = panes[i].IndexActiveContent == -1 ? null : dockPanel.Contents[panes[i].IndexActiveContent]; " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockPaneStripBase,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPaneStripBase.cs,OnMouseDown,The length of the statement  "                if (DockPane.DockPanel.AllowEndUserDocking && DockPane.AllowDockDragAndDrop && DockPane.ActiveContent.DockHandler.AllowEndUserDocking) " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetMaxTabWidth_Document,The length of the statement  "            Size sizeText = TextRenderer.MeasureText(content.DockHandler.TabText' BoldFont' new Size(DocumentTabMaxWidth' height)' DocumentTextFormat); " is 139.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabRectangle_Document,The length of the statement  "			return new Rectangle(tab.TabX' rectTabStrip.Y + DocumentTabGapTop' tab.TabWidth' rectTabStrip.Height - DocumentTabGapTop); " is 122.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                    GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2); " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                    GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                    GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2); " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                    GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,DrawTab_ToolWindow,The length of the statement  "                TextRenderer.DrawText(g' tab.Content.DockHandler.TabText' TextFont' rectText' ColorToolWindowActiveText' ToolWindowTextFormat); " is 127.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,DrawTab_ToolWindow,The length of the statement  "				TextRenderer.DrawText(g' tab.Content.DockHandler.TabText' TextFont' rectText' ColorToolWindowInactiveText' ToolWindowTextFormat); " is 129.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,DrawTab_Document,The length of the statement  "                    TextRenderer.DrawText(g' tab.Content.DockHandler.TabText' BoldFont' rectText' ColorDocumentActiveText' DocumentTextFormat); " is 123.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,DrawTab_Document,The length of the statement  "                    TextRenderer.DrawText(g' tab.Content.DockHandler.TabText' TextFont' rectText' ColorDocumentActiveText' DocumentTextFormat); " is 123.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,DrawTab_Document,The length of the statement  "                TextRenderer.DrawText(g' tab.Content.DockHandler.TabText' TextFont' rectText' ColorDocumentInactiveText' DocumentTextFormat); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockWindow.cs,OnPaint,The length of the statement  "                e.Graphics.DrawRectangle(SystemPens.ControlDark' ClientRectangle.X' ClientRectangle.Y' ClientRectangle.Width - 1' ClientRectangle.Height - 1); " is 142.
Long Statement,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,SetText,The length of the statement  "				Text = " ";	// use " " instead of string.Empty because the whole title bar will disappear when ControlBox is set to false. " is 122.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DragHandler,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DragHandler.cs,OnPreFilterMessage,The conditional expression  "(m.Msg == (int)Win32.Msgs.WM_KEYDOWN || m.Msg == (int)Win32.Msgs.WM_KEYUP) &&                      ((int)m.WParam == (int)Keys.ControlKey || (int)m.WParam == (int)Keys.ShiftKey)"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DockHelper.cs,IsDockStateAutoHide,The conditional expression  "dockState == DockState.DockLeftAutoHide ||  				dockState == DockState.DockRightAutoHide ||  				dockState == DockState.DockTopAutoHide ||  				dockState == DockState.DockBottomAutoHide"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DockHelper.cs,IsDockWindowState,The conditional expression  "state == DockState.DockTop || state == DockState.DockBottom || state == DockState.DockLeft ||  				state == DockState.DockRight || state == DockState.Document"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockOutlineBase,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockOutlineBase.cs,TestChange,The conditional expression  "m_floatWindowBounds != m_oldFloatWindowBounds ||                  m_dockTo != m_oldDockTo ||                  m_dock != m_oldDock ||                  m_contentIndex != m_oldContentIndex"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockPaneCaptionBase,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPaneCaptionBase.cs,OnMouseDown,The conditional expression  "e.Button == MouseButtons.Left &&  			    DockPane.DockPanel.AllowEndUserDocking &&                  DockPane.AllowDockDragAndDrop &&  				!DockHelper.IsDockStateAutoHide(DockPane.DockState) &&                  DockPane.ActiveContent != null"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The conditional expression  "Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockWindow.cs,DockWindow,The conditional expression  "DockState == DockState.DockLeft || DockState == DockState.DockRight ||  				DockState == DockState.DockTop || DockState == DockState.DockBottom"  is complex.
Virtual Method Call from Constructor,WeifenLuo.WinFormsUI.Docking,SplitterOutline,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,SplitterOutline,The constructor "SplitterOutline" calls a virtual method "Show".
Virtual Method Call from Constructor,WeifenLuo.WinFormsUI.Docking,DockOutline,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,DockOutline,The constructor "DockOutline" calls a virtual method "Show".
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,ShouldSerializeDefaultFloatWindowSize,The following statement contains a magic number: return DefaultFloatWindowSize != new Size(300' 300);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,ShouldSerializeDefaultFloatWindowSize,The following statement contains a magic number: return DefaultFloatWindowSize != new Size(300' 300);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,GetDockWindowSize,The following statement contains a magic number: if (dockState == DockState.DockLeft || dockState == DockState.DockRight)              {                  int width = ClientRectangle.Width - DockPadding.Left - DockPadding.Right;                  int dockLeftSize = m_dockLeftPortion >= 1 ? (int)m_dockLeftPortion : (int)(width * m_dockLeftPortion);                  int dockRightSize = m_dockRightPortion >= 1 ? (int)m_dockRightPortion : (int)(width * m_dockRightPortion);                    if (dockLeftSize < MeasurePane.MinSize)                      dockLeftSize = MeasurePane.MinSize;                  if (dockRightSize < MeasurePane.MinSize)                      dockRightSize = MeasurePane.MinSize;                    if (dockLeftSize + dockRightSize > width - MeasurePane.MinSize)                  {                      int adjust = (dockLeftSize + dockRightSize) - (width - MeasurePane.MinSize);                      dockLeftSize -= adjust / 2;                      dockRightSize -= adjust / 2;                  }                    return dockState == DockState.DockLeft ? dockLeftSize : dockRightSize;              }              else if (dockState == DockState.DockTop || dockState == DockState.DockBottom)              {                  int height = ClientRectangle.Height - DockPadding.Top - DockPadding.Bottom;                  int dockTopSize = m_dockTopPortion >= 1 ? (int)m_dockTopPortion : (int)(height * m_dockTopPortion);                  int dockBottomSize = m_dockBottomPortion >= 1 ? (int)m_dockBottomPortion : (int)(height * m_dockBottomPortion);                    if (dockTopSize < MeasurePane.MinSize)                      dockTopSize = MeasurePane.MinSize;                  if (dockBottomSize < MeasurePane.MinSize)                      dockBottomSize = MeasurePane.MinSize;                    if (dockTopSize + dockBottomSize > height - MeasurePane.MinSize)                  {                      int adjust = (dockTopSize + dockBottomSize) - (height - MeasurePane.MinSize);                      dockTopSize -= adjust / 2;                      dockBottomSize -= adjust / 2;                  }                    return dockState == DockState.DockTop ? dockTopSize : dockBottomSize;              }              else                  return 0;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,GetDockWindowSize,The following statement contains a magic number: if (dockState == DockState.DockLeft || dockState == DockState.DockRight)              {                  int width = ClientRectangle.Width - DockPadding.Left - DockPadding.Right;                  int dockLeftSize = m_dockLeftPortion >= 1 ? (int)m_dockLeftPortion : (int)(width * m_dockLeftPortion);                  int dockRightSize = m_dockRightPortion >= 1 ? (int)m_dockRightPortion : (int)(width * m_dockRightPortion);                    if (dockLeftSize < MeasurePane.MinSize)                      dockLeftSize = MeasurePane.MinSize;                  if (dockRightSize < MeasurePane.MinSize)                      dockRightSize = MeasurePane.MinSize;                    if (dockLeftSize + dockRightSize > width - MeasurePane.MinSize)                  {                      int adjust = (dockLeftSize + dockRightSize) - (width - MeasurePane.MinSize);                      dockLeftSize -= adjust / 2;                      dockRightSize -= adjust / 2;                  }                    return dockState == DockState.DockLeft ? dockLeftSize : dockRightSize;              }              else if (dockState == DockState.DockTop || dockState == DockState.DockBottom)              {                  int height = ClientRectangle.Height - DockPadding.Top - DockPadding.Bottom;                  int dockTopSize = m_dockTopPortion >= 1 ? (int)m_dockTopPortion : (int)(height * m_dockTopPortion);                  int dockBottomSize = m_dockBottomPortion >= 1 ? (int)m_dockBottomPortion : (int)(height * m_dockBottomPortion);                    if (dockTopSize < MeasurePane.MinSize)                      dockTopSize = MeasurePane.MinSize;                  if (dockBottomSize < MeasurePane.MinSize)                      dockBottomSize = MeasurePane.MinSize;                    if (dockTopSize + dockBottomSize > height - MeasurePane.MinSize)                  {                      int adjust = (dockTopSize + dockBottomSize) - (height - MeasurePane.MinSize);                      dockTopSize -= adjust / 2;                      dockBottomSize -= adjust / 2;                  }                    return dockState == DockState.DockTop ? dockTopSize : dockBottomSize;              }              else                  return 0;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,GetDockWindowSize,The following statement contains a magic number: if (dockState == DockState.DockLeft || dockState == DockState.DockRight)              {                  int width = ClientRectangle.Width - DockPadding.Left - DockPadding.Right;                  int dockLeftSize = m_dockLeftPortion >= 1 ? (int)m_dockLeftPortion : (int)(width * m_dockLeftPortion);                  int dockRightSize = m_dockRightPortion >= 1 ? (int)m_dockRightPortion : (int)(width * m_dockRightPortion);                    if (dockLeftSize < MeasurePane.MinSize)                      dockLeftSize = MeasurePane.MinSize;                  if (dockRightSize < MeasurePane.MinSize)                      dockRightSize = MeasurePane.MinSize;                    if (dockLeftSize + dockRightSize > width - MeasurePane.MinSize)                  {                      int adjust = (dockLeftSize + dockRightSize) - (width - MeasurePane.MinSize);                      dockLeftSize -= adjust / 2;                      dockRightSize -= adjust / 2;                  }                    return dockState == DockState.DockLeft ? dockLeftSize : dockRightSize;              }              else if (dockState == DockState.DockTop || dockState == DockState.DockBottom)              {                  int height = ClientRectangle.Height - DockPadding.Top - DockPadding.Bottom;                  int dockTopSize = m_dockTopPortion >= 1 ? (int)m_dockTopPortion : (int)(height * m_dockTopPortion);                  int dockBottomSize = m_dockBottomPortion >= 1 ? (int)m_dockBottomPortion : (int)(height * m_dockBottomPortion);                    if (dockTopSize < MeasurePane.MinSize)                      dockTopSize = MeasurePane.MinSize;                  if (dockBottomSize < MeasurePane.MinSize)                      dockBottomSize = MeasurePane.MinSize;                    if (dockTopSize + dockBottomSize > height - MeasurePane.MinSize)                  {                      int adjust = (dockTopSize + dockBottomSize) - (height - MeasurePane.MinSize);                      dockTopSize -= adjust / 2;                      dockBottomSize -= adjust / 2;                  }                    return dockState == DockState.DockTop ? dockTopSize : dockBottomSize;              }              else                  return 0;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,GetDockWindowSize,The following statement contains a magic number: if (dockState == DockState.DockLeft || dockState == DockState.DockRight)              {                  int width = ClientRectangle.Width - DockPadding.Left - DockPadding.Right;                  int dockLeftSize = m_dockLeftPortion >= 1 ? (int)m_dockLeftPortion : (int)(width * m_dockLeftPortion);                  int dockRightSize = m_dockRightPortion >= 1 ? (int)m_dockRightPortion : (int)(width * m_dockRightPortion);                    if (dockLeftSize < MeasurePane.MinSize)                      dockLeftSize = MeasurePane.MinSize;                  if (dockRightSize < MeasurePane.MinSize)                      dockRightSize = MeasurePane.MinSize;                    if (dockLeftSize + dockRightSize > width - MeasurePane.MinSize)                  {                      int adjust = (dockLeftSize + dockRightSize) - (width - MeasurePane.MinSize);                      dockLeftSize -= adjust / 2;                      dockRightSize -= adjust / 2;                  }                    return dockState == DockState.DockLeft ? dockLeftSize : dockRightSize;              }              else if (dockState == DockState.DockTop || dockState == DockState.DockBottom)              {                  int height = ClientRectangle.Height - DockPadding.Top - DockPadding.Bottom;                  int dockTopSize = m_dockTopPortion >= 1 ? (int)m_dockTopPortion : (int)(height * m_dockTopPortion);                  int dockBottomSize = m_dockBottomPortion >= 1 ? (int)m_dockBottomPortion : (int)(height * m_dockBottomPortion);                    if (dockTopSize < MeasurePane.MinSize)                      dockTopSize = MeasurePane.MinSize;                  if (dockBottomSize < MeasurePane.MinSize)                      dockBottomSize = MeasurePane.MinSize;                    if (dockTopSize + dockBottomSize > height - MeasurePane.MinSize)                  {                      int adjust = (dockTopSize + dockBottomSize) - (height - MeasurePane.MinSize);                      dockTopSize -= adjust / 2;                      dockBottomSize -= adjust / 2;                  }                    return dockState == DockState.DockTop ? dockTopSize : dockBottomSize;              }              else                  return 0;
Magic Number,WeifenLuo.WinFormsUI.Docking,SplitterOutline,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.SplitterDragHandler.cs,SplitterOutline,The following statement contains a magic number: DragForm.Opacity = 0.7;
Magic Number,WeifenLuo.WinFormsUI.Docking,InertButtonBase,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\InertButtonBase.cs,OnPaint,The following statement contains a magic number: using (ImageAttributes imageAttributes = new ImageAttributes())              {                  ColorMap[] colorMap = new ColorMap[2];                  colorMap[0] = new ColorMap();                  colorMap[0].OldColor = Color.FromArgb(0' 0' 0);                  colorMap[0].NewColor = ForeColor;                  colorMap[1] = new ColorMap();                  colorMap[1].OldColor = Image.GetPixel(0' 0);                  colorMap[1].NewColor = Color.Transparent;                    imageAttributes.SetRemapTable(colorMap);                    e.Graphics.DrawImage(                     Image'                     new Rectangle(0' 0' Image.Width' Image.Height)'                     0' 0'                     Image.Width'                     Image.Height'                     GraphicsUnit.Pixel'                     imageAttributes);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)  			{  				Matrix matrixRotated = new Matrix();  				matrixRotated.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'  					(float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  				g.Transform = matrixRotated;  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)  			{  				Matrix matrixRotated = new Matrix();  				matrixRotated.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'  					(float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  				g.Transform = matrixRotated;  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)  			{  				Matrix matrixRotated = new Matrix();  				matrixRotated.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'  					(float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));  				g.Transform = matrixRotated;  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: pts[0].X = (float)rect.X + (float)rect.Width / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: pts[0].Y = (float)rect.Y + (float)rect.Height / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: matrix.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'  				(float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: matrix.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'  				(float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: matrix.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'  				(float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: return new Rectangle((int)(pts[0].X - (float)rect.Height / 2 + .5F)'  				(int)(pts[0].Y - (float)rect.Width / 2 + .5F)'  				rect.Height' rect.Width);
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: return new Rectangle((int)(pts[0].X - (float)rect.Height / 2 + .5F)'  				(int)(pts[0].Y - (float)rect.Width / 2 + .5F)'  				rect.Height' rect.Width);
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,LayoutAnimateWindow,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                      ActivePane.Location = new Point(rectClient.Right - 2 - Measures.SplitterSize - ActivePane.Width' ActivePane.Location.Y);                  else if (DockState == DockState.DockTopAutoHide)                      ActivePane.Location = new Point(ActivePane.Location.X' rectClient.Bottom - 2 - Measures.SplitterSize - ActivePane.Height);
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,LayoutAnimateWindow,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                      ActivePane.Location = new Point(rectClient.Right - 2 - Measures.SplitterSize - ActivePane.Width' ActivePane.Location.Y);                  else if (DockState == DockState.DockTopAutoHide)                      ActivePane.Location = new Point(ActivePane.Location.X' rectClient.Bottom - 2 - Measures.SplitterSize - ActivePane.Height);
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,SetTimerMouseTrack,The following statement contains a magic number: if (hovertime <= 0)                      hovertime = 400;
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,SetTimerMouseTrack,The following statement contains a magic number: m_timerMouseTrack.Interval = 2 * (int)hovertime;
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                  {                      DockPadding.Right = 2;                      m_splitter.Dock = DockStyle.Right;                  }                  else if (DockState == DockState.DockRightAutoHide)                  {                      DockPadding.Left = 2;                      m_splitter.Dock = DockStyle.Left;                  }                  else if (DockState == DockState.DockTopAutoHide)                  {                      DockPadding.Bottom = 2;                      m_splitter.Dock = DockStyle.Bottom;                  }                  else if (DockState == DockState.DockBottomAutoHide)                  {                      DockPadding.Top = 2;                      m_splitter.Dock = DockStyle.Top;                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                  {                      DockPadding.Right = 2;                      m_splitter.Dock = DockStyle.Right;                  }                  else if (DockState == DockState.DockRightAutoHide)                  {                      DockPadding.Left = 2;                      m_splitter.Dock = DockStyle.Left;                  }                  else if (DockState == DockState.DockTopAutoHide)                  {                      DockPadding.Bottom = 2;                      m_splitter.Dock = DockStyle.Bottom;                  }                  else if (DockState == DockState.DockBottomAutoHide)                  {                      DockPadding.Top = 2;                      m_splitter.Dock = DockStyle.Top;                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                  {                      DockPadding.Right = 2;                      m_splitter.Dock = DockStyle.Right;                  }                  else if (DockState == DockState.DockRightAutoHide)                  {                      DockPadding.Left = 2;                      m_splitter.Dock = DockStyle.Left;                  }                  else if (DockState == DockState.DockTopAutoHide)                  {                      DockPadding.Bottom = 2;                      m_splitter.Dock = DockStyle.Bottom;                  }                  else if (DockState == DockState.DockBottomAutoHide)                  {                      DockPadding.Top = 2;                      m_splitter.Dock = DockStyle.Top;                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                  {                      DockPadding.Right = 2;                      m_splitter.Dock = DockStyle.Right;                  }                  else if (DockState == DockState.DockRightAutoHide)                  {                      DockPadding.Left = 2;                      m_splitter.Dock = DockStyle.Left;                  }                  else if (DockState == DockState.DockTopAutoHide)                  {                      DockPadding.Bottom = 2;                      m_splitter.Dock = DockStyle.Bottom;                  }                  else if (DockState == DockState.DockBottomAutoHide)                  {                      DockPadding.Top = 2;                      m_splitter.Dock = DockStyle.Top;                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The following statement contains a magic number: if (DockState == DockState.DockBottomAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 0' 1' ClientRectangle.Right' 1);                  else if (DockState == DockState.DockRightAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 1' 0' 1' ClientRectangle.Bottom);                  else if (DockState == DockState.DockTopAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' 0' ClientRectangle.Height - 2' ClientRectangle.Right' ClientRectangle.Height - 2);                      g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1);                  }                  else if (DockState == DockState.DockLeftAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' ClientRectangle.Width - 2' 0' ClientRectangle.Width - 2' ClientRectangle.Bottom);                      g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The following statement contains a magic number: if (DockState == DockState.DockBottomAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 0' 1' ClientRectangle.Right' 1);                  else if (DockState == DockState.DockRightAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 1' 0' 1' ClientRectangle.Bottom);                  else if (DockState == DockState.DockTopAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' 0' ClientRectangle.Height - 2' ClientRectangle.Right' ClientRectangle.Height - 2);                      g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1);                  }                  else if (DockState == DockState.DockLeftAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' ClientRectangle.Width - 2' 0' ClientRectangle.Width - 2' ClientRectangle.Bottom);                      g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The following statement contains a magic number: if (DockState == DockState.DockBottomAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 0' 1' ClientRectangle.Right' 1);                  else if (DockState == DockState.DockRightAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 1' 0' 1' ClientRectangle.Bottom);                  else if (DockState == DockState.DockTopAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' 0' ClientRectangle.Height - 2' ClientRectangle.Right' ClientRectangle.Height - 2);                      g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1);                  }                  else if (DockState == DockState.DockLeftAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' ClientRectangle.Width - 2' 0' ClientRectangle.Width - 2' ClientRectangle.Bottom);                      g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The following statement contains a magic number: if (DockState == DockState.DockBottomAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 0' 1' ClientRectangle.Right' 1);                  else if (DockState == DockState.DockRightAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 1' 0' 1' ClientRectangle.Bottom);                  else if (DockState == DockState.DockTopAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' 0' ClientRectangle.Height - 2' ClientRectangle.Right' ClientRectangle.Height - 2);                      g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1);                  }                  else if (DockState == DockState.DockLeftAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' ClientRectangle.Width - 2' 0' ClientRectangle.Width - 2' ClientRectangle.Bottom);                      g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VisibleNestedPaneCollection.cs,Remove,The following statement contains a magic number: statusPane.SetDisplayingStatus(false' null' DockAlignment.Left' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i=1; i<Count; i++)  			{  				DockPane pane = this[i];  				NestedDockingStatus status = pane.NestedDockingStatus;  				DockPane prevPane = status.DisplayingPreviousPane;  				NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;    				Rectangle rect = statusPrev.PaneBounds;  				bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);    				Rectangle rectThis = rect;  				Rectangle rectPrev = rect;  				Rectangle rectSplitter = rect;  				if (status.DisplayingAlignment == DockAlignment.Left)  				{  					rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  					rectSplitter.X = rectThis.X + rectThis.Width;  					rectSplitter.Width = Measures.SplitterSize;  					rectPrev.X = rectSplitter.X + rectSplitter.Width;  					rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  				}  				else if (status.DisplayingAlignment == DockAlignment.Right)  				{  					rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  					rectSplitter.X = rectPrev.X + rectPrev.Width;  					rectSplitter.Width = Measures.SplitterSize;  					rectThis.X = rectSplitter.X + rectSplitter.Width;  					rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  				}  				else if (status.DisplayingAlignment == DockAlignment.Top)  				{  					rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  					rectSplitter.Y = rectThis.Y + rectThis.Height;  					rectSplitter.Height = Measures.SplitterSize;  					rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  					rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  				}  				else if (status.DisplayingAlignment == DockAlignment.Bottom)  				{  					rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  					rectSplitter.Y = rectPrev.Y + rectPrev.Height;  					rectSplitter.Height = Measures.SplitterSize;  					rectThis.Y = rectSplitter.Y + rectSplitter.Height;  					rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  				}  				else  					rectThis = Rectangle.Empty;    				rectSplitter.Intersect(rect);  				rectThis.Intersect(rect);  				rectPrev.Intersect(rect);  				status.SetDisplayingBounds(rect' rectThis' rectSplitter);  				statusPrev.SetDisplayingBounds(statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i=1; i<Count; i++)  			{  				DockPane pane = this[i];  				NestedDockingStatus status = pane.NestedDockingStatus;  				DockPane prevPane = status.DisplayingPreviousPane;  				NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;    				Rectangle rect = statusPrev.PaneBounds;  				bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);    				Rectangle rectThis = rect;  				Rectangle rectPrev = rect;  				Rectangle rectSplitter = rect;  				if (status.DisplayingAlignment == DockAlignment.Left)  				{  					rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  					rectSplitter.X = rectThis.X + rectThis.Width;  					rectSplitter.Width = Measures.SplitterSize;  					rectPrev.X = rectSplitter.X + rectSplitter.Width;  					rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  				}  				else if (status.DisplayingAlignment == DockAlignment.Right)  				{  					rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  					rectSplitter.X = rectPrev.X + rectPrev.Width;  					rectSplitter.Width = Measures.SplitterSize;  					rectThis.X = rectSplitter.X + rectSplitter.Width;  					rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  				}  				else if (status.DisplayingAlignment == DockAlignment.Top)  				{  					rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  					rectSplitter.Y = rectThis.Y + rectThis.Height;  					rectSplitter.Height = Measures.SplitterSize;  					rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  					rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  				}  				else if (status.DisplayingAlignment == DockAlignment.Bottom)  				{  					rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  					rectSplitter.Y = rectPrev.Y + rectPrev.Height;  					rectSplitter.Height = Measures.SplitterSize;  					rectThis.Y = rectSplitter.Y + rectSplitter.Height;  					rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  				}  				else  					rectThis = Rectangle.Empty;    				rectSplitter.Intersect(rect);  				rectThis.Intersect(rect);  				rectPrev.Intersect(rect);  				status.SetDisplayingBounds(rect' rectThis' rectSplitter);  				statusPrev.SetDisplayingBounds(statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i=1; i<Count; i++)  			{  				DockPane pane = this[i];  				NestedDockingStatus status = pane.NestedDockingStatus;  				DockPane prevPane = status.DisplayingPreviousPane;  				NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;    				Rectangle rect = statusPrev.PaneBounds;  				bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);    				Rectangle rectThis = rect;  				Rectangle rectPrev = rect;  				Rectangle rectSplitter = rect;  				if (status.DisplayingAlignment == DockAlignment.Left)  				{  					rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  					rectSplitter.X = rectThis.X + rectThis.Width;  					rectSplitter.Width = Measures.SplitterSize;  					rectPrev.X = rectSplitter.X + rectSplitter.Width;  					rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  				}  				else if (status.DisplayingAlignment == DockAlignment.Right)  				{  					rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  					rectSplitter.X = rectPrev.X + rectPrev.Width;  					rectSplitter.Width = Measures.SplitterSize;  					rectThis.X = rectSplitter.X + rectSplitter.Width;  					rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  				}  				else if (status.DisplayingAlignment == DockAlignment.Top)  				{  					rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  					rectSplitter.Y = rectThis.Y + rectThis.Height;  					rectSplitter.Height = Measures.SplitterSize;  					rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  					rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  				}  				else if (status.DisplayingAlignment == DockAlignment.Bottom)  				{  					rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  					rectSplitter.Y = rectPrev.Y + rectPrev.Height;  					rectSplitter.Height = Measures.SplitterSize;  					rectThis.Y = rectSplitter.Y + rectSplitter.Height;  					rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  				}  				else  					rectThis = Rectangle.Empty;    				rectSplitter.Intersect(rect);  				rectThis.Intersect(rect);  				rectPrev.Intersect(rect);  				status.SetDisplayingBounds(rect' rectThis' rectSplitter);  				statusPrev.SetDisplayingBounds(statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i=1; i<Count; i++)  			{  				DockPane pane = this[i];  				NestedDockingStatus status = pane.NestedDockingStatus;  				DockPane prevPane = status.DisplayingPreviousPane;  				NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;    				Rectangle rect = statusPrev.PaneBounds;  				bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);    				Rectangle rectThis = rect;  				Rectangle rectPrev = rect;  				Rectangle rectSplitter = rect;  				if (status.DisplayingAlignment == DockAlignment.Left)  				{  					rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (Measures.SplitterSize / 2);  					rectSplitter.X = rectThis.X + rectThis.Width;  					rectSplitter.Width = Measures.SplitterSize;  					rectPrev.X = rectSplitter.X + rectSplitter.Width;  					rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;  				}  				else if (status.DisplayingAlignment == DockAlignment.Right)  				{  					rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  					rectSplitter.X = rectPrev.X + rectPrev.Width;  					rectSplitter.Width = Measures.SplitterSize;  					rectThis.X = rectSplitter.X + rectSplitter.Width;  					rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;  				}  				else if (status.DisplayingAlignment == DockAlignment.Top)  				{  					rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (Measures.SplitterSize / 2);  					rectSplitter.Y = rectThis.Y + rectThis.Height;  					rectSplitter.Height = Measures.SplitterSize;  					rectPrev.Y = rectSplitter.Y + rectSplitter.Height;  					rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;  				}  				else if (status.DisplayingAlignment == DockAlignment.Bottom)  				{  					rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (Measures.SplitterSize / 2);  					rectSplitter.Y = rectPrev.Y + rectPrev.Height;  					rectSplitter.Height = Measures.SplitterSize;  					rectThis.Y = rectSplitter.Y + rectSplitter.Height;  					rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;  				}  				else  					rectThis = Rectangle.Empty;    				rectSplitter.Intersect(rect);  				rectThis.Intersect(rect);  				rectPrev.Intersect(rect);  				status.SetDisplayingBounds(rect' rectThis' rectSplitter);  				statusPrev.SetDisplayingBounds(statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxFloat.Height = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxDockLeft.Width = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxDockRight.Width = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxDockTop.Height = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxDockBottom.Height = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: Size = new System.Drawing.Size(160' 144);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: Size = new System.Drawing.Size(160' 144);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)  			{  				bool samePane = (Pane == pane);  				if (!samePane)  					Pane = pane;    				if (contentIndex == -1 || !samePane)  					pane.SetContentIndex(Content' contentIndex);  				else  				{  					DockContentCollection contents = pane.Contents;  					int oldIndex = contents.IndexOf(Content);  					int newIndex = contentIndex;  					if (oldIndex < newIndex)  					{  						newIndex += 1;  						if (newIndex > contents.Count -1)  							newIndex = -1;  					}  					pane.SetContentIndex(Content' newIndex);  				}  			}  			else  			{  				DockPane paneFrom = DockPanel.DockPaneFactory.CreateDockPane(Content' pane.DockState' true);  				INestedPanesContainer container = pane.NestedPanesContainer;  				if (dockStyle == DockStyle.Left)  					paneFrom.DockTo(container' pane' DockAlignment.Left' 0.5);  				else if (dockStyle == DockStyle.Right)   					paneFrom.DockTo(container' pane' DockAlignment.Right' 0.5);  				else if (dockStyle == DockStyle.Top)  					paneFrom.DockTo(container' pane' DockAlignment.Top' 0.5);  				else if (dockStyle == DockStyle.Bottom)   					paneFrom.DockTo(container' pane' DockAlignment.Bottom' 0.5);    				paneFrom.DockState = pane.DockState;  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)  			{  				bool samePane = (Pane == pane);  				if (!samePane)  					Pane = pane;    				if (contentIndex == -1 || !samePane)  					pane.SetContentIndex(Content' contentIndex);  				else  				{  					DockContentCollection contents = pane.Contents;  					int oldIndex = contents.IndexOf(Content);  					int newIndex = contentIndex;  					if (oldIndex < newIndex)  					{  						newIndex += 1;  						if (newIndex > contents.Count -1)  							newIndex = -1;  					}  					pane.SetContentIndex(Content' newIndex);  				}  			}  			else  			{  				DockPane paneFrom = DockPanel.DockPaneFactory.CreateDockPane(Content' pane.DockState' true);  				INestedPanesContainer container = pane.NestedPanesContainer;  				if (dockStyle == DockStyle.Left)  					paneFrom.DockTo(container' pane' DockAlignment.Left' 0.5);  				else if (dockStyle == DockStyle.Right)   					paneFrom.DockTo(container' pane' DockAlignment.Right' 0.5);  				else if (dockStyle == DockStyle.Top)  					paneFrom.DockTo(container' pane' DockAlignment.Top' 0.5);  				else if (dockStyle == DockStyle.Bottom)   					paneFrom.DockTo(container' pane' DockAlignment.Bottom' 0.5);    				paneFrom.DockState = pane.DockState;  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)  			{  				bool samePane = (Pane == pane);  				if (!samePane)  					Pane = pane;    				if (contentIndex == -1 || !samePane)  					pane.SetContentIndex(Content' contentIndex);  				else  				{  					DockContentCollection contents = pane.Contents;  					int oldIndex = contents.IndexOf(Content);  					int newIndex = contentIndex;  					if (oldIndex < newIndex)  					{  						newIndex += 1;  						if (newIndex > contents.Count -1)  							newIndex = -1;  					}  					pane.SetContentIndex(Content' newIndex);  				}  			}  			else  			{  				DockPane paneFrom = DockPanel.DockPaneFactory.CreateDockPane(Content' pane.DockState' true);  				INestedPanesContainer container = pane.NestedPanesContainer;  				if (dockStyle == DockStyle.Left)  					paneFrom.DockTo(container' pane' DockAlignment.Left' 0.5);  				else if (dockStyle == DockStyle.Right)   					paneFrom.DockTo(container' pane' DockAlignment.Right' 0.5);  				else if (dockStyle == DockStyle.Top)  					paneFrom.DockTo(container' pane' DockAlignment.Top' 0.5);  				else if (dockStyle == DockStyle.Bottom)   					paneFrom.DockTo(container' pane' DockAlignment.Bottom' 0.5);    				paneFrom.DockState = pane.DockState;  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)  			{  				bool samePane = (Pane == pane);  				if (!samePane)  					Pane = pane;    				if (contentIndex == -1 || !samePane)  					pane.SetContentIndex(Content' contentIndex);  				else  				{  					DockContentCollection contents = pane.Contents;  					int oldIndex = contents.IndexOf(Content);  					int newIndex = contentIndex;  					if (oldIndex < newIndex)  					{  						newIndex += 1;  						if (newIndex > contents.Count -1)  							newIndex = -1;  					}  					pane.SetContentIndex(Content' newIndex);  				}  			}  			else  			{  				DockPane paneFrom = DockPanel.DockPaneFactory.CreateDockPane(Content' pane.DockState' true);  				INestedPanesContainer container = pane.NestedPanesContainer;  				if (dockStyle == DockStyle.Left)  					paneFrom.DockTo(container' pane' DockAlignment.Left' 0.5);  				else if (dockStyle == DockStyle.Right)   					paneFrom.DockTo(container' pane' DockAlignment.Right' 0.5);  				else if (dockStyle == DockStyle.Top)  					paneFrom.DockTo(container' pane' DockAlignment.Top' 0.5);  				else if (dockStyle == DockStyle.Bottom)   					paneFrom.DockTo(container' pane' DockAlignment.Bottom' 0.5);    				paneFrom.DockState = pane.DockState;  			}
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.DockLeft))                      {                          PanelLeft.Location = new Point(rectDockArea.X + _PanelIndicatorMargin' rectDockArea.Y + (rectDockArea.Height - PanelRight.Height) / 2);                          PanelLeft.Visible = true;                          region.Union(PanelLeft.Bounds);                      }                      else                          PanelLeft.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.DockRight))                      {                          PanelRight.Location = new Point(rectDockArea.X + rectDockArea.Width - PanelRight.Width - _PanelIndicatorMargin' rectDockArea.Y + (rectDockArea.Height - PanelRight.Height) / 2);                          PanelRight.Visible = true;                          region.Union(PanelRight.Bounds);                      }                      else                          PanelRight.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.DockTop))                      {                          PanelTop.Location = new Point(rectDockArea.X + (rectDockArea.Width - PanelTop.Width) / 2' rectDockArea.Y + _PanelIndicatorMargin);                          PanelTop.Visible = true;                          region.Union(PanelTop.Bounds);                      }                      else                          PanelTop.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.DockBottom))                      {                          PanelBottom.Location = new Point(rectDockArea.X + (rectDockArea.Width - PanelBottom.Width) / 2' rectDockArea.Y + rectDockArea.Height - PanelBottom.Height - _PanelIndicatorMargin);                          PanelBottom.Visible = true;                          region.Union(PanelBottom.Bounds);                      }                      else                          PanelBottom.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.Document))                      {                          Rectangle rectDocumentWindow = RectangleToClient(DockPanel.RectangleToScreen(DockPanel.DocumentWindowBounds));                          PanelFill.Location = new Point(rectDocumentWindow.X + (rectDocumentWindow.Width - PanelFill.Width) / 2' rectDocumentWindow.Y + (rectDocumentWindow.Height - PanelFill.Height) / 2);                          PanelFill.Visible = true;                          region.Union(PanelFill.Bounds);                      }                      else                          PanelFill.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.Document))                      {                          Rectangle rectDocumentWindow = RectangleToClient(DockPanel.RectangleToScreen(DockPanel.DocumentWindowBounds));                          PanelFill.Location = new Point(rectDocumentWindow.X + (rectDocumentWindow.Width - PanelFill.Width) / 2' rectDocumentWindow.Y + (rectDocumentWindow.Height - PanelFill.Height) / 2);                          PanelFill.Visible = true;                          region.Union(PanelFill.Bounds);                      }                      else                          PanelFill.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPaneDiamondVisible())                      {                          Rectangle rect = RectangleToClient(DockPane.RectangleToScreen(DockPane.ClientRectangle));                          PaneDiamond.Location = new Point(rect.Left + (rect.Width - PaneDiamond.Width) / 2' rect.Top + (rect.Height - PaneDiamond.Height) / 2);                          PaneDiamond.Visible = true;                          using (GraphicsPath graphicsPath = PaneIndicator.DisplayingGraphicsPath.Clone() as GraphicsPath)                          {                              Point[] pts = new Point[]  						{  							new Point(PaneDiamond.Left' PaneDiamond.Top)'  							new Point(PaneDiamond.Right' PaneDiamond.Top)'  							new Point(PaneDiamond.Left' PaneDiamond.Bottom)  						};                              using (Matrix matrix = new Matrix(PaneDiamond.ClientRectangle' pts))                              {                                  graphicsPath.Transform(matrix);                              }                              region.Union(graphicsPath);                          }                      }                      else                          PaneDiamond.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPaneDiamondVisible())                      {                          Rectangle rect = RectangleToClient(DockPane.RectangleToScreen(DockPane.ClientRectangle));                          PaneDiamond.Location = new Point(rect.Left + (rect.Width - PaneDiamond.Width) / 2' rect.Top + (rect.Height - PaneDiamond.Height) / 2);                          PaneDiamond.Visible = true;                          using (GraphicsPath graphicsPath = PaneIndicator.DisplayingGraphicsPath.Clone() as GraphicsPath)                          {                              Point[] pts = new Point[]  						{  							new Point(PaneDiamond.Left' PaneDiamond.Top)'  							new Point(PaneDiamond.Right' PaneDiamond.Top)'  							new Point(PaneDiamond.Left' PaneDiamond.Bottom)  						};                              using (Matrix matrix = new Matrix(PaneDiamond.ClientRectangle' pts))                              {                                  graphicsPath.Transform(matrix);                              }                              region.Union(graphicsPath);                          }                      }                      else                          PaneDiamond.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockOutline,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,DockOutline,The following statement contains a magic number: DragForm.Opacity = 0.5;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockOutline,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,SetOutline,The following statement contains a magic number: if (dock != DockStyle.Fill)                      {                          Rectangle rect = pane.DisplayingRectangle;                          if (dock == DockStyle.Right)                              rect.X += rect.Width / 2;                          if (dock == DockStyle.Bottom)                              rect.Y += rect.Height / 2;                          if (dock == DockStyle.Left || dock == DockStyle.Right)                              rect.Width -= rect.Width / 2;                          if (dock == DockStyle.Top || dock == DockStyle.Bottom)                              rect.Height -= rect.Height / 2;                          rect.Location = pane.PointToScreen(rect.Location);                            SetDragForm(rect);                      }                      else if (contentIndex == -1)                      {                          Rectangle rect = pane.DisplayingRectangle;                          rect.Location = pane.PointToScreen(rect.Location);                          SetDragForm(rect);                      }                      else                      {                          using (GraphicsPath path = pane.TabStripControl.GetOutline(contentIndex))                          {                              RectangleF rectF = path.GetBounds();                              Rectangle rect = new Rectangle((int)rectF.X' (int)rectF.Y' (int)rectF.Width' (int)rectF.Height);                              using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) }))                              {                                  path.Transform(matrix);                              }                              Region region = new Region(path);                              SetDragForm(rect' region);                          }                      }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockOutline,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,SetOutline,The following statement contains a magic number: if (dock != DockStyle.Fill)                      {                          Rectangle rect = pane.DisplayingRectangle;                          if (dock == DockStyle.Right)                              rect.X += rect.Width / 2;                          if (dock == DockStyle.Bottom)                              rect.Y += rect.Height / 2;                          if (dock == DockStyle.Left || dock == DockStyle.Right)                              rect.Width -= rect.Width / 2;                          if (dock == DockStyle.Top || dock == DockStyle.Bottom)                              rect.Height -= rect.Height / 2;                          rect.Location = pane.PointToScreen(rect.Location);                            SetDragForm(rect);                      }                      else if (contentIndex == -1)                      {                          Rectangle rect = pane.DisplayingRectangle;                          rect.Location = pane.PointToScreen(rect.Location);                          SetDragForm(rect);                      }                      else                      {                          using (GraphicsPath path = pane.TabStripControl.GetOutline(contentIndex))                          {                              RectangleF rectF = path.GetBounds();                              Rectangle rect = new Rectangle((int)rectF.X' (int)rectF.Y' (int)rectF.Width' (int)rectF.Height);                              using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) }))                              {                                  path.Transform(matrix);                              }                              Region region = new Region(path);                              SetDragForm(rect' region);                          }                      }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockOutline,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,SetOutline,The following statement contains a magic number: if (dock != DockStyle.Fill)                      {                          Rectangle rect = pane.DisplayingRectangle;                          if (dock == DockStyle.Right)                              rect.X += rect.Width / 2;                          if (dock == DockStyle.Bottom)                              rect.Y += rect.Height / 2;                          if (dock == DockStyle.Left || dock == DockStyle.Right)                              rect.Width -= rect.Width / 2;                          if (dock == DockStyle.Top || dock == DockStyle.Bottom)                              rect.Height -= rect.Height / 2;                          rect.Location = pane.PointToScreen(rect.Location);                            SetDragForm(rect);                      }                      else if (contentIndex == -1)                      {                          Rectangle rect = pane.DisplayingRectangle;                          rect.Location = pane.PointToScreen(rect.Location);                          SetDragForm(rect);                      }                      else                      {                          using (GraphicsPath path = pane.TabStripControl.GetOutline(contentIndex))                          {                              RectangleF rectF = path.GetBounds();                              Rectangle rect = new Rectangle((int)rectF.X' (int)rectF.Y' (int)rectF.Width' (int)rectF.Height);                              using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) }))                              {                                  path.Transform(matrix);                              }                              Region region = new Region(path);                              SetDragForm(rect' region);                          }                      }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockOutline,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.DockDragHandler.cs,SetOutline,The following statement contains a magic number: if (dock != DockStyle.Fill)                      {                          Rectangle rect = pane.DisplayingRectangle;                          if (dock == DockStyle.Right)                              rect.X += rect.Width / 2;                          if (dock == DockStyle.Bottom)                              rect.Y += rect.Height / 2;                          if (dock == DockStyle.Left || dock == DockStyle.Right)                              rect.Width -= rect.Width / 2;                          if (dock == DockStyle.Top || dock == DockStyle.Bottom)                              rect.Height -= rect.Height / 2;                          rect.Location = pane.PointToScreen(rect.Location);                            SetDragForm(rect);                      }                      else if (contentIndex == -1)                      {                          Rectangle rect = pane.DisplayingRectangle;                          rect.Location = pane.PointToScreen(rect.Location);                          SetDragForm(rect);                      }                      else                      {                          using (GraphicsPath path = pane.TabStripControl.GetOutline(contentIndex))                          {                              RectangleF rectF = path.GetBounds();                              Rectangle rect = new Rectangle((int)rectF.X' (int)rectF.Y' (int)rectF.Width' (int)rectF.Height);                              using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) }))                              {                                  path.Transform(matrix);                              }                              Region region = new Region(path);                              SetDragForm(rect' region);                          }                      }
Magic Number,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\NestedPaneCollection.cs,InternalRemove,The following statement contains a magic number: statusPane.SetStatus(null' null' DockAlignment.Left' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\NestedPaneCollection.cs,InternalRemove,The following statement contains a magic number: statusPane.SetDisplayingStatus(false' null' DockAlignment.Left' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,DockPane,The following statement contains a magic number: InternalConstruct(content' visibleState' false' Rectangle.Empty' null' DockAlignment.Right' 0.5' show);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,DockPane,The following statement contains a magic number: InternalConstruct(content' DockState.Float' false' Rectangle.Empty' floatWindow.NestedPanes.GetDefaultPreviousPane(this)' DockAlignment.Right' 0.5' show);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,DockPane,The following statement contains a magic number: InternalConstruct(content' DockState.Float' true' floatWindowBounds' null' DockAlignment.Right' 0.5' show);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,DockTo,The following statement contains a magic number: return DockTo(container' container.NestedPanes.GetDefaultPreviousPane(this)' alignment' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  IDockContent activeContent = ActiveContent;                  for (int i = Contents.Count - 1; i >= 0; i--)                  {                      IDockContent c = Contents[i];                      c.DockHandler.Pane = pane;                      if (contentIndex != -1)                          pane.SetContentIndex(c' contentIndex);                  }                  pane.ActiveContent = activeContent;              }              else              {                  if (dockStyle == DockStyle.Left)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);                    DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  IDockContent activeContent = ActiveContent;                  for (int i = Contents.Count - 1; i >= 0; i--)                  {                      IDockContent c = Contents[i];                      c.DockHandler.Pane = pane;                      if (contentIndex != -1)                          pane.SetContentIndex(c' contentIndex);                  }                  pane.ActiveContent = activeContent;              }              else              {                  if (dockStyle == DockStyle.Left)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);                    DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  IDockContent activeContent = ActiveContent;                  for (int i = Contents.Count - 1; i >= 0; i--)                  {                      IDockContent c = Contents[i];                      c.DockHandler.Pane = pane;                      if (contentIndex != -1)                          pane.SetContentIndex(c' contentIndex);                  }                  pane.ActiveContent = activeContent;              }              else              {                  if (dockStyle == DockStyle.Left)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);                    DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  IDockContent activeContent = ActiveContent;                  for (int i = Contents.Count - 1; i >= 0; i--)                  {                      IDockContent c = Contents[i];                      c.DockHandler.Pane = pane;                      if (contentIndex != -1)                          pane.SetContentIndex(c' contentIndex);                  }                  pane.ActiveContent = activeContent;              }              else              {                  if (dockStyle == DockStyle.Left)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);                    DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetOutline_Document,The following statement contains a magic number: rectTab.X -= rectTab.Height / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,CalculateTabs_Document,The following statement contains a magic number: int x = rectTabStrip.X + rectTabStrip.Height / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,CalculateTabs_Document,The following statement contains a magic number: if (!overflow)              {                  m_startDisplayingTab = 0;                  x = rectTabStrip.X + rectTabStrip.Height / 2;                  foreach (TabVS2005 tab in Tabs)                  {                      tab.TabX = x;                      x += tab.TabWidth;                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: int curveSize = 6;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || Tabs.IndexOf(tab) == StartDisplayingTab || full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                      GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                  }                  else                  {                      GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);              }              else              {                  GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                  }                  else                  {                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                      GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                  }              }              else              {                  if (RightToLeft == RightToLeft.Yes)                      GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  else                      GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: if (m.Msg == (int)Win32.Msgs.WM_NCLBUTTONDOWN)  			{  				if (IsDisposed)  					return;    				uint result = NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  				if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)	// HITTEST_CAPTION  				{  					Activate();  					m_dockPanel.BeginDrag(this);  				}  				else  					base.WndProc(ref m);    				return;  			}              else if (m.Msg == (int)Win32.Msgs.WM_NCRBUTTONDOWN)              {                  uint result = NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                  if (result == 2)	// HITTEST_CAPTION                  {                      DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes[0] : null;                      if (theOnlyPane != null && theOnlyPane.ActiveContent != null)                      {                          theOnlyPane.ShowTabPageContextMenu(this' PointToClient(Control.MousePosition));                          return;                      }                  }                    base.WndProc(ref m);                  return;              }              else if (m.Msg == (int)Win32.Msgs.WM_CLOSE)              {                  if (NestedPanes.Count == 0)                  {                      base.WndProc(ref m);                      return;                  }                    for (int i = NestedPanes.Count - 1; i >= 0; i--)                  {                      DockContentCollection contents = NestedPanes[i].Contents;                      for (int j = contents.Count - 1; j >= 0; j--)                      {                          IDockContent content = contents[j];                          if (content.DockHandler.DockState != DockState.Float)                              continue;                            if (!content.DockHandler.CloseButton)                              continue;                            if (content.DockHandler.HideOnClose)                              content.DockHandler.Hide();                          else                              content.DockHandler.Close();                      }                  }                    return;              }              else if (m.Msg == (int)Win32.Msgs.WM_NCLBUTTONDBLCLK)              {                  uint result = NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                  if (result != 2)	// HITTEST_CAPTION                  {                      base.WndProc(ref m);                      return;                  }                    DockPanel.SuspendLayout(true);                    // Restore to panel                  foreach (DockPane pane in NestedPanes)                  {                      if (pane.DockState != DockState.Float)                          continue;                      pane.RestoreToPanel();                  }                      DockPanel.ResumeLayout(true' true);                  return;              }              else if (m.Msg == WM_CHECKDISPOSE)              {                  if (NestedPanes.Count == 0)                      Dispose();                    return;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: if (m.Msg == (int)Win32.Msgs.WM_NCLBUTTONDOWN)  			{  				if (IsDisposed)  					return;    				uint result = NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  				if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)	// HITTEST_CAPTION  				{  					Activate();  					m_dockPanel.BeginDrag(this);  				}  				else  					base.WndProc(ref m);    				return;  			}              else if (m.Msg == (int)Win32.Msgs.WM_NCRBUTTONDOWN)              {                  uint result = NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                  if (result == 2)	// HITTEST_CAPTION                  {                      DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes[0] : null;                      if (theOnlyPane != null && theOnlyPane.ActiveContent != null)                      {                          theOnlyPane.ShowTabPageContextMenu(this' PointToClient(Control.MousePosition));                          return;                      }                  }                    base.WndProc(ref m);                  return;              }              else if (m.Msg == (int)Win32.Msgs.WM_CLOSE)              {                  if (NestedPanes.Count == 0)                  {                      base.WndProc(ref m);                      return;                  }                    for (int i = NestedPanes.Count - 1; i >= 0; i--)                  {                      DockContentCollection contents = NestedPanes[i].Contents;                      for (int j = contents.Count - 1; j >= 0; j--)                      {                          IDockContent content = contents[j];                          if (content.DockHandler.DockState != DockState.Float)                              continue;                            if (!content.DockHandler.CloseButton)                              continue;                            if (content.DockHandler.HideOnClose)                              content.DockHandler.Hide();                          else                              content.DockHandler.Close();                      }                  }                    return;              }              else if (m.Msg == (int)Win32.Msgs.WM_NCLBUTTONDBLCLK)              {                  uint result = NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                  if (result != 2)	// HITTEST_CAPTION                  {                      base.WndProc(ref m);                      return;                  }                    DockPanel.SuspendLayout(true);                    // Restore to panel                  foreach (DockPane pane in NestedPanes)                  {                      if (pane.DockState != DockState.Float)                          continue;                      pane.RestoreToPanel();                  }                      DockPanel.ResumeLayout(true' true);                  return;              }              else if (m.Msg == WM_CHECKDISPOSE)              {                  if (NestedPanes.Count == 0)                      Dispose();                    return;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: if (m.Msg == (int)Win32.Msgs.WM_NCLBUTTONDOWN)  			{  				if (IsDisposed)  					return;    				uint result = NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);  				if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)	// HITTEST_CAPTION  				{  					Activate();  					m_dockPanel.BeginDrag(this);  				}  				else  					base.WndProc(ref m);    				return;  			}              else if (m.Msg == (int)Win32.Msgs.WM_NCRBUTTONDOWN)              {                  uint result = NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                  if (result == 2)	// HITTEST_CAPTION                  {                      DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes[0] : null;                      if (theOnlyPane != null && theOnlyPane.ActiveContent != null)                      {                          theOnlyPane.ShowTabPageContextMenu(this' PointToClient(Control.MousePosition));                          return;                      }                  }                    base.WndProc(ref m);                  return;              }              else if (m.Msg == (int)Win32.Msgs.WM_CLOSE)              {                  if (NestedPanes.Count == 0)                  {                      base.WndProc(ref m);                      return;                  }                    for (int i = NestedPanes.Count - 1; i >= 0; i--)                  {                      DockContentCollection contents = NestedPanes[i].Contents;                      for (int j = contents.Count - 1; j >= 0; j--)                      {                          IDockContent content = contents[j];                          if (content.DockHandler.DockState != DockState.Float)                              continue;                            if (!content.DockHandler.CloseButton)                              continue;                            if (content.DockHandler.HideOnClose)                              content.DockHandler.Hide();                          else                              content.DockHandler.Close();                      }                  }                    return;              }              else if (m.Msg == (int)Win32.Msgs.WM_NCLBUTTONDBLCLK)              {                  uint result = NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                  if (result != 2)	// HITTEST_CAPTION                  {                      base.WndProc(ref m);                      return;                  }                    DockPanel.SuspendLayout(true);                    // Restore to panel                  foreach (DockPane pane in NestedPanes)                  {                      if (pane.DockState != DockState.Float)                          continue;                      pane.RestoreToPanel();                  }                      DockPanel.ResumeLayout(true' true);                  return;              }              else if (m.Msg == WM_CHECKDISPOSE)              {                  if (NestedPanes.Count == 0)                      Dispose();                    return;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  for (int i = NestedPanes.Count - 1; i >= 0; i--)                  {                      DockPane paneFrom = NestedPanes[i];                      for (int j = paneFrom.Contents.Count - 1; j >= 0; j--)                      {                          IDockContent c = paneFrom.Contents[j];                          c.DockHandler.Pane = pane;                          if (contentIndex != -1)                              pane.SetContentIndex(c' contentIndex);                      }                  }              }              else              {                  DockAlignment alignment = DockAlignment.Left;                  if (dockStyle == DockStyle.Left)                      alignment = DockAlignment.Left;                  else if (dockStyle == DockStyle.Right)                      alignment = DockAlignment.Right;                  else if (dockStyle == DockStyle.Top)                      alignment = DockAlignment.Top;                  else if (dockStyle == DockStyle.Bottom)                      alignment = DockAlignment.Bottom;                    MergeNestedPanes(VisibleNestedPanes' pane.NestedPanesContainer.NestedPanes' pane' alignment' 0.5);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,DockTo,The following statement contains a magic number: MergeNestedPanes(VisibleNestedPanes' nestedPanesTo' prevPane' DockAlignment.Left' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 273);
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\FloatWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 273);
Magic Number,WeifenLuo.WinFormsUI.Docking,FocusManagerImpl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.FocusManager.cs,HookEventHandler,The following statement contains a magic number: Win32.Msgs msg = (Win32.Msgs)Marshal.ReadInt32(e.lParam' IntPtr.Size * 3);
Magic Number,WeifenLuo.WinFormsUI.Docking,FocusManagerImpl,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.FocusManager.cs,HookEventHandler,The following statement contains a magic number: if (msg == Win32.Msgs.WM_KILLFOCUS)                  {                      IntPtr wParam = Marshal.ReadIntPtr(e.lParam' IntPtr.Size * 2);                      DockPane pane = GetPaneFromHandle(wParam);                      if (pane == null)                          RefreshActiveWindow();                  }                  else if (msg == Win32.Msgs.WM_SETFOCUS)                      RefreshActiveWindow();
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: int curveSize = 6;
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,Win32Helper,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\Helpers\Win32Helper.cs,MakeLong,The following statement contains a magic number: return (uint)((high << 16) + low);
Missing Default,WeifenLuo.WinFormsUI.Docking,MdiClientController,C:\repos\jjensen_lua-tilde\lib\WinFormsUI\v2.2\Docking\DockPanel.MdiClientController.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)                  {                      case (int)Win32.Msgs.WM_NCCALCSIZE:                          // If AutoScroll is set to false' hide the scrollbars when the control                          // calculates its non-client area.                          if (!AutoScroll)                              NativeMethods.ShowScrollBar(m.HWnd' (int)Win32.ScrollBars.SB_BOTH' 0 /*false*/);                          break;                  }
