Implementation smell,Namespace,Class,File,Method,Description
Long Method,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The method has 146 lines of code.
Empty Catch Block,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,StoppedRollbackTest,The method has an empty catch block.
Empty Catch Block,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,NoOdds,The method has an empty catch block.
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  dict[2] = new object();                  // the TPL sometimes executes tasks on the same thread.                  var t = new Thread(() =>                  {                      Assert.IsFalse(Shield.IsInTransaction);                      Assert.IsFalse(dict.ContainsKey(2));                  });                  t.Start();                  t.Join();                    Assert.IsNotNull(dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  dict[2] = new object();                  // the TPL sometimes executes tasks on the same thread.                  var t = new Thread(() =>                  {                      Assert.IsFalse(Shield.IsInTransaction);                      Assert.IsFalse(dict.ContainsKey(2));                  });                  t.Start();                  t.Join();                    Assert.IsNotNull(dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  dict[2] = new object();                  // the TPL sometimes executes tasks on the same thread.                  var t = new Thread(() =>                  {                      Assert.IsFalse(Shield.IsInTransaction);                      Assert.IsFalse(dict.ContainsKey(2));                  });                  t.Start();                  t.Join();                    Assert.IsNotNull(dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,BasicTest,The following statement contains a magic number: var t2 = new Thread(() =>              {                  x2 = dict[2];              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,BasicTest,The following statement contains a magic number: Assert.IsNotNull(dict[2]);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,SimpleRace,The following statement contains a magic number: ParallelEnumerable.Range(0' 100000)                  .ForAll(i => Shield.InTransaction(                      () => dict[i % 100] = dict.ContainsKey(i % 100) ? dict[i % 100] + 1 : 1));
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,SimpleRace,The following statement contains a magic number: ParallelEnumerable.Range(0' 100000)                  .ForAll(i => Shield.InTransaction(                      () => dict[i % 100] = dict.ContainsKey(i % 100) ? dict[i % 100] + 1 : 1));
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,SimpleRace,The following statement contains a magic number: ParallelEnumerable.Range(0' 100000)                  .ForAll(i => Shield.InTransaction(                      () => dict[i % 100] = dict.ContainsKey(i % 100) ? dict[i % 100] + 1 : 1));
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,SimpleRace,The following statement contains a magic number: ParallelEnumerable.Range(0' 100000)                  .ForAll(i => Shield.InTransaction(                      () => dict[i % 100] = dict.ContainsKey(i % 100) ? dict[i % 100] + 1 : 1));
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,SimpleRace,The following statement contains a magic number: Shield.InTransaction(() => {                  for (int i = 0; i < 100; i++)                      Assert.AreEqual(1000' dict[i]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,SimpleRace,The following statement contains a magic number: Shield.InTransaction(() => {                  for (int i = 0; i < 100; i++)                      Assert.AreEqual(1000' dict[i]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,DictionaryRace,The following statement contains a magic number: var dict = new ShieldedDict<int' int>(                  Enumerable.Range(0' 100)                      .Select(i => new KeyValuePair<int' int>(i' 0))                      .ToArray());
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,DictionaryRace,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(0' 1000).Select(i => Task.Factory.StartNew(() =>                      Shield.InTransaction(() => {                          Interlocked.Increment(ref transactionCount);                          var a = dict[i % 100];                          Thread.Sleep(5);                          dict[i % 100] = a + 1;                      })' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,DictionaryRace,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(0' 1000).Select(i => Task.Factory.StartNew(() =>                      Shield.InTransaction(() => {                          Interlocked.Increment(ref transactionCount);                          var a = dict[i % 100];                          Thread.Sleep(5);                          dict[i % 100] = a + 1;                      })' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,DictionaryRace,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(0' 1000).Select(i => Task.Factory.StartNew(() =>                      Shield.InTransaction(() => {                          Interlocked.Increment(ref transactionCount);                          var a = dict[i % 100];                          Thread.Sleep(5);                          dict[i % 100] = a + 1;                      })' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,DictionaryRace,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(0' 1000).Select(i => Task.Factory.StartNew(() =>                      Shield.InTransaction(() => {                          Interlocked.Increment(ref transactionCount);                          var a = dict[i % 100];                          Thread.Sleep(5);                          dict[i % 100] = a + 1;                      })' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,DictionaryRace,The following statement contains a magic number: Assert.IsTrue(dict.Values.SequenceEqual(Enumerable.Repeat(10' 100)));
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,DictionaryRace,The following statement contains a magic number: Assert.IsTrue(dict.Values.SequenceEqual(Enumerable.Repeat(10' 100)));
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,DictionaryRace,The following statement contains a magic number: transactionCount == 100
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,ParallelOps,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                      Shield.InTransaction(() => {                          Interlocked.Increment(ref transactionCount);                          dict[i] = new object();                          Thread.Sleep(5);                      })' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,ParallelOps,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                      Shield.InTransaction(() => {                          Interlocked.Increment(ref transactionCount);                          dict[i] = new object();                          Thread.Sleep(5);                      })' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,ParallelOps,The following statement contains a magic number: Assert.AreEqual(100' transactionCount);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,ConstructorAndIndexerTest,The following statement contains a magic number: Assert.AreEqual(3' dict.Count);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,ConstructorAndIndexerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  dict["key a"] = objectC;                  Assert.AreEqual(3' dict.Count);                  Assert.AreEqual(objectC' dict["key a"]);                  Assert.AreEqual(objectB' dict["key b"]);                  Assert.AreEqual(objectC' dict["key c"]);                    dict["key a"] = objectB;                  Assert.AreEqual(3' dict.Count);                  Assert.AreEqual(objectB' dict["key a"]);                  Assert.AreEqual(objectB' dict["key b"]);                  Assert.AreEqual(objectC' dict["key c"]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,ConstructorAndIndexerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  dict["key a"] = objectC;                  Assert.AreEqual(3' dict.Count);                  Assert.AreEqual(objectC' dict["key a"]);                  Assert.AreEqual(objectB' dict["key b"]);                  Assert.AreEqual(objectC' dict["key c"]);                    dict["key a"] = objectB;                  Assert.AreEqual(3' dict.Count);                  Assert.AreEqual(objectB' dict["key a"]);                  Assert.AreEqual(objectB' dict["key b"]);                  Assert.AreEqual(objectC' dict["key c"]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,ConstructorAndIndexerTest,The following statement contains a magic number: Assert.AreEqual(3' dict.Count);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,ConstructorAndIndexerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  dict["a new one"] = objectD;                  Assert.AreEqual(4' dict.Count);                  Assert.AreEqual(objectB' dict["key a"]);                  Assert.AreEqual(objectB' dict["key b"]);                  Assert.AreEqual(objectC' dict["key c"]);                  Assert.AreEqual(objectD' dict["a new one"]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,ConstructorAndIndexerTest,The following statement contains a magic number: Assert.AreEqual(4' dict.Count);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EnumerationTest,The following statement contains a magic number: var ordinaryDict = new Dictionary<int' object>() {                  { 1' new object() }'                  { 101' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EnumerationTest,The following statement contains a magic number: var ordinaryDict = new Dictionary<int' object>() {                  { 1' new object() }'                  { 101' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EnumerationTest,The following statement contains a magic number: ordinaryDict.Add(2' addedObject);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EnumerationTest,The following statement contains a magic number: ordinaryDict.Remove(666999);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EnumerationTest,The following statement contains a magic number: Shield.InTransaction(() => {                  // as an IShielded implementor' the Dict is more complex and needs to be more carefully                  // tested for how well he manages thread-local data. So' we add some changes here.                  dict.Add(2' addedObject);                  dict.Remove(666999);                  Assert.IsTrue(dict.OrderBy(kvp => kvp.Key).SequenceEqual(ordinaryDict.OrderBy(kvp => kvp.Key)));              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EnumerationTest,The following statement contains a magic number: Shield.InTransaction(() => {                  // as an IShielded implementor' the Dict is more complex and needs to be more carefully                  // tested for how well he manages thread-local data. So' we add some changes here.                  dict.Add(2' addedObject);                  dict.Remove(666999);                  Assert.IsTrue(dict.OrderBy(kvp => kvp.Key).SequenceEqual(ordinaryDict.OrderBy(kvp => kvp.Key)));              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,AddTest,The following statement contains a magic number: Shield.InTransaction(() => {                  dict.Add(1' objectA);                  ((ICollection<KeyValuePair<int' object>>)dict).Add(                      new KeyValuePair<int' object>(2' objectB));                  Assert.AreEqual(2' dict.Count);                  Assert.AreEqual(objectA' dict[1]);                  Assert.AreEqual(objectB' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,AddTest,The following statement contains a magic number: Shield.InTransaction(() => {                  dict.Add(1' objectA);                  ((ICollection<KeyValuePair<int' object>>)dict).Add(                      new KeyValuePair<int' object>(2' objectB));                  Assert.AreEqual(2' dict.Count);                  Assert.AreEqual(objectA' dict[1]);                  Assert.AreEqual(objectB' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,AddTest,The following statement contains a magic number: Shield.InTransaction(() => {                  dict.Add(1' objectA);                  ((ICollection<KeyValuePair<int' object>>)dict).Add(                      new KeyValuePair<int' object>(2' objectB));                  Assert.AreEqual(2' dict.Count);                  Assert.AreEqual(objectA' dict[1]);                  Assert.AreEqual(objectB' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,AddTest,The following statement contains a magic number: Assert.AreEqual(2' dict.Count);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,AddTest,The following statement contains a magic number: Assert.AreEqual(objectB' dict[2]);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,CopyToTest,The following statement contains a magic number: var dict = new ShieldedDict<int' object>(                  Enumerable.Range(1' 1000).Select(i =>                      new KeyValuePair<int' object>(i' new object())).ToArray());
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,CopyToTest,The following statement contains a magic number: Assert.AreEqual(1000' dict.Count);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,CopyToTest,The following statement contains a magic number: var array = new KeyValuePair<int' object>[1100];
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,CopyToTest,The following statement contains a magic number: ((ICollection<KeyValuePair<int' object>>)dict).CopyTo(array' 100);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,CopyToTest,The following statement contains a magic number: Assert.IsTrue(array.Skip(100).OrderBy(kvp => kvp.Key).SequenceEqual(dict.OrderBy(kvp => kvp.Key)));
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,RemoveTest,The following statement contains a magic number: Shield.InTransaction(() => {                  dict.Remove("key a");                  Assert.AreEqual(2' dict.Count);                  Assert.IsFalse(dict.ContainsKey("key a"));              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,RemoveTest,The following statement contains a magic number: Assert.AreEqual(2' dict.Count);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  dict[1] = new object();                  dict[2] = new object();                    if (oneTime == null)                  {                      oneTime = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          Assert.IsFalse(dict.ContainsKey(2));                          Assert.IsFalse(dict.ContainsKey(4));                          Shield.InTransaction(() => dict[4] = new object());                      });                      oneTime.Start();                      oneTime.Join();                  }                    Assert.IsNotNull(dict[2]);                  Assert.IsNotNull(dict[4]);                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  dict[1] = new object();                  dict[2] = new object();                    if (oneTime == null)                  {                      oneTime = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          Assert.IsFalse(dict.ContainsKey(2));                          Assert.IsFalse(dict.ContainsKey(4));                          Shield.InTransaction(() => dict[4] = new object());                      });                      oneTime.Start();                      oneTime.Join();                  }                    Assert.IsNotNull(dict[2]);                  Assert.IsNotNull(dict[4]);                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  dict[1] = new object();                  dict[2] = new object();                    if (oneTime == null)                  {                      oneTime = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          Assert.IsFalse(dict.ContainsKey(2));                          Assert.IsFalse(dict.ContainsKey(4));                          Shield.InTransaction(() => dict[4] = new object());                      });                      oneTime.Start();                      oneTime.Join();                  }                    Assert.IsNotNull(dict[2]);                  Assert.IsNotNull(dict[4]);                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  dict[1] = new object();                  dict[2] = new object();                    if (oneTime == null)                  {                      oneTime = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          Assert.IsFalse(dict.ContainsKey(2));                          Assert.IsFalse(dict.ContainsKey(4));                          Shield.InTransaction(() => dict[4] = new object());                      });                      oneTime.Start();                      oneTime.Join();                  }                    Assert.IsNotNull(dict[2]);                  Assert.IsNotNull(dict[4]);                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  dict[1] = new object();                  dict[2] = new object();                    if (oneTime == null)                  {                      oneTime = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          Assert.IsFalse(dict.ContainsKey(2));                          Assert.IsFalse(dict.ContainsKey(4));                          Shield.InTransaction(() => dict[4] = new object());                      });                      oneTime.Start();                      oneTime.Join();                  }                    Assert.IsNotNull(dict[2]);                  Assert.IsNotNull(dict[4]);                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  dict[1] = new object();                  dict[2] = new object();                    if (oneTime == null)                  {                      oneTime = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          Assert.IsFalse(dict.ContainsKey(2));                          Assert.IsFalse(dict.ContainsKey(4));                          Shield.InTransaction(() => dict[4] = new object());                      });                      oneTime.Start();                      oneTime.Join();                  }                    Assert.IsNotNull(dict[2]);                  Assert.IsNotNull(dict[4]);                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  dict[1] = new object();                  dict[2] = new object();                    if (oneTime == null)                  {                      oneTime = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          Assert.IsFalse(dict.ContainsKey(2));                          Assert.IsFalse(dict.ContainsKey(4));                          Shield.InTransaction(() => dict[4] = new object());                      });                      oneTime.Start();                      oneTime.Join();                  }                    Assert.IsNotNull(dict[2]);                  Assert.IsNotNull(dict[4]);                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  dict[1] = new object();                  dict[2] = new object();                    if (oneTime == null)                  {                      oneTime = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          Assert.IsFalse(dict.ContainsKey(2));                          Assert.IsFalse(dict.ContainsKey(4));                          Shield.InTransaction(() => dict[4] = new object());                      });                      oneTime.Start();                      oneTime.Join();                  }                    Assert.IsNotNull(dict[2]);                  Assert.IsNotNull(dict[4]);                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  dict[1] = new object();                  dict[2] = new object();                    if (oneTime == null)                  {                      oneTime = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          Assert.IsFalse(dict.ContainsKey(2));                          Assert.IsFalse(dict.ContainsKey(4));                          Shield.InTransaction(() => dict[4] = new object());                      });                      oneTime.Start();                      oneTime.Join();                  }                    Assert.IsNotNull(dict[2]);                  Assert.IsNotNull(dict[4]);                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Assert.AreEqual(2' retryCount);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: var t2 = new Thread(() => {                  x2 = dict[2];                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: var t2 = new Thread(() => {                  x2 = dict[2];                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: var t2 = new Thread(() => {                  x2 = dict[2];                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: var t2 = new Thread(() => {                  x2 = dict[2];                  Assert.AreSame(dict[2]' dict[4]);                  Assert.AreNotSame(dict[1]' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Assert.IsNotNull(dict[2]);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Assert.AreSame(dict[2]' dict[4]);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Assert.AreSame(dict[2]' dict[4]);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqualityComparerTest,The following statement contains a magic number: Assert.AreNotSame(dict[1]' dict[2]);
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqComparerAndEnumeration,The following statement contains a magic number: var dict = Shield.InTransaction(() => new ShieldedDict<int' object>(new OddsAndEvens()) {                  { 1' new object() }'                  { 2' new object() }'              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqComparerAndEnumeration,The following statement contains a magic number: Shield.InTransaction(() => {                  var newOne = dict[4] = new object();                  int count = 0;                  foreach (var kvp in dict)                      count++;                  Assert.AreEqual(2' count);                  Assert.AreSame(newOne' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqComparerAndEnumeration,The following statement contains a magic number: Shield.InTransaction(() => {                  var newOne = dict[4] = new object();                  int count = 0;                  foreach (var kvp in dict)                      count++;                  Assert.AreEqual(2' count);                  Assert.AreSame(newOne' dict[2]);              });
Magic Number,ShieldedTests,DictionaryTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\DictionaryTests.cs,EqComparerAndEnumeration,The following statement contains a magic number: Shield.InTransaction(() => {                  var newOne = dict[4] = new object();                  int count = 0;                  foreach (var kvp in dict)                      count++;                  Assert.AreEqual(2' count);                  Assert.AreSame(newOne' dict[2]);              });
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,TransactionSafetyTest,The following statement contains a magic number: var a = new Shielded<int>(5);
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,TransactionSafetyTest,The following statement contains a magic number: Assert.AreEqual(5' a);
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,TransactionSafetyTest,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() =>                  a.Modify((ref int n) => n = 10));
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,TransactionSafetyTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  a.Modify((ref int n) => n = 20);                  // the TPL sometimes executes tasks on the same thread.                  int x1 = 0;                  var t = new Thread(() =>                  {                      Assert.IsFalse(Shield.IsInTransaction);                      x1 = a;                  });                  t.Start();                  t.Join();                    Assert.IsTrue(Shield.IsInTransaction);                  Assert.AreEqual(5' x1);                  Assert.AreEqual(20' a);              });
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,TransactionSafetyTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  a.Modify((ref int n) => n = 20);                  // the TPL sometimes executes tasks on the same thread.                  int x1 = 0;                  var t = new Thread(() =>                  {                      Assert.IsFalse(Shield.IsInTransaction);                      x1 = a;                  });                  t.Start();                  t.Join();                    Assert.IsTrue(Shield.IsInTransaction);                  Assert.AreEqual(5' x1);                  Assert.AreEqual(20' a);              });
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,TransactionSafetyTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  a.Modify((ref int n) => n = 20);                  // the TPL sometimes executes tasks on the same thread.                  int x1 = 0;                  var t = new Thread(() =>                  {                      Assert.IsFalse(Shield.IsInTransaction);                      x1 = a;                  });                  t.Start();                  t.Join();                    Assert.IsTrue(Shield.IsInTransaction);                  Assert.AreEqual(5' x1);                  Assert.AreEqual(20' a);              });
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,TransactionSafetyTest,The following statement contains a magic number: Assert.AreEqual(20' x2);
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,TransactionSafetyTest,The following statement contains a magic number: Assert.AreEqual(20' a);
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,RaceTest,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      bool committed = false;                      try                      {                          Shield.InTransaction(() =>                          {                              Shield.SideEffect(() => { committed = true; });                              Interlocked.Increment(ref transactionCount);                              int a = x;                              Thread.Sleep(5);                              x.Value = a + i;                              if (i == 100)                                  throw new InvalidOperationException();                          });                          Assert.AreNotEqual(100' i);                          Assert.IsTrue(committed);                      }                      catch                      {                          Assert.AreEqual(100' i);                          Assert.IsFalse(committed);                      }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,RaceTest,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      bool committed = false;                      try                      {                          Shield.InTransaction(() =>                          {                              Shield.SideEffect(() => { committed = true; });                              Interlocked.Increment(ref transactionCount);                              int a = x;                              Thread.Sleep(5);                              x.Value = a + i;                              if (i == 100)                                  throw new InvalidOperationException();                          });                          Assert.AreNotEqual(100' i);                          Assert.IsTrue(committed);                      }                      catch                      {                          Assert.AreEqual(100' i);                          Assert.IsFalse(committed);                      }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,RaceTest,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      bool committed = false;                      try                      {                          Shield.InTransaction(() =>                          {                              Shield.SideEffect(() => { committed = true; });                              Interlocked.Increment(ref transactionCount);                              int a = x;                              Thread.Sleep(5);                              x.Value = a + i;                              if (i == 100)                                  throw new InvalidOperationException();                          });                          Assert.AreNotEqual(100' i);                          Assert.IsTrue(committed);                      }                      catch                      {                          Assert.AreEqual(100' i);                          Assert.IsFalse(committed);                      }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,RaceTest,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      bool committed = false;                      try                      {                          Shield.InTransaction(() =>                          {                              Shield.SideEffect(() => { committed = true; });                              Interlocked.Increment(ref transactionCount);                              int a = x;                              Thread.Sleep(5);                              x.Value = a + i;                              if (i == 100)                                  throw new InvalidOperationException();                          });                          Assert.AreNotEqual(100' i);                          Assert.IsTrue(committed);                      }                      catch                      {                          Assert.AreEqual(100' i);                          Assert.IsFalse(committed);                      }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,RaceTest,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      bool committed = false;                      try                      {                          Shield.InTransaction(() =>                          {                              Shield.SideEffect(() => { committed = true; });                              Interlocked.Increment(ref transactionCount);                              int a = x;                              Thread.Sleep(5);                              x.Value = a + i;                              if (i == 100)                                  throw new InvalidOperationException();                          });                          Assert.AreNotEqual(100' i);                          Assert.IsTrue(committed);                      }                      catch                      {                          Assert.AreEqual(100' i);                          Assert.IsFalse(committed);                      }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,RaceTest,The following statement contains a magic number: Assert.AreEqual(4950' x);
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,RaceTest,The following statement contains a magic number: transactionCount == 100
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,SkewWriteTest,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 2).Select(i => Task.Factory.StartNew(() =>                      Shield.InTransaction(() =>                      {                          Interlocked.Increment(ref transactionCount);                          if (cats + dogs < 3)                          {                              Thread.Sleep(200);                              if (i == 1)                                  cats.Modify((ref int n) => n++);                              else                                  dogs.Modify((ref int n) => n++);                          }                      })' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,SkewWriteTest,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 2).Select(i => Task.Factory.StartNew(() =>                      Shield.InTransaction(() =>                      {                          Interlocked.Increment(ref transactionCount);                          if (cats + dogs < 3)                          {                              Thread.Sleep(200);                              if (i == 1)                                  cats.Modify((ref int n) => n++);                              else                                  dogs.Modify((ref int n) => n++);                          }                      })' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,SkewWriteTest,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 2).Select(i => Task.Factory.StartNew(() =>                      Shield.InTransaction(() =>                      {                          Interlocked.Increment(ref transactionCount);                          if (cats + dogs < 3)                          {                              Thread.Sleep(200);                              if (i == 1)                                  cats.Modify((ref int n) => n++);                              else                                  dogs.Modify((ref int n) => n++);                          }                      })' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,SkewWriteTest,The following statement contains a magic number: Assert.AreEqual(3' cats + dogs);
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,SkewWriteTest,The following statement contains a magic number: Assert.AreEqual(3' transactionCount);
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,ConditionalTest,The following statement contains a magic number: const int count = 1000;
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,ConditionalTest,The following statement contains a magic number: int a = 5;
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,ConditionalTest,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() =>                  Shield.Conditional(() => a > 10' () => { }));
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,EventTest,The following statement contains a magic number: Assert.AreEqual(3' eventCount);
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,EventTest,The following statement contains a magic number: Assert.AreEqual(3' eventCount);
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,StoppedRollbackTest,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  Shield.SideEffect(null' () => {                      var localStore = i.GetType()                          .GetField("_locals"' BindingFlags.Instance | BindingFlags.NonPublic)                          .GetValue(i);                      Assert.IsNull(localStore.GetType()                          .GetField("_holderContext"' BindingFlags.Instance | BindingFlags.NonPublic)                          .GetValue(localStore));                  });                  try                  {                      i.Value = 10;                      if (retryCount == 1)                          Shield.Rollback();                  }                  catch (TransException) { }              });
Magic Number,ShieldedTests,BasicTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\BasicTests.cs,StoppedRollbackTest,The following statement contains a magic number: Assert.AreEqual(2' retryCount);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: var seq = new ShieldedSeq<int>(                  Enumerable.Range(1' 20).ToArray());
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(20' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: i < 20
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: ParallelEnumerable.Range(0' 20)                  .ForAll(n => Shield.InTransaction(() =>                       seq [n] = seq [n] + 20)              );
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: ParallelEnumerable.Range(0' 20)                  .ForAll(n => Shield.InTransaction(() =>                       seq [n] = seq [n] + 20)              );
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(i + 21' seq [i]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: i < 20
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Shield.InTransaction(() => {                  seq.Append(0);                  // test commute                  Assert.AreEqual(0' seq [20]);              }              );
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(21' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(20' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(21' a);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(i + 22' seq [i]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: i < 19
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(0' seq [19]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Shield.InTransaction(() => {                  seq.Prepend(a);                  seq.RemoveAt(20);              }              );
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(20' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(i + 21' seq [i]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: i < 20
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(10' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(i * 2 + 22' seq [i]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(i * 2 + 22' seq [i]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: i < 10
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: var seq3 = new ShieldedSeq<int>(                  Enumerable.Range(1' 5).ToArray());
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(4' seq3.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(2' seq3 [0]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Shield.InTransaction(() => seq3.RemoveAt(3));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(3' seq3.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(4' seq3 [2]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(4' seq3 [2]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Shield.InTransaction(() => seq3.Append(100));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(4' seq3.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(100' seq3 [3]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(100' seq3 [3]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Shield.InTransaction(() => seq3.RemoveAll(i => i == 100));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(3' seq3.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(4' seq3 [2]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(4' seq3 [2]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Shield.InTransaction(() => seq3.Append(100));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(4' seq3.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(100' seq3 [3]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,BasicOps,The following statement contains a magic number: Assert.AreEqual(100' seq3 [3]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,HeadTests,The following statement contains a magic number: var seq4 = new ShieldedSeq<int>(                  Enumerable.Range(1' 10).ToArray());
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,HeadTests,The following statement contains a magic number: Shield.InTransaction(() => { seq4.Prepend(100); });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,HeadTests,The following statement contains a magic number: Assert.AreEqual(11' seq4.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,HeadTests,The following statement contains a magic number: Assert.AreEqual(100' seq4.Head);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,HeadTests,The following statement contains a magic number: Assert.AreEqual(100' seq4.First());
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,HeadTests,The following statement contains a magic number: Assert.AreEqual(100'                  Shield.InTransaction(() => seq4.TakeHead()));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,HeadTests,The following statement contains a magic number: Assert.AreEqual(10' seq4.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,HeadTests,The following statement contains a magic number: i < 10
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: var seq = new ShieldedSeq<int>(                  Enumerable.Range(1' 20).ToArray());
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Shield.InTransaction(() =>                  Assert.IsTrue(seq.Remove(5)));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Assert.AreEqual(19' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: i <= 20
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Assert.AreEqual(18' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Assert.AreEqual(2' seq.Head);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Shield.InTransaction(() =>                  Assert.IsTrue(seq.Remove(20)));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Shield.InTransaction(() =>                  Assert.IsFalse(seq.Remove(30)));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Assert.AreEqual(17' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Assert.AreEqual(2' seq.Head);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Assert.AreEqual(19' seq[16]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveTest,The following statement contains a magic number: Assert.AreEqual(19' seq[16]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TailPassTest,The following statement contains a magic number: var tailPass = new ShieldedSeq<int>(                  Enumerable.Range(1' 5).ToArray());
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TailPassTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tailPass.Append(6);                  int counter = 0;                  foreach (var i in tailPass)                      counter++;                  Assert.AreEqual(6' counter);              });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TailPassTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tailPass.Append(6);                  int counter = 0;                  foreach (var i in tailPass)                      counter++;                  Assert.AreEqual(6' counter);              });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TailPassTest,The following statement contains a magic number: Shield.InTransaction(() => {                  // this causes immediate degeneration of the Append commute.                  var h = tailPass.Any();                  tailPass.Append(7);                  int counter = 0;                  foreach (var i in tailPass)                      counter++;                  Assert.AreEqual(7' counter);              });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TailPassTest,The following statement contains a magic number: Shield.InTransaction(() => {                  // this causes immediate degeneration of the Append commute.                  var h = tailPass.Any();                  tailPass.Append(7);                  int counter = 0;                  foreach (var i in tailPass)                      counter++;                  Assert.AreEqual(7' counter);              });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TailPassTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tailPass.Append(8);                  tailPass.Append(9);                  Assert.AreEqual(1' tailPass.Head);                  int counter = 0;                  foreach (var i in tailPass)                      Assert.AreEqual(++counter' i);                  Assert.AreEqual(9' counter);              });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TailPassTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tailPass.Append(8);                  tailPass.Append(9);                  Assert.AreEqual(1' tailPass.Head);                  int counter = 0;                  foreach (var i in tailPass)                      Assert.AreEqual(++counter' i);                  Assert.AreEqual(9' counter);              });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TailPassTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tailPass.Append(8);                  tailPass.Append(9);                  Assert.AreEqual(1' tailPass.Head);                  int counter = 0;                  foreach (var i in tailPass)                      Assert.AreEqual(++counter' i);                  Assert.AreEqual(9' counter);              });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TailPassTest,The following statement contains a magic number: Assert.AreEqual(9' tailPass.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TwoQueuesTest,The following statement contains a magic number: Shield.InTransaction(() => {                  transactionCount++;                  seq2.Append(2);                  seq1.Append(1);                  if (oneTimer == null)                  {                      oneTimer = new Thread(() => Shield.InTransaction(() =>                      {                          seq2.Append(1);                      }));                      oneTimer.Start();                      oneTimer.Join();                  }                  var b = seq1.Any();              });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TwoQueuesTest,The following statement contains a magic number: Assert.AreEqual(2' seq2.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TwoQueuesTest,The following statement contains a magic number: Assert.AreEqual(2' seq2[1]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TwoQueuesTest,The following statement contains a magic number: Shield.InTransaction(() => {                  transactionCount++;                  seq1.Append(1);                  seq2.Append(2);                  if (oneTimer == null)                  {                      oneTimer = new Thread(() => Shield.InTransaction(() =>                      {                          seq2.Append(1);                      }));                      oneTimer.Start();                      oneTimer.Join();                  }                  // the difference is here - seq2:                  var b = seq2.Any();              });
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TwoQueuesTest,The following statement contains a magic number: Assert.AreEqual(2' transactionCount);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TwoQueuesTest,The following statement contains a magic number: Assert.AreEqual(2' seq2.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,TwoQueuesTest,The following statement contains a magic number: Assert.AreEqual(2' seq2[1]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: var seq = new ShieldedSeq<int>(2' 3' 4' 6' 7);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: var seq = new ShieldedSeq<int>(2' 3' 4' 6' 7);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: var seq = new ShieldedSeq<int>(2' 3' 4' 6' 7);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: var seq = new ShieldedSeq<int>(2' 3' 4' 6' 7);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: var seq = new ShieldedSeq<int>(2' 3' 4' 6' 7);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Assert.AreEqual(6' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Assert.AreEqual(2' seq[1]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Shield.InTransaction(() => seq.Insert(4' 5));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Shield.InTransaction(() => seq.Insert(4' 5));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Assert.AreEqual(7' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Assert.AreEqual(2' seq[1]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Assert.AreEqual(5' seq[4]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Assert.AreEqual(5' seq[4]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Assert.AreEqual(6' seq[5]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Assert.AreEqual(6' seq[5]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Shield.InTransaction(() => seq.Insert(7' 8));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Shield.InTransaction(() => seq.Insert(7' 8));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,InsertTest,The following statement contains a magic number: Assert.AreEqual(8' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveAllWithExceptions,The following statement contains a magic number: var seq = new ShieldedSeq<int>(Enumerable.Range(1' 10).ToArray());
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveAllWithExceptions,The following statement contains a magic number: Shield.InTransaction(() =>                   // handling the exception here means the transaction will commit.                  Assert.Throws<InvalidOperationException>(() =>                      seq.RemoveAll(i => {                          if (i == 5)                              throw new InvalidOperationException();                          return true;                      })));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveAllWithExceptions,The following statement contains a magic number: Assert.AreEqual(5' seq[0]);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveAllWithExceptions,The following statement contains a magic number: Assert.AreEqual(6' seq.Count);
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveAllLastElement,The following statement contains a magic number: var seq = new ShieldedSeq<int>(Enumerable.Range(1' 10).ToArray());
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveAllLastElement,The following statement contains a magic number: Shield.InTransaction(() => seq.RemoveAll(i => i == 10));
Magic Number,ShieldedTests,SeqTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SeqTests.cs,RemoveAllLastElement,The following statement contains a magic number: Shield.InTransaction(() =>                  Assert.IsTrue(seq.SequenceEqual(Enumerable.Range(1' 9))));
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,IndexerTest,The following statement contains a magic number: Assert.AreEqual(3' tree.Count);
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,IndexerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tree["key a"] = objectC;                  Assert.AreEqual(3' tree.Count);                  Assert.AreEqual(objectC' tree["key a"]);                  Assert.AreEqual(objectB' tree["key b"]);                  Assert.AreEqual(objectC' tree["key c"]);              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,IndexerTest,The following statement contains a magic number: Assert.AreEqual(3' tree.Count);
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,IndexerTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tree["a new one"] = objectD;                  Assert.AreEqual(4' tree.Count);                  Assert.AreEqual(objectC' tree["key a"]);                  Assert.AreEqual(objectB' tree["key b"]);                  Assert.AreEqual(objectC' tree["key c"]);                  Assert.AreEqual(objectD' tree["a new one"]);              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,IndexerTest,The following statement contains a magic number: Assert.AreEqual(4' tree.Count);
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,EnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,EnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,EnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,EnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,EnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,EnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,EnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,EnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,DescendingEnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,DescendingEnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,DescendingEnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,DescendingEnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,DescendingEnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,DescendingEnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,DescendingEnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,DescendingEnumerationTest,The following statement contains a magic number: var sortedList = new SortedList<int' object>() {                  { 1' new object() }'                  { 2' new object() }'                  { 3' new object() }'                  { 101' new object() }'                  { 154' new object() }'                  { 230' new object() }'                  { 456' new object() }'                  { 2055' new object() }'                  { 666999' new object() }              };
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => {                  foreach (var kvp in tree.Range(1' 5)) ;              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.Range(5' 1).Any());                  Assert.IsTrue(tree.Range(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.Range(2' 3).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.Range(2' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2' 4' 5 }));                  Assert.IsTrue(tree.Range(5' 100).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 7' 9' 15' 19' 22 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: var tree = Shield.InTransaction(() => new ShieldedTree<int' object>() {                  { 1' null }'                  { 1' null }'                  { 2' null }'                  { 4' null }'                  { 5' null }'                  { 7' null }'                  { 9' null }'                  { 15' null }'                  { 19' null }'                  { 22' null }'              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => {                  foreach (var kvp in tree.RangeDescending(5' 1)) ;              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RangeDescendingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.IsFalse(tree.RangeDescending(1' 5).Any());                  Assert.IsTrue(tree.RangeDescending(1' 1).Select(kvp => kvp.Key).SequenceEqual(new int[] { 1' 1 }));                  Assert.IsTrue(tree.RangeDescending(3' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 2 }));                  Assert.IsTrue(tree.RangeDescending(5' 2).Select(kvp => kvp.Key).SequenceEqual(new int[] { 5' 4' 2 }));                  Assert.IsTrue(tree.RangeDescending(100' 5).Select(kvp => kvp.Key).SequenceEqual(new int[] { 22' 19' 15' 9' 7' 5 }));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,AddTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tree.Add(1' objectA);                  ((ICollection<KeyValuePair<int' object>>)tree).Add(                      new KeyValuePair<int' object>(2' objectB));                  Assert.AreEqual(2' tree.Count);                  Assert.AreEqual(objectA' tree[1]);                  Assert.AreEqual(objectB' tree[2]);              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,AddTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tree.Add(1' objectA);                  ((ICollection<KeyValuePair<int' object>>)tree).Add(                      new KeyValuePair<int' object>(2' objectB));                  Assert.AreEqual(2' tree.Count);                  Assert.AreEqual(objectA' tree[1]);                  Assert.AreEqual(objectB' tree[2]);              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,AddTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tree.Add(1' objectA);                  ((ICollection<KeyValuePair<int' object>>)tree).Add(                      new KeyValuePair<int' object>(2' objectB));                  Assert.AreEqual(2' tree.Count);                  Assert.AreEqual(objectA' tree[1]);                  Assert.AreEqual(objectB' tree[2]);              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,AddTest,The following statement contains a magic number: Assert.AreEqual(2' tree.Count);
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,AddTest,The following statement contains a magic number: Assert.AreEqual(objectB' tree[2]);
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,AddTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tree.Add(1' objectA2);                  Assert.AreEqual(3' tree.Count);                  Assert.IsTrue(expectedValues.SetEquals(tree.Range(1' 1).Select(kvp => kvp.Value)));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,AddTest,The following statement contains a magic number: Assert.AreEqual(3' tree.Count);
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,CopyToTest,The following statement contains a magic number: ParallelEnumerable.Range(1' 1000).ForAll(                  i => Shield.InTransaction(() => tree.Add(i' new object())));
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,CopyToTest,The following statement contains a magic number: Assert.AreEqual(1000' tree.Count);
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,CopyToTest,The following statement contains a magic number: var array = new KeyValuePair<int' object>[1100];
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,CopyToTest,The following statement contains a magic number: ((ICollection<KeyValuePair<int' object>>)tree).CopyTo(array' 100);
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,CopyToTest,The following statement contains a magic number: Shield.InTransaction(() =>                  Assert.IsTrue(array.Skip(100).SequenceEqual(tree)));
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RemoveTest,The following statement contains a magic number: Shield.InTransaction(() => {                  tree.Remove("key a");                  Assert.AreEqual(2' tree.Count);                  Assert.IsFalse(tree.ContainsKey("key a"));              });
Magic Number,ShieldedTests,TreeTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\TreeTests.cs,RemoveTest,The following statement contains a magic number: Assert.AreEqual(2' tree.Count);
Magic Number,ShieldedTests,ProxyTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ProxyTests.cs,BasicTest,The following statement contains a magic number: Assert.AreEqual(2' transactionCount);
Magic Number,ShieldedTests,ProxyTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ProxyTests.cs,BasicTest,The following statement contains a magic number: Assert.AreEqual(2' newTest.NameChanges);
Magic Number,ShieldedTests,ProxyTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ProxyTests.cs,BasicTest,The following statement contains a magic number: Assert.AreEqual(3' newTest.AnyPropertyChanges);
Magic Number,ShieldedTests,ProxyTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ProxyTests.cs,ProxyCommuteTest,The following statement contains a magic number: Task.WaitAll(Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() => {                  Shield.InTransaction(() => {                      Interlocked.Increment(ref transactionCount);                      test.Commute(() => {                          Interlocked.Increment(ref commuteCount);                          test.Counter = test.Counter + i;                          Thread.Sleep(1);                      });                  });              }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,ProxyTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ProxyTests.cs,ProxyCommuteTest,The following statement contains a magic number: Assert.AreEqual(5050' test.Counter);
Magic Number,ShieldedTests,ProxyTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ProxyTests.cs,ProxyCommuteTest,The following statement contains a magic number: Assert.AreEqual(100' transactionCount);
Magic Number,ShieldedTests,ProxyTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ProxyTests.cs,ProxyCommuteTest,The following statement contains a magic number: Assert.Greater(commuteCount' 100);
Magic Number,ShieldedTests,ProxyTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ProxyTests.cs,ProtectedSetterTest,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => test.SetFullyProtected(5));
Magic Number,ShieldedTests,ProxyTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ProxyTests.cs,ProtectedSetterTest,The following statement contains a magic number: Shield.InTransaction(() => test.SetFullyProtected(5));
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,NoOdds,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      try                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              int a = x;                              Thread.Sleep(5);                              x.Value = a + i;                          });                      }                      catch (InvalidOperationException) { }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,NoOdds,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      try                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              int a = x;                              Thread.Sleep(5);                              x.Value = a + i;                          });                      }                      catch (InvalidOperationException) { }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,NoOdds,The following statement contains a magic number: Assert.AreEqual(50' preCommitFails);
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,NoOdds,The following statement contains a magic number: Assert.AreEqual(2550' x);
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,NoOdds,The following statement contains a magic number: transactionCount == 100
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Validation,The following statement contains a magic number: var list1 = new ShieldedSeq<int>(Enumerable.Range(1' 100).ToArray());
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Validation,The following statement contains a magic number: Shield.PreCommit(() => list1.Count + list2.Count != 100' () => {                  Interlocked.Increment(ref validationFails);                  throw new ValidationException();              });
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Validation,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      try                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              int x = list1.TakeHead();                              if (i < 100)                                  list2.Append(x);                          });                          Assert.AreNotEqual(100' i);                      }                      catch (ValidationException)                      {                          Assert.AreEqual(100' i);                      }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Validation,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      try                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              int x = list1.TakeHead();                              if (i < 100)                                  list2.Append(x);                          });                          Assert.AreNotEqual(100' i);                      }                      catch (ValidationException)                      {                          Assert.AreEqual(100' i);                      }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Validation,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      try                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              int x = list1.TakeHead();                              if (i < 100)                                  list2.Append(x);                          });                          Assert.AreNotEqual(100' i);                      }                      catch (ValidationException)                      {                          Assert.AreEqual(100' i);                      }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Validation,The following statement contains a magic number: Task.WaitAll(                  Enumerable.Range(1' 100).Select(i => Task.Factory.StartNew(() =>                  {                      try                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              int x = list1.TakeHead();                              if (i < 100)                                  list2.Append(x);                          });                          Assert.AreNotEqual(100' i);                      }                      catch (ValidationException)                      {                          Assert.AreEqual(100' i);                      }                  }' TaskCreationOptions.LongRunning)).ToArray());
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Validation,The following statement contains a magic number: Assert.AreEqual(99' list2.Count);
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Prioritization,The following statement contains a magic number: var barrier = new Barrier(2);
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Prioritization,The following statement contains a magic number: var slowThread1 = new Thread(() => {                  barrier.SignalAndWait();                  Shield.InTransaction(() => {                      Interlocked.Increment(ref slowThread1Repeats);                      int a = x;                      Thread.Sleep(100);                      x.Value = a - 1;                  });              });
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Prioritization,The following statement contains a magic number: Enumerable.Range(1' 1000)
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Prioritization,The following statement contains a magic number: Assert.AreEqual(999' x);
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Prioritization,The following statement contains a magic number: var slowThread2 = new Thread(() => {                  barrier.SignalAndWait();                  lock (lockObj)                  {                      Shield.InTransaction(() =>                      {                          Interlocked.Increment(ref slowThread2Repeats);                          int a = x;                          Thread.Sleep(100);                          x.Value = a - 1;                      });                  }              });
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Prioritization,The following statement contains a magic number: Enumerable.Range(1' 1000)
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,Prioritization,The following statement contains a magic number: Assert.AreEqual(999' x);
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,CommuteInvariantProblem,The following statement contains a magic number: var thread = new Thread(() => {                  // if the testField is even' increment the effectField commutatively.                  foreach (int i in Enumerable.Range(1' 1000))                      Shield.InTransaction(() => {                          if ((testField & 1) == 0)                          {                              effectField.Commute((ref int n) => n++);                          }                      });              });
Magic Number,ShieldedTests,PreCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\PreCommitTests.cs,CommuteInvariantProblem,The following statement contains a magic number: Enumerable.Range(1' 1000)
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,RollbackWhenCommitting,The following statement contains a magic number: Shield.InTransaction(() => x.Value = 5);
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,NoExpandingOfTransaction,The following statement contains a magic number: Shield.InTransaction(() => {                      int x = a;                      written.Value = 5;                  });
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,DictionaryAccessExpandingTest,The following statement contains a magic number: Shield.InTransaction(() => {                  d[1] = new object();                  d[2] = new object();              });
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,DictionaryAccessExpandingTest,The following statement contains a magic number: Assert.Throws<AggregateException>(() =>                      Shield.InTransaction(() => {                          x.Value = 1;                          var obj = d[2];                      }));
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,DictionaryAccessExpandingTest,The following statement contains a magic number: Assert.Throws<AggregateException>(() =>                      Shield.InTransaction(() => {                          d[1] = new object();                          var obj = d[2];                      }));
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,DictionaryAccessExpandingTest,The following statement contains a magic number: Shield.InTransaction(() => {                      var obj = d[1];                      d[2] = new object();                  });
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,WhenCommittingOneField,The following statement contains a magic number: Shield.InTransaction(() => b.Value = 10);
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,WhenCommittingOneField,The following statement contains a magic number: Assert.AreEqual(10' b);
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,WhenCommittingOneField,The following statement contains a magic number: Shield.InTransaction(() => a.Value = 10);
Magic Number,ShieldedTests,WhenCommittingTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\WhenCommittingTests.cs,WhenCommittingOneField,The following statement contains a magic number: Assert.AreEqual(10' a);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' a);                  a.Commute((ref int n) => n++);                  Assert.AreEqual(2' a);              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Assert.AreEqual(2' a);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Commute((ref int n) => n++);                  Assert.AreEqual(3' a);              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Assert.AreEqual(3' a);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: ParallelEnumerable.Repeat(1' 100).ForAll(i => Shield.InTransaction(() => {                  Interlocked.Increment(ref transactionCount);                  a.Commute((ref int n) => {                      Interlocked.Increment(ref commuteCount);                      Thread.Sleep(10); // needs this.. (running on Mono 2.10)                      n++;                  });              }));
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: ParallelEnumerable.Repeat(1' 100).ForAll(i => Shield.InTransaction(() => {                  Interlocked.Increment(ref transactionCount);                  a.Commute((ref int n) => {                      Interlocked.Increment(ref commuteCount);                      Thread.Sleep(10); // needs this.. (running on Mono 2.10)                      n++;                  });              }));
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Assert.AreEqual(103' a);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Assert.AreEqual(100' transactionCount);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Assert.Greater(commuteCount' 100);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Commute((ref int n) => n -= 3);                  a.Commute((ref int n) => n *= 2);              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Commute((ref int n) => n -= 3);                  a.Commute((ref int n) => n *= 2);              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,BasicCommuteTest,The following statement contains a magic number: Assert.AreEqual(200' a);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,DegeneratingCommuteTest,The following statement contains a magic number: int numInc = 100000;
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,DegeneratingCommuteTest,The following statement contains a magic number: ParallelEnumerable.Repeat(1' numInc/2).ForAll(i => Shield.InTransaction(() => {                  Interlocked.Increment(ref transactionCount);                  a.Commute((ref int n) => {                      Interlocked.Increment(ref commuteCount);                      n++;                  });                  a.Commute((ref int n) => {                      Interlocked.Increment(ref commuteCount);                      n++;                  });                  // so' we cause it to degenerate. there was a subtle bug in enlisting which                  // would allow a degenerated commute to execute before checking the lock!                  int x = a;              }));
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,DegeneratingCommuteTest,The following statement contains a magic number: Assert.GreaterOrEqual(transactionCount' commuteCount/2);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  seq.Append(1);                  seq.Append(2);                  seq.Append(3);                  seq.Remove(2);                  Assert.IsTrue(seq.Any());                  Assert.AreEqual(2' seq.Count);                  Assert.AreEqual(1' seq[0]);                  Assert.AreEqual(3' seq[1]);              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  seq.Append(1);                  seq.Append(2);                  seq.Append(3);                  seq.Remove(2);                  Assert.IsTrue(seq.Any());                  Assert.AreEqual(2' seq.Count);                  Assert.AreEqual(1' seq[0]);                  Assert.AreEqual(3' seq[1]);              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  seq.Append(1);                  seq.Append(2);                  seq.Append(3);                  seq.Remove(2);                  Assert.IsTrue(seq.Any());                  Assert.AreEqual(2' seq.Count);                  Assert.AreEqual(1' seq[0]);                  Assert.AreEqual(3' seq[1]);              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  seq.Append(1);                  seq.Append(2);                  seq.Append(3);                  seq.Remove(2);                  Assert.IsTrue(seq.Any());                  Assert.AreEqual(2' seq.Count);                  Assert.AreEqual(1' seq[0]);                  Assert.AreEqual(3' seq[1]);              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  seq.Append(1);                  seq.Append(2);                  seq.Append(3);                  seq.Remove(2);                  Assert.IsTrue(seq.Any());                  Assert.AreEqual(2' seq.Count);                  Assert.AreEqual(1' seq[0]);                  Assert.AreEqual(3' seq[1]);              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  transactionCount++;                  seq.Append(1);                  if (oneTimer == null)                  {                      oneTimer = new Thread(() => Shield.InTransaction(() =>                          {                              seq.Append(2);                          }));                      oneTimer.Start();                      oneTimer.Join();                  }              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' seq.Count);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' seq[0]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => { seq.Clear(); seq.Append(1); seq.Append(2); });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' seq[1]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  transactionCount++;                  Assert.AreEqual(1' seq.TakeHead());                  seq.Append(4);                  if (oneTimer == null)                  {                      oneTimer = new Thread(() => Shield.InTransaction(() =>                          {                              seq.Append(3);                          }));                      oneTimer.Start();                      oneTimer.Join();                  }              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  transactionCount++;                  Assert.AreEqual(1' seq.TakeHead());                  seq.Append(4);                  if (oneTimer == null)                  {                      oneTimer = new Thread(() => Shield.InTransaction(() =>                          {                              seq.Append(3);                          }));                      oneTimer.Start();                      oneTimer.Join();                  }              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' transactionCount);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(3' seq.Count);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' seq[0]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(3' seq[1]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(4' seq[2]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(4' seq[2]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => { seq.Clear(); seq.Append(1); seq.Append(2); });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' seq[1]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  // if we switch the order' doesn't matter.                  transactionCount++;                  seq.Append(4);                  Assert.AreEqual(1' seq.TakeHead());                  if (oneTimer == null)                  {                      oneTimer = new Thread(() => Shield.InTransaction(() =>                          {                              seq.Append(3);                          }));                      oneTimer.Start();                      oneTimer.Join();                  }              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  // if we switch the order' doesn't matter.                  transactionCount++;                  seq.Append(4);                  Assert.AreEqual(1' seq.TakeHead());                  if (oneTimer == null)                  {                      oneTimer = new Thread(() => Shield.InTransaction(() =>                          {                              seq.Append(3);                          }));                      oneTimer.Start();                      oneTimer.Join();                  }              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' transactionCount);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(3' seq.Count);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' seq[0]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(3' seq[1]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(4' seq[2]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(4' seq[2]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  transactionCount++;                  Assert.AreEqual(1' seq.TakeHead());                  seq.Append(3);                  if (oneTimer == null)                  {                      oneTimer = new Thread(() => Shield.InTransaction(() =>                          {                              seq.Append(2);                          }));                      oneTimer.Start();                      oneTimer.Join();                  }              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  transactionCount++;                  Assert.AreEqual(1' seq.TakeHead());                  seq.Append(3);                  if (oneTimer == null)                  {                      oneTimer = new Thread(() => Shield.InTransaction(() =>                          {                              seq.Append(2);                          }));                      oneTimer.Start();                      oneTimer.Join();                  }              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' transactionCount);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' seq.Count);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(2' seq[0]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.AreEqual(3' seq[1]);
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,ComplexCommute,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() =>                  Shield.InTransaction(() => {                      a.Commute((ref int n) => n = 1);                      b.Commute((ref int n) => {                          n = 1;                          a.Commute((ref int n2) => n2 = 2);                      });                  }));
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,SyncSideEffectReadsCommute,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Commute((ref int x) => x++);                    var otherThread = new Thread(() => Shield.InTransaction(() =>                  {                      a.Value = 10;                  }));                  otherThread.Start();                  otherThread.Join();                    Shield.SideEffect(null' () => Assert.Fail("Invalid rollback occurred."));                  Shield.SyncSideEffect(() =>                  {                      // here' the field's last written value has version 1' and our ReadStamp is 0.                      // however' the commute subtransaction had ReadStamp 1' and it checked out' so'                      // this should not be a problem.                      lastReadValue = a.Value;                  });              });
Magic Number,ShieldedTests,CommuteTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\CommuteTests.cs,SyncSideEffectReadsCommute,The following statement contains a magic number: Assert.AreEqual(11' lastReadValue);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,BasicRunToCommit,The following statement contains a magic number: var a = new Shielded<int>(5);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,BasicRunToCommit,The following statement contains a magic number: var t = new Thread(() => Shield.InTransaction(() => {                      Interlocked.Increment(ref runCount);                      if (a == 5) // this will block' and continue after the Commit call below                      {                          Interlocked.Increment(ref insideIfCount);                          a.Value = 10;                      }                  }));
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,BasicRunToCommit,The following statement contains a magic number: var t = new Thread(() => Shield.InTransaction(() => {                      Interlocked.Increment(ref runCount);                      if (a == 5) // this will block' and continue after the Commit call below                      {                          Interlocked.Increment(ref insideIfCount);                          a.Value = 10;                      }                  }));
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,BasicRunToCommit,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,BasicRunToCommit,The following statement contains a magic number: cont.InContext(() => Assert.AreEqual(20' a));
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,BasicRunToCommit,The following statement contains a magic number: Assert.AreEqual(5' a);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,BasicRunToCommit,The following statement contains a magic number: Assert.AreEqual(20' a);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,BasicRunToCommit,The following statement contains a magic number: Assert.AreEqual(20' a);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,RunToCommitTimeout,The following statement contains a magic number: var a = new Shielded<int>(5);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,RunToCommitTimeout,The following statement contains a magic number: cont.InContext(_ => {                      a.Value = 20;                      // NB that any exception thrown in onRollback would be unhandled in this example!                      Shield.SideEffect(null' () => rollback = true);                  });
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,RunToCommitTimeout,The following statement contains a magic number: Shield.InTransaction(() => Assert.AreEqual(5' a));
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,RunToCommitTimeout,The following statement contains a magic number: Assert.Greater(time' 150);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,RunToCommitTimeout,The following statement contains a magic number: Assert.Less(time' 250);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,RunToCommitTimeout,The following statement contains a magic number: Assert.AreEqual(5' a);
Magic Number,ShieldedTests,RunToCommitTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\RunToCommitTests.cs,TryCommitRollbackAfterTimeout,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ShieldedTests,SyncSideEffectTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SyncSideEffectTests.cs,BasicSyncSideEffect,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Value = 10;                  Shield.SyncSideEffect(() => {                      var t = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          // attempting to do this in a transaction would cause a deadlock!                          Assert.AreEqual(0' a);                      });                      t.Start();                      t.Join();                      Assert.AreEqual(10' a);                  });              });
Magic Number,ShieldedTests,SyncSideEffectTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SyncSideEffectTests.cs,BasicSyncSideEffect,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Value = 10;                  Shield.SyncSideEffect(() => {                      var t = new Thread(() => {                          Assert.IsFalse(Shield.IsInTransaction);                          // attempting to do this in a transaction would cause a deadlock!                          Assert.AreEqual(0' a);                      });                      t.Start();                      t.Join();                      Assert.AreEqual(10' a);                  });              });
Magic Number,ShieldedTests,SyncSideEffectTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SyncSideEffectTests.cs,OrderedSideEffects,The following statement contains a magic number: int numRuns = 10000;
Magic Number,ShieldedTests,SyncSideEffectTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\SyncSideEffectTests.cs,SyncSideEffectInReadOnlyTrans,The following statement contains a magic number: var x = new Shielded<int>(10);
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalBasics,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => local.Value = 10);
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalBasics,The following statement contains a magic number: Shield.InTransaction(() => {                  local.Value = 10;                  Assert.IsTrue(local.HasValue);                  Assert.AreEqual(10' local);                    var t = new Thread(() => {                      Shield.InTransaction(() => {                          Assert.IsFalse(local.HasValue);                          local.Value = 20;                          Assert.IsTrue(local.HasValue);                          Assert.AreEqual(20' local);                      });                  });                  t.Start();                  t.Join();                    Assert.AreEqual(10' local);                  local.Release();                  Assert.IsFalse(local.HasValue);                  Assert.Throws<InvalidOperationException>(() => { var i = local.Value; });              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalBasics,The following statement contains a magic number: Shield.InTransaction(() => {                  local.Value = 10;                  Assert.IsTrue(local.HasValue);                  Assert.AreEqual(10' local);                    var t = new Thread(() => {                      Shield.InTransaction(() => {                          Assert.IsFalse(local.HasValue);                          local.Value = 20;                          Assert.IsTrue(local.HasValue);                          Assert.AreEqual(20' local);                      });                  });                  t.Start();                  t.Join();                    Assert.AreEqual(10' local);                  local.Release();                  Assert.IsFalse(local.HasValue);                  Assert.Throws<InvalidOperationException>(() => { var i = local.Value; });              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalBasics,The following statement contains a magic number: Shield.InTransaction(() => {                  local.Value = 10;                  Assert.IsTrue(local.HasValue);                  Assert.AreEqual(10' local);                    var t = new Thread(() => {                      Shield.InTransaction(() => {                          Assert.IsFalse(local.HasValue);                          local.Value = 20;                          Assert.IsTrue(local.HasValue);                          Assert.AreEqual(20' local);                      });                  });                  t.Start();                  t.Join();                    Assert.AreEqual(10' local);                  local.Release();                  Assert.IsFalse(local.HasValue);                  Assert.Throws<InvalidOperationException>(() => { var i = local.Value; });              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalBasics,The following statement contains a magic number: Shield.InTransaction(() => {                  local.Value = 10;                  Assert.IsTrue(local.HasValue);                  Assert.AreEqual(10' local);                    var t = new Thread(() => {                      Shield.InTransaction(() => {                          Assert.IsFalse(local.HasValue);                          local.Value = 20;                          Assert.IsTrue(local.HasValue);                          Assert.AreEqual(20' local);                      });                  });                  t.Start();                  t.Join();                    Assert.AreEqual(10' local);                  local.Release();                  Assert.IsFalse(local.HasValue);                  Assert.Throws<InvalidOperationException>(() => { var i = local.Value; });              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalBasics,The following statement contains a magic number: Shield.InTransaction(() => {                  local.Value = 10;                  Assert.IsTrue(local.HasValue);                  Assert.AreEqual(10' local);                    var t = new Thread(() => {                      Shield.InTransaction(() => {                          Assert.IsFalse(local.HasValue);                          local.Value = 20;                          Assert.IsTrue(local.HasValue);                          Assert.AreEqual(20' local);                      });                  });                  t.Start();                  t.Join();                    Assert.AreEqual(10' local);                  local.Release();                  Assert.IsFalse(local.HasValue);                  Assert.Throws<InvalidOperationException>(() => { var i = local.Value; });              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalVisibility,The following statement contains a magic number: Shield.InTransaction(() => {                      x.Value = 1;                      local.Value = 10;                  });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalVisibility,The following statement contains a magic number: continuation.InContext(() =>                      Assert.AreEqual(20' local));
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalVisibility,The following statement contains a magic number: Shield.InTransaction(() => {                  local.Value = 30;                  Shield.SyncSideEffect(() => {                      didItRun = true;                      Assert.AreEqual(30' local);                  });              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ShieldedLocalVisibility,The following statement contains a magic number: Shield.InTransaction(() => {                  local.Value = 30;                  Shield.SyncSideEffect(() => {                      didItRun = true;                      Assert.AreEqual(30' local);                  });              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,ResetOnRollback,The following statement contains a magic number: Shield.InTransaction(() => {                  retryCount++;                  Assert.False(local.HasValue);                  local.Value = 10;                  if (retryCount == 1)                      Shield.Rollback();              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,GetDefaultValueTest,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => { var b = local.GetValueOrDefault(42); });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,GetDefaultValueTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  Assert.AreEqual(0' local.GetValueOrDefault());                  Assert.AreEqual(42' local.GetValueOrDefault(42));                    local.Value = 10;                    Assert.AreEqual(10' local.GetValueOrDefault());                  Assert.AreEqual(10' local.GetValueOrDefault(42));              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,GetDefaultValueTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  Assert.AreEqual(0' local.GetValueOrDefault());                  Assert.AreEqual(42' local.GetValueOrDefault(42));                    local.Value = 10;                    Assert.AreEqual(10' local.GetValueOrDefault());                  Assert.AreEqual(10' local.GetValueOrDefault(42));              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,GetDefaultValueTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  Assert.AreEqual(0' local.GetValueOrDefault());                  Assert.AreEqual(42' local.GetValueOrDefault(42));                    local.Value = 10;                    Assert.AreEqual(10' local.GetValueOrDefault());                  Assert.AreEqual(10' local.GetValueOrDefault(42));              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,GetDefaultValueTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  Assert.AreEqual(0' local.GetValueOrDefault());                  Assert.AreEqual(42' local.GetValueOrDefault(42));                    local.Value = 10;                    Assert.AreEqual(10' local.GetValueOrDefault());                  Assert.AreEqual(10' local.GetValueOrDefault(42));              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,GetDefaultValueTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  Assert.AreEqual(0' local.GetValueOrDefault());                  Assert.AreEqual(42' local.GetValueOrDefault(42));                    local.Value = 10;                    Assert.AreEqual(10' local.GetValueOrDefault());                  Assert.AreEqual(10' local.GetValueOrDefault(42));              });
Magic Number,ShieldedTests,ShieldedLocalTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\ShieldedLocalTests.cs,GetDefaultValueTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  Assert.AreEqual(0' local.GetValueOrDefault());                  Assert.AreEqual(42' local.GetValueOrDefault(42));                    local.Value = 10;                    Assert.AreEqual(10' local.GetValueOrDefault());                  Assert.AreEqual(10' local.GetValueOrDefault(42));              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,BasicTest,The following statement contains a magic number: var a = new Shielded<int>(10);
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Value = 20;                  Assert.AreEqual(20' a);                  Shield.ReadOldState(() => {                      Assert.AreEqual(10' a);                      a.Value = 30;                      Assert.AreEqual(10' a);                      a.Modify((ref int x) =>                          Assert.AreEqual(30' x));                  });                  Assert.AreEqual(30' a.Value);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Value = 20;                  Assert.AreEqual(20' a);                  Shield.ReadOldState(() => {                      Assert.AreEqual(10' a);                      a.Value = 30;                      Assert.AreEqual(10' a);                      a.Modify((ref int x) =>                          Assert.AreEqual(30' x));                  });                  Assert.AreEqual(30' a.Value);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Value = 20;                  Assert.AreEqual(20' a);                  Shield.ReadOldState(() => {                      Assert.AreEqual(10' a);                      a.Value = 30;                      Assert.AreEqual(10' a);                      a.Modify((ref int x) =>                          Assert.AreEqual(30' x));                  });                  Assert.AreEqual(30' a.Value);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Value = 20;                  Assert.AreEqual(20' a);                  Shield.ReadOldState(() => {                      Assert.AreEqual(10' a);                      a.Value = 30;                      Assert.AreEqual(10' a);                      a.Modify((ref int x) =>                          Assert.AreEqual(30' x));                  });                  Assert.AreEqual(30' a.Value);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Value = 20;                  Assert.AreEqual(20' a);                  Shield.ReadOldState(() => {                      Assert.AreEqual(10' a);                      a.Value = 30;                      Assert.AreEqual(10' a);                      a.Modify((ref int x) =>                          Assert.AreEqual(30' x));                  });                  Assert.AreEqual(30' a.Value);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Value = 20;                  Assert.AreEqual(20' a);                  Shield.ReadOldState(() => {                      Assert.AreEqual(10' a);                      a.Value = 30;                      Assert.AreEqual(10' a);                      a.Modify((ref int x) =>                          Assert.AreEqual(30' x));                  });                  Assert.AreEqual(30' a.Value);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,BasicTest,The following statement contains a magic number: Shield.InTransaction(() => {                  a.Value = 20;                  Assert.AreEqual(20' a);                  Shield.ReadOldState(() => {                      Assert.AreEqual(10' a);                      a.Value = 30;                      Assert.AreEqual(10' a);                      a.Modify((ref int x) =>                          Assert.AreEqual(30' x));                  });                  Assert.AreEqual(30' a.Value);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,BasicTest,The following statement contains a magic number: Assert.AreEqual(30' a.Value);
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: var dict = Shield.InTransaction(() => new ShieldedDict<int' int>() {                  { 1' 1 }'                  { 2' 2 }'                  { 3' 3 }'              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: var dict = Shield.InTransaction(() => new ShieldedDict<int' int>() {                  { 1' 1 }'                  { 2' 2 }'                  { 3' 3 }'              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: var dict = Shield.InTransaction(() => new ShieldedDict<int' int>() {                  { 1' 1 }'                  { 2' 2 }'                  { 3' 3 }'              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: var dict = Shield.InTransaction(() => new ShieldedDict<int' int>() {                  { 1' 1 }'                  { 2' 2 }'                  { 3' 3 }'              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Shield.InTransaction(() => {                  Assert.AreEqual(1' dict[1]);                  dict[2] = 102;                  Assert.AreEqual(102' dict[2]);                  Shield.ReadOldState(() => {                      Assert.AreEqual(1' dict[1]);                      Assert.AreEqual(2' dict[2]);                      var values = dict.Values;                      Assert.AreEqual(3' values.Count);                      Assert.IsFalse(values.Except(new[] { 1' 2' 3 }).Any());                      dict[2] = 22;                      Assert.AreEqual(2' dict[2]);                  });                  Assert.AreEqual(1' dict[1]);                  Assert.AreEqual(22' dict[2]);              });
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Assert.AreEqual(22' dict[2]);
Magic Number,ShieldedTests,OldStateTests,D:\research\architectureSmells\repos\jbakic_Shielded\ShieldedTests\OldStateTests.cs,DictionaryTest,The following statement contains a magic number: Assert.AreEqual(22' dict[2]);
