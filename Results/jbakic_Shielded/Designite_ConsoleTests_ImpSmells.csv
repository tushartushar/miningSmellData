Implementation smell,Namespace,Class,File,Method,Description
Long Method,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryPoolTest,The method has 112 lines of code.
Long Method,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The method has 156 lines of code.
Long Method,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The method has 120 lines of code.
Complex Method,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryPoolTest,Cyclomatic complexity of the method is 8
Complex Method,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,Cyclomatic complexity of the method is 13
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: int taskCount = 10000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: var x = new int[100];
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: var time = mtTest("dirty write"' taskCount' _ =>                  {                      var rnd = randomizr.Next(100);                      return Task.Factory.StartNew(() =>                      {                          Interlocked.Increment(ref transactionCounter);                          int v = x[rnd];                          if (sleepTime > 0) Thread.Sleep(sleepTime);                          x[rnd] = v + 1;                      }'                      sleepTime > 0 ? TaskCreationOptions.LongRunning : TaskCreationOptions.None                      );                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: Enumerable.Repeat(0' 5)
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: var lockCount = 100;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: var x = new int[100];
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: var time = mtTest(string.Format("{0} lock write"' lockCount)' taskCount' _ =>                  {                      var rnd = randomizr.Next(100);                      return Task.Factory.StartNew(() =>                      {                          lock (l[rnd % lockCount])                          {                              Interlocked.Increment(ref transactionCounter);                              int v = x[rnd];                              if (sleepTime > 0) Thread.Sleep(sleepTime);                              x[rnd] = v + 1;                          }                      }'                      sleepTime > 0 ? TaskCreationOptions.LongRunning : TaskCreationOptions.None                      );                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: Enumerable.Repeat(0' 5)
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: var shx = Enumerable.Repeat(0' 100).Select(n => new Shielded<int>(n)).ToArray();
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: var time = mtTest("shielded2 write"' taskCount' _ =>                  {                      var rnd = randomizr.Next(100);                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCounter);                              int v = shx[rnd];                              if (sleepTime > 0) Thread.Sleep(sleepTime);                              shx[rnd].Value = v + 1;                          });                      }'                      sleepTime > 0 ? TaskCreationOptions.LongRunning : TaskCreationOptions.None                      );                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TimeTests,The following statement contains a magic number: Enumerable.Repeat(0' 5)
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ParallelAddWithSaving,The following statement contains a magic number: int taskCount = 1000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ParallelAddWithSaving,The following statement contains a magic number: shxClone = new int[100];
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ParallelAddWithSaving,The following statement contains a magic number: shx = Enumerable.Repeat(0' 100)                          .Select((n' ind) => {                          var ent = Factory.NewShielded<SmallEntity>();                          Shield.InTransaction(() => {                              ent.Id = ind;                          });                          return ent;                      }).ToArray();
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ParallelAddWithSaving,The following statement contains a magic number: var time = mtTest("write with saving"' taskCount' _ => {                          var rnd = randomizr.Next(100);                          return Task.Factory.StartNew(() => Shield.InTransaction(() => {                              Interlocked.Increment(ref transactionCounter);                              int v = shx[rnd].Value;                              if (sleepTime > 0)                                  Thread.Sleep(sleepTime);                              shx[rnd].Value = v + 1;                          })' TaskCreationOptions.LongRunning);                      });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ParallelAddWithSaving,The following statement contains a magic number: Enumerable.Repeat(0' 10)
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: var acc1 = new Shielded<Account>(new Account()              {                  Id = 1'                  Balance = 1000M'                  Transfers = new List<Transfer>()              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: var acc2 = new Shielded<Account>(new Account()              {                  Id = 2'                  Balance = 1000M'                  Transfers = new List<Transfer>()              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: var acc2 = new Shielded<Account>(new Account()              {                  Id = 2'                  Balance = 1000M'                  Transfers = new List<Transfer>()              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,ControlledRace,The following statement contains a magic number: mtTest("controlled race"' 20' n =>              {                  if (n % 2 == 0)                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 100.00 .. acc1 -> acc2")'                                  () => Console.WriteLine("Task 1 rollback!"));                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = -100M }));                              });                              Thread.Sleep(100);                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 100M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = 100M }));                              });                          });                      }' TaskCreationOptions.LongRunning);                  else                      return Task.Factory.StartNew(() =>                      {                          Shield.InTransaction(() =>                          {                              Interlocked.Increment(ref transactionCount);                              Shield.SideEffect(() => Console.WriteLine("Transferred 200.00 .. acc1 <- acc2")'                                  () => Console.WriteLine("Task 2 rollback!"));                              acc2.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance - 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc1.Value.Id' AmountReceived = -200M }));                              });                              Thread.Sleep(250);                              acc1.Modify((ref Account a) =>                              {                                  a.Balance = a.Balance + 200M;                                  var list = a.Transfers;                                  Shield.SideEffect(() => list.Add(                                      new Transfer() { OtherId = acc2.Value.Id' AmountReceived = 200M }));                              });                          });                      }' TaskCreationOptions.LongRunning);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryTest,The following statement contains a magic number: var time = mtTest("dictionary"' 10000' i =>                  {                      var rnd = randomizr.Next(10);                      if (i % 2 == 0)                          // adder task - 500 of these                          return Task.Factory.StartNew(() =>                          {                              Shield.InTransaction(() =>                              {                                  Interlocked.Increment(ref transactionCounter);                                  var v = dict.ContainsKey(rnd) ? dict[rnd] : null;                                  int? num = v != null ? (int?)v.Value : null;                                  Thread.Sleep(1);                                  if (v == null)                                      dict[rnd] = new Shielded<int>(1);                                  else if (v.Value == -1)                                      dict.Remove(rnd);                                  else                                      v.Modify((ref int a) => a = num.Value + 1);                              }                              );                          }'                          TaskCreationOptions.LongRunning                          );                      else                          // subtractor task - 500 of these                          return Task.Factory.StartNew(() =>                          {                              Shield.InTransaction(() =>                              {                                  Interlocked.Increment(ref transactionCounter);                                  var v = dict.ContainsKey(rnd) ? dict[rnd] : null;                                  int? num = v != null ? (int?)v.Value : null;                                  Thread.Sleep(1);                                  if (v == null)                                      dict[rnd] = new Shielded<int>(-1);                                  else if (v.Value == 1)                                      dict.Remove(rnd);                                  else                                      v.Modify((ref int a) => a = num.Value - 1);                              }                              );                          }'                          TaskCreationOptions.LongRunning                          );                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryTest,The following statement contains a magic number: var time = mtTest("dictionary"' 10000' i =>                  {                      var rnd = randomizr.Next(10);                      if (i % 2 == 0)                          // adder task - 500 of these                          return Task.Factory.StartNew(() =>                          {                              Shield.InTransaction(() =>                              {                                  Interlocked.Increment(ref transactionCounter);                                  var v = dict.ContainsKey(rnd) ? dict[rnd] : null;                                  int? num = v != null ? (int?)v.Value : null;                                  Thread.Sleep(1);                                  if (v == null)                                      dict[rnd] = new Shielded<int>(1);                                  else if (v.Value == -1)                                      dict.Remove(rnd);                                  else                                      v.Modify((ref int a) => a = num.Value + 1);                              }                              );                          }'                          TaskCreationOptions.LongRunning                          );                      else                          // subtractor task - 500 of these                          return Task.Factory.StartNew(() =>                          {                              Shield.InTransaction(() =>                              {                                  Interlocked.Increment(ref transactionCounter);                                  var v = dict.ContainsKey(rnd) ? dict[rnd] : null;                                  int? num = v != null ? (int?)v.Value : null;                                  Thread.Sleep(1);                                  if (v == null)                                      dict[rnd] = new Shielded<int>(-1);                                  else if (v.Value == 1)                                      dict.Remove(rnd);                                  else                                      v.Modify((ref int a) => a = num.Value - 1);                              }                              );                          }'                          TaskCreationOptions.LongRunning                          );                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryTest,The following statement contains a magic number: var time = mtTest("dictionary"' 10000' i =>                  {                      var rnd = randomizr.Next(10);                      if (i % 2 == 0)                          // adder task - 500 of these                          return Task.Factory.StartNew(() =>                          {                              Shield.InTransaction(() =>                              {                                  Interlocked.Increment(ref transactionCounter);                                  var v = dict.ContainsKey(rnd) ? dict[rnd] : null;                                  int? num = v != null ? (int?)v.Value : null;                                  Thread.Sleep(1);                                  if (v == null)                                      dict[rnd] = new Shielded<int>(1);                                  else if (v.Value == -1)                                      dict.Remove(rnd);                                  else                                      v.Modify((ref int a) => a = num.Value + 1);                              }                              );                          }'                          TaskCreationOptions.LongRunning                          );                      else                          // subtractor task - 500 of these                          return Task.Factory.StartNew(() =>                          {                              Shield.InTransaction(() =>                              {                                  Interlocked.Increment(ref transactionCounter);                                  var v = dict.ContainsKey(rnd) ? dict[rnd] : null;                                  int? num = v != null ? (int?)v.Value : null;                                  Thread.Sleep(1);                                  if (v == null)                                      dict[rnd] = new Shielded<int>(-1);                                  else if (v.Value == 1)                                      dict.Remove(rnd);                                  else                                      v.Modify((ref int a) => a = num.Value - 1);                              }                              );                          }'                          TaskCreationOptions.LongRunning                          );                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryTest,The following statement contains a magic number: var sum = Enumerable.Range(0' 10).Sum(n => dict.ContainsKey(n) ? dict[n] : 0);
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopTest,The following statement contains a magic number: int numEvents = 100;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopTest,The following statement contains a magic number: int reportEvery = 1000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopTest,The following statement contains a magic number: time = mtTest("bet shop w/ " + numEvents' 50000' i =>                  {                      decimal payIn = (randomizr.Next(10) + 1m) * 1;                      int event1Id = randomizr.Next(numEvents) + 1;                      int event2Id = randomizr.Next(numEvents) + 1;                      int event3Id = randomizr.Next(numEvents) + 1;                      int offer1Ind = randomizr.Next(3);                      int offer2Ind = randomizr.Next(3);                      int offer3Ind = randomizr.Next(3);                      return Task.Factory.StartNew(() => Shield.InTransaction(() =>                      {                          var offer1 = betShop.Events[event1Id].BetOffers[offer1Ind];                          var offer2 = betShop.Events[event2Id].BetOffers[offer2Ind];                          var offer3 = betShop.Events[event3Id].BetOffers[offer3Ind];                          betShop.BuyTicket(payIn' offer1' offer2' offer3);                      }));                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopTest,The following statement contains a magic number: time = mtTest("bet shop w/ " + numEvents' 50000' i =>                  {                      decimal payIn = (randomizr.Next(10) + 1m) * 1;                      int event1Id = randomizr.Next(numEvents) + 1;                      int event2Id = randomizr.Next(numEvents) + 1;                      int event3Id = randomizr.Next(numEvents) + 1;                      int offer1Ind = randomizr.Next(3);                      int offer2Ind = randomizr.Next(3);                      int offer3Ind = randomizr.Next(3);                      return Task.Factory.StartNew(() => Shield.InTransaction(() =>                      {                          var offer1 = betShop.Events[event1Id].BetOffers[offer1Ind];                          var offer2 = betShop.Events[event2Id].BetOffers[offer2Ind];                          var offer3 = betShop.Events[event3Id].BetOffers[offer3Ind];                          betShop.BuyTicket(payIn' offer1' offer2' offer3);                      }));                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopTest,The following statement contains a magic number: time = mtTest("bet shop w/ " + numEvents' 50000' i =>                  {                      decimal payIn = (randomizr.Next(10) + 1m) * 1;                      int event1Id = randomizr.Next(numEvents) + 1;                      int event2Id = randomizr.Next(numEvents) + 1;                      int event3Id = randomizr.Next(numEvents) + 1;                      int offer1Ind = randomizr.Next(3);                      int offer2Ind = randomizr.Next(3);                      int offer3Ind = randomizr.Next(3);                      return Task.Factory.StartNew(() => Shield.InTransaction(() =>                      {                          var offer1 = betShop.Events[event1Id].BetOffers[offer1Ind];                          var offer2 = betShop.Events[event2Id].BetOffers[offer2Ind];                          var offer3 = betShop.Events[event3Id].BetOffers[offer3Ind];                          betShop.BuyTicket(payIn' offer1' offer2' offer3);                      }));                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopTest,The following statement contains a magic number: time = mtTest("bet shop w/ " + numEvents' 50000' i =>                  {                      decimal payIn = (randomizr.Next(10) + 1m) * 1;                      int event1Id = randomizr.Next(numEvents) + 1;                      int event2Id = randomizr.Next(numEvents) + 1;                      int event3Id = randomizr.Next(numEvents) + 1;                      int offer1Ind = randomizr.Next(3);                      int offer2Ind = randomizr.Next(3);                      int offer3Ind = randomizr.Next(3);                      return Task.Factory.StartNew(() => Shield.InTransaction(() =>                      {                          var offer1 = betShop.Events[event1Id].BetOffers[offer1Ind];                          var offer2 = betShop.Events[event2Id].BetOffers[offer2Ind];                          var offer3 = betShop.Events[event3Id].BetOffers[offer3Ind];                          betShop.BuyTicket(payIn' offer1' offer2' offer3);                      }));                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopTest,The following statement contains a magic number: time = mtTest("bet shop w/ " + numEvents' 50000' i =>                  {                      decimal payIn = (randomizr.Next(10) + 1m) * 1;                      int event1Id = randomizr.Next(numEvents) + 1;                      int event2Id = randomizr.Next(numEvents) + 1;                      int event3Id = randomizr.Next(numEvents) + 1;                      int offer1Ind = randomizr.Next(3);                      int offer2Ind = randomizr.Next(3);                      int offer3Ind = randomizr.Next(3);                      return Task.Factory.StartNew(() => Shield.InTransaction(() =>                      {                          var offer1 = betShop.Events[event1Id].BetOffers[offer1Ind];                          var offer2 = betShop.Events[event2Id].BetOffers[offer2Ind];                          var offer3 = betShop.Events[event3Id].BetOffers[offer3Ind];                          betShop.BuyTicket(payIn' offer1' offer2' offer3);                      }));                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopPoolTest,The following statement contains a magic number: int numThreads = 3;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopPoolTest,The following statement contains a magic number: int numTickets = 200000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopPoolTest,The following statement contains a magic number: int numEvents = 100;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopPoolTest,The following statement contains a magic number: var barrier = new Barrier(2);
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopPoolTest,The following statement contains a magic number: var reportEvery = 10000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopPoolTest,The following statement contains a magic number: decimal payIn = (randomizr.Next(10) + 1m) * 1;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopPoolTest,The following statement contains a magic number: int offer1Ind = randomizr.Next(3);
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopPoolTest,The following statement contains a magic number: int offer2Ind = randomizr.Next(3);
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,BetShopPoolTest,The following statement contains a magic number: int offer3Ind = randomizr.Next(3);
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryPoolTest,The following statement contains a magic number: int numItems = 1000000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryPoolTest,The following statement contains a magic number: int reportEvery = 10000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryPoolTest,The following statement contains a magic number: bags[i % numThreads].Add(() => Shield.InTransaction(() => {                      tree.Add(index' index);                      Shield.SideEffect(() => {                          var last = lastReport;                          var count = Interlocked.Increment(ref counter);                          var newNow = _timer.ElapsedMilliseconds;                          if (count > last + reportEvery &&                              Interlocked.CompareExchange(ref lastReport' last + reportEvery' last) == last)                          {                              var speed = reportEvery * 1000 / (newNow - lastTime);                              lastTime = newNow; // risky' but safe ;)                              Console.Write("\n{0} at {1} item/s"' last + reportEvery' speed);                          }                      });                  }));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,DictionaryPoolTest,The following statement contains a magic number: Console.WriteLine("\nTOTAL: {0} ms' at {1} ops/s"' time' numItems * 1000 / time);
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,Timed,The following statement contains a magic number: Console.WriteLine("{0}{2}cost {1} us per rep."' front' time * 1000.0 / numRepeats'                  string.Join(string.Empty' Enumerable.Repeat("\t"' Math.Max(0' 5 - (front.Length / 8)))));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,Timed,The following statement contains a magic number: Console.WriteLine("{0}{2}cost {1} us per rep."' front' time * 1000.0 / numRepeats'                  string.Join(string.Empty' Enumerable.Repeat("\t"' Math.Max(0' 5 - (front.Length / 8)))));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,Timed,The following statement contains a magic number: Console.WriteLine("{0}{2}cost {1} us per rep."' front' time * 1000.0 / numRepeats'                  string.Join(string.Empty' Enumerable.Repeat("\t"' Math.Max(0' 5 - (front.Length / 8)))));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: var numItems = 1000000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: var repeatsPerTrans = 50;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Timed("WARM UP"' numItems' () => {                  foreach (var k in Enumerable.Repeat(1' numItems))                      Shield.InTransaction(() => {                          accessTest.Value = 3;                          var a = accessTest.Value;                          accessTest.Modify((ref int n) => n = 5);                          a = accessTest.Value;                      });              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Timed("WARM UP"' numItems' () => {                  foreach (var k in Enumerable.Repeat(1' numItems))                      Shield.InTransaction(() => {                          accessTest.Value = 3;                          var a = accessTest.Value;                          accessTest.Modify((ref int n) => n = 5);                          a = accessTest.Value;                      });              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: var emptyReturningTime = Timed("1 empty transaction w/ result"' numItems' () => {                  // this version uses the generic' result-returning InTransaction' which involves creation                  // of a closure' i.e. an allocation.                  foreach (var k in Enumerable.Repeat(1' numItems))                      Shield.InTransaction(() => 5);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: var modifyModifyTime = Timed("modify-modify transactions"' numItems' () => {                  foreach (var k in Enumerable.Repeat(1' numItems))                      Shield.InTransaction(() => {                          accessTest.Modify((ref int n) => n = 1);                          accessTest2.Modify((ref int n) => n = 2);                      });              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: var nCommuteTime = Timed("N-commute transactions"' numItems' () => {                  foreach (var k in Enumerable.Repeat(1' numItems/10))                      Shield.InTransaction(() => {                          for (int i = 0; i < repeatsPerTrans; i++)                              accessTest.Commute((ref int n) => n = 1);                      });              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("\ncost of empty transaction = {0:0.000} us"' emptyTime / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of the closure in InTransaction<T> = {0:0.000} us"'                                (emptyReturningTime - emptyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of an out-of-tr. read = {0:0.000} us"'                                outOfTrReadTime * 1000.0 / (numItems * repeatsPerTrans));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of the first read = {0:0.000} us"'                                (oneReadTime - emptyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of an additional read = {0:0.000} us"'                                (nReadTime - oneReadTime) / ((repeatsPerTrans - 1) * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of Modify after read = {0:0.000} us"'                                (oneReadModifyTime - oneReadTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of Assign after read = {0:0.000} us"'                                (oneReadAssignTime - oneReadTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of the first Modify = {0:0.000} us"'                                (oneModifyTime - emptyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of an additional Modify = {0:0.000} us"'                                (nModifyTime - oneModifyTime) / ((repeatsPerTrans - 1) * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of a second' different Modify = {0:0.000} us"'                                (modifyModifyTime - oneModifyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of a read after Modify = {0:0.000} us"'                                (oneModifyNReadTime - oneModifyTime) / (repeatsPerTrans * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of the first Assign = {0:0.000} us"'                                (oneAssignTime - emptyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of an additional Assign = {0:0.000} us"'                                (nAssignTime - oneAssignTime) / ((repeatsPerTrans - 1) * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of the first commute = {0:0.000} us"'                                (oneCommuteTime - emptyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of an additional commute = {0:0.000} us"'                                (nCommuteTime*10 - oneCommuteTime) / ((repeatsPerTrans - 1) * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleOps,The following statement contains a magic number: Console.WriteLine("cost of an additional commute = {0:0.000} us"'                                (nCommuteTime*10 - oneCommuteTime) / ((repeatsPerTrans - 1) * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: var numItems = 1000000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: var repeatsPerTrans = 50;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Shield.InTransaction(() => {                      var a = entity.Id;                      entity.Id = 3;                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Shield.InTransaction(() => 5);
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Shield.InTransaction(() => {                      entity.Id = 2;                      int a;                      for (int i = 0; i < repeatsPerTrans; i++)                          a = entity.Id;                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Enumerable.Repeat(1' numItems/10)
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("\ncost of empty transaction = {0:0.000} us"' emptyTime / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of the closure in InTransaction<T> = {0:0.000} us"'                                (emptyReturningTime - emptyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of an out-of-tr. read = {0:0.000} us"'                                nOutOfTrReadTime * 1000.0 / (numItems * repeatsPerTrans));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of the first read = {0:0.000} us"'                                (oneReadTime - emptyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of an additional read = {0:0.000} us"'                                (nReadTime - oneReadTime) / ((repeatsPerTrans - 1) * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of write after read = {0:0.000} us"'                                (oneReadWriteTime - oneReadTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of the first write = {0:0.000} us"'                                (oneWriteTime - emptyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of an additional write = {0:0.000} us"'                                (nWriteTime - oneWriteTime) / ((repeatsPerTrans - 1) * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of a read after write = {0:0.000} us"'                                (oneWriteNReadTime - oneWriteTime) / (repeatsPerTrans * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of the first commute = {0:0.000} us"'                                (oneCommuteTime - emptyTime) / (numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of an additional commute = {0:0.000} us"'                                (nCommuteTime*10 - oneCommuteTime) / ((repeatsPerTrans - 1) * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleProxyOps,The following statement contains a magic number: Console.WriteLine("cost of an additional commute = {0:0.000} us"'                                (nCommuteTime*10 - oneCommuteTime) / ((repeatsPerTrans - 1) * numItems / 1000.0));
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,MultiFieldOps,The following statement contains a magic number: var numTrans = 100000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,MultiFieldOps,The following statement contains a magic number: var fields = 20;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,MultiFieldOps,The following statement contains a magic number: Shield.InTransaction(() => {                      dummy.Value = 3;                      var a = dummy.Value;                      dummy.Modify((ref int n) => n = 5);                      a = dummy.Value;                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,MultiFieldOps,The following statement contains a magic number: Shield.InTransaction(() => {                      dummy.Value = 3;                      var a = dummy.Value;                      dummy.Modify((ref int n) => n = 5);                      a = dummy.Value;                  });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,TreeTest,The following statement contains a magic number: int numTasks = 100000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SkewTest,The following statement contains a magic number: var numTasks = 1000;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SkewTest,The following statement contains a magic number: var numFields = 10;
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SkewTest,The following statement contains a magic number: var shA = Enumerable.Repeat(0' numFields).Select(_ => new Shielded<int>(100)).ToArray();
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SkewTest,The following statement contains a magic number: var shB = Enumerable.Repeat(0' numFields).Select(_ => new Shielded<int>(100)).ToArray();
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SkewTest,The following statement contains a magic number: var time = mtTest("skew write"' numTasks' i =>              {                  int index = randomizr.Next(numFields << 1);                  int amount = randomizr.Next(10) + 1;                  return Task.Factory.StartNew(() =>                  {                      Shield.InTransaction(() =>                      {                          Interlocked.Increment(ref transactionCount);                          // take one from one of the arrays' but only if it does not take sum under 100                          var sum = shA[index >> 1] + shB[index >> 1];                          if (sum - amount >= 100)                          {                              //Thread.Sleep(10);                              if ((index & 1) == 0)                                  shA[index >> 1].Modify((ref int n) => n = n - amount);                              else                                  shB[index >> 1].Modify((ref int n) => n = n - amount);                          }                      }                      );                  }'                  TaskCreationOptions.LongRunning                  );              }              );
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SkewTest,The following statement contains a magic number: var time = mtTest("skew write"' numTasks' i =>              {                  int index = randomizr.Next(numFields << 1);                  int amount = randomizr.Next(10) + 1;                  return Task.Factory.StartNew(() =>                  {                      Shield.InTransaction(() =>                      {                          Interlocked.Increment(ref transactionCount);                          // take one from one of the arrays' but only if it does not take sum under 100                          var sum = shA[index >> 1] + shB[index >> 1];                          if (sum - amount >= 100)                          {                              //Thread.Sleep(10);                              if ((index & 1) == 0)                                  shA[index >> 1].Modify((ref int n) => n = n - amount);                              else                                  shB[index >> 1].Modify((ref int n) => n = n - amount);                          }                      }                      );                  }'                  TaskCreationOptions.LongRunning                  );              }              );
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleTreeTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  foreach (int i in Enumerable.Range(1' 2000))                  {                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                  }              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleTreeTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  foreach (int i in Enumerable.Range(1' 2000))                  {                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                  }              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleTreeTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  foreach (int i in Enumerable.Range(1' 2000))                  {                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                  }              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleTreeTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  foreach (int i in Enumerable.Range(1' 2000))                  {                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                  }              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleTreeTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  foreach (int i in Enumerable.Range(1' 2000))                  {                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                      tree.Add(1000 - i' new Dummy() { Value = 1000 - i });                  }              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleTreeTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  foreach (int i in Enumerable.Range(1' 1000).Select(x => x << 1))                  {                      tree.Remove(1000 - i);                  }              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleTreeTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  foreach (int i in Enumerable.Range(1' 1000).Select(x => x << 1))                  {                      tree.Remove(1000 - i);                  }              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleTreeTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  foreach (var kvp in tree.Range(505' 525))                      Console.WriteLine("Item: {0}"' kvp.Key);              });
Magic Number,ConsoleTests,MainClass,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Program.cs,SimpleTreeTest,The following statement contains a magic number: Shield.InTransaction(() =>              {                  foreach (var kvp in tree.Range(505' 525))                      Console.WriteLine("Item: {0}"' kvp.Key);              });
Magic Number,ConsoleTests,BetShop,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\BetShop.cs,BetShop,The following statement contains a magic number: Shield.InTransaction(() =>              {                  int eventIdGenerator = 1;                  int offerIdGenerator = 1;                  for (int i = 0; i < n; i++)                  {                      var newEvent = Factory.NewShielded<Event>();                      newEvent.Id = eventIdGenerator++;                      newEvent.HomeTeam = "Home " + i;                      newEvent.AwayTeam = "Away " + i;                      initialEvents.Add(newEvent);                        var no = Factory.NewShielded<BetOffer>();                      no.Id = offerIdGenerator++;                      no.Event = newEvent;                      no.Pick = "1";                      no.Odds = 2m;                      newEvent.BetOffers.Add(no);                        no = Factory.NewShielded<BetOffer>();                      no.Id = offerIdGenerator++;                      no.Event = newEvent;                      no.Pick = "X";                      no.Odds = 4m;                      newEvent.BetOffers.Add(no);                        no = Factory.NewShielded<BetOffer>();                      no.Id = offerIdGenerator++;                      no.Event = newEvent;                      no.Pick = "2";                      no.Odds = 4.5m;                      newEvent.BetOffers.Add(no);                  }              });
Magic Number,ConsoleTests,BetShop,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\BetShop.cs,BetShop,The following statement contains a magic number: Shield.InTransaction(() =>              {                  int eventIdGenerator = 1;                  int offerIdGenerator = 1;                  for (int i = 0; i < n; i++)                  {                      var newEvent = Factory.NewShielded<Event>();                      newEvent.Id = eventIdGenerator++;                      newEvent.HomeTeam = "Home " + i;                      newEvent.AwayTeam = "Away " + i;                      initialEvents.Add(newEvent);                        var no = Factory.NewShielded<BetOffer>();                      no.Id = offerIdGenerator++;                      no.Event = newEvent;                      no.Pick = "1";                      no.Odds = 2m;                      newEvent.BetOffers.Add(no);                        no = Factory.NewShielded<BetOffer>();                      no.Id = offerIdGenerator++;                      no.Event = newEvent;                      no.Pick = "X";                      no.Odds = 4m;                      newEvent.BetOffers.Add(no);                        no = Factory.NewShielded<BetOffer>();                      no.Id = offerIdGenerator++;                      no.Event = newEvent;                      no.Pick = "2";                      no.Odds = 4.5m;                      newEvent.BetOffers.Add(no);                  }              });
Magic Number,ConsoleTests,BetShop,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\BetShop.cs,BetShop,The following statement contains a magic number: Shield.InTransaction(() =>              {                  int eventIdGenerator = 1;                  int offerIdGenerator = 1;                  for (int i = 0; i < n; i++)                  {                      var newEvent = Factory.NewShielded<Event>();                      newEvent.Id = eventIdGenerator++;                      newEvent.HomeTeam = "Home " + i;                      newEvent.AwayTeam = "Away " + i;                      initialEvents.Add(newEvent);                        var no = Factory.NewShielded<BetOffer>();                      no.Id = offerIdGenerator++;                      no.Event = newEvent;                      no.Pick = "1";                      no.Odds = 2m;                      newEvent.BetOffers.Add(no);                        no = Factory.NewShielded<BetOffer>();                      no.Id = offerIdGenerator++;                      no.Event = newEvent;                      no.Pick = "X";                      no.Odds = 4m;                      newEvent.BetOffers.Add(no);                        no = Factory.NewShielded<BetOffer>();                      no.Id = offerIdGenerator++;                      no.Event = newEvent;                      no.Pick = "2";                      no.Odds = 4.5m;                      newEvent.BetOffers.Add(no);                  }              });
Magic Number,ConsoleTests,Queue,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Queue.cs,Run,The following statement contains a magic number: var items = Enumerable.Range(1' ItemCount).Select(                  i => new Item() { Id = Guid.NewGuid()' Code = i' Amount = 100m * i }).ToArray();
Magic Number,ConsoleTests,Queue,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Queue.cs,CountTracking,The following statement contains a magic number: int speed = _reportEvery * 1000 / (int)newNow.Subtract(_lastTime).TotalMilliseconds;
Magic Number,ConsoleTests,Queue,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Queue.cs,ProcessInt,The following statement contains a magic number: (items = Shield.InTransaction(() =>                      {                          Interlocked.Increment(ref _processTestCount);                          if (!_queue.Any())                              return null;                          return _queue.Consume.Take(10).ToArray();                      })) != null
Magic Number,ConsoleTests,Queue,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\Queue.cs,ProcessInt,The following statement contains a magic number: yieldCount++ < 10
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: MutableDicAdd(10);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: SafeDicAdd(10);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: ShieldedDicAdd(10);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: var d = MutableDicAdd(50 * 100);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: var d = MutableDicAdd(50 * 100);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: var sd = SafeDicAdd(50 * 100);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: var sd = SafeDicAdd(50 * 100);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: var shd = ShieldedDicAdd(50 * 100);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: var shd = ShieldedDicAdd(50 * 100);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: ReadItemsMutable(d' 10 * 1000);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: ReadItemsMutable(d' 10 * 1000);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: ReadItemsShielded(shd' 10 * 1000);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,Run,The following statement contains a magic number: ReadItemsShielded(shd' 10 * 1000);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,MutableDicAdd,The following statement contains a magic number: var rnd = new Random(32);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,MutableDicAdd,The following statement contains a magic number: Enumerable.Range(rnd.Next(0' i)' Math.Max(i * 2' 16))
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,MutableDicAdd,The following statement contains a magic number: Enumerable.Range(rnd.Next(0' i)' Math.Max(i * 2' 16))
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,SafeDicAdd,The following statement contains a magic number: var rnd = new Random(32);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,SafeDicAdd,The following statement contains a magic number: Enumerable.Range(rnd.Next(0' i)' Math.Max(i * 2' 16))
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,SafeDicAdd,The following statement contains a magic number: Enumerable.Range(rnd.Next(0' i)' Math.Max(i * 2' 16))
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,ShieldedDicAdd,The following statement contains a magic number: var rnd = new Random(32);
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,ShieldedDicAdd,The following statement contains a magic number: Shield.InTransaction(() => {                      foreach (var item in Enumerable.Range(rnd.Next(0' i)' Math.Max(i * 2' 16)))                      {                          tmp[item] = null;                      }                  });
Magic Number,ConsoleTests,SequentialTests,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\SequentialTests.cs,ShieldedDicAdd,The following statement contains a magic number: Shield.InTransaction(() => {                      foreach (var item in Enumerable.Range(rnd.Next(0' i)' Math.Max(i * 2' 16)))                      {                          tmp[item] = null;                      }                  });
Magic Number,ConsoleTests,ActorTestRun,D:\research\architectureSmells\repos\jbakic_Shielded\ConsoleTests\ShieldedActor.cs,CountTracking,The following statement contains a magic number: var speed = _reportEvery * 1000 / (newNow - _lastTime);
