Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DotNetMigrations.Commands,RollbackCommand,C:\repos\jpoehls_dotnetmigrations\src\DotNetMigrations\Commands\RollbackCommand.cs,GetPreviousDatabaseVersion,The length of the statement  "            string cmdText = string.Format("SELECT [version] FROM [schema_migrations] WHERE [id] IN (SELECT MAX([id]) FROM [schema_migrations] WHERE [version] <> {0})"' " is 156.
Long Statement,DotNetMigrations,Program,C:\repos\jpoehls_dotnetmigrations\src\DotNetMigrations\Program.cs,ProgramLaunchedInSeparateConsoleWindow,The length of the statement  "				// if launched from inside some build runners (e.g. TeamCity) Console.CursorLeft will fail because of how the handles are attached " is 130.
Magic Number,DotNetMigrations.Commands,ConnectionsCommand,C:\repos\jpoehls_dotnetmigrations\src\DotNetMigrations\Commands\ConnectionsCommand.cs,ListConnectionStrings,The following statement contains a magic number: foreach (ConnectionStringSettings conn in _configManager.ConnectionStrings)              {                  Log.Write((conn.Name + ": ").PadRight(maxNameLength + 4));                  Log.WriteLine(conn.ConnectionString);              }
Magic Number,DotNetMigrations.Commands,MigrateCommand,C:\repos\jpoehls_dotnetmigrations\src\DotNetMigrations\Commands\MigrateCommand.cs,Execute,The following statement contains a magic number: Log.WriteLine("Database is at version:".PadRight(30) + currentVersion);
Magic Number,DotNetMigrations.Commands,MigrateCommand,C:\repos\jpoehls_dotnetmigrations\src\DotNetMigrations\Commands\MigrateCommand.cs,Execute,The following statement contains a magic number: if (currentVersion < targetVersion)              {                  direction = MigrationDirection.Up;                  MigrateUp(currentVersion' targetVersion' files);                  Log.WriteLine("Migrated up to version:".PadRight(30) + targetVersion);              }              else if (currentVersion > targetVersion)              {                  direction = MigrationDirection.Down;                  MigrateDown(currentVersion' targetVersion' files);                  Log.WriteLine("Migrated down to version:".PadRight(30) + targetVersion);              }              else              {                  return;              }
Magic Number,DotNetMigrations.Commands,MigrateCommand,C:\repos\jpoehls_dotnetmigrations\src\DotNetMigrations\Commands\MigrateCommand.cs,Execute,The following statement contains a magic number: if (currentVersion < targetVersion)              {                  direction = MigrationDirection.Up;                  MigrateUp(currentVersion' targetVersion' files);                  Log.WriteLine("Migrated up to version:".PadRight(30) + targetVersion);              }              else if (currentVersion > targetVersion)              {                  direction = MigrationDirection.Down;                  MigrateDown(currentVersion' targetVersion' files);                  Log.WriteLine("Migrated down to version:".PadRight(30) + targetVersion);              }              else              {                  return;              }
Magic Number,DotNetMigrations.Commands,VersionCommand,C:\repos\jpoehls_dotnetmigrations\src\DotNetMigrations\Commands\VersionCommand.cs,Execute,The following statement contains a magic number: Log.WriteLine("Database is at version:".PadRight(30) + databaseVersion);
Magic Number,DotNetMigrations.Commands,VersionCommand,C:\repos\jpoehls_dotnetmigrations\src\DotNetMigrations\Commands\VersionCommand.cs,Execute,The following statement contains a magic number: Log.WriteLine("Scripts are at version:".PadRight(30) + scriptVersion);
Magic Number,DotNetMigrations,Program,C:\repos\jpoehls_dotnetmigrations\src\DotNetMigrations\Program.cs,Run,The following statement contains a magic number: if (showHelp && command != null)              {                  //  show help for the given command                  helpWriter.WriteCommandHelp(command' executableName);              }              else if (command != null)              {                  command.Log = _logger;                    var commandArgumentSet = ArgumentSet.Parse(args.Skip(1).ToArray());                  IArguments commandArgs = command.CreateArguments();                  commandArgs.Parse(commandArgumentSet);                    if (commandArgs.IsValid)                  {                      var timer = new Stopwatch();                      timer.Start();                        try                      {                          command.Run(commandArgs);                      }                      catch (Exception ex)                      {                          //_logger.WriteLine(string.Empty);                          failure = true;                          if (_logFullErrors)                          {                              _logger.WriteError(ex.ToString());                          }                          else                          {                              WriteShortErrorMessages(ex);                          }                            if (Debugger.IsAttached)                              throw;                      }                      finally                      {                          timer.Stop();                            _logger.WriteLine(string.Empty);                          _logger.WriteLine(string.Format("Command duration was {0}."'                                                                 decimal.Divide(timer.ElapsedMilliseconds' 1000).ToString(                                                                     "0.0000s")));                      }                  }                  else                  {                      //  argument validation failed' show errors                      WriteValidationErrors(command.CommandName' commandArgs.Errors);                      _logger.WriteLine(string.Empty);                      helpWriter.WriteCommandHelp(command' executableName);                      failure = true;                  }              }
