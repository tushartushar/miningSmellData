Implementation smell,Namespace,Class,File,Method,Description
Long Method,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ConvertToFasm,The method has 100 lines of code.
Long Method,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The method has 157 lines of code.
Complex Method,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ConvertToFasm,Cyclomatic complexity of the method is 18
Complex Method,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ReformatCode,Cyclomatic complexity of the method is 8
Complex Method,AsmHighlighter,AsmHighlighterLanguageService,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLanguageService.cs,ComputeDataTipOnContext,Cyclomatic complexity of the method is 11
Complex Method,AsmHighlighter,AsmHighlighterScanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterScanner.cs,ScanTokenAndProvideInfoAboutIt,Cyclomatic complexity of the method is 10
Complex Method,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,Cyclomatic complexity of the method is 36
Complex Method,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,Cyclomatic complexity of the method is 15
Long Parameter List,AsmHighlighter,AsmDebugParsedExpression,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmDebugParsedExpression.cs,EvaluateSync,The method has 7 parameters. Parameters: dwEvalFlags' dwTimeout' pSymbolProvider' pAddress' pBinder' bstrResultType' ppResult
Long Parameter List,AsmHighlighter,AsmDebugProperty,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmDebugParsedExpression.cs,GetPropertyInfo,The method has 6 parameters. Parameters: dwFields' dwRadix' dwTimeout' rgpArgs' dwArgCount' pPropertyInfo
Long Parameter List,AsmHighlighter,AsmDebugProperty,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmDebugParsedExpression.cs,EnumChildren,The method has 7 parameters. Parameters: dwFields' dwRadix' guidFilter' dwAttribFilter' pszNameFilter' dwTimeout' ppEnum
Long Parameter List,AsmHighlighter,AsmExpressionEvaluator,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmExpressionEvaluator.cs,GetMethodLocationProperty,The method has 5 parameters. Parameters: upstrFullyQualifiedMethodPlusOffset' pSymbolProvider' pAddress' pBinder' ppProperty
Long Parameter List,AsmHighlighter,AsmExpressionEvaluator,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmExpressionEvaluator.cs,GetMethodProperty,The method has 5 parameters. Parameters: pSymbolProvider' pAddress' pBinder' fIncludeHiddenLocals' ppProperty
Long Parameter List,AsmHighlighter,AsmExpressionEvaluator,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmExpressionEvaluator.cs,Parse,The method has 6 parameters. Parameters: upstrExpression' dwFlags' nRadix' pbstrError' pichError' ppParsedExpression
Long Parameter List,AsmHighlighter,AsmHighlighterColorableItem,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterColorableItem.cs,AsmHighlighterColorableItem,The method has 5 parameters. Parameters: name' displayName' foreColor' backColor' fontFlags
Long Parameter List,AsmHighlighter,AsmHighlighterColorableItem,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterColorableItem.cs,AsmHighlighterColorableItem,The method has 7 parameters. Parameters: name' displayName' foreColor' backColor' hiForeColor' hiBackColor' fontFlags
Long Parameter List,AsmHighlighter,AsmHighlighterLanguageService,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLanguageService.cs,ComputeDataTipOnContext,The method has 5 parameters. Parameters: textLines' line' col' span' tipText
Long Parameter List,AsmHighlighter,TestAuthoringScope,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLanguageService.cs,GetDeclarations,The method has 5 parameters. Parameters: view' line' col' info' reason
Long Parameter List,AsmHighlighter,TestAuthoringScope,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLanguageService.cs,Goto,The method has 5 parameters. Parameters: cmd' textView' line' col' span
Long Identifier,AsmHighlighter,AsmExpressionEvaluator,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmExpressionEvaluator.cs,GetMethodLocationProperty,The length of the parameter upstrFullyQualifiedMethodPlusOffset is 35.
Long Identifier,AsmHighlighter,GuidList,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\Guids.cs,,The length of the parameter guidAsmHighlighterCmdSetString is 30.
Long Identifier,AsmHighlighter,GuidList,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\Guids.cs,,The length of the parameter guidAsmHighlighterLanguageServiceString is 39.
Long Statement,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ConvertToFasm,The length of the statement  "                            if (!restOfLine.StartsWith("dword") && !restOfLine.StartsWith("short") && !restOfLine.StartsWith("near") && !restOfLine.StartsWith("far")) " is 138.
Long Statement,AsmHighlighter,AsmHighlighterLanguageService,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLanguageService.cs,ComputeDataTipOnContext,The length of the statement  "			if ((token & (AsmHighlighterToken.IS_INSTRUCTION | AsmHighlighterToken.IS_REGISTER | AsmHighlighterToken.IS_NUMBER)) == 0 && " is 124.
Long Statement,AsmHighlighter,AsmHighlighterSource,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterSource.cs,DoFormatting,The length of the statement  "                List<EditSpan> changeList = AsmHighlighterFormatHelper.ReformatCode(pBuffer' span' LanguageService.GetLanguagePreferences().TabSize); " is 133.
Complex Conditional,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ConvertToFasm,The conditional expression  "!restOfLine.StartsWith("dword") && !restOfLine.StartsWith("short") && !restOfLine.StartsWith("near") && !restOfLine.StartsWith("far")"  is complex.
Empty Catch Block,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ReformatCode,The method has an empty catch block.
Empty Catch Block,AsmHighlighter,AsmHighlighterLanguageService,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLanguageService.cs,ComputeDataTipOnContext,The method has an empty catch block.
Magic Number,AsmHighlighter,AsmDebugProperty,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmDebugParsedExpression.cs,GetPropertyInfo,The following statement contains a magic number: Expression debugExpr = vs.Debugger.GetExpression(_expression' true' 1000);
Magic Number,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ParseDefineLine,The following statement contains a magic number: line = line.Substring(2' line.Length - 2);
Magic Number,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ParseDefineLine,The following statement contains a magic number: line = line.Substring(2' line.Length - 2);
Magic Number,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ParseDefineLine,The following statement contains a magic number: keyValueParsed.Length == 2
Magic Number,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ReformatCode,The following statement contains a magic number: editTextSpan.iEndIndex = editTextSpan.iEndIndex + 2;
Magic Number,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ReformatCode,The following statement contains a magic number: (codeToFormat.Length - commentStart) > 2 && codeToFormat.Substring(commentStart' 2) == ";#"
Magic Number,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ReformatCode,The following statement contains a magic number: (codeToFormat.Length - commentStart) > 2 && codeToFormat.Substring(commentStart' 2) == ";#"
Magic Number,AsmHighlighter,AsmHighlighterLanguageService,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLanguageService.cs,ComputeDataTipOnContext,The following statement contains a magic number: Expression expression = vs.Debugger.GetExpression(tipText' true' 1000);
Magic Number,AsmHighlighter,AsmHighlighter,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighter.cs,IdIcoLogoForAboutbox,The following statement contains a magic number: pIdIco = 400;
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,MapC,The following statement contains a magic number: code < 125
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,Scanner,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '{white_space}''	Shortest string "\t"  /* Ignore */              break;          case 2: // Recognized '";"(.)*''	Shortest string ";"  return (int)AsmHighlighterToken.COMMENT_LINE;              break;          case 3: // Recognized '.''	Shortest string "\0"          case 17: // Recognized '.''	Shortest string "\""          case 18: // Recognized '.''	Shortest string "'"  return (int)AsmHighlighterToken.UNDEFINED;              break;          case 4: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "s"          case 5: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "t"          case 39: // Recognized '({alpha}|[$?])({alpha}|{manglingchars}|{digit})*''	Shortest string "st"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 6: // Recognized '"("''	Shortest string "("  return (int)AsmHighlighterToken.LEFT_PARENTHESIS;              break;          case 7: // Recognized '{digit}+''	Shortest string "8"          case 12: // Recognized '{digit}+''	Shortest string "0"          case 13: // Recognized '{digit}+''	Shortest string "1"          case 14: // Recognized '{digit}+''	Shortest string "2"  return (int)AsmHighlighterToken.NUMBER;              break;          case 8: // Recognized '")"''	Shortest string ")"  return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;              break;          case 9: // Recognized '"."({alpha}|{digit})*''	Shortest string "."  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 10: // Recognized '"@"({alpha}|{digit})*''	Shortest string "@"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 11: // Recognized '"%"({alpha}|{digit})*''	Shortest string "%"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 15: // Recognized '"+"''	Shortest string "+"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 16: // Recognized '"-"''	Shortest string "-"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 19: // Recognized '"'"''	Shortest string "'"  return (int)AsmHighlighterToken.DELIMITER;              break;          case 20: // Recognized '"["''	Shortest string "["  return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;              break;          case 21: // Recognized '"]"''	Shortest string "]"  return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;              break;          case 22: // Recognized '"&"''	Shortest string "&"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 23: // Recognized '"|"''	Shortest string "|"  return (int)AsmHighlighterToken.OPERATOR;              break;          case 24: // Recognized '\'(\\.|[^\\'])*\'''	Shortest string "''"  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 25: // Recognized '\"(\\.|[^\\"])*\"''	Shortest string "\"\""  return (int)AsmHighlighterToken.STRING_LITERAL;              break;          case 26: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8."          case 32: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.H"          case 33: // Recognized '{digit}+"."{digit}*({exponent})?({floatsuffix})?''	Shortest string "8.E8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 27: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "1O"          case 36: // Recognized '(0[oO]{octal}+|{octal}+[oO])''	Shortest string "0O"  return (int)AsmHighlighterToken.NUMBER;              break;          case 28: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "8D"          case 37: // Recognized '(0[dD]{digit}+|{digit}+[dD])''	Shortest string "0D"  return (int)AsmHighlighterToken.NUMBER;              break;          case 29: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "8H"          case 38: // Recognized '(0[xX]{hexdigit}+|{hexdigit}+[hH])''	Shortest string "0X8"  return (int)AsmHighlighterToken.NUMBER;              break;          case 30: // Recognized '{digit}+{exponent}''	Shortest string "8E8"          case 31: // Recognized '{digit}+{exponent}''	Shortest string "8E+8"  return (int)AsmHighlighterToken.FLOAT;              break;          case 34: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "1B"          case 35: // Recognized '(0[bB]{binary}+|{binary}+[bB])''	Shortest string "0B"  return (int)AsmHighlighterToken.NUMBER;              break;          case 40: // Recognized '"st"{digit}''	Shortest string "st8"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          case 41: // Recognized '"st("{digit}")"''	Shortest string "st(8)"  return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);              break;          default:              break;      }
Magic Number,AsmHighlighter.Lexer,BuildBuffer,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Mark,The following statement contains a magic number: data.Mark(bPos - 2);
Magic Number,AsmHighlighter.Lexer,BufferElement,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Mark,The following statement contains a magic number: limit > brkIx + 16
Magic Number,AsmHighlighter.Lexer,BlockReaderFactory,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Preamble,The following statement contains a magic number: return 1201;
Magic Number,AsmHighlighter.Lexer,BlockReaderFactory,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Preamble,The following statement contains a magic number: return 1200;
Magic Number,AsmHighlighter.Lexer,BlockReaderFactory,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Preamble,The following statement contains a magic number: return 65001;
Magic Number,AsmHighlighter.Lexer,CodePageHandling,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,GetCodePage,The following statement contains a magic number: command = command.Substring(9);
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Guesser,The following statement contains a magic number: nextState[7] = nextState[2];
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Guesser,The following statement contains a magic number: nextState[7] = nextState[2];
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Guesser,The following statement contains a magic number: nextState[9] = nextState[2];
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Guesser,The following statement contains a magic number: nextState[9] = nextState[2];
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Guesser,The following statement contains a magic number: nextState[10] = nextState[2];
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Guesser,The following statement contains a magic number: nextState[10] = nextState[2];
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Magic Number,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following statement contains a magic number: switch (state)                      {                          case eofNum:                              switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }                              return EndToken;                          case 1: // Recognized '{Upper128}''	Shortest string "\xC0"                          case 2: // Recognized '{Upper128}''	Shortest string "\x80"                          case 3: // Recognized '{Upper128}''	Shortest string "\xE0"                          case 4: // Recognized '{Upper128}''	Shortest string "\xF0"                              uppr++;                              break;                          case 5: // Recognized '{Utf8pfx4}{Utf8cont}''	Shortest string "\xF0\x80"                              uppr += 2;                              break;                          case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}''	Shortest string "\xF0\x80\x80"                              uppr += 3;                              break;                          case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}''	Shortest string "\xF0\x80\x80\x80"                              utfX += 3;                              break;                          case 8: // Recognized '{Utf8pfx3}{Utf8cont}''	Shortest string "\xE0\x80"                              uppr += 2;                              break;                          case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}''	Shortest string "\xE0\x80\x80"                              utfX += 2;                              break;                          case 10: // Recognized '{Utf8pfx2}{Utf8cont}''	Shortest string "\xC0\x80"                              utfX++;                              break;                          default:                              break;                      }
Missing Default,AsmHighlighter,AsmHighlighterFormatHelper,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterFormatHelper.cs,ConvertToFasm,The following switch statement is missing a default case: switch (token)                  {                      case AsmHighlighterToken.INSTRUCTION:                          if ( tokenStr == "call" || tokenStr.StartsWith("j"))                          {                              string restOfLine = codeToFormat.Substring(end + 1' codeToFormat.Length - (end + 1)).Trim();                              // Set default call|jxx to dword                              if (!restOfLine.StartsWith("dword") && !restOfLine.StartsWith("short") && !restOfLine.StartsWith("near") && !restOfLine.StartsWith("far"))                              {                                  isToStrip = true;                                  stripReplace = tokenStr + " dword";                              }                          }                          break;                      case AsmHighlighterToken.LEFT_SQUARE_BRACKET:                          isInBracket = true;                          break;                      case AsmHighlighterToken.RIGHT_SQUARE_BRACKET:                          isInBracket = false;                          countRegisterInBracket = 0;                          break;                      case AsmHighlighterToken.REGISTER:                      case AsmHighlighterToken.REGISTER_FPU:                      case AsmHighlighterToken.REGISTER_MMXSSE:                          if (isInBracket)                          {                              countRegisterInBracket++;                          }                          // Convert st(#) register to st#                          if (token == AsmHighlighterToken.REGISTER_FPU)                          {                              tokenStr = tokenStr.Replace("("' "");                              tokenStr = tokenStr.Replace(")"' "");                              isToStrip = true;                              stripReplace = tokenStr;                          }                          break;                      case AsmHighlighterToken.DIRECTIVE:                          // strip register                          if (tokenStr == "ptr")                          {                              isToStrip = true;                              stripReplace = "";                          }                          break;                        case AsmHighlighterToken.IDENTIFIER:                          isToStrip = true;                          stripReplace  = (defines.ContainsKey(tokenStr)) ? defines[tokenStr] : "4";                          if (isInBracket)                          {                              if ( (lexer.AsmHighlighterTokenProvider.GetTokenFromIdentifier(stripReplace) & AsmHighlighterToken.IS_REGISTER) != 0 )                              {                                  countRegisterInBracket++;                              }                              else if (stripReplace == "4")                              {                                  // No register before 1st identifier                                  if ( countRegisterInBracket == 0)                                  {                                      // Fake dword adress if we have mov [IDENTIFIER + ....]                                      stripReplace = "123123";                                  }                              }                          }                          break;                  }
Missing Default,AsmHighlighter.Lexer,Guesser,D:\research\architectureSmells\repos1\Trass3r_AsmHighlighter\AsmHighlighter\AsmHighlighterLexer.cs,Scan,The following switch statement is missing a default case: switch (currentStart)                              {                                  case 11:                                      if (utfX == 0 && uppr == 0) return -1; /* raw ascii */                                      else if (uppr * 10 > utfX) return 0;   /* default code page */                                      else return 65001;                     /* UTF-8 encoding */                                      break;                              }
