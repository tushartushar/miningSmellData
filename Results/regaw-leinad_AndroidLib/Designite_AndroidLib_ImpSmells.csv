Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RegawMOD.Android,Badging,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AAPT\AAPT.Dump.cs,ProcessDump,Cyclomatic complexity of the method is 10
Complex Method,RegawMOD.Android,BatteryInfo,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\BatteryInfo.cs,Update,Cyclomatic complexity of the method is 17
Complex Method,RegawMOD.Android,Device,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\Device.cs,SetState,Cyclomatic complexity of the method is 11
Complex Method,RegawMOD.Android,AndroidController,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\AndroidController.cs,UpdateDeviceList,Cyclomatic complexity of the method is 9
Long Parameter List,RegawMOD,Command,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\Util\Command.cs,HandleOutput,The method has 5 parameters. Parameters: p' outputWaitHandle' errorWaitHandle' timeout' forceRegular
Long Statement,RegawMOD.Android,AAPT,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AAPT\AAPT.cs,DumpBadging,The length of the statement  "            return new Badging(source' Command.RunProcessReturnOutput(Path.Combine(this.resDir' "aapt.exe")' "dump badging \"" + source.FullName + "\""' true' Command.DEFAULT_TIMEOUT)); " is 173.
Long Statement,RegawMOD.Android,Badging,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AAPT\AAPT.Dump.cs,ProcessDump,The length of the statement  "                            string[] densities = line.Substring(DENSITIES.Length + 2).Split(new char[] { '\''' ' ' }' StringSplitOptions.RemoveEmptyEntries); " is 129.
Long Statement,RegawMOD.Android,Adb,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\Adb.cs,ExecuteAdbCommand,The length of the statement  "                result = Command.RunProcessReturnOutput(AndroidController.Instance.ResourceDirectory + ADB_EXE' command.Command' forceRegular' command.Timeout); " is 144.
Long Statement,RegawMOD.Android,Adb,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\Adb.cs,ExecuteAdbCommandReturnExitCode,The length of the statement  "                result = Command.RunProcessReturnExitCode(AndroidController.Instance.ResourceDirectory + ADB_EXE' command.Command' command.Timeout); " is 132.
Long Statement,RegawMOD.Android,Device,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\Device.cs,PullDirectory,The length of the statement  "            AdbCommand adbCmd = Adb.FormAdbCommand(this' "pull"' "\"" + (location.EndsWith("/") ? location : location + "/") + "\""' "\"" + destination + "\""); " is 148.
Long Statement,RegawMOD.Android,Device,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\Device.cs,InstallApk,The length of the statement  "            return !Adb.ExecuteAdbCommand(Adb.FormAdbCommand(this' "install"' "\"" + location + "\"").WithTimeout(timeout)' true).Contains("Failure"); " is 138.
Long Statement,RegawMOD.Android,AndroidController,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\AndroidController.cs,WaitForDevice,The length of the statement  "             * will be more friendly to the CPU. Nonetheless checking 4 times for a connected device in each second is more than enough' " is 123.
Long Statement,RegawMOD.Android,Fastboot,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\Fastboot.cs,ExecuteFastbootCommand,The length of the statement  "            return Command.RunProcessReturnOutput(AndroidController.Instance.ResourceDirectory + FASTBOOT_EXE' command.Command' command.Timeout); " is 133.
Long Statement,RegawMOD.Android,Fastboot,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\Fastboot.cs,ExecuteFastbootCommandNoReturn,The length of the statement  "            Command.RunProcessNoReturn(AndroidController.Instance.ResourceDirectory + FASTBOOT_EXE' command.Command' command.Timeout); " is 122.
Long Statement,RegawMOD.Android,FileSystem,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\FileSystem.cs,RemountSystem,The length of the statement  "            AdbCommand adbCmd = Adb.FormAdbShellCommand(this.device' true' "mount"' string.Format("-o remount'{0} -t yaffs2 {1} /system"' type.ToString().ToLower()' this.systemMount.Block)); " is 178.
Long Statement,RegawMOD.Android,Signer,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\Signer\Signer.cs,SignUpdateZip,The length of the statement  "            result = Java.RunJar(resDir + "signapk.jar"' "\"" + resDir + "testkey.x509.pem\""' "\"" + resDir + "testkey.pk8\""' "\"" + unsigned + "\""' "\"" + unsigned.Replace(".zip"' "_signed.zip\"")); " is 190.
Long Statement,RegawMOD,Extract,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\Util\Extract.cs,Resources,The length of the statement  "                using (Stream s = assembly.GetManifestResourceStream(defaultNamespace + "." + (internalFolderPath == null ? "" : internalFolderPath + ".") + item)) " is 147.
Long Statement,RegawMOD,Extract,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\Util\Extract.cs,Resources,The length of the statement  "                using (Stream s = assembly.GetManifestResourceStream(nameSpace + "." + (internalFolderPath == null ? "" : internalFolderPath + ".") + item)) " is 140.
Magic Number,RegawMOD.Android,AndroidController,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\AndroidController.cs,CreateResourceDirectories,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,RegawMOD.Android,AndroidController,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\AndroidController.cs,Dispose,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,RegawMOD.Android,AndroidController,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\AndroidController.cs,UpdateDeviceList,The following statement contains a magic number: deviceList.Length > 29
Magic Number,RegawMOD.Android,AndroidController,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\AndroidController.cs,WaitForDevice,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,RegawMOD.Android,BuildProp,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\BuildProp.cs,Update,The following statement contains a magic number: entry.Length == 2
Magic Number,RegawMOD.Android,FileSystem,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\FileSystem.cs,UpdateMountPoints,The following statement contains a magic number: dir = splitLine[2];
Magic Number,RegawMOD.Android,FileSystem,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\FileSystem.cs,UpdateMountPoints,The following statement contains a magic number: type = (MountType)Enum.Parse(typeof(MountType)' splitLine[5].Substring(1' 2).ToUpper());
Magic Number,RegawMOD.Android,FileSystem,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\FileSystem.cs,UpdateMountPoints,The following statement contains a magic number: type = (MountType)Enum.Parse(typeof(MountType)' splitLine[5].Substring(1' 2).ToUpper());
Magic Number,RegawMOD.Android,FileSystem,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\FileSystem.cs,UpdateMountPoints,The following statement contains a magic number: type = (MountType)Enum.Parse(typeof(MountType)' splitLine[3].Substring(0' 2).ToUpper());
Magic Number,RegawMOD.Android,FileSystem,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\FileSystem.cs,UpdateMountPoints,The following statement contains a magic number: type = (MountType)Enum.Parse(typeof(MountType)' splitLine[3].Substring(0' 2).ToUpper());
Duplicate Code,RegawMOD.Android,AndroidController,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\AndroidController\AndroidController.cs,UpdateDeviceList,The method contains a code clone-set at the following line numbers (starting from the method definition): ((8' 27)' (31' 50))
Missing Default,RegawMOD,Hasher,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\Util\Hasher.cs,HashFile,The following switch statement is missing a default case: switch (algo)              {                  case HashType.MD5:                      hashBytes = MD5.Create().ComputeHash(new FileStream(IN_FILE' FileMode.Open));                      break;                  case HashType.SHA1:                      hashBytes = SHA1.Create().ComputeHash(new FileStream(IN_FILE' FileMode.Open));                      break;                  case HashType.SHA256:                      hashBytes = SHA256.Create().ComputeHash(new FileStream(IN_FILE' FileMode.Open));                      break;                  case HashType.SHA384:                      hashBytes = SHA384.Create().ComputeHash(new FileStream(IN_FILE' FileMode.Open));                      break;                  case HashType.SHA512:                      hashBytes = SHA512.Create().ComputeHash(new FileStream(IN_FILE' FileMode.Open));                      break;              }
Missing Default,RegawMOD,Hasher,C:\research\architectureSmells\repos\regaw-leinad_AndroidLib\AndroidLib\Classes\Util\Hasher.cs,HashString,The following switch statement is missing a default case: switch (algo)              {                  case HashType.MD5:                      hashBytes = MD5.Create().ComputeHash(inStringBytes);                      break;                  case HashType.SHA1:                      hashBytes = SHA1.Create().ComputeHash(inStringBytes);                      break;                  case HashType.SHA256:                      hashBytes = SHA256.Create().ComputeHash(inStringBytes);                      break;                  case HashType.SHA384:                      hashBytes = SHA384.Create().ComputeHash(inStringBytes);                       break;                  case HashType.SHA512:                      hashBytes = SHA512.Create().ComputeHash(inStringBytes);                      break;              }
