Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Net.Http.Formatting.Parsers,HttpRequestLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestLineParser.cs,ParseRequestLine,The method has 163 lines of code.
Long Method,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The method has 163 lines of code.
Long Method,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\InternetMessageFormatHeaderParser.cs,ParseHeaderFields,The method has 103 lines of code.
Long Method,System.Net.Http.Formatting.Parsers,MimeMultipartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartParser.cs,ParseBodyPart,The method has 148 lines of code.
Complex Method,System.Web.Http,DictionaryExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\DictionaryExtensions.cs,FindKeysWithPrefix,Cyclomatic complexity of the method is 11
Complex Method,System.Threading.Tasks,TaskHelpersExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\TaskHelpersExtensions.cs,CopyResultToCompletionSourceImpl,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,ValidateHttpMessageContent,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Http.Formatting,MediaTypeHeaderValueExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeHeaderValueExtensions.cs,IsSubsetOf,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,ParseInternal,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,ValidateQueryString,Cyclomatic complexity of the method is 13
Complex Method,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,Insert,Cyclomatic complexity of the method is 12
Complex Method,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,AddToObject,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,CanBecomeArray,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Formatting,SecureJsonTextReader,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\SecureJsonTextReader.cs,FixUpInvalidUnicodeString,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Http.Formatting,DefaultContentNegotiator,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\DefaultContentNegotiator.cs,RunNegotiation,Cyclomatic complexity of the method is 34
Complex Method,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,SelectResponseMediaType,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,SetDefaultContentHeaders,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Formatting,MediaTypeWithQualityHeaderValueComparer,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeWithQualityHeaderValueComparer.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Http.Headers,CookieHeaderValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Headers\CookieHeaderValue.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Headers,CookieHeaderValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Headers\CookieHeaderValue.cs,ParseCookieSegment,Cyclomatic complexity of the method is 14
Complex Method,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlEncode,Cyclomatic complexity of the method is 8
Complex Method,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,Cyclomatic complexity of the method is 9
Complex Method,System.Net.Http.Formatting.Parsers,FormUrlEncodedParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\FormUrlEncodedParser.cs,ParseNameValuePairs,Cyclomatic complexity of the method is 20
Complex Method,System.Net.Http.Formatting.Parsers,HttpRequestHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestHeaderParser.cs,ParseBuffer,Cyclomatic complexity of the method is 17
Complex Method,System.Net.Http.Formatting.Parsers,HttpRequestLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestLineParser.cs,ParseRequestLine,Cyclomatic complexity of the method is 65
Complex Method,System.Net.Http.Formatting.Parsers,HttpResponseHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpResponseHeaderParser.cs,ParseBuffer,Cyclomatic complexity of the method is 17
Complex Method,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,Cyclomatic complexity of the method is 66
Complex Method,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\InternetMessageFormatHeaderParser.cs,ParseHeaderFields,Cyclomatic complexity of the method is 37
Complex Method,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ParseBuffer,Cyclomatic complexity of the method is 12
Complex Method,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ValidateArguments,Cyclomatic complexity of the method is 11
Complex Method,System.Net.Http.Formatting.Parsers,MimeMultipartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartParser.cs,ParseBodyPart,Cyclomatic complexity of the method is 61
Long Parameter List,System.Net.Http,HttpClientExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpClientExtensions.cs,PostAsync,The method has 5 parameters.
Long Parameter List,System.Net.Http,HttpClientExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpClientExtensions.cs,PostAsync,The method has 5 parameters.
Long Parameter List,System.Net.Http,HttpClientExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpClientExtensions.cs,PostAsync,The method has 6 parameters.
Long Parameter List,System.Net.Http,HttpClientExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpClientExtensions.cs,PutAsync,The method has 5 parameters.
Long Parameter List,System.Net.Http,HttpClientExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpClientExtensions.cs,PutAsync,The method has 5 parameters.
Long Parameter List,System.Net.Http,HttpClientExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpClientExtensions.cs,PutAsync,The method has 6 parameters.
Long Parameter List,System.Net.Http.Formatting,BufferedMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\BufferedMediaTypeFormatter.cs,WriteToStreamAsync,The method has 5 parameters.
Long Parameter List,System.Net.Http.Formatting,JsonMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonMediaTypeFormatter.cs,WriteToStreamAsync,The method has 5 parameters.
Long Parameter List,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,WriteToStreamAsync,The method has 5 parameters.
Long Parameter List,System.Net.Http.Formatting,MediaTypeFormatterExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatterExtensions.cs,AddRequestHeaderMapping,The method has 6 parameters.
Long Parameter List,System.Net.Http.Formatting,MediaTypeFormatterExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatterExtensions.cs,AddRequestHeaderMapping,The method has 6 parameters.
Long Parameter List,System.Net.Http.Formatting,RequestHeaderMapping,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\RequestHeaderMapping.cs,RequestHeaderMapping,The method has 5 parameters.
Long Parameter List,System.Net.Http.Formatting,RequestHeaderMapping,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\RequestHeaderMapping.cs,RequestHeaderMapping,The method has 5 parameters.
Long Parameter List,System.Net.Http.Formatting,RequestHeaderMapping,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\RequestHeaderMapping.cs,MatchHeaderValue,The method has 5 parameters.
Long Parameter List,System.Net.Http.Formatting,XmlMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\XmlMediaTypeFormatter.cs,WriteToStreamAsync,The method has 5 parameters.
Long Parameter List,System.Net.Http.Formatting.Internal,HttpValueCollection,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\HttpValueCollection.cs,AppendNameValuePair,The method has 5 parameters.
Long Parameter List,System.Net.Http.Internal,DelegatingStream,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\DelegatingStream.cs,BeginRead,The method has 5 parameters.
Long Parameter List,System.Net.Http.Internal,DelegatingStream,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\DelegatingStream.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,System.Net.Http.Formatting.Parsers,FormUrlEncodedParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\FormUrlEncodedParser.cs,ParseNameValuePairs,The method has 8 parameters.
Long Parameter List,System.Net.Http.Formatting.Parsers,HttpRequestLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestLineParser.cs,ParseRequestLine,The method has 8 parameters.
Long Parameter List,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The method has 8 parameters.
Long Parameter List,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\InternetMessageFormatHeaderParser.cs,ParseHeaderFields,The method has 8 parameters.
Long Parameter List,System.Net.Http.Formatting.Parsers,MimeMultipartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartParser.cs,ParseBuffer,The method has 6 parameters.
Long Parameter List,System.Net.Http.Formatting.Parsers,MimeMultipartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartParser.cs,ParseBodyPart,The method has 7 parameters.
Long Identifier,System.Net.Http.Formatting,DefaultContentNegotiator,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\DefaultContentNegotiator.cs,RunNegotiation,The length of the parameter formatterMatchOnRequestContentType is 34.
Long Identifier,System.Net.Http.Formatting,DefaultContentNegotiator,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\DefaultContentNegotiator.cs,RunNegotiation,The length of the parameter mediaTypeMatchOnRequestContentType is 34.
Long Identifier,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,TryMatchSupportedMediaType,The length of the parameter mediaTypeWithQualityHeaderValue is 31.
Long Statement,System.Web.Http,DictionaryExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\DictionaryExtensions.cs,GetValue,The length of the statement  "	throw Error.InvalidOperation (CommonWebApiResources.DictionaryMissingRequiredValue' collection.GetType ().Name' key' typeof(T).Name); " is 133.
Long Statement,System.Web.Http,DictionaryExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\DictionaryExtensions.cs,GetOrAdd,The length of the statement  "	// SIMPLIFYING ASSUMPTION: this method is internal and keys are private so it's assumed that client code won't be able to " is 121.
Long Statement,System.Web.Http,Error,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\Error.cs,ArgumentUriNotHttpOrHttpsScheme,The length of the statement  "	return new ArgumentException (Error.Format (CommonWebApiResources.ArgumentInvalidHttpUriScheme' actualValue' Uri.UriSchemeHttp' Uri.UriSchemeHttps)' parameterName); " is 164.
Long Statement,System.Web.Http,Error,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\Error.cs,ArgumentUriNotAbsolute,The length of the statement  "	return new ArgumentException (Error.Format (CommonWebApiResources.ArgumentInvalidAbsoluteUri' actualValue)' parameterName); " is 123.
Long Statement,System.Web.Http,Error,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\Error.cs,ArgumentUriHasQueryOrFragment,The length of the statement  "	return new ArgumentException (Error.Format (CommonWebApiResources.ArgumentUriHasQueryOrFragment' actualValue)' parameterName); " is 126.
Long Statement,System.Web.Http,Error,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\Error.cs,ArgumentGreaterThanOrEqualTo,The length of the statement  "	return new ArgumentOutOfRangeException (parameterName' actualValue' Error.Format (CommonWebApiResources.ArgumentMustBeGreaterThanOrEqualTo' minValue)); " is 151.
Long Statement,System.Web.Http,Error,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\Error.cs,ArgumentMustBeLessThanOrEqualTo,The length of the statement  "	return new ArgumentOutOfRangeException (parameterName' actualValue' Error.Format (CommonWebApiResources.ArgumentMustBeLessThanOrEqualTo' maxValue)); " is 148.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\TaskHelpersExtensions.cs,CatchImpl,The length of the statement  "					throw new InvalidOperationException ("You must set the Task property of the CatchInfo returned from the TaskHelpersExtensions.Catch continuation."); " is 148.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "							throw new InvalidOperationException ("You cannot return null from the TaskHelpersExtensions.Catch continuation. You must return a valid task or throw an exception."); " is 166.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "					throw new InvalidOperationException ("You cannot return null from the TaskHelpersExtensions.Catch continuation. You must return a valid task or throw an exception."); " is 166.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\TaskHelpersExtensions.cs,GetRethrowWithNoStackLossDelegate,The length of the statement  "		// No-ops if the task completed successfully' else throws the originating exception complete with the correct call stack. " is 121.
Long Statement,System.Net.Http,FormattingUtilities,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\FormattingUtilities.cs,UnquoteToken,The length of the statement  "	if (token.StartsWith ("\""' StringComparison.Ordinal) && token.EndsWith ("\""' StringComparison.Ordinal) && token.Length > 1) { " is 127.
Long Statement,System.Net.Http,FormattingUtilities,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\FormattingUtilities.cs,TryParseDate,The length of the statement  "	return DateTimeOffset.TryParseExact (input' dateFormats' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AllowWhiteSpaces | DateTimeStyles.AssumeUniversal' out result); " is 169.
Long Statement,System.Net.Http,HttpContentCollectionExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentCollectionExtensions.cs,FirstStart,The length of the statement  "			return String.Equals (FormattingUtilities.UnquoteToken (values.ElementAt (0))' FormattingUtilities.UnquoteToken (start)' StringComparison.OrdinalIgnoreCase); " is 157.
Long Statement,System.Net.Http,HttpContentCollectionExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentCollectionExtensions.cs,FirstDispositionType,The length of the statement  "	return content.Headers != null && content.Headers.ContentDisposition != null && String.Equals (FormattingUtilities.UnquoteToken (content.Headers.ContentDisposition.DispositionType)' FormattingUtilities.UnquoteToken (dispositionType)' StringComparison.OrdinalIgnoreCase); " is 270.
Long Statement,System.Net.Http,HttpContentCollectionExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentCollectionExtensions.cs,FirstDispositionName,The length of the statement  "	return content.Headers != null && content.Headers.ContentDisposition != null && String.Equals (FormattingUtilities.UnquoteToken (content.Headers.ContentDisposition.Name)' FormattingUtilities.UnquoteToken (dispositionName)' StringComparison.OrdinalIgnoreCase); " is 259.
Long Statement,System.Net.Http,HttpContentCollectionExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentCollectionExtensions.cs,FindAllContentType,The length of the statement  "	return content.Headers != null && content.Headers.ContentType != null && String.Equals (content.Headers.ContentType.MediaType' contentType.MediaType' StringComparison.OrdinalIgnoreCase); " is 186.
Long Statement,System.Net.Http,HttpContentExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentExtensions.cs,ReadAsAsync,The length of the statement  "		throw new InvalidOperationException (RS.Format (Properties.Resources.NoReadSerializerAvailable' type.Name' mediaTypeAsString)); " is 127.
Long Statement,System.Net.Http,HttpContentExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentExtensions.cs,ReadAsAsync,The length of the statement  "	return content.ReadAsStreamAsync ().Then (stream => formatter.ReadFromStreamAsync (type' stream' content.Headers' formatterLogger).Then (value => (T)value)); " is 157.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,ReadAsHttpRequestMessageAsync,The length of the statement  "		throw new ArgumentException (RS.Format (Properties.Resources.HttpMessageParserInvalidUriScheme' uriScheme' typeof(Uri).Name)' "uriScheme"); " is 139.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,ReadAsHttpRequestMessageAsync,The length of the statement  "		throw new ArgumentOutOfRangeException ("bufferSize"' bufferSize' RS.Format (Properties.Resources.ArgumentMustBeGreaterThanOrEqualTo' MinBufferSize)); " is 149.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,ReadAsHttpResponseMessageAsync,The length of the statement  "		throw new ArgumentOutOfRangeException ("bufferSize"' bufferSize' RS.Format (Properties.Resources.ArgumentMustBeGreaterThanOrEqualTo' MinBufferSize)); " is 149.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,CreateRequestUri,The length of the statement  "			throw new IOException (RS.Format (Properties.Resources.HttpMessageParserInvalidHostCount' FormattingUtilities.HttpHostHeader' hostCount)); " is 138.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,CreateRequestUri,The length of the statement  "		throw new IOException (RS.Format (Properties.Resources.HttpMessageParserInvalidHostCount' FormattingUtilities.HttpHostHeader' 0)); " is 130.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,CreateRequestUri,The length of the statement  "	// We don't use UriBuilder as hostValues.ElementAt(0) contains 'host:port' and UriBuilder needs these split out into separate host and port. " is 140.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,CreateRequestUri,The length of the statement  "	string requestUri = String.Format (CultureInfo.InvariantCulture' "{0}://{1}{2}"' uriScheme' hostValues.ElementAt (0)' httpRequest.RequestUri); " is 142.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,CreateHeaderFields,The length of the statement  "			throw new IOException (RS.Format (Properties.Resources.HttpMessageContentStreamMustBeSeekable' "ContentReadStream"' FormattingUtilities.HttpResponseMessageType.Name)); " is 167.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,CreateHttpRequestMessage,The length of the statement  "	httpRequestMessage.Content = CreateHeaderFields (httpRequest.HttpHeaders' httpRequestMessage.Headers' contentStream' rewind); " is 125.
Long Statement,System.Net.Http,HttpContentMessageExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMessageExtensions.cs,CreateHttpResponseMessage,The length of the statement  "	httpResponseMessage.Content = CreateHeaderFields (httpResponse.HttpHeaders' httpResponseMessage.Headers' contentStream' rewind); " is 128.
Long Statement,System.Net.Http,HttpContentMultipartExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMultipartExtensions.cs,ReadAsMultipartAsync,The length of the statement  "		throw new ArgumentOutOfRangeException ("bufferSize"' bufferSize' RS.Format (Properties.Resources.ArgumentMustBeGreaterThanOrEqualTo' MinBufferSize)); " is 149.
Long Statement,System.Net.Http,HttpContentMultipartExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMultipartExtensions.cs,ReadAsMultipartAsync,The length of the statement  "		TaskCompletionSource<IEnumerable<HttpContent>> taskCompletionSource = new TaskCompletionSource<IEnumerable<HttpContent>> (); " is 124.
Long Statement,System.Net.Http,HttpContentMultipartExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMultipartExtensions.cs,MultipartReadAsync,The length of the statement  "		result = context.ContentStream.BeginRead (context.Data' 0' context.Data.Length' _onMultipartReadAsyncComplete' context); " is 120.
Long Statement,System.Net.Http,HttpContentMultipartExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMultipartExtensions.cs,MultipartReadAsync,The length of the statement  "		Exception exception = (result != null && result.CompletedSynchronously) ? e : new IOException (Properties.Resources.ReadAsMimeMultipartErrorReading' e); " is 152.
Long Statement,System.Net.Http,HttpContentMultipartExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMultipartExtensions.cs,MultipartReadAsyncComplete,The length of the statement  "		context.TaskCompletionSource.TrySetException (new IOException (Properties.Resources.ReadAsMimeMultipartErrorReading' e)); " is 121.
Long Statement,System.Net.Http,HttpContentMultipartExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMultipartExtensions.cs,MultipartWriteSegmentAsync,The length of the statement  "		IAsyncResult result = output.BeginWrite (segment.Array' segment.Offset' segment.Count' _onMultipartWriteSegmentAsyncComplete' context); " is 135.
Long Statement,System.Net.Http,HttpContentMultipartExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMultipartExtensions.cs,MultipartWriteSegmentAsync,The length of the statement  "		context.TaskCompletionSource.TrySetException (new IOException (Properties.Resources.ReadAsMimeMultipartErrorWriting' e)); " is 121.
Long Statement,System.Net.Http,HttpContentMultipartExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpContentMultipartExtensions.cs,MultipartWriteSegmentAsyncComplete,The length of the statement  "		context.TaskCompletionSource.TrySetException (new IOException (Properties.Resources.ReadAsMimeMultipartErrorWriting' e)); " is 121.
Long Statement,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,ValidateHttpMessageContent,The length of the statement  "				throw new ArgumentException (RS.Format (Properties.Resources.HttpMessageInvalidMediaType' FormattingUtilities.HttpContentType.Name' isRequest ? DefaultRequestMediaType : DefaultResponseMediaType)' "content"); " is 208.
Long Statement,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,ValidateHttpMessageContent,The length of the statement  "						throw new ArgumentException (RS.Format (Properties.Resources.HttpMessageInvalidMediaType' FormattingUtilities.HttpContentType.Name' isRequest ? DefaultRequestMediaType : DefaultResponseMediaType)' "content"); " is 208.
Long Statement,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,ValidateHttpMessageContent,The length of the statement  "		throw new ArgumentException (RS.Format (Properties.Resources.HttpMessageInvalidMediaType' FormattingUtilities.HttpContentType.Name' isRequest ? DefaultRequestMediaType : DefaultResponseMediaType)' "content"); " is 208.
Long Statement,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,SerializeToStreamAsync,The length of the statement  "		Tuple<HttpMessageContent' Stream' TaskCompletionSource<object>> state = new Tuple<HttpMessageContent' Stream' TaskCompletionSource<object>> (this' stream' writeTask); " is 166.
Long Statement,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,OnWriteComplete,The length of the statement  "	Tuple<HttpMessageContent' Stream' TaskCompletionSource<object>> state = (Tuple<HttpMessageContent' Stream' TaskCompletionSource<object>>)result.AsyncState; " is 155.
Long Statement,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,SerializeRequestLine,The length of the statement  "	message.Append (FormattingUtilities.HttpVersionToken + "/" + (httpRequest.Version != null ? httpRequest.Version.ToString (2) : "1.1") + CRLF); " is 142.
Long Statement,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,SerializeStatusLine,The length of the statement  "	message.Append (FormattingUtilities.HttpVersionToken + "/" + (httpResponse.Version != null ? httpResponse.Version.ToString (2) : "1.1") + SP); " is 142.
Long Statement,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,PrepareContentAsync,The length of the statement  "				throw new InvalidOperationException (RS.Format (Properties.Resources.HttpMessageContentAlreadyRead' FormattingUtilities.HttpContentType.Name' HttpRequestMessage != null ? FormattingUtilities.HttpRequestMessageType.Name : FormattingUtilities.HttpResponseMessageType.Name)); " is 272.
Long Statement,System.Net.Http,MimeBodyPart,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\MimeBodyPart.cs,GetOutputStream,The length of the statement  "			throw new InvalidOperationException (RS.Format (Properties.Resources.ReadAsMimeMultipartStreamProviderException' _streamProvider.GetType ().Name)' e); " is 150.
Long Statement,System.Net.Http,MimeBodyPart,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\MimeBodyPart.cs,GetOutputStream,The length of the statement  "			throw new InvalidOperationException (RS.Format (Properties.Resources.ReadAsMimeMultipartStreamProviderNull' _streamProvider.GetType ().Name' _streamType.Name)); " is 160.
Long Statement,System.Net.Http,MimeBodyPart,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\MimeBodyPart.cs,GetOutputStream,The length of the statement  "			throw new InvalidOperationException (RS.Format (Properties.Resources.ReadAsMimeMultipartStreamProviderReadOnly' _streamProvider.GetType ().Name' _streamType.Name)); " is 164.
Long Statement,System.Net.Http,MultipartFormDataStreamProvider,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\MultipartFormDataStreamProvider.cs,GetStream,The length of the statement  "	throw new IOException (RS.Format (Properties.Resources.MultipartFormDataStreamProviderNoContentDisposition' "Content-Disposition")); " is 132.
Long Statement,System.Net.Http,ObjectContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\ObjectContent.cs,VerifyAndSetObject,The length of the statement  "			throw new InvalidOperationException (RS.Format (Properties.Resources.CannotUseNullValueType' typeof(ObjectContent).Name' ObjectType.Name)); " is 139.
Long Statement,System.Net.Http,ObjectContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\ObjectContent.cs,VerifyAndSetObject,The length of the statement  "			throw new ArgumentException (RS.Format (Properties.Resources.ObjectAndTypeDisagree' objectType.Name' ObjectType.Name)' "value"); " is 128.
Long Statement,System.Net.Http,ObjectContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\ObjectContent.cs,VerifyAndSetObject,The length of the statement  "			throw new InvalidOperationException (RS.Format (Properties.Resources.ObjectContent_FormatterCannotWriteType' _formatter.GetType ().FullName' objectType.Name)); " is 159.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,ParseInternal,The length of the statement  "		throw new ArgumentOutOfRangeException ("maxDepth"' maxDepth' RS.Format (Properties.Resources.ArgumentMustBeGreaterThan' MinDepth)); " is 131.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,ValidateQueryString,The length of the statement  "			throw new ArgumentException (RS.Format (Properties.Resources.NestedBracketNotValid' ApplicationFormUrlEncoded' key.LastIndexOf ('['))); " is 135.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,Insert,The length of the statement  "					throw new ArgumentException (RS.Format (Properties.Resources.FormUrlEncodedMismatchingTypes' BuildPathString (path' i))); " is 121.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,Insert,The length of the statement  "				throw new ArgumentException (RS.Format (Properties.Resources.FormUrlEncodedMismatchingTypes' BuildPathString (path' path.Length - 1))); " is 135.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,AddToObject,The length of the statement  "				throw new ArgumentException (RS.Format (Properties.Resources.FormUrlEncodedMismatchingTypes' BuildPathString (path' pathIndex))); " is 129.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,AddToObject,The length of the statement  "				throw new ArgumentException (RS.Format (Properties.Resources.JQuery13CompatModeNotSupportNestedJson' BuildPathString (path' pathIndex))); " is 137.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,AddToArray,The length of the statement  "	Contract.Assert (path.Length >= 2' "The path must be at least 2' one for the ending []' and one for before the '[' (which can be empty)"); " is 138.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,AddToArray,The length of the statement  "	Contract.Assert (((IDictionary<string' JToken>)parent).ContainsKey (parentPath)' "It was added on insert to get to this point"); " is 128.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,AddToArray,The length of the statement  "			throw new ArgumentException (RS.Format (Properties.Resources.FormUrlEncodedMismatchingTypes' BuildPathString (path' path.Length - 1))); " is 135.
Long Statement,System.Net.Http.Formatting,JsonContractResolver,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonContractResolver.cs,CreateSerializableJsonProperties,The length of the statement  "		JsonProperty property = PrivateMemberContractResolver.Instance.CreatePrivateProperty (field' MemberSerialization.OptOut); " is 121.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiator,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\DefaultContentNegotiator.cs,RunNegotiation,The length of the statement  "	// we want to give precedence to the media type mappings' but only if their quality is >= that of the supported media type. " is 123.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedMediaTypeFormatter.cs,ReadFromStreamAsync,The length of the statement  "		throw new InvalidOperationException (RS.Format (Properties.Resources.SerializerCannotSerializeType' GetType ().Name' type.Name)); " is 129.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonMediaTypeFormatter.cs,CanReadType,The length of the statement  "		DataContractJsonSerializer serializer = _dataContractSerializerCache.GetOrAdd (type' t => CreateDataContractSerializer (t)); " is 124.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonMediaTypeFormatter.cs,ReadFromStreamAsync,The length of the statement  "				using (XmlReader reader = JsonReaderWriterFactory.CreateJsonReader (new NonClosingDelegatingStream (stream)' effectiveEncoding' _readerQuotas' null)) { " is 151.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonMediaTypeFormatter.cs,ReadFromStreamAsync,The length of the statement  "				using (JsonTextReader jsonTextReader = new SecureJsonTextReader (new StreamReader (stream' effectiveEncoding)' _maxDepth) { " is 123.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonMediaTypeFormatter.cs,ReadFromStreamAsync,The length of the statement  "						// Failure to do so can cause the exception to be rethrown at every recursive level and overflow the stack for x64 CLR processes " is 128.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonMediaTypeFormatter.cs,WriteToStreamAsync,The length of the statement  "		throw new NotSupportedException (RS.Format (Properties.Resources.UnsupportedIndent' typeof(DataContractJsonSerializer))); " is 121.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonMediaTypeFormatter.cs,GetDataContractSerializer,The length of the statement  "	DataContractJsonSerializer serializer = _dataContractSerializerCache.GetOrAdd (type' t => CreateDataContractSerializer (type)); " is 127.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonMediaTypeFormatter.cs,GetDataContractSerializer,The length of the statement  "		throw new InvalidOperationException (RS.Format (Properties.Resources.SerializerCannotSerializeType' typeof(DataContractJsonSerializer).Name' type.Name)); " is 153.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,TryGetDelegatingType,The length of the statement  "	if (type != null && type.IsInterface && type.IsGenericType && (type.GetInterface (interfaceType.FullName) != null || type.GetGenericTypeDefinition ().Equals (interfaceType))) { " is 176.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,SelectResponseMediaType,The length of the statement  "		return new ResponseMediaTypeMatch (mediaTypeMatch' ResponseFormatterSelectionResult.MatchOnRequestWithMediaTypeMapping); " is 120.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,SelectResponseCharacterEncoding,The length of the statement  "	IEnumerable<StringWithQualityHeaderValue> acceptCharsetValues = request.Headers.AcceptCharset.OrderByDescending (m => m' StringWithQualityHeaderValueComparer.QualityComparer); " is 175.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,SelectResponseCharacterEncoding,The length of the statement  "			if (acceptCharset.Value.Equals (encoding.WebName' StringComparison.OrdinalIgnoreCase) || acceptCharset.Value.Equals ("*"' StringComparison.OrdinalIgnoreCase)) { " is 160.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,TryMatchSupportedMediaType,The length of the statement  "			double quality = mediaTypeWithQualityHeaderValue != null && mediaTypeWithQualityHeaderValue.Quality.HasValue ? mediaTypeWithQualityHeaderValue.Quality.Value : MediaTypeMatch.Match; " is 180.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,GetOrAddDelegatingType,The length of the statement  "		// The current method is called by methods that already checked the type for is not null' is generic and is or implements IEnumerable<T> " is 136.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,GetOrAddDelegatingType,The length of the statement  "			elementType = typeToRemap.GetInterface (FormattingUtilities.EnumerableInterfaceGenericType.FullName).GetGenericArguments () [0]; " is 128.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterCollection,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatterCollection.cs,IsTypeExcludedFromValidation,The length of the statement  "	return FormattingUtilities.IsJTokenType (type) || typeof(XObject).IsAssignableFrom (type) || typeof(XmlNode).IsAssignableFrom (type) || typeof(FormDataCollection).IsAssignableFrom (type); " is 187.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterCollection,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatterCollection.cs,VerifyAndSetFormatters,The length of the statement  "			throw new ArgumentException (RS.Format (Properties.Resources.CannotHaveNullInList' _mediaTypeFormatterType.Name)' "formatters"); " is 128.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatterExtensions.cs,AddRequestHeaderMapping,The length of the statement  "	RequestHeaderMapping mapping = new RequestHeaderMapping (headerName' headerValue' valueComparison' isValueSubstring' mediaType); " is 128.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatterExtensions.cs,AddRequestHeaderMapping,The length of the statement  "	RequestHeaderMapping mapping = new RequestHeaderMapping (headerName' headerValue' valueComparison' isValueSubstring' mediaType); " is 128.
Long Statement,System.Net.Http.Formatting,QueryStringMapping,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\QueryStringMapping.cs,GetQueryString,The length of the statement  "		throw new InvalidOperationException (RS.Format (Properties.Resources.NonNullUriRequiredForMediaTypeMapping' _queryStringMappingType.Name)); " is 139.
Long Statement,System.Net.Http.Formatting,StringComparisonHelper,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\StringComparisonHelper.cs,IsDefined,The length of the statement  "	return value == StringComparison.CurrentCulture || value == StringComparison.CurrentCultureIgnoreCase || value == StringComparison.InvariantCulture || value == StringComparison.InvariantCultureIgnoreCase || value == StringComparison.Ordinal || value == StringComparison.OrdinalIgnoreCase; " is 288.
Long Statement,System.Net.Http.Formatting,XHRRequestHeaderMapping,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\XHRRequestHeaderMapping.cs,TryMatchMediaType,The length of the statement  "	if (request.Headers.Accept.Count == 0 || (request.Headers.Accept.Count == 1 && request.Headers.Accept.First ().MediaType.Equals ("*/*"' StringComparison.Ordinal))) { " is 165.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\XmlMediaTypeFormatter.cs,ReadFromStreamAsync,The length of the statement  "			using (XmlReader reader = XmlDictionaryReader.CreateTextReader (new NonClosingDelegatingStream (stream)' effectiveEncoding' _readerQuotas' null)) { " is 147.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\XmlMediaTypeFormatter.cs,CreateDefaultSerializer,The length of the statement  "			throw new InvalidOperationException (RS.Format (Properties.Resources.SerializerCannotSerializeType' UseXmlSerializer ? typeof(XmlSerializer).Name : typeof(DataContractSerializer).Name' type.Name)' exception); " is 208.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\XmlMediaTypeFormatter.cs,GetSerializerForType,The length of the statement  "		throw new InvalidOperationException (RS.Format (Properties.Resources.SerializerCannotSerializeType' UseXmlSerializer ? typeof(XmlSerializer).Name : typeof(DataContractSerializer).Name' type.Name)); " is 197.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\XmlMediaTypeFormatter.cs,GetSerializerForType,The length of the statement  "	Contract.Assert (serializer is XmlSerializer || serializer is XmlObjectSerializer' "Only XmlSerializer or XmlObjectSerializer are supported."); " is 143.
Long Statement,System.Net.Http.Headers,CookieHeaderValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Headers\CookieHeaderValue.cs,ToString,The length of the statement  "		first = AppendSegment (header' first' MaxAgeToken' ((int)MaxAge.Value.TotalSeconds).ToString (NumberFormatInfo.InvariantInfo)); " is 127.
Long Statement,System.Net.Http.Formatting.Internal,HttpValueCollection,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\HttpValueCollection.cs,ThrowIfMaxHttpCollectionKeysExceeded,The length of the statement  "		throw Error.InvalidOperation (System.Net.Http.Properties.Resources.MaxHttpCollectionKeyLimitReached' MediaTypeFormatter.MaxHttpCollectionKeys' typeof(MediaTypeFormatter)); " is 171.
Long Statement,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,HexToInt,The length of the statement  "	return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1; " is 125.
Long Statement,System.Net.Http.Formatting.Parsers,FormUrlEncodedParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\FormUrlEncodedParser.cs,ParseBuffer,The length of the statement  "		parseStatus = ParseNameValuePairs (buffer' bytesReady' ref bytesConsumed' ref _nameValueState' _maxMessageSize' ref _totalBytesConsumed' _currentNameValuePair' _nameValuePairs); " is 177.
Long Statement,System.Net.Http.Formatting.Parsers,FormUrlEncodedParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\FormUrlEncodedParser.cs,ParseNameValuePairs,The length of the statement  "	Contract.Assert (maximumLength <= 0 || totalBytesConsumed <= maximumLength' "ParseNameValuePairs()|Headers already read exceeds limit."); " is 137.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestLineParser.cs,ParseBuffer,The length of the statement  "		parseStatus = ParseRequestLine (buffer' bytesReady' ref bytesConsumed' ref _requestLineState' _maximumHeaderLength' ref _totalBytesConsumed' _currentToken' _httpRequest); " is 170.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestLineParser.cs,ParseRequestLine,The length of the statement  "	Contract.Assert (maximumHeaderLength <= 0 || totalBytesConsumed <= maximumHeaderLength' "ParseRequestLine()|Headers already read exceeds limit."); " is 146.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestLineParser.cs,ParseRequestLine,The length of the statement  "	int effectiveMax = maximumHeaderLength <= 0 ? Int32.MaxValue : (maximumHeaderLength - totalBytesConsumed + bytesConsumed); " is 122.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestLineParser.cs,ParseRequestLine,The length of the statement  "			throw new FormatException (RS.Format (Properties.Resources.HttpInvalidVersion' version' FormattingUtilities.HttpVersionToken)); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseBuffer,The length of the statement  "		parseStatus = ParseStatusLine (buffer' bytesReady' ref bytesConsumed' ref _statusLineState' _maximumHeaderLength' ref _totalBytesConsumed' _currentToken' _httpResponse); " is 169.
Long Statement,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The length of the statement  "	Contract.Assert (maximumHeaderLength <= 0 || totalBytesConsumed <= maximumHeaderLength' "ParseRequestLine()|Headers already read exceeds limit."); " is 146.
Long Statement,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The length of the statement  "	int effectiveMax = maximumHeaderLength <= 0 ? Int32.MaxValue : (maximumHeaderLength - totalBytesConsumed + bytesConsumed); " is 122.
Long Statement,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The length of the statement  "			throw new FormatException (RS.Format (Properties.Resources.HttpInvalidVersion' version' FormattingUtilities.HttpVersionToken)); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\InternetMessageFormatHeaderParser.cs,ParseBuffer,The length of the statement  "		parseStatus = InternetMessageFormatHeaderParser.ParseHeaderFields (buffer' bytesReady' ref bytesConsumed' ref _headerState' _maxHeaderSize' ref _totalBytesConsumed' _currentHeader' _headers); " is 191.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\InternetMessageFormatHeaderParser.cs,ParseHeaderFields,The length of the statement  "	Contract.Assert (maximumHeaderLength <= 0 || totalBytesConsumed <= maximumHeaderLength' "ParseHeaderFields()|Headers already read exceeds limit."); " is 147.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\InternetMessageFormatHeaderParser.cs,ParseHeaderFields,The length of the statement  "	int effectiveMax = maximumHeaderLength <= 0 ? Int32.MaxValue : maximumHeaderLength - totalBytesConsumed + initialBytesParsed; " is 125.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ParseBuffer,The length of the statement  "		_mimeStatus = _mimeParser.ParseBuffer (data' bytesRead' ref bytesConsumed' out _parsedBodyPart [0]' out _parsedBodyPart [1]' out isFinal); " is 138.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ParseBuffer,The length of the statement  "		if (_mimeStatus != MimeMultipartParser.State.BodyPartCompleted && _mimeStatus != MimeMultipartParser.State.NeedMoreData) { " is 122.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ParseBuffer,The length of the statement  "				_bodyPartHeaderStatus = _currentBodyPart.HeaderParser.ParseBuffer (part.Array' part.Count + part.Offset' ref headerConsumed); " is 125.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ParseBuffer,The length of the statement  "					_currentBodyPart.Segments.Add (new ArraySegment<byte> (part.Array' headerConsumed' part.Count + part.Offset - headerConsumed)); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ParseBuffer,The length of the statement  "					throw new IOException (RS.Format (Properties.Resources.ReadAsMimeMultipartHeaderParseError' headerConsumed' part.Array)); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ValidateArguments,The length of the statement  "			throw new ArgumentOutOfRangeException ("maxMessageSize"' maxMessageSize' RS.Format (Properties.Resources.ArgumentMustBeGreaterThanOrEqualTo' MimeMultipartParser.MinMessageSize)); " is 178.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ValidateArguments,The length of the statement  "			throw new ArgumentException (RS.Format (Properties.Resources.ReadAsMimeMultipartArgumentNoContentType' typeof(HttpContent).Name' "multipart/")' "content"); " is 155.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ValidateArguments,The length of the statement  "			throw new ArgumentException (RS.Format (Properties.Resources.ReadAsMimeMultipartArgumentNoMultipart' typeof(HttpContent).Name' "multipart/")' "content"); " is 153.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartBodyPartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartBodyPartParser.cs,ValidateArguments,The length of the statement  "			throw new ArgumentException (RS.Format (Properties.Resources.ReadAsMimeMultipartArgumentNoBoundary' typeof(HttpContent).Name' "multipart"' "boundary")' "content"); " is 163.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartParser.cs,ParseBuffer,The length of the statement  "		parseStatus = MimeMultipartParser.ParseBodyPart (buffer' bytesReady' ref bytesConsumed' ref _bodyPartState' _maxMessageSize' ref _totalBytesConsumed' _currentBoundary); " is 168.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartParser.cs,ParseBodyPart,The length of the statement  "	Contract.Assert (maximumMessageLength <= 0 || totalBytesConsumed <= maximumMessageLength' "ParseBodyPart()|Message already read exceeds limit."); " is 145.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartParser.cs,ParseBodyPart,The length of the statement  "	long effectiveMax = maximumMessageLength <= 0 ? Int64.MaxValue : (maximumMessageLength - totalBytesConsumed + bytesConsumed); " is 125.
Complex Conditional,System.Net.Http.Formatting,JsonContractResolver,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonContractResolver.cs,CreateObjectContract,The conditional expression  "type.IsSerializable && !IsTypeNullable (type) && !IsTypeDataContract (type) && !IsTypeJsonObject (type)"  is complex.
Complex Conditional,System.Net.Http.Formatting,MediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\MediaTypeFormatter.cs,TryGetDelegatingType,The conditional expression  "type != null && type.IsInterface && type.IsGenericType && (type.GetInterface (interfaceType.FullName) != null || type.GetGenericTypeDefinition ().Equals (interfaceType))"  is complex.
Complex Conditional,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The conditional expression  "h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0"  is complex.
Complex Conditional,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,IsUrlSafeChar,The conditional expression  "ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9'"  is complex.
Virtual Method Call from Constructor,System.Net.Http,ObjectContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\ObjectContent.cs,ObjectContent,The constructor "ObjectContent" calls a virtual method "SetDefaultContentHeaders".
Empty Catch Block,System.Threading.Tasks,TaskHelpersExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\TaskHelpersExtensions.cs,GetRethrowWithNoStackLossDelegate,The method has an empty catch block.
Empty Catch Block,System.Net.Http.Formatting,JsonMediaTypeFormatter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\JsonMediaTypeFormatter.cs,CreateDataContractSerializer,The method has an empty catch block.
Magic Number,System.Net.Http,FormattingUtilities,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\FormattingUtilities.cs,UnquoteToken,The following statement contains a magic number: if (token.StartsWith ("\""' StringComparison.Ordinal) && token.EndsWith ("\""' StringComparison.Ordinal) && token.Length > 1) {  	return token.Substring (1' token.Length - 2);  }  
Magic Number,System.Net.Http,FormattingUtilities,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\FormattingUtilities.cs,UnquoteToken,The following statement contains a magic number: return token.Substring (1' token.Length - 2);  
Magic Number,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,SerializeRequestLine,The following statement contains a magic number: message.Append (FormattingUtilities.HttpVersionToken + "/" + (httpRequest.Version != null ? httpRequest.Version.ToString (2) : "1.1") + CRLF);  
Magic Number,System.Net.Http,HttpMessageContent,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\HttpMessageContent.cs,SerializeStatusLine,The following statement contains a magic number: message.Append (FormattingUtilities.HttpVersionToken + "/" + (httpResponse.Version != null ? httpResponse.Version.ToString (2) : "1.1") + SP);  
Magic Number,System.Net.Http,MimeBodyPart,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\MimeBodyPart.cs,MimeBodyPart,The following statement contains a magic number: Segments = new ArrayList (2);  
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,AddToArray,The following statement contains a magic number: Contract.Assert (path.Length >= 2' "The path must be at least 2' one for the ending []' and one for before the '[' (which can be empty)");  
Magic Number,System.Net.Http.Formatting,ParsedMediaTypeHeaderValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\ParsedMediaTypeHeaderValue.cs,ParsedMediaTypeHeaderValue,The following statement contains a magic number: Contract.Assert (splitMediaType.Length == 2' "The constructor of the MediaTypeHeaderValue would have failed if there wasn't a type and subtype.");  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	byte b = bytes [offset + i];  	char ch = (char)b;  	if (IsUrlSafeChar (ch)) {  		expandedBytes [pos++] = b;  	} else if (ch == ' ') {  		expandedBytes [pos++] = (byte)'+';  	} else {  		expandedBytes [pos++] = (byte)'%';  		expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  		expandedBytes [pos++] = (byte)IntToHex (b & 0x0f);  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlEncode,The following statement contains a magic number: if (IsUrlSafeChar (ch)) {  	expandedBytes [pos++] = b;  } else if (ch == ' ') {  	expandedBytes [pos++] = (byte)'+';  } else {  	expandedBytes [pos++] = (byte)'%';  	expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  	expandedBytes [pos++] = (byte)IntToHex (b & 0x0f);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlEncode,The following statement contains a magic number: if (ch == ' ') {  	expandedBytes [pos++] = (byte)'+';  } else {  	expandedBytes [pos++] = (byte)'%';  	expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  	expandedBytes [pos++] = (byte)IntToHex (b & 0x0f);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlEncode,The following statement contains a magic number: expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	} else if (ch == '%' && pos < count - 2) {  		if (value [pos + 1] == 'u' && pos < count - 5) {  			int h1 = HexToInt (value [pos + 2]);  			int h2 = HexToInt (value [pos + 3]);  			int h3 = HexToInt (value [pos + 4]);  			int h4 = HexToInt (value [pos + 5]);  			if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  				// valid 4 hex chars  				ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  				pos += 5;  				// only add as char  				helper.AddChar (ch);  				continue;  			}  		} else {  			int h1 = HexToInt (value [pos + 1]);  			int h2 = HexToInt (value [pos + 2]);  			if (h1 >= 0 && h2 >= 0) {  				// valid 2 hex chars  				byte b = (byte)((h1 << 4) | h2);  				pos += 2;  				// don't add as char  				helper.AddByte (b);  				continue;  			}  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  } else if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	if (value [pos + 1] == 'u' && pos < count - 5) {  		int h1 = HexToInt (value [pos + 2]);  		int h2 = HexToInt (value [pos + 3]);  		int h3 = HexToInt (value [pos + 4]);  		int h4 = HexToInt (value [pos + 5]);  		if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  			// valid 4 hex chars  			ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  			pos += 5;  			// only add as char  			helper.AddChar (ch);  			continue;  		}  	} else {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (value [pos + 1] == 'u' && pos < count - 5) {  	int h1 = HexToInt (value [pos + 2]);  	int h2 = HexToInt (value [pos + 3]);  	int h3 = HexToInt (value [pos + 4]);  	int h4 = HexToInt (value [pos + 5]);  	if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  		// valid 4 hex chars  		ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  		pos += 5;  		// only add as char  		helper.AddChar (ch);  		continue;  	}  } else {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	// valid 4 hex chars  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	// only add as char  	helper.AddChar (ch);  	continue;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	// valid 4 hex chars  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	// only add as char  	helper.AddChar (ch);  	continue;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	// valid 4 hex chars  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	// only add as char  	helper.AddChar (ch);  	continue;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0 && h3 >= 0 && h4 >= 0) {  	// valid 4 hex chars  	ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  	pos += 5;  	// only add as char  	helper.AddChar (ch);  	continue;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: ch = (char)((h1 << 12) | (h2 << 8) | (h3 << 4) | h4);  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: pos += 5;  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	byte b = (byte)((h1 << 4) | h2);  	pos += 2;  	// don't add as char  	helper.AddByte (b);  	continue;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	byte b = (byte)((h1 << 4) | h2);  	pos += 2;  	// don't add as char  	helper.AddByte (b);  	continue;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: pos += 2;  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int pos = offset + i;  	byte b = bytes [pos];  	if (b == '+') {  		b = (byte)' ';  	} else if (b == '%' && i < count - 2) {  		int h1 = HexToInt ((char)bytes [pos + 1]);  		int h2 = HexToInt ((char)bytes [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			b = (byte)((h1 << 4) | h2);  			i += 2;  		}  	}  	decodedBytes [decodedBytesCount++] = b;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int pos = offset + i;  	byte b = bytes [pos];  	if (b == '+') {  		b = (byte)' ';  	} else if (b == '%' && i < count - 2) {  		int h1 = HexToInt ((char)bytes [pos + 1]);  		int h2 = HexToInt ((char)bytes [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			b = (byte)((h1 << 4) | h2);  			i += 2;  		}  	}  	decodedBytes [decodedBytesCount++] = b;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int pos = offset + i;  	byte b = bytes [pos];  	if (b == '+') {  		b = (byte)' ';  	} else if (b == '%' && i < count - 2) {  		int h1 = HexToInt ((char)bytes [pos + 1]);  		int h2 = HexToInt ((char)bytes [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			b = (byte)((h1 << 4) | h2);  			i += 2;  		}  	}  	decodedBytes [decodedBytesCount++] = b;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	int pos = offset + i;  	byte b = bytes [pos];  	if (b == '+') {  		b = (byte)' ';  	} else if (b == '%' && i < count - 2) {  		int h1 = HexToInt ((char)bytes [pos + 1]);  		int h2 = HexToInt ((char)bytes [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			b = (byte)((h1 << 4) | h2);  			i += 2;  		}  	}  	decodedBytes [decodedBytesCount++] = b;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '+') {  	b = (byte)' ';  } else if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '+') {  	b = (byte)' ';  } else if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '+') {  	b = (byte)' ';  } else if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '+') {  	b = (byte)' ';  } else if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (b == '%' && i < count - 2) {  	int h1 = HexToInt ((char)bytes [pos + 1]);  	int h2 = HexToInt ((char)bytes [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		b = (byte)((h1 << 4) | h2);  		i += 2;  	}  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	b = (byte)((h1 << 4) | h2);  	i += 2;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	b = (byte)((h1 << 4) | h2);  	i += 2;  }  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: b = (byte)((h1 << 4) | h2);  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,UrlDecodeInternal,The following statement contains a magic number: i += 2;  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1;  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1;  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,IntToHex,The following statement contains a magic number: if (n <= 9)  	return (char)(n + (int)'0');  else  	return (char)(n - 10 + (int)'a');  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,IntToHex,The following statement contains a magic number: if (n <= 9)  	return (char)(n + (int)'0');  else  	return (char)(n - 10 + (int)'a');  
Magic Number,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,IntToHex,The following statement contains a magic number: return (char)(n - 10 + (int)'a');  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: switch (statusLineState) {  case HttpStatusLineState.BeforeVersionNumbers:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '/') {  		if (buffer [bytesConsumed] < 0x21 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (token);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (token);  	}  	// Validate value  	string version = currentToken.ToString ();  	if (String.CompareOrdinal (FormattingUtilities.HttpVersionToken' version) != 0) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidVersion' version' FormattingUtilities.HttpVersionToken));  	}  	currentToken.Clear ();  	// Move past the '/'  	statusLineState = HttpStatusLineState.MajorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MajorVersionNumber;  case HttpStatusLineState.MajorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '.') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (major);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (major);  	}  	// Move past the "."  	currentToken.Append ('.');  	statusLineState = HttpStatusLineState.MinorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MinorVersionNumber;  case HttpStatusLineState.MinorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (minor);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (minor);  	}  	// Copy out value  	httpResponse.Version = Version.Parse (currentToken.ToString ());  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.StatusCode;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.StatusCode;  case HttpStatusLineState.StatusCode:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (method);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (method);  	}  	// Copy value out  	int statusCode = Int32.Parse (currentToken.ToString ()' CultureInfo.InvariantCulture);  	if (statusCode < 100 || statusCode > 1000) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  	}  	httpResponse.StatusCode = (HttpStatusCode)statusCode;  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.ReasonPhrase;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.ReasonPhrase;  case HttpStatusLineState.ReasonPhrase:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '\r') {  		if (buffer [bytesConsumed] < 0x20 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (addr);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (addr);  	}  	// Copy value out  	httpResponse.ReasonPhrase = currentToken.ToString ();  	currentToken.Clear ();  	// Move past the CR  	statusLineState = HttpStatusLineState.AfterCarriageReturn;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.AfterCarriageReturn;  case HttpStatusLineState.AfterCarriageReturn:  	if (buffer [bytesConsumed] != '\n') {  		parseStatus = ParserState.Invalid;  		goto quit;  	}  	parseStatus = ParserState.Done;  	bytesConsumed++;  	break;  }  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: switch (statusLineState) {  case HttpStatusLineState.BeforeVersionNumbers:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '/') {  		if (buffer [bytesConsumed] < 0x21 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (token);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (token);  	}  	// Validate value  	string version = currentToken.ToString ();  	if (String.CompareOrdinal (FormattingUtilities.HttpVersionToken' version) != 0) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidVersion' version' FormattingUtilities.HttpVersionToken));  	}  	currentToken.Clear ();  	// Move past the '/'  	statusLineState = HttpStatusLineState.MajorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MajorVersionNumber;  case HttpStatusLineState.MajorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '.') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (major);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (major);  	}  	// Move past the "."  	currentToken.Append ('.');  	statusLineState = HttpStatusLineState.MinorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MinorVersionNumber;  case HttpStatusLineState.MinorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (minor);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (minor);  	}  	// Copy out value  	httpResponse.Version = Version.Parse (currentToken.ToString ());  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.StatusCode;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.StatusCode;  case HttpStatusLineState.StatusCode:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (method);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (method);  	}  	// Copy value out  	int statusCode = Int32.Parse (currentToken.ToString ()' CultureInfo.InvariantCulture);  	if (statusCode < 100 || statusCode > 1000) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  	}  	httpResponse.StatusCode = (HttpStatusCode)statusCode;  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.ReasonPhrase;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.ReasonPhrase;  case HttpStatusLineState.ReasonPhrase:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '\r') {  		if (buffer [bytesConsumed] < 0x20 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (addr);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (addr);  	}  	// Copy value out  	httpResponse.ReasonPhrase = currentToken.ToString ();  	currentToken.Clear ();  	// Move past the CR  	statusLineState = HttpStatusLineState.AfterCarriageReturn;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.AfterCarriageReturn;  case HttpStatusLineState.AfterCarriageReturn:  	if (buffer [bytesConsumed] != '\n') {  		parseStatus = ParserState.Invalid;  		goto quit;  	}  	parseStatus = ParserState.Done;  	bytesConsumed++;  	break;  }  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: switch (statusLineState) {  case HttpStatusLineState.BeforeVersionNumbers:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '/') {  		if (buffer [bytesConsumed] < 0x21 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (token);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (token);  	}  	// Validate value  	string version = currentToken.ToString ();  	if (String.CompareOrdinal (FormattingUtilities.HttpVersionToken' version) != 0) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidVersion' version' FormattingUtilities.HttpVersionToken));  	}  	currentToken.Clear ();  	// Move past the '/'  	statusLineState = HttpStatusLineState.MajorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MajorVersionNumber;  case HttpStatusLineState.MajorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '.') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (major);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (major);  	}  	// Move past the "."  	currentToken.Append ('.');  	statusLineState = HttpStatusLineState.MinorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MinorVersionNumber;  case HttpStatusLineState.MinorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (minor);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (minor);  	}  	// Copy out value  	httpResponse.Version = Version.Parse (currentToken.ToString ());  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.StatusCode;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.StatusCode;  case HttpStatusLineState.StatusCode:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (method);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (method);  	}  	// Copy value out  	int statusCode = Int32.Parse (currentToken.ToString ()' CultureInfo.InvariantCulture);  	if (statusCode < 100 || statusCode > 1000) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  	}  	httpResponse.StatusCode = (HttpStatusCode)statusCode;  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.ReasonPhrase;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.ReasonPhrase;  case HttpStatusLineState.ReasonPhrase:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '\r') {  		if (buffer [bytesConsumed] < 0x20 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (addr);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (addr);  	}  	// Copy value out  	httpResponse.ReasonPhrase = currentToken.ToString ();  	currentToken.Clear ();  	// Move past the CR  	statusLineState = HttpStatusLineState.AfterCarriageReturn;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.AfterCarriageReturn;  case HttpStatusLineState.AfterCarriageReturn:  	if (buffer [bytesConsumed] != '\n') {  		parseStatus = ParserState.Invalid;  		goto quit;  	}  	parseStatus = ParserState.Done;  	bytesConsumed++;  	break;  }  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: switch (statusLineState) {  case HttpStatusLineState.BeforeVersionNumbers:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '/') {  		if (buffer [bytesConsumed] < 0x21 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (token);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (token);  	}  	// Validate value  	string version = currentToken.ToString ();  	if (String.CompareOrdinal (FormattingUtilities.HttpVersionToken' version) != 0) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidVersion' version' FormattingUtilities.HttpVersionToken));  	}  	currentToken.Clear ();  	// Move past the '/'  	statusLineState = HttpStatusLineState.MajorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MajorVersionNumber;  case HttpStatusLineState.MajorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '.') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (major);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (major);  	}  	// Move past the "."  	currentToken.Append ('.');  	statusLineState = HttpStatusLineState.MinorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MinorVersionNumber;  case HttpStatusLineState.MinorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (minor);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (minor);  	}  	// Copy out value  	httpResponse.Version = Version.Parse (currentToken.ToString ());  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.StatusCode;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.StatusCode;  case HttpStatusLineState.StatusCode:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (method);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (method);  	}  	// Copy value out  	int statusCode = Int32.Parse (currentToken.ToString ()' CultureInfo.InvariantCulture);  	if (statusCode < 100 || statusCode > 1000) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  	}  	httpResponse.StatusCode = (HttpStatusCode)statusCode;  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.ReasonPhrase;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.ReasonPhrase;  case HttpStatusLineState.ReasonPhrase:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '\r') {  		if (buffer [bytesConsumed] < 0x20 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (addr);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (addr);  	}  	// Copy value out  	httpResponse.ReasonPhrase = currentToken.ToString ();  	currentToken.Clear ();  	// Move past the CR  	statusLineState = HttpStatusLineState.AfterCarriageReturn;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.AfterCarriageReturn;  case HttpStatusLineState.AfterCarriageReturn:  	if (buffer [bytesConsumed] != '\n') {  		parseStatus = ParserState.Invalid;  		goto quit;  	}  	parseStatus = ParserState.Done;  	bytesConsumed++;  	break;  }  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: if (statusCode < 100 || statusCode > 1000) {  	throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  }  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: if (statusCode < 100 || statusCode > 1000) {  	throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  }  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: if (statusCode < 100 || statusCode > 1000) {  	throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  }  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: if (statusCode < 100 || statusCode > 1000) {  	throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  }  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following statement contains a magic number: throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  
Missing Default,System.Web.Http,DictionaryExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\DictionaryExtensions.cs,FindKeysWithPrefix,The following switch statement is missing a default case: switch (charAfterPrefix) {  case '[':  case '.':  	yield return entry;  	break;  }  
Missing Default,System.Threading.Tasks,TaskHelpers,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\TaskHelpers.cs,SetIfTaskFailed,The following switch statement is missing a default case: switch (source.Status) {  case TaskStatus.Canceled:  case TaskStatus.Faulted:  	return tcs.TrySetFromTask (source);  }  
Missing Default,System.Threading.Tasks,TaskHelpersExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\TaskHelpersExtensions.cs,CopyResultToCompletionSourceImpl,The following switch statement is missing a default case: switch (task.Status) {  case TaskStatus.Canceled:  case TaskStatus.Faulted:  	TaskHelpers.TrySetFromTask (tcs' task);  	break;  case TaskStatus.RanToCompletion:  	tcs.TrySetResult (resultThunk (task));  	break;  }  
Missing Default,System.Threading.Tasks,TaskHelpersExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\..\Common\TaskHelpersExtensions.cs,CopyResultToCompletionSourceImplContinuation,The following switch statement is missing a default case: switch (innerTask.Status) {  case TaskStatus.Canceled:  case TaskStatus.Faulted:  	TaskHelpers.TrySetFromTask (tcs' innerTask);  	break;  case TaskStatus.RanToCompletion:  	tcs.TrySetResult (resultThunk (task));  	break;  }  
Missing Default,System.Net.Http.Formatting,FormUrlEncodedJson,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\FormUrlEncodedJson.cs,ValidateQueryString,The following switch statement is missing a default case: switch (key [i]) {  case '[':  	if (!hasUnMatchedLeftBraket) {  		hasUnMatchedLeftBraket = true;  	} else {  		if (throwOnError) {  			throw new ArgumentException (RS.Format (Properties.Resources.NestedBracketNotValid' ApplicationFormUrlEncoded' i));  		}  		return false;  	}  	break;  case ']':  	if (hasUnMatchedLeftBraket) {  		hasUnMatchedLeftBraket = false;  	} else {  		if (throwOnError) {  			throw new ArgumentException (RS.Format (Properties.Resources.UnMatchedBracketNotValid' ApplicationFormUrlEncoded' i));  		}  		return false;  	}  	break;  }  
Missing Default,System.Net.Http.Formatting,DefaultContentNegotiator,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\DefaultContentNegotiator.cs,RunNegotiation,The following switch statement is missing a default case: switch (matchResult) {  case ResponseFormatterSelectionResult.MatchOnCanWriteType:  	// First match by type trumps all other type matches  	if (formatterMatchOnType == null) {  		formatterMatchOnType = formatter;  		mediaTypeMatchOnType = match;  	}  	break;  case ResponseFormatterSelectionResult.MatchOnResponseContentType:  	// Match on response content trumps all other choices  	mediaType = match.MediaTypeMatch.MediaType;  	return formatter;  case ResponseFormatterSelectionResult.MatchOnRequestAcceptHeader:  	// Matches on accept headers must choose the highest quality match  	double thisQuality = match.MediaTypeMatch.Quality;  	if (formatterMatchOnAcceptHeader != null) {  		double bestQualitySeen = mediaTypeMatchOnAcceptHeader.MediaTypeMatch.Quality;  		if (thisQuality <= bestQualitySeen) {  			continue;  		}  	}  	formatterMatchOnAcceptHeader = formatter;  	mediaTypeMatchOnAcceptHeader = match;  	break;  case ResponseFormatterSelectionResult.MatchOnRequestWithMediaTypeMapping:  	// Matches on accept headers using mappings must choose the highest quality match  	double thisMappingQuality = match.MediaTypeMatch.Quality;  	if (mediaTypeMatchWithMapping != null) {  		double bestMappingQualitySeen = mediaTypeMatchWithMapping.MediaTypeMatch.Quality;  		if (thisMappingQuality <= bestMappingQualitySeen) {  			continue;  		}  	}  	formatterMatchWithMapping = formatter;  	mediaTypeMatchWithMapping = match;  	break;  case ResponseFormatterSelectionResult.MatchOnRequestContentType:  	// First match on request content type trumps other request content matches  	if (formatterMatchOnRequestContentType == null) {  		formatterMatchOnRequestContentType = formatter;  		mediaTypeMatchOnRequestContentType = match;  	}  	break;  }  
Missing Default,System.Net.Http.Internal,UriQueryUtility,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Internal\UriQueryUtility.cs,IsUrlSafeChar,The following switch statement is missing a default case: switch (ch) {  case '-':  case '_':  case '.':  case '!':  case '*':  case '(':  case ')':  	return true;  }  
Missing Default,System.Net.Http.Formatting.Parsers,FormUrlEncodedParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\FormUrlEncodedParser.cs,ParseNameValuePairs,The following switch statement is missing a default case: switch (nameValueState) {  case NameValueState.Name:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '=' && buffer [bytesConsumed] != '&') {  		if (++bytesConsumed == effectiveMax) {  			string name = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentNameValuePair.Name.Append (name);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string name = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentNameValuePair.Name.Append (name);  	}  	// Check if we got name=value or just name  	if (buffer [bytesConsumed] == '=') {  		// Move part the '='  		nameValueState = NameValueState.Value;  		if (++bytesConsumed == effectiveMax) {  			goto quit;  		}  		goto case NameValueState.Value;  	} else {  		// Copy parsed name-only to collection  		currentNameValuePair.CopyNameOnlyTo (nameValuePairs);  		// Move past the '&' but stay in same state  		if (++bytesConsumed == effectiveMax) {  			goto quit;  		}  		goto case NameValueState.Name;  	}  case NameValueState.Value:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '&') {  		if (++bytesConsumed == effectiveMax) {  			string value = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentNameValuePair.Value.Append (value);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string value = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentNameValuePair.Value.Append (value);  	}  	// Copy parsed name value pair to collection  	currentNameValuePair.CopyTo (nameValuePairs);  	// Move past the '&'  	nameValueState = NameValueState.Name;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case NameValueState.Name;  }  
Missing Default,System.Net.Http.Formatting.Parsers,HttpRequestHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestHeaderParser.cs,ParseBuffer,The following switch statement is missing a default case: switch (_requestStatus) {  case HttpRequestState.RequestLine:  	try {  		subParseStatus = _requestLineParser.ParseBuffer (buffer' bytesReady' ref bytesConsumed);  	} catch (Exception) {  		subParseStatus = ParserState.Invalid;  	}  	if (subParseStatus == ParserState.Done) {  		_requestStatus = HttpRequestState.RequestHeaders;  		subParseStatus = ParserState.NeedMoreData;  		goto case HttpRequestState.RequestHeaders;  	} else if (subParseStatus != ParserState.NeedMoreData) {  		// Report error - either Invalid or DataTooBig  		parseStatus = subParseStatus;  		break;  	}  	break;  // read more data  case HttpRequestState.RequestHeaders:  	if (bytesConsumed >= bytesReady) {  		// we already can tell we need more data  		break;  	}  	try {  		subParseStatus = _headerParser.ParseBuffer (buffer' bytesReady' ref bytesConsumed);  	} catch (Exception) {  		subParseStatus = ParserState.Invalid;  	}  	if (subParseStatus == ParserState.Done) {  		parseStatus = subParseStatus;  	} else if (subParseStatus != ParserState.NeedMoreData) {  		parseStatus = subParseStatus;  		break;  	}  	break;  // need more data  }  
Missing Default,System.Net.Http.Formatting.Parsers,HttpRequestLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpRequestLineParser.cs,ParseRequestLine,The following switch statement is missing a default case: switch (requestLineState) {  case HttpRequestLineState.RequestMethod:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < 0x21 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (method);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (method);  	}  	// Copy value out  	httpRequest.Method = new HttpMethod (currentToken.ToString ());  	currentToken.Clear ();  	// Move past the SP  	requestLineState = HttpRequestLineState.RequestUri;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpRequestLineState.RequestUri;  case HttpRequestLineState.RequestUri:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] == '\r') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (addr);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (addr);  	}  	// URI validation happens when we create the URI later.  	if (currentToken.Length == 0) {  		throw new FormatException (Properties.Resources.HttpMessageParserEmptyUri);  	}  	// Copy value out  	httpRequest.RequestUri = currentToken.ToString ();  	currentToken.Clear ();  	// Move past the SP  	requestLineState = HttpRequestLineState.BeforeVersionNumbers;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpRequestLineState.BeforeVersionNumbers;  case HttpRequestLineState.BeforeVersionNumbers:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '/') {  		if (buffer [bytesConsumed] < 0x21 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (token);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (token);  	}  	// Validate value  	string version = currentToken.ToString ();  	if (String.CompareOrdinal (FormattingUtilities.HttpVersionToken' version) != 0) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidVersion' version' FormattingUtilities.HttpVersionToken));  	}  	currentToken.Clear ();  	// Move past the '/'  	requestLineState = HttpRequestLineState.MajorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpRequestLineState.MajorVersionNumber;  case HttpRequestLineState.MajorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '.') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (major);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (major);  	}  	// Move past the "."  	currentToken.Append ('.');  	requestLineState = HttpRequestLineState.MinorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpRequestLineState.MinorVersionNumber;  case HttpRequestLineState.MinorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '\r') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (minor);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (minor);  	}  	// Copy out value  	httpRequest.Version = Version.Parse (currentToken.ToString ());  	currentToken.Clear ();  	// Move past the CR  	requestLineState = HttpRequestLineState.AfterCarriageReturn;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpRequestLineState.AfterCarriageReturn;  case HttpRequestLineState.AfterCarriageReturn:  	if (buffer [bytesConsumed] != '\n') {  		parseStatus = ParserState.Invalid;  		goto quit;  	}  	parseStatus = ParserState.Done;  	bytesConsumed++;  	break;  }  
Missing Default,System.Net.Http.Formatting.Parsers,HttpResponseHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpResponseHeaderParser.cs,ParseBuffer,The following switch statement is missing a default case: switch (_responseStatus) {  case HttpResponseState.StatusLine:  	try {  		subParseStatus = _statusLineParser.ParseBuffer (buffer' bytesReady' ref bytesConsumed);  	} catch (Exception) {  		subParseStatus = ParserState.Invalid;  	}  	if (subParseStatus == ParserState.Done) {  		_responseStatus = HttpResponseState.ResponseHeaders;  		subParseStatus = ParserState.NeedMoreData;  		goto case HttpResponseState.ResponseHeaders;  	} else if (subParseStatus != ParserState.NeedMoreData) {  		// Report error - either Invalid or DataTooBig  		parseStatus = subParseStatus;  		break;  	}  	break;  // read more data  case HttpResponseState.ResponseHeaders:  	if (bytesConsumed >= bytesReady) {  		// we already can tell we need more data  		break;  	}  	try {  		subParseStatus = _headerParser.ParseBuffer (buffer' bytesReady' ref bytesConsumed);  	} catch (Exception) {  		subParseStatus = ParserState.Invalid;  	}  	if (subParseStatus == ParserState.Done) {  		parseStatus = subParseStatus;  	} else if (subParseStatus != ParserState.NeedMoreData) {  		parseStatus = subParseStatus;  		break;  	}  	break;  // need more data  }  
Missing Default,System.Net.Http.Formatting.Parsers,HttpStatusLineParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\HttpStatusLineParser.cs,ParseStatusLine,The following switch statement is missing a default case: switch (statusLineState) {  case HttpStatusLineState.BeforeVersionNumbers:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '/') {  		if (buffer [bytesConsumed] < 0x21 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (token);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string token = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (token);  	}  	// Validate value  	string version = currentToken.ToString ();  	if (String.CompareOrdinal (FormattingUtilities.HttpVersionToken' version) != 0) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidVersion' version' FormattingUtilities.HttpVersionToken));  	}  	currentToken.Clear ();  	// Move past the '/'  	statusLineState = HttpStatusLineState.MajorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MajorVersionNumber;  case HttpStatusLineState.MajorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '.') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (major);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string major = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (major);  	}  	// Move past the "."  	currentToken.Append ('.');  	statusLineState = HttpStatusLineState.MinorVersionNumber;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.MinorVersionNumber;  case HttpStatusLineState.MinorVersionNumber:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (minor);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string minor = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (minor);  	}  	// Copy out value  	httpResponse.Version = Version.Parse (currentToken.ToString ());  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.StatusCode;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.StatusCode;  case HttpStatusLineState.StatusCode:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ' ') {  		if (buffer [bytesConsumed] < '0' || buffer [bytesConsumed] > '9') {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (method);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string method = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (method);  	}  	// Copy value out  	int statusCode = Int32.Parse (currentToken.ToString ()' CultureInfo.InvariantCulture);  	if (statusCode < 100 || statusCode > 1000) {  		throw new FormatException (RS.Format (Properties.Resources.HttpInvalidStatusCode' statusCode' 100' 1000));  	}  	httpResponse.StatusCode = (HttpStatusCode)statusCode;  	currentToken.Clear ();  	// Move past the SP  	statusLineState = HttpStatusLineState.ReasonPhrase;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.ReasonPhrase;  case HttpStatusLineState.ReasonPhrase:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '\r') {  		if (buffer [bytesConsumed] < 0x20 || buffer [bytesConsumed] > 0x7a) {  			parseStatus = ParserState.Invalid;  			goto quit;  		}  		if (++bytesConsumed == effectiveMax) {  			string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentToken.Append (addr);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string addr = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentToken.Append (addr);  	}  	// Copy value out  	httpResponse.ReasonPhrase = currentToken.ToString ();  	currentToken.Clear ();  	// Move past the CR  	statusLineState = HttpStatusLineState.AfterCarriageReturn;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HttpStatusLineState.AfterCarriageReturn;  case HttpStatusLineState.AfterCarriageReturn:  	if (buffer [bytesConsumed] != '\n') {  		parseStatus = ParserState.Invalid;  		goto quit;  	}  	parseStatus = ParserState.Done;  	bytesConsumed++;  	break;  }  
Missing Default,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\InternetMessageFormatHeaderParser.cs,ParseHeaderFields,The following switch statement is missing a default case: switch (requestHeaderState) {  case HeaderFieldState.Name:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != ':') {  		if (buffer [bytesConsumed] == '\r') {  			if (!currentField.IsEmpty ()) {  				parseStatus = ParserState.Invalid;  				goto quit;  			} else {  				// Move past the '\r'  				requestHeaderState = HeaderFieldState.AfterCarriageReturn;  				if (++bytesConsumed == effectiveMax) {  					goto quit;  				}  				goto case HeaderFieldState.AfterCarriageReturn;  			}  		}  		if (++bytesConsumed == effectiveMax) {  			string headerFieldName = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentField.Name.Append (headerFieldName);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string headerFieldName = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentField.Name.Append (headerFieldName);  	}  	// Move past the ':'  	requestHeaderState = HeaderFieldState.Value;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HeaderFieldState.Value;  case HeaderFieldState.Value:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != '\r') {  		if (++bytesConsumed == effectiveMax) {  			string headerFieldValue = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  			currentField.Value.Append (headerFieldValue);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		string headerFieldValue = Encoding.UTF8.GetString (buffer' segmentStart' bytesConsumed - segmentStart);  		currentField.Value.Append (headerFieldValue);  	}  	// Move past the CR  	requestHeaderState = HeaderFieldState.AfterCarriageReturn;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HeaderFieldState.AfterCarriageReturn;  case HeaderFieldState.AfterCarriageReturn:  	if (buffer [bytesConsumed] != '\n') {  		parseStatus = ParserState.Invalid;  		goto quit;  	}  	if (currentField.IsEmpty ()) {  		parseStatus = ParserState.Done;  		bytesConsumed++;  		goto quit;  	}  	requestHeaderState = HeaderFieldState.FoldingLine;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HeaderFieldState.FoldingLine;  case HeaderFieldState.FoldingLine:  	if (buffer [bytesConsumed] != ' ' && buffer [bytesConsumed] != '\t') {  		currentField.CopyTo (headers);  		requestHeaderState = HeaderFieldState.Name;  		if (bytesConsumed == effectiveMax) {  			goto quit;  		}  		goto case HeaderFieldState.Name;  	}  	// Unfold line by inserting SP instead  	currentField.Value.Append (' ');  	// Continue parsing header field value  	requestHeaderState = HeaderFieldState.Value;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case HeaderFieldState.Value;  }  
Missing Default,System.Net.Http.Formatting.Parsers,MimeMultipartParser,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Net.Http.Formatting\Formatting\Parsers\MimeMultipartParser.cs,ParseBodyPart,The following switch statement is missing a default case: switch (bodyPartState) {  case BodyPartState.BodyPart:  	while (buffer [bytesConsumed] != MimeMultipartParser.CR) {  		if (++bytesConsumed == effectiveMax) {  			goto quit;  		}  	}  	// Remember potential boundary  	currentBodyPart.AppendBoundary (MimeMultipartParser.CR);  	// Move past the CR  	bodyPartState = BodyPartState.AfterFirstCarriageReturn;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case BodyPartState.AfterFirstCarriageReturn;  case BodyPartState.AfterFirstCarriageReturn:  	if (buffer [bytesConsumed] != MimeMultipartParser.LF) {  		currentBodyPart.ResetBoundary ();  		bodyPartState = BodyPartState.BodyPart;  		if (++bytesConsumed == effectiveMax) {  			goto quit;  		}  		goto case BodyPartState.BodyPart;  	}  	// Remember potential boundary  	currentBodyPart.AppendBoundary (MimeMultipartParser.LF);  	// Move past the CR  	bodyPartState = BodyPartState.AfterFirstLineFeed;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case BodyPartState.AfterFirstLineFeed;  case BodyPartState.AfterFirstLineFeed:  	if (buffer [bytesConsumed] == MimeMultipartParser.CR) {  		// Remember potential boundary  		currentBodyPart.ResetBoundary ();  		currentBodyPart.AppendBoundary (MimeMultipartParser.CR);  		// Move past the CR  		bodyPartState = BodyPartState.AfterFirstCarriageReturn;  		if (++bytesConsumed == effectiveMax) {  			goto quit;  		}  		goto case BodyPartState.AfterFirstCarriageReturn;  	}  	if (buffer [bytesConsumed] != MimeMultipartParser.Dash) {  		currentBodyPart.ResetBoundary ();  		bodyPartState = BodyPartState.BodyPart;  		if (++bytesConsumed == effectiveMax) {  			goto quit;  		}  		goto case BodyPartState.BodyPart;  	}  	// Remember potential boundary  	currentBodyPart.AppendBoundary (MimeMultipartParser.Dash);  	// Move past the Dash  	bodyPartState = BodyPartState.AfterFirstDash;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case BodyPartState.AfterFirstDash;  case BodyPartState.AfterFirstDash:  	if (buffer [bytesConsumed] != MimeMultipartParser.Dash) {  		currentBodyPart.ResetBoundary ();  		bodyPartState = BodyPartState.BodyPart;  		if (++bytesConsumed == effectiveMax) {  			goto quit;  		}  		goto case BodyPartState.BodyPart;  	}  	// Remember potential boundary  	currentBodyPart.AppendBoundary (MimeMultipartParser.Dash);  	// Move past the Dash  	bodyPartState = BodyPartState.Boundary;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case BodyPartState.Boundary;  case BodyPartState.Boundary:  	segmentStart = bytesConsumed;  	while (buffer [bytesConsumed] != MimeMultipartParser.CR) {  		if (++bytesConsumed == effectiveMax) {  			currentBodyPart.AppendBoundary (buffer' segmentStart' bytesConsumed - segmentStart);  			goto quit;  		}  	}  	if (bytesConsumed > segmentStart) {  		currentBodyPart.AppendBoundary (buffer' segmentStart' bytesConsumed - segmentStart);  	}  	// Remember potential boundary  	currentBodyPart.AppendBoundary (MimeMultipartParser.CR);  	// Move past the CR  	bodyPartState = BodyPartState.AfterSecondCarriageReturn;  	if (++bytesConsumed == effectiveMax) {  		goto quit;  	}  	goto case BodyPartState.AfterSecondCarriageReturn;  case BodyPartState.AfterSecondCarriageReturn:  	if (buffer [bytesConsumed] != MimeMultipartParser.LF) {  		currentBodyPart.ResetBoundary ();  		bodyPartState = BodyPartState.BodyPart;  		if (++bytesConsumed == effectiveMax) {  			goto quit;  		}  		goto case BodyPartState.BodyPart;  	}  	// Remember potential boundary  	currentBodyPart.AppendBoundary (MimeMultipartParser.LF);  	// Move past the LF  	bytesConsumed++;  	bodyPartState = BodyPartState.BodyPart;  	if (currentBodyPart.IsBoundaryValid ()) {  		parseStatus = State.BodyPartCompleted;  	} else {  		currentBodyPart.ResetBoundary ();  		if (bytesConsumed == effectiveMax) {  			goto quit;  		}  		goto case BodyPartState.BodyPart;  	}  	goto quit;  }  
