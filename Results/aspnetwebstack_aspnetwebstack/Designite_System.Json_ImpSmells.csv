Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryCreate,Cyclomatic complexity of the method is 27
Complex Method,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,ReadAs,Cyclomatic complexity of the method is 13
Complex Method,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,Save,Cyclomatic complexity of the method is 10
Complex Method,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,Cyclomatic complexity of the method is 8
Complex Method,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,Cyclomatic complexity of the method is 32
Complex Method,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryReadAsInternal,Cyclomatic complexity of the method is 21
Complex Method,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,WriteValue,Cyclomatic complexity of the method is 32
Complex Method,System.Json,JsonValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValue.cs,ValueOrDefault,Cyclomatic complexity of the method is 19
Complex Method,System.Json,JsonValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValue.cs,IsSupportedExplicitCastType,Cyclomatic complexity of the method is 16
Complex Method,System.Json,JsonValueDynamicMetaObject,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValueDynamicMetaObject.cs,BindInvokeMember,Cyclomatic complexity of the method is 8
Complex Method,System.Json,JsonValueDynamicMetaObject,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValueDynamicMetaObject.cs,GetExtensionMethod,Cyclomatic complexity of the method is 8
Complex Method,System.Json,JsonValueDynamicMetaObject,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValueDynamicMetaObject.cs,TryGetIndexExpression,Cyclomatic complexity of the method is 12
Complex Method,System.Json,JXmlToJsonValueConverter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JXmlToJsonValueConverter.cs,JXMLToJsonValue,Cyclomatic complexity of the method is 26
Complex Method,System.Json,JXmlToJsonValueConverter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JXmlToJsonValueConverter.cs,ReadPrimitive,Cyclomatic complexity of the method is 14
Complex Method,System.Runtime.Serialization.Json,JsonValueExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\Extensions\JsonValueExtensions.cs,TryReadAsType,Cyclomatic complexity of the method is 10
Complex Method,System.Runtime.Serialization.Json,JsonValueExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\Extensions\JsonValueExtensions.cs,CreateFromDynamic,Cyclomatic complexity of the method is 11
Long Parameter List,System.Json,JXmlToJsonValueConverter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JXmlToJsonValueConverter.cs,InsertJsonValue,The method has 5 parameters.
Long Statement,System.Json,JsonArray,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonArray.cs,WriteAttributeString,The length of the statement  "	jsonWriter.WriteAttributeString (JXmlToJsonValueConverter.TypeAttributeName' JXmlToJsonValueConverter.ArrayAttributeValue); " is 123.
Long Statement,System.Json,JsonObject,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonObject.cs,WriteAttributeString,The length of the statement  "	jsonWriter.WriteAttributeString (JXmlToJsonValueConverter.TypeAttributeName' JXmlToJsonValueConverter.ObjectAttributeValue); " is 124.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,ReadAs,The length of the statement  "			throw new UriFormatException (RS.Format (Properties.Resources.InvalidUriFormat' jsonPrimitiveType.Name' valueStr' typeOfTName' uriType.Name)); " is 142.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,Save,The length of the statement  "		jsonWriter.WriteAttributeString (JXmlToJsonValueConverter.TypeAttributeName' JXmlToJsonValueConverter.BooleanAttributeValue); " is 125.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,Save,The length of the statement  "		jsonWriter.WriteAttributeString (JXmlToJsonValueConverter.TypeAttributeName' JXmlToJsonValueConverter.NumberAttributeValue); " is 124.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,Save,The length of the statement  "		jsonWriter.WriteAttributeString (JXmlToJsonValueConverter.TypeAttributeName' JXmlToJsonValueConverter.StringAttributeValue); " is 124.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToBool,The length of the statement  "	result.ReadAsFailureKind = Boolean.TryParse (valueString' out tempBool) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidFormat; " is 136.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToByte,The length of the statement  "	result.ReadAsFailureKind = Byte.TryParse (valueString' out tempByte) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 131.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToChar,The length of the statement  "	result.ReadAsFailureKind = Char.TryParse (valueString' out tempChar) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidFormat; " is 133.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToDecimal,The length of the statement  "	result.ReadAsFailureKind = Decimal.TryParse (valueString' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out tempDecimal) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 189.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToDateTime,The length of the statement  "	result.ReadAsFailureKind = TryParseDateTime (valueString' out tempDateTime) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidDateFormat; " is 144.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToDateTimeOffset,The length of the statement  "	result.ReadAsFailureKind = TryParseDateTimeOffset (valueString' out tempDateTimeOffset) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidDateFormat; " is 156.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToDouble,The length of the statement  "	result.ReadAsFailureKind = Double.TryParse (valueString' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out tempDouble) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 187.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToGuid,The length of the statement  "	result.ReadAsFailureKind = Guid.TryParse (valueString' out tempGuid) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidFormat; " is 133.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToShort,The length of the statement  "	result.ReadAsFailureKind = Int16.TryParse (valueString' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out tempShort) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 187.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToInt,The length of the statement  "	result.ReadAsFailureKind = Int32.TryParse (valueString' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out tempInt) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 185.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToLong,The length of the statement  "	result.ReadAsFailureKind = Int64.TryParse (valueString' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out tempLong) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 186.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToSByte,The length of the statement  "	result.ReadAsFailureKind = SByte.TryParse (valueString' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out tempSByte) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 187.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToFloat,The length of the statement  "	result.ReadAsFailureKind = Single.TryParse (valueString' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out tempFloat) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 186.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToUShort,The length of the statement  "	result.ReadAsFailureKind = UInt16.TryParse (valueString' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out tempUShort) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 189.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToUInt,The length of the statement  "	result.ReadAsFailureKind = UInt32.TryParse (valueString' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out tempUInt) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 187.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToULong,The length of the statement  "	result.ReadAsFailureKind = UInt64.TryParse (valueString' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out tempULong) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidCast; " is 188.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,StringToUri,The length of the statement  "	result.ReadAsFailureKind = Uri.TryCreate (valueString' UriKind.RelativeOrAbsolute' out tempUri) ? ReadAsFailureKind.NoFailure : ReadAsFailureKind.InvalidUriFormat; " is 163.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseDateTime,The length of the statement  "	string filteredValue = valueString.EndsWith (UtcString' StringComparison.Ordinal) ? valueString.Replace (UtcString' GmtString) : valueString; " is 141.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseDateTimeOffset,The length of the statement  "	string filteredValue = valueString.EndsWith (UtcString' StringComparison.Ordinal) ? valueString.Replace (UtcString' GmtString) : valueString; " is 141.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseDateTimeOffset,The length of the statement  "	if (DateTimeOffset.TryParse (filteredValue' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out dateTimeOffset)) { " is 126.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The length of the statement  "	// The actual value of the offset is ignored' since the ticks represent the UTC offset. The value is converted to local time based on that info. " is 144.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The length of the statement  "	if (valueString.StartsWith (DateTimePrefix' StringComparison.Ordinal) && valueString.EndsWith (DateTimeSuffix' StringComparison.Ordinal)) { " is 139.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The length of the statement  "		string ticksValue = valueString.Substring (DateTimePrefixLength' valueString.Length - DateTimePrefixLength - DateTimeSuffixLength); " is 131.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The length of the statement  "			if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) { " is 281.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The length of the statement  "			Contract.Assert (i < val.Length' "Found that a '\' was the last character in a string' which is invalid JSON. Verify the calling method uses a valid JSON string as the input parameter of this method."); " is 202.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The length of the statement  "				Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i)); " is 195.
Long Statement,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryReadAsInternal,The length of the statement  "		Contract.Assert (str.Length >= 2 && str.StartsWith ("\""' StringComparison.Ordinal) && str.EndsWith ("\""' StringComparison.Ordinal)' "The unescaped string must begin and end with quotes."); " is 190.
Long Statement,System.Json,JsonValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValue.cs,CastValue,The length of the statement  "			throw new InvalidCastException (RS.Format (Properties.Resources.CannotCastJsonValue' value.GetType ().FullName' typeofT.FullName)' ex); " is 135.
Long Statement,System.Json,JsonValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValue.cs,ReadAs,The length of the statement  "	throw new NotSupportedException (RS.Format (Properties.Resources.CannotReadAsType' GetType ().FullName' type.FullName)); " is 120.
Long Statement,System.Json,JsonValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValue.cs,IsSupportedExplicitCastType,The length of the statement  "		return type == typeof(DateTimeOffset) || type == typeof(Guid) || type == typeof(Uri) || type == typeof(List<object>) || type == typeof(Array) || type == typeof(object[]) || type == typeof(Dictionary<string' object>); " is 216.
Long Statement,System.Json,JsonValue,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValue.cs,Save,The length of the statement  "					jsonWriter.WriteAttributeString (JXmlToJsonValueConverter.TypeAttributeName' JXmlToJsonValueConverter.NullAttributeValue); " is 122.
Long Statement,System.Json,JsonValueDynamicMetaObject,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValueDynamicMetaObject.cs,BindConvert,The length of the statement  "	bool implicitCastSupported = binder.Type.IsAssignableFrom (LimitType) || binder.Type == typeof(IEnumerable<KeyValuePair<string' JsonValue>>) || binder.Type == typeof(IDynamicMetaObjectProvider) || binder.Type == typeof(object); " is 227.
Long Statement,System.Json,JsonValueDynamicMetaObject,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValueDynamicMetaObject.cs,BindConvert,The length of the statement  "			string exceptionMessage = RS.Format (Properties.Resources.CannotCastJsonValue' LimitType.FullName' binder.Type.FullName); " is 121.
Long Statement,System.Json,JsonValueDynamicMetaObject,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValueDynamicMetaObject.cs,TryGetIndexExpression,The length of the statement  "		expression = Expression.Throw (Expression.Constant (new ArgumentException (RS.Format (Properties.Resources.InvalidIndexType' indexType)))' typeof(object)); " is 155.
Long Statement,System.Json,JsonValueDynamicMetaObject,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValueDynamicMetaObject.cs,TryGetIndexExpression,The length of the statement  "	expression = Expression.Throw (Expression.Constant (new ArgumentException (Properties.Resources.NonSingleNonNullIndexNotSupported))' typeof(object)); " is 149.
Long Statement,System.Json,JXmlToJsonValueConverter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JXmlToJsonValueConverter.cs,JXMLToJsonValue,The length of the statement  "		using (XmlDictionaryReader jsonReader = jsonStream != null ? JsonReaderWriterFactory.CreateJsonReader (jsonStream' XmlDictionaryReaderQuotas.Max) : JsonReaderWriterFactory.CreateJsonReader (jsonBytes' XmlDictionaryReaderQuotas.Max)) { " is 234.
Long Statement,System.Json,JXmlToJsonValueConverter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JXmlToJsonValueConverter.cs,MoveToRootNode,The length of the statement  "	while (!jsonReader.EOF && (jsonReader.NodeType == XmlNodeType.None || jsonReader.NodeType == XmlNodeType.XmlDeclaration)) { " is 123.
Long Statement,System.Json,JXmlToJsonValueConverter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JXmlToJsonValueConverter.cs,MoveToRootNode,The length of the statement  "	if (jsonReader.NodeType != XmlNodeType.Element || !String.IsNullOrEmpty (jsonReader.NamespaceURI) || jsonReader.Name != RootElementName) { " is 138.
Long Statement,System.Json,JXmlToJsonValueConverter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JXmlToJsonValueConverter.cs,SkipWhitespace,The length of the statement  "	while (!reader.EOF && (reader.NodeType == XmlNodeType.Whitespace || reader.NodeType == XmlNodeType.SignificantWhitespace)) { " is 124.
Long Statement,System.Runtime.Serialization.Json,JsonValueExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\Extensions\JsonValueExtensions.cs,ReadAsType,The length of the statement  "	throw new NotSupportedException (RS.Format (System.Json.Properties.Resources.CannotReadAsType' jsonValue.GetType ().FullName' type.FullName)); " is 142.
Long Statement,System.Runtime.Serialization.Json,JsonValueExtensions,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\Extensions\JsonValueExtensions.cs,CanConvertToClrCollection,The length of the statement  "		return (jsonValue.JsonType == JsonType.Object && collectionType == typeof(Dictionary<string' object>)) || (jsonValue.JsonType == JsonType.Array && collectionType == typeof(object[])); " is 183.
Complex Conditional,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The conditional expression  "indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])"  is complex.
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (valueString.StartsWith (DateTimePrefix' StringComparison.Ordinal) && valueString.EndsWith (DateTimeSuffix' StringComparison.Ordinal)) {  	string ticksValue = valueString.Substring (DateTimePrefixLength' valueString.Length - DateTimePrefixLength - DateTimeSuffixLength);  	DateTimeKind dateTimeKind = DateTimeKind.Utc;  	int indexOfTimeZoneOffset = ticksValue.IndexOf ('+'' 1);  	if (indexOfTimeZoneOffset < 0) {  		indexOfTimeZoneOffset = ticksValue.IndexOf ('-'' 1);  	}  	// If an offset is present' verify it is properly formatted. Actual value is ignored (see spec).  	if (indexOfTimeZoneOffset != -1) {  		if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  			ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  			dateTimeKind = DateTimeKind.Local;  		} else {  			dateTime = new DateTime ();  			return false;  		}  	}  	long millisecondsSinceUnixEpoch;  	if (Int64.TryParse (ticksValue' NumberStyles.Integer' CultureInfo.InvariantCulture' out millisecondsSinceUnixEpoch)) {  		long ticks = (millisecondsSinceUnixEpoch * 10000) + UnixEpochTicks;  		if (ticks < DateTime.MaxValue.Ticks) {  			dateTime = new DateTime (ticks' DateTimeKind.Utc);  			if (dateTimeKind == DateTimeKind.Local) {  				dateTime = dateTime.ToLocalTime ();  			}  			return true;  		}  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (valueString.StartsWith (DateTimePrefix' StringComparison.Ordinal) && valueString.EndsWith (DateTimeSuffix' StringComparison.Ordinal)) {  	string ticksValue = valueString.Substring (DateTimePrefixLength' valueString.Length - DateTimePrefixLength - DateTimeSuffixLength);  	DateTimeKind dateTimeKind = DateTimeKind.Utc;  	int indexOfTimeZoneOffset = ticksValue.IndexOf ('+'' 1);  	if (indexOfTimeZoneOffset < 0) {  		indexOfTimeZoneOffset = ticksValue.IndexOf ('-'' 1);  	}  	// If an offset is present' verify it is properly formatted. Actual value is ignored (see spec).  	if (indexOfTimeZoneOffset != -1) {  		if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  			ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  			dateTimeKind = DateTimeKind.Local;  		} else {  			dateTime = new DateTime ();  			return false;  		}  	}  	long millisecondsSinceUnixEpoch;  	if (Int64.TryParse (ticksValue' NumberStyles.Integer' CultureInfo.InvariantCulture' out millisecondsSinceUnixEpoch)) {  		long ticks = (millisecondsSinceUnixEpoch * 10000) + UnixEpochTicks;  		if (ticks < DateTime.MaxValue.Ticks) {  			dateTime = new DateTime (ticks' DateTimeKind.Utc);  			if (dateTimeKind == DateTimeKind.Local) {  				dateTime = dateTime.ToLocalTime ();  			}  			return true;  		}  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (valueString.StartsWith (DateTimePrefix' StringComparison.Ordinal) && valueString.EndsWith (DateTimeSuffix' StringComparison.Ordinal)) {  	string ticksValue = valueString.Substring (DateTimePrefixLength' valueString.Length - DateTimePrefixLength - DateTimeSuffixLength);  	DateTimeKind dateTimeKind = DateTimeKind.Utc;  	int indexOfTimeZoneOffset = ticksValue.IndexOf ('+'' 1);  	if (indexOfTimeZoneOffset < 0) {  		indexOfTimeZoneOffset = ticksValue.IndexOf ('-'' 1);  	}  	// If an offset is present' verify it is properly formatted. Actual value is ignored (see spec).  	if (indexOfTimeZoneOffset != -1) {  		if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  			ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  			dateTimeKind = DateTimeKind.Local;  		} else {  			dateTime = new DateTime ();  			return false;  		}  	}  	long millisecondsSinceUnixEpoch;  	if (Int64.TryParse (ticksValue' NumberStyles.Integer' CultureInfo.InvariantCulture' out millisecondsSinceUnixEpoch)) {  		long ticks = (millisecondsSinceUnixEpoch * 10000) + UnixEpochTicks;  		if (ticks < DateTime.MaxValue.Ticks) {  			dateTime = new DateTime (ticks' DateTimeKind.Utc);  			if (dateTimeKind == DateTimeKind.Local) {  				dateTime = dateTime.ToLocalTime ();  			}  			return true;  		}  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (valueString.StartsWith (DateTimePrefix' StringComparison.Ordinal) && valueString.EndsWith (DateTimeSuffix' StringComparison.Ordinal)) {  	string ticksValue = valueString.Substring (DateTimePrefixLength' valueString.Length - DateTimePrefixLength - DateTimeSuffixLength);  	DateTimeKind dateTimeKind = DateTimeKind.Utc;  	int indexOfTimeZoneOffset = ticksValue.IndexOf ('+'' 1);  	if (indexOfTimeZoneOffset < 0) {  		indexOfTimeZoneOffset = ticksValue.IndexOf ('-'' 1);  	}  	// If an offset is present' verify it is properly formatted. Actual value is ignored (see spec).  	if (indexOfTimeZoneOffset != -1) {  		if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  			ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  			dateTimeKind = DateTimeKind.Local;  		} else {  			dateTime = new DateTime ();  			return false;  		}  	}  	long millisecondsSinceUnixEpoch;  	if (Int64.TryParse (ticksValue' NumberStyles.Integer' CultureInfo.InvariantCulture' out millisecondsSinceUnixEpoch)) {  		long ticks = (millisecondsSinceUnixEpoch * 10000) + UnixEpochTicks;  		if (ticks < DateTime.MaxValue.Ticks) {  			dateTime = new DateTime (ticks' DateTimeKind.Utc);  			if (dateTimeKind == DateTimeKind.Local) {  				dateTime = dateTime.ToLocalTime ();  			}  			return true;  		}  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (valueString.StartsWith (DateTimePrefix' StringComparison.Ordinal) && valueString.EndsWith (DateTimeSuffix' StringComparison.Ordinal)) {  	string ticksValue = valueString.Substring (DateTimePrefixLength' valueString.Length - DateTimePrefixLength - DateTimeSuffixLength);  	DateTimeKind dateTimeKind = DateTimeKind.Utc;  	int indexOfTimeZoneOffset = ticksValue.IndexOf ('+'' 1);  	if (indexOfTimeZoneOffset < 0) {  		indexOfTimeZoneOffset = ticksValue.IndexOf ('-'' 1);  	}  	// If an offset is present' verify it is properly formatted. Actual value is ignored (see spec).  	if (indexOfTimeZoneOffset != -1) {  		if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  			ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  			dateTimeKind = DateTimeKind.Local;  		} else {  			dateTime = new DateTime ();  			return false;  		}  	}  	long millisecondsSinceUnixEpoch;  	if (Int64.TryParse (ticksValue' NumberStyles.Integer' CultureInfo.InvariantCulture' out millisecondsSinceUnixEpoch)) {  		long ticks = (millisecondsSinceUnixEpoch * 10000) + UnixEpochTicks;  		if (ticks < DateTime.MaxValue.Ticks) {  			dateTime = new DateTime (ticks' DateTimeKind.Utc);  			if (dateTimeKind == DateTimeKind.Local) {  				dateTime = dateTime.ToLocalTime ();  			}  			return true;  		}  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (indexOfTimeZoneOffset != -1) {  	if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  		ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  		dateTimeKind = DateTimeKind.Local;  	} else {  		dateTime = new DateTime ();  		return false;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (indexOfTimeZoneOffset != -1) {  	if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  		ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  		dateTimeKind = DateTimeKind.Local;  	} else {  		dateTime = new DateTime ();  		return false;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (indexOfTimeZoneOffset != -1) {  	if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  		ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  		dateTimeKind = DateTimeKind.Local;  	} else {  		dateTime = new DateTime ();  		return false;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (indexOfTimeZoneOffset != -1) {  	if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  		ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  		dateTimeKind = DateTimeKind.Local;  	} else {  		dateTime = new DateTime ();  		return false;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  	ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  	dateTimeKind = DateTimeKind.Local;  } else {  	dateTime = new DateTime ();  	return false;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  	ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  	dateTimeKind = DateTimeKind.Local;  } else {  	dateTime = new DateTime ();  	return false;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  	ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  	dateTimeKind = DateTimeKind.Local;  } else {  	dateTime = new DateTime ();  	return false;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (indexOfTimeZoneOffset + 5 == ticksValue.Length && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 1]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 2]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 3]) && IsLatinDigit (ticksValue [indexOfTimeZoneOffset + 4])) {  	ticksValue = ticksValue.Substring (0' indexOfTimeZoneOffset);  	dateTimeKind = DateTimeKind.Local;  } else {  	dateTime = new DateTime ();  	return false;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryParseAspNetDateTimeFormat,The following statement contains a magic number: if (Int64.TryParse (ticksValue' NumberStyles.Integer' CultureInfo.InvariantCulture' out millisecondsSinceUnixEpoch)) {  	long ticks = (millisecondsSinceUnixEpoch * 10000) + UnixEpochTicks;  	if (ticks < DateTime.MaxValue.Ticks) {  		dateTime = new DateTime (ticks' DateTimeKind.Utc);  		if (dateTimeKind == DateTimeKind.Local) {  			dateTime = dateTime.ToLocalTime ();  		}  		return true;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: for (int i = 0; i < val.Length; i++) {  	if (val [i] == '\\') {  		i++;  		if (sb == null) {  			sb = new StringBuilder ();  		}  		sb.Append (val' startIndex' count);  		Contract.Assert (i < val.Length' "Found that a '\' was the last character in a string' which is invalid JSON. Verify the calling method uses a valid JSON string as the input parameter of this method.");  		switch (val [i]) {  		case '"':  		case '\'':  		case '/':  		case '\\':  			sb.Append (val [i]);  			break;  		case 'b':  			sb.Append ('\b');  			break;  		case 'f':  			sb.Append ('\f');  			break;  		case 'n':  			sb.Append ('\n');  			break;  		case 'r':  			sb.Append ('\r');  			break;  		case 't':  			sb.Append ('\t');  			break;  		case 'u':  			Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  			sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  			i += 4;  			break;  		}  		startIndex = i + 1;  		count = 0;  	} else {  		count++;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: for (int i = 0; i < val.Length; i++) {  	if (val [i] == '\\') {  		i++;  		if (sb == null) {  			sb = new StringBuilder ();  		}  		sb.Append (val' startIndex' count);  		Contract.Assert (i < val.Length' "Found that a '\' was the last character in a string' which is invalid JSON. Verify the calling method uses a valid JSON string as the input parameter of this method.");  		switch (val [i]) {  		case '"':  		case '\'':  		case '/':  		case '\\':  			sb.Append (val [i]);  			break;  		case 'b':  			sb.Append ('\b');  			break;  		case 'f':  			sb.Append ('\f');  			break;  		case 'n':  			sb.Append ('\n');  			break;  		case 'r':  			sb.Append ('\r');  			break;  		case 't':  			sb.Append ('\t');  			break;  		case 'u':  			Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  			sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  			i += 4;  			break;  		}  		startIndex = i + 1;  		count = 0;  	} else {  		count++;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: for (int i = 0; i < val.Length; i++) {  	if (val [i] == '\\') {  		i++;  		if (sb == null) {  			sb = new StringBuilder ();  		}  		sb.Append (val' startIndex' count);  		Contract.Assert (i < val.Length' "Found that a '\' was the last character in a string' which is invalid JSON. Verify the calling method uses a valid JSON string as the input parameter of this method.");  		switch (val [i]) {  		case '"':  		case '\'':  		case '/':  		case '\\':  			sb.Append (val [i]);  			break;  		case 'b':  			sb.Append ('\b');  			break;  		case 'f':  			sb.Append ('\f');  			break;  		case 'n':  			sb.Append ('\n');  			break;  		case 'r':  			sb.Append ('\r');  			break;  		case 't':  			sb.Append ('\t');  			break;  		case 'u':  			Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  			sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  			i += 4;  			break;  		}  		startIndex = i + 1;  		count = 0;  	} else {  		count++;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: if (val [i] == '\\') {  	i++;  	if (sb == null) {  		sb = new StringBuilder ();  	}  	sb.Append (val' startIndex' count);  	Contract.Assert (i < val.Length' "Found that a '\' was the last character in a string' which is invalid JSON. Verify the calling method uses a valid JSON string as the input parameter of this method.");  	switch (val [i]) {  	case '"':  	case '\'':  	case '/':  	case '\\':  		sb.Append (val [i]);  		break;  	case 'b':  		sb.Append ('\b');  		break;  	case 'f':  		sb.Append ('\f');  		break;  	case 'n':  		sb.Append ('\n');  		break;  	case 'r':  		sb.Append ('\r');  		break;  	case 't':  		sb.Append ('\t');  		break;  	case 'u':  		Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  		sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  		i += 4;  		break;  	}  	startIndex = i + 1;  	count = 0;  } else {  	count++;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: if (val [i] == '\\') {  	i++;  	if (sb == null) {  		sb = new StringBuilder ();  	}  	sb.Append (val' startIndex' count);  	Contract.Assert (i < val.Length' "Found that a '\' was the last character in a string' which is invalid JSON. Verify the calling method uses a valid JSON string as the input parameter of this method.");  	switch (val [i]) {  	case '"':  	case '\'':  	case '/':  	case '\\':  		sb.Append (val [i]);  		break;  	case 'b':  		sb.Append ('\b');  		break;  	case 'f':  		sb.Append ('\f');  		break;  	case 'n':  		sb.Append ('\n');  		break;  	case 'r':  		sb.Append ('\r');  		break;  	case 't':  		sb.Append ('\t');  		break;  	case 'u':  		Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  		sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  		i += 4;  		break;  	}  	startIndex = i + 1;  	count = 0;  } else {  	count++;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: if (val [i] == '\\') {  	i++;  	if (sb == null) {  		sb = new StringBuilder ();  	}  	sb.Append (val' startIndex' count);  	Contract.Assert (i < val.Length' "Found that a '\' was the last character in a string' which is invalid JSON. Verify the calling method uses a valid JSON string as the input parameter of this method.");  	switch (val [i]) {  	case '"':  	case '\'':  	case '/':  	case '\\':  		sb.Append (val [i]);  		break;  	case 'b':  		sb.Append ('\b');  		break;  	case 'f':  		sb.Append ('\f');  		break;  	case 'n':  		sb.Append ('\n');  		break;  	case 'r':  		sb.Append ('\r');  		break;  	case 't':  		sb.Append ('\t');  		break;  	case 'u':  		Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  		sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  		i += 4;  		break;  	}  	startIndex = i + 1;  	count = 0;  } else {  	count++;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: switch (val [i]) {  case '"':  case '\'':  case '/':  case '\\':  	sb.Append (val [i]);  	break;  case 'b':  	sb.Append ('\b');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'u':  	Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  	sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  	i += 4;  	break;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: switch (val [i]) {  case '"':  case '\'':  case '/':  case '\\':  	sb.Append (val [i]);  	break;  case 'b':  	sb.Append ('\b');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'u':  	Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  	sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  	i += 4;  	break;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: switch (val [i]) {  case '"':  case '\'':  case '/':  case '\\':  	sb.Append (val [i]);  	break;  case 'b':  	sb.Append ('\b');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'u':  	Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  	sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  	i += 4;  	break;  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following statement contains a magic number: i += 4;  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryReadAsInternal,The following statement contains a magic number: if (jsonType == JsonType.String) {  	string str = UnescapeJsonString (ToString ());  	Contract.Assert (str.Length >= 2 && str.StartsWith ("\""' StringComparison.Ordinal) && str.EndsWith ("\""' StringComparison.Ordinal)' "The unescaped string must begin and end with quotes.");  	str = str.Substring (1' str.Length - 2);  	if (stringConverters.ContainsKey (type)) {  		ConvertResult result = stringConverters [type].Invoke (str);  		value = result.Value;  		return result.ReadAsFailureKind;  	}  	if (type == typeof(string)) {  		value = str;  		return ReadAsFailureKind.NoFailure;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryReadAsInternal,The following statement contains a magic number: if (jsonType == JsonType.String) {  	string str = UnescapeJsonString (ToString ());  	Contract.Assert (str.Length >= 2 && str.StartsWith ("\""' StringComparison.Ordinal) && str.EndsWith ("\""' StringComparison.Ordinal)' "The unescaped string must begin and end with quotes.");  	str = str.Substring (1' str.Length - 2);  	if (stringConverters.ContainsKey (type)) {  		ConvertResult result = stringConverters [type].Invoke (str);  		value = result.Value;  		return result.ReadAsFailureKind;  	}  	if (type == typeof(string)) {  		value = str;  		return ReadAsFailureKind.NoFailure;  	}  }  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryReadAsInternal,The following statement contains a magic number: Contract.Assert (str.Length >= 2 && str.StartsWith ("\""' StringComparison.Ordinal) && str.EndsWith ("\""' StringComparison.Ordinal)' "The unescaped string must begin and end with quotes.");  
Magic Number,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryReadAsInternal,The following statement contains a magic number: str = str.Substring (1' str.Length - 2);  
Missing Default,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,UnescapeJsonString,The following switch statement is missing a default case: switch (val [i]) {  case '"':  case '\'':  case '/':  case '\\':  	sb.Append (val [i]);  	break;  case 'b':  	sb.Append ('\b');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'u':  	Contract.Assert ((i + 3) < val.Length' String.Format (CultureInfo.CurrentCulture' "Unexpected char {0} at position {1}. The unicode escape sequence should be followed by 4 digits."' val [i]' i));  	sb.Append (ParseChar (val.Substring (i + 1' 4)' NumberStyles.HexNumber));  	i += 4;  	break;  }  
Missing Default,System.Json,JsonPrimitive,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonPrimitive.cs,TryReadAsInternal,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return NumberToNumberConverter (type' this.value' out value);  case TypeCode.String:  	value = ToString ();  	return ReadAsFailureKind.NoFailure;  }  
Missing Default,System.Json,JsonValueDynamicMetaObject,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JsonValueDynamicMetaObject.cs,TryGetIndexExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode (indexType)) {  case TypeCode.Char:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Byte:  case TypeCode.SByte:  	Expression argExp = Expression.Convert (index.Expression' typeof(object));  	Expression typeExp = Expression.Constant (typeof(int));  	expression = Expression.Convert (Expression.Call (_changeTypeMethodInfo' new Expression[] {  		argExp'  		typeExp  	})' typeof(int));  	return true;  case TypeCode.Int32:  case TypeCode.String:  	expression = index.Expression;  	return true;  }  
Missing Default,System.Json,JXmlToJsonValueConverter,F:\newReposMay17\aspnetwebstack_aspnetwebstack\src\System.Json\JXmlToJsonValueConverter.cs,ReadPrimitive,The following switch statement is missing a default case: switch (type) {  case NullAttributeValue:  	jsonReader.Skip ();  	result = null;  	break;  case BooleanAttributeValue:  	result = jsonReader.ReadElementContentAsBoolean ();  	break;  case StringAttributeValue:  	result = jsonReader.ReadElementContentAsString ();  	break;  case NumberAttributeValue:  	string temp = jsonReader.ReadElementContentAsString ();  	result = ConvertStringToJsonNumber (temp);  	break;  }  
