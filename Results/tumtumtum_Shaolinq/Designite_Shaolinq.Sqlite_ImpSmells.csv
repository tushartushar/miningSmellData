Implementation smell,Namespace,Class,File,Method,Description
Long Method,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has 105 lines of code.
Long Method,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has 105 lines of code.
Long Method,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has 105 lines of code.
Long Method,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method has 106 lines of code.
Long Identifier,Shaolinq.Sqlite,SqliteAutoIncrementPrimaryKeyColumnReducer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteAutoIncrementPrimaryKeyColumnReducer.cs,Reduce,The length of the parameter primaryKeyNameByTablesWithReducedPrimaryKeyName is 47.
Long Identifier,Shaolinq.Sqlite,SqliteAutoIncrementPrimaryKeyColumnReducer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteAutoIncrementPrimaryKeyColumnReducer.cs,,The length of the parameter primaryKeyNameByTablesWithReducedPrimaryKeyName is 47.
Long Identifier,Shaolinq.Sqlite,SqliteForeignKeyConstraintReducer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteForeignKeyConstraintReducer.cs,SqliteForeignKeyConstraintReducer,The length of the parameter primaryKeyNameByTablesWithReducedPrimaryKeyName is 47.
Long Identifier,Shaolinq.Sqlite,SqliteForeignKeyConstraintReducer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteForeignKeyConstraintReducer.cs,Reduce,The length of the parameter primaryKeyNameByTablesWithReducedPrimaryKeyName is 47.
Long Identifier,Shaolinq.Sqlite,SqliteForeignKeyConstraintReducer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteForeignKeyConstraintReducer.cs,,The length of the parameter primaryKeyNameByTablesWithReducedPrimaryKeyName is 47.
Long Identifier,Shaolinq.Sqlite,SqliteSqlDataTypeProvider,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlDataTypeProvider.cs,SqliteSqlDataTypeProvider,The length of the parameter constraintDefaultsConfiguration is 31.
Long Identifier,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,PreProcess,The length of the parameter primaryKeyNameByTablesWithReducedPrimaryKeyName is 47.
Long Statement,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						this.inMemoryConnection = (await sqliteSqlDatabaseContext.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)); " is 120.
Long Statement,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						this.inMemoryConnection = (await sqliteSqlDatabaseContext.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)); " is 120.
Long Statement,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						this.inMemoryConnection = (await sqliteSqlDatabaseContext.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)); " is 120.
Long Statement,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.Sqlite,SqliteSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,PrivateOpenConnectionAsync,The length of the statement  "			return this.connection ?? (this.connection = new SqlitePersistentDbConnection((await base.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)))); " is 154.
Long Statement,Shaolinq.Sqlite,SqliteSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,PrivateOpenConnectionAsync,The length of the statement  "			return this.connection ?? (this.connection = new SqlitePersistentDbConnection((await base.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)))); " is 154.
Long Statement,Shaolinq.Sqlite,SqliteSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,PrivateOpenConnectionAsync,The length of the statement  "			return this.connection ?? (this.connection = new SqlitePersistentDbConnection((await base.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)))); " is 154.
Long Statement,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,BackupAsync,The length of the statement  "					this.GetSqliteConnection(connection).BackupDatabase(this.GetSqliteConnection(otherConnection)' "main"' "main"' -1' null' 1000); " is 127.
Long Statement,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,BackupAsync,The length of the statement  "					this.GetSqliteConnection(connection).BackupDatabase(this.GetSqliteConnection(otherConnection)' "main"' "main"' -1' null' 1000); " is 127.
Long Statement,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,BackupAsync,The length of the statement  "					this.GetSqliteConnection(connection).BackupDatabase(this.GetSqliteConnection(otherConnection)' "main"' "main"' -1' null' 1000); " is 127.
Long Statement,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,Create,The length of the statement  "			var sqlDataTypeProvider = CreateSqlDataTypeProvider(model' contextInfo' () => new SqliteSqlDataTypeProvider(constraintDefaults)); " is 129.
Long Statement,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,Create,The length of the statement  "			var sqlQueryFormatterManager = new DefaultSqlQueryFormatterManager(sqlDialect' model.Configuration.NamingTransforms' options => new SqliteSqlQueryFormatter(options' sqlDialect' sqlDataTypeProvider' typeDescriptorProvider)); " is 223.
Long Statement,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,DecorateException,The length of the statement  "						var primaryKeyNames = dataAccessObject.GetAdvanced().TypeDescriptor.PrimaryKeyProperties.Select(c => c.DeclaringTypeDescriptor.PersistedName + "." + c.PersistedName); " is 166.
Long Statement,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,Backup,The length of the statement  "					this.GetSqliteConnection(connection).BackupDatabase(this.GetSqliteConnection(otherConnection)' "main"' "main"' -1' null' 1000); " is 127.
Long Statement,Shaolinq.Sqlite,SqliteAutoIncrementPrimaryKeyColumnReducer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteAutoIncrementPrimaryKeyColumnReducer.cs,VisitCreateTable,The length of the statement  "						var uniqueConstraint = new SqlConstraintExpression(ConstraintType.Unique' /* TODO: name */ null' primaryKeyConstraint.ColumnNames); " is 131.
Long Statement,Shaolinq.Sqlite,SqliteAutoIncrementPrimaryKeyColumnReducer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteAutoIncrementPrimaryKeyColumnReducer.cs,VisitCreateTable,The length of the statement  "					this.primaryKeyNameByTablesWithReducedPrimaryKeyName[createTableExpression.Table.Name] = autoIncrementColumn.ColumnDefinition.ColumnName; " is 137.
Long Statement,Shaolinq.Sqlite,SqliteForeignKeyConstraintReducer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteForeignKeyConstraintReducer.cs,VisitConstraint,The length of the statement  "			if (this.primaryKeyNameByTablesWithReducedPrimaryKeyName.TryGetValue(constraintExpression.ReferencesExpression.ReferencedTable.Name' out primaryKeyName)) " is 153.
Long Statement,Shaolinq.Sqlite,SqliteForeignKeyConstraintReducer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteForeignKeyConstraintReducer.cs,VisitConstraint,The length of the statement  "				var newReferencedColumnNames = constraintExpression.ReferencesExpression.ReferencedColumnNames.Where((c' i) => i == index); " is 123.
Long Statement,Shaolinq.Sqlite,SqliteMonoSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteMonoSqlDatabaseContext.cs,Create,The length of the statement  "			var sqlDataTypeProvider = CreateSqlDataTypeProvider(model' contextInfo' () => new SqliteSqlDataTypeProvider(constraintDefaults)); " is 129.
Long Statement,Shaolinq.Sqlite,SqliteMonoSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteMonoSqlDatabaseContext.cs,Create,The length of the statement  "			var sqlQueryFormatterManager = new DefaultSqlQueryFormatterManager(sqlDialect' model.Configuration.NamingTransforms' options => new SqliteSqlQueryFormatter(options' sqlDialect' sqlDataTypeProvider' typeDescriptorProvider)); " is 223.
Long Statement,Shaolinq.Sqlite,SqliteMonoSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteMonoSqlDatabaseContext.cs,DecorateException,The length of the statement  "						var primaryKeyNames = dataAccessObject.GetAdvanced().TypeDescriptor.PrimaryKeyProperties.Select(c => c.DeclaringTypeDescriptor.PersistedName + "." + c.PersistedName); " is 166.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,PreProcess,The length of the statement  "			expression = SqliteAutoIncrementPrimaryKeyColumnReducer.Reduce(expression' out primaryKeyNameByTablesWithReducedPrimaryKeyName); " is 128.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%Y-%m-%d %H:%M:%f0000"' "now")' null' arguments); " is 138.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%Y-%m-%d %H:%M:%f0000"' "now"' "localtime")' null' arguments); " is 151.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult(""' false' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[0]' Expression.Constant(" seconds"))) " is 157.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult(""' false' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[0]' Expression.Constant(" minutes"))) " is 157.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult(""' false' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[0]' Expression.Constant(" hours"))) " is 155.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult(""' false' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[0]' Expression.Constant(" days"))) " is 154.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult("STRFTIME"' false' Expression.Constant("%Y-%m-%d %H:%M:%f0000")' arguments[0]' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[1]' Expression.Constant(" days"))); " is 223.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult("STRFTIME"' false' Expression.Constant("%Y-%m-%d %H:%M:%f0000")' arguments[0]' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[1]' Expression.Constant(" months"))); " is 225.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult("STRFTIME"' false' Expression.Constant("%Y-%m-%d %H:%M:%f0000")' arguments[0]' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[1]' Expression.Constant(" years"))); " is 224.
Long Statement,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "				return new FunctionResolveResult("STRFTIME"' false' Expression.Constant("%Y-%m-%d %H:%M:%f0000")' arguments[0]' arguments[1]); " is 126.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method has an empty catch block.
Empty Catch Block,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method has an empty catch block.
Magic Number,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The following statement contains a magic number: if (overwrite)  			{  				try  				{  					File.Delete(path);  				}  				catch (FileNotFoundException)  				{  				}  				catch (DirectoryNotFoundException)  				{  				}    				for (var i = 0; i < 2; i++)  				{  					try  					{  						this.CreateFile(path);  						break;  					}  					catch (FileNotFoundException)  					{  					}  					catch (DirectoryNotFoundException)  					{  					}    					var directoryPath = Path.GetDirectoryName(path);  					if (!String.IsNullOrEmpty(directoryPath))  					{  						try  						{  							Directory.CreateDirectory(directoryPath);  						}  						catch  						{  						}  					}  				}    				retval = true;  			}  			else  			{  				if (!File.Exists(path))  				{  					for (var i = 0; i < 2; i++)  					{  						try  						{  							this.CreateFile(path);  							break;  						}  						catch (FileNotFoundException)  						{  						}  						catch (DirectoryNotFoundException)  						{  						}    						var directoryPath = Path.GetDirectoryName(path);  						if (!String.IsNullOrEmpty(directoryPath))  						{  							try  							{  								Directory.CreateDirectory(directoryPath);  							}  							catch  							{  							}  						}  					}    					retval = true;  				}  				else  				{  					retval = false;  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The following statement contains a magic number: if (overwrite)  			{  				try  				{  					File.Delete(path);  				}  				catch (FileNotFoundException)  				{  				}  				catch (DirectoryNotFoundException)  				{  				}    				for (var i = 0; i < 2; i++)  				{  					try  					{  						this.CreateFile(path);  						break;  					}  					catch (FileNotFoundException)  					{  					}  					catch (DirectoryNotFoundException)  					{  					}    					var directoryPath = Path.GetDirectoryName(path);  					if (!String.IsNullOrEmpty(directoryPath))  					{  						try  						{  							Directory.CreateDirectory(directoryPath);  						}  						catch  						{  						}  					}  				}    				retval = true;  			}  			else  			{  				if (!File.Exists(path))  				{  					for (var i = 0; i < 2; i++)  					{  						try  						{  							this.CreateFile(path);  							break;  						}  						catch (FileNotFoundException)  						{  						}  						catch (DirectoryNotFoundException)  						{  						}    						var directoryPath = Path.GetDirectoryName(path);  						if (!String.IsNullOrEmpty(directoryPath))  						{  							try  							{  								Directory.CreateDirectory(directoryPath);  							}  							catch  							{  							}  						}  					}    					retval = true;  				}  				else  				{  					retval = false;  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The following statement contains a magic number: if (overwrite)  			{  				try  				{  					File.Delete(path);  				}  				catch (FileNotFoundException)  				{  				}  				catch (DirectoryNotFoundException)  				{  				}    				for (var i = 0; i < 2; i++)  				{  					try  					{  						this.CreateFile(path);  						break;  					}  					catch (FileNotFoundException)  					{  					}  					catch (DirectoryNotFoundException)  					{  					}    					var directoryPath = Path.GetDirectoryName(path);  					if (!String.IsNullOrEmpty(directoryPath))  					{  						try  						{  							Directory.CreateDirectory(directoryPath);  						}  						catch  						{  						}  					}  				}    				retval = true;  			}  			else  			{  				if (!File.Exists(path))  				{  					for (var i = 0; i < 2; i++)  					{  						try  						{  							this.CreateFile(path);  							break;  						}  						catch (FileNotFoundException)  						{  						}  						catch (DirectoryNotFoundException)  						{  						}    						var directoryPath = Path.GetDirectoryName(path);  						if (!String.IsNullOrEmpty(directoryPath))  						{  							try  							{  								Directory.CreateDirectory(directoryPath);  							}  							catch  							{  							}  						}  					}    					retval = true;  				}  				else  				{  					retval = false;  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The following statement contains a magic number: if (overwrite)  			{  				try  				{  					File.Delete(path);  				}  				catch (FileNotFoundException)  				{  				}  				catch (DirectoryNotFoundException)  				{  				}    				for (var i = 0; i < 2; i++)  				{  					try  					{  						this.CreateFile(path);  						break;  					}  					catch (FileNotFoundException)  					{  					}  					catch (DirectoryNotFoundException)  					{  					}    					var directoryPath = Path.GetDirectoryName(path);  					if (!String.IsNullOrEmpty(directoryPath))  					{  						try  						{  							Directory.CreateDirectory(directoryPath);  						}  						catch  						{  						}  					}  				}    				retval = true;  			}  			else  			{  				if (!File.Exists(path))  				{  					for (var i = 0; i < 2; i++)  					{  						try  						{  							this.CreateFile(path);  							break;  						}  						catch (FileNotFoundException)  						{  						}  						catch (DirectoryNotFoundException)  						{  						}    						var directoryPath = Path.GetDirectoryName(path);  						if (!String.IsNullOrEmpty(directoryPath))  						{  							try  							{  								Directory.CreateDirectory(directoryPath);  							}  							catch  							{  							}  						}  					}    					retval = true;  				}  				else  				{  					retval = false;  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The following statement contains a magic number: if (overwrite)  			{  				try  				{  					File.Delete(path);  				}  				catch (FileNotFoundException)  				{  				}  				catch (DirectoryNotFoundException)  				{  				}    				for (var i = 0; i < 2; i++)  				{  					try  					{  						this.CreateFile(path);  						break;  					}  					catch (FileNotFoundException)  					{  					}  					catch (DirectoryNotFoundException)  					{  					}    					var directoryPath = Path.GetDirectoryName(path);  					if (!String.IsNullOrEmpty(directoryPath))  					{  						try  						{  							Directory.CreateDirectory(directoryPath);  						}  						catch  						{  						}  					}  				}    				retval = true;  			}  			else  			{  				if (!File.Exists(path))  				{  					for (var i = 0; i < 2; i++)  					{  						try  						{  							this.CreateFile(path);  							break;  						}  						catch (FileNotFoundException)  						{  						}  						catch (DirectoryNotFoundException)  						{  						}    						var directoryPath = Path.GetDirectoryName(path);  						if (!String.IsNullOrEmpty(directoryPath))  						{  							try  							{  								Directory.CreateDirectory(directoryPath);  							}  							catch  							{  							}  						}  					}    					retval = true;  				}  				else  				{  					retval = false;  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The following statement contains a magic number: if (overwrite)  			{  				try  				{  					File.Delete(path);  				}  				catch (FileNotFoundException)  				{  				}  				catch (DirectoryNotFoundException)  				{  				}    				for (var i = 0; i < 2; i++)  				{  					try  					{  						this.CreateFile(path);  						break;  					}  					catch (FileNotFoundException)  					{  					}  					catch (DirectoryNotFoundException)  					{  					}    					var directoryPath = Path.GetDirectoryName(path);  					if (!String.IsNullOrEmpty(directoryPath))  					{  						try  						{  							Directory.CreateDirectory(directoryPath);  						}  						catch  						{  						}  					}  				}    				retval = true;  			}  			else  			{  				if (!File.Exists(path))  				{  					for (var i = 0; i < 2; i++)  					{  						try  						{  							this.CreateFile(path);  							break;  						}  						catch (FileNotFoundException)  						{  						}  						catch (DirectoryNotFoundException)  						{  						}    						var directoryPath = Path.GetDirectoryName(path);  						if (!String.IsNullOrEmpty(directoryPath))  						{  							try  							{  								Directory.CreateDirectory(directoryPath);  							}  							catch  							{  							}  						}  					}    					retval = true;  				}  				else  				{  					retval = false;  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The following statement contains a magic number: if (overwrite)  			{  				try  				{  					File.Delete(path);  				}  				catch (FileNotFoundException)  				{  				}  				catch (DirectoryNotFoundException)  				{  				}    				for (var i = 0; i < 2; i++)  				{  					try  					{  						this.CreateFile(path);    						break;  					}  					catch (FileNotFoundException)  					{  					}  					catch (DirectoryNotFoundException)  					{  					}    					var directoryPath = Path.GetDirectoryName(path);    					if (!String.IsNullOrEmpty(directoryPath))  					{  						try  						{  							Directory.CreateDirectory(directoryPath);  						}  						catch  						{  						}  					}  				}    				retval = true;  			}  			else  			{  				if (!File.Exists(path))  				{  					for (var i = 0; i < 2; i++)  					{  						try  						{  							this.CreateFile(path);    							break;  						}  						catch (FileNotFoundException)  						{  						}  						catch (DirectoryNotFoundException)  						{  						}    						var directoryPath = Path.GetDirectoryName(path);    						if (!String.IsNullOrEmpty(directoryPath))  						{  							try  							{  								Directory.CreateDirectory(directoryPath);  							}  							catch  							{  							}  						}  					}    					retval = true;  				}  				else  				{  					retval = false;  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The following statement contains a magic number: if (overwrite)  			{  				try  				{  					File.Delete(path);  				}  				catch (FileNotFoundException)  				{  				}  				catch (DirectoryNotFoundException)  				{  				}    				for (var i = 0; i < 2; i++)  				{  					try  					{  						this.CreateFile(path);    						break;  					}  					catch (FileNotFoundException)  					{  					}  					catch (DirectoryNotFoundException)  					{  					}    					var directoryPath = Path.GetDirectoryName(path);    					if (!String.IsNullOrEmpty(directoryPath))  					{  						try  						{  							Directory.CreateDirectory(directoryPath);  						}  						catch  						{  						}  					}  				}    				retval = true;  			}  			else  			{  				if (!File.Exists(path))  				{  					for (var i = 0; i < 2; i++)  					{  						try  						{  							this.CreateFile(path);    							break;  						}  						catch (FileNotFoundException)  						{  						}  						catch (DirectoryNotFoundException)  						{  						}    						var directoryPath = Path.GetDirectoryName(path);    						if (!String.IsNullOrEmpty(directoryPath))  						{  							try  							{  								Directory.CreateDirectory(directoryPath);  							}  							catch  							{  							}  						}  					}    					retval = true;  				}  				else  				{  					retval = false;  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,BackupAsync,The following statement contains a magic number: using (var connection = (await this.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)))  			{  				using (var otherConnection = (await sqlDatabaseContext.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)))  				{  					this.GetSqliteConnection(connection).BackupDatabase(this.GetSqliteConnection(otherConnection)' "main"' "main"' -1' null' 1000);  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,BackupAsync,The following statement contains a magic number: using (var connection = (await this.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)))  			{  				using (var otherConnection = (await sqlDatabaseContext.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)))  				{  					this.GetSqliteConnection(connection).BackupDatabase(this.GetSqliteConnection(otherConnection)' "main"' "main"' -1' null' 1000);  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,BackupAsync,The following statement contains a magic number: using (var connection = (await this.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)))  			{  				using (var otherConnection = (await sqlDatabaseContext.OpenConnectionAsync(cancellationToken).ConfigureAwait(false)))  				{  					this.GetSqliteConnection(connection).BackupDatabase(this.GetSqliteConnection(otherConnection)' "main"' "main"' -1' null' 1000);  				}  			}
Magic Number,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,GetQueryParams,The following statement contains a magic number: return matches.Cast<Match>().ToDictionary(  				m => Uri.UnescapeDataString(m.Groups[2].Value)'  				m => Uri.UnescapeDataString(m.Groups[3].Value)' StringComparer.CurrentCultureIgnoreCase);
Magic Number,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,GetQueryParams,The following statement contains a magic number: return matches.Cast<Match>().ToDictionary(  				m => Uri.UnescapeDataString(m.Groups[2].Value)'  				m => Uri.UnescapeDataString(m.Groups[3].Value)' StringComparer.CurrentCultureIgnoreCase);
Magic Number,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,SqliteOfficialSqlDatabaseContext,The following statement contains a magic number: if (this.FileName != null)  			{  				Version version;  				var versionString = SQLiteConnection.SQLiteVersion;    				if (Version.TryParse(versionString' out version))  				{  					if (version < new Version(3' 7' 7))  					{  						bool isInMemory;  						var uri = contextInfo.FileName;    						Logger.WarnFormat("Sqlite version {0} does not support URIs"' versionString);    						uri = ConvertNewStyleUriToOldStyleUri(uri' out isInMemory);    						this.IsInMemoryConnection = isInMemory;  						this.IsSharedCacheConnection = false;  						this.FileName = uri;  					}  				}  				else  				{  					Logger.WarnFormat("Cannot parse sqlite version: {0}"' versionString);  				}    				var connectionStringBuilder = new SQLiteConnectionStringBuilder  				{  					FullUri = this.FileName'  					Enlist = false'  					ForeignKeys = true'  					DateTimeKind = contextInfo.DateTimeKind  				};  				  				this.ConnectionString = connectionStringBuilder.ConnectionString;  			}  			else  			{  				this.ConnectionString = contextInfo.ConnectionString;  			}
Magic Number,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,SqliteOfficialSqlDatabaseContext,The following statement contains a magic number: if (this.FileName != null)  			{  				Version version;  				var versionString = SQLiteConnection.SQLiteVersion;    				if (Version.TryParse(versionString' out version))  				{  					if (version < new Version(3' 7' 7))  					{  						bool isInMemory;  						var uri = contextInfo.FileName;    						Logger.WarnFormat("Sqlite version {0} does not support URIs"' versionString);    						uri = ConvertNewStyleUriToOldStyleUri(uri' out isInMemory);    						this.IsInMemoryConnection = isInMemory;  						this.IsSharedCacheConnection = false;  						this.FileName = uri;  					}  				}  				else  				{  					Logger.WarnFormat("Cannot parse sqlite version: {0}"' versionString);  				}    				var connectionStringBuilder = new SQLiteConnectionStringBuilder  				{  					FullUri = this.FileName'  					Enlist = false'  					ForeignKeys = true'  					DateTimeKind = contextInfo.DateTimeKind  				};  				  				this.ConnectionString = connectionStringBuilder.ConnectionString;  			}  			else  			{  				this.ConnectionString = contextInfo.ConnectionString;  			}
Magic Number,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,SqliteOfficialSqlDatabaseContext,The following statement contains a magic number: if (this.FileName != null)  			{  				Version version;  				var versionString = SQLiteConnection.SQLiteVersion;    				if (Version.TryParse(versionString' out version))  				{  					if (version < new Version(3' 7' 7))  					{  						bool isInMemory;  						var uri = contextInfo.FileName;    						Logger.WarnFormat("Sqlite version {0} does not support URIs"' versionString);    						uri = ConvertNewStyleUriToOldStyleUri(uri' out isInMemory);    						this.IsInMemoryConnection = isInMemory;  						this.IsSharedCacheConnection = false;  						this.FileName = uri;  					}  				}  				else  				{  					Logger.WarnFormat("Cannot parse sqlite version: {0}"' versionString);  				}    				var connectionStringBuilder = new SQLiteConnectionStringBuilder  				{  					FullUri = this.FileName'  					Enlist = false'  					ForeignKeys = true'  					DateTimeKind = contextInfo.DateTimeKind  				};  				  				this.ConnectionString = connectionStringBuilder.ConnectionString;  			}  			else  			{  				this.ConnectionString = contextInfo.ConnectionString;  			}
Magic Number,Shaolinq.Sqlite,SqliteOfficialSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,Backup,The following statement contains a magic number: using (var connection = this.OpenConnection())  			{  				using (var otherConnection = sqlDatabaseContext.OpenConnection())  				{  					this.GetSqliteConnection(connection).BackupDatabase(this.GetSqliteConnection(otherConnection)' "main"' "main"' -1' null' 1000);  				}  			}
Duplicate Code,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((45' 75)' (78' 108))
Duplicate Code,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((45' 75)' (78' 108))
Duplicate Code,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((45' 75)' (78' 108))
Duplicate Code,Shaolinq.Sqlite,SqliteSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\GeneratedAsync.cs,CreateDatabaseOnly,The method contains a code clone-set at the following line numbers (starting from the method definition): ((50' 82)' (85' 117))
Missing Default,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,WriteDeferrability,The following switch statement is missing a default case: switch (deferrability)  			{  				case SqlColumnReferenceDeferrability.Deferrable:  					this.Write(" DEFERRABLE");  					break;  				case SqlColumnReferenceDeferrability.InitiallyDeferred:  					this.Write(" DEFERRABLE INITIALLY DEFERRED");  					break;  				case SqlColumnReferenceDeferrability.InitiallyImmediate:  					this.Write(" DEFERRABLE INITIALLY IMMEDIATE");  					break;  			}
Missing Default,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,ResolveSqlFunction,The following switch statement is missing a default case: switch (function)  			{  			case SqlFunction.ServerUtcNow:  				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%Y-%m-%d %H:%M:%f0000"' "now")' null' arguments);  			case SqlFunction.Concat:  				return new FunctionResolveResult("||"' true' arguments);  			case SqlFunction.ServerNow:  				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%Y-%m-%d %H:%M:%f0000"' "now"' "localtime")' null' arguments);  			case SqlFunction.TimeSpanFromSeconds:  				return new FunctionResolveResult(""' false' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[0]' Expression.Constant(" seconds")))  				{  					excludeParenthesis = true  				};  			case SqlFunction.TimeSpanFromMinutes:  				return new FunctionResolveResult(""' false' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[0]' Expression.Constant(" minutes")))  				{  					excludeParenthesis = true  				};  			case SqlFunction.TimeSpanFromHours:  				return new FunctionResolveResult(""' false' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[0]' Expression.Constant(" hours")))  				{  					excludeParenthesis = true  				};  			case SqlFunction.TimeSpanFromDays:  				return new FunctionResolveResult(""' false' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[0]' Expression.Constant(" days")))  				{  					excludeParenthesis = true  				};  			case SqlFunction.DateTimeAddDays:  				return new FunctionResolveResult("STRFTIME"' false' Expression.Constant("%Y-%m-%d %H:%M:%f0000")' arguments[0]' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[1]' Expression.Constant(" days")));  			case SqlFunction.DateTimeAddMonths:  				return new FunctionResolveResult("STRFTIME"' false' Expression.Constant("%Y-%m-%d %H:%M:%f0000")' arguments[0]' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[1]' Expression.Constant(" months")));  			case SqlFunction.DateTimeAddYears:  				return new FunctionResolveResult("STRFTIME"' false' Expression.Constant("%Y-%m-%d %H:%M:%f0000")' arguments[0]' new SqlFunctionCallExpression(typeof(string)' SqlFunction.Concat' arguments[1]' Expression.Constant(" years")));  			case SqlFunction.DateTimeAddTimeSpan:  				return new FunctionResolveResult("STRFTIME"' false' Expression.Constant("%Y-%m-%d %H:%M:%f0000")' arguments[0]' arguments[1]);  			case SqlFunction.Year:  				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%Y")' null' arguments);  			case SqlFunction.Month:  				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%m")' null' arguments);  			case SqlFunction.Week:  				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%W")' null' arguments);  			case SqlFunction.DayOfYear:  				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%j")' null' arguments);  			case SqlFunction.DayOfMonth:  				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%d")' null' arguments);  			case SqlFunction.DayOfWeek:  				return new FunctionResolveResult("STRFTIME"' false' FunctionResolveResult.MakeArguments("%w")' null' arguments);  			case SqlFunction.Substring:  				return new FunctionResolveResult("SUBSTR"' false' arguments);  			case SqlFunction.TrimLeft:  				return new FunctionResolveResult("LTRIM"' false' arguments);  			case SqlFunction.TrimRight:  				return new FunctionResolveResult("RTRIM"' false' arguments);  			case SqlFunction.StringLength:  				return new FunctionResolveResult("LENGTH"' false' arguments);  			}
Missing Default,Shaolinq.Sqlite,SqliteSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.Sqlite\SqliteSqlQueryFormatter.cs,VisitConstant,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))  			{  			case TypeCode.Boolean:  				if ((this.options & SqlQueryFormatterOptions.EvaluateConstants) != 0)  				{  					this.Write(this.FormatConstant(Convert.ToInt32(constantExpression.Value)));  				}  				else  				{  					this.Write(this.ParameterIndicatorPrefix);  					this.Write(ParamNamePrefix);  					this.Write(this.parameterValues.Count);  					this.parameterValues.Add(new TypedValue(typeof(int)' constantExpression.Value' c => Convert.ToInt32(c)));  				}    				return constantExpression;  			}
