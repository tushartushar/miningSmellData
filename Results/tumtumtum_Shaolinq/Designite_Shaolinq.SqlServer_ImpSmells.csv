Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Shaolinq.SqlServer,SqlServerConfiguration,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerConfiguration.cs,Create,The method has 5 parameters. Parameters: databaseName' serverName' userName' password' deleteDatabaseDropsTablesOnly
Long Parameter List,Shaolinq.SqlServer,SqlServerConfiguration,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerConfiguration.cs,Create,The method has 7 parameters. Parameters: databaseName' serverName' userName' password' categories' deleteDatabaseDropsTablesOnly' multipleActiveResultsets
Long Parameter List,Shaolinq.SqlServer,SqlServerSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlQueryFormatter.cs,SqlServerSqlQueryFormatter,The method has 5 parameters. Parameters: options' sqlDialect' sqlDataTypeProvider' typeDescriptorProvider' contextInfo
Long Identifier,Shaolinq.SqlServer,SqlServerDecimalDataType,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDecimalDataType.cs,SqlServerDecimalDataType,The length of the parameter constraintDefaultsConfiguration is 31.
Long Identifier,Shaolinq.SqlServer,SqlServerSqlDataTypeProvider,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlDataTypeProvider.cs,SqlServerSqlDataTypeProvider,The length of the parameter constraintDefaultsConfiguration is 31.
Long Identifier,Shaolinq.SqlServer,SqlServerStringSqlDataType,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerStringDateTimeType.cs,SqlServerStringSqlDataType,The length of the parameter constraintDefaultsConfiguration is 31.
Long Identifier,Shaolinq.SqlServer,SqlServerUniqueNullIndexAnsiComplianceFixer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerUniqueNullIndexAnsiComplianceFixer.cs,SqlServerUniqueNullIndexAnsiComplianceFixer,The length of the parameter explicitIndexConditionOverridesNullAnsiCompliance is 49.
Long Identifier,Shaolinq.SqlServer,SqlServerUniqueNullIndexAnsiComplianceFixer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerUniqueNullIndexAnsiComplianceFixer.cs,Fix,The length of the parameter explicitIndexConditionOverridesNullAnsiCompliance is 49.
Long Identifier,Shaolinq.SqlServer,SqlServerUniqueNullIndexAnsiComplianceFixer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerUniqueNullIndexAnsiComplianceFixer.cs,,The length of the parameter explicitIndexConditionOverridesNullAnsiCompliance is 49.
Long Statement,Shaolinq.SqlServer,BitBooleanExpression,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\BitBooleanExpression.cs,Coerce,The length of the statement  "			var retval = new BitBooleanExpression(Condition(expression' new BitBooleanExpression(Constant(true' nullable ? typeof(bool?) : typeof(bool)))' new BitBooleanExpression(Constant(false' nullable ? typeof(bool?) : typeof(bool))))); " is 228.
Long Statement,Shaolinq.SqlServer,DisabledForeignKeyCheckContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\DisabledForeignKeyCheckContext.cs,Dispose,The length of the statement  "			// LogicalNot Azure compatible - command.CommandText = "exec sp_msforeachtable @command1=\"print '?'\"' @command2=\"ALTER TABLE ? WITH CHECK CHECK CONSTRAINT all\";"; " is 166.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "			var deleteDatabaseDropsTablesOnly = ((SqlServerSqlDatabaseContext)this.SqlDatabaseContext).DeleteDatabaseDropsTablesOnly; " is 121.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "					connection.ConnectionString = deleteDatabaseDropsTablesOnly ? this.SqlDatabaseContext.ConnectionString : this.SqlDatabaseContext.ServerConnectionString; " is 152.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "								command.CommandTimeout = Math.Min((int)(this.SqlDatabaseContext.CommandTimeout?.TotalSeconds ?? SqlDatabaseContextInfo.DefaultCommandTimeout)' 300); " is 148.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "								command.CommandText = $"IF NOT EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') CREATE DATABASE [{databaseName}];"; " is 133.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "								command.CommandText = $"IF EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') DROP DATABASE [{databaseName}];"; " is 127.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "							command.CommandText = $"IF EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') DROP DATABASE [{databaseName}];"; " is 127.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "							await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						command.CommandText = $"ALTER DATABASE [{databaseName}] SET ALLOW_SNAPSHOT_ISOLATION {(context.AllowSnapshotIsolation ? "ON" : "OFF")};"; " is 137.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						command.CommandText = $"ALTER DATABASE [{databaseName}] SET READ_COMMITTED_SNAPSHOT {(context.ReadCommittedSnapshot ? "ON" : "OFF")};"; " is 135.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The length of the statement  "						await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false); " is 125.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnly,The length of the statement  "			var deleteDatabaseDropsTablesOnly = ((SqlServerSqlDatabaseContext)this.SqlDatabaseContext).DeleteDatabaseDropsTablesOnly; " is 121.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnly,The length of the statement  "					connection.ConnectionString = deleteDatabaseDropsTablesOnly ? this.SqlDatabaseContext.ConnectionString : this.SqlDatabaseContext.ServerConnectionString; " is 152.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnly,The length of the statement  "								command.CommandTimeout = Math.Min((int)(this.SqlDatabaseContext.CommandTimeout?.TotalSeconds ?? SqlDatabaseContextInfo.DefaultCommandTimeout)' 300); " is 148.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnly,The length of the statement  "								command.CommandText = $"IF NOT EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') CREATE DATABASE [{databaseName}];"; " is 133.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnly,The length of the statement  "								command.CommandText = $"IF EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') DROP DATABASE [{databaseName}];"; " is 127.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnly,The length of the statement  "							command.CommandText = $"IF EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') DROP DATABASE [{databaseName}];"; " is 127.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnly,The length of the statement  "						command.CommandText = $"ALTER DATABASE [{databaseName}] SET ALLOW_SNAPSHOT_ISOLATION {(context.AllowSnapshotIsolation ? "ON" : "OFF")};"; " is 137.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnly,The length of the statement  "						command.CommandText = $"ALTER DATABASE [{databaseName}] SET READ_COMMITTED_SNAPSHOT {(context.ReadCommittedSnapshot ? "ON" : "OFF")};"; " is 135.
Long Statement,Shaolinq.SqlServer,SqlServerBooleanNormalizer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerBooleanNormalizer.cs,VisitUnary,The length of the statement  "					return Expression.MakeUnary(unaryExpression.NodeType' Expression.Equal(operand' Expression.Constant(true' operand.Type))' typeof(bool)); " is 136.
Long Statement,Shaolinq.SqlServer,SqlServerBooleanNormalizer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerBooleanNormalizer.cs,VisitUnary,The length of the statement  "					return Expression.MakeUnary(unaryExpression.NodeType' Expression.Equal(operand' Expression.Constant(true' operand.Type))' typeof(bool)); " is 136.
Long Statement,Shaolinq.SqlServer,SqlServerBooleanNormalizer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerBooleanNormalizer.cs,VisitBinary,The length of the statement  "				return Expression.MakeBinary(binaryExpression.NodeType' left' right' binaryExpression.IsLiftedToNull' binaryExpression.Method); " is 127.
Long Statement,Shaolinq.SqlServer,SqlServerBooleanNormalizer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerBooleanNormalizer.cs,VisitSelect,The length of the statement  "		        if (visitedColumnExpression.Type.GetUnwrappedNullableType() == typeof(bool) && !(visitedColumnExpression is BitBooleanExpression)) " is 130.
Long Statement,Shaolinq.SqlServer,SqlServerBooleanNormalizer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerBooleanNormalizer.cs,VisitSelect,The length of the statement  "			if (from != selectExpression.From || where != selectExpression.Where || newColumns != selectExpression.Columns || orderBy != selectExpression.OrderBy || groupBy != selectExpression.GroupBy || take != selectExpression.Take || skip != selectExpression.Skip) " is 255.
Long Statement,Shaolinq.SqlServer,SqlServerBooleanNormalizer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerBooleanNormalizer.cs,VisitSelect,The length of the statement  "				return new SqlSelectExpression(selectExpression.Type' selectExpression.Alias' newColumns ?? selectExpression.Columns' from' where' orderBy' groupBy' selectExpression.Distinct' skip' take' selectExpression.ForUpdate' selectExpression.Reverse' selectExpression.Into); " is 265.
Long Statement,Shaolinq.SqlServer,SqlServerClusteredIndexNormalizer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerClusteredIndexNormalizer.cs,VisitCreateTable,The length of the statement  "			var indexExpression = new SqlCreateIndexExpression(organizationIndex.IndexName' createTableExpression.Table' false' false' IndexType.Default' false' organizationIndex.Columns' null' null' true); " is 194.
Long Statement,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The length of the statement  "				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))); " is 189.
Long Statement,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The length of the statement  "				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)))); " is 198.
Long Statement,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The length of the statement  "				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)))); " is 191.
Long Statement,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The length of the statement  "				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)))); " is 184.
Long Statement,Shaolinq.SqlServer,SqlServerIdentityInsertAndUpdateAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerIdentityInsertAndUpdateAmender.cs,VisitUpdate,The length of the statement  "				.Select(c => new { name = ((SqlColumnExpression)c.Target).Name' value = c.Value' propertyDescriptor = typeDescriptor.GetPropertyDescriptorByColumnName(((SqlColumnExpression)c.Target).Name) }) " is 191.
Long Statement,Shaolinq.SqlServer,SqlServerIdentityInsertAndUpdateAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerIdentityInsertAndUpdateAmender.cs,VisitUpdate,The length of the statement  "				.GetColumnInfos(this.typeDescriptorProvider' typeDescriptor.PersistedProperties.Where(c => insertedColumns.All(d => d.propertyDescriptor != c))) " is 144.
Long Statement,Shaolinq.SqlServer,SqlServerIdentityInsertAndUpdateAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerIdentityInsertAndUpdateAmender.cs,VisitUpdate,The length of the statement  "				.Concat(insertedColumns.Select(d => d.value.Type.GetUnwrappedNullableType() == typeof(bool) ? new SqlColumnDeclaration(d.name' new BitBooleanExpression(d.value)) : new SqlColumnDeclaration(d.name' d.value))) " is 207.
Long Statement,Shaolinq.SqlServer,SqlServerIdentityInsertAndUpdateAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerIdentityInsertAndUpdateAmender.cs,VisitUpdate,The length of the statement  "			var insertExpression = new SqlInsertIntoExpression(visitedUpdated.Source' columnInfos.Select(c => c.GetColumnName()).Concat(insertedColumns.Select(c => c.name)).ToReadOnlyCollection()' null' selectExpression' null' true); " is 221.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "					.Select(c => new SqlColumnDeclaration(c.Name' new SqlColumnExpression(c.Expression.Type' selectExpression.Alias' c.Name))) " is 122.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "					.Select((c' i) => new SqlColumnDeclaration(orderByColumnPrefix + i' c.Expression)) ?? Enumerable.Empty<SqlColumnDeclaration>(); " is 127.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "								return new SqlOrderByExpression(c.OrderType' new SqlColumnExpression(c.Type' selectExpression.Alias' ((SqlColumnExpression)c.Expression).Name)); " is 144.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "								return new SqlOrderByExpression(c.OrderType' new SqlColumnExpression(c.Type' selectExpression.Alias' orderByColumnPrefix + i++)); " is 129.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "					over = new SqlOverExpression(rowNumber' cols.Select(c => new SqlOrderByExpression(OrderType.Ascending' c.Expression)).ToReadOnlyCollection()); " is 142.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "				var innerSelect = orderByCols == null ? selectExpression : selectExpression.ChangeColumns(selectExpression.Columns.Concat(orderByCols)); " is 136.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "				var selectWithRow = new SqlSelectExpression(selectExpression.Type' selectWithRowAlias' selectWithRowColumns' this.Visit(innerSelect.ChangeOrderBy(null).ChangeSkipTake(null' null))' null' null' null' false' null' null' false); " is 225.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "				var outerColumns = selectExpression.Columns.Select(c => new SqlColumnDeclaration(c.Name' new SqlColumnExpression(c.Expression.Type' selectWithRowAlias' c.Name))); " is 162.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "				Expression rowPredicate = Expression.GreaterThan(new SqlColumnExpression(typeof(int)' selectWithRowAlias' rowColumn.Name)' selectExpression.Skip); " is 146.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "						Expression.LessThanOrEqual(new SqlColumnExpression(typeof(int)' selectWithRowAlias' rowColumn.Name)' Expression.Add(selectExpression.Skip' selectExpression.Take)) " is 162.
Long Statement,Shaolinq.SqlServer,SqlServerLimitAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerLimitAmender.cs,VisitSelect,The length of the statement  "				var retval = new SqlSelectExpression(selectExpression.Type' selectExpression.Alias' outerColumns.ToReadOnlyCollection()' selectWithRow' rowPredicate' null' null' selectExpression.Distinct' null' null' selectExpression.ForUpdate' selectExpression.Reverse' selectExpression.Into); " is 278.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlDatabaseContext.cs,Create,The length of the statement  "			var sqlDataTypeProvider = CreateSqlDataTypeProvider(model' contextInfo' () => new SqlServerSqlDataTypeProvider(constraintDefaults)); " is 132.
Long Statement,Shaolinq.SqlServer,SqlServerSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlDatabaseContext.cs,Create,The length of the statement  "			var sqlQueryFormatterManager = new DefaultSqlQueryFormatterManager(sqlDialect' model.Configuration.NamingTransforms' options => new SqlServerSqlQueryFormatter(options' sqlDialect' sqlDataTypeProvider' typeDescriptorProvider' contextInfo)); " is 239.
Long Statement,Shaolinq.SqlServer,SqlServerSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlQueryFormatter.cs,ResolveSqlFunction,The length of the statement  "					return new FunctionResolveResult("SUBSTRING"' false' arguments.Concat(Expression.Constant(Int32.MaxValue)).ToReadOnlyCollection()); " is 131.
Long Statement,Shaolinq.SqlServer,SqlServerSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlQueryFormatter.cs,PreProcess,The length of the statement  "			expression = SqlServerUniqueNullIndexAnsiComplianceFixer.Fix(expression' this.contextInfo.UniqueNullIndexAnsiComplianceFixerClassicBehaviour' this.contextInfo.ExplicitIndexConditionOverridesNullAnsiCompliance); " is 210.
Long Statement,Shaolinq.SqlServer,SqlServerUniqueNullIndexAnsiComplianceFixer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerUniqueNullIndexAnsiComplianceFixer.cs,Fix,The length of the statement  "			return new SqlServerUniqueNullIndexAnsiComplianceFixer(fixNonUniqueIndexesAsWell' explicitIndexConditionOverridesNullAnsiCompliance).Visit(expression); " is 151.
Long Statement,Shaolinq.SqlServer,SqlServerUniqueNullIndexAnsiComplianceFixer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerUniqueNullIndexAnsiComplianceFixer.cs,VisitCreateIndex,The length of the statement  "			return createIndexExpression.ChangeWhere(createIndexExpression.Where == null ? predicate : Expression.And(createIndexExpression.Where' predicate)); " is 147.
Complex Conditional,Shaolinq.SqlServer,SqlServerBooleanNormalizer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerBooleanNormalizer.cs,VisitBinary,The conditional expression  "(binaryExpression.NodeType == ExpressionType.Or  				 || binaryExpression.NodeType == ExpressionType.And  				 || binaryExpression.NodeType == ExpressionType.OrElse  				 || binaryExpression.NodeType == ExpressionType.AndAlso)  				&& binaryExpression.Type.GetUnwrappedNullableType() == typeof(bool)"  is complex.
Complex Conditional,Shaolinq.SqlServer,SqlServerBooleanNormalizer,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerBooleanNormalizer.cs,VisitSelect,The conditional expression  "from != selectExpression.From || where != selectExpression.Where || newColumns != selectExpression.Columns || orderBy != selectExpression.OrderBy || groupBy != selectExpression.GroupBy || take != selectExpression.Take || skip != selectExpression.Skip"  is complex.
Virtual Method Call from Constructor,Shaolinq.SqlServer,DisabledForeignKeyCheckContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\DisabledForeignKeyCheckContext.cs,DisabledForeignKeyCheckContext,The constructor "DisabledForeignKeyCheckContext" calls a virtual method "CreateCommand".
Magic Number,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnlyAsync,The following statement contains a magic number: using (var connection = factory.CreateConnection())  			{  				if (connection == null)  				{  					throw new InvalidOperationException($"Unable to create connection from {factory}");  				}    				try  				{  					var databaseName = this.SqlDatabaseContext.DatabaseName.Trim();  					var context = (SqlServerSqlDatabaseContext)this.SqlDatabaseContext;  					connection.ConnectionString = deleteDatabaseDropsTablesOnly ? this.SqlDatabaseContext.ConnectionString : this.SqlDatabaseContext.ServerConnectionString;  					await connection.OpenAsync(cancellationToken).ConfigureAwait(false);  					using (var command = (SqlCommand)connection.CreateCommand())  					{  						if (options == DatabaseCreationOptions.DeleteExistingDatabase)  						{  							if (deleteDatabaseDropsTablesOnly)  							{  								command.CommandTimeout = Math.Min((int)(this.SqlDatabaseContext.CommandTimeout?.TotalSeconds ?? SqlDatabaseContextInfo.DefaultCommandTimeout)' 300);  								command.CommandText = @"  									WHILE(exists(select 1 from INFORMATION_SCHEMA.TABLE_CONSTRAINTS where CONSTRAINT_TYPE='FOREIGN KEY'))  									BEGIN  										DECLARE @sql nvarchar(2000)  										SELECT TOP 1 @sql=('ALTER TABLE ' + TABLE_SCHEMA + '.[' + TABLE_NAME + '] DROP CONSTRAINT [' + CONSTRAINT_NAME + ']')  										FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'FOREIGN KEY'  										EXEC (@sql)  									END  								";  								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false);  								command.CommandText = @"  									WHILE(exists(select 1 from INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA != 'sys' AND TABLE_TYPE = 'BASE TABLE'))  									BEGIN  										declare @sql nvarchar(2000)  										SELECT TOP 1 @sql=('DROP TABLE ' + TABLE_SCHEMA + '.[' + TABLE_NAME + ']')  										FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA != 'sys' AND TABLE_TYPE = 'BASE TABLE'  										EXEC (@sql)  									END  								";  								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false);  								command.CommandText = $"IF NOT EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') CREATE DATABASE [{databaseName}];";  								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false);  							}  							else  							{  								command.CommandText = $"IF EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') DROP DATABASE [{databaseName}];";  								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false);  								command.CommandText = $"CREATE DATABASE [{databaseName}];";  								await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false);  							}  						}  						else  						{  							command.CommandText = $"IF EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') DROP DATABASE [{databaseName}];";  							command.CommandText = $"CREATE DATABASE [{databaseName}];";  							await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false);  						}    						command.CommandText = $"ALTER DATABASE [{databaseName}] SET ALLOW_SNAPSHOT_ISOLATION {(context.AllowSnapshotIsolation ? "ON" : "OFF")};";  						await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false);  						command.CommandText = $"ALTER DATABASE [{databaseName}] SET READ_COMMITTED_SNAPSHOT {(context.ReadCommittedSnapshot ? "ON" : "OFF")};";  						await command.ExecuteNonQueryExAsync(this.SqlDatabaseContext.DataAccessModel' cancellationToken' true).ConfigureAwait(false);  						return true;  					}  				}  				catch (Exception e)  				{  					Logger.Log(Logging.LogLevel.Error' () => "Exception creating database: " + e);  					throw;  				}  			}
Magic Number,Shaolinq.SqlServer,SqlServerSqlDatabaseSchemaManager,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\GeneratedAsync.cs,CreateDatabaseOnly,The following statement contains a magic number: using (var connection = factory.CreateConnection())  			{  				if (connection == null)  				{  					throw new InvalidOperationException($"Unable to create connection from {factory}");  				}    				try  				{  					var databaseName = this.SqlDatabaseContext.DatabaseName.Trim();  					var context = (SqlServerSqlDatabaseContext)this.SqlDatabaseContext;  					  					connection.ConnectionString = deleteDatabaseDropsTablesOnly ? this.SqlDatabaseContext.ConnectionString : this.SqlDatabaseContext.ServerConnectionString;  					connection.Open();    					using (var command = (SqlCommand)connection.CreateCommand())  					{  						if (options == DatabaseCreationOptions.DeleteExistingDatabase)  						{  							if (deleteDatabaseDropsTablesOnly)  							{  								command.CommandTimeout = Math.Min((int)(this.SqlDatabaseContext.CommandTimeout?.TotalSeconds ?? SqlDatabaseContextInfo.DefaultCommandTimeout)' 300);  								command.CommandText =  								@"  									WHILE(exists(select 1 from INFORMATION_SCHEMA.TABLE_CONSTRAINTS where CONSTRAINT_TYPE='FOREIGN KEY'))  									BEGIN  										DECLARE @sql nvarchar(2000)  										SELECT TOP 1 @sql=('ALTER TABLE ' + TABLE_SCHEMA + '.[' + TABLE_NAME + '] DROP CONSTRAINT [' + CONSTRAINT_NAME + ']')  										FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'FOREIGN KEY'  										EXEC (@sql)  									END  								";    								command.ExecuteNonQueryEx(this.SqlDatabaseContext.DataAccessModel' true);    								command.CommandText =  								@"  									WHILE(exists(select 1 from INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA != 'sys' AND TABLE_TYPE = 'BASE TABLE'))  									BEGIN  										declare @sql nvarchar(2000)  										SELECT TOP 1 @sql=('DROP TABLE ' + TABLE_SCHEMA + '.[' + TABLE_NAME + ']')  										FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA != 'sys' AND TABLE_TYPE = 'BASE TABLE'  										EXEC (@sql)  									END  								";    								command.ExecuteNonQueryEx(this.SqlDatabaseContext.DataAccessModel' true);    								command.CommandText = $"IF NOT EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') CREATE DATABASE [{databaseName}];";  								command.ExecuteNonQueryEx(this.SqlDatabaseContext.DataAccessModel' true);  							}  							else  							{  								command.CommandText = $"IF EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') DROP DATABASE [{databaseName}];";  								command.ExecuteNonQueryEx(this.SqlDatabaseContext.DataAccessModel' true);    								command.CommandText = $"CREATE DATABASE [{databaseName}];";  								command.ExecuteNonQueryEx(this.SqlDatabaseContext.DataAccessModel' true);  							}  						}  						else  						{  							command.CommandText = $"IF EXISTS (SELECT 1 FROM sys.databases WHERE NAME = '{databaseName}') DROP DATABASE [{databaseName}];";    							command.CommandText = $"CREATE DATABASE [{databaseName}];";  							command.ExecuteNonQueryEx(this.SqlDatabaseContext.DataAccessModel' true);  						}    						command.CommandText = $"ALTER DATABASE [{databaseName}] SET ALLOW_SNAPSHOT_ISOLATION {(context.AllowSnapshotIsolation ? "ON" : "OFF")};";  						command.ExecuteNonQueryEx(this.SqlDatabaseContext.DataAccessModel' true);    						command.CommandText = $"ALTER DATABASE [{databaseName}] SET READ_COMMITTED_SNAPSHOT {(context.ReadCommittedSnapshot ? "ON" : "OFF")};";  						command.ExecuteNonQueryEx(this.SqlDatabaseContext.DataAccessModel' true);    						return true;  					}  				}  				catch (Exception e)  				{  					Logger.Log(Logging.LogLevel.Error' () => "Exception creating database: " + e);    					throw;  				}  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following statement contains a magic number: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Magic Number,Shaolinq.SqlServer,SqlServerDecimalDataType,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDecimalDataType.cs,ToDecimal,The following statement contains a magic number: if (data[3] != 0 || scale > 28)  			{  				var result = decimal.Parse(value.ToString());    				return result;  			}
Magic Number,Shaolinq.SqlServer,SqlServerDecimalDataType,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDecimalDataType.cs,ToDecimal,The following statement contains a magic number: if (data[3] != 0 || scale > 28)  			{  				var result = decimal.Parse(value.ToString());    				return result;  			}
Magic Number,Shaolinq.SqlServer,SqlServerDecimalDataType,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDecimalDataType.cs,ToDecimal,The following statement contains a magic number: return new decimal(data[0]' data[1]' data[2]' !value.IsPositive' scale);
Magic Number,Shaolinq.SqlServer,SqlServerSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlDatabaseContext.cs,DecorateException,The following statement contains a magic number: if (sqlException != null)  			{  				switch (sqlException.Number)  				{  				case 2601: // Unique index  				case 2627: // Unique constraint  					return new UniqueConstraintException(exception' relatedQuery);  				case 547:  					return new MissingRelatedDataAccessObjectException(null' dataAccessObject' exception' relatedQuery);  				case 515:  					return new MissingPropertyValueException(dataAccessObject' sqlException' relatedQuery);  				}  			}
Magic Number,Shaolinq.SqlServer,SqlServerSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlDatabaseContext.cs,DecorateException,The following statement contains a magic number: if (sqlException != null)  			{  				switch (sqlException.Number)  				{  				case 2601: // Unique index  				case 2627: // Unique constraint  					return new UniqueConstraintException(exception' relatedQuery);  				case 547:  					return new MissingRelatedDataAccessObjectException(null' dataAccessObject' exception' relatedQuery);  				case 515:  					return new MissingPropertyValueException(dataAccessObject' sqlException' relatedQuery);  				}  			}
Magic Number,Shaolinq.SqlServer,SqlServerSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlDatabaseContext.cs,DecorateException,The following statement contains a magic number: if (sqlException != null)  			{  				switch (sqlException.Number)  				{  				case 2601: // Unique index  				case 2627: // Unique constraint  					return new UniqueConstraintException(exception' relatedQuery);  				case 547:  					return new MissingRelatedDataAccessObjectException(null' dataAccessObject' exception' relatedQuery);  				case 515:  					return new MissingPropertyValueException(dataAccessObject' sqlException' relatedQuery);  				}  			}
Magic Number,Shaolinq.SqlServer,SqlServerSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlDatabaseContext.cs,DecorateException,The following statement contains a magic number: if (sqlException != null)  			{  				switch (sqlException.Number)  				{  				case 2601: // Unique index  				case 2627: // Unique constraint  					return new UniqueConstraintException(exception' relatedQuery);  				case 547:  					return new MissingRelatedDataAccessObjectException(null' dataAccessObject' exception' relatedQuery);  				case 515:  					return new MissingPropertyValueException(dataAccessObject' sqlException' relatedQuery);  				}  			}
Magic Number,Shaolinq.SqlServer,SqlServerSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlQueryFormatter.cs,ResolveSqlFunction,The following statement contains a magic number: switch (function)  			{  			case SqlFunction.ServerUtcNow:  				return new FunctionResolveResult("SYSDATETIME"' false' arguments);  			case SqlFunction.ServerNow:  				return new FunctionResolveResult("SYSUTCDATETIME"' false' arguments);  			case SqlFunction.Substring:  				if (arguments.Count == 2)  				{  					return new FunctionResolveResult("SUBSTRING"' false' arguments.Concat(Expression.Constant(Int32.MaxValue)).ToReadOnlyCollection());  				}  				else  				{  					return new FunctionResolveResult("SUBSTRING"' false' arguments);  				}  			case SqlFunction.StringLength:  				return new FunctionResolveResult("LEN"' false' arguments);  			}
Magic Number,Shaolinq.SqlServer,SqlServerSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlQueryFormatter.cs,VisitConstraint,The following statement contains a magic number: if (constraintOptions != null && constraintOptions.Length == 2 && (constraintOptions[0] as long?) > 0)  			{  				if (constraintOptions[1] as long? == 0)  				{  					constraintOptions[1] = 1L;  				}    				this.Write("(");  				this.WriteDeliminatedListOfItems(constraintOptions' this.Write);  				this.Write(")");  			}
Missing Default,Shaolinq.SqlServer,SqlServerDateTimeFunctionsAmender,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerDateTimeFunctionsAmender.cs,VisitFunctionCall,The following switch statement is missing a default case: switch (functionCallExpression.Function)  			{  			case SqlFunction.TimeSpanFromDays:  				return Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(24 * 60 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double)));  			case SqlFunction.TimeSpanFromHours:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromMinutes:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(60.0 * 10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			case SqlFunction.TimeSpanFromSeconds:  				return this.Visit(Expression.MakeBinary(ExpressionType.Multiply' Expression.Constant(10000000.0)' Expression.Convert(this.Visit(functionCallExpression.Arguments[0])' typeof(double))));  			}
Missing Default,Shaolinq.SqlServer,SqlServerSqlDatabaseContext,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlDatabaseContext.cs,DecorateException,The following switch statement is missing a default case: switch (sqlException.Number)  				{  				case 2601: // Unique index  				case 2627: // Unique constraint  					return new UniqueConstraintException(exception' relatedQuery);  				case 547:  					return new MissingRelatedDataAccessObjectException(null' dataAccessObject' exception' relatedQuery);  				case 515:  					return new MissingPropertyValueException(dataAccessObject' sqlException' relatedQuery);  				}
Missing Default,Shaolinq.SqlServer,SqlServerSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlQueryFormatter.cs,ResolveSqlFunction,The following switch statement is missing a default case: switch (function)  			{  			case SqlFunction.ServerUtcNow:  				return new FunctionResolveResult("SYSDATETIME"' false' arguments);  			case SqlFunction.ServerNow:  				return new FunctionResolveResult("SYSUTCDATETIME"' false' arguments);  			case SqlFunction.Substring:  				if (arguments.Count == 2)  				{  					return new FunctionResolveResult("SUBSTRING"' false' arguments.Concat(Expression.Constant(Int32.MaxValue)).ToReadOnlyCollection());  				}  				else  				{  					return new FunctionResolveResult("SUBSTRING"' false' arguments);  				}  			case SqlFunction.StringLength:  				return new FunctionResolveResult("LEN"' false' arguments);  			}
Missing Default,Shaolinq.SqlServer,SqlServerSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlQueryFormatter.cs,VisitFunctionCall,The following switch statement is missing a default case: switch (functionCallExpression.Function)  			{  			case SqlFunction.Date:  				this.Write("CONVERT(date' ");  				this.Visit(functionCallExpression.Arguments[0]);  				this.Write(")");  				return functionCallExpression;  			case SqlFunction.DateTimeAddDays:  				this.Write("DATEADD(DAY' ");  				this.Visit(functionCallExpression.Arguments[1]);  				this.Write("' ");  				this.Visit(functionCallExpression.Arguments[0]);  				this.Write(")");  				return functionCallExpression;  			case SqlFunction.DateTimeAddMonths:  				this.Write("DATEADD(MONTH' ");  				this.Visit(functionCallExpression.Arguments[1]);  				this.Write("' ");  				this.Visit(functionCallExpression.Arguments[0]);  				this.Write(")");  				return functionCallExpression;  			case SqlFunction.DateTimeAddYears:  				this.Write("DATEADD(YEAR' ");  				this.Visit(functionCallExpression.Arguments[1]);  				this.Write("' ");  				this.Visit(functionCallExpression.Arguments[0]);  				this.Write(")");  				return functionCallExpression;  			case SqlFunction.DateTimeAddTimeSpan:  				this.Write("DATEADD(DAY' ");  				this.Write("CAST(");  				this.Visit(functionCallExpression.Arguments[1]);  				this.Write(" AS BIGINT)");  				this.Write(" / CAST(864000000000 AS BIGINT)");  				this.Write("' DATEADD(MS' ");  				this.Write("CAST(");  				this.Visit(functionCallExpression.Arguments[1]);  				this.Write(" AS BIGINT)");  				this.Write(" / CAST(10000 AS BIGINT) % 86400000' " );  				this.Visit(functionCallExpression.Arguments[0]);  				this.Write("))");  				return functionCallExpression;  			}
Missing Default,Shaolinq.SqlServer,SqlServerSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlQueryFormatter.cs,VisitUnary,The following switch statement is missing a default case: switch (unaryExpression.NodeType)  			{  			case ExpressionType.Convert:  				if (unaryExpression.Type == typeof(double))  				{  					this.Write("CAST(");  					this.Visit(unaryExpression.Operand);  					this.Write(" AS FLOAT)");    					return unaryExpression;  				}  				break;  			}
Missing Default,Shaolinq.SqlServer,SqlServerSqlQueryFormatter,C:\repos\tumtumtum_Shaolinq\src\Shaolinq.SqlServer\SqlServerSqlQueryFormatter.cs,VisitConstant,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))  			{  			case TypeCode.Boolean:  				if ((this.options & SqlQueryFormatterOptions.EvaluateConstants) != 0)  				{  					this.Write(this.FormatConstant(Convert.ToInt32(constantExpression.Value)));  				}  				else  				{  					this.Write(this.ParameterIndicatorPrefix);  					this.Write(ParamNamePrefix);  					this.Write(this.parameterValues.Count);  					this.parameterValues.Add(new TypedValue(typeof(int)' constantExpression.Value' c => Convert.ToInt32(c)));  				}    				return constantExpression;  			}
