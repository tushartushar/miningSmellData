Implementation smell,Namespace,Class,File,Method,Description
Long Statement,StructureMap.AutoFactory,DefaultAutoFactoryConventionProvider,D:\research\architectureSmells\repos1\structuremap_structuremap\src\StructureMap.AutoFactory\DefaultAutoFactoryConventionProvider.cs,GetMethodDefinition,The length of the statement  "                return new AutoFactoryMethodDefinition(AutoFactoryMethodType.GetNames' methodInfo.GetGenericArguments().First()' null' null); " is 125.
Complex Conditional,StructureMap.AutoFactory,DefaultAutoFactoryConventionProvider,D:\research\architectureSmells\repos1\structuremap_structuremap\src\StructureMap.AutoFactory\DefaultAutoFactoryConventionProvider.cs,GetMethodDefinition,The conditional expression  "methodInfo.Name.StartsWith("GetNames"' StringComparison.OrdinalIgnoreCase)                  && methodInfo.IsGenericMethod                  && methodInfo.GetGenericArguments().Any()                  && methodInfo.ReturnType.IsAssignableFrom(typeof(List<string>))"  is complex.
Missing Default,StructureMap.AutoFactory,FactoryInterceptor,D:\research\architectureSmells\repos1\structuremap_structuremap\src\StructureMap.AutoFactory\FactoryInterceptor.cs,Intercept,The following switch statement is missing a default case: switch (methodDefinition.MethodType)              {                  case AutoFactoryMethodType.GetInstance:                      var explicitArguments = methodDefinition.ExplicitArguments ?? new ExplicitArguments();                      invocation.ReturnValue = !string.IsNullOrEmpty(methodDefinition.InstanceName)                          ? _container.TryGetInstance(methodDefinition.InstanceType' explicitArguments' methodDefinition.InstanceName)                          : _container.TryGetInstance(methodDefinition.InstanceType' explicitArguments);                      break;                    case AutoFactoryMethodType.GetNames:                      invocation.ReturnValue = _container.Model.AllInstances                          .Where(x => x.PluginType == methodDefinition.InstanceType)                          .Select(x => x.Instance.HasExplicitName() ? x.Name : string.Empty)                          .ToList();                      break;              }
