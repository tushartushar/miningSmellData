Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeSentenceDetectionTraining,Cyclomatic complexity of the method is 8
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeSentenceDetectionTraining,The length of the statement  "	int directoryIndexPicked = LoopUntilValidUserInput (input => int.Parse (input)' i => i < allDirectories.Length' string.Format ("Please enter a number in [0..{0}]"' allDirectories.Length - 1)); " is 192.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeSentenceDetectionTraining,The length of the statement  "	var iterations = LoopUntilValidUserInput (input => input.Split (''').Select (s => int.Parse (s.Trim ())).ToList ()' li => li != null && li.Any ()' "At least one iteration value is required"); " is 191.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeSentenceDetectionTraining,The length of the statement  "	var cuts = LoopUntilValidUserInput (input => input.Split (''').Select (s => int.Parse (s.Trim ())).ToList ()' li => li != null && li.Any ()' "At least one cut value is required"); " is 179.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeSentenceDetectionTraining,The length of the statement  "	Console.WriteLine ("Training model with files {0}"' string.Join ("' "' allTrainFiles.Select (f => Path.GetFileNameWithoutExtension (f)))); " is 138.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeSentenceDetectionTraining,The length of the statement  "	Console.WriteLine ("Persisting model for iteration={0} and cut={1} to file '{2}'..."' bestIterationValue' bestCutValue' outputFilePath); " is 136.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeSentenceDetectionTraining,The length of the statement  "	var bestModel = MaximumEntropySentenceDetector.TrainModel (allTrainFiles' bestIterationValue' bestCutValue' endOfSentenceScanner); " is 130.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeTokenizerTraining,The length of the statement  "	int directoryIndexPicked = LoopUntilValidUserInput (input => int.Parse (input)' i => i < allDirectories.Length' string.Format ("Please enter a number in [0..{0}]"' allDirectories.Length - 1)); " is 192.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeTokenizerTraining,The length of the statement  "	var iterations = LoopUntilValidUserInput (input => input.Split (''').Select (s => int.Parse (s.Trim ())).ToList ()' li => li != null && li.Any ()' "At least one iteration value is required"); " is 191.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeTokenizerTraining,The length of the statement  "	var cuts = LoopUntilValidUserInput (input => input.Split (''').Select (s => int.Parse (s.Trim ())).ToList ()' li => li != null && li.Any ()' "At least one cut value is required"); " is 179.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeTokenizerTraining,The length of the statement  "	Console.WriteLine ("Training model with files: {0}"' string.Join ("' "' allTrainFiles.Select (f => Path.GetFileNameWithoutExtension (f)))); " is 139.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeTokenizerTraining,The length of the statement  "			var model = MaximumEntropyTokenizer.Train (allTrainFiles' iteration' cut' includeAllCapsExamples: includeAllCapsExamples); " is 122.
Long Statement,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeTokenizerTraining,The length of the statement  "	Console.WriteLine ("Persisting model for iteration={0} and cut={1} to file '{2}'..."' bestIterationValue' bestCutValue' outputFilePath); " is 136.
Magic Number,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeSentenceDetectionTraining,The following statement contains a magic number: foreach (var iteration in iterations) {  	foreach (var cut in cuts) {  		var model = MaximumEntropySentenceDetector.TrainModel (allTrainFiles' iteration' cut' endOfSentenceScanner);  		// compute accuracy  		var sentenceDetector = new MaximumEntropySentenceDetector (model' endOfSentenceScanner);  		var results = sentenceDetector.SentenceDetect (testData);  		// not perfect for comparing files but it gives a very good approximation  		//var commonValues = allSentences.Intersect(results).Count();  		var nbOfCommonSentences = 0;  		foreach (var result in results) {  			if (allSentences.Contains (result)) {  				nbOfCommonSentences++;  			} else {  				//Console.WriteLine(result);  			}  		}  		var accuracyScore = (float)2 * nbOfCommonSentences / (allSentences.Count + results.Count ());  		Console.WriteLine ("Accuracy for iteration={0} and cut={1}: {2}"' iteration' cut' accuracyScore);  		if (accuracyScore > bestAccuracy) {  			bestAccuracy = accuracyScore;  			bestIterationValue = iteration;  			bestCutValue = cut;  		}  	}  }  
Magic Number,Trainer,Program,F:\newReposMay17\AlexPoint_OpenNlp\Trainer\Program.cs,OptimizeSentenceDetectionTraining,The following statement contains a magic number: foreach (var cut in cuts) {  	var model = MaximumEntropySentenceDetector.TrainModel (allTrainFiles' iteration' cut' endOfSentenceScanner);  	// compute accuracy  	var sentenceDetector = new MaximumEntropySentenceDetector (model' endOfSentenceScanner);  	var results = sentenceDetector.SentenceDetect (testData);  	// not perfect for comparing files but it gives a very good approximation  	//var commonValues = allSentences.Intersect(results).Count();  	var nbOfCommonSentences = 0;  	foreach (var result in results) {  		if (allSentences.Contains (result)) {  			nbOfCommonSentences++;  		} else {  			//Console.WriteLine(result);  		}  	}  	var accuracyScore = (float)2 * nbOfCommonSentences / (allSentences.Count + results.Count ());  	Console.WriteLine ("Accuracy for iteration={0} and cut={1}: {2}"' iteration' cut' accuracyScore);  	if (accuracyScore > bestAccuracy) {  		bestAccuracy = accuracyScore;  		bestIterationValue = iteration;  		bestCutValue = cut;  	}  }  
