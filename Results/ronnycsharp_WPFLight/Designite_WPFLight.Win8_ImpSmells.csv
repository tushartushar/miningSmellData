Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The method has 123 lines of code.
Long Method,System.Windows.Markup,XamlReader,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Markup\XamlReader.cs,ReadElement,The method has 251 lines of code.
Long Method,System.Windows.Media,Colors,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Colors.cs,Colors,The method has 144 lines of code.
Complex Method,System.Windows.Controls,Control,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Control.cs,Draw,Cyclomatic complexity of the method is 12
Complex Method,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,Cyclomatic complexity of the method is 12
Complex Method,System.Windows.Controls,Label,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Label.cs,Draw,Cyclomatic complexity of the method is 10
Complex Method,System.Windows,DependencyObject,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\DependencyObject.cs,GetValue,Cyclomatic complexity of the method is 8
Complex Method,System.Windows,FrameworkElement,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\FrameworkElement.cs,OnDataContextChanged,Cyclomatic complexity of the method is 8
Complex Method,System.Windows,FrameworkElement,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\FrameworkElement.cs,CheckTrigger,Cyclomatic complexity of the method is 12
Complex Method,System.Windows.Markup,XamlReader,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Markup\XamlReader.cs,ReadElement,Cyclomatic complexity of the method is 18
Complex Method,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,FillPixels,Cyclomatic complexity of the method is 8
Long Parameter List,System.Windows.Controls,IDrawable3D,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\IDrawable3D.cs,Draw,The method has 5 parameters. Parameters: time' world' view' projection' alpha
Long Parameter List,System.Windows.Controls,Plane,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Plane.cs,Plane,The method has 6 parameters. Parameters: game' x1' x2' y1' y2' color
Long Parameter List,System.Windows.Controls,Plane,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Plane.cs,Draw,The method has 5 parameters. Parameters: gameTime' world' view' projection' alpha
Long Parameter List,System.Windows.Markup,XamlReader,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Markup\XamlReader.cs,ReadElement,The method has 5 parameters. Parameters: element' targetType' targetStyleType' parent' codeBehind
Long Parameter List,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetCubicBezier,The method has 5 parameters. Parameters: t' p0' p1' p2' p3
Long Parameter List,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,FillPixels,The method has 5 parameters. Parameters: brush' rects' width' height' pixels
Long Parameter List,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,FillPixels,The method has 5 parameters. Parameters: brush' rects' width' height' pixels
Long Parameter List,System.Windows.Shapes,Shape,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Shape.cs,GetCubicBezier,The method has 5 parameters. Parameters: t' p0' p1' p2' p3
Long Identifier,System.Windows.Controls,ContentControl,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ContentControl.cs,,The length of the parameter HorizontalContentAlignmentProperty is 34.
Long Identifier,System.Windows.Controls,ContentControl,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ContentControl.cs,,The length of the parameter VerticalContentAlignmentProperty is 32.
Long Identifier,System.Windows.Controls,ScrollViewer,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScrollViewer.cs,,The length of the parameter VerticalScrollBarVisibilityProperty is 35.
Long Identifier,System.Windows.Controls,ScrollViewer,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScrollViewer.cs,,The length of the parameter HorizontalScrollBarVisibilityProperty is 37.
Long Statement,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,Initialize,The length of the statement  "            window.Background = Brushes.Transparent;//new SolidColorBrush(new System.Windows.Media.Color ( .2f' .2f' .2f ) * .9f); // new SolidColorBrush(/*new System.Windows.Media.Color ( .8f' .8f' .8f )*/ Colors.CornflowerBlue ); " is 219.
Long Statement,System.Windows.Controls,ScreenBase,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScreenBase.cs,Draw,The length of the statement  "                base.Draw ( gameTime' batch' alpha * ( 1 - currentValue )' transform * Matrix.CreateTranslation ( this.ActualWidth * (hiding?-currentValue:currentValue)' 0' 0 ) ); " is 163.
Long Statement,System.Windows,FrameworkPropertyMetadata,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\FrameworkPropertyMetadata.cs,SetOptions,The length of the statement  "            this.SubPropertiesDoNotAffectRender = options.IsFlagSet(FrameworkPropertyMetadataOptions.SubPropertiesDoNotAffectRender); " is 121.
Long Statement,System.Windows.Markup,XamlReader,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Markup\XamlReader.cs,SetElementField,The length of the statement  "			var elementField = codeBehind.GetType ().GetField (elementName' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance ); " is 135.
Long Statement,System.Windows.Media.Animation,SingleKeyFrameAnimation,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\SingleKeyFrameAnimation.cs,GetCurrentValue,The length of the statement  "				float v = ( float ) ( 1.0 / ( ( double ) ( nextTimeMillis - prevTimeMillis ).Ticks / ( double ) ( CurrentTime - prevTimeMillis ).Ticks ) ); " is 139.
Complex Conditional,System.Windows.Controls,Control,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Control.cs,HitTest,The conditional expression  "v.X >= left  				    && v.Y >= top  				    && v.X <= left + this.ActualWidth  				    && v.Y <= top + this.ActualHeight"  is complex.
Complex Conditional,System.Windows.Controls,Panel,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Panel.cs,OnTouchDown,The conditional expression  "c.IsEnabled   						&& c.Opacity > 0 // TODO Should remove' in WPF' transparent Buttons are clickable  						&& VisualTreeHelper.IsVisible ( c )   						&& c.HitTest(state.Position)"  is complex.
Complex Conditional,System.Windows.Controls,Panel,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Panel.cs,OnTouchUp,The conditional expression  "c.IsEnabled   						&& c.Opacity > 0   						&& VisualTreeHelper.IsVisible ( c )   						&& (c.HitTest(state.Position) || c.IsTouchDown)"  is complex.
Complex Conditional,System.Windows.Controls,Panel,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Panel.cs,OnTouchMove,The conditional expression  "c.IsEnabled   						&& c.Opacity > 0   						&& VisualTreeHelper.IsVisible ( c )   						&& (c.HitTest(state.Position) || c.IsTouchDown)"  is complex.
Complex Conditional,System.Windows.Controls,RadioButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\RadioButton.cs,OnCheckedChanged,The conditional expression  "c != this                              && c.IsChecked                              && c.GroupName != null                              && c.GroupName == this.GroupName                              && c.IsChecked"  is complex.
Complex Conditional,System.Windows,DependencyObject,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\DependencyObject.cs,SetValue,The conditional expression  "( oldValue == null && value != null )   				|| ( oldValue != null && value == null )   				|| ( oldValue != null && value != null && !oldValue.Equals ( value ) )"  is complex.
Complex Conditional,System.Windows.Media.Animation,SingleKeyFrameAnimation,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\SingleKeyFrameAnimation.cs,GetPrevValue,The conditional expression  "f.Time <= CurrentTime && ( frame==null || ( frame != null && f.Time > frame.Value.Time ) )"  is complex.
Complex Conditional,System.Windows.Media.Animation,SingleKeyFrameAnimation,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\SingleKeyFrameAnimation.cs,GetNextValue,The conditional expression  "f.Time > CurrentTime &&  ( frame==null || ( frame != null && f.Time < frame.Value.Time ) )"  is complex.
Complex Conditional,System.Windows.Media.Animation,SingleKeyFrameAnimation,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\SingleKeyFrameAnimation.cs,GetPrevTime,The conditional expression  "f.Time <= CurrentTime &&  ( frame==null || ( frame != null && f.Time > frame.Value.Time ) )"  is complex.
Complex Conditional,System.Windows.Media.Animation,SingleKeyFrameAnimation,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\SingleKeyFrameAnimation.cs,GetNextTime,The conditional expression  "f.Time > CurrentTime && ( frame==null || ( frame != null && f.Time < frame.Value.Time ) )"  is complex.
Complex Conditional,System.Windows.Media,GradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\GradientBrush.cs,GetPrevColor,The conditional expression  "f.Offset <= offset && (frame == null || (frame != null && f.Offset > frame.Offset))"  is complex.
Complex Conditional,System.Windows.Media,GradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\GradientBrush.cs,GetNextColor,The conditional expression  "f.Offset > offset && (frame == null || (frame != null && f.Offset < frame.Offset))"  is complex.
Complex Conditional,System.Windows.Media,GradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\GradientBrush.cs,GetPrevOffset,The conditional expression  "f.Offset <= offset && (frame == null || (frame != null && f.Offset > frame.Offset))"  is complex.
Complex Conditional,System.Windows.Media,GradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\GradientBrush.cs,GetNextOffset,The conditional expression  "f.Offset > offset && (frame == null || (frame != null && f.Offset < frame.Offset))"  is complex.
Complex Conditional,System.Windows.Media,LinearGradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\LinearGradientBrush.cs,Equals,The conditional expression  "brush != null                      && brush.StartPoint == this.StartPoint                      && brush.EndPoint == this.EndPoint                      && brush.Opacity == this.Opacity                      && brush.GradientStops.Count == this.GradientStops.Count"  is complex.
Complex Conditional,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,Draw,The conditional expression  "this.IsVisible ( ) && this.Alpha > 0 && alpha > 0 && this.Background != null                      && (this.RadiusX != 0 || this.RadiusY != 0)                      && this.ActualWidth > 0                      && this.ActualHeight > 0"  is complex.
Complex Conditional,System.Windows.Shapes,Shape,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Shape.cs,Draw,The conditional expression  "texture != null  				&& !texture.IsDisposed  			    && alpha > 0  				&& (this.Stroke != null || this.Fill != null)  				&&	this.IsVisible  				&& this.ActualWidth > 0  				&& this.ActualHeight > 0"  is complex.
Virtual Method Call from Constructor,System.Windows.Controls,ComboBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ComboBox.cs,ComboBox,The constructor "ComboBox" calls a virtual method "Close".
Virtual Method Call from Constructor,System.Windows.Media.Animation,Timeline,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Timeline.cs,Timeline,The constructor "Timeline" calls a virtual method "AllocateClock".
Magic Number,WPFLight.Helpers,ArrayHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\Helpers\ArrayHelper.cs,ArrayFill,The following statement contains a magic number: var arrayToFillHalfLength = arrayToFill.Length / 2;
Magic Number,WPFLight.Helpers,ArrayHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\Helpers\ArrayHelper.cs,ArrayFill,The following statement contains a magic number: for (var i = fillValue.Length; i < arrayToFill.Length; i *= 2) {                  var copyLength = i;                  if (i > arrayToFillHalfLength)                      copyLength = arrayToFill.Length - i;                    Array.Copy(                      arrayToFill' 0' arrayToFill' i' copyLength);              }
Magic Number,System.Windows.Controls,ComboBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ComboBox.cs,ComboBox,The following statement contains a magic number: lbItems.Margin = new Thickness (2);
Magic Number,System.Windows.Controls,ComboBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ComboBox.cs,Initialize,The following statement contains a magic number: cmdItem.Padding = new Thickness (9' 0' 0' 0);
Magic Number,System.Windows.Controls,ComboBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ComboBox.cs,Initialize,The following statement contains a magic number: window.Top = (int)this.GetAbsoluteTop() + this.ActualHeight + 4;
Magic Number,System.Windows.Controls,ComboBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ComboBox.cs,Initialize,The following statement contains a magic number: window.Height = 247;
Magic Number,System.Windows.Controls,ComboBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ComboBox.cs,Draw,The following statement contains a magic number: batch.Draw (  				Textures.ArrowDown'   				new Rectangle (  					(int)Math.Floor (left + this.ActualWidth - 30)'   					(int)Math.Floor (top + this.ActualHeight / 2f)' 20' 20)'  				null'   				new Microsoft.Xna.Framework.Color ( .8f' .8f' .8f ) * .5f'  				MathHelper.ToRadians (0)'  				new Vector2 (  					WPFLight.Resources.Textures.ArrowDown.Bounds.Width / 2f'  					WPFLight.Resources.Textures.ArrowDown.Height / 2f)'   				SpriteEffects.None'   				0);
Magic Number,System.Windows.Controls,ComboBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ComboBox.cs,Draw,The following statement contains a magic number: batch.Draw (  				Textures.ArrowDown'   				new Rectangle (  					(int)Math.Floor (left + this.ActualWidth - 30)'   					(int)Math.Floor (top + this.ActualHeight / 2f)' 20' 20)'  				null'   				new Microsoft.Xna.Framework.Color ( .8f' .8f' .8f ) * .5f'  				MathHelper.ToRadians (0)'  				new Vector2 (  					WPFLight.Resources.Textures.ArrowDown.Bounds.Width / 2f'  					WPFLight.Resources.Textures.ArrowDown.Height / 2f)'   				SpriteEffects.None'   				0);
Magic Number,System.Windows.Controls,ComboBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ComboBox.cs,Draw,The following statement contains a magic number: batch.Draw (  				Textures.ArrowDown'   				new Rectangle (  					(int)Math.Floor (left + this.ActualWidth - 30)'   					(int)Math.Floor (top + this.ActualHeight / 2f)' 20' 20)'  				null'   				new Microsoft.Xna.Framework.Color ( .8f' .8f' .8f ) * .5f'  				MathHelper.ToRadians (0)'  				new Vector2 (  					WPFLight.Resources.Textures.ArrowDown.Bounds.Width / 2f'  					WPFLight.Resources.Textures.ArrowDown.Height / 2f)'   				SpriteEffects.None'   				0);
Magic Number,System.Windows.Controls,ComboBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ComboBox.cs,Invalidate,The following statement contains a magic number: window.Top = (int)this.GetAbsoluteTop() + this.ActualHeight - 5;
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Initialize,The following statement contains a magic number: gridHeader.Height = 50;
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Initialize,The following statement contains a magic number: rcScrollBar.Width = 3;
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Initialize,The following statement contains a magic number: rcScrollBar.Margin = new Thickness (0' 2' 2' 2);
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Initialize,The following statement contains a magic number: rcScrollBar.Margin = new Thickness (0' 2' 2' 2);
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Initialize,The following statement contains a magic number: rcScrollBar.Margin = new Thickness (0' 2' 2' 2);
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Initialize,The following statement contains a magic number: rcScrollBar.Height = 100;
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Initialize,The following statement contains a magic number: rcScrollBar.Left = this.ActualWidth - 7;
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,OnTouchMove,The following statement contains a magic number: if (-offset > (contentHeight - (this.ActualHeight - 50)))  				offset = -(contentHeight - (this.ActualHeight - 50));
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,OnTouchMove,The following statement contains a magic number: if (-offset > (contentHeight - (this.ActualHeight - 50)))  				offset = -(contentHeight - (this.ActualHeight - 50));
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Update,The following statement contains a magic number: if (this.ActualHeight < contentHeight)  				this.rcScrollBar.Top = (int)52 + (-((this.VerticalOffset * (this.ActualHeight - 50)) / contentHeight));
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Update,The following statement contains a magic number: if (this.ActualHeight < contentHeight)  				this.rcScrollBar.Top = (int)52 + (-((this.VerticalOffset * (this.ActualHeight - 50)) / contentHeight));
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Draw,The following statement contains a magic number: if (this.IsVisible) {    				var absLeft = this.GetAbsoluteLeft ();  				var absTop = this.GetAbsoluteTop ();  				var left = absLeft;  				var top = absTop;  				var i = 0;    				/*                  this.GraphicsDevice.ScissorRectangle =                      ScreenHelper.CheckScissorRect(                          ScreenHelper.Project(                              new Microsoft.Xna.Framework.Rectangle(                                  (int)left' (int)top + 50' (int)this.ActualWidth' (int)this.ActualHeight - 50)));    				*/    				var newLeft = absLeft;  				var newTop = absTop + 50;  				var newWidth = this.ActualWidth;  				var newHeight = this.ActualHeight - 50;    				var scaleX = (float)ScreenHelper.SCREEN_WIDTH / (float)ScreenHelper.ORIGINAL_WIDTH;  				var scaleY = (float)ScreenHelper.SCREEN_HEIGHT / (float)ScreenHelper.ORIGINAL_HEIGHT;    				var newBounds =   					new Microsoft.Xna.Framework.Rectangle (  						(int)(newLeft * scaleX)' (int)(newTop * scaleY)' (int)(newWidth * scaleX)' (int)(newHeight * scaleY));    				#if WINDOWS_PHONE  				if ( newBounds.Right > ScreenHelper.ORIGINAL_WIDTH )  					newBounds.Width = ScreenHelper.ORIGINAL_WIDTH - newBounds.Left;    				if ( newBounds.Bottom > ScreenHelper.ORIGINAL_HEIGHT )  					newBounds.Height = ScreenHelper.ORIGINAL_HEIGHT - newBounds.Top;  				#endif    				this.GraphicsDevice.ScissorRectangle = newBounds;    				foreach (var c in this.Columns) {  					var columnWidth = GetColumnWidth (i);  					if (!String.IsNullOrWhiteSpace (c.Text)) {  						batch.Begin (  							SpriteSortMode.Deferred'  							BlendState.AlphaBlend'  							null'  							DepthStencilState.None'  							RasterizerState.CullNone'  							null'  							transform);    						batch.DrawString (  							GetFont ()'  							c.Text'  							new Vector2 (left + 10' top + 4)'  							Microsoft.Xna.Framework.Color.White * .8f'  							0f'  							Vector2.Zero'  							this.FontScale'  							SpriteEffects.None'  							1f);    						batch.End ();  					}  					left += columnWidth;  					i++;  				}    				left = absLeft;  				top = absTop + this.VerticalOffset + 50;  				foreach (var item in this.Items) {  					if ((top + 30) >= absTop) {  						if (top > (absTop + this.ActualHeight))  							break;    						if (!loadedItems.Contains (item)) {  							if (this.LoadItem != null)  								LoadItem (this' new LoadItemEventArgs (item));    							loadedItems.Add (item);  						}    						left = absLeft;  						i = 0;  						foreach (var c in this.Columns) {  							var cellValue = item.Cells [i] ?? String.Empty;  							var columnWidth = this.GetColumnWidth (i);    							batch.Begin (  								SpriteSortMode.Deferred'  								BlendState.AlphaBlend'  								null'  								DepthStencilState.None'  								scissorEnabled'  								null'  								transform);    							batch.Draw (  								Textures.Background'  								new Microsoft.Xna.Framework.Rectangle (  									(int)(left + 2)'  									(int)(top + 5)'  									(int)(columnWidth - 1)'  									(int)29)'  								new Microsoft.Xna.Framework.Color (1f' 1f' 1f) * .08f);    							batch.End ();    							if (!String.IsNullOrWhiteSpace (c.Text)) {  								var itemLeft = left + 10;  								var itemWidth = cellValue != null ? (GetFont ().MeasureString (cellValue).X * FontScale * .9f) : 0;    								if (c.TextAlignment == TextAlignment.Right)  									itemLeft = left + columnWidth - itemWidth - 15;// + ( columnWidth - itemWidth - 10 );    								batch.Begin (  									SpriteSortMode.Deferred'  									BlendState.AlphaBlend'  									null'  									DepthStencilState.None'  									scissorEnabled'  									null'  									transform);    								batch.DrawString (  									GetFont ()'  									cellValue'  									new Vector2 (itemLeft' top)'  									c.TextColor'  									0f'  									Vector2.Zero'  									this.FontScale * .9f'  									SpriteEffects.None'  									1f);    								batch.End ();  							}  							left += columnWidth;  							i++;  						}  					}  					top += 30;  				}  			}
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Refresh,The following statement contains a magic number: rcScrollBar.Height = (float)(Math.Pow (this.ActualHeight - 50' 2) / contentHeight);
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Refresh,The following statement contains a magic number: rcScrollBar.Height = (float)(Math.Pow (this.ActualHeight - 50' 2) / contentHeight);
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Refresh,The following statement contains a magic number: if (rcScrollBar.Height < 20)  				rcScrollBar.Height = 20;
Magic Number,System.Windows.Controls,DataGrid,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DataGrid.cs,Refresh,The following statement contains a magic number: if (rcScrollBar.Height < 20)  				rcScrollBar.Height = 20;
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,DialogBox,The following statement contains a magic number: this.Width = 200;
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,DialogBox,The following statement contains a magic number: this.Height = 200;
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,DialogBox,The following statement contains a magic number: this.Background = new SolidColorBrush (System.Windows.Media.Color.FromArgb (200' 150' 150' 150 ));
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,DialogBox,The following statement contains a magic number: this.Background = new SolidColorBrush (System.Windows.Media.Color.FromArgb (200' 150' 150' 150 ));
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,DialogBox,The following statement contains a magic number: this.Background = new SolidColorBrush (System.Windows.Media.Color.FromArgb (200' 150' 150' 150 ));
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,DialogBox,The following statement contains a magic number: this.Background = new SolidColorBrush (System.Windows.Media.Color.FromArgb (200' 150' 150' 150 ));
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,DialogBox,The following statement contains a magic number: gridRoot.RowDefinitions.Add (new RowDefinition (new GridLength (50' GridUnitType.Pixel)));
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,DialogBox,The following statement contains a magic number: gridRoot.RowDefinitions.Add (new RowDefinition (new GridLength (65' GridUnitType.Pixel)));
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: lblTitle.Margin = new Thickness (12' 4' 0' 0);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: lblTitle.Margin = new Thickness (12' 4' 0' 0);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdCancel.Margin = new Thickness (15' 5' 15' 10);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdCancel.Margin = new Thickness (15' 5' 15' 10);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdCancel.Margin = new Thickness (15' 5' 15' 10);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdCancel.Margin = new Thickness (15' 5' 15' 10);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdCancel.Width = 120;
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: Grid.SetRow ( cmdCancel' 2);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdOkay.Margin = new Thickness (15' 5' 145' 10);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdOkay.Margin = new Thickness (15' 5' 145' 10);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdOkay.Margin = new Thickness (15' 5' 145' 10);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdOkay.Margin = new Thickness (15' 5' 145' 10);
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: cmdOkay.Width = 80;
Magic Number,System.Windows.Controls,DialogBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\DialogBox.cs,Initialize,The following statement contains a magic number: Grid.SetRow (cmdOkay' 2);
Magic Number,System.Windows.Controls,ListBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ListBox.cs,Invalidate,The following statement contains a magic number: foreach (var item in Items) {  				if (!list.Contains (item)) {  					list.Add (item);  					if (!(item is ListBoxItem)) {  						var lbItem =  							new ListBoxItem {                                  FontFamily = this.FontFamily'  								Padding = new Thickness ( 10'0'0'0 )'  								Parent = contentPanel'  								HorizontalContentAlignment = HorizontalAlignment.Left'	// TODO REMOVE  								Content = item'  							};    						lbItem.CheckedChanged += (s' e) => {  							if (((ListBoxItem)s).IsChecked) {  								this.SelectedItem = ((ListBoxItem)s).Content;  							}  						};    						if (this.ItemContainerStyle != null) {  							lbItem.Style = this.ItemContainerStyle;  						}  							  						lbItem.Initialize ();  						contentPanel.Children.Add (lbItem);  					} else {  						contentPanel.Children.Add (  							item as ListBoxItem);  					}  				}              }
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,Invalidate,The following statement contains a magic number: window.Left = (int)this.GetAbsoluteLeft() + this.ActualWidth + 2;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,Initialize,The following statement contains a magic number: window.Left = (int)this.GetAbsoluteLeft() + this.ActualWidth + 2;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,Draw,The following statement contains a magic number: batch.Draw (  				WPFLight.Resources.Textures.ArrowDown'   				new Rectangle (  					(int)Math.Floor (left + this.ActualWidth - 15 + 6)'   					(int)Math.Floor (top + this.ActualHeight / 2f)' 16' 16)'  				null'   				Microsoft.Xna.Framework.Color.White * .7f'  				MathHelper.ToRadians (-90)'  				new Vector2 (  					WPFLight.Resources.Textures.ArrowDown.Bounds.Width / 2f'  					WPFLight.Resources.Textures.ArrowDown.Height / 2f)'   				SpriteEffects.None'   				0);
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,Draw,The following statement contains a magic number: batch.Draw (  				WPFLight.Resources.Textures.ArrowDown'   				new Rectangle (  					(int)Math.Floor (left + this.ActualWidth - 15 + 6)'   					(int)Math.Floor (top + this.ActualHeight / 2f)' 16' 16)'  				null'   				Microsoft.Xna.Framework.Color.White * .7f'  				MathHelper.ToRadians (-90)'  				new Vector2 (  					WPFLight.Resources.Textures.ArrowDown.Bounds.Width / 2f'  					WPFLight.Resources.Textures.ArrowDown.Height / 2f)'   				SpriteEffects.None'   				0);
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,Draw,The following statement contains a magic number: batch.Draw (  				WPFLight.Resources.Textures.ArrowDown'   				new Rectangle (  					(int)Math.Floor (left + this.ActualWidth - 15 + 6)'   					(int)Math.Floor (top + this.ActualHeight / 2f)' 16' 16)'  				null'   				Microsoft.Xna.Framework.Color.White * .7f'  				MathHelper.ToRadians (-90)'  				new Vector2 (  					WPFLight.Resources.Textures.ArrowDown.Bounds.Width / 2f'  					WPFLight.Resources.Textures.ArrowDown.Height / 2f)'   				SpriteEffects.None'   				0);
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,Draw,The following statement contains a magic number: batch.Draw (  				WPFLight.Resources.Textures.ArrowDown'   				new Rectangle (  					(int)Math.Floor (left + this.ActualWidth - 15 + 6)'   					(int)Math.Floor (top + this.ActualHeight / 2f)' 16' 16)'  				null'   				Microsoft.Xna.Framework.Color.White * .7f'  				MathHelper.ToRadians (-90)'  				new Vector2 (  					WPFLight.Resources.Textures.ArrowDown.Bounds.Width / 2f'  					WPFLight.Resources.Textures.ArrowDown.Height / 2f)'   				SpriteEffects.None'   				0);
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,Draw,The following statement contains a magic number: batch.Draw (  				WPFLight.Resources.Textures.ArrowDown'   				new Rectangle (  					(int)Math.Floor (left + this.ActualWidth - 15 + 6)'   					(int)Math.Floor (top + this.ActualHeight / 2f)' 16' 16)'  				null'   				Microsoft.Xna.Framework.Color.White * .7f'  				MathHelper.ToRadians (-90)'  				new Vector2 (  					WPFLight.Resources.Textures.ArrowDown.Bounds.Width / 2f'  					WPFLight.Resources.Textures.ArrowDown.Height / 2f)'   				SpriteEffects.None'   				0);
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Height = 60;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Width = 80;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Margin = new Thickness(2);
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Height = 60;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Width = 80;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Margin = new Thickness(2);
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Height = 60;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Width = 80;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Margin = new Thickness(2);
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: AddItem (image' new Thickness (7));
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Height = 60;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Width = 80;
Magic Number,System.Windows.Controls,MenuButton,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\MenuButton.cs,AddItem,The following statement contains a magic number: cmd.Margin = new Thickness(2);
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,NumericUpDown,The following statement contains a magic number: this.MaxValue = 100;
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: gridRoot.ColumnDefinitions.Add(new ColumnDefinition(new GridLength(64' GridUnitType.Pixel)));
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: gridRoot.ColumnDefinitions.Add(new ColumnDefinition(new GridLength(64' GridUnitType.Pixel)));
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdDown.Content = new Image (Textures.ArrowDown){ Margin = new Thickness ( 10'15'10'15 )' Opacity = .6f };
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdDown.Content = new Image (Textures.ArrowDown){ Margin = new Thickness ( 10'15'10'15 )' Opacity = .6f };
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdDown.Content = new Image (Textures.ArrowDown){ Margin = new Thickness ( 10'15'10'15 )' Opacity = .6f };
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdDown.Content = new Image (Textures.ArrowDown){ Margin = new Thickness ( 10'15'10'15 )' Opacity = .6f };
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdDown.Margin = new Thickness (3);
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdUp.Content = new Image (Textures.ArrowUp){ Margin = new Thickness ( 10'15'10'15 )' Opacity = .6f };
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdUp.Content = new Image (Textures.ArrowUp){ Margin = new Thickness ( 10'15'10'15 )' Opacity = .6f };
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdUp.Content = new Image (Textures.ArrowUp){ Margin = new Thickness ( 10'15'10'15 )' Opacity = .6f };
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdUp.Content = new Image (Textures.ArrowUp){ Margin = new Thickness ( 10'15'10'15 )' Opacity = .6f };
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: cmdUp.Margin = new Thickness (3);
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: Grid.SetColumn(cmdUp' 2);
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: lblValue.Margin = new Thickness (15'3'3'3);
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: lblValue.Margin = new Thickness (15'3'3'3);
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: lblValue.Margin = new Thickness (15'3'3'3);
Magic Number,System.Windows.Controls,NumericUpDown,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\NumericUpDown.cs,Initialize,The following statement contains a magic number: lblValue.Margin = new Thickness (15'3'3'3);
Magic Number,System.Windows.Controls,Plane,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Plane.cs,Initialize,The following statement contains a magic number: vertexBuffer =                  new VertexBuffer (                      this.Game.GraphicsDevice'                      typeof ( VertexPositionColor )'                      6'                      BufferUsage.None );
Magic Number,System.Windows.Controls,Plane,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\Plane.cs,Draw,The following statement contains a magic number: foreach ( EffectPass effectPass in effect.CurrentTechnique.Passes ) {                  effectPass.Apply ( );                  this.Game.GraphicsDevice.DrawPrimitives (                      PrimitiveType.TriangleList' 0' 2 );              }
Magic Number,System.Windows.Controls,ScreenBase,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScreenBase.cs,ScreenBase,The following statement contains a magic number: fadeAnimation = new SingleAnimation (                   0' 1' TimeSpan.FromMilliseconds ( 300 )' false );
Magic Number,System.Windows.Controls,ScrollViewer,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScrollViewer.cs,Initialize,The following statement contains a magic number: rcVScroll.Width = 3;
Magic Number,System.Windows.Controls,ScrollViewer,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScrollViewer.cs,Initialize,The following statement contains a magic number: rcHScroll.Height = 3;
Magic Number,System.Windows.Controls,ScrollViewer,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScrollViewer.cs,Initialize,The following statement contains a magic number: rcVScroll.Top = 100;
Magic Number,System.Windows.Controls,ScrollViewer,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScrollViewer.cs,Initialize,The following statement contains a magic number: rcVScroll.Height = 100;
Magic Number,System.Windows.Controls,ScrollViewer,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScrollViewer.cs,RefreshVScroll,The following statement contains a magic number: if (measure.Height > this.ActualHeight) {  				rcVScroll.Height = (int)(System.Math.Pow ((this.ActualHeight)' 2) / measure.Height);  				rcVScroll.Visible = true;  			} else  				rcVScroll.Visible = false;
Magic Number,System.Windows.Controls,ScrollViewer,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ScrollViewer.cs,RefreshHScroll,The following statement contains a magic number: if (measure.Width > this.ActualWidth) {  				rcHScroll.Width = (int)(System.Math.Pow ((this.ActualWidth)' 2) / measure.Width);  				rcHScroll.Visible = true;  			} else  				rcHScroll.Visible = false;
Magic Number,System.Windows.Controls,TextBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TextBox.cs,Initialize,The following statement contains a magic number: rcCursor.Width = 2;
Magic Number,System.Windows.Controls,TextBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TextBox.cs,Initialize,The following statement contains a magic number: rcCursor.Margin = new Thickness (0' 5' 0' 5);
Magic Number,System.Windows.Controls,TextBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TextBox.cs,Initialize,The following statement contains a magic number: rcCursor.Margin = new Thickness (0' 5' 0' 5);
Magic Number,System.Windows.Controls,TextBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TextBox.cs,Initialize,The following statement contains a magic number: lblText.Top = (float)(this.ActualHeight / 2.0 - (this.GetFont().MeasureString ("A").Y * this.FontScale) / 2.0);
Magic Number,System.Windows.Controls,TextBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TextBox.cs,Initialize,The following statement contains a magic number: lblText.Top = (float)(this.ActualHeight / 2.0 - (this.GetFont().MeasureString ("A").Y * this.FontScale) / 2.0);
Magic Number,System.Windows.Controls,TextBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TextBox.cs,Update,The following statement contains a magic number: if (this.Visible && this.IsEnabled && this.IsFocused) {  				if ((DateTime.UtcNow - lastCursorBlink) > TimeSpan.FromMilliseconds (300)) {  					rcCursor.Visible = !rcCursor.Visible;  					lastCursorBlink = DateTime.UtcNow;  				}  				base.Update (gameTime);  			}
Magic Number,System.Windows.Controls,TextBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TextBox.cs,OnGotFocus,The following statement contains a magic number: lastCursorBlink = DateTime.UtcNow + TimeSpan.FromMilliseconds (50);
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,TrackBar,The following statement contains a magic number: this.Height = 60;
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,TrackBar,The following statement contains a magic number: this.MaxValue = 100;
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,Initialize,The following statement contains a magic number: rcBackground.Height = 5;
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,Initialize,The following statement contains a magic number: rcBackground.Margin = new Thickness (17'2'17'2);
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,Initialize,The following statement contains a magic number: rcBackground.Margin = new Thickness (17'2'17'2);
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,Initialize,The following statement contains a magic number: rcBackground.Margin = new Thickness (17'2'17'2);
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,Initialize,The following statement contains a magic number: rcBackground.Margin = new Thickness (17'2'17'2);
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,Initialize,The following statement contains a magic number: cmdTrack.Content =   				new System.Windows.Shapes.Rectangle {   					Fill = Brushes.White'   					Width = 30'   					Height = 30'  			};
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,Initialize,The following statement contains a magic number: cmdTrack.Content =   				new System.Windows.Shapes.Rectangle {   					Fill = Brushes.White'   					Width = 30'   					Height = 30'  			};
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,Initialize,The following statement contains a magic number: cmdTrack.Width = 60;
Magic Number,System.Windows.Controls,TrackBar,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\TrackBar.cs,Initialize,The following statement contains a magic number: cmdTrack.Height = 60;
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,MessageBox,The following statement contains a magic number: this.Width = 350;
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,MessageBox,The following statement contains a magic number: this.Height = 200;
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,MessageBox,The following statement contains a magic number: this.Background = new SolidColorBrush (System.Windows.Media.Color.FromArgb (230' 150' 150' 150 ));
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,MessageBox,The following statement contains a magic number: this.Background = new SolidColorBrush (System.Windows.Media.Color.FromArgb (230' 150' 150' 150 ));
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,MessageBox,The following statement contains a magic number: this.Background = new SolidColorBrush (System.Windows.Media.Color.FromArgb (230' 150' 150' 150 ));
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,MessageBox,The following statement contains a magic number: this.Background = new SolidColorBrush (System.Windows.Media.Color.FromArgb (230' 150' 150' 150 ));
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,MessageBox,The following statement contains a magic number: this.BorderThickness = new Thickness (2);
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,MessageBox,The following statement contains a magic number: gridRoot.RowDefinitions.Add (new RowDefinition (new GridLength (45' GridUnitType.Pixel)));
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,MessageBox,The following statement contains a magic number: gridRoot.RowDefinitions.Add (new RowDefinition (new GridLength (75' GridUnitType.Pixel)));
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,Initialize,The following statement contains a magic number: lblTitle.Margin = new Thickness (8' 4' 0' 0);
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,Initialize,The following statement contains a magic number: lblTitle.Margin = new Thickness (8' 4' 0' 0);
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,Initialize,The following statement contains a magic number: lblText.Margin = new Thickness (30' 0' 0' 0);
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,Initialize,The following statement contains a magic number: cmdOkay.Margin = new Thickness (0' 0' 0' 18);
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,Initialize,The following statement contains a magic number: cmdOkay.Width = 140;
Magic Number,System.Windows.Controls,MessageBox,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\MessageBox.cs,Initialize,The following statement contains a magic number: Grid.SetRow (cmdOkay' 2);
Magic Number,System.Windows,PointConverter,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\PointConverter.cs,ConvertFrom,The following statement contains a magic number: if (strValue != null) {                  string text = strValue.Trim();                  if (text.Length == 0) {                      return null;                  } else {                      char sep = CultureInfo.InvariantCulture.TextInfo.ListSeparator[0];                      string[] tokens = text.Split(new char[] { sep });                      float[] values = new float[tokens.Length];                        for (int i = 0; i < values.Length; i++) {                          values[i] = ( float ) Convert.ChangeType(                              tokens[i]' typeof(Single)' CultureInfo.InvariantCulture);                      }                      if (values.Length == 2) {                          return new Point(values[0]' values[1]);                      } else {                          throw new ArgumentException();                      }                  }              }
Magic Number,System.Windows,PointConverter,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\PointConverter.cs,ConvertTo,The following statement contains a magic number: if (value is Point) {                  if (destinationType == typeof(string)) {                      Point pt = (Point)value;                      if (culture == null) {                          culture = CultureInfo.CurrentCulture;                      }                      string sep = culture.TextInfo.ListSeparator + " ";                      TypeConverter intConverter = TypeDescriptor.GetConverter(typeof(int));                      string[] args = new string[2];                      int nArg = 0;                        // Note: ConvertToString will raise exception if value cannot be converted.                      args[nArg++] = intConverter.ConvertToString(pt.X);                      args[nArg++] = intConverter.ConvertToString(pt.Y);                        return string.Join(sep' args);                  }                  /*                  if (destinationType == typeof(InstanceDescriptor)) {                      Point pt = (Point)value;                        ConstructorInfo ctor = typeof(Point).GetConstructor(new Type[] { typeof(int)' typeof(int) });                      if (ctor != null) {                          return new InstanceDescriptor(ctor' new object[] { pt.X' pt.Y });                      }                  }                   * */              }
Magic Number,System.Windows,ThicknessConverter,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Vector2Converter.cs,ToString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(64);
Magic Number,System.Windows,ThicknessConverter,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Vector2Converter.cs,FromString,The following statement contains a magic number: if (s.Contains ("'")) {  				var values = s.Split (''');  				return new Thickness (  					float.Parse (values [0])'  					float.Parse (values [1])'  					float.Parse (values [2])'  					float.Parse (values [3]));  			} else {  				return new Thickness (  					float.Parse (s));  			}
Magic Number,System.Windows,ThicknessConverter,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Vector2Converter.cs,FromString,The following statement contains a magic number: if (s.Contains ("'")) {  				var values = s.Split (''');  				return new Thickness (  					float.Parse (values [0])'  					float.Parse (values [1])'  					float.Parse (values [2])'  					float.Parse (values [3]));  			} else {  				return new Thickness (  					float.Parse (s));  			}
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseIn,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseIn ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseIn ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseIn ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseIn ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseIn ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseIn,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseIn ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseIn ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseIn ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseIn ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseIn ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseIn,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseIn ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseIn ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseIn ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseIn ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseIn ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseIn,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseIn ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseIn ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseIn ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseIn ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseIn ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseIn,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseIn ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseIn ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseIn ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseIn ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseIn ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: return linearStep < 0.5 ? EaseInOut ( linearStep' easeInType ) : EaseInOut ( linearStep' easeOutType );
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseInOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseInOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseInOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseInOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseInOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseInOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseInOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseInOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseInOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseInOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseInOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseInOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseInOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseInOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseInOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseInOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseInOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseInOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseInOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseInOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseInOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseInOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseInOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseInOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseInOut ( linearStep' 5 );              }
Magic Number,System.Windows.Media.Animation,Sine,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: return (float)( Math.Sin ( s * MathHelper.Pi - MathHelper.HalfPi ) + 1 ) / 2;
Magic Number,System.Windows.Media.Animation,Power,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseOut,The following statement contains a magic number: var sign = power % 2 == 0 ? -1 : 1;
Magic Number,System.Windows.Media.Animation,Power,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: s *= 2;
Magic Number,System.Windows.Media.Animation,Power,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: if ( s < 1 )                      return EaseIn ( s' power ) / 2;
Magic Number,System.Windows.Media.Animation,Power,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: var sign = power % 2 == 0 ? -1 : 1;
Magic Number,System.Windows.Media.Animation,Power,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: return (float)( sign / 2.0 * ( Math.Pow ( s - 2' power ) + sign * 2 ) );
Magic Number,System.Windows.Media.Animation,Power,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: return (float)( sign / 2.0 * ( Math.Pow ( s - 2' power ) + sign * 2 ) );
Magic Number,System.Windows.Media.Animation,Power,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following statement contains a magic number: return (float)( sign / 2.0 * ( Math.Pow ( s - 2' power ) + sign * 2 ) );
Magic Number,System.Windows.Media,Color,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Color.cs,Color,The following statement contains a magic number: R = (byte)MathHelper.Clamp(r * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,System.Windows.Media,Color,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Color.cs,Color,The following statement contains a magic number: G = (byte)MathHelper.Clamp(g * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,System.Windows.Media,Color,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Color.cs,Color,The following statement contains a magic number: B = (byte)MathHelper.Clamp(b * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,System.Windows.Media,Color,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Color.cs,Color,The following statement contains a magic number: R = (byte)MathHelper.Clamp(r * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,System.Windows.Media,Color,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Color.cs,Color,The following statement contains a magic number: G = (byte)MathHelper.Clamp(g * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,System.Windows.Media,Color,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Color.cs,Color,The following statement contains a magic number: B = (byte)MathHelper.Clamp(b * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,System.Windows.Media,Color,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Color.cs,Color,The following statement contains a magic number: A = (byte)MathHelper.Clamp(a * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((intChar >= s_zeroChar) && (intChar <= (s_zeroChar+9)))  			{  				return (intChar-s_zeroChar);  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((intChar >= s_aLower) && (intChar <= (s_aLower+5)))  			{  				return (intChar-s_aLower + 10);  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((intChar >= s_aLower) && (intChar <= (s_aLower+5)))  			{  				return (intChar-s_aLower + 10);  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((intChar >= s_aUpper) && (intChar <= (s_aUpper+5)))  			{  				return (intChar-s_aUpper + 10);  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((intChar >= s_aUpper) && (intChar <= (s_aUpper+5)))  			{  				return (intChar-s_aUpper + 10);  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: a = 255;
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,ColorHelper,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if ( trimmedColor.Length > 7 )  			{  				a = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				r = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				g = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  				b = ParseHexChar(trimmedColor[7]) * 16 + ParseHexChar(trimmedColor[8]);  			}  			else if ( trimmedColor.Length > 5)  			{  				r = ParseHexChar(trimmedColor[1]) * 16 + ParseHexChar(trimmedColor[2]);  				g = ParseHexChar(trimmedColor[3]) * 16 + ParseHexChar(trimmedColor[4]);  				b = ParseHexChar(trimmedColor[5]) * 16 + ParseHexChar(trimmedColor[6]);  			}  			else if (trimmedColor.Length > 4)  			{  				a = ParseHexChar(trimmedColor[1]);  				a = a + a*16;  				r = ParseHexChar(trimmedColor[2]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[3]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[4]);  				b = b + b*16;  			}  			else  			{  				r = ParseHexChar(trimmedColor[1]);  				r = r + r*16;  				g = ParseHexChar(trimmedColor[2]);  				g = g + g*16;  				b = ParseHexChar(trimmedColor[3]);  				b = b + b*16;  			}
Magic Number,System.Windows.Media,GradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\GradientBrush.cs,ContainsAlpha,The following statement contains a magic number: foreach (var s in GradientStops) {  				if (s.Color.A < 255)  					return true;  			}
Magic Number,System.Windows.Media,LinearGradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\LinearGradientBrush.cs,CreateTexture,The following statement contains a magic number: var width = 100;
Magic Number,System.Windows.Media,LinearGradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\LinearGradientBrush.cs,CreateTexture,The following statement contains a magic number: var height = 100;
Magic Number,System.Windows.Media,RadialGradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\RadialGradientBrush.cs,CreateTexture,The following statement contains a magic number: var width = 100;
Magic Number,System.Windows.Media,RadialGradientBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\RadialGradientBrush.cs,CreateTexture,The following statement contains a magic number: var height = 100;
Magic Number,System.Windows.Media,SolidColorBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\SolidColorBrush.cs,CreateSolidTexture,The following statement contains a magic number: var width = 10;
Magic Number,System.Windows.Media,SolidColorBrush,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\SolidColorBrush.cs,CreateSolidTexture,The following statement contains a magic number: var height = 10;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetCubicBezier,The following statement contains a magic number: double cx = 3 * (p1.X - p0.X);
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetCubicBezier,The following statement contains a magic number: double cy = 3 * (p1.Y - p0.Y);
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetCubicBezier,The following statement contains a magic number: double bx = 3 * (p2.X - p1.X) - cx;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetCubicBezier,The following statement contains a magic number: double by = 3 * (p2.Y - p1.Y) - cy;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: var points = new Point[13];
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: double c_arcAsBezier = 0.5522847498307933984;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[0].X = points[1].X = points[11].X = points[12].X = center.X + radiusX;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[0].X = points[1].X = points[11].X = points[12].X = center.X + radiusX;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[2].X = points[10].X = center.X + mid;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[2].X = points[10].X = center.X + mid;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[3].X = points[9].X = center.X;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[3].X = points[9].X = center.X;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[4].X = points[8].X = center.X - mid;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[4].X = points[8].X = center.X - mid;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[5].X = points[6].X = points[7].X = center.X - radiusX;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[5].X = points[6].X = points[7].X = center.X - radiusX;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[5].X = points[6].X = points[7].X = center.X - radiusX;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[2].Y = points[3].Y = points[4].Y = center.Y + radiusY;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[2].Y = points[3].Y = points[4].Y = center.Y + radiusY;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[2].Y = points[3].Y = points[4].Y = center.Y + radiusY;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[1].Y = points[5].Y = center.Y + mid;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[0].Y = points[6].Y = points[12].Y = center.Y;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[0].Y = points[6].Y = points[12].Y = center.Y;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[7].Y = points[11].Y = center.Y - mid;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[7].Y = points[11].Y = center.Y - mid;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[8].Y = points[9].Y = points[10].Y = center.Y - radiusY;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[8].Y = points[9].Y = points[10].Y = center.Y - radiusY;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetPoints,The following statement contains a magic number: points[8].Y = points[9].Y = points[10].Y = center.Y - radiusY;
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,FillPixels,The following statement contains a magic number: foreach (var rc in rects) {  				for (var x = (int)rc.Left; x < rc.Right; x++) {    					var pixelTopColor = new Color { PackedValue = (uint)pixels [((int)rc.Top) * width + x] };  					var pixelBottomColor = new Color { PackedValue = (uint)pixels [((int)rc.Bottom-1) * width + x] };    					var topColor = brush.GetPixel (x' (int)rc.Top' width' height);  					var bottomColor = brush.GetPixel (x' (int)rc.Bottom' width' height);    					// Antialiazing' Top    					if (rc.Top > 0) {  						pixels [((int)rc.Top - 1) * width + x] = (int)Color.Lerp (pixelTopColor' topColor' .65f).PackedValue;  					}  					if (rc.Top > 1) {  						pixels [((int)rc.Top - 2) * width + x] = (int)Color.Lerp (pixelTopColor' topColor' .38f).PackedValue;  					}    					for (var y = (int)rc.Top; y < rc.Bottom; y++) {  						pixels [y * width + x] = (int)brush.GetPixel (x' y' width' height).PackedValue;  					}    					// Antialiazing' Bottom    					if (rc.Bottom < height)  						pixels [((int)rc.Bottom) * width + x] = (int)Color.Lerp (pixelBottomColor' bottomColor' .65f).PackedValue;  						  					if (rc.Bottom < height - 1)  						pixels [(int)(rc.Bottom + 1) * width + x] = (int)Color.Lerp (pixelBottomColor' bottomColor' .38f).PackedValue;  				}  			}
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var width = (int)Math.Ceiling (this.ActualWidth*2.0);
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var height = (int)Math.Ceiling (this.ActualHeight*2.0);
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var rcBackground = new Rect (  				(int)Math.Ceiling (this.BorderThickness.Left*2.0)'  				(int)Math.Ceiling (this.BorderThickness.Top*2.0)'  				(int)Math.Ceiling (this.ActualWidth*2.0 - this.BorderThickness.Left*2.0 - this.BorderThickness.Right*2.0)'  				(int)Math.Ceiling (this.ActualHeight*2.0 - this.BorderThickness.Top*2.0 - this.BorderThickness.Bottom*2.0));
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var rcBackground = new Rect (  				(int)Math.Ceiling (this.BorderThickness.Left*2.0)'  				(int)Math.Ceiling (this.BorderThickness.Top*2.0)'  				(int)Math.Ceiling (this.ActualWidth*2.0 - this.BorderThickness.Left*2.0 - this.BorderThickness.Right*2.0)'  				(int)Math.Ceiling (this.ActualHeight*2.0 - this.BorderThickness.Top*2.0 - this.BorderThickness.Bottom*2.0));
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var rcBackground = new Rect (  				(int)Math.Ceiling (this.BorderThickness.Left*2.0)'  				(int)Math.Ceiling (this.BorderThickness.Top*2.0)'  				(int)Math.Ceiling (this.ActualWidth*2.0 - this.BorderThickness.Left*2.0 - this.BorderThickness.Right*2.0)'  				(int)Math.Ceiling (this.ActualHeight*2.0 - this.BorderThickness.Top*2.0 - this.BorderThickness.Bottom*2.0));
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var rcBackground = new Rect (  				(int)Math.Ceiling (this.BorderThickness.Left*2.0)'  				(int)Math.Ceiling (this.BorderThickness.Top*2.0)'  				(int)Math.Ceiling (this.ActualWidth*2.0 - this.BorderThickness.Left*2.0 - this.BorderThickness.Right*2.0)'  				(int)Math.Ceiling (this.ActualHeight*2.0 - this.BorderThickness.Top*2.0 - this.BorderThickness.Bottom*2.0));
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var rcBackground = new Rect (  				(int)Math.Ceiling (this.BorderThickness.Left*2.0)'  				(int)Math.Ceiling (this.BorderThickness.Top*2.0)'  				(int)Math.Ceiling (this.ActualWidth*2.0 - this.BorderThickness.Left*2.0 - this.BorderThickness.Right*2.0)'  				(int)Math.Ceiling (this.ActualHeight*2.0 - this.BorderThickness.Top*2.0 - this.BorderThickness.Bottom*2.0));
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var rcBackground = new Rect (  				(int)Math.Ceiling (this.BorderThickness.Left*2.0)'  				(int)Math.Ceiling (this.BorderThickness.Top*2.0)'  				(int)Math.Ceiling (this.ActualWidth*2.0 - this.BorderThickness.Left*2.0 - this.BorderThickness.Right*2.0)'  				(int)Math.Ceiling (this.ActualHeight*2.0 - this.BorderThickness.Top*2.0 - this.BorderThickness.Bottom*2.0));
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var rcBackground = new Rect (  				(int)Math.Ceiling (this.BorderThickness.Left*2.0)'  				(int)Math.Ceiling (this.BorderThickness.Top*2.0)'  				(int)Math.Ceiling (this.ActualWidth*2.0 - this.BorderThickness.Left*2.0 - this.BorderThickness.Right*2.0)'  				(int)Math.Ceiling (this.ActualHeight*2.0 - this.BorderThickness.Top*2.0 - this.BorderThickness.Bottom*2.0));
Magic Number,System.Windows.Shapes,Ellipse,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Ellipse.cs,CreateRoundedRectangle,The following statement contains a magic number: var rcBackground = new Rect (  				(int)Math.Ceiling (this.BorderThickness.Left*2.0)'  				(int)Math.Ceiling (this.BorderThickness.Top*2.0)'  				(int)Math.Ceiling (this.ActualWidth*2.0 - this.BorderThickness.Left*2.0 - this.BorderThickness.Right*2.0)'  				(int)Math.Ceiling (this.ActualHeight*2.0 - this.BorderThickness.Top*2.0 - this.BorderThickness.Bottom*2.0));
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: var points = new Point[17];
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: double c_arcAsBezier = 0.5522847498307933984;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [1].X = points [0].X = points [15].X = points [14].X = rect.X;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [1].X = points [0].X = points [15].X = points [14].X = rect.X;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [2].X = points [13].X = rect.X + bezierX;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [2].X = points [13].X = rect.X + bezierX;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [3].X = points [12].X = rect.X + radiusX;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [3].X = points [12].X = rect.X + radiusX;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [4].X = points [11].X = rect.Right - radiusX;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [4].X = points [11].X = rect.Right - radiusX;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [5].X = points [10].X = rect.Right - bezierX;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [5].X = points [10].X = rect.Right - bezierX;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [6].X = points [7].X = points [8].X = points [9].X = rect.Right;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [6].X = points [7].X = points [8].X = points [9].X = rect.Right;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [6].X = points [7].X = points [8].X = points [9].X = rect.Right;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [6].X = points [7].X = points [8].X = points [9].X = rect.Right;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [2].Y = points [3].Y = points [4].Y = points [5].Y = rect.Y;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [2].Y = points [3].Y = points [4].Y = points [5].Y = rect.Y;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [2].Y = points [3].Y = points [4].Y = points [5].Y = rect.Y;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [2].Y = points [3].Y = points [4].Y = points [5].Y = rect.Y;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [1].Y = points [6].Y = rect.Y + bezierY;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [0].Y = points [7].Y = rect.Y + radiusY;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [15].Y = points [8].Y = rect.Bottom - radiusY;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [15].Y = points [8].Y = rect.Bottom - radiusY;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [14].Y = points [9].Y = rect.Bottom - bezierY;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [14].Y = points [9].Y = rect.Bottom - bezierY;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [13].Y = points [12].Y = points [11].Y = points [10].Y = rect.Bottom;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [13].Y = points [12].Y = points [11].Y = points [10].Y = rect.Bottom;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [13].Y = points [12].Y = points [11].Y = points [10].Y = rect.Bottom;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [13].Y = points [12].Y = points [11].Y = points [10].Y = rect.Bottom;
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetPoints,The following statement contains a magic number: points [16] = points [0];
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,GetRects,The following statement contains a magic number: for (var m = 0.0M; m <= 1.0M; m += .01M) {  				var t = (float)m;  				var i = 0;  				var p1 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 12;  				var p2 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 4;  				var p3 = GetCubicBezier (  					t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				i = 8;  				var p4 = GetCubicBezier (  					1 - t' points [0 + i]' points [1 + i]' points [2 + i]' points [3 + i]);    				var r1 = new Rect ((int)p1.X' (int)p1.Y' 1' (int)(p2.Y - p1.Y));  				var r2 = new Rect ((int)p3.X' (int)p3.Y' 1' (int)(p4.Y - p3.Y));    				if (Math.Floor (p1.X) != lastX1) {  					rcList.Add (r1);  					lastX1 = Math.Floor (p1.X);  				}    				if (Math.Floor (p3.X) != lastX2) {  					rcList.Add (r2);  					lastX2 = Math.Floor (p3.X);  				}    				if (t == 1.0)  					start = p1;  				else if (t == 0.0)  					end = p4;  			}
Magic Number,System.Windows.Shapes,Rectangle,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Rectangle.cs,FillPixels,The following statement contains a magic number: foreach (var rc in rects) {  				for (var x = (int)rc.Left; x < rc.Right && rc.Right <= width; x++) {    					var pixelTopColor = new Color { PackedValue = (uint)pixels [((int)rc.Top) * width + x] };  					var pixelBottomColor = new Color { PackedValue = (uint)pixels [((int)rc.Bottom-1) * width + x] };                        var topColor = getBrushPixel(x' (int)rc.Top);//brush.GetPixel (x' (int)rc.Top' width' height);                      var bottomColor = getBrushPixel(x' (int)rc.Bottom); //brush.GetPixel (x' (int)rc.Bottom' width' height);    					// Antialiazing' Top    					/*  					if (rc.Top > 0 ) {  						pixels [((int)rc.Top - 1) * width + x] = (int)Color.Lerp (pixelTopColor' topColor' .65f).PackedValue;  					}  					*/    					if (rc.Top > 1) {  						pixels [((int)rc.Top - 2) * width + x] = (int)Color.Lerp (pixelTopColor' topColor' .38f).PackedValue;  					}    					for (var y = (int)rc.Top; y < rc.Bottom; y++) {  						pixels [y * width + x] = ( int ) ( getBrushPixel ( x' y ) ).PackedValue;  					}    					// Antialiazing' Bottom    					if (rc.Bottom < height)  						pixels [((int)rc.Bottom) * width + x] = (int)Color.Lerp (pixelBottomColor' bottomColor' .65f).PackedValue;  						  					/*  					if (rc.Bottom < height - 1)  						pixels [(int)(rc.Bottom + 1) * width + x] = (int)Color.Lerp (pixelBottomColor' bottomColor' .38f).PackedValue;  						*/  				}  			}
Magic Number,System.Windows.Shapes,Shape,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Shape.cs,GetCubicBezier,The following statement contains a magic number: double cx = 3 * (p1.X - p0.X);
Magic Number,System.Windows.Shapes,Shape,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Shape.cs,GetCubicBezier,The following statement contains a magic number: double cy = 3 * (p1.Y - p0.Y);
Magic Number,System.Windows.Shapes,Shape,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Shape.cs,GetCubicBezier,The following statement contains a magic number: double bx = 3 * (p2.X - p1.X) - cx;
Magic Number,System.Windows.Shapes,Shape,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Shapes\Shape.cs,GetCubicBezier,The following statement contains a magic number: double by = 3 * (p2.Y - p1.Y) - cy;
Missing Default,System.Collections.Specialized,NotifyCollectionChangedEventArgs,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Collections\Specialized\NotifyCollectionChangedEventArgs.cs,NotifyCollectionChangedEventArgs,The following switch statement is missing a default case: switch (action) {                  case NotifyCollectionChangedAction.Add: {                          NewItems = changedItems;                          break;                      }                  case NotifyCollectionChangedAction.Remove: {                          OldItems = changedItems;                          break;                      }                  case NotifyCollectionChangedAction.Move: {                          throw new NotImplementedException();                      }                  case NotifyCollectionChangedAction.Replace: {                          throw new NotImplementedException();                      }                  case NotifyCollectionChangedAction.Reset: {                          OldItems = changedItems;                          break;                      }              }
Missing Default,System.Windows.Controls,ContentControl,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ContentControl.cs,GetAbsoluteLeft,The following switch statement is missing a default case: switch (this.HorizontalContentAlignment) {  					case HorizontalAlignment.Left:  						{  							return absLeft + this.Padding.Left - this.Padding.Right;  						}  					case HorizontalAlignment.Center:  						{  							return absLeft + this.ActualWidth / 2f - child.ActualWidth / 2f;  						}  					case HorizontalAlignment.Right:  						{  							return absLeft + ActualWidth - child.ActualWidth - this.Padding.Right + this.Padding.Left;  						}  				}
Missing Default,System.Windows.Controls,ContentControl,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ContentControl.cs,GetAbsoluteTop,The following switch statement is missing a default case: switch (this.VerticalContentAlignment) {  					case VerticalAlignment.Top:  						{  							return absTop + this.Padding.Top - this.Padding.Bottom;  						}  					case VerticalAlignment.Center:  						{  							return absTop + this.ActualHeight / 2f - child.ActualHeight / 2f;  						}  					case VerticalAlignment.Bottom:  						{  							return absTop + ActualHeight - child.ActualHeight + this.Padding.Top - this.Padding.Bottom;  						}  				}
Missing Default,System.Windows.Controls,ContentControl,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ContentControl.cs,Draw,The following switch statement is missing a default case: switch ( this.HorizontalContentAlignment ) {  							case HorizontalAlignment.Center: {  									newLeft = left + ((this.ActualWidth * .5f) - (textSize.Value.X * .5f)) + this.Padding.Left - this.Padding.Right;  									break;  							}  							case HorizontalAlignment.Left: {  									newLeft = left + this.Padding.Left - this.Padding.Right;  									break;  								}  							case HorizontalAlignment.Right:  								{  									newLeft = left + this.ActualWidth - textSize.Value.X + this.Padding.Left - this.Padding.Right;  									break;  								}  						}
Missing Default,System.Windows.Controls,ContentControl,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Controls\ContentControl.cs,Draw,The following switch statement is missing a default case: switch ( this.VerticalContentAlignment ) {  							case VerticalAlignment.Center: {  									newTop = top + ((this.ActualHeight * .5f) - (fontHeight * .5f)) + this.Padding.Top - this.Padding.Bottom;  									break;  								}  							case VerticalAlignment.Top: {  									newTop = top + this.Padding.Top - this.Padding.Bottom;  									break;  								}  							case VerticalAlignment.Bottom:  								{  									newTop = top + this.ActualHeight - fontHeight + this.Padding.Top - this.Padding.Bottom;  									break;  								}  						}
Missing Default,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseIn,The following switch statement is missing a default case: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseIn ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseIn ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseIn ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseIn ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseIn ( linearStep' 5 );              }
Missing Default,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseOut,The following switch statement is missing a default case: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseOut ( linearStep' 5 );              }
Missing Default,System.Windows.Media.Animation,Easing,C:\repos\ronnycsharp_WPFLight\WPFLight\System\Windows\Media\Animation\Easing.cs,EaseInOut,The following switch statement is missing a default case: switch ( type )              {                  case EasingType.Step:                      return linearStep < 0.5 ? 0 : 1;                  case EasingType.Linear:                      return (float)linearStep;                  case EasingType.Sine:                      return Sine.EaseInOut ( linearStep );                  case EasingType.Quadratic:                      return Power.EaseInOut ( linearStep' 2 );                  case EasingType.Cubic:                      return Power.EaseInOut ( linearStep' 3 );                  case EasingType.Quartic:                      return Power.EaseInOut ( linearStep' 4 );                  case EasingType.Quintic:                      return Power.EaseInOut ( linearStep' 5 );              }
