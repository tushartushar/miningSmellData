Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,UrlDecode,Cyclomatic complexity of the method is 12
Complex Method,OpenRasta.Codecs,CodecRepository,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRepository.cs,FindMediaTypeReader,Cyclomatic complexity of the method is 10
Complex Method,OpenRasta,UriTemplate,C:\repos\openrasta_openrasta-core\src\OpenRasta\UriTemplate.cs,IsEquivalentTo,Cyclomatic complexity of the method is 11
Complex Method,OpenRasta,UriTemplate,C:\repos\openrasta_openrasta-core\src\OpenRasta\UriTemplate.cs,Match,Cyclomatic complexity of the method is 15
Complex Method,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadNextPart,Cyclomatic complexity of the method is 8
Complex Method,OpenRasta.TypeSystem,PathManager,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\PathManager.cs,ReadComponents,Cyclomatic complexity of the method is 10
Complex Method,OpenRasta.TypeSystem.ReflectionBased,ReflectionBasedProperty,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionBasedProperty.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,OpenRasta.TypeSystem.ReflectionBased,ReflectionExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionExtensions.cs,CreateInstanceFrom,Cyclomatic complexity of the method is 11
Complex Method,OpenRasta.TypeSystem.ReflectionBased,ReflectionExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionExtensions.cs,GetTypeString,Cyclomatic complexity of the method is 8
Complex Method,OpenRasta.TypeSystem.ReflectionBased,ReflectionExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionExtensions.cs,CreateInstanceFromString,Cyclomatic complexity of the method is 16
Complex Method,OpenRasta.Web,MediaType,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\MediaType.cs,CompareTo,Cyclomatic complexity of the method is 14
Long Parameter List,OpenRasta.Codecs,CodecExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecExtensions.cs,TryAssignKeyValues,The method has 5 parameters. Parameters: codec' entity' binder' assigned' failed
Long Parameter List,OpenRasta.Codecs,CodecExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecExtensions.cs,TryAssignKeyValues,The method has 5 parameters. Parameters: codec' entity' binders' assigned' failed
Long Parameter List,OpenRasta.Codecs,CodecRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRegistration.cs,CodecRegistration,The method has 7 parameters. Parameters: codecType' resourceKey' isStrictRegistration' mediaType' extensions' codecConfiguration' isSystem
Long Parameter List,OpenRasta.Codecs,CodecRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRegistration.cs,FromResourceType,The method has 7 parameters. Parameters: resourceType' codecType' typeSystem' mediaType' extensions' codecConfiguration' isSystem
Long Parameter List,OpenRasta.Codecs,AbstractMultipartFormDataCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\multipart\form-data\AbstractMultipartFormDataCodec.cs,AbstractMultipartFormDataCodec,The method has 5 parameters. Parameters: context' codecs' container' typeSystem' binderLocator
Long Parameter List,OpenRasta.Codecs,MultipartFormDataKeyedValuesCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\multipart\form-data\MultipartFormDataKeyedValuesCodec.cs,MultipartFormDataKeyedValuesCodec,The method has 5 parameters. Parameters: context' codecs' container' typeSystem' binderLocator
Long Parameter List,OpenRasta.Codecs,MultipartFormDataObjectCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\multipart\form-data\MultipartFormDataObjectCodec.cs,MultipartFormDataObjectCodec,The method has 5 parameters. Parameters: context' codecs' container' typeSystem' binderLocator
Long Parameter List,OpenRasta.Diagnostics,DebuggerLoggingTraceListener,C:\repos\openrasta_openrasta-core\src\OpenRasta\Diagnostics\DebuggerLoggingTraceListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,OpenRasta.Diagnostics,DebuggerLoggingTraceListener,C:\repos\openrasta_openrasta-core\src\OpenRasta\Diagnostics\DebuggerLoggingTraceListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,OpenRasta.Diagnostics,DebuggerLoggingTraceListener,C:\repos\openrasta_openrasta-core\src\OpenRasta\Diagnostics\DebuggerLoggingTraceListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,OpenRasta.Diagnostics,DebuggerLoggingTraceListener,C:\repos\openrasta_openrasta-core\src\OpenRasta\Diagnostics\DebuggerLoggingTraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,OpenRasta.DI.Internal,DependencyRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\DI\Internal\DependencyRegistration.cs,DependencyRegistration,The method has 5 parameters. Parameters: serviceType' concreteType' lifetime' lifetimeManager' factory
Long Parameter List,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadUntil,The method has 5 parameters. Parameters: buffer' offset' count' marker' lastMatch
Long Parameter List,OpenRasta.IO,ByteArrayExtension,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\ByteArrayExtension.cs,Match,The method has 5 parameters. Parameters: source' sourceIndex' marker' markerIndex' count
Long Parameter List,OpenRasta.Web,TemplatedUriResolverLegacyExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\TemplatedUriResolverLegacyExtensions.cs,AddUriMapping,The method has 5 parameters. Parameters: resolver' uri' resourceKey' ci' uriName
Long Identifier,OpenRasta.Codecs,CodecRepository,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRepository.cs,FindMediaTypeReader,The length of the parameter totalDistanceToRequiredParameters is 33.
Long Identifier,OpenRasta.Codecs,CodecRepository,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRepository.cs,FindMediaTypeReader,The length of the parameter totalDistanceToOptionalParameters is 33.
Long Identifier,OpenRasta.Codecs,CodecRepository,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRepository.cs,FindMediaTypeReader,The length of the parameter totalOptionalParametersCompatibleWithCodec is 42.
Long Identifier,OpenRasta.Configuration,FluentConfigurator,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\OpenRastaConfiguration.cs,,The length of the parameter _lockConfigBecauseBadDesignDecision is 35.
Long Identifier,OpenRasta,UriTemplateTable,C:\repos\openrasta_openrasta-core\src\OpenRasta\UriTemplateTable.cs,MakeReadOnly,The length of the parameter allowDuplicateEquivalentUriTemplates is 36.
Long Identifier,OpenRasta.Hosting.HttpListener,HttpListenerHost,C:\repos\openrasta_openrasta-core\src\OpenRasta\Hosting\HttpListener\HttpListenerHost.cs,ProcessContext,The length of the parameter incomingRequestReceivedEventArgs is 32.
Long Identifier,OpenRasta.Hosting.InMemory,InMemoryHost,C:\repos\openrasta_openrasta-core\src\OpenRasta\Hosting\InMemory\InMemoryHost.cs,RaiseIncomingRequestReceived,The length of the parameter incomingRequestReceivedEventArgs is 32.
Long Identifier,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadNextPart,The length of the parameter continueToNextBoundaryOnEmptyRead is 33.
Long Identifier,OpenRasta.OperationModel.Filters,HttpMethodOperationFilter,C:\repos\openrasta_openrasta-core\src\OpenRasta\OperationModel\Filters\HttpMethodOperationFilter.cs,Process,The length of the parameter operationWithMatchingAttribute is 30.
Long Statement,OpenRasta.Authentication.Basic,BasicAuthenticationScheme,C:\repos\openrasta_openrasta-core\src\OpenRasta\Authentication\Basic\BasicAuthenticationScheme.cs,ExtractBasicHeader,The length of the statement  "                return new BasicAuthRequestHeader(basicCredentials.Substring(0' semiPosition)' basicCredentials.Substring(semiPosition+1)); " is 123.
Long Statement,OpenRasta.Binding,ChangeSetBinder<T>,C:\repos\openrasta_openrasta-core\src\OpenRasta\Binding\ChangeSetBinder.cs,SetInstance,The length of the statement  "            // TODO: Flatten the object back into key/value pairs to support changeset for codecs that don't support IKeyedValuesMediaTypeReader " is 132.
Long Statement,OpenRasta.Binding,DefaultObjectBinderLocator,C:\repos\openrasta_openrasta-core\src\OpenRasta\Binding\DefaultObjectBinderLocator.cs,GetBinder,The length of the statement  "            var abstractObjectBinderAttribute = member.FindAttribute<BinderAttribute>() ?? member.Type.FindAttribute<BinderAttribute>(); " is 124.
Long Statement,OpenRasta.Codecs,CodecExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecExtensions.cs,TryAssignKeyValues,The length of the statement  "            return binders.Aggregate(false' (result' binder) => codec.TryAssignKeyValues(entity' binder' assigned' failed) || result); " is 122.
Long Statement,OpenRasta.Codecs,CodecRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRegistration.cs,Equals,The length of the statement  "            return Equals(other.ResourceKey' ResourceKey) && Equals(other.CodecType' CodecType) && Equals(other.MediaType' MediaType) && other.IsStrict.Equals(IsStrict) && " is 159.
Long Statement,OpenRasta.Codecs,AbstractMultipartFormDataCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\multipart\form-data\AbstractMultipartFormDataCodec.cs,ConvertValues,The length of the statement  "            // defaults the entity to UTF-8 if none is specified' to account for browsers favouring using the charset of the origin page rather than the standard. Cause RFCs are too difficult to follow uh... " is 195.
Long Statement,OpenRasta.Configuration,UsesExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\UsesExtensions.cs,CustomDependency,The length of the statement  "            fluentTarget.Repository.CustomRegistrations.Add(new DependencyRegistrationModel(typeof(TService)' typeof(TConcrete)' lifetime)); " is 128.
Long Statement,OpenRasta.Configuration,UsesExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\UsesExtensions.cs,UriDecorator,The length of the statement  "            fluentTarget.Repository.CustomRegistrations.Add(new DependencyRegistrationModel(typeof(IUriDecorator)' typeof(TDecorator)' DependencyLifetime.Transient)); " is 154.
Long Statement,OpenRasta.Configuration.MetaModel,ResourceModel,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\MetaModel\ResourceModel.cs,ToString,The length of the statement  "              $"ResourceKey: {ResourceKey}' Uris: {Uris.Aggregate(string.Empty' (str' reg) => str + reg + ";")}' Handlers: {Handlers.Aggregate(string.Empty' (str' reg) => str + reg + ";")}' Codecs: {Codecs.Aggregate(string.Empty' (str' reg) => str + reg + ";")}"; " is 249.
Long Statement,OpenRasta.Configuration.MetaModel.Handlers,CodecMetaModelHandler,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\MetaModel\Handlers\CodecMetaModelHandler.cs,PreProcess,The length of the statement  "                    throw new OpenRastaConfigurationException("The codec doesn't have any media type associated explicitly in the meta model and doesnt have any MediaType attribute."); " is 164.
Long Statement,OpenRasta.DI.Internal,ObjectBuilder,C:\repos\openrasta_openrasta-core\src\OpenRasta\DI\Internal\ObjectBuilder.cs,CreateObject,The length of the statement  "        $"Could not resolve type {registration.ConcreteType.Name} because its dependencies couldn't be fullfilled\r\n{unresolvedDependenciesMessage}"); " is 143.
Long Statement,OpenRasta,UriTemplate,C:\repos\openrasta_openrasta-core\src\OpenRasta\UriTemplate.cs,ParseSegments,The length of the statement  "                    parsedSegment = new UrlSegment {Text = variableName' OriginalText = sanitizedSegment' Type = SegmentType.Variable' TrailingSeparator = trailingSeparator}; " is 154.
Long Statement,OpenRasta,UriTemplate,C:\repos\openrasta_openrasta-core\src\OpenRasta\UriTemplate.cs,ParseSegments,The length of the statement  "                    parsedSegment = new UrlSegment {Text = sanitizedSegment' OriginalText = sanitizedSegment' Type = SegmentType.Literal' TrailingSeparator = trailingSeparator}; " is 157.
Long Statement,OpenRasta.Handlers,HandlerRepository,C:\repos\openrasta_openrasta-core\src\OpenRasta\Handlers\HandlerRepository.cs,AddResourceHandler,The length of the statement  "            if (resourceKey is Type) throw new ArgumentException("Cannot register a type as the key. NotifyAsync an IType instead."' "resourceKey"); " is 136.
Long Statement,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadUntil,The length of the statement  "            int maxReadLength = count > _localBuffer.Length - _localBufferLength ? _localBuffer.Length - _localBufferLength : count; " is 120.
Long Statement,OpenRasta.IO,ByteArrayExtension,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\ByteArrayExtension.cs,Match,The length of the statement  "                    if (sourceCurrentIndex + markerCurrentIndex >= endOfArray || source[sourceCurrentIndex + markerCurrentIndex] != marker[markerCurrentIndex]) // match " is 148.
Long Statement,OpenRasta.OperationModel,OperationExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\OperationModel\OperationExtensions.cs,Intercept,The length of the statement  "      return new AsyncOperationWithInterceptors(operation' systemInterceptors ?? Enumerable.Empty<IOperationInterceptorAsync>()); " is 123.
Long Statement,OpenRasta.OperationModel.CodecSelectors,RequestCodecSelector,C:\repos\openrasta_openrasta-core\src\OpenRasta\OperationModel\CodecSelectors\RequestCodecSelector.cs,LogSelected,The length of the statement  "                    Logger.WriteInfo("Operation {0} selected with {1} required members and {2} optional members' with codec {3} with score {4}."' " is 125.
Long Statement,OpenRasta.OperationModel.Filters,HttpMethodOperationFilter,C:\repos\openrasta_openrasta-core\src\OpenRasta\OperationModel\Filters\HttpMethodOperationFilter.cs,Process,The length of the statement  "            Log.WriteDebug("Found {0} operation(s) with matching [HttpOperation] attribute."' operationWithMatchingAttribute.Count()); " is 122.
Long Statement,OpenRasta.OperationModel.Filters,UriParametersFilter,C:\repos\openrasta_openrasta-core\src\OpenRasta\OperationModel\Filters\UriParametersFilter.cs,CreateErrorNoOperationFound,The length of the statement  "                $"None of the operations had members that could be matches against the uri parameters:\r\n{FormatUriParameterMatches(uriTemplateParameters)}" " is 141.
Long Statement,OpenRasta.Pipeline,ResponseRetryMiddleware,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\ResponseRetryMiddleware.cs,InvokeWithErrorConneg,The length of the statement  "      log.WriteInfo($"Exception: {exceptionHappened}' Errors: {env.ServerErrors.Count()}' State: {env.PipelineData.PipelineStage.CurrentState}"); " is 139.
Long Statement,OpenRasta.Pipeline.CallGraph,WeightedCallGraphGenerator,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\CallGraph\WeightedCallGraphGenerator.cs,GenerateCallGraph,The length of the statement  "          contributorBuilder.ContributorRegistrations.DefaultIfEmpty(new Notification(Middleware.IdentitySingleTap' contributors)).ToList(); " is 130.
Long Statement,OpenRasta.Pipeline.Contributors,AuthenticationContributor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\Contributors\AuthenticationContributor.cs,AuthoriseRequest,The length of the statement  "            var schemeToUse = authenticators.SingleOrDefault(scheme => string.Equals(scheme.Name' requestedAuthSchemeName' StringComparison.InvariantCultureIgnoreCase)); " is 157.
Long Statement,OpenRasta.Pipeline.Contributors,ResourceTypeResolverContributor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\Contributors\ResourceTypeResolverContributor.cs,ResolveResource,The length of the statement  "                  $"Not resolving any resource as a resource with key {context.PipelineData.SelectedResource.ResourceKey} has already been selected."); " is 133.
Long Statement,OpenRasta.Pipeline.Contributors,ResponseEntityCodecResolverContributor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\Contributors\ResponseEntityCodecResolverContributor.cs,ResponseEntityHasNoCodec,The length of the statement  "          $"Content-type negotiation failed. Resource {responseEntityType} doesn't have any codec for the content-types in the accept header:\r\n{acceptHeader}" " is 150.
Long Statement,OpenRasta.Pipeline.Contributors,ResponseEntityCodecResolverContributor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\Contributors\ResponseEntityCodecResolverContributor.cs,LogCodecSelected,The length of the statement  "        $"Selected codec {negotiatedCodec.CodecType.Name} out of {codecsCount} codecs for entity of type {responseEntityType.Name} and negotiated media type {negotiatedCodec.MediaType}."); " is 180.
Long Statement,OpenRasta.Pipeline.Contributors,UriDecoratorsContributor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\Contributors\UriDecoratorsContributor.cs,ProcessDecorators,The length of the statement  "             * Whenever a decorator that succeeded has changed the url' we reprocess all the decorators that failed before with the new url. " is 127.
Long Statement,OpenRasta.Reflection,ExpressionExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Reflection\ExpressionExtensions.cs,ResolveReferences,The length of the statement  "            return (T)new SubtreeEvaluator(new SubtreeNominator(e => e.NodeType != ExpressionType.Parameter).Nominate(expression)).Eval(expression); " is 136.
Long Statement,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeQuotedPrintable,The length of the statement  "                    byteToAdd = byte.Parse(textToDecode[i+1] + "" + textToDecode[i + 2]' NumberStyles.HexNumber'CultureInfo.InvariantCulture); " is 122.
Long Statement,OpenRasta.TypeSystem,PropertyExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\PropertyExtensions.cs,FindPropertyByPath,The length of the statement  "            foreach (var parseResult in source.TypeSystem.PathManager.ReadComponents(propertyName).Where(x => x.Type != PathComponentType.None)) " is 132.
Long Statement,OpenRasta.TypeSystem.ReflectionBased,ReflectionBasedMember<T>,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionBasedMember.cs,GetIndexer,The length of the statement  "            return indexer != null ? SurrogateProperty(new ReflectionBasedProperty(TypeSystem' this' indexer.Value.Key' indexer.Value.Value)) : null; " is 137.
Long Statement,OpenRasta.TypeSystem.ReflectionBased,ReflectionBasedMember<T>,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionBasedMember.cs,VerifyMethodsInitialized,The length of the statement  "                        var allProperties = TargetType.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 144.
Long Statement,OpenRasta.TypeSystem.ReflectionBased,ReflectionBasedMember<T>,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionBasedMember.cs,VerifyMethodsInitialized,The length of the statement  "                        _methodsCache = (from method in TargetType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy) " is 152.
Long Statement,OpenRasta.TypeSystem.ReflectionBased,ReflectionBasedMethod,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionBasedMethod.cs,ToString,The length of the statement  "              $"{Owner.TypeName}::{_methodInfo.Name}({string.Join("' "' _methodInfo.GetParameters().Select(x => $"{x.ParameterType.Name} {x.Name}").ToArray())})"; " is 148.
Long Statement,OpenRasta.TypeSystem.ReflectionBased,ReflectionExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionExtensions.cs,GetTypeString,The length of the statement  "            $"{type.Name} is a generic type definition and does not have a type string.\r\nTry providing a constructed generic type instead."); " is 131.
Long Statement,OpenRasta.Web,ContentDispositionHeader,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\ContentDispositionHeader.cs,GetHashCode,The length of the statement  "            return (Disposition ?? string.Empty).GetHashCode() ^ (Name ?? string.Empty).GetHashCode() ^ (FileName ?? string.Empty).GetHashCode(); " is 133.
Long Statement,OpenRasta.Web,IUriResolverExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\IUriResolverExtensions.cs,CreateUri,The length of the statement  "            return target.CreateUri(DependencyManager.GetService<ICommunicationContext>().ApplicationBaseUri' uriName' additionalProperties); " is 129.
Long Statement,OpenRasta.Web.Markup.Attributes.Annotations,ContentTypeAttribute,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Attributes\Annotations\ContentTypeAttribute.cs,Factory,The length of the statement  "            return () => (IAttribute)new XhtmlAttributeNode<MediaType>(propertyName' false' m => m.ToString()' s => new MediaType(s)); " is 122.
Long Statement,OpenRasta.Web.Markup.Attributes.Annotations,ContentTypesAttribute,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Attributes\Annotations\ContentTypesAttribute.cs,Factory,The length of the statement  "            return () => (IAttribute)new CharacterSeparatedAttributeNode<MediaType>(name' "'"' m => m.ToString()' s => new MediaType(s)); " is 125.
Long Statement,OpenRasta.Web.Markup.Attributes,URIAttribute,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Attributes\Annotations\URIAttribute.cs,Factory,The length of the statement  "            return () => (IAttribute)new XhtmlAttributeNode<Uri>(propertyName' _renderOnDefault' u => u.ToString()' s => new Uri(s' UriKind.RelativeOrAbsolute)); " is 149.
Long Statement,OpenRasta.Web.Markup.Attributes,URIsAttribute,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Attributes\Annotations\URIsAttribute.cs,Factory,The length of the statement  "            return () => (IAttribute) new CharacterSeparatedAttributeNode<Uri>(propertyName'" "' u => u.ToString()' s => new Uri(s' UriKind.Absolute)); " is 139.
Long Statement,OpenRasta.Web.Markup.Attributes,XhtmlAttributeCollection,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Attributes\XhtmlAttributeCollection.cs,CreateAttribute,The length of the statement  "                return (IAttribute<T>)new XhtmlAttributeNode<MediaType>(name' false' media => media.ToString()' str => new MediaType(str)); " is 123.
Long Statement,OpenRasta.Web.Markup.Attributes,XhtmlAttributeCollection,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Attributes\XhtmlAttributeCollection.cs,CreateAttribute,The length of the statement  "                return (IAttribute<T>)new CharacterSeparatedAttributeNode<Uri>(name' " "' uri => uri.ToString()' s => new Uri(s' UriKind.Absolute)); " is 132.
Long Statement,OpenRasta.Web.Markup.Attributes,XhtmlAttributeCollection,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Attributes\XhtmlAttributeCollection.cs,CreateAttribute,The length of the statement  "                return (IAttribute<T>)new CharacterSeparatedAttributeNode<MediaType>(name' " "' mediatype => mediatype.ToString()' str => new MediaType(str)); " is 142.
Long Statement,OpenRasta.Web.Markup,Document,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Document.cs,GetAllowedAttributesFor,The length of the statement  "                                let attrib = attribs.Where(a => typeof (XhtmlAttributeCore).IsAssignableFrom(a.GetType())).FirstOrDefault() as XhtmlAttributeCore " is 129.
Long Statement,OpenRasta.Web.Markup,Document,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Document.cs,GetAllowedAttributesFor,The length of the statement  "            return allAttributes.Distinct().ToDictionary(key => key.prop.Name' val => val.attrib.Factory(val.prop)' StringComparer.OrdinalIgnoreCase); " is 138.
Long Statement,OpenRasta.Web.Markup,Document,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Document.cs,GetContentModelFor,The length of the statement  "            foreach(var interfaceType in typeof(T).GetInterfaces().Where(i=>i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IContentModel<'>))) " is 141.
Long Statement,OpenRasta.Web.Markup,ExpressionTreeXhtmlExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\ExpressionTreeXhtmlExtensions.cs,TextArea,The length of the statement  "            return Document.CreateElement<ITextAreaElement>().Name(expressionTree.FullPath)[expressionTree.Value.ConvertToString()]; " is 120.
Long Statement,OpenRasta.Web.Markup,ExpressionTreeXhtmlExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\ExpressionTreeXhtmlExtensions.cs,Select,The length of the statement  "            return Select(hook' propertyName' options.Select(kv => Document.CreateElement<IOptionElement>().Value(kv.Key)[kv.Value]).ToList()); " is 131.
Long Statement,OpenRasta.Web.Markup,ExpressionTreeXhtmlExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\ExpressionTreeXhtmlExtensions.cs,Select,The length of the statement  "            if (et.PropertyType.IsGenericType && et.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>) && (enumType = et.PropertyType.GetGenericArguments()[0]).IsEnum) " is 166.
Long Statement,OpenRasta.Web.Markup,ExpressionTreeXhtmlExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\ExpressionTreeXhtmlExtensions.cs,Select,The length of the statement  "                throw new InvalidOperationException("Cannot automatically generate select entries if the type is not an enumeration or a nullable enumeration."); " is 145.
Long Statement,OpenRasta.Web.Markup,IElementExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\IElement.cs,Attr,The length of the statement  "            if (element.Attributes[attributeName] == null) element.Attributes[attributeName] = new PrimaryTypeAttributeNode<string>(attributeName' true); " is 141.
Complex Conditional,OpenRasta.Codecs,ApplicationOctetStreamCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\octet-stream\ApplicationOctetStreamCodec.cs,WriteFileWithFilenameAsync,The conditional expression  "file.ContentType != null && file.ContentType != MediaType.ApplicationOctetStream                  || (file.ContentType == MediaType.ApplicationOctetStream && response.ContentType == null)"  is complex.
Complex Conditional,OpenRasta.Codecs,ApplicationOctetStreamCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\octet-stream\ApplicationOctetStreamCodec.cs,WriteFileWithFilename,The conditional expression  "file.ContentType != null && file.ContentType != MediaType.ApplicationOctetStream            || (file.ContentType == MediaType.ApplicationOctetStream && response.ContentType == null)"  is complex.
Complex Conditional,OpenRasta.Pipeline.Contributors,ResponseEntityWriterContributor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\Contributors\ResponseEntityWriterContributor.cs,PadErrorMessageForIE,The conditional expression  "(context.OperationResult.IsClientError || context.OperationResult.IsServerError)            && context.Response.Entity.Stream.CanSeek            && context.Response.Entity.ContentType == MediaType.Html            && context.Response.Entity.Stream.Length <= 512"  is complex.
Complex Conditional,OpenRasta.Security,PrincipalAuthorizationInterceptor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Security\PrincipalAuthorizationAttribute.cs,BeforeExecute,The conditional expression  "(InRoles == null || InRoles.Length == 0) && (Users == null || Users.Length == 0)"  is complex.
Complex Conditional,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeTextToken,The conditional expression  "(encoding == 'Q' || encoding == 'q') && i + 1 < textToDecode.Length && textToDecode[i + 1] == '?'"  is complex.
Complex Conditional,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeTextToken,The conditional expression  "(encoding == 'B' || encoding == 'b') && i + 1 < textToDecode.Length && textToDecode[i + 1] == '?'"  is complex.
Complex Conditional,OpenRasta.TypeSystem.ReflectionBased,ReflectionBasedProperty,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionBasedProperty.cs,Equals,The conditional expression  "(PropertyParameters == null && other.PropertyParameters != null)                  || (PropertyParameters != null && other.PropertyParameters == null)                  || (PropertyParameters != null && PropertyParameters.Length != other.PropertyParameters.Length)"  is complex.
Complex Conditional,OpenRasta.Web,MultipartReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\MultipartReader.cs,ReadEntity,The conditional expression  "ReadNextLine() && !string.IsNullOrEmpty(_currentLine) && !AtBoundary && !AtEndBoundary"  is complex.
Virtual Method Call from Constructor,OpenRasta.Configuration,DefaultDependencyRegistrar,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\DefaultDependencyRegistrar.cs,DefaultDependencyRegistrar,The constructor "DefaultDependencyRegistrar" calls a virtual method "AddDefaultCodecs".
Virtual Method Call from Constructor,OpenRasta.Configuration,DefaultDependencyRegistrar,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\DefaultDependencyRegistrar.cs,DefaultDependencyRegistrar,The constructor "DefaultDependencyRegistrar" calls a virtual method "AddDefaultContributors".
Virtual Method Call from Constructor,OpenRasta.Configuration,DefaultDependencyRegistrar,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\DefaultDependencyRegistrar.cs,DefaultDependencyRegistrar,The constructor "DefaultDependencyRegistrar" calls a virtual method "AddCSharpCodeSnippetModifiers".
Virtual Method Call from Constructor,OpenRasta.Configuration,DefaultDependencyRegistrar,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\DefaultDependencyRegistrar.cs,DefaultDependencyRegistrar,The constructor "DefaultDependencyRegistrar" calls a virtual method "AddDefaultMetaModelHandlers".
Virtual Method Call from Constructor,OpenRasta.Configuration,DefaultDependencyRegistrar,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\DefaultDependencyRegistrar.cs,DefaultDependencyRegistrar,The constructor "DefaultDependencyRegistrar" calls a virtual method "AddOperationFilters".
Virtual Method Call from Constructor,OpenRasta.Configuration,DefaultDependencyRegistrar,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\DefaultDependencyRegistrar.cs,DefaultDependencyRegistrar,The constructor "DefaultDependencyRegistrar" calls a virtual method "AddOperationHydrators".
Virtual Method Call from Constructor,OpenRasta.Configuration,DefaultDependencyRegistrar,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\DefaultDependencyRegistrar.cs,DefaultDependencyRegistrar,The constructor "DefaultDependencyRegistrar" calls a virtual method "AddOperationCodecResolvers".
Virtual Method Call from Constructor,OpenRasta.Configuration,DefaultDependencyRegistrar,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\DefaultDependencyRegistrar.cs,DefaultDependencyRegistrar,The constructor "DefaultDependencyRegistrar" calls a virtual method "AddLogSources".
Virtual Method Call from Constructor,OpenRasta.Hosting.InMemory,InMemoryHost,C:\repos\openrasta_openrasta-core\src\OpenRasta\Hosting\InMemory\InMemoryHost.cs,InMemoryHost,The constructor "InMemoryHost" calls a virtual method "RaiseStart".
Empty Catch Block,OpenRasta.Collections,EnumerableExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Collections\EnumerableExtensions.cs,ToCollection,The method has an empty catch block.
Empty Catch Block,OpenRasta.Hosting,AppDomainHost<T>,C:\repos\openrasta_openrasta-core\src\OpenRasta\Hosting\HttpListener\AppDomainHost.cs,Dispose,The method has an empty catch block.
Empty Catch Block,OpenRasta.Reflection,PropertyPathForInstance<TProperty>,C:\repos\openrasta_openrasta-core\src\OpenRasta\Reflection\PropertyPathForInstance.cs,PropertyPathForInstance,The method has an empty catch block.
Empty Catch Block,OpenRasta.Reflection,PropertyPathVisitor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Reflection\PropertyPathVisitor.cs,VisitMemberAccess,The method has an empty catch block.
Empty Catch Block,OpenRasta.Security,PrincipalAuthorizationInterceptor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Security\PrincipalAuthorizationAttribute.cs,BeforeExecute,The method has an empty catch block.
Empty Catch Block,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeTextToken,The method has an empty catch block.
Empty Catch Block,OpenRasta.TypeSystem.ReflectionBased,ReflectionExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\TypeSystem\ReflectionBased\ReflectionExtensions.cs,CreateInstanceFromString,The method has an empty catch block.
Empty Catch Block,OpenRasta.Web,MediaType,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\MediaType.cs,Parse,The method has an empty catch block.
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append((char[])GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte)xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append((char[])GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append((char[])GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte)xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append((char[])GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append((char[])GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte)xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append((char[])GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append((char[])GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte)xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append((char[])GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append((char[])GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte)xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append((char[])GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append((char[])GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte)xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append((char[])GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (s[i] == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          if (bytes.Length > 0)                          {                              output.Append((char[])GetChars(bytes' e));                              bytes.SetLength(0);                          }                            xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                          }                          else                          {                              output.Append('%');                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          bytes.WriteByte((byte)xchar);                          i += 2;                      }                      else                      {                          output.Append('%');                      }                      continue;                  }                    if (bytes.Length > 0)                  {                      output.Append((char[])GetChars(bytes' e));                      bytes.SetLength(0);                  }                    if (s[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append(s[i]);                  }              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  int current = GetInt(bytes[i]);                  if (current == -1)                      return -1;                  value = (value << 4) + current;              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')                  return c - 'a' + 10;
Magic Number,OpenRasta.Codecs,AbstractApplicationXWwwFormUrlencodedCodec,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\application\x-www-form-urlencoded\AbstractApplicationXWwwFormUrlencodedCodec.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')                  return c - 'A' + 10;
Magic Number,OpenRasta.Codecs,CodecRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRegistration.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = ResourceKey != null ? ResourceKey.GetHashCode() : 0;                  result = (result * 397) ^ (CodecType != null ? CodecType.GetHashCode() : 0);                  result = (result * 397) ^ (MediaType != null ? MediaType.GetHashCode() : 0);                  result = (result * 397) ^ IsStrict.GetHashCode();                  result = (result * 397) ^ (Extensions != null ? Extensions.GetHashCode() : 0);                  result = (result * 397) ^ (Configuration != null ? Configuration.GetHashCode() : 0);                  result = (result * 397) ^ IsSystem.GetHashCode();                  return result;              }
Magic Number,OpenRasta.Codecs,CodecRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRegistration.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = ResourceKey != null ? ResourceKey.GetHashCode() : 0;                  result = (result * 397) ^ (CodecType != null ? CodecType.GetHashCode() : 0);                  result = (result * 397) ^ (MediaType != null ? MediaType.GetHashCode() : 0);                  result = (result * 397) ^ IsStrict.GetHashCode();                  result = (result * 397) ^ (Extensions != null ? Extensions.GetHashCode() : 0);                  result = (result * 397) ^ (Configuration != null ? Configuration.GetHashCode() : 0);                  result = (result * 397) ^ IsSystem.GetHashCode();                  return result;              }
Magic Number,OpenRasta.Codecs,CodecRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRegistration.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = ResourceKey != null ? ResourceKey.GetHashCode() : 0;                  result = (result * 397) ^ (CodecType != null ? CodecType.GetHashCode() : 0);                  result = (result * 397) ^ (MediaType != null ? MediaType.GetHashCode() : 0);                  result = (result * 397) ^ IsStrict.GetHashCode();                  result = (result * 397) ^ (Extensions != null ? Extensions.GetHashCode() : 0);                  result = (result * 397) ^ (Configuration != null ? Configuration.GetHashCode() : 0);                  result = (result * 397) ^ IsSystem.GetHashCode();                  return result;              }
Magic Number,OpenRasta.Codecs,CodecRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRegistration.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = ResourceKey != null ? ResourceKey.GetHashCode() : 0;                  result = (result * 397) ^ (CodecType != null ? CodecType.GetHashCode() : 0);                  result = (result * 397) ^ (MediaType != null ? MediaType.GetHashCode() : 0);                  result = (result * 397) ^ IsStrict.GetHashCode();                  result = (result * 397) ^ (Extensions != null ? Extensions.GetHashCode() : 0);                  result = (result * 397) ^ (Configuration != null ? Configuration.GetHashCode() : 0);                  result = (result * 397) ^ IsSystem.GetHashCode();                  return result;              }
Magic Number,OpenRasta.Codecs,CodecRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRegistration.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = ResourceKey != null ? ResourceKey.GetHashCode() : 0;                  result = (result * 397) ^ (CodecType != null ? CodecType.GetHashCode() : 0);                  result = (result * 397) ^ (MediaType != null ? MediaType.GetHashCode() : 0);                  result = (result * 397) ^ IsStrict.GetHashCode();                  result = (result * 397) ^ (Extensions != null ? Extensions.GetHashCode() : 0);                  result = (result * 397) ^ (Configuration != null ? Configuration.GetHashCode() : 0);                  result = (result * 397) ^ IsSystem.GetHashCode();                  return result;              }
Magic Number,OpenRasta.Codecs,CodecRegistration,C:\repos\openrasta_openrasta-core\src\OpenRasta\Codecs\CodecRegistration.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = ResourceKey != null ? ResourceKey.GetHashCode() : 0;                  result = (result * 397) ^ (CodecType != null ? CodecType.GetHashCode() : 0);                  result = (result * 397) ^ (MediaType != null ? MediaType.GetHashCode() : 0);                  result = (result * 397) ^ IsStrict.GetHashCode();                  result = (result * 397) ^ (Extensions != null ? Extensions.GetHashCode() : 0);                  result = (result * 397) ^ (Configuration != null ? Configuration.GetHashCode() : 0);                  result = (result * 397) ^ IsSystem.GetHashCode();                  return result;              }
Magic Number,OpenRasta.Configuration,FluentConfigurator,C:\repos\openrasta_openrasta-core\src\OpenRasta\Configuration\OpenRastaConfiguration.cs,FluentConfigurator,The following statement contains a magic number: if (!Monitor.TryEnter(_lockConfigBecauseBadDesignDecision' TimeSpan.FromSeconds(5)))          {            throw new TimeoutException("Could not acquire lock for Manual configuration.");          }
Magic Number,OpenRasta.DI.Internal,RequestContextRegistrations,C:\repos\openrasta_openrasta-core\src\OpenRasta\DI\Internal\RequestContextRegistrations.cs,RequestContextRegistrations,The following statement contains a magic number: _lifetimes = new Dictionary<DependencyLifetime' DependencyLifetimeManager>(3)        {          {DependencyLifetime.PerRequest' singleton}'          {DependencyLifetime.Singleton' singleton}'          {DependencyLifetime.Transient' new TransientLifetimeManager()}        };
Magic Number,OpenRasta,UriTemplate,C:\repos\openrasta_openrasta-core\src\OpenRasta\UriTemplate.cs,GetVariableName,The following statement contains a magic number: if (segmentText.Length > 2 && segmentText[0] == '{' && segmentText[segmentText.Length - 1] == '}')                  result = segmentText.Substring(1' segmentText.Length - 2);
Magic Number,OpenRasta,UriTemplate,C:\repos\openrasta_openrasta-core\src\OpenRasta\UriTemplate.cs,GetVariableName,The following statement contains a magic number: if (segmentText.Length > 2 && segmentText[0] == '{' && segmentText[segmentText.Length - 1] == '}')                  result = segmentText.Substring(1' segmentText.Length - 2);
Magic Number,OpenRasta.Hosting.HttpListener,HttpListenerHost,C:\repos\openrasta_openrasta-core\src\OpenRasta\Hosting\HttpListener\HttpListenerHost.cs,Dispose,The following statement contains a magic number: _zeroPendingRequests.WaitOne(TimeSpan.FromSeconds(5));
Magic Number,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,BoundaryStreamReader,The following statement contains a magic number: if (bufferLength < boundary.Length + 6)                  throw new ArgumentOutOfRangeException("bufferLength"' "The buffer needs to be big enough to contain the boundary and control characters (6 bytes)");
Magic Number,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadNextPart,The following statement contains a magic number: while ((lastRead = ReadUntil(destinationStream' _beginBoundary' false' out markerFound)) >= 0)              {                  bytesRead += lastRead;                  if (markerFound)                  {                      BaseStream.Read(new byte[2]' 0' 2);                        string line = ReadLine();                        if (AtBoundary || AtEndBoundary)                      {                          if (bytesRead == 0 && continueToNextBoundaryOnEmptyRead) // no data between boundaries                              continue;                          break;                      }                        destinationStream.Write(_newLine' 0' 2);                      var encodedLine = Encoding.GetBytes(line);                      destinationStream.Write(encodedLine' 0' encodedLine.Length);                      destinationStream.Write(_newLine' 0' 2);                      bytesRead += encodedLine.Length + 4;                  }                  else                  {                      break;                  }              }
Magic Number,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadNextPart,The following statement contains a magic number: while ((lastRead = ReadUntil(destinationStream' _beginBoundary' false' out markerFound)) >= 0)              {                  bytesRead += lastRead;                  if (markerFound)                  {                      BaseStream.Read(new byte[2]' 0' 2);                        string line = ReadLine();                        if (AtBoundary || AtEndBoundary)                      {                          if (bytesRead == 0 && continueToNextBoundaryOnEmptyRead) // no data between boundaries                              continue;                          break;                      }                        destinationStream.Write(_newLine' 0' 2);                      var encodedLine = Encoding.GetBytes(line);                      destinationStream.Write(encodedLine' 0' encodedLine.Length);                      destinationStream.Write(_newLine' 0' 2);                      bytesRead += encodedLine.Length + 4;                  }                  else                  {                      break;                  }              }
Magic Number,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadNextPart,The following statement contains a magic number: while ((lastRead = ReadUntil(destinationStream' _beginBoundary' false' out markerFound)) >= 0)              {                  bytesRead += lastRead;                  if (markerFound)                  {                      BaseStream.Read(new byte[2]' 0' 2);                        string line = ReadLine();                        if (AtBoundary || AtEndBoundary)                      {                          if (bytesRead == 0 && continueToNextBoundaryOnEmptyRead) // no data between boundaries                              continue;                          break;                      }                        destinationStream.Write(_newLine' 0' 2);                      var encodedLine = Encoding.GetBytes(line);                      destinationStream.Write(encodedLine' 0' encodedLine.Length);                      destinationStream.Write(_newLine' 0' 2);                      bytesRead += encodedLine.Length + 4;                  }                  else                  {                      break;                  }              }
Magic Number,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadNextPart,The following statement contains a magic number: while ((lastRead = ReadUntil(destinationStream' _beginBoundary' false' out markerFound)) >= 0)              {                  bytesRead += lastRead;                  if (markerFound)                  {                      BaseStream.Read(new byte[2]' 0' 2);                        string line = ReadLine();                        if (AtBoundary || AtEndBoundary)                      {                          if (bytesRead == 0 && continueToNextBoundaryOnEmptyRead) // no data between boundaries                              continue;                          break;                      }                        destinationStream.Write(_newLine' 0' 2);                      var encodedLine = Encoding.GetBytes(line);                      destinationStream.Write(encodedLine' 0' encodedLine.Length);                      destinationStream.Write(_newLine' 0' 2);                      bytesRead += encodedLine.Length + 4;                  }                  else                  {                      break;                  }              }
Magic Number,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadNextPart,The following statement contains a magic number: while ((lastRead = ReadUntil(destinationStream' _beginBoundary' false' out markerFound)) >= 0)              {                  bytesRead += lastRead;                  if (markerFound)                  {                      BaseStream.Read(new byte[2]' 0' 2);                        string line = ReadLine();                        if (AtBoundary || AtEndBoundary)                      {                          if (bytesRead == 0 && continueToNextBoundaryOnEmptyRead) // no data between boundaries                              continue;                          break;                      }                        destinationStream.Write(_newLine' 0' 2);                      var encodedLine = Encoding.GetBytes(line);                      destinationStream.Write(encodedLine' 0' encodedLine.Length);                      destinationStream.Write(_newLine' 0' 2);                      bytesRead += encodedLine.Length + 4;                  }                  else                  {                      break;                  }              }
Magic Number,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,ReadUntil,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,TryReadPreamble,The following statement contains a magic number: while (AtPreamble)              {                  bool crlfFound;                  string currentLine = ReadLine(out crlfFound);                  if (currentLine == null)                      break;                  lastPreambleCrLfPending = crlfFound;                  if (!AtBoundary)                  {                      if (currentLine != string.Empty)                      {                          if (preambleRead)                          {                              destinationStream.Write(_newLine);                              bytesRead += 2;                          }                            var encodedLine = Encoding.GetBytes(currentLine);                          destinationStream.Write(encodedLine);                          bytesRead += encodedLine.Length;                      }                        preambleRead = true;                  }                  else                      lastPreambleCrLfPending = false;              }
Magic Number,OpenRasta.IO,BoundaryStreamReader,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\BoundaryStreamReader.cs,TryReadPreamble,The following statement contains a magic number: if (wasAtPreamble && lastPreambleCrLfPending && bytesRead > 0)              {                  destinationStream.Write(_newLine);                  bytesRead += 2;              }
Magic Number,OpenRasta.IO,StreamExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\IO\StreamExtensions.cs,CopyTo,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,OpenRasta.Pipeline,CatastrophicFailureMiddleware,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\CatastrophicFailureMiddleware.cs,Invoke,The following statement contains a magic number: try        {          await Next.Invoke(env);        }        catch (Exception e)        {          env.Response.StatusCode = 500;          env.Response.Entity.ContentLength = FatalError.Length;          await env.Response.Entity.Stream.WriteAsync(FormatMessage(e)' 0' FatalError.Length);          env.Response.WriteHeaders();        }
Magic Number,OpenRasta.Pipeline.Contributors,DigestAuthorizerContributor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\Contributors\DigestAuthorizerContributor.cs,GetAbsolutePath,The following statement contains a magic number: return uri.Any(ch => ch > 127) ? Uri.EscapeUriString(uri) : uri;
Magic Number,OpenRasta.Pipeline.Contributors,ResponseEntityWriterContributor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\Contributors\ResponseEntityWriterContributor.cs,PadErrorMessageForIE,The following statement contains a magic number: if ((context.OperationResult.IsClientError || context.OperationResult.IsServerError)            && context.Response.Entity.Stream.CanSeek            && context.Response.Entity.ContentType == MediaType.Html            && context.Response.Entity.Stream.Length <= 512)        {          return context.Response.Entity.Stream.WriteAsync(PADDING' 0' (int) (512 - context.Response.Entity.Stream.Length));        }
Magic Number,OpenRasta.Pipeline.Contributors,ResponseEntityWriterContributor,C:\repos\openrasta_openrasta-core\src\OpenRasta\Pipeline\Contributors\ResponseEntityWriterContributor.cs,PadErrorMessageForIE,The following statement contains a magic number: if ((context.OperationResult.IsClientError || context.OperationResult.IsServerError)            && context.Response.Entity.Stream.CanSeek            && context.Response.Entity.ContentType == MediaType.Html            && context.Response.Entity.Stream.Length <= 512)        {          return context.Response.Entity.Stream.WriteAsync(PADDING' 0' (int) (512 - context.Response.Entity.Stream.Length));        }
Magic Number,OpenRasta.Security,BasicAuthorizationHeader,C:\repos\openrasta_openrasta-core\src\OpenRasta\Security\BasicAuthorizationHeader.cs,Parse,The following statement contains a magic number: if (tokens.Length != 2 || tokens[0] != "Basic")              {                  return (null);              }
Magic Number,OpenRasta.Security,BasicAuthorizationHeader,C:\repos\openrasta_openrasta-core\src\OpenRasta\Security\BasicAuthorizationHeader.cs,Parse,The following statement contains a magic number: try              {                  var credentialString = Encoding.UTF8.GetString(Convert.FromBase64String(tokens[1]));                    var credentials = credentialString.Split(new[] { ':' }' 2);                  return (new BasicAuthorizationHeader(credentials[0]' credentials[1]));              } catch (FormatException ex)              {                  return (null);              }
Magic Number,OpenRasta.Security,DigestHeader,C:\repos\openrasta_openrasta-core\src\OpenRasta\Security\DigestHeader.cs,Parse,The following statement contains a magic number: string arguments = header.Substring(6);
Magic Number,OpenRasta.Security,DigestHeader,C:\repos\openrasta_openrasta-core\src\OpenRasta\Security\DigestHeader.cs,Parse,The following statement contains a magic number: foreach (string kv in keyValues)              {                  string[] parts = kv.Split(new[] {'='}' 2);                  string key = parts[0].Trim(' '' '\t'' '\r'' '\n'' '\"');                  string value = parts[1].Trim(' '' '\t'' '\r'' '\n'' '\"');                  credentials._values.Add(key' value);              }
Magic Number,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeTextToken,The following statement contains a magic number: for (int i = 0; i < textToDecode.Length; i++)              {                  char ch = textToDecode[i];                    if (ch == '=' && i < textToDecode.Length - 1 && textToDecode[i + 1] == '?')                  {                      i += 2;                      charsetBuilder = new StringBuilder();                      while (i < textToDecode.Length && textToDecode[i] != '?')                      {                          charsetBuilder.Append(textToDecode[i]);                          i++;                      }                      i++;                      string charset = charsetBuilder.ToString();                      Encoding textEncoder = null;                      try                      {                          textEncoder = Encoding.GetEncoding(charset);                      }                      catch { }                      char encoding = textToDecode[i];                      Func<string' Encoding' string> decoder = null;                      if ((encoding == 'Q' || encoding == 'q') && i + 1 < textToDecode.Length && textToDecode[i + 1] == '?')                      { decoder = DecodeQuotedPrintable; }                      else if ((encoding == 'B' || encoding == 'b') && i + 1 < textToDecode.Length && textToDecode[i + 1] == '?')                      { decoder = DecodeBase64; }                        if (textEncoder != null && decoder != null)                      {                          i += 2;                          encodedText = new StringBuilder();                          byte[] encodedBuffer = new byte[4];                          for (; i + 1 < textToDecode.Length && !(textToDecode[i] == '?' && textToDecode[i + 1] == '='); i++)                          {                              encodedText.Append(textToDecode[i]);                          }                          decoded.Append(decoder(encodedText.ToString()'textEncoder));                          i += 1;                      }                      else                      {                          decoded.Append("=?").Append(charset).Append("?").Append(encoding);                          continue;                      }                  }                  else                      decoded.Append(ch);                }
Magic Number,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeTextToken,The following statement contains a magic number: for (int i = 0; i < textToDecode.Length; i++)              {                  char ch = textToDecode[i];                    if (ch == '=' && i < textToDecode.Length - 1 && textToDecode[i + 1] == '?')                  {                      i += 2;                      charsetBuilder = new StringBuilder();                      while (i < textToDecode.Length && textToDecode[i] != '?')                      {                          charsetBuilder.Append(textToDecode[i]);                          i++;                      }                      i++;                      string charset = charsetBuilder.ToString();                      Encoding textEncoder = null;                      try                      {                          textEncoder = Encoding.GetEncoding(charset);                      }                      catch { }                      char encoding = textToDecode[i];                      Func<string' Encoding' string> decoder = null;                      if ((encoding == 'Q' || encoding == 'q') && i + 1 < textToDecode.Length && textToDecode[i + 1] == '?')                      { decoder = DecodeQuotedPrintable; }                      else if ((encoding == 'B' || encoding == 'b') && i + 1 < textToDecode.Length && textToDecode[i + 1] == '?')                      { decoder = DecodeBase64; }                        if (textEncoder != null && decoder != null)                      {                          i += 2;                          encodedText = new StringBuilder();                          byte[] encodedBuffer = new byte[4];                          for (; i + 1 < textToDecode.Length && !(textToDecode[i] == '?' && textToDecode[i + 1] == '='); i++)                          {                              encodedText.Append(textToDecode[i]);                          }                          decoded.Append(decoder(encodedText.ToString()'textEncoder));                          i += 1;                      }                      else                      {                          decoded.Append("=?").Append(charset).Append("?").Append(encoding);                          continue;                      }                  }                  else                      decoded.Append(ch);                }
Magic Number,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeTextToken,The following statement contains a magic number: for (int i = 0; i < textToDecode.Length; i++)              {                  char ch = textToDecode[i];                    if (ch == '=' && i < textToDecode.Length - 1 && textToDecode[i + 1] == '?')                  {                      i += 2;                      charsetBuilder = new StringBuilder();                      while (i < textToDecode.Length && textToDecode[i] != '?')                      {                          charsetBuilder.Append(textToDecode[i]);                          i++;                      }                      i++;                      string charset = charsetBuilder.ToString();                      Encoding textEncoder = null;                      try                      {                          textEncoder = Encoding.GetEncoding(charset);                      }                      catch { }                      char encoding = textToDecode[i];                      Func<string' Encoding' string> decoder = null;                      if ((encoding == 'Q' || encoding == 'q') && i + 1 < textToDecode.Length && textToDecode[i + 1] == '?')                      { decoder = DecodeQuotedPrintable; }                      else if ((encoding == 'B' || encoding == 'b') && i + 1 < textToDecode.Length && textToDecode[i + 1] == '?')                      { decoder = DecodeBase64; }                        if (textEncoder != null && decoder != null)                      {                          i += 2;                          encodedText = new StringBuilder();                          byte[] encodedBuffer = new byte[4];                          for (; i + 1 < textToDecode.Length && !(textToDecode[i] == '?' && textToDecode[i + 1] == '='); i++)                          {                              encodedText.Append(textToDecode[i]);                          }                          decoded.Append(decoder(encodedText.ToString()'textEncoder));                          i += 1;                      }                      else                      {                          decoded.Append("=?").Append(charset).Append("?").Append(encoding);                          continue;                      }                  }                  else                      decoded.Append(ch);                }
Magic Number,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < textToDecode.Length; i++)              {                  byte byteToAdd = 0;                  if (textToDecode[i] == '_')                  {                      byteToAdd = (byte)' ';                  }                  else if (textToDecode[i] == '=' && i + 2 < textToDecode.Length)                  {                      byteToAdd = byte.Parse(textToDecode[i+1] + "" + textToDecode[i + 2]' NumberStyles.HexNumber'CultureInfo.InvariantCulture);                      i += 2;                  }                  else                  {                      byteToAdd = (byte)textToDecode[i];                  }                  toDecode.WriteByte(byteToAdd);              }
Magic Number,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < textToDecode.Length; i++)              {                  byte byteToAdd = 0;                  if (textToDecode[i] == '_')                  {                      byteToAdd = (byte)' ';                  }                  else if (textToDecode[i] == '=' && i + 2 < textToDecode.Length)                  {                      byteToAdd = byte.Parse(textToDecode[i+1] + "" + textToDecode[i + 2]' NumberStyles.HexNumber'CultureInfo.InvariantCulture);                      i += 2;                  }                  else                  {                      byteToAdd = (byte)textToDecode[i];                  }                  toDecode.WriteByte(byteToAdd);              }
Magic Number,OpenRasta.Text,Rfc2047Encoding,C:\repos\openrasta_openrasta-core\src\OpenRasta\Text\Rfc2047Encoding.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < textToDecode.Length; i++)              {                  byte byteToAdd = 0;                  if (textToDecode[i] == '_')                  {                      byteToAdd = (byte)' ';                  }                  else if (textToDecode[i] == '=' && i + 2 < textToDecode.Length)                  {                      byteToAdd = byte.Parse(textToDecode[i+1] + "" + textToDecode[i + 2]' NumberStyles.HexNumber'CultureInfo.InvariantCulture);                      i += 2;                  }                  else                  {                      byteToAdd = (byte)textToDecode[i];                  }                  toDecode.WriteByte(byteToAdd);              }
Magic Number,OpenRasta.Web,UriExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\UriExtensions.cs,IgnorePortAndAuthority,The following statement contains a magic number: builder.Port = 80;
Magic Number,OpenRasta.Web,UriExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\UriExtensions.cs,IgnoreSchemePortAndAuthority,The following statement contains a magic number: builder.Port = 80;
Magic Number,OpenRasta.Web,MediaType,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\MediaType.cs,GetHashCode,The following statement contains a magic number: unchecked        {          int result = base.GetHashCode();          result = (result * 397) ^ (TopLevelMediaType != null ? TopLevelMediaType.GetHashCode() : 0);          result = (result * 397) ^ (Subtype != null ? Subtype.GetHashCode() : 0);          foreach (string parameterName in Parameters.Keys)            result = (result * 397) ^ (parameterName + Parameters[parameterName]).GetHashCode();          return result;        }
Magic Number,OpenRasta.Web,MediaType,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\MediaType.cs,GetHashCode,The following statement contains a magic number: unchecked        {          int result = base.GetHashCode();          result = (result * 397) ^ (TopLevelMediaType != null ? TopLevelMediaType.GetHashCode() : 0);          result = (result * 397) ^ (Subtype != null ? Subtype.GetHashCode() : 0);          foreach (string parameterName in Parameters.Keys)            result = (result * 397) ^ (parameterName + Parameters[parameterName]).GetHashCode();          return result;        }
Magic Number,OpenRasta.Web,MediaType,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\MediaType.cs,GetHashCode,The following statement contains a magic number: unchecked        {          int result = base.GetHashCode();          result = (result * 397) ^ (TopLevelMediaType != null ? TopLevelMediaType.GetHashCode() : 0);          result = (result * 397) ^ (Subtype != null ? Subtype.GetHashCode() : 0);          foreach (string parameterName in Parameters.Keys)            result = (result * 397) ^ (parameterName + Parameters[parameterName]).GetHashCode();          return result;        }
Magic Number,OpenRasta.Web,MultipartWriter,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\MultipartWriter.cs,WriteLine,The following statement contains a magic number: _underlyingStream.Write(new byte[] { 13' 10 }' 0' 2);
Magic Number,OpenRasta.Web,MultipartWriter,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\MultipartWriter.cs,WriteLine,The following statement contains a magic number: _underlyingStream.Write(new byte[] { 13' 10 }' 0' 2);
Magic Number,OpenRasta.Web,MultipartWriter,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\MultipartWriter.cs,WriteLine,The following statement contains a magic number: _underlyingStream.Write(new byte[] { 13' 10 }' 0' 2);
Magic Number,OpenRasta.Web.Internal,CommunicationContextExtensions,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Internal\CommunicationContextExtensions.cs,Abort,The following statement contains a magic number: context.Response.StatusCode = 500;
Magic Number,OpenRasta.Web.Markup,Document,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\Markup\Document.cs,ExtractTagNameFrom,The following statement contains a magic number: if (typeName.StartsWith("I") && typeName.EndsWith("Element")) return typeName.Substring(1' typeName.Length - 8);
Magic Number,OpenRasta.Web.UriDecorators,HttpMethodOverrideUriDecorator,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\UriDecorators\HttpMethodOverrideUriDecorator.cs,Parse,The following statement contains a magic number: if (match.Success)              {                  newVerb = match.Groups["method"].Value;                    UriBuilder builder = new UriBuilder(uri);                    builder.Path = string.Join(""' uriSegments' 1' uriSegments.Length - 2)                                 + segmentRegex.Replace(lastSegment' "");                  processedUri = builder.Uri;                  return true;              }
Magic Number,OpenRasta.Web.UriDecorators,PathSegmentAsParameterUriDecorator,C:\repos\openrasta_openrasta-core\src\OpenRasta\Web\UriDecorators\PathSegmentAsParameterUriDecorator.cs,Parse,The following statement contains a magic number: if (matches.Count > 0)              {                  matchingSegments = new string[matches.Count];                  for (int i = 0; i < matches.Count; i++)                  {                      matchingSegments[i] = matches[i].Groups["segment"].Value;                  }                  UriBuilder builder = new UriBuilder(uri);                                    builder.Path = string.Join(""'uriSegments'1' uriSegments.Length-2) + segmentRegex.Replace(lastSegment' "");                  processedUri = builder.Uri;                  return true;              }
