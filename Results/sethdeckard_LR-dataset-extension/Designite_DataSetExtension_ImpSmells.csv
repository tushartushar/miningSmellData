Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The method has 140 lines of code.
Long Method,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The method has 179 lines of code.
Long Method,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetClassDeserializer,The method has 173 lines of code.
Complex Method,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,Cyclomatic complexity of the method is 15
Complex Method,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,Cyclomatic complexity of the method is 17
Complex Method,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetClassDeserializer,Cyclomatic complexity of the method is 14
Complex Method,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,Cyclomatic complexity of the method is 34
Complex Method,DataSetExtension,ExportController,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\ExportController.cs,Export,Cyclomatic complexity of the method is 8
Complex Method,DataSetExtension.Import,CanadaImport,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Import\CanadaImport.cs,Import,Cyclomatic complexity of the method is 8
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Execute,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,QueryMultiple,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,QueryInternal,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMap,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The method has 17 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetDynamicDeserializer,The method has 5 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,SetupCommand,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,ExecuteCommand,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetClassDeserializer,The method has 8 parameters.
Long Parameter List,Dapper,DynamicParameters,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Add,The method has 5 parameters.
Long Parameter List,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,ParseItems,The method has 5 parameters.
Long Parameter List,DataSetExtension,ExportController,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\ExportController.cs,Export,The method has 5 parameters.
Long Parameter List,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ParseRecords,The method has 6 parameters.
Long Parameter List,DataSetExtension,MeasurementLocator,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\MeasurementLocator.cs,Find,The method has 6 parameters.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetBindByName,The length of the statement  "	if (prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null) { " is 193.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,LookupDbType,The length of the statement  "	throw new NotSupportedException (string.Format ("The member {0} of type {1} cannot be used as a parameter value"' name' type)); " is 127.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,QueryMultiple,The length of the statement  "	Identity identity = new Identity (sql' commandType' cnn' typeof(GridReader)' (object)param == null ? null : ((object)param).GetType ()' null); " is 142.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 163.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 162.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 162.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 161.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMap,The length of the statement  "	var results = MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TReturn> (cnn' sql' map' param' transaction' splitOn' commandTimeout' commandType' null' null); " is 164.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "	identity = identity ?? new Identity (sql' commandType' cnn' typeof(TFirst)' (object)param == null ? null : ((object)param).GetType ()' new[] { " is 142.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "				mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)); " is 120.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "					mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)); " is 148.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "					mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r)); " is 175.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetDynamicDeserializer,The length of the statement  "		throw new ArgumentException ("When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"' "splitOn"); " is 141.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The length of the statement  "			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)"); " is 125.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,FilterParameters,The length of the statement  "	return parameters.Where (p => Regex.IsMatch (sql' "[@:]" + p.Name + "([^a-zA-Z0-9_]+|$)"' RegexOptions.IgnoreCase | RegexOptions.Multiline)); " is 141.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "			if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) { " is 185.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetStructDeserializer,The length of the statement  "	// no point using special per-type handling here; it boils down to the same' plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!) " is 156.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetStructDeserializer,The length of the statement  "		return (Func<IDataReader' T>)(object)new Func<IDataReader' char?> (r => SqlMapper.ReadNullableChar (r.GetValue (index))); " is 121.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetSettableProps,The length of the statement  "	return t.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Select (p => new PropInfo { " is 121.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetClassDeserializer,The length of the statement  "		throw new ArgumentException ("When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"' "splitOn"); " is 141.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetClassDeserializer,The length of the statement  "	let prop = properties.FirstOrDefault (p => string.Equals (p.Name' n' StringComparison.Ordinal)) // property case sensitive first " is 128.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetClassDeserializer,The length of the statement  "	let field = prop != null ? null : (fields.FirstOrDefault (p => string.Equals (p.Name' n' StringComparison.OrdinalIgnoreCase)) // field case sensitive third " is 155.
Long Statement,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetClassDeserializer,The length of the statement  "				il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null); " is 168.
Long Statement,Dapper,DbString,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameter,The length of the statement  "	param.DbType = IsAnsi ? (IsFixedLength ? DbType.AnsiStringFixedLength : DbType.AnsiString) : (IsFixedLength ? DbType.StringFixedLength : DbType.String); " is 152.
Long Statement,DataSetExtension,ExportController,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\ExportController.cs,ProcessMeasurements,The length of the statement  "		where measurement.Date >= new DateTime (year' month' 1) && measurement.Date <= new DateTime (year' month' DateTime.DaysInMonth (year' month)) " is 141.
Long Statement,DataSetExtension,ExportController,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\ExportController.cs,GetStations,The length of the statement  "	var query = "select Id' Sequence' GridPoint' GridPointLatitude' GridPointLongitude' Latitude' " + "Longitude' Name' Number' HistoricalRecordCount' RecordCount " + " from " + table + " where GridPoint = @GridPoint"; " is 214.
Long Statement,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Insert,The length of the statement  "	var query = "insert into " + table + "(Number'Name'GridPoint'Sequence'Latitude'Longitude'GridPointLatitude'GridPointLongitude'HistoricalRecordCount'RecordCount)"; " is 162.
Long Statement,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Insert,The length of the statement  "	query += "values(@Number'@Name'@GridPoint'@Sequence'@Latitude'@Longitude'@GridPointLatitude'@GridPointLongitude'@HistoricalRecordCount'@RecordCount)"; " is 150.
Long Statement,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,CreateCommand,The length of the statement  "	var sql = "insert into Station(Number' Name' State' County' Latitude' Longitude' Start' End) " + "Values(:number' :name' :state' :county' :latitude' :longitude' :start' :end);"; " is 177.
Long Statement,DataSetExtension,MeasurementLocator,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\MeasurementLocator.cs,Find,The length of the statement  "	foreach (var measurement in matches.Where (measurement => Tracker.Validate (measurement.StationNumber' measurement.Date))) { " is 124.
Long Statement,DataSetExtension,Measurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Measurement.cs,GetCommandText,The length of the statement  "	return "insert into " + table + "(StationId'StationNumber'Date'DateString'ObservationHour'Value) " + "Values(:id' :number' :date' :dateString' :hour' :value);"; " is 160.
Long Statement,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The length of the statement  "			var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' ')); " is 349.
Long Statement,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The length of the statement  "			var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' ')); " is 189.
Long Statement,DataSetExtension,PrecipitationFormatter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\PrecipitationFormatter.cs,Format,The length of the statement  "	return string.Format ("{0} {1} {2} {3}"' measurement.Date.ToString ("yyMMdd")' hour' sequenceCode' measurement.Value.ToString ().PadLeft (3' ' ')); " is 147.
Long Statement,DataSetExtension,TemperatureFormatter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\TemperatureFormatter.cs,Format,The length of the statement  "	var dateFormat = year + measurement.Date.Month.ToString ().PadLeft (2' ' ') + measurement.Date.Day.ToString ().PadLeft (2' ' '); " is 128.
Long Statement,DataSetExtension,MeasurementWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\MeasurementWriter.cs,WriteMissing,The length of the statement  "	var measurement = Locator.Find (Convert.ToDouble (first.GridPointLatitude)' Convert.ToDouble (first.GridPointLongitude)' date); " is 127.
Long Statement,DataSetExtension.Import,GridStationImport,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Import\GridStationImport.cs,CreateCommand,The length of the statement  "	sql.AppendLine ("(Number'Name'GridPoint'Sequence'Latitude'Longitude'GridPointLatitude'GridPointLongitude'HistoricalRecordCount'RecordCount)"); " is 142.
Long Statement,DataSetExtension.Import,GridStationImport,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Import\GridStationImport.cs,CreateCommand,The length of the statement  "	sql.AppendLine ("Values(:number' :name' :gridpoint' :sequence' :latitude' :longitude' :gridlatitude' :gridlongitude' :count' 0);"); " is 131.
Long Statement,DataSetExtension.Import,MeasurementImport,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Import\MeasurementImport.cs,SetCommandText,The length of the statement  "	Command.CommandText = "insert into " + table + "(StationId'StationNumber'Date'DateString'ObservationHour'Value) Values(:id' :number' :date' :dateString' :hour' :value);"; " is 170.
Long Statement,DataSetExtension.Database,GridStationDatabase,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Database\GridStationDatabase.cs,GenerateCreateIndexStatements,The length of the statement  "	var statement = string.Format ("CREATE INDEX IF NOT EXISTS \"Index_{0}_NumberGridPoint\" ON \"{0}\" (\"Number\" ASC' \"GridPoint\" ASC);"' table); " is 146.
Long Statement,DataSetExtension.Database,GridStationDatabase,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Database\GridStationDatabase.cs,GenerateCreateIndexStatements,The length of the statement  "	return statement + string.Format ("CREATE INDEX IF NOT EXISTS \"Index_{0}_Number\" ON \"{0}\" (\"Number\" ASC);"' table); " is 121.
Long Statement,DataSetExtension.Database,MeasurementDatabase,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Database\MeasurementDatabase.cs,GenerateCreateIndexStatements,The length of the statement  "	var statement = string.Format ("CREATE INDEX IF NOT EXISTS \"Index_{0}_StationNumber\" ON \"{0}\" (\"StationNumber\" ASC' \"Date\" ASC);"' table); " is 146.
Long Statement,DataSetExtension.Database,MeasurementDatabase,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Database\MeasurementDatabase.cs,GenerateCreateIndexStatements,The length of the statement  "	statement += string.Format ("CREATE INDEX IF NOT EXISTS \"Index_{0}_StationId\" ON \"{0}\" (\"StationId\" ASC' \"Date\" ASC);"' table); " is 135.
Long Statement,DataSetExtension.Database,StationDatabase,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Database\StationDatabase.cs,CreateSchema,The length of the statement  "	connection.Execute ("CREATE INDEX IF NOT EXISTS \"Index_Station\" ON \"Station\" (\"Number\" ASC' \"Latitude\" ASC' \"Longitude\" ASC' \"Start\" ASC' \"End\" ASC);"); " is 166.
Complex Conditional,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,GetBindByName,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null"  is complex.
Complex Conditional,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ParseRecords,The conditional expression  "flag == " " || flag == "E" || flag == "N" || flag == "Y" || flag == "T""  is complex.
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: try {  	if (reader == null) {  		ownedCommand = SetupCommand (cnn' transaction' sql' cinfo.ParamReader' (object)param' commandTimeout' commandType);  		ownedReader = ownedCommand.ExecuteReader ();  		reader = ownedReader;  	}  	object deserializer;  	object[] otherDeserializers;  	if ((deserializer = cinfo.Deserializer) == null || (otherDeserializers = cinfo.OtherDeserializers) == null) {  		int current = 0;  		var splits = splitOn.Split (''').ToArray ();  		var splitIndex = 0;  		Func<Type' int> nextSplit = type =>  {  			var currentSplit = splits [splitIndex];  			if (splits.Length > splitIndex + 1) {  				splitIndex++;  			}  			bool skipFirst = false;  			int startingPos = current + 1;  			// if our current type has the split' skip the first time you see it.   			if (type != typeof(Object)) {  				var props = GetSettableProps (type);  				var fields = GetSettableFields (type);  				foreach (var name in props.Select (p => p.Name).Concat (fields.Select (f => f.Name))) {  					if (string.Equals (name' currentSplit' StringComparison.OrdinalIgnoreCase)) {  						skipFirst = true;  						startingPos = current;  						break;  					}  				}  			}  			int pos;  			for (pos = startingPos; pos < reader.FieldCount; pos++) {  				// some people like ID some id ... assuming case insensitive splits for now  				if (splitOn == "*") {  					break;  				}  				if (string.Equals (reader.GetName (pos)' currentSplit' StringComparison.OrdinalIgnoreCase)) {  					if (skipFirst) {  						skipFirst = false;  					}  					else {  						break;  					}  				}  			}  			current = pos;  			return pos;  		};  		var otherDeserializer = new List<object> ();  		int split = nextSplit (typeof(TFirst));  		deserializer = cinfo.Deserializer = GetDeserializer<TFirst> (reader' 0' split' false);  		if (typeof(TSecond) != typeof(DontMap)) {  			var next = nextSplit (typeof(TSecond));  			otherDeserializer.Add (GetDeserializer<TSecond> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TThird) != typeof(DontMap)) {  			var next = nextSplit (typeof(TThird));  			otherDeserializer.Add (GetDeserializer<TThird> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFourth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFourth));  			otherDeserializer.Add (GetDeserializer<TFourth> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFifth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFifth));  			otherDeserializer.Add (GetDeserializer<TFifth> (reader' split' next - split' true));  		}  		otherDeserializers = cinfo.OtherDeserializers = otherDeserializer.ToArray ();  		SetQueryCache (identity' cinfo);  	}  	var rootDeserializer = (Func<IDataReader' TFirst>)deserializer;  	var deserializer2 = (Func<IDataReader' TSecond>)otherDeserializers [0];  	Func<IDataReader' TReturn> mapIt = null;  	if (otherDeserializers.Length == 1) {  		mapIt = r => ((Func<TFirst' TSecond' TReturn>)map) (rootDeserializer (r)' deserializer2 (r));  	}  	if (otherDeserializers.Length > 1) {  		var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  		if (otherDeserializers.Length == 2) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  		}  		if (otherDeserializers.Length > 2) {  			var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  			if (otherDeserializers.Length == 3) {  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  			}  			if (otherDeserializers.Length > 3) {  				#if CSHARP30  				                            throw new NotSupportedException(); #else  				var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  				#endif  			}  		}  	}  	if (mapIt != null) {  		bool clean = true;  		try {  			while (reader.Read ()) {  				clean = false;  				TReturn next = mapIt (reader);  				clean = true;  				yield return next;  			}  		}  		finally {  			if (!clean)  				PurgeQueryCache (identity);  		}  	}  }  finally {  	try {  		if (ownedReader != null) {  			ownedReader.Dispose ();  		}  	}  	finally {  		if (ownedCommand != null) {  			ownedCommand.Dispose ();  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: try {  	if (reader == null) {  		ownedCommand = SetupCommand (cnn' transaction' sql' cinfo.ParamReader' (object)param' commandTimeout' commandType);  		ownedReader = ownedCommand.ExecuteReader ();  		reader = ownedReader;  	}  	object deserializer;  	object[] otherDeserializers;  	if ((deserializer = cinfo.Deserializer) == null || (otherDeserializers = cinfo.OtherDeserializers) == null) {  		int current = 0;  		var splits = splitOn.Split (''').ToArray ();  		var splitIndex = 0;  		Func<Type' int> nextSplit = type =>  {  			var currentSplit = splits [splitIndex];  			if (splits.Length > splitIndex + 1) {  				splitIndex++;  			}  			bool skipFirst = false;  			int startingPos = current + 1;  			// if our current type has the split' skip the first time you see it.   			if (type != typeof(Object)) {  				var props = GetSettableProps (type);  				var fields = GetSettableFields (type);  				foreach (var name in props.Select (p => p.Name).Concat (fields.Select (f => f.Name))) {  					if (string.Equals (name' currentSplit' StringComparison.OrdinalIgnoreCase)) {  						skipFirst = true;  						startingPos = current;  						break;  					}  				}  			}  			int pos;  			for (pos = startingPos; pos < reader.FieldCount; pos++) {  				// some people like ID some id ... assuming case insensitive splits for now  				if (splitOn == "*") {  					break;  				}  				if (string.Equals (reader.GetName (pos)' currentSplit' StringComparison.OrdinalIgnoreCase)) {  					if (skipFirst) {  						skipFirst = false;  					}  					else {  						break;  					}  				}  			}  			current = pos;  			return pos;  		};  		var otherDeserializer = new List<object> ();  		int split = nextSplit (typeof(TFirst));  		deserializer = cinfo.Deserializer = GetDeserializer<TFirst> (reader' 0' split' false);  		if (typeof(TSecond) != typeof(DontMap)) {  			var next = nextSplit (typeof(TSecond));  			otherDeserializer.Add (GetDeserializer<TSecond> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TThird) != typeof(DontMap)) {  			var next = nextSplit (typeof(TThird));  			otherDeserializer.Add (GetDeserializer<TThird> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFourth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFourth));  			otherDeserializer.Add (GetDeserializer<TFourth> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFifth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFifth));  			otherDeserializer.Add (GetDeserializer<TFifth> (reader' split' next - split' true));  		}  		otherDeserializers = cinfo.OtherDeserializers = otherDeserializer.ToArray ();  		SetQueryCache (identity' cinfo);  	}  	var rootDeserializer = (Func<IDataReader' TFirst>)deserializer;  	var deserializer2 = (Func<IDataReader' TSecond>)otherDeserializers [0];  	Func<IDataReader' TReturn> mapIt = null;  	if (otherDeserializers.Length == 1) {  		mapIt = r => ((Func<TFirst' TSecond' TReturn>)map) (rootDeserializer (r)' deserializer2 (r));  	}  	if (otherDeserializers.Length > 1) {  		var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  		if (otherDeserializers.Length == 2) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  		}  		if (otherDeserializers.Length > 2) {  			var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  			if (otherDeserializers.Length == 3) {  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  			}  			if (otherDeserializers.Length > 3) {  				#if CSHARP30  				                            throw new NotSupportedException(); #else  				var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  				#endif  			}  		}  	}  	if (mapIt != null) {  		bool clean = true;  		try {  			while (reader.Read ()) {  				clean = false;  				TReturn next = mapIt (reader);  				clean = true;  				yield return next;  			}  		}  		finally {  			if (!clean)  				PurgeQueryCache (identity);  		}  	}  }  finally {  	try {  		if (ownedReader != null) {  			ownedReader.Dispose ();  		}  	}  	finally {  		if (ownedCommand != null) {  			ownedCommand.Dispose ();  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: try {  	if (reader == null) {  		ownedCommand = SetupCommand (cnn' transaction' sql' cinfo.ParamReader' (object)param' commandTimeout' commandType);  		ownedReader = ownedCommand.ExecuteReader ();  		reader = ownedReader;  	}  	object deserializer;  	object[] otherDeserializers;  	if ((deserializer = cinfo.Deserializer) == null || (otherDeserializers = cinfo.OtherDeserializers) == null) {  		int current = 0;  		var splits = splitOn.Split (''').ToArray ();  		var splitIndex = 0;  		Func<Type' int> nextSplit = type =>  {  			var currentSplit = splits [splitIndex];  			if (splits.Length > splitIndex + 1) {  				splitIndex++;  			}  			bool skipFirst = false;  			int startingPos = current + 1;  			// if our current type has the split' skip the first time you see it.   			if (type != typeof(Object)) {  				var props = GetSettableProps (type);  				var fields = GetSettableFields (type);  				foreach (var name in props.Select (p => p.Name).Concat (fields.Select (f => f.Name))) {  					if (string.Equals (name' currentSplit' StringComparison.OrdinalIgnoreCase)) {  						skipFirst = true;  						startingPos = current;  						break;  					}  				}  			}  			int pos;  			for (pos = startingPos; pos < reader.FieldCount; pos++) {  				// some people like ID some id ... assuming case insensitive splits for now  				if (splitOn == "*") {  					break;  				}  				if (string.Equals (reader.GetName (pos)' currentSplit' StringComparison.OrdinalIgnoreCase)) {  					if (skipFirst) {  						skipFirst = false;  					}  					else {  						break;  					}  				}  			}  			current = pos;  			return pos;  		};  		var otherDeserializer = new List<object> ();  		int split = nextSplit (typeof(TFirst));  		deserializer = cinfo.Deserializer = GetDeserializer<TFirst> (reader' 0' split' false);  		if (typeof(TSecond) != typeof(DontMap)) {  			var next = nextSplit (typeof(TSecond));  			otherDeserializer.Add (GetDeserializer<TSecond> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TThird) != typeof(DontMap)) {  			var next = nextSplit (typeof(TThird));  			otherDeserializer.Add (GetDeserializer<TThird> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFourth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFourth));  			otherDeserializer.Add (GetDeserializer<TFourth> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFifth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFifth));  			otherDeserializer.Add (GetDeserializer<TFifth> (reader' split' next - split' true));  		}  		otherDeserializers = cinfo.OtherDeserializers = otherDeserializer.ToArray ();  		SetQueryCache (identity' cinfo);  	}  	var rootDeserializer = (Func<IDataReader' TFirst>)deserializer;  	var deserializer2 = (Func<IDataReader' TSecond>)otherDeserializers [0];  	Func<IDataReader' TReturn> mapIt = null;  	if (otherDeserializers.Length == 1) {  		mapIt = r => ((Func<TFirst' TSecond' TReturn>)map) (rootDeserializer (r)' deserializer2 (r));  	}  	if (otherDeserializers.Length > 1) {  		var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  		if (otherDeserializers.Length == 2) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  		}  		if (otherDeserializers.Length > 2) {  			var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  			if (otherDeserializers.Length == 3) {  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  			}  			if (otherDeserializers.Length > 3) {  				#if CSHARP30  				                            throw new NotSupportedException(); #else  				var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  				#endif  			}  		}  	}  	if (mapIt != null) {  		bool clean = true;  		try {  			while (reader.Read ()) {  				clean = false;  				TReturn next = mapIt (reader);  				clean = true;  				yield return next;  			}  		}  		finally {  			if (!clean)  				PurgeQueryCache (identity);  		}  	}  }  finally {  	try {  		if (ownedReader != null) {  			ownedReader.Dispose ();  		}  	}  	finally {  		if (ownedCommand != null) {  			ownedCommand.Dispose ();  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: try {  	if (reader == null) {  		ownedCommand = SetupCommand (cnn' transaction' sql' cinfo.ParamReader' (object)param' commandTimeout' commandType);  		ownedReader = ownedCommand.ExecuteReader ();  		reader = ownedReader;  	}  	object deserializer;  	object[] otherDeserializers;  	if ((deserializer = cinfo.Deserializer) == null || (otherDeserializers = cinfo.OtherDeserializers) == null) {  		int current = 0;  		var splits = splitOn.Split (''').ToArray ();  		var splitIndex = 0;  		Func<Type' int> nextSplit = type =>  {  			var currentSplit = splits [splitIndex];  			if (splits.Length > splitIndex + 1) {  				splitIndex++;  			}  			bool skipFirst = false;  			int startingPos = current + 1;  			// if our current type has the split' skip the first time you see it.   			if (type != typeof(Object)) {  				var props = GetSettableProps (type);  				var fields = GetSettableFields (type);  				foreach (var name in props.Select (p => p.Name).Concat (fields.Select (f => f.Name))) {  					if (string.Equals (name' currentSplit' StringComparison.OrdinalIgnoreCase)) {  						skipFirst = true;  						startingPos = current;  						break;  					}  				}  			}  			int pos;  			for (pos = startingPos; pos < reader.FieldCount; pos++) {  				// some people like ID some id ... assuming case insensitive splits for now  				if (splitOn == "*") {  					break;  				}  				if (string.Equals (reader.GetName (pos)' currentSplit' StringComparison.OrdinalIgnoreCase)) {  					if (skipFirst) {  						skipFirst = false;  					}  					else {  						break;  					}  				}  			}  			current = pos;  			return pos;  		};  		var otherDeserializer = new List<object> ();  		int split = nextSplit (typeof(TFirst));  		deserializer = cinfo.Deserializer = GetDeserializer<TFirst> (reader' 0' split' false);  		if (typeof(TSecond) != typeof(DontMap)) {  			var next = nextSplit (typeof(TSecond));  			otherDeserializer.Add (GetDeserializer<TSecond> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TThird) != typeof(DontMap)) {  			var next = nextSplit (typeof(TThird));  			otherDeserializer.Add (GetDeserializer<TThird> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFourth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFourth));  			otherDeserializer.Add (GetDeserializer<TFourth> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFifth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFifth));  			otherDeserializer.Add (GetDeserializer<TFifth> (reader' split' next - split' true));  		}  		otherDeserializers = cinfo.OtherDeserializers = otherDeserializer.ToArray ();  		SetQueryCache (identity' cinfo);  	}  	var rootDeserializer = (Func<IDataReader' TFirst>)deserializer;  	var deserializer2 = (Func<IDataReader' TSecond>)otherDeserializers [0];  	Func<IDataReader' TReturn> mapIt = null;  	if (otherDeserializers.Length == 1) {  		mapIt = r => ((Func<TFirst' TSecond' TReturn>)map) (rootDeserializer (r)' deserializer2 (r));  	}  	if (otherDeserializers.Length > 1) {  		var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  		if (otherDeserializers.Length == 2) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  		}  		if (otherDeserializers.Length > 2) {  			var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  			if (otherDeserializers.Length == 3) {  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  			}  			if (otherDeserializers.Length > 3) {  				#if CSHARP30  				                            throw new NotSupportedException(); #else  				var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  				#endif  			}  		}  	}  	if (mapIt != null) {  		bool clean = true;  		try {  			while (reader.Read ()) {  				clean = false;  				TReturn next = mapIt (reader);  				clean = true;  				yield return next;  			}  		}  		finally {  			if (!clean)  				PurgeQueryCache (identity);  		}  	}  }  finally {  	try {  		if (ownedReader != null) {  			ownedReader.Dispose ();  		}  	}  	finally {  		if (ownedCommand != null) {  			ownedCommand.Dispose ();  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: try {  	if (reader == null) {  		ownedCommand = SetupCommand (cnn' transaction' sql' cinfo.ParamReader' (object)param' commandTimeout' commandType);  		ownedReader = ownedCommand.ExecuteReader ();  		reader = ownedReader;  	}  	object deserializer;  	object[] otherDeserializers;  	if ((deserializer = cinfo.Deserializer) == null || (otherDeserializers = cinfo.OtherDeserializers) == null) {  		int current = 0;  		var splits = splitOn.Split (''').ToArray ();  		var splitIndex = 0;  		Func<Type' int> nextSplit = type =>  {  			var currentSplit = splits [splitIndex];  			if (splits.Length > splitIndex + 1) {  				splitIndex++;  			}  			bool skipFirst = false;  			int startingPos = current + 1;  			// if our current type has the split' skip the first time you see it.   			if (type != typeof(Object)) {  				var props = GetSettableProps (type);  				var fields = GetSettableFields (type);  				foreach (var name in props.Select (p => p.Name).Concat (fields.Select (f => f.Name))) {  					if (string.Equals (name' currentSplit' StringComparison.OrdinalIgnoreCase)) {  						skipFirst = true;  						startingPos = current;  						break;  					}  				}  			}  			int pos;  			for (pos = startingPos; pos < reader.FieldCount; pos++) {  				// some people like ID some id ... assuming case insensitive splits for now  				if (splitOn == "*") {  					break;  				}  				if (string.Equals (reader.GetName (pos)' currentSplit' StringComparison.OrdinalIgnoreCase)) {  					if (skipFirst) {  						skipFirst = false;  					}  					else {  						break;  					}  				}  			}  			current = pos;  			return pos;  		};  		var otherDeserializer = new List<object> ();  		int split = nextSplit (typeof(TFirst));  		deserializer = cinfo.Deserializer = GetDeserializer<TFirst> (reader' 0' split' false);  		if (typeof(TSecond) != typeof(DontMap)) {  			var next = nextSplit (typeof(TSecond));  			otherDeserializer.Add (GetDeserializer<TSecond> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TThird) != typeof(DontMap)) {  			var next = nextSplit (typeof(TThird));  			otherDeserializer.Add (GetDeserializer<TThird> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFourth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFourth));  			otherDeserializer.Add (GetDeserializer<TFourth> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFifth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFifth));  			otherDeserializer.Add (GetDeserializer<TFifth> (reader' split' next - split' true));  		}  		otherDeserializers = cinfo.OtherDeserializers = otherDeserializer.ToArray ();  		SetQueryCache (identity' cinfo);  	}  	var rootDeserializer = (Func<IDataReader' TFirst>)deserializer;  	var deserializer2 = (Func<IDataReader' TSecond>)otherDeserializers [0];  	Func<IDataReader' TReturn> mapIt = null;  	if (otherDeserializers.Length == 1) {  		mapIt = r => ((Func<TFirst' TSecond' TReturn>)map) (rootDeserializer (r)' deserializer2 (r));  	}  	if (otherDeserializers.Length > 1) {  		var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  		if (otherDeserializers.Length == 2) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  		}  		if (otherDeserializers.Length > 2) {  			var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  			if (otherDeserializers.Length == 3) {  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  			}  			if (otherDeserializers.Length > 3) {  				#if CSHARP30  				                            throw new NotSupportedException(); #else  				var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  				#endif  			}  		}  	}  	if (mapIt != null) {  		bool clean = true;  		try {  			while (reader.Read ()) {  				clean = false;  				TReturn next = mapIt (reader);  				clean = true;  				yield return next;  			}  		}  		finally {  			if (!clean)  				PurgeQueryCache (identity);  		}  	}  }  finally {  	try {  		if (ownedReader != null) {  			ownedReader.Dispose ();  		}  	}  	finally {  		if (ownedCommand != null) {  			ownedCommand.Dispose ();  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: try {  	if (reader == null) {  		ownedCommand = SetupCommand (cnn' transaction' sql' cinfo.ParamReader' (object)param' commandTimeout' commandType);  		ownedReader = ownedCommand.ExecuteReader ();  		reader = ownedReader;  	}  	object deserializer;  	object[] otherDeserializers;  	if ((deserializer = cinfo.Deserializer) == null || (otherDeserializers = cinfo.OtherDeserializers) == null) {  		int current = 0;  		var splits = splitOn.Split (''').ToArray ();  		var splitIndex = 0;  		Func<Type' int> nextSplit = type =>  {  			var currentSplit = splits [splitIndex];  			if (splits.Length > splitIndex + 1) {  				splitIndex++;  			}  			bool skipFirst = false;  			int startingPos = current + 1;  			// if our current type has the split' skip the first time you see it.   			if (type != typeof(Object)) {  				var props = GetSettableProps (type);  				var fields = GetSettableFields (type);  				foreach (var name in props.Select (p => p.Name).Concat (fields.Select (f => f.Name))) {  					if (string.Equals (name' currentSplit' StringComparison.OrdinalIgnoreCase)) {  						skipFirst = true;  						startingPos = current;  						break;  					}  				}  			}  			int pos;  			for (pos = startingPos; pos < reader.FieldCount; pos++) {  				// some people like ID some id ... assuming case insensitive splits for now  				if (splitOn == "*") {  					break;  				}  				if (string.Equals (reader.GetName (pos)' currentSplit' StringComparison.OrdinalIgnoreCase)) {  					if (skipFirst) {  						skipFirst = false;  					}  					else {  						break;  					}  				}  			}  			current = pos;  			return pos;  		};  		var otherDeserializer = new List<object> ();  		int split = nextSplit (typeof(TFirst));  		deserializer = cinfo.Deserializer = GetDeserializer<TFirst> (reader' 0' split' false);  		if (typeof(TSecond) != typeof(DontMap)) {  			var next = nextSplit (typeof(TSecond));  			otherDeserializer.Add (GetDeserializer<TSecond> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TThird) != typeof(DontMap)) {  			var next = nextSplit (typeof(TThird));  			otherDeserializer.Add (GetDeserializer<TThird> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFourth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFourth));  			otherDeserializer.Add (GetDeserializer<TFourth> (reader' split' next - split' true));  			split = next;  		}  		if (typeof(TFifth) != typeof(DontMap)) {  			var next = nextSplit (typeof(TFifth));  			otherDeserializer.Add (GetDeserializer<TFifth> (reader' split' next - split' true));  		}  		otherDeserializers = cinfo.OtherDeserializers = otherDeserializer.ToArray ();  		SetQueryCache (identity' cinfo);  	}  	var rootDeserializer = (Func<IDataReader' TFirst>)deserializer;  	var deserializer2 = (Func<IDataReader' TSecond>)otherDeserializers [0];  	Func<IDataReader' TReturn> mapIt = null;  	if (otherDeserializers.Length == 1) {  		mapIt = r => ((Func<TFirst' TSecond' TReturn>)map) (rootDeserializer (r)' deserializer2 (r));  	}  	if (otherDeserializers.Length > 1) {  		var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  		if (otherDeserializers.Length == 2) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  		}  		if (otherDeserializers.Length > 2) {  			var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  			if (otherDeserializers.Length == 3) {  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  			}  			if (otherDeserializers.Length > 3) {  				#if CSHARP30  				                            throw new NotSupportedException(); #else  				var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  				mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  				#endif  			}  		}  	}  	if (mapIt != null) {  		bool clean = true;  		try {  			while (reader.Read ()) {  				clean = false;  				TReturn next = mapIt (reader);  				clean = true;  				yield return next;  			}  		}  		finally {  			if (!clean)  				PurgeQueryCache (identity);  		}  	}  }  finally {  	try {  		if (ownedReader != null) {  			ownedReader.Dispose ();  		}  	}  	finally {  		if (ownedCommand != null) {  			ownedCommand.Dispose ();  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 1) {  	var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  	if (otherDeserializers.Length == 2) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  	}  	if (otherDeserializers.Length > 2) {  		var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  		if (otherDeserializers.Length == 3) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  		}  		if (otherDeserializers.Length > 3) {  			#if CSHARP30  			                            throw new NotSupportedException(); #else  			var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  			#endif  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 1) {  	var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  	if (otherDeserializers.Length == 2) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  	}  	if (otherDeserializers.Length > 2) {  		var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  		if (otherDeserializers.Length == 3) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  		}  		if (otherDeserializers.Length > 3) {  			#if CSHARP30  			                            throw new NotSupportedException(); #else  			var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  			#endif  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 1) {  	var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  	if (otherDeserializers.Length == 2) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  	}  	if (otherDeserializers.Length > 2) {  		var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  		if (otherDeserializers.Length == 3) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  		}  		if (otherDeserializers.Length > 3) {  			#if CSHARP30  			                            throw new NotSupportedException(); #else  			var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  			#endif  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 1) {  	var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  	if (otherDeserializers.Length == 2) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  	}  	if (otherDeserializers.Length > 2) {  		var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  		if (otherDeserializers.Length == 3) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  		}  		if (otherDeserializers.Length > 3) {  			#if CSHARP30  			                            throw new NotSupportedException(); #else  			var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  			#endif  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 1) {  	var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  	if (otherDeserializers.Length == 2) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  	}  	if (otherDeserializers.Length > 2) {  		var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  		if (otherDeserializers.Length == 3) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  		}  		if (otherDeserializers.Length > 3) {  			#if CSHARP30  			                            throw new NotSupportedException(); #else  			var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  			#endif  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 1) {  	var deserializer3 = (Func<IDataReader' TThird>)otherDeserializers [1];  	if (otherDeserializers.Length == 2) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  	}  	if (otherDeserializers.Length > 2) {  		var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  		if (otherDeserializers.Length == 3) {  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  		}  		if (otherDeserializers.Length > 3) {  			#if CSHARP30  			                            throw new NotSupportedException(); #else  			var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  			mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  			#endif  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length == 2) {  	mapIt = r => ((Func<TFirst' TSecond' TThird' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r));  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 2) {  	var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  	if (otherDeserializers.Length == 3) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  	}  	if (otherDeserializers.Length > 3) {  		#if CSHARP30  		                            throw new NotSupportedException(); #else  		var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  		#endif  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 2) {  	var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  	if (otherDeserializers.Length == 3) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  	}  	if (otherDeserializers.Length > 3) {  		#if CSHARP30  		                            throw new NotSupportedException(); #else  		var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  		#endif  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 2) {  	var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  	if (otherDeserializers.Length == 3) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  	}  	if (otherDeserializers.Length > 3) {  		#if CSHARP30  		                            throw new NotSupportedException(); #else  		var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  		#endif  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 2) {  	var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  	if (otherDeserializers.Length == 3) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  	}  	if (otherDeserializers.Length > 3) {  		#if CSHARP30  		                            throw new NotSupportedException(); #else  		var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  		#endif  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 2) {  	var deserializer4 = (Func<IDataReader' TFourth>)otherDeserializers [2];  	if (otherDeserializers.Length == 3) {  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  	}  	if (otherDeserializers.Length > 3) {  		#if CSHARP30  		                            throw new NotSupportedException(); #else  		var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  		mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  		#endif  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length == 3) {  	mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r));  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 3) {  	#if CSHARP30  	                            throw new NotSupportedException(); #else  	var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  	mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  	#endif  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,MultiMapImpl,The following statement contains a magic number: if (otherDeserializers.Length > 3) {  	#if CSHARP30  	                            throw new NotSupportedException(); #else  	var deserializer5 = (Func<IDataReader' TFifth>)otherDeserializers [3];  	mapIt = r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) (rootDeserializer (r)' deserializer2 (r)' deserializer3 (r)' deserializer4 (r)' deserializer5 (r));  	#endif  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	bool isString = value is IEnumerable<string>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		command.Parameters.Add (listParam);  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	bool isString = value is IEnumerable<string>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		command.Parameters.Add (listParam);  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	bool isString = value is IEnumerable<string>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		command.Parameters.Add (listParam);  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	command.Parameters.Add (listParam);  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	command.Parameters.Add (listParam);  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: listParam.Size = 4000;  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (item != null && ((string)item).Length > 4000) {  	listParam.Size = -1;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  }  else {  	command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  		var grp = match.Value;  		var sb = new StringBuilder ("(").Append (grp).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (grp).Append (i);  		}  		return sb.Append (')').ToString ();  	});  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  	var grp = match.Value;  	var sb = new StringBuilder ("(").Append (grp).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (grp).Append (i);  	}  	return sb.Append (')').ToString ();  });  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: for (int i = 2; i <= count; i++) {  	sb.Append (''').Append (grp).Append (i);  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (filterParams) {  		if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) {  			// can't see the parameter in the text (even in a comment' etc) - burn it with fire  			continue;  		}  	}  	if (prop.PropertyType == typeof(DbString)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [dbstring]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [dbstring] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [dbstring] [command] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(DbString).GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name);  	if (dbType == DbType.Xml) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  	// stack is now [parameters] [parameters] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters] [parameter] [parameter]  	il.Emit (OpCodes.Ldstr' prop.Name);  	// stack is now [parameters] [parameters] [parameter] [parameter] [name]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  	// stack is now [parameters] [parameters] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters] [parameter] [parameter]  	EmitInt32 (il' (int)dbType);  	// stack is now [parameters] [parameters] [parameter] [parameter] [db-type]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  	// stack is now [parameters] [parameters] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [parameters] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [parameters] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [parameters] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [parameters] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [parameters] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [parameters] [parameter]  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [parameters] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [parameters] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  		il.MarkLabel (endOfSize);  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  	// stack is now [parameters]  	il.Emit (OpCodes.Pop);  	// IList.Add returns the new index (int); we don't care  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (filterParams) {  		if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) {  			// can't see the parameter in the text (even in a comment' etc) - burn it with fire  			continue;  		}  	}  	if (prop.PropertyType == typeof(DbString)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [dbstring]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [dbstring] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [dbstring] [command] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(DbString).GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name);  	if (dbType == DbType.Xml) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  	// stack is now [parameters] [parameters] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters] [parameter] [parameter]  	il.Emit (OpCodes.Ldstr' prop.Name);  	// stack is now [parameters] [parameters] [parameter] [parameter] [name]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  	// stack is now [parameters] [parameters] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters] [parameter] [parameter]  	EmitInt32 (il' (int)dbType);  	// stack is now [parameters] [parameters] [parameter] [parameter] [db-type]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  	// stack is now [parameters] [parameters] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [parameters] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [parameters] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [parameters] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [parameters] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [parameters] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [parameters] [parameter]  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [parameters] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [parameters] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  		il.MarkLabel (endOfSize);  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  	// stack is now [parameters]  	il.Emit (OpCodes.Pop);  	// IList.Add returns the new index (int); we don't care  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]   	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]   	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]   }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]   }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dapper,SqlMapper,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dapper,DynamicParameters,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var p = command.CreateParameter ();  	var val = param.Value;  	p.ParameterName = param.Name;  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (param.DbType != null) {  		p.DbType = param.DbType.Value;  	}  	command.Parameters.Add (p);  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var p = command.CreateParameter ();  	var val = param.Value;  	p.ParameterName = param.Name;  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (param.DbType != null) {  		p.DbType = param.DbType.Value;  	}  	command.Parameters.Add (p);  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: p.Size = 4000;  
Magic Number,Dapper,DbString,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  }  else {  	param.Size = Length;  }  
Magic Number,Dapper,DbString,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  }  else {  	param.Size = Length;  }  
Magic Number,Dapper,DbString,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,AddParameter,The following statement contains a magic number: param.Size = 4000;  
Magic Number,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,Parse,The following statement contains a magic number: ParseItems (record.Remove (0' 34)' station' year' month' list);  
Magic Number,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,ParseItems,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 12) > 0) {  	var record = new string (buffer);  	var flag1 = record.Substring (10' 1);  	if (flag1 != " " && flag1 != "J" && flag1 != "T") {  		continue;  	}  	var flag2 = record.Substring (11' 1);  	if (flag2 != "1" && flag2 != "0") {  		continue;  	}  	var day = int.Parse (record.Substring (0' 2));  	var hour = int.Parse (record.Substring (2' 2));  	var date = new DateTime (year' month' day);  	var value = int.Parse (record.Substring (4' 6));  	var result = new Td3200 {  		StationNumber = station'  		Date = date'  		Value = value'  		ObservationHour = hour  	};  	list.Add (result);  }  
Magic Number,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,ParseItems,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 12) > 0) {  	var record = new string (buffer);  	var flag1 = record.Substring (10' 1);  	if (flag1 != " " && flag1 != "J" && flag1 != "T") {  		continue;  	}  	var flag2 = record.Substring (11' 1);  	if (flag2 != "1" && flag2 != "0") {  		continue;  	}  	var day = int.Parse (record.Substring (0' 2));  	var hour = int.Parse (record.Substring (2' 2));  	var date = new DateTime (year' month' day);  	var value = int.Parse (record.Substring (4' 6));  	var result = new Td3200 {  		StationNumber = station'  		Date = date'  		Value = value'  		ObservationHour = hour  	};  	list.Add (result);  }  
Magic Number,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,ParseItems,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 12) > 0) {  	var record = new string (buffer);  	var flag1 = record.Substring (10' 1);  	if (flag1 != " " && flag1 != "J" && flag1 != "T") {  		continue;  	}  	var flag2 = record.Substring (11' 1);  	if (flag2 != "1" && flag2 != "0") {  		continue;  	}  	var day = int.Parse (record.Substring (0' 2));  	var hour = int.Parse (record.Substring (2' 2));  	var date = new DateTime (year' month' day);  	var value = int.Parse (record.Substring (4' 6));  	var result = new Td3200 {  		StationNumber = station'  		Date = date'  		Value = value'  		ObservationHour = hour  	};  	list.Add (result);  }  
Magic Number,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,ParseItems,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 12) > 0) {  	var record = new string (buffer);  	var flag1 = record.Substring (10' 1);  	if (flag1 != " " && flag1 != "J" && flag1 != "T") {  		continue;  	}  	var flag2 = record.Substring (11' 1);  	if (flag2 != "1" && flag2 != "0") {  		continue;  	}  	var day = int.Parse (record.Substring (0' 2));  	var hour = int.Parse (record.Substring (2' 2));  	var date = new DateTime (year' month' day);  	var value = int.Parse (record.Substring (4' 6));  	var result = new Td3200 {  		StationNumber = station'  		Date = date'  		Value = value'  		ObservationHour = hour  	};  	list.Add (result);  }  
Magic Number,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,ParseItems,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 12) > 0) {  	var record = new string (buffer);  	var flag1 = record.Substring (10' 1);  	if (flag1 != " " && flag1 != "J" && flag1 != "T") {  		continue;  	}  	var flag2 = record.Substring (11' 1);  	if (flag2 != "1" && flag2 != "0") {  		continue;  	}  	var day = int.Parse (record.Substring (0' 2));  	var hour = int.Parse (record.Substring (2' 2));  	var date = new DateTime (year' month' day);  	var value = int.Parse (record.Substring (4' 6));  	var result = new Td3200 {  		StationNumber = station'  		Date = date'  		Value = value'  		ObservationHour = hour  	};  	list.Add (result);  }  
Magic Number,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,ParseItems,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 12) > 0) {  	var record = new string (buffer);  	var flag1 = record.Substring (10' 1);  	if (flag1 != " " && flag1 != "J" && flag1 != "T") {  		continue;  	}  	var flag2 = record.Substring (11' 1);  	if (flag2 != "1" && flag2 != "0") {  		continue;  	}  	var day = int.Parse (record.Substring (0' 2));  	var hour = int.Parse (record.Substring (2' 2));  	var date = new DateTime (year' month' day);  	var value = int.Parse (record.Substring (4' 6));  	var result = new Td3200 {  		StationNumber = station'  		Date = date'  		Value = value'  		ObservationHour = hour  	};  	list.Add (result);  }  
Magic Number,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,ParseItems,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 12) > 0) {  	var record = new string (buffer);  	var flag1 = record.Substring (10' 1);  	if (flag1 != " " && flag1 != "J" && flag1 != "T") {  		continue;  	}  	var flag2 = record.Substring (11' 1);  	if (flag2 != "1" && flag2 != "0") {  		continue;  	}  	var day = int.Parse (record.Substring (0' 2));  	var hour = int.Parse (record.Substring (2' 2));  	var date = new DateTime (year' month' day);  	var value = int.Parse (record.Substring (4' 6));  	var result = new Td3200 {  		StationNumber = station'  		Date = date'  		Value = value'  		ObservationHour = hour  	};  	list.Add (result);  }  
Magic Number,DataSetExtension,Td3200,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Td3200.cs,ParseItems,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 12) > 0) {  	var record = new string (buffer);  	var flag1 = record.Substring (10' 1);  	if (flag1 != " " && flag1 != "J" && flag1 != "T") {  		continue;  	}  	var flag2 = record.Substring (11' 1);  	if (flag2 != "1" && flag2 != "0") {  		continue;  	}  	var day = int.Parse (record.Substring (0' 2));  	var hour = int.Parse (record.Substring (2' 2));  	var date = new DateTime (year' month' day);  	var value = int.Parse (record.Substring (4' 6));  	var result = new Td3200 {  		StationNumber = station'  		Date = date'  		Value = value'  		ObservationHour = hour  	};  	list.Add (result);  }  
Magic Number,DataSetExtension,ExportController,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\ExportController.cs,GetFile,The following statement contains a magic number: return Path.Combine (GetDirectory (directory)' "gr" + grid.ToString ().PadLeft (3' '0'));  
Magic Number,DataSetExtension,ExportController,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\ExportController.cs,ProcessMeasurements,The following statement contains a magic number: for (var month = 1; month <= 12; month++) {  	var subset = from measurement in measurements  	where measurement.Date >= new DateTime (year' month' 1) && measurement.Date <= new DateTime (year' month' DateTime.DaysInMonth (year' month))  	select measurement;  	writer.Write (subset.ToArray ()' month);  }  
Magic Number,DataSetExtension,ExportController,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\ExportController.cs,GetEndDate,The following statement contains a magic number: return new DateTime (year' 12' DateTime.DaysInMonth (year' 12));  
Magic Number,DataSetExtension,ExportController,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\ExportController.cs,GetEndDate,The following statement contains a magic number: return new DateTime (year' 12' DateTime.DaysInMonth (year' 12));  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: if (gridpoint != "") {  	GridPoint = long.Parse (record.Substring (0' 3).Trim ());  	GridPointLatitude = long.Parse (record.Substring (4' 3).Trim ());  	GridPointLongitude = long.Parse (record.Substring (7' 3));  }  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: if (gridpoint != "") {  	GridPoint = long.Parse (record.Substring (0' 3).Trim ());  	GridPointLatitude = long.Parse (record.Substring (4' 3).Trim ());  	GridPointLongitude = long.Parse (record.Substring (7' 3));  }  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: if (gridpoint != "") {  	GridPoint = long.Parse (record.Substring (0' 3).Trim ());  	GridPointLatitude = long.Parse (record.Substring (4' 3).Trim ());  	GridPointLongitude = long.Parse (record.Substring (7' 3));  }  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: if (gridpoint != "") {  	GridPoint = long.Parse (record.Substring (0' 3).Trim ());  	GridPointLatitude = long.Parse (record.Substring (4' 3).Trim ());  	GridPointLongitude = long.Parse (record.Substring (7' 3));  }  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: if (gridpoint != "") {  	GridPoint = long.Parse (record.Substring (0' 3).Trim ());  	GridPointLatitude = long.Parse (record.Substring (4' 3).Trim ());  	GridPointLongitude = long.Parse (record.Substring (7' 3));  }  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: GridPoint = long.Parse (record.Substring (0' 3).Trim ());  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: GridPointLatitude = long.Parse (record.Substring (4' 3).Trim ());  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: GridPointLatitude = long.Parse (record.Substring (4' 3).Trim ());  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: GridPointLongitude = long.Parse (record.Substring (7' 3));  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: GridPointLongitude = long.Parse (record.Substring (7' 3));  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: Name = record.Substring (10' 30).Trim ();  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: Name = record.Substring (10' 30).Trim ();  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: Number = record.Substring (41' 7).Trim ();  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: Number = record.Substring (41' 7).Trim ();  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: Latitude = long.Parse (record.Substring (48' 5).Trim ());  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: Latitude = long.Parse (record.Substring (48' 5).Trim ());  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: Longitude = long.Parse (record.Substring (53' 6).Trim ());  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: Longitude = long.Parse (record.Substring (53' 6).Trim ());  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: HistoricalRecordCount = long.Parse (record.Substring (59' 8).Trim ());  
Magic Number,DataSetExtension,GridStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStation.cs,Parse,The following statement contains a magic number: HistoricalRecordCount = long.Parse (record.Substring (59' 8).Trim ());  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Number = record.Substring (0' 6).Trim ();  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Name = record.Substring (99' 31).Trim ();  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Name = record.Substring (99' 31).Trim ();  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Country = record.Substring (38' 21).Trim ();  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Country = record.Substring (38' 21).Trim ();  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: State = record.Substring (59' 2).Trim ();  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: State = record.Substring (59' 2).Trim ();  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: County = record.Substring (62' 31).Trim ();  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: County = record.Substring (62' 31).Trim ();  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Start = ParseDate (record.Substring (130' 9));  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Start = ParseDate (record.Substring (130' 9));  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: End = ParseDate (record.Substring (139' 9));  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: End = ParseDate (record.Substring (139' 9));  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: if (End == new DateTime (9999' 12' 31)) {  	End = null;  }  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: if (End == new DateTime (9999' 12' 31)) {  	End = null;  }  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: if (End == new DateTime (9999' 12' 31)) {  	End = null;  }  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Latitude = ParseLatitude (record.Substring (149' 9));  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Latitude = ParseLatitude (record.Substring (149' 9));  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Longitude = ParseLongitude (record.Substring (158' 10));  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,Parse,The following statement contains a magic number: Longitude = ParseLongitude (record.Substring (158' 10));  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,ToRadian,The following statement contains a magic number: return val * (Math.PI / 180);  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,ConvertDecimalToDegreesMinutes,The following statement contains a magic number: return Convert.ToInt64 (degrees * 100 + Math.Floor (minutes));  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,ConvertDegreeAngleToDecimalDegrees,The following statement contains a magic number: return Math.Round (degrees + (double)(minutes / 60) + (double)(seconds / 3600)' 6);  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,ConvertDegreeAngleToDecimalDegrees,The following statement contains a magic number: return Math.Round (degrees + (double)(minutes / 60) + (double)(seconds / 3600)' 6);  
Magic Number,DataSetExtension,Station,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Station.cs,ConvertDegreeAngleToDecimalDegrees,The following statement contains a magic number: return Math.Round (degrees + (double)(minutes / 60) + (double)(seconds / 3600)' 6);  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ParseRecords,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 7) > 0) {  	var record = new string (buffer);  	var flag = record.Substring (6' 1);  	if (flag == " " || flag == "E" || flag == "N" || flag == "Y" || flag == "T") {  		var value = ParseValue (record.Substring (0' 6));  		long converted = ConvertValue (value' element' flag == "T");  		var archive = new CanadaMeasurement {  			StationNumber = number'  			Date = new DateTime (year' month' day)'  			Element = element'  			Value = converted  		};  		list.Add (archive);  	}  	day++;  }  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ParseRecords,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 7) > 0) {  	var record = new string (buffer);  	var flag = record.Substring (6' 1);  	if (flag == " " || flag == "E" || flag == "N" || flag == "Y" || flag == "T") {  		var value = ParseValue (record.Substring (0' 6));  		long converted = ConvertValue (value' element' flag == "T");  		var archive = new CanadaMeasurement {  			StationNumber = number'  			Date = new DateTime (year' month' day)'  			Element = element'  			Value = converted  		};  		list.Add (archive);  	}  	day++;  }  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ParseRecords,The following statement contains a magic number: while (reader.ReadBlock (buffer' 0' 7) > 0) {  	var record = new string (buffer);  	var flag = record.Substring (6' 1);  	if (flag == " " || flag == "E" || flag == "N" || flag == "Y" || flag == "T") {  		var value = ParseValue (record.Substring (0' 6));  		long converted = ConvertValue (value' element' flag == "T");  		var archive = new CanadaMeasurement {  			StationNumber = number'  			Date = new DateTime (year' month' day)'  			Element = element'  			Value = converted  		};  		list.Add (archive);  	}  	day++;  }  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ParseRecords,The following statement contains a magic number: if (flag == " " || flag == "E" || flag == "N" || flag == "Y" || flag == "T") {  	var value = ParseValue (record.Substring (0' 6));  	long converted = ConvertValue (value' element' flag == "T");  	var archive = new CanadaMeasurement {  		StationNumber = number'  		Date = new DateTime (year' month' day)'  		Element = element'  		Value = converted  	};  	list.Add (archive);  }  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ConvertValue,The following statement contains a magic number: if (element == Element.Precipitation) {  	var inches = trace ? .01 : value / 25.4;  	converted = Int64.Parse (Math.Round (inches' 2).ToString ().Replace ("."' ""));  }  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ConvertValue,The following statement contains a magic number: if (element == Element.Precipitation) {  	var inches = trace ? .01 : value / 25.4;  	converted = Int64.Parse (Math.Round (inches' 2).ToString ().Replace ("."' ""));  }  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ConvertValue,The following statement contains a magic number: if (element == Element.Precipitation) {  	var inches = trace ? .01 : value / 25.4;  	converted = Int64.Parse (Math.Round (inches' 2).ToString ().Replace ("."' ""));  }  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ConvertValue,The following statement contains a magic number: converted = Int64.Parse (Math.Round (inches' 2).ToString ().Replace ("."' ""));  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ConvertCelsiusToFahrenheit,The following statement contains a magic number: return ((9.0 / 5.0) * value) + 32;  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ConvertCelsiusToFahrenheit,The following statement contains a magic number: return ((9.0 / 5.0) * value) + 32;  
Magic Number,DataSetExtension,CanadaMeasurement,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaMeasurement.cs,ConvertCelsiusToFahrenheit,The following statement contains a magic number: return ((9.0 / 5.0) * value) + 32;  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: foreach (var detail in details.OrderBy (detail => detail.Sequence)) {  	if (IncludeHistoricalCount) {  		detail.RecordCount += detail.HistoricalRecordCount;  	}  	var name = detail.Name.PadRight (30' ' ').Substring (0' 30);  	if (header) {  		var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  		header = false;  	}  	else {  		var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  		writer.WriteLine (line);  	}  	total += detail.RecordCount;  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: if (header) {  	var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  	header = false;  }  else {  	var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: if (header) {  	var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  	header = false;  }  else {  	var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: if (header) {  	var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  	header = false;  }  else {  	var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: if (header) {  	var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  	header = false;  }  else {  	var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: if (header) {  	var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  	header = false;  }  else {  	var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: if (header) {  	var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  	header = false;  }  else {  	var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: if (header) {  	var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  	header = false;  }  else {  	var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: if (header) {  	var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  	header = false;  }  else {  	var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: if (header) {  	var line = string.Format (HeaderFormat' detail.GridPoint.ToString ().PadLeft (3' ' ')' detail.GridPointLatitude.ToString ().PadLeft (3' ' ')' detail.GridPointLongitude.ToString ().PadLeft (3' ' ')' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  	header = false;  }  else {  	var line = string.Format (LineFormat' name' detail.Number.PadLeft (7' ' ')' detail.Latitude' detail.Longitude.ToString ().PadLeft (5' ' ')' detail.RecordCount.ToString ().PadLeft (8' ' '));  	writer.WriteLine (line);  }  
Magic Number,DataSetExtension,GridSummaryWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridSummaryWriter.cs,Write,The following statement contains a magic number: writer.WriteLine (TotalLine + total.ToString ().PadLeft (8' ' '));  
Magic Number,DataSetExtension,PrecipitationFormatter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\PrecipitationFormatter.cs,Format,The following statement contains a magic number: return string.Format ("{0} {1} {2} {3}"' measurement.Date.ToString ("yyMMdd")' hour' sequenceCode' measurement.Value.ToString ().PadLeft (3' ' '));  
Magic Number,DataSetExtension,TemperatureFormatter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\TemperatureFormatter.cs,Format,The following statement contains a magic number: if (year.StartsWith ("0")) {  	year = year.Remove (0' 1).PadLeft (2' ' ');  }  
Magic Number,DataSetExtension,TemperatureFormatter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\TemperatureFormatter.cs,Format,The following statement contains a magic number: year = year.Remove (0' 1).PadLeft (2' ' ');  
Magic Number,DataSetExtension,TemperatureFormatter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\TemperatureFormatter.cs,ConvertFahrenheitToCelsius,The following statement contains a magic number: return (5.0 / 9.0) * (f - 32);  
Magic Number,DataSetExtension,TemperatureFormatter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\TemperatureFormatter.cs,ConvertFahrenheitToCelsius,The following statement contains a magic number: return (5.0 / 9.0) * (f - 32);  
Magic Number,DataSetExtension,TemperatureFormatter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\TemperatureFormatter.cs,ConvertFahrenheitToCelsius,The following statement contains a magic number: return (5.0 / 9.0) * (f - 32);  
Magic Number,DataSetExtension,MeasurementWriter,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\MeasurementWriter.cs,WriteMissing,The following statement contains a magic number: if (measurement == null) {  	Missing.Add (date);  	var missing = new Measurement {  		Date = date'  		ObservationHour = 99  	};  	writer.WriteLine (Formatter.Format (missing' -1));  	return;  }  
Magic Number,DataSetExtension,GridStationExport,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\GridStationExport.cs,Export,The following statement contains a magic number: for (long i = 1; i <= 766; i++) {  	var stations = connection.Query<GridStation> (query' new {  		GridPoint = i  	}).OrderBy (station => station.Sequence);  	writer.Write (stations.ToArray ());  }  
Magic Number,DataSetExtension,CanadaStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaStation.cs,Parse,The following statement contains a magic number: Latitude = double.Parse (columns [2]);  
Magic Number,DataSetExtension,CanadaStation,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\CanadaStation.cs,Parse,The following statement contains a magic number: Longitude = double.Parse (columns [3]) * -1;  
Magic Number,DataSetExtension.Import,StationImport,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Import\StationImport.cs,Import,The following statement contains a magic number: using (var reader = new StreamReader (stream)) {  	for (int i = 0; i < 3; i++) {  		reader.ReadLine ();  	}  	while (!reader.EndOfStream) {  		var station = new Station ();  		station.Parse (reader.ReadLine ());  		if (station.Country == "UNITED STATES" && (Start == DateTime.MinValue || station.Start >= Start)) {  			station.Save (connection' command);  			Total += 1;  		}  	}  }  
Magic Number,DataSetExtension.Import,StationImport,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Import\StationImport.cs,Import,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	reader.ReadLine ();  }  
Missing Default,Dapper,DynamicParameters,C:\repos\sethdeckard_LR-dataset-extension\DataSetExtension\Dapper\SqlMapper.cs,Clean,The following switch statement is missing a default case: switch (name [0]) {  case '@':  case ':':  case '?':  	return name.Substring (1);  }  
