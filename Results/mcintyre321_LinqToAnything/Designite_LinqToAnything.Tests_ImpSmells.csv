Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,SomeDataAccessMethod,Cyclomatic complexity of the method is 10
Long Parameter List,LinqToAnything.Tests,AutoIndexExtension,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\AutoIndexExtension.cs,LookupsForPropertyName,The method has 6 parameters. Parameters: lookups' lookupKey' filteredItems' propertyName' value' getValueFromObj
Long Statement,LinqToAnything.Tests,AutoIndexExtension,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\AutoIndexExtension.cs,AutoIndex,The length of the statement  "                    filteredItems = LookupsForPropertyName(lookups' lookupKey' filteredItems' whereClause.PropertyName' whereClause.Value' getValueFromObj); " is 136.
Long Statement,LinqToAnything.Tests,AutoIndexExtension,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\AutoIndexExtension.cs,AutoIndex,The length of the statement  "                        var groupings = lookups[lookupKey].Select(l => Grouping.Create(qi.GroupBy.KeyType' typeof(T)' l.Key' l.Cast<object>())); " is 120.
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,TestForIndexExtension,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123}'                  new User {UserId = 456}'              };
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,TestForIndexExtension,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123}'                  new User {UserId = 456}'              };
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,TestForIndexExtension,The following statement contains a magic number: var friendships = new List<Friendship>()              {                  new Friendship {UserId = 123' FriendUserId = 456}              }.AsQueryable()                  .IndexOn(fr => fr.UserId);
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,TestForIndexExtension,The following statement contains a magic number: var friendships = new List<Friendship>()              {                  new Friendship {UserId = 123' FriendUserId = 456}              }.AsQueryable()                  .IndexOn(fr => fr.UserId);
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,TestForIndexExtension2,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,TestForIndexExtension2,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,TestForIndexExtension2,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,TestForIndexExtension2,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,TestForIndexExtension2,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,GroupTest,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,GroupTest,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,GroupTest,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,GroupTest,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,GroupTest,The following statement contains a magic number: var users = new List<User>()              {                  new User {UserId = 123' Role = "m"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "p"}'                  new User {UserId = 456' Role = "j"' Team = "q"}'                  new User {UserId = 789' Role = "j"' Team = "q"}'                  new User {UserId = 012' Role = "m"' Team = "1"}'              }.AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,GroupTest,The following statement contains a magic number: Assert.Equal(3' groups.ToArray().Count());
Magic Number,LinqToAnything.Tests,IndexExtensionTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\IndexExtensionTests.cs,GroupTest,The following statement contains a magic number: Assert.Equal(2' teamP.Count());
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanSkipAndTake,The following statement contains a magic number: var items = pq.Skip(3).Take(2).ToArray();
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanSkipAndTake,The following statement contains a magic number: var items = pq.Skip(3).Take(2).ToArray();
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanSkipAndTake,The following statement contains a magic number: Assert.Equal(3' Skipped);
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanSkipAndTake,The following statement contains a magic number: Assert.Equal(2' Taken);
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanConcat,The following statement contains a magic number: var items = pq.Skip(3).Take(2).Concat(pq.Take(1)).ToArray();
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanConcat,The following statement contains a magic number: var items = pq.Skip(3).Take(2).Concat(pq.Take(1)).ToArray();
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoACountWithANullComparison,The following statement contains a magic number: Assert.Equal(10' count);
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoACountWithNoIllEffect,The following statement contains a magic number: Assert.Equal(10' count);
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoATakeWithNoIllEffectOnOtherQueries,The following statement contains a magic number: var somethingElse = pq.Take(5);
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoATakeWithNoIllEffectOnOtherQueries,The following statement contains a magic number: Assert.Equal(5' somethingElse.Count());
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoATakeWithNoIllEffectOnOtherQueries,The following statement contains a magic number: Assert.Equal(10' pq.Count());
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoASelectWithNoIllEffectOnOtherQueries,The following statement contains a magic number: Assert.Equal(5' pq.Take(5).Count());
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoASelectWithNoIllEffectOnOtherQueries,The following statement contains a magic number: Assert.Equal(5' pq.Take(5).Count());
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoASelectWithNoIllEffectOnOtherQueries,The following statement contains a magic number: Assert.Equal(10' pq.Count());
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanWorkWithoutQuery,The following statement contains a magic number: Assert.Equal("Item 01'Item 02"' string.Join("'"' items.Take(2).Select(i => i.Name)));
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanHandleAnOperatorWhereClauseOnAValueType,The following statement contains a magic number: var items = pq.Where(s => s.Index != 0 && s.Index == 7);
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanHandleAProjectionAndACountAgainstIncompleteProvider,The following statement contains a magic number: Assert.Equal(10' itemCount);
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAnOptimizedCount,The following statement contains a magic number: Func<QueryInfo' object> getPageFromDataSource = (info) =>              {                  if (info.ResultType is Count) return 15;                  throw new NotImplementedException();              };
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAnOptimizedCount,The following statement contains a magic number: Assert.Equal(15' pq.Count(x => x.Index > 1));
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanApplyAQueryInfo,The following statement contains a magic number: var queryable = Enumerable.Range(1' 100)                  .Select(i => new SomeEntity()                  {                      Name = "User" + i'                      Index = i                  })                  .ToArray().AsQueryable();
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanApplyAQueryInfo,The following statement contains a magic number: Assert.Equal(90' pq.OrderByDescending(o => o.Index).Skip(10).Take(1).Single().Index);
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanApplyAQueryInfo,The following statement contains a magic number: Assert.Equal(90' pq.OrderByDescending(o => o.Index).Skip(10).Take(1).Single().Index);
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAutindexGroupBy,The following statement contains a magic number: var queryable = Enumerable.Range(0' 99)                  .Select(i => new SomeEntity()                  {                      Name = "User" + i'                      Index = i'                      Site = i/10                  })                  .ToArray().AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAutindexGroupBy,The following statement contains a magic number: var queryable = Enumerable.Range(0' 99)                  .Select(i => new SomeEntity()                  {                      Name = "User" + i'                      Index = i'                      Site = i/10                  })                  .ToArray().AsQueryable().AutoIndex();
Magic Number,LinqToAnything.Tests,Tests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAutindexGroupBy,The following statement contains a magic number: Assert.Equal(10' groups.Count());
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAInterceptedGroupBy,The following statement contains a magic number: var items = Enumerable.Range(0' 99)                      .Select(i => new SomeEntity()                      {                          Name = "User" + i'                          Index = i'                          Site = i/10'                          Category = i/5                      })                      .ToArray();
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAInterceptedGroupBy,The following statement contains a magic number: var items = Enumerable.Range(0' 99)                      .Select(i => new SomeEntity()                      {                          Name = "User" + i'                          Index = i'                          Site = i/10'                          Category = i/5                      })                      .ToArray();
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAInterceptedGroupBy,The following statement contains a magic number: var items = Enumerable.Range(0' 99)                      .Select(i => new SomeEntity()                      {                          Name = "User" + i'                          Index = i'                          Site = i/10'                          Category = i/5                      })                      .ToArray();
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAInterceptedGroupBy,The following statement contains a magic number: var numberofCategoryGroups = 20;
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoADynamicInterceptedGroupBy,The following statement contains a magic number: var items = Enumerable.Range(0' 99)                      .Select(i => new SomeEntity()                      {                          Name = "User" + i'                          Index = i'                          Site = i / 10'                          Category = i / 5                      })                      .ToArray().AsQueryable();
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoADynamicInterceptedGroupBy,The following statement contains a magic number: var items = Enumerable.Range(0' 99)                      .Select(i => new SomeEntity()                      {                          Name = "User" + i'                          Index = i'                          Site = i / 10'                          Category = i / 5                      })                      .ToArray().AsQueryable();
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoADynamicInterceptedGroupBy,The following statement contains a magic number: var items = Enumerable.Range(0' 99)                      .Select(i => new SomeEntity()                      {                          Name = "User" + i'                          Index = i'                          Site = i / 10'                          Category = i / 5                      })                      .ToArray().AsQueryable();
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoADynamicInterceptedGroupBy,The following statement contains a magic number: var numberofCategoryGroups = 10;
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAnUninterceptedGroupBy,The following statement contains a magic number: var items = Enumerable.Range(0' 99)                      .Select(i => new SomeEntity()                      {                          Name = "User" + i'                          Index = i'                          Site = i/10                      })                      .ToArray();
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAnUninterceptedGroupBy,The following statement contains a magic number: var items = Enumerable.Range(0' 99)                      .Select(i => new SomeEntity()                      {                          Name = "User" + i'                          Index = i'                          Site = i/10                      })                      .ToArray();
Magic Number,LinqToAnything.Tests,GroupByTests,D:\research\architectureSmells\repos\mcintyre321_LinqToAnything\LinqToAnything.Tests\Tests.cs,CanDoAnUninterceptedGroupBy,The following statement contains a magic number: Assert.Equal(10' groups.Count());
