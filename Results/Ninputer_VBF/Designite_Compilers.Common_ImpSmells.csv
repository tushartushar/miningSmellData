Implementation smell,Namespace,Class,File,Method,Description
Long Statement,VBF.Compilers,CompilationError,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\CompilationError.cs,ToString,The length of the statement  "            return String.Format("{0} : {1}  Line: {2} Column: {3}"' Info.Id' Message' ErrorPosition.StartLocation.Line' ErrorPosition.StartLocation.Column); " is 145.
Magic Number,VBF.Compilers,SourceLocation,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\SourceLocation.cs,GetHashCode,The following statement contains a magic number: return Line ^ Column << 4 ^ CharIndex << 8;
Magic Number,VBF.Compilers,SourceLocation,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\SourceLocation.cs,GetHashCode,The following statement contains a magic number: return Line ^ Column << 4 ^ CharIndex << 8;
Magic Number,VBF.Compilers,SourceSpan,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\SourceSpan.cs,GetHashCode,The following statement contains a magic number: return (m_endLocation.GetHashCode() << 16) ^ m_startLocation.GetHashCode();
Magic Number,VBF.Compilers.Common,PriorityQueue<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\Common\PriorityQueue.cs,InitializeHeap,The following statement contains a magic number: for (int i = m_size / 2; i > 0; i--)              {                  PercolateDown(i);              }
Magic Number,VBF.Compilers.Common,PriorityQueue<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\Common\PriorityQueue.cs,PercolateDown,The following statement contains a magic number: while (hole * 2 <= m_size)              {                  int child = hole * 2;                    if (child != m_size &&                      m_inRightOrder(m_binaryHeap[child + 1]' m_binaryHeap[child]))                  {                      child++;                  }                    if (m_inRightOrder(m_binaryHeap[child]' temp))                  {                      m_binaryHeap[hole] = m_binaryHeap[child];                      m_indexDict[m_binaryHeap[hole]] = hole;                  }                  else                  {                      break;                  }                    hole = child;              }
Magic Number,VBF.Compilers.Common,PriorityQueue<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\Common\PriorityQueue.cs,PercolateDown,The following statement contains a magic number: while (hole * 2 <= m_size)              {                  int child = hole * 2;                    if (child != m_size &&                      m_inRightOrder(m_binaryHeap[child + 1]' m_binaryHeap[child]))                  {                      child++;                  }                    if (m_inRightOrder(m_binaryHeap[child]' temp))                  {                      m_binaryHeap[hole] = m_binaryHeap[child];                      m_indexDict[m_binaryHeap[hole]] = hole;                  }                  else                  {                      break;                  }                    hole = child;              }
Magic Number,VBF.Compilers.Common,PriorityQueue<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\Common\PriorityQueue.cs,PercolateUp,The following statement contains a magic number: while (hole > 1 && m_inRightOrder(temp' m_binaryHeap[hole / 2]))              {                  m_binaryHeap[hole] = m_binaryHeap[hole / 2];                  m_indexDict[m_binaryHeap[hole]] = hole;                  hole /= 2;              }
Magic Number,VBF.Compilers.Common,PriorityQueue<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\Common\PriorityQueue.cs,PercolateUp,The following statement contains a magic number: while (hole > 1 && m_inRightOrder(temp' m_binaryHeap[hole / 2]))              {                  m_binaryHeap[hole] = m_binaryHeap[hole / 2];                  m_indexDict[m_binaryHeap[hole]] = hole;                  hole /= 2;              }
Magic Number,VBF.Compilers.Common,PriorityQueue<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\Common\PriorityQueue.cs,PercolateUp,The following statement contains a magic number: while (hole > 1 && m_inRightOrder(temp' m_binaryHeap[hole / 2]))              {                  m_binaryHeap[hole] = m_binaryHeap[hole / 2];                  m_indexDict[m_binaryHeap[hole]] = hole;                  hole /= 2;              }
Missing Default,VBF.Compilers,StringBuilderReader,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Common\StringBuilderReader.cs,ReadLine,The following switch statement is missing a default case: switch (ch)                  {                      case '\r':                      case '\n':                          {                              string line = m_sb.ToString(m_Position' i - m_Position);                              m_Position = i + 1;                              if (((ch == '\r') && (m_Position < m_sb.Length)) && (m_sb[m_Position] == '\n'))                              {                                  m_Position++;                              }                              return line;                          }                  }
