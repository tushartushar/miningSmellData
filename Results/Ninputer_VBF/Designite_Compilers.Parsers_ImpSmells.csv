Implementation smell,Namespace,Class,File,Method,Description
Long Method,VBF.Compilers.Parsers.Generator,LR0Model,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\LR0Model.cs,BuildModel,The method has 109 lines of code.
Complex Method,VBF.Compilers.Parsers,ParserHeadCleaner,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\ParserHeadCleaner.cs,CleanHeads,Cyclomatic complexity of the method is 11
Complex Method,VBF.Compilers.Parsers,ParserEngine,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\ParserEngine.cs,Input,Cyclomatic complexity of the method is 10
Complex Method,VBF.Compilers.Parsers.Generator,TransitionTable,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\TransitionTable.cs,Create,Cyclomatic complexity of the method is 10
Complex Method,VBF.Compilers.Parsers.Generator,LR0Model,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\LR0Model.cs,ToString,Cyclomatic complexity of the method is 8
Long Parameter List,VBF.Compilers.Parsers,MappingProduction<TSource;TReturn>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\MappingProduction.cs,MappingProduction,The method has 5 parameters. Parameters: sourceProduction' selector' validationRule' errorId' positionGetter
Long Parameter List,VBF.Compilers.Parsers,ParserEngine,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\ParserEngine.cs,ReduceAndShiftForRecovery,The method has 5 parameters. Parameters: z' head' shiftTarget' syntaxError' ctoken
Long Statement,VBF.Compilers.Parsers,Grammar,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Grammar.cs,SelectMany,The length of the statement  "            return new ConcatenationProduction<T1' Lexeme' TResult>(production' v => productionSelector(v).AsTerminal()' resultSelector); " is 125.
Long Statement,VBF.Compilers.Parsers,Grammar,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Grammar.cs,SelectMany,The length of the statement  "            return new ConcatenationProduction<Lexeme' Lexeme' TResult>(token.AsTerminal()' v => productionSelector(v).AsTerminal()' resultSelector); " is 137.
Long Statement,VBF.Compilers.Parsers,Grammar,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Grammar.cs,Where,The length of the statement  "            return new MappingProduction<TResult' TResult>(production' x => x' finalRule.Compile()' errorId' positionGetter != null ? positionGetter.Compile() : null); " is 155.
Long Statement,VBF.Compilers.Parsers,Grammar,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Grammar.cs,Union,The length of the statement  "            CodeContract.RequiresArgumentInRange(productions.Length > 0' "productions"' "There must be at least one production to be unioned"); " is 131.
Long Statement,VBF.Compilers.Parsers,ParserBase<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\ParserBase.cs,OnDefineParserErrors,The length of the statement  "            errorManager.DefineError(errorDefinition.TokenMistakeId' 0' CompilationStage.Parsing' "Invalid token: '{1}'' did you mean: '{0}' ?"); " is 133.
Long Statement,VBF.Compilers.Parsers.Generator,ClosureVisitor,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\ClosureVisitor.cs,VisitConcatenation,The length of the statement  "                        arg.IsChanged = arg.LR0ItemSet.Add(new LR0Item(concatenationProduction.ProductionRight.Info.Index' 0)) || arg.IsChanged; " is 120.
Long Statement,VBF.Compilers.Parsers.Generator,TransitionTable,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\TransitionTable.cs,Create,The length of the statement  "            TransitionTable table = new TransitionTable(scannerInfo.EndOfStreamTokenIndex + 1' model.States.Count' nonterminals.Count' tokenDescriptions); " is 142.
Long Statement,VBF.Compilers.Parsers.Generator,TransitionTable,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\TransitionTable.cs,Create,The length of the statement  "                    ActionListNode<int>.AppendToLast(ref table.m_reduceTable[i' scannerInfo.EndOfStreamTokenIndex]' table.m_acceptProductionIndex); " is 127.
Long Statement,VBF.Compilers.Parsers.Generator,LR0Model,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\LR0Model.cs,GetClosure,The length of the statement  "                    isChanged = m_infoManager.Productions[item.ProductionIndex].Accept(m_closureVisitor' new ClosureInfo(item.DotLocation' isChanged' initSet)); " is 140.
Long Statement,VBF.Compilers.Parsers.Generator,LR0Model,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\LR0Model.cs,GetGoto,The length of the statement  "                    if (m_infoManager.GetInfo(dotSymbols[0]).Index == symbolIndex || m_infoManager.GetInfo(dotSymbols[1]).Index == symbolIndex) " is 123.
Magic Number,VBF.Compilers.Parsers,EndOfStream,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\EndOfStream.cs,GetHashCode,The following statement contains a magic number: return -3177;
Magic Number,VBF.Compilers.Parsers,Grammar,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Grammar.cs,Where,The following statement contains a magic number: if (predicate.Body.NodeType == ExpressionType.Call)              {                  MethodCallExpression call = predicate.Body as MethodCallExpression;                    if (call.Method.Equals(s_checkMethod))                  {                      //it is the call to Grammar.Check' extract message                        var ruleExp = call.Arguments[0];                      var errIdExp = call.Arguments[1];                      var positionExp = call.Arguments[2];                        positionGetter = Expression.Lambda<Func<TResult' SourceSpan>>(positionExp' predicate.Parameters[0]);                      Expression<Func<int>> idGetter = Expression.Lambda<Func<int>>(errIdExp);                        errorId = idGetter.Compile()();                        finalRule = Expression.Lambda<Func<TResult' bool>>(ruleExp' predicate.Parameters[0]);                  }              }
Magic Number,VBF.Compilers.Parsers,ParserBase<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\ParserBase.cs,ParserBase,The following statement contains a magic number: m_errorDefinition = new SyntaxErrors()              {                  LexicalErrorId = 101'                  TokenUnexpectedId = 201'                  TokenMissingId = 202'                  TokenMistakeId = 203'                  OtherErrorId = 200              };
Magic Number,VBF.Compilers.Parsers,ParserBase<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\ParserBase.cs,ParserBase,The following statement contains a magic number: m_errorDefinition = new SyntaxErrors()              {                  LexicalErrorId = 101'                  TokenUnexpectedId = 201'                  TokenMissingId = 202'                  TokenMistakeId = 203'                  OtherErrorId = 200              };
Magic Number,VBF.Compilers.Parsers,ParserBase<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\ParserBase.cs,ParserBase,The following statement contains a magic number: m_errorDefinition = new SyntaxErrors()              {                  LexicalErrorId = 101'                  TokenUnexpectedId = 201'                  TokenMissingId = 202'                  TokenMistakeId = 203'                  OtherErrorId = 200              };
Magic Number,VBF.Compilers.Parsers,ParserBase<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\ParserBase.cs,ParserBase,The following statement contains a magic number: m_errorDefinition = new SyntaxErrors()              {                  LexicalErrorId = 101'                  TokenUnexpectedId = 201'                  TokenMissingId = 202'                  TokenMistakeId = 203'                  OtherErrorId = 200              };
Magic Number,VBF.Compilers.Parsers,ParserBase<T>,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\ParserBase.cs,ParserBase,The following statement contains a magic number: m_errorDefinition = new SyntaxErrors()              {                  LexicalErrorId = 101'                  TokenUnexpectedId = 201'                  TokenMissingId = 202'                  TokenMistakeId = 203'                  OtherErrorId = 200              };
Magic Number,VBF.Compilers.Parsers.Generator,ProductionAggregationVisitor,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\GeneratorVisitors.cs,VisitConcatenation,The following statement contains a magic number: concatenationProduction.Info.SymbolCount = 2;
Magic Number,VBF.Compilers.Parsers.Generator,DotSymbolVisitor,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\GeneratorVisitors.cs,VisitAlternation,The following statement contains a magic number: if (DotLocation == 0)              {                  return new IProduction[2] { alternationProduction.Production1' alternationProduction.Production2 };              }              else              {                  return s_empty;              }
Magic Number,VBF.Compilers.Parsers.Generator,LR0Edge,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\LR0Edge.cs,GetHashCode,The following statement contains a magic number: return (m_sourceStateIndex << 24) ^ (m_symbolIndex << 12) ^ m_targetStateIndex;
Magic Number,VBF.Compilers.Parsers.Generator,LR0Edge,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\LR0Edge.cs,GetHashCode,The following statement contains a magic number: return (m_sourceStateIndex << 24) ^ (m_symbolIndex << 12) ^ m_targetStateIndex;
Magic Number,VBF.Compilers.Parsers.Generator,LR0Item,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\LR0Item.cs,GetHashCode,The following statement contains a magic number: return (DotLocation << 16) ^ ProductionIndex;
Magic Number,VBF.Compilers.Parsers.Generator,LR0Model,C:\repos\Ninputer_VBF\src\Compilers\Compilers.Parsers\Generator\LR0Model.cs,GetGoto,The following statement contains a magic number: foreach (var item in state)              {                  var production = m_infoManager.Productions[item.ProductionIndex];                  var info = m_infoManager.GetInfo(production);                    var dotSymbols = production.Accept(m_dotSymbolVisitor' item.DotLocation);                    if (dotSymbols.Count == 1 && m_infoManager.GetInfo(dotSymbols[0]).Index == symbolIndex)                  {                      resultSet.Add(new LR0Item(info.Index' item.DotLocation + 1));                  }                  else if (dotSymbols.Count == 2)                  {                      if (m_infoManager.GetInfo(dotSymbols[0]).Index == symbolIndex || m_infoManager.GetInfo(dotSymbols[1]).Index == symbolIndex)                      {                          resultSet.Add(new LR0Item(info.Index' item.DotLocation + 1));                      }                  }              }
