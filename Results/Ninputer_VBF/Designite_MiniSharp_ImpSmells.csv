Implementation smell,Namespace,Class,File,Method,Description
Long Method,VBF.MiniSharp,MiniSharpParser,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MiniSharpParser.cs,OnDefineLexer,The method has 100 lines of code.
Long Method,VBF.MiniSharp,MiniSharpParser,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MiniSharpParser.cs,OnDefineGrammar,The method has 298 lines of code.
Long Method,VBF.MiniSharp.CombinatorParser,MiniSharpParser,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MiniSharpParser.CP.cs,OnDefineLexer,The method has 100 lines of code.
Long Method,VBF.MiniSharp.CombinatorParser,MiniSharpParser,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MiniSharpParser.CP.cs,OnDefineParser,The method has 317 lines of code.
Complex Method,VBF.MiniSharp,MemberDeclResolver,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MemberDeclResolver.cs,VisitMethodDecl,Cyclomatic complexity of the method is 10
Complex Method,VBF.MiniSharp,MethodBodyResolver,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MethodBodyResolver.cs,VisitBinary,Cyclomatic complexity of the method is 12
Complex Method,VBF.MiniSharp,MethodBodyResolver,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MethodBodyResolver.cs,ResolveMethod,Cyclomatic complexity of the method is 10
Complex Method,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,Cyclomatic complexity of the method is 12
Complex Method,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitBinary,Cyclomatic complexity of the method is 10
Long Parameter List,VBF.MiniSharp.Ast,IfElse,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Ast\IfElse.cs,IfElse,The method has 5 parameters. Parameters: cond' truePart' falsePart' ifSpan' elseSpan
Long Parameter List,VBF.MiniSharp.Ast,MethodDecl,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Ast\MethodDecl.cs,MethodDecl,The method has 5 parameters. Parameters: name' retType' parameters' stmts' retExp
Long Statement,VBF.MiniSharp,MethodBodyResolver,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MethodBodyResolver.cs,VisitMainClass,The length of the statement  "            m_currentMethodParameters = new VariableCollection<Parameter>() { new Parameter() { Name = ast.ArgName.Content' Type = ArrayType.StrArray } };" is 142.
Long Statement,VBF.MiniSharp,MethodBodyResolver,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MethodBodyResolver.cs,VisitVarDecl,The length of the statement  "                m_currentMethodVariables.Add(new VariableInfo() { Name = ast.VariableName.Content' Type = ast.Type.ResolvedType' Index = m_currentVariableIndex });" is 147.
Long Statement,VBF.MiniSharp,MethodBodyResolver,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MethodBodyResolver.cs,VisitBinary,The length of the statement  "                AddError(c_SE_BinaryOpTypeInvalid' ast.OpLexeme.Span' ast.OpLexeme.Content' ast.Left.ExpressionType.Name' ast.Right.ExpressionType.Name);" is 137.
Long Statement,VBF.MiniSharp,MiniSharpParser,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MiniSharpParser.cs,OnDefineLexer,The length of the statement  "            charSetBuilder.DefineCharSet(c => lettersCategories.Contains(Char.GetUnicodeCategory(c))' re => RE_IdChar = re | RE.Symbol('_'));" is 129.
Long Statement,VBF.MiniSharp,MiniSharpParser,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MiniSharpParser.cs,OnDefineLexer,The length of the statement  "            charSetBuilder.DefineCharSet(c => Char.GetUnicodeCategory(c) == UnicodeCategory.SpaceSeparator' re => RE_SpaceChar = re);" is 121.
Long Statement,VBF.MiniSharp,MiniSharpParser,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MiniSharpParser.cs,OnDefineGrammar,The length of the statement  "                (from _1 in LEFT_BR from stmts in PStatement.Many() from _2 in RIGHT_BR select (Statement)new Block(stmts != null ? stmts.ToArray() : null)) |" is 142.
Long Statement,VBF.MiniSharp.CombinatorParser,MiniSharpParser,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MiniSharpParser.CP.cs,OnDefineLexer,The length of the statement  "            charSetBuilder.DefineCharSet(c => lettersCategories.Contains(Char.GetUnicodeCategory(c))' re => RE_IdChar = re | RE.Symbol('_'));" is 129.
Long Statement,VBF.MiniSharp.CombinatorParser,MiniSharpParser,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MiniSharpParser.CP.cs,OnDefineLexer,The length of the statement  "            charSetBuilder.DefineCharSet(c => Char.GetUnicodeCategory(c) == UnicodeCategory.SpaceSeparator' re => RE_SpaceChar = re);" is 121.
Long Statement,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitMainClass,The length of the statement  "            m_currentType = m_module.DefineType(ast.Type.Name' TypeAttributes.Class | TypeAttributes.Abstract | TypeAttributes.Sealed);" is 123.
Long Statement,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitMainClass,The length of the statement  "            m_currentMethod = m_currentType.DefineMethod("Main"' MethodAttributes.Public | MethodAttributes.Static' typeof(void)' new[] { typeof(string[]) });" is 146.
Complex Conditional,VBF.MiniSharp,MethodOverloadingComparer,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\MethodOverloadingComparer.cs,Compare,The conditional expression  "lastComparisonResult < 0 && result > 0 || lastComparisonResult > 0 && result < 0"  is complex.
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitSetLocal,The following statement contains a magic number: switch (locIndex)             {                 case 0:                     m_ilgen.Emit(OpCodes.Stloc_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Stloc_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Stloc_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Stloc_3);                     break;                 default:                     if (locIndex <= 255)                     {                         m_ilgen.Emit(OpCodes.Stloc_S' (byte)locIndex);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Stloc' (short)locIndex);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitSetLocal,The following statement contains a magic number: switch (locIndex)             {                 case 0:                     m_ilgen.Emit(OpCodes.Stloc_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Stloc_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Stloc_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Stloc_3);                     break;                 default:                     if (locIndex <= 255)                     {                         m_ilgen.Emit(OpCodes.Stloc_S' (byte)locIndex);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Stloc' (short)locIndex);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitSetLocal,The following statement contains a magic number: switch (locIndex)             {                 case 0:                     m_ilgen.Emit(OpCodes.Stloc_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Stloc_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Stloc_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Stloc_3);                     break;                 default:                     if (locIndex <= 255)                     {                         m_ilgen.Emit(OpCodes.Stloc_S' (byte)locIndex);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Stloc' (short)locIndex);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitSetArg,The following statement contains a magic number: argIndex <= 255
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitLoadLocal,The following statement contains a magic number: switch (locIndex)             {                 case 0:                     m_ilgen.Emit(OpCodes.Ldloc_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldloc_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldloc_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldloc_3);                     break;                 default:                     if (locIndex <= 255)                     {                         m_ilgen.Emit(OpCodes.Ldloc_S' (byte)locIndex);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldloc' (short)locIndex);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitLoadLocal,The following statement contains a magic number: switch (locIndex)             {                 case 0:                     m_ilgen.Emit(OpCodes.Ldloc_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldloc_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldloc_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldloc_3);                     break;                 default:                     if (locIndex <= 255)                     {                         m_ilgen.Emit(OpCodes.Ldloc_S' (byte)locIndex);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldloc' (short)locIndex);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitLoadLocal,The following statement contains a magic number: switch (locIndex)             {                 case 0:                     m_ilgen.Emit(OpCodes.Ldloc_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldloc_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldloc_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldloc_3);                     break;                 default:                     if (locIndex <= 255)                     {                         m_ilgen.Emit(OpCodes.Ldloc_S' (byte)locIndex);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldloc' (short)locIndex);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitLoadArgument,The following statement contains a magic number: switch (argIndex)             {                 case 0:                     m_ilgen.Emit(OpCodes.Ldarg_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldarg_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldarg_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldarg_3);                     break;                 default:                     if (argIndex <= 255)                     {                         m_ilgen.Emit(OpCodes.Ldarg_S' (byte)argIndex);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldarg' (short)argIndex);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitLoadArgument,The following statement contains a magic number: switch (argIndex)             {                 case 0:                     m_ilgen.Emit(OpCodes.Ldarg_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldarg_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldarg_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldarg_3);                     break;                 default:                     if (argIndex <= 255)                     {                         m_ilgen.Emit(OpCodes.Ldarg_S' (byte)argIndex);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldarg' (short)argIndex);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,EmitLoadArgument,The following statement contains a magic number: switch (argIndex)             {                 case 0:                     m_ilgen.Emit(OpCodes.Ldarg_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldarg_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldarg_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldarg_3);                     break;                 default:                     if (argIndex <= 255)                     {                         m_ilgen.Emit(OpCodes.Ldarg_S' (byte)argIndex);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldarg' (short)argIndex);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,The following statement contains a magic number: switch (ast.Value)             {                 case -1:                     m_ilgen.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     m_ilgen.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     m_ilgen.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     m_ilgen.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     m_ilgen.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     m_ilgen.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     m_ilgen.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (ast.Value > 8 || ast.Value <= 127)                     {                         m_ilgen.Emit(OpCodes.Ldc_I4_S' (byte)ast.Value);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldc_I4' ast.Value);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,The following statement contains a magic number: switch (ast.Value)             {                 case -1:                     m_ilgen.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     m_ilgen.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     m_ilgen.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     m_ilgen.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     m_ilgen.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     m_ilgen.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     m_ilgen.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (ast.Value > 8 || ast.Value <= 127)                     {                         m_ilgen.Emit(OpCodes.Ldc_I4_S' (byte)ast.Value);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldc_I4' ast.Value);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,The following statement contains a magic number: switch (ast.Value)             {                 case -1:                     m_ilgen.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     m_ilgen.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     m_ilgen.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     m_ilgen.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     m_ilgen.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     m_ilgen.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     m_ilgen.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (ast.Value > 8 || ast.Value <= 127)                     {                         m_ilgen.Emit(OpCodes.Ldc_I4_S' (byte)ast.Value);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldc_I4' ast.Value);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,The following statement contains a magic number: switch (ast.Value)             {                 case -1:                     m_ilgen.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     m_ilgen.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     m_ilgen.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     m_ilgen.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     m_ilgen.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     m_ilgen.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     m_ilgen.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (ast.Value > 8 || ast.Value <= 127)                     {                         m_ilgen.Emit(OpCodes.Ldc_I4_S' (byte)ast.Value);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldc_I4' ast.Value);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,The following statement contains a magic number: switch (ast.Value)             {                 case -1:                     m_ilgen.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     m_ilgen.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     m_ilgen.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     m_ilgen.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     m_ilgen.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     m_ilgen.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     m_ilgen.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (ast.Value > 8 || ast.Value <= 127)                     {                         m_ilgen.Emit(OpCodes.Ldc_I4_S' (byte)ast.Value);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldc_I4' ast.Value);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,The following statement contains a magic number: switch (ast.Value)             {                 case -1:                     m_ilgen.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     m_ilgen.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     m_ilgen.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     m_ilgen.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     m_ilgen.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     m_ilgen.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     m_ilgen.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (ast.Value > 8 || ast.Value <= 127)                     {                         m_ilgen.Emit(OpCodes.Ldc_I4_S' (byte)ast.Value);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldc_I4' ast.Value);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,The following statement contains a magic number: switch (ast.Value)             {                 case -1:                     m_ilgen.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     m_ilgen.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     m_ilgen.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     m_ilgen.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     m_ilgen.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     m_ilgen.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     m_ilgen.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (ast.Value > 8 || ast.Value <= 127)                     {                         m_ilgen.Emit(OpCodes.Ldc_I4_S' (byte)ast.Value);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldc_I4' ast.Value);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,The following statement contains a magic number: switch (ast.Value)             {                 case -1:                     m_ilgen.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     m_ilgen.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     m_ilgen.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     m_ilgen.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     m_ilgen.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     m_ilgen.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     m_ilgen.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (ast.Value > 8 || ast.Value <= 127)                     {                         m_ilgen.Emit(OpCodes.Ldc_I4_S' (byte)ast.Value);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldc_I4' ast.Value);                     }                     break;             }
Magic Number,VBF.MiniSharp.Targets.Cil,EmitTranslator,C:\research\architectureSmells\repos\Ninputer_VBF\src\Samples\MiniSharp\Targets\Cil\EmitTranslator.cs,VisitIntegerLiteral,The following statement contains a magic number: switch (ast.Value)             {                 case -1:                     m_ilgen.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     m_ilgen.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     m_ilgen.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     m_ilgen.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     m_ilgen.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     m_ilgen.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     m_ilgen.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     m_ilgen.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     m_ilgen.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     m_ilgen.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (ast.Value > 8 || ast.Value <= 127)                     {                         m_ilgen.Emit(OpCodes.Ldc_I4_S' (byte)ast.Value);                     }                     else                     {                         m_ilgen.Emit(OpCodes.Ldc_I4' ast.Value);                     }                     break;             }
