Implementation smell,Namespace,Class,File,Method,Description
Long Method,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The method has 881 lines of code.
Long Method,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The method has 134 lines of code.
Long Method,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The method has 638 lines of code.
Long Method,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The method has 333 lines of code.
Complex Method,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,FillInDefaults,Cyclomatic complexity of the method is 9
Complex Method,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,writeHTML,Cyclomatic complexity of the method is 8
Complex Method,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,OnCommitFinished,Cyclomatic complexity of the method is 12
Complex Method,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,toXML,Cyclomatic complexity of the method is 9
Complex Method,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,loadIssue,Cyclomatic complexity of the method is 10
Complex Method,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveComment,Cyclomatic complexity of the method is 10
Complex Method,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,Cyclomatic complexity of the method is 32
Long Parameter List,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,GetCommitMessage,The method has 5 parameters. Parameters: hParentWnd' parameters' commonRoot' pathList' originalMessage
Long Parameter List,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,GetCommitMessage2,The method has 10 parameters. Parameters: hParentWnd' parameters' commonUrl' commonRoot' pathList' originalMessage' bugID' bugIDOut' revPropNames' revPropValues
Long Parameter List,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,CheckCommit,The method has 6 parameters. Parameters: hParentWnd' parameters' commonUrl' commonRoot' pathList' commitMessage
Long Parameter List,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,OnCommitFinished,The method has 5 parameters. Parameters: hParentWnd' commonRoot' pathList' logMessage' revision
Long Parameter List,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,IssueDetail,The method has 6 parameters. Parameters: plugin' uuid' creators' reporters' assigneds' authors
Long Parameter List,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,FindMimeFromData,The method has 8 parameters. Parameters: pBC' pwzUrl' pBuffer' cbSize' pwzMimeProposed' dwMimeFlags' ppwzMimeOut' dwReserverd
Long Parameter List,Interop.BugTraqProvider,IBugTraqProvider,C:\repos\ned14_BEurtle\BEurtle\IBugTraqProvider.cs,GetCommitMessage,The method has 5 parameters. Parameters: hParentWnd' parameters' commonRoot' pathList' originalMessage
Long Parameter List,Interop.BugTraqProvider,IBugTraqProvider2,C:\repos\ned14_BEurtle\BEurtle\IBugTraqProvider.cs,GetCommitMessage,The method has 5 parameters. Parameters: hParentWnd' parameters' commonRoot' pathList' originalMessage
Long Parameter List,Interop.BugTraqProvider,IBugTraqProvider2,C:\repos\ned14_BEurtle\BEurtle\IBugTraqProvider.cs,GetCommitMessage2,The method has 10 parameters. Parameters: hParentWnd' parameters' commonURL' commonRoot' pathList' originalMessage' bugID' bugIDOut' revPropNames' revPropValues
Long Parameter List,Interop.BugTraqProvider,IBugTraqProvider2,C:\repos\ned14_BEurtle\BEurtle\IBugTraqProvider.cs,CheckCommit,The method has 6 parameters. Parameters: hParentWnd' parameters' commonURL' commonRoot' pathList' commitMessage
Long Parameter List,Interop.BugTraqProvider,IBugTraqProvider2,C:\repos\ned14_BEurtle\BEurtle\IBugTraqProvider.cs,OnCommitFinished,The method has 5 parameters. Parameters: hParentWnd' commonRoot' pathList' logMessage' revision
Long Identifier,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,,The length of the parameter allClosedItemsToolStripMenuItem is 31.
Long Identifier,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,,The length of the parameter allNotSeriousToolStripMenuItem is 30.
Long Identifier,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,,The length of the parameter changeSeverityToolStripMenuItem is 31.
Long Statement,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,FillInDefaults,The length of the statement  "                        MessageBox.Show(hwnd' "Failed to find a copy of BE and failed to read what executes Python files. Is Python installed?\nError was: " + ex.Message); " is 147.
Long Statement,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,loadIssues,The length of the statement  "                if (parameters.CacheBEXML && bexmlcache.Exists && (!idcache.Exists || bexmlcache.LastWriteTimeUtc > idcache.LastWriteTimeUtc) && nedprod.LastModifiedInDirs.FindLastModifiedSince(new DirectoryInfo(rootdir+"\\.be")' bexmlcache.LastWriteTimeUtc).Count==0) " is 252.
Long Statement,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,loadIssues,The length of the statement  "                    if (DialogResult.Yes == MessageBox.Show(hwnd' "BE repository not found at " + rootdir + ". Would you like me to create it there for you?"' "Question"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) " is 201.
Long Statement,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,writeHTML,The length of the statement  "                    if (parameters.DumpHTMLPath.Length < 3) throw new Exception("DumpHTMLPath has no length. This would delete your entire repo!"); " is 127.
Long Statement,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,writeHTML,The length of the statement  "                        var htmlfiles = walkDirectoryTree(new DirectoryInfo(rootdir + "\\" + parameters.DumpHTMLPath)' new string[1] { "*.html" }); " is 123.
Long Statement,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,writeHTML,The length of the statement  "                MessageBox.Show(hwnd' "Error when writing HTML: " + e.ToString()' "Error from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 132.
Long Statement,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,OnCommitFinished,The length of the statement  "                                var result = MessageBox.Show(hwnd' "Commit message implies issue " + shortname + " (" + issue.summary + ")\nwith status " + issue.status + " is now fixed. Shall I mark it as fixed for you?"' "Question"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 259.
Long Statement,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,OnCommitFinished,The length of the statement  "                                        outputs = callBEcmd(rootpath' new string[1] { "comment -a \"BEurtle auto issue closer\" " + shortname + " -" }' new string[1] { "Fixed in commit "+revision.ToString("x")+" (decimal "+revision.ToString()+")" }); " is 210.
Long Statement,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ShowOptionsDialog,The length of the statement  "            return dialog.ShowDialog(hParentWnd!=IntPtr.Zero ? new Win32Window(hParentWnd) : null) == DialogResult.OK ? dialog.parameters : parameters; " is 139.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,NewCommentTreeNode,The length of the statement  "            s+=comment.SelectSingleNode("short-name").ToString() + " " + comment.SelectSingleNode("author").ToString() + " " + comment.SelectSingleNode("date").ToString() + ": "; " is 166.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,ButtonOK_Click,The length of the statement  "                    MessageBox.Show(this' "Creator needs to be set properly"' "Message from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 128.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,ButtonOK_Click,The length of the statement  "                    MessageBox.Show(this' "Reporter needs to be set properly"' "Message from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 129.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveAsFile,The length of the statement  "            XPathNavigator comment = commentToUUID.ContainsKey(Comments.SelectedNode) ? commentToUUID[Comments.SelectedNode].Item2 : null; " is 126.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,LoadAttachment_Click,The length of the statement  "                MessageBox.Show(this' "Error when loading file: " + ex.ToString()' "Error from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 133.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveAttachment_Click,The length of the statement  "                var ext = MIMETypesDictionary.ContainsKey(DraggableIcon.Items[0].Text) ? MIMETypesDictionary[DraggableIcon.Items[0].Text] : "bin"; " is 130.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveAttachment_Click,The length of the statement  "                MessageBox.Show(this' "Error when saving file: " + ex.ToString()' "Error from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 132.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,DraggableIcon_DoubleClick,The length of the statement  "                MessageBox.Show(this' "Error when launching file: " + ex.ToString()' "Error from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 135.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,DraggableIcon_ItemDrag,The length of the statement  "                MessageBox.Show(this' "Error when dragging file: " + ex.ToString()' "Error from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 134.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveComment,The length of the statement  "                MessageBox.Show(this' "Summary needs to be not empty"' "Message from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 125.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveComment,The length of the statement  "                MessageBox.Show(this' "Author needs to be not empty"' "Message from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 124.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveComment,The length of the statement  "                MessageBox.Show(this' "Author needs to be set properly"' "Message from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 127.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveComment,The length of the statement  "                    if (BoxUUID.Text[BoxUUID.Text.Length - 1] != ')') throw new Exception("BE isn't returning UUIDs when it creates issues! Do you have an old BE version?"); " is 153.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveComment,The length of the statement  "                    string cmd = "comment --author=\"" + CommentAuthor.Text.Replace("\""' "\\\"") + "\" --content-type=" + mimetype + " " + (commentingupon != null ? commentingupon : BoxShortName.Text) + " -"; " is 189.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,IssueDetail_DragDrop,The length of the statement  "                MessageBox.Show(this' "Error when loading file: " + ex.ToString()' "Error from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 133.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,IssueDetail_KeyDown,The length of the statement  "                    MessageBox.Show(this' "Cannot refresh when editing"' "Message from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 123.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,CommentContextMenu_Opening,The length of the statement  "            CommentBodyUndo.Enabled = CommentBodyCut.Enabled = CommentBodyPaste.Enabled = CommentBodyDelete.Enabled = !CommentEdit.Visible; " is 127.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.TreeNode treeNode2 = new System.Windows.Forms.TreeNode("Comment1"' new System.Windows.Forms.TreeNode[] { " is 125.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(IssueDetail)); " is 131.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.ButtonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.ButtonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.BoxUUID.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 140.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.BoxCreator.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 143.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.BoxAssigned.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.BoxCreated.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 143.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.BoxSummary.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 143.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.ButtonEdit.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.BoxReporter.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentAuthor.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 146.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.Commentary.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 146.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentReply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentEdit.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentDelete.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentAdd.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.Comments.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 144.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBodyView.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 151.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.HTMLEditorControls.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 151.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentEditSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentEditCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.ApplyBold.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.ApplyItalics.Font = new System.Drawing.Font("Times New Roman"' 9.75F' System.Drawing.FontStyle.Italic' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBody.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 147.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBody.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.CommentBody_PreviewKeyDown); " is 120.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentContextMenu.ItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.CommentContextMenu_ItemClicked); " is 134.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBodyUndo.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Z))); " is 133.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBodyCut.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.X))); " is 132.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBodyCopy.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C))); " is 133.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBodyPaste.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.V))); " is 134.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBodySelectAll.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.A))); " is 138.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBodyRaw.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 150.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentBodyRaw.Font = new System.Drawing.Font("Consolas"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 152.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.LoadAttachment.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.SaveAttachment.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.DraggableIcon.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 149.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.imageList1.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageList1.ImageStream"))); " is 120.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.CommentDate.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.label11.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 143.
Long Statement,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The length of the statement  "            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 145.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_SortCompare,The length of the statement  "                    e.SortResult = ((string) IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string) IssuesList.Rows[e.RowIndex2].Cells[3].Value); " is 134.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_SortCompare,The length of the statement  "                    e.SortResult = ((string)IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string)IssuesList.Rows[e.RowIndex2].Cells[3].Value); " is 132.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The length of the statement  "                IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow; " is 127.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The length of the statement  "                        string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)"); " is 228.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                fillInMenuItems(fromStatusToolStripMenuItem' status_filters' new EventHandler(FromStatusTextBox_TextChanged)' new KeyPressEventHandler(FromStatusTextBox_KeyPress)); " is 164.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                fillInMenuItems(fromSeverityToolStripMenuItem' severity_filters' new EventHandler(FromSeverityTextBox_TextChanged)' new KeyPressEventHandler(FromSeverityTextBox_KeyPress)); " is 172.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                fillInMenuItems(fromCreatedToolStripMenuItem' created_filters' new EventHandler(FromCreatedTextBox_TextChanged)' new KeyPressEventHandler(FromCreatedTextBox_KeyPress)); " is 168.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                fillInMenuItems(fromSummaryToolStripMenuItem' summary_filters' new EventHandler(FromSummaryTextBox_TextChanged)' new KeyPressEventHandler(FromSummaryTextBox_KeyPress)); " is 168.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                filterOutToolStripMenuItem.Checked = (status_filters.Count > 0 || severity_filters.Count > 0 || created_filters.Count > 0 || summary_filters.Count > 0); " is 152.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                allClosedItemsToolStripMenuItem.Checked = (status_filters.Contains("closed") && status_filters.Contains("fixed") && status_filters.Contains("wontfix")); " is 152.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                allNotSeriousToolStripMenuItem.Checked = (severity_filters.Contains("target") && severity_filters.Contains("wishlist") && severity_filters.Contains("minor")); " is 158.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                    filterOutToolStripMenuItem.DropDown.Closing += new ToolStripDropDownClosingEventHandler(filterOutToolStripMenuItem_Closing); " is 124.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                    fromStatusToolStripMenuItem.DropDown.Closing += new ToolStripDropDownClosingEventHandler(filterOutToolStripMenuItem_Closing); " is 125.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                    fromSeverityToolStripMenuItem.DropDown.Closing += new ToolStripDropDownClosingEventHandler(filterOutToolStripMenuItem_Closing); " is 127.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                    fromCreatedToolStripMenuItem.DropDown.Closing += new ToolStripDropDownClosingEventHandler(filterOutToolStripMenuItem_Closing); " is 126.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,contextMenu_Opening,The length of the statement  "                    fromSummaryToolStripMenuItem.DropDown.Closing += new ToolStripDropDownClosingEventHandler(filterOutToolStripMenuItem_Closing); " is 126.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(IssuesForm)); " is 130.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.IssuesList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 146.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.IssuesList.CellDoubleClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.IssuesList_CellDoubleClick); " is 122.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.IssuesList.CellMouseDown += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.IssuesList_CellMouseDown); " is 123.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.IssuesList.SortCompare += new System.Windows.Forms.DataGridViewSortCompareEventHandler(this.IssuesList_SortCompare); " is 121.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.allClosedItemsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.I))); " is 149.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.allNotSeriousToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.E))); " is 148.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.copyToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C))); " is 139.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.pasteToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.V))); " is 140.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.ButtonOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.ButtonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.BERepoLocation.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 147.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.NewIssue.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 146.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.DeleteIssue.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 149.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.BERepoLocationBrowse.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 156.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.VCSInfo.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 140.
Long Statement,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The length of the statement  "            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 15.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(OptionsDialog)); " is 133.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 139.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 24F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.Link_nedproductions.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 152.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.Link_nedproductions.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.Link_nedproductions_LinkClicked); " is 136.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.OptionsGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 151.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.CheckAddCommitAsComment.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 156.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.BoxDumpHTMLPath.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.CheckBEXMLCache.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.CheckUseBEXML.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 146.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.BoxDefaultAuthor.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 149.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.LinkGithubIssues.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkGithubIssues_LinkClicked); " is 130.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.LinkHomepage.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkHomepage_LinkClicked); " is 122.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.ButtonOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.ButtonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.ButtonReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The length of the statement  "            this.LinkDonate.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 143.
Long Statement,nedprod,WindowSettings,C:\repos\ned14_BEurtle\BEurtle\WindowSettings.cs,load,The length of the statement  "            using (RegistryKey r = Registry.CurrentUser.OpenSubKey(@"Software\" + CompanyId() + @"\" + AppId() + @"\Window State\" + form.Name)) " is 132.
Long Statement,nedprod,WindowSettings,C:\repos\ned14_BEurtle\BEurtle\WindowSettings.cs,save,The length of the statement  "            using (RegistryKey r = Registry.CurrentUser.CreateSubKey(@"Software\" + CompanyId()+@"\"+AppId() + @"\Window State\" + form.Name' RegistryKeyPermissionCheck.ReadWriteSubTree)) " is 175.
Complex Conditional,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,loadIssues,The conditional expression  "parameters.CacheBEXML && bexmlcache.Exists && (!idcache.Exists || bexmlcache.LastWriteTimeUtc > idcache.LastWriteTimeUtc) && nedprod.LastModifiedInDirs.FindLastModifiedSince(new DirectoryInfo(rootdir+"\\.be")' bexmlcache.LastWriteTimeUtc).Count==0"  is complex.
Empty Catch Block,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,walkDirectoryTree,The method has an empty catch block.
Empty Catch Block,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,writeHTML,The method has an empty catch block.
Empty Catch Block,BEurtle,TemporarySaveFile,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,Dispose,The method has an empty catch block.
Empty Catch Block,nedprod,WindowSettings,C:\repos\ned14_BEurtle\BEurtle\WindowSettings.cs,load,The method has an empty catch block.
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following statement contains a magic number: foreach (var par in pars)              {                  if (par.StartsWith("BEPath="))                      BEPath = par.Substring(7);                  else if (par.StartsWith("DefaultAuthor="))                      DefaultAuthor = par.Substring(14);                  else if (par.StartsWith("DumpHTML="))                      DumpHTML = bool.Parse(par.Substring(9));                  else if (par.StartsWith("DumpHTMLPath="))                      DumpHTMLPath = par.Substring(13);                  else if (par.StartsWith("AddCommitAsComment="))                      AddCommitAsComment = bool.Parse(par.Substring(19));                  else if (par.StartsWith("FilterOutClosedIssues="))                      FilterOutClosedIssues = bool.Parse(par.Substring(22));                  else if (par.StartsWith("UseBEXML="))                      UseBEXML = bool.Parse(par.Substring(9));                  else if(par.StartsWith("ShowCommentCount="))                      switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }                  else if (par.StartsWith("CacheBEXML="))                      CacheBEXML = bool.Parse(par.Substring(11));              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following statement contains a magic number: foreach (var par in pars)              {                  if (par.StartsWith("BEPath="))                      BEPath = par.Substring(7);                  else if (par.StartsWith("DefaultAuthor="))                      DefaultAuthor = par.Substring(14);                  else if (par.StartsWith("DumpHTML="))                      DumpHTML = bool.Parse(par.Substring(9));                  else if (par.StartsWith("DumpHTMLPath="))                      DumpHTMLPath = par.Substring(13);                  else if (par.StartsWith("AddCommitAsComment="))                      AddCommitAsComment = bool.Parse(par.Substring(19));                  else if (par.StartsWith("FilterOutClosedIssues="))                      FilterOutClosedIssues = bool.Parse(par.Substring(22));                  else if (par.StartsWith("UseBEXML="))                      UseBEXML = bool.Parse(par.Substring(9));                  else if(par.StartsWith("ShowCommentCount="))                      switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }                  else if (par.StartsWith("CacheBEXML="))                      CacheBEXML = bool.Parse(par.Substring(11));              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following statement contains a magic number: foreach (var par in pars)              {                  if (par.StartsWith("BEPath="))                      BEPath = par.Substring(7);                  else if (par.StartsWith("DefaultAuthor="))                      DefaultAuthor = par.Substring(14);                  else if (par.StartsWith("DumpHTML="))                      DumpHTML = bool.Parse(par.Substring(9));                  else if (par.StartsWith("DumpHTMLPath="))                      DumpHTMLPath = par.Substring(13);                  else if (par.StartsWith("AddCommitAsComment="))                      AddCommitAsComment = bool.Parse(par.Substring(19));                  else if (par.StartsWith("FilterOutClosedIssues="))                      FilterOutClosedIssues = bool.Parse(par.Substring(22));                  else if (par.StartsWith("UseBEXML="))                      UseBEXML = bool.Parse(par.Substring(9));                  else if(par.StartsWith("ShowCommentCount="))                      switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }                  else if (par.StartsWith("CacheBEXML="))                      CacheBEXML = bool.Parse(par.Substring(11));              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following statement contains a magic number: foreach (var par in pars)              {                  if (par.StartsWith("BEPath="))                      BEPath = par.Substring(7);                  else if (par.StartsWith("DefaultAuthor="))                      DefaultAuthor = par.Substring(14);                  else if (par.StartsWith("DumpHTML="))                      DumpHTML = bool.Parse(par.Substring(9));                  else if (par.StartsWith("DumpHTMLPath="))                      DumpHTMLPath = par.Substring(13);                  else if (par.StartsWith("AddCommitAsComment="))                      AddCommitAsComment = bool.Parse(par.Substring(19));                  else if (par.StartsWith("FilterOutClosedIssues="))                      FilterOutClosedIssues = bool.Parse(par.Substring(22));                  else if (par.StartsWith("UseBEXML="))                      UseBEXML = bool.Parse(par.Substring(9));                  else if(par.StartsWith("ShowCommentCount="))                      switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }                  else if (par.StartsWith("CacheBEXML="))                      CacheBEXML = bool.Parse(par.Substring(11));              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following statement contains a magic number: foreach (var par in pars)              {                  if (par.StartsWith("BEPath="))                      BEPath = par.Substring(7);                  else if (par.StartsWith("DefaultAuthor="))                      DefaultAuthor = par.Substring(14);                  else if (par.StartsWith("DumpHTML="))                      DumpHTML = bool.Parse(par.Substring(9));                  else if (par.StartsWith("DumpHTMLPath="))                      DumpHTMLPath = par.Substring(13);                  else if (par.StartsWith("AddCommitAsComment="))                      AddCommitAsComment = bool.Parse(par.Substring(19));                  else if (par.StartsWith("FilterOutClosedIssues="))                      FilterOutClosedIssues = bool.Parse(par.Substring(22));                  else if (par.StartsWith("UseBEXML="))                      UseBEXML = bool.Parse(par.Substring(9));                  else if(par.StartsWith("ShowCommentCount="))                      switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }                  else if (par.StartsWith("CacheBEXML="))                      CacheBEXML = bool.Parse(par.Substring(11));              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following statement contains a magic number: foreach (var par in pars)              {                  if (par.StartsWith("BEPath="))                      BEPath = par.Substring(7);                  else if (par.StartsWith("DefaultAuthor="))                      DefaultAuthor = par.Substring(14);                  else if (par.StartsWith("DumpHTML="))                      DumpHTML = bool.Parse(par.Substring(9));                  else if (par.StartsWith("DumpHTMLPath="))                      DumpHTMLPath = par.Substring(13);                  else if (par.StartsWith("AddCommitAsComment="))                      AddCommitAsComment = bool.Parse(par.Substring(19));                  else if (par.StartsWith("FilterOutClosedIssues="))                      FilterOutClosedIssues = bool.Parse(par.Substring(22));                  else if (par.StartsWith("UseBEXML="))                      UseBEXML = bool.Parse(par.Substring(9));                  else if(par.StartsWith("ShowCommentCount="))                      switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }                  else if (par.StartsWith("CacheBEXML="))                      CacheBEXML = bool.Parse(par.Substring(11));              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following statement contains a magic number: foreach (var par in pars)              {                  if (par.StartsWith("BEPath="))                      BEPath = par.Substring(7);                  else if (par.StartsWith("DefaultAuthor="))                      DefaultAuthor = par.Substring(14);                  else if (par.StartsWith("DumpHTML="))                      DumpHTML = bool.Parse(par.Substring(9));                  else if (par.StartsWith("DumpHTMLPath="))                      DumpHTMLPath = par.Substring(13);                  else if (par.StartsWith("AddCommitAsComment="))                      AddCommitAsComment = bool.Parse(par.Substring(19));                  else if (par.StartsWith("FilterOutClosedIssues="))                      FilterOutClosedIssues = bool.Parse(par.Substring(22));                  else if (par.StartsWith("UseBEXML="))                      UseBEXML = bool.Parse(par.Substring(9));                  else if(par.StartsWith("ShowCommentCount="))                      switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }                  else if (par.StartsWith("CacheBEXML="))                      CacheBEXML = bool.Parse(par.Substring(11));              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following statement contains a magic number: foreach (var par in pars)              {                  if (par.StartsWith("BEPath="))                      BEPath = par.Substring(7);                  else if (par.StartsWith("DefaultAuthor="))                      DefaultAuthor = par.Substring(14);                  else if (par.StartsWith("DumpHTML="))                      DumpHTML = bool.Parse(par.Substring(9));                  else if (par.StartsWith("DumpHTMLPath="))                      DumpHTMLPath = par.Substring(13);                  else if (par.StartsWith("AddCommitAsComment="))                      AddCommitAsComment = bool.Parse(par.Substring(19));                  else if (par.StartsWith("FilterOutClosedIssues="))                      FilterOutClosedIssues = bool.Parse(par.Substring(22));                  else if (par.StartsWith("UseBEXML="))                      UseBEXML = bool.Parse(par.Substring(9));                  else if(par.StartsWith("ShowCommentCount="))                      switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }                  else if (par.StartsWith("CacheBEXML="))                      CacheBEXML = bool.Parse(par.Substring(11));              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following statement contains a magic number: foreach (var par in pars)              {                  if (par.StartsWith("BEPath="))                      BEPath = par.Substring(7);                  else if (par.StartsWith("DefaultAuthor="))                      DefaultAuthor = par.Substring(14);                  else if (par.StartsWith("DumpHTML="))                      DumpHTML = bool.Parse(par.Substring(9));                  else if (par.StartsWith("DumpHTMLPath="))                      DumpHTMLPath = par.Substring(13);                  else if (par.StartsWith("AddCommitAsComment="))                      AddCommitAsComment = bool.Parse(par.Substring(19));                  else if (par.StartsWith("FilterOutClosedIssues="))                      FilterOutClosedIssues = bool.Parse(par.Substring(22));                  else if (par.StartsWith("UseBEXML="))                      UseBEXML = bool.Parse(par.Substring(9));                  else if(par.StartsWith("ShowCommentCount="))                      switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }                  else if (par.StartsWith("CacheBEXML="))                      CacheBEXML = bool.Parse(par.Substring(11));              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,FillInDefaults,The following statement contains a magic number: if (BEPath.Length == 0)              {                  // Try the embedded copy first' then python                  string mylocation;                  using (RegistryKey r=Registry.ClassesRoot.OpenSubKey(@"CLSID\{233C8C6B-00AC-4E21-89FD-A66A9C10CEDB}\InprocServer32"))                      mylocation=r.GetValue("CodeBase").ToString().Substring(8);                  mylocation=Path.GetDirectoryName(mylocation);                  while(mylocation.Length>0 && !Directory.Exists(mylocation+@"\dist"))                      mylocation = Path.GetDirectoryName(mylocation);                  if (mylocation.Length > 0)                  {                      if (File.Exists(mylocation + @"\dist\be.exe"))                          BEPath = mylocation + @"\dist\be.exe";                  }                  // Still haven't found a BE' so try python                  if(BEPath.Length==0)                  {                      try                      {                          RegistryKey r = Registry.ClassesRoot.OpenSubKey(@"Python.File\shell\open\command");                          string pythonexe = r.GetValue("").ToString();                          r.Close();                          pythonexe = pythonexe.Substring(1' pythonexe.IndexOf('"'' 1) - 1);                          BEPath = Path.GetDirectoryName(pythonexe) + "\\Scripts\\be.bat";                      }                      catch (Exception ex)                      {                          MessageBox.Show(hwnd' "Failed to find a copy of BE and failed to read what executes Python files. Is Python installed?\nError was: " + ex.Message);                      }                  }              }
Magic Number,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,FillInDefaults,The following statement contains a magic number: if (DefaultAuthor.Length == 0)              {                  if (plugin.VCSAuthor != null && plugin.VCSAuthor.Length > 0)                  {                      DefaultAuthor = plugin.VCSAuthor;                  }                  else                  {                      StringBuilder fullname_ = new StringBuilder(1024);                      string fullname' login' machine;                      uint l = (uint)fullname_.Capacity;                      int code = Win32.GetUserNameEx((int)Win32.EXTENDED_NAME_FORMAT.NameDisplay' fullname_' ref l);                      fullname = fullname_.ToString();                      if (fullname == "") fullname = "<set full name in user account settings>";                      login = System.Security.Principal.WindowsIdentity.GetCurrent().Name.Split('\\')[1];                      machine = System.Net.Dns.GetHostEntry("").HostName;                      DefaultAuthor = "\"" + fullname + "\" <" + login + "@" + machine + ">";                  }              }
Magic Number,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,loadIssues,The following statement contains a magic number: if (rootdir.EndsWith(".xml"))              {   // This is a raw BE XML dump                  using (var fs = new StreamReader(rootdir))                      xml = fs.ReadToEnd();                  VCSInfo = "Direct load of XML database";              }              else              {                  FileInfo idcache=new FileInfo(rootdir + "\\.be\\id-cache")' bexmlcache=new FileInfo(rootdir + "\\.be\\bexml.xml");                  if (parameters.CacheBEXML && bexmlcache.Exists && (!idcache.Exists || bexmlcache.LastWriteTimeUtc > idcache.LastWriteTimeUtc) && nedprod.LastModifiedInDirs.FindLastModifiedSince(new DirectoryInfo(rootdir+"\\.be")' bexmlcache.LastWriteTimeUtc).Count==0)                  {   // There is a bexml.xml cache which isn't older than the id-cache nor BE repo contents' so we can use that                      using (var fs = new StreamReader(rootdir + "\\.be\\bexml.xml"))                          xml = fs.ReadToEnd();                      VCSInfo = "Used up-to-date XML cache in .be\\bexml.xml";                  }                  else                  {                      xml = callBEcmd(rootdir' new string[1] { arguments })[0];                      string VCSVersion = callBEcmd(rootdir' new string[1] { "vcs version" })[0];                      if (-1 == VCSVersion.IndexOf("RESULT:"))                          VCSInfo = "VCS: Error reading VCS version";                      else                          VCSInfo = "VCS: " + VCSVersion.Substring(VCSVersion.IndexOf("RESULT:") + 8);                      if (parameters.CacheBEXML && xml.StartsWith("<?xml version=\"1.0\" "))                          using (var fs = new StreamWriter(rootdir + "\\.be\\bexml.xml"))                              fs.Write(xml);                  }              }
Magic Number,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,writeHTML,The following statement contains a magic number: try              {                  if (parameters.DumpHTML)                  {                      if (parameters.DumpHTMLPath.Length < 3) throw new Exception("DumpHTMLPath has no length. This would delete your entire repo!");                      try                      {                          Directory.Delete(rootdir + "\\" + parameters.DumpHTMLPath' true);                      }                      catch (Exception)                      {                      }                      string result = callBEcmd(rootdir' new string[1] { "html -o \"" + parameters.DumpHTMLPath + "\"" })[0];                      if (Directory.Exists(rootdir + "\\" + parameters.DumpHTMLPath))                      {                          // Strip out the generated date                          var htmlfiles = walkDirectoryTree(new DirectoryInfo(rootdir + "\\" + parameters.DumpHTMLPath)' new string[1] { "*.html" });                          foreach (var htmlfile in htmlfiles)                          {                              var fh = new StreamReader(htmlfile);                              var f = fh.ReadToEnd();                              fh.Close();                              int idx = f.LastIndexOf("<p>Generated by <a href=\"http://www.bugseverywhere.org/\">");                              if (idx >= 0)                              {                                  idx = f.IndexOf("</a>"' idx);                                  var eidx = f.IndexOf("</p>"' idx);                                  f = f.Remove(idx + 4' eidx - idx - 4);                                  var fo = new StreamWriter(htmlfile);                                  fo.Write(f);                                  fo.Close();                              }                          }                          // Add any new HTML files                          result = callBEcmd(rootdir' new string[1] { "vcs add \"" + parameters.DumpHTMLPath + "\"" })[0];                          if (result.Contains("ERROR:"))                              throw new Exception(result);                      }                  }              }              catch (Exception e)              {                  MessageBox.Show(hwnd' "Error when writing HTML: " + e.ToString()' "Error from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Error);              }
Magic Number,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,writeHTML,The following statement contains a magic number: try              {                  if (parameters.DumpHTML)                  {                      if (parameters.DumpHTMLPath.Length < 3) throw new Exception("DumpHTMLPath has no length. This would delete your entire repo!");                      try                      {                          Directory.Delete(rootdir + "\\" + parameters.DumpHTMLPath' true);                      }                      catch (Exception)                      {                      }                      string result = callBEcmd(rootdir' new string[1] { "html -o \"" + parameters.DumpHTMLPath + "\"" })[0];                      if (Directory.Exists(rootdir + "\\" + parameters.DumpHTMLPath))                      {                          // Strip out the generated date                          var htmlfiles = walkDirectoryTree(new DirectoryInfo(rootdir + "\\" + parameters.DumpHTMLPath)' new string[1] { "*.html" });                          foreach (var htmlfile in htmlfiles)                          {                              var fh = new StreamReader(htmlfile);                              var f = fh.ReadToEnd();                              fh.Close();                              int idx = f.LastIndexOf("<p>Generated by <a href=\"http://www.bugseverywhere.org/\">");                              if (idx >= 0)                              {                                  idx = f.IndexOf("</a>"' idx);                                  var eidx = f.IndexOf("</p>"' idx);                                  f = f.Remove(idx + 4' eidx - idx - 4);                                  var fo = new StreamWriter(htmlfile);                                  fo.Write(f);                                  fo.Close();                              }                          }                          // Add any new HTML files                          result = callBEcmd(rootdir' new string[1] { "vcs add \"" + parameters.DumpHTMLPath + "\"" })[0];                          if (result.Contains("ERROR:"))                              throw new Exception(result);                      }                  }              }              catch (Exception e)              {                  MessageBox.Show(hwnd' "Error when writing HTML: " + e.ToString()' "Error from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Error);              }
Magic Number,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,writeHTML,The following statement contains a magic number: try              {                  if (parameters.DumpHTML)                  {                      if (parameters.DumpHTMLPath.Length < 3) throw new Exception("DumpHTMLPath has no length. This would delete your entire repo!");                      try                      {                          Directory.Delete(rootdir + "\\" + parameters.DumpHTMLPath' true);                      }                      catch (Exception)                      {                      }                      string result = callBEcmd(rootdir' new string[1] { "html -o \"" + parameters.DumpHTMLPath + "\"" })[0];                      if (Directory.Exists(rootdir + "\\" + parameters.DumpHTMLPath))                      {                          // Strip out the generated date                          var htmlfiles = walkDirectoryTree(new DirectoryInfo(rootdir + "\\" + parameters.DumpHTMLPath)' new string[1] { "*.html" });                          foreach (var htmlfile in htmlfiles)                          {                              var fh = new StreamReader(htmlfile);                              var f = fh.ReadToEnd();                              fh.Close();                              int idx = f.LastIndexOf("<p>Generated by <a href=\"http://www.bugseverywhere.org/\">");                              if (idx >= 0)                              {                                  idx = f.IndexOf("</a>"' idx);                                  var eidx = f.IndexOf("</p>"' idx);                                  f = f.Remove(idx + 4' eidx - idx - 4);                                  var fo = new StreamWriter(htmlfile);                                  fo.Write(f);                                  fo.Close();                              }                          }                          // Add any new HTML files                          result = callBEcmd(rootdir' new string[1] { "vcs add \"" + parameters.DumpHTMLPath + "\"" })[0];                          if (result.Contains("ERROR:"))                              throw new Exception(result);                      }                  }              }              catch (Exception e)              {                  MessageBox.Show(hwnd' "Error when writing HTML: " + e.ToString()' "Error from BEurtle"' MessageBoxButtons.OK' MessageBoxIcon.Error);              }
Magic Number,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,GetCommitMessage,The following statement contains a magic number: try              {                  rootpath = commonRoot;                  this.parameters = new ParseParameters(this' hwnd' parameters);                  if (VCSAuthor == null)                  {                      string VCSUser_ = callBEcmd(rootpath' new string[1] { "vcs get_user_id" })[0];                      if (-1 != VCSUser_.IndexOf("RESULT:"))                          this.parameters.DefaultAuthor = VCSAuthor = VCSUser_.Substring(VCSUser_.IndexOf("RESULT:") + 8);                  }                  var form = new IssuesForm(this' commonRoot' originalMessage);                  if (form.ShowDialog(hwnd) != DialogResult.OK)                      return originalMessage;                  var issues = form.selectedIssues();                  if (issues.Count == 0)                      return originalMessage;                  string result = originalMessage+"\n\n";                  foreach (var issue in issues)                      result += "* Issue " + issue.shortname + " (" + issue.summary + ") fixed.\n";                  return result;              }              catch (Exception e)              {                  MessageBox.Show(hwnd' e.ToString());                  throw;              }
Magic Number,BEurtle,BEurtlePlugin,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,OnCommitFinished,The following statement contains a magic number: if (logMessage.ToLower().IndexOf("fixed") >= 0)              {                  var regexObj = new Regex(@"[\s;'.]([0-9a-f]{3}/[0-9a-f]{3})[\s;'.]"' RegexOptions.IgnoreCase);                  var matches = regexObj.Matches(logMessage);                    if (matches.Count > 0)                  {                      bool modified = false;                      if(parameters==null) parameters = new ParseParameters(this' hwnd' "");                      if (VCSAuthor == null)                      {                          string VCSUser_ = callBEcmd(rootpath' new string[1] { "vcs get_user_id" })[0];                          if (-1 != VCSUser_.IndexOf("RESULT:"))                              this.parameters.DefaultAuthor = VCSAuthor = VCSUser_.Substring(VCSUser_.IndexOf("RESULT:") + 8);                      }                      if (issues == null && !loadIssues(hwnd))                          throw new Exception("Failed to load BE issues for checking commit message against");                      var openstatuses=new List<string>() { "unconfirmed"' "open"' "assigned"' "test" };                      var itemsdone = new List<string>();                      foreach (Match match in matches)                      {                          string shortname = match.Groups[1].ToString();                          if (!itemsdone.Contains(shortname))                          {                              BEIssue issue = findIssues(new string[1] { shortname })[0];                              if (openstatuses.Contains(issue.status))                              {                                  var result = MessageBox.Show(hwnd' "Commit message implies issue " + shortname + " (" + issue.summary + ")\nwith status " + issue.status + " is now fixed. Shall I mark it as fixed for you?"' "Question"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question);                                  if (DialogResult.Cancel == result)                                      break;                                  else if (DialogResult.Yes == result)                                  {                                      string[] outputs;                                      if(parameters.AddCommitAsComment)                                          outputs = callBEcmd(rootpath' new string[1] { "comment -a \"BEurtle auto issue closer\" " + shortname + " -" }' new string[1] { "Fixed in commit "+revision.ToString("x")+" (decimal "+revision.ToString()+")" });                                      outputs = callBEcmd(rootpath' new string[1] { "status fixed " + shortname });                                      if (outputs[0].Length > 0) MessageBox.Show(hwnd' "Command output: " + outputs[0]);                                      else                                      {                                          itemsdone.Add(shortname);                                          modified = true;                                      }                                  }                              }                          }                      }                      if (modified)                          writeHTML(hwnd' rootpath);                  }              }
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,NewCommentTreeNode,The following statement contains a magic number: switch (commenttype)              {                  case "text/plain":                      if (commentbody.Length <= 48)                          s += commentbody;                      else                          s += commentbody.Substring(0' 48) + " ...";                      break;                  case "text/html":                      int idx=0' count = 0;                      bool inhtml = false;                      for (; count < 48 && idx<commentbody.Length; idx++)                      {                          if (inhtml)                          {                              if (commentbody[idx] == '>')                                  inhtml = false;                          }                          else                          {                              if (commentbody[idx] == '<')                                  inhtml = true;                              else                              {                                  s += commentbody[idx];                                  count++;                              }                          }                      }                      if (idx < commentbody.Length) s += " ...";                      break;                  default:                      s += commenttype;                      break;              }
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,NewCommentTreeNode,The following statement contains a magic number: switch (commenttype)              {                  case "text/plain":                      if (commentbody.Length <= 48)                          s += commentbody;                      else                          s += commentbody.Substring(0' 48) + " ...";                      break;                  case "text/html":                      int idx=0' count = 0;                      bool inhtml = false;                      for (; count < 48 && idx<commentbody.Length; idx++)                      {                          if (inhtml)                          {                              if (commentbody[idx] == '>')                                  inhtml = false;                          }                          else                          {                              if (commentbody[idx] == '<')                                  inhtml = true;                              else                              {                                  s += commentbody[idx];                                  count++;                              }                          }                      }                      if (idx < commentbody.Length) s += " ...";                      break;                  default:                      s += commenttype;                      break;              }
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,NewCommentTreeNode,The following statement contains a magic number: switch (commenttype)              {                  case "text/plain":                      if (commentbody.Length <= 48)                          s += commentbody;                      else                          s += commentbody.Substring(0' 48) + " ...";                      break;                  case "text/html":                      int idx=0' count = 0;                      bool inhtml = false;                      for (; count < 48 && idx<commentbody.Length; idx++)                      {                          if (inhtml)                          {                              if (commentbody[idx] == '>')                                  inhtml = false;                          }                          else                          {                              if (commentbody[idx] == '<')                                  inhtml = true;                              else                              {                                  s += commentbody[idx];                                  count++;                              }                          }                      }                      if (idx < commentbody.Length) s += " ...";                      break;                  default:                      s += commenttype;                      break;              }
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,Comments_AfterSelect,The following statement contains a magic number: switch (commenttype)              {                  case "text/plain":                      // Hack the text into HTML                      commentbody = fixUp(commentbody);                      break;                  case "text/html":                      break;                  default:                      if (CommentBodyView.TabPages[0] == CommentBodyViewHTML)                      {                          CommentBodyView.TabPages.Remove(CommentBodyViewHTML);                          CommentBodyView.TabPages.Remove(CommentBodyViewRaw);                          CommentEdit.Enabled = false;                      }                      if(commenttype.StartsWith("image"))                          DraggableIcon.Items[0].ImageIndex = 1;                      else if(commenttype.StartsWith("application/zip"))                          DraggableIcon.Items[0].ImageIndex = 2;                      break;              }
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,LoadFromFile,The following statement contains a magic number: FindMimeFromData(0' null' buffer' 256' null' 0' out mimetype_' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,LoadFromFile,The following statement contains a magic number: if (mimetype.StartsWith("image/"))                  DraggableIcon.Items[0].ImageIndex = 1;              else if (mimetype.StartsWith("application/zip"))                  DraggableIcon.Items[0].ImageIndex = 2;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveComment,The following statement contains a magic number: if (BoxShortName.Text.Length == 0)              {                  // Need to create a new issue first                  string[] outputs = plugin.callBEcmd(plugin.rootpath' new string[1] { "new \"" + BoxSummary.Text + "\"" });                  // Format is "Created bug with ID 701/356"                  if (outputs[0].StartsWith("Created bug with ID "))                  {                      BoxShortName.Text = outputs[0].Substring(20' 7);                      int uuid_idx=outputs[0].LastIndexOf('/');                      BoxUUID.Text = outputs[0].Substring(uuid_idx + 1);                      if (BoxUUID.Text[BoxUUID.Text.Length - 1] != ')') throw new Exception("BE isn't returning UUIDs when it creates issues! Do you have an old BE version?");                      BoxUUID.Text = BoxUUID.Text.Substring(0' BoxUUID.Text.Length - 1);                  }                  else                  {                      MessageBox.Show(this' "Error adding issue: " + outputs[0]);                      return false;                  }              }
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,SaveComment,The following statement contains a magic number: if (BoxShortName.Text.Length == 0)              {                  // Need to create a new issue first                  string[] outputs = plugin.callBEcmd(plugin.rootpath' new string[1] { "new \"" + BoxSummary.Text + "\"" });                  // Format is "Created bug with ID 701/356"                  if (outputs[0].StartsWith("Created bug with ID "))                  {                      BoxShortName.Text = outputs[0].Substring(20' 7);                      int uuid_idx=outputs[0].LastIndexOf('/');                      BoxUUID.Text = outputs[0].Substring(uuid_idx + 1);                      if (BoxUUID.Text[BoxUUID.Text.Length - 1] != ')') throw new Exception("BE isn't returning UUIDs when it creates issues! Do you have an old BE version?");                      BoxUUID.Text = BoxUUID.Text.Substring(0' BoxUUID.Text.Length - 1);                  }                  else                  {                      MessageBox.Show(this' "Error adding issue: " + outputs[0]);                      return false;                  }              }
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,Comments_DragOver,The following statement contains a magic number: if (!disable_scrolling)              {                  var pt = Comments.PointToClient(new Point(e.X' e.Y));                  var node = Comments.GetNodeAt(pt);                  // Why the hell is auto-scrolling only implemented downwards? Stupid!                  if (node != null)                  {                      if (pt.Y <= Comments.Font.Height / 2)                          if (node.PrevNode != null)                              node = node.PrevNode;                          else if (node.Parent != null)                              node = node.Parent;                  }                  Comments.SelectedNode = node;              }
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Location = new System.Drawing.Point(384' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Location = new System.Drawing.Point(384' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.TabIndex = 21;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Location = new System.Drawing.Point(383' 43);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Location = new System.Drawing.Point(383' 43);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.TabIndex = 22;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(39' 15);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(39' 15);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxUUID.Location = new System.Drawing.Point(82' 12);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxUUID.Location = new System.Drawing.Point(82' 12);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxUUID.Size = new System.Drawing.Size(295' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxUUID.Size = new System.Drawing.Size(295' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxUUID.TabIndex = 10;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxShortName.Location = new System.Drawing.Point(82' 39);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxShortName.Location = new System.Drawing.Point(82' 39);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxShortName.Size = new System.Drawing.Size(113' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxShortName.Size = new System.Drawing.Size(113' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxShortName.TabIndex = 11;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(10' 42);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(10' 42);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(66' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(66' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 7;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxCreator.Location = new System.Drawing.Point(82' 65);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxCreator.Location = new System.Drawing.Point(82' 65);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxCreator.Size = new System.Drawing.Size(295' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxCreator.Size = new System.Drawing.Size(295' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(23' 120);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(23' 120);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(53' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(53' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 9;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxAssigned.Location = new System.Drawing.Point(82' 117);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxAssigned.Location = new System.Drawing.Point(82' 117);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxAssigned.Size = new System.Drawing.Size(295' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxAssigned.Size = new System.Drawing.Size(295' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxAssigned.TabIndex = 2;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(31' 68);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(31' 68);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(44' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(44' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 11;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(202' 42);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(202' 42);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(47' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(47' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 12;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxCreated.Location = new System.Drawing.Point(255' 39);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxCreated.Location = new System.Drawing.Point(255' 39);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxCreated.Size = new System.Drawing.Size(122' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxCreated.Size = new System.Drawing.Size(122' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxCreated.TabIndex = 12;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(28' 146);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(28' 146);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(48' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(48' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 14;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(210' 146);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(210' 146);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(40' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(40' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 15;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(23' 170);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(23' 170);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(53' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(53' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 16;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSeverity.Location = new System.Drawing.Point(82' 143);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSeverity.Location = new System.Drawing.Point(82' 143);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSeverity.Size = new System.Drawing.Size(121' 21);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSeverity.Size = new System.Drawing.Size(121' 21);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSeverity.TabIndex = 3;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxStatus.Location = new System.Drawing.Point(256' 143);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxStatus.Location = new System.Drawing.Point(256' 143);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxStatus.Size = new System.Drawing.Size(121' 21);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxStatus.Size = new System.Drawing.Size(121' 21);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxStatus.TabIndex = 4;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSummary.Location = new System.Drawing.Point(83' 170);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSummary.Location = new System.Drawing.Point(83' 170);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSummary.Size = new System.Drawing.Size(376' 36);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSummary.Size = new System.Drawing.Size(376' 36);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxSummary.TabIndex = 5;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEdit.Location = new System.Drawing.Point(383' 140);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEdit.Location = new System.Drawing.Point(383' 140);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEdit.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEdit.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ButtonEdit.TabIndex = 23;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxReporter.Location = new System.Drawing.Point(82' 91);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxReporter.Location = new System.Drawing.Point(82' 91);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxReporter.Size = new System.Drawing.Size(295' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.BoxReporter.Size = new System.Drawing.Size(295' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(23' 94);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(23' 94);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(51' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(51' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 23;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAuthor.Location = new System.Drawing.Point(64' 3);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAuthor.Location = new System.Drawing.Point(64' 3);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAuthor.Size = new System.Drawing.Size(157' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAuthor.Size = new System.Drawing.Size(157' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAuthor.TabIndex = 12;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Commentary.Location = new System.Drawing.Point(6' 19);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Commentary.Location = new System.Drawing.Point(6' 19);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Commentary.Panel1MinSize = 100;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Commentary.Size = new System.Drawing.Size(436' 313);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Commentary.Size = new System.Drawing.Size(436' 313);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Commentary.SplitterDistance = 100;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Commentary.TabIndex = 24;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentReply.Location = new System.Drawing.Point(358' 74);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentReply.Location = new System.Drawing.Point(358' 74);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentReply.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentReply.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentReply.TabIndex = 10;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEdit.Location = new System.Drawing.Point(358' 2);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEdit.Location = new System.Drawing.Point(358' 2);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEdit.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEdit.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEdit.TabIndex = 7;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDelete.Location = new System.Drawing.Point(358' 26);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDelete.Location = new System.Drawing.Point(358' 26);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDelete.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDelete.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDelete.TabIndex = 8;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAdd.Location = new System.Drawing.Point(358' 50);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAdd.Location = new System.Drawing.Point(358' 50);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAdd.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAdd.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentAdd.TabIndex = 9;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Comments.Location = new System.Drawing.Point(3' 3);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Comments.Location = new System.Drawing.Point(3' 3);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Comments.Size = new System.Drawing.Size(349' 94);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Comments.Size = new System.Drawing.Size(349' 94);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.Comments.TabIndex = 6;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyView.Location = new System.Drawing.Point(3' 29);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyView.Location = new System.Drawing.Point(3' 29);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyView.Size = new System.Drawing.Size(430' 177);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyView.Size = new System.Drawing.Size(430' 177);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyView.TabIndex = 10;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewHTML.Location = new System.Drawing.Point(4' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewHTML.Location = new System.Drawing.Point(4' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewHTML.Padding = new System.Windows.Forms.Padding(3);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewHTML.Size = new System.Drawing.Size(422' 151);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewHTML.Size = new System.Drawing.Size(422' 151);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.HTMLEditorControls.Location = new System.Drawing.Point(6' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.HTMLEditorControls.Location = new System.Drawing.Point(6' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.HTMLEditorControls.Size = new System.Drawing.Size(410' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.HTMLEditorControls.Size = new System.Drawing.Size(410' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.HTMLEditorControls.TabIndex = 25;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyLink.Location = new System.Drawing.Point(256' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyLink.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyLink.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyLink.TabIndex = 24;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEditSave.Location = new System.Drawing.Point(350' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEditSave.Size = new System.Drawing.Size(60' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEditSave.Size = new System.Drawing.Size(60' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEditSave.TabIndex = 23;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyOutdent.Location = new System.Drawing.Point(205' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyOutdent.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyOutdent.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyOutdent.TabIndex = 22;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyIndent.Location = new System.Drawing.Point(228' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyIndent.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyIndent.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyIndent.TabIndex = 21;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEditCancel.Location = new System.Drawing.Point(290' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEditCancel.Size = new System.Drawing.Size(60' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEditCancel.Size = new System.Drawing.Size(60' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentEditCancel.TabIndex = 20;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyOrderedList.Location = new System.Drawing.Point(176' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyOrderedList.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyOrderedList.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyOrderedList.TabIndex = 19;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyBold.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyBold.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyBold.TabIndex = 12;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyUnorderedList.Location = new System.Drawing.Point(153' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyUnorderedList.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyUnorderedList.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyUnorderedList.TabIndex = 18;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyItalics.Location = new System.Drawing.Point(24' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyItalics.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyItalics.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyItalics.TabIndex = 13;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignJustify.Location = new System.Drawing.Point(124' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignJustify.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignJustify.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignJustify.TabIndex = 17;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignLeft.Location = new System.Drawing.Point(55' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignLeft.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignLeft.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignLeft.TabIndex = 14;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignRight.Location = new System.Drawing.Point(101' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignRight.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignRight.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignRight.TabIndex = 16;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignMiddle.Location = new System.Drawing.Point(78' 0);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignMiddle.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignMiddle.Size = new System.Drawing.Size(23' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ApplyAlignMiddle.TabIndex = 15;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBody.Location = new System.Drawing.Point(6' 35);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBody.Location = new System.Drawing.Point(6' 35);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBody.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBody.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBody.Size = new System.Drawing.Size(410' 113);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBody.Size = new System.Drawing.Size(410' 113);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBody.TabIndex = 11;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentContextMenu.Size = new System.Drawing.Size(165' 148);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentContextMenu.Size = new System.Drawing.Size(165' 148);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyUndo.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyUndo.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(161' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(161' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyCut.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyCut.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyCopy.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyCopy.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyPaste.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyPaste.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyDelete.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyDelete.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(161' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(161' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodySelectAll.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodySelectAll.Size = new System.Drawing.Size(164' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewRaw.Location = new System.Drawing.Point(4' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewRaw.Location = new System.Drawing.Point(4' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewRaw.Padding = new System.Windows.Forms.Padding(3);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewRaw.Size = new System.Drawing.Size(422' 151);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewRaw.Size = new System.Drawing.Size(422' 151);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyRaw.Location = new System.Drawing.Point(4' 7);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyRaw.Location = new System.Drawing.Point(4' 7);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyRaw.Size = new System.Drawing.Size(412' 138);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyRaw.Size = new System.Drawing.Size(412' 138);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyRaw.TabIndex = 20;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewFile.Location = new System.Drawing.Point(4' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewFile.Location = new System.Drawing.Point(4' 22);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewFile.Padding = new System.Windows.Forms.Padding(3);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewFile.Size = new System.Drawing.Size(422' 151);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewFile.Size = new System.Drawing.Size(422' 151);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentBodyViewFile.TabIndex = 2;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.LoadAttachment.Location = new System.Drawing.Point(327' 100);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.LoadAttachment.Location = new System.Drawing.Point(327' 100);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.LoadAttachment.Size = new System.Drawing.Size(89' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.LoadAttachment.Size = new System.Drawing.Size(89' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.LoadAttachment.TabIndex = 2;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.SaveAttachment.Location = new System.Drawing.Point(327' 129);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.SaveAttachment.Location = new System.Drawing.Point(327' 129);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.SaveAttachment.Size = new System.Drawing.Size(89' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.SaveAttachment.Size = new System.Drawing.Size(89' 23);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.DraggableIcon.Location = new System.Drawing.Point(6' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.DraggableIcon.Location = new System.Drawing.Point(6' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.DraggableIcon.Size = new System.Drawing.Size(315' 146);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.DraggableIcon.Size = new System.Drawing.Size(315' 146);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.imageList1.Images.SetKeyName(2' "zippedFile.ico");
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDate.Location = new System.Drawing.Point(266' 3);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDate.Location = new System.Drawing.Point(266' 3);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDate.Size = new System.Drawing.Size(167' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDate.Size = new System.Drawing.Size(167' 20);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.CommentDate.TabIndex = 15;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(227' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(227' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(33' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(33' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label11.TabIndex = 14;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(13' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(13' 6);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(41' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(41' 13);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 13;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(12' 212);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(12' 212);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(448' 338);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(448' 338);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 25;
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(472' 562);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(472' 562);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(488' 600);
Magic Number,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(488' 600);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_SortCompare,The following statement contains a magic number: string severity1 = (string) IssuesList.Rows[e.RowIndex1].Cells[2].Value;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_SortCompare,The following statement contains a magic number: string severity2 = (string) IssuesList.Rows[e.RowIndex2].Cells[2].Value;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_SortCompare,The following statement contains a magic number: if (e.Column.Index == 1)              {                  if (status_result != 0)                      e.SortResult = status_result;                  else if (severity_result != 0)                      e.SortResult = severity_result;                  else                      e.SortResult = ((string) IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string) IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }              else if (e.Column.Index == 2)              {                  if (severity_result != 0)                      e.SortResult = severity_result;                  else if (status_result != 0)                      e.SortResult = status_result;                  else                      e.SortResult = ((string)IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string)IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_SortCompare,The following statement contains a magic number: if (e.Column.Index == 1)              {                  if (status_result != 0)                      e.SortResult = status_result;                  else if (severity_result != 0)                      e.SortResult = severity_result;                  else                      e.SortResult = ((string) IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string) IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }              else if (e.Column.Index == 2)              {                  if (severity_result != 0)                      e.SortResult = severity_result;                  else if (status_result != 0)                      e.SortResult = status_result;                  else                      e.SortResult = ((string)IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string)IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_SortCompare,The following statement contains a magic number: if (e.Column.Index == 1)              {                  if (status_result != 0)                      e.SortResult = status_result;                  else if (severity_result != 0)                      e.SortResult = severity_result;                  else                      e.SortResult = ((string) IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string) IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }              else if (e.Column.Index == 2)              {                  if (severity_result != 0)                      e.SortResult = severity_result;                  else if (status_result != 0)                      e.SortResult = status_result;                  else                      e.SortResult = ((string)IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string)IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_SortCompare,The following statement contains a magic number: if (e.Column.Index == 1)              {                  if (status_result != 0)                      e.SortResult = status_result;                  else if (severity_result != 0)                      e.SortResult = severity_result;                  else                      e.SortResult = ((string) IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string) IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }              else if (e.Column.Index == 2)              {                  if (severity_result != 0)                      e.SortResult = severity_result;                  else if (status_result != 0)                      e.SortResult = status_result;                  else                      e.SortResult = ((string)IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string)IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_SortCompare,The following statement contains a magic number: if (e.Column.Index == 1)              {                  if (status_result != 0)                      e.SortResult = status_result;                  else if (severity_result != 0)                      e.SortResult = severity_result;                  else                      e.SortResult = ((string) IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string) IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }              else if (e.Column.Index == 2)              {                  if (severity_result != 0)                      e.SortResult = severity_result;                  else if (status_result != 0)                      e.SortResult = status_result;                  else                      e.SortResult = ((string)IssuesList.Rows[e.RowIndex1].Cells[3].Value).CompareTo((string)IssuesList.Rows[e.RowIndex2].Cells[3].Value);                  e.Handled = true;              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,loadIssues,The following statement contains a magic number: try              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' false' 0);                  SuspendLayout();                  IssuesList.Rows.Clear();                  RowToUUID.Clear();                  IssuesList.Columns[IssuesList.Columns.Count - 1].Visible = plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow;                  ButtonOk.Enabled = false;                  NewIssue.Enabled = false;                  DeleteIssue.Enabled = false;                  VCSInfo.Text = plugin.VCSInfo;                    if(doredraw)                  {                      var issues_nav = plugin.issues.CreateNavigator();                      XPathNodeIterator iter = (XPathNodeIterator)issues_nav.Select("/be-xml/bug");                      foreach (XPathNavigator issue in iter)                      {                          //MessageBox.Show(this' issue.OuterXml);                          Guid uuid = new Guid(issue.Evaluate("string(uuid)").ToString());                          string shortname=(string) issue.Evaluate("string(short-name)")' status=(string) issue.Evaluate("string(status)")' severity=(string) issue.Evaluate("string(severity)")' created' summary=(string) issue.Evaluate("string(summary)");                          created=(string) issue.Evaluate("string(created)");                          if (created == "")                              created = "unknown";                          else                          {                              try                              {                                  created = DateTime.Parse(created).ToString("u");                              }                              catch (Exception)                              {                                  created = "BAD";                              }                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (severity_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in severity_filters)                                  if (severity.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (status_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in status_filters)                                  if (status.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (created_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in created_filters)                                  if (created.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          if (summary_filters.Count > 0)                          {                              bool filter = false;                              foreach (var f in summary_filters)                                  if (summary.Contains(f)) { filter = true; break; }                              if (filter) continue;                          }                          var row = new DataGridViewRow();                          row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[0].Value = shortname;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[1].Value = status;                          if (status == "closed" || status == "fixed" || status == "wontfix")                              row.Cells[1].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (status == "unconfirmed")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (status == "open" || status == "assigned")                              row.Cells[1].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[2].Value = severity;                          if (severity == "target")                              row.Cells[2].Style.BackColor = Color.FromArgb(128' 255' 128);                          else if (severity == "serious")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 255' 128);                          else if (severity == "critical" || severity == "fatal")                              row.Cells[2].Style.BackColor = Color.FromArgb(255' 128' 128);                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[3].Value = created;                            row.Cells.Add(new DataGridViewTextBoxCell());                          row.Cells[4].Value = summary;                            row.Cells.Add(new DataGridViewLinkCell());                          row.Cells[5].Style.Alignment = DataGridViewContentAlignment.MiddleRight;                          if(plugin.parameters.ShowCommentCount != ShowCommentCountType.DontShow)                          {                              int commentcount=int.Parse(issue.Evaluate("count(comment)").ToString());                              row.Cells[5].Value = commentcount.ToString();                          }                            IssuesList.Rows.Add(row);                          RowToUUID.Add(row' uuid);                      }                      NewIssue.Enabled = true;                      ButtonOk.Enabled = true;                      if (IssuesList.Rows.Count > 0)                      {                          DeleteIssue.Enabled = true;                          if (focuseditem != null)                          {                              foreach (DataGridViewRow item in IssuesList.Rows)                              {                                  if (item.Cells[0].ToString() == focuseditem)                                  {                                      IssuesList.Rows[0].Selected = false;                                      item.Selected = true;                                      break;                                  }                              }                          }                      }                  }              }              finally              {                  Win32.SendMessage(this.Handle' Win32.WM_SETREDRAW' true' 0);                  this.ResumeLayout();                  Refresh();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,IssuesList_CellClick,The following statement contains a magic number: if (e.ColumnIndex == 5)                  IssuesList_CellDoubleClick(sender' e);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,BERepoLocation_KeyPress,The following statement contains a magic number: if (e.KeyChar == 13)              {                  e.Handled = true;                  loadIssues();              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,fillInMenuItems,The following statement contains a magic number: while(menu.DropDownItems.Count>3)                  menu.DropDownItems.RemoveAt(3);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,fillInMenuItems,The following statement contains a magic number: while(menu.DropDownItems.Count>3)                  menu.DropDownItems.RemoveAt(3);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,setFilters,The following statement contains a magic number: if (!contextmenu_initialising)              {                  var j = 0;                  for (var i = 2; i < menuitem.DropDownItems.Count; i++)                  {                      var v = menuitem.DropDownItems[i].Text;                      if (v.Length > 0)                      {                          if (filters.Count == j)                              filters.Add(v);                          else                              filters[j] = v;                          j++;                      }                  }                  if (filters.Count > j) filters.RemoveRange(j' filters.Count - j);                  loadIssues(false);              }
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,FromStatusTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == 127)                  FromStatusTextBox_TextChanged(sender' e);              else if (e.KeyChar == 13)                  contextMenu_Opening(sender' null);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,FromStatusTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == 127)                  FromStatusTextBox_TextChanged(sender' e);              else if (e.KeyChar == 13)                  contextMenu_Opening(sender' null);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,FromSeverityTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == 127)                  FromSeverityTextBox_TextChanged(sender' e);              else if (e.KeyChar == 13)                  contextMenu_Opening(sender' null);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,FromSeverityTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == 127)                  FromSeverityTextBox_TextChanged(sender' e);              else if (e.KeyChar == 13)                  contextMenu_Opening(sender' null);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,FromCreatedTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == 127)                  FromCreatedTextBox_TextChanged(sender' e);              else if (e.KeyChar == 13)                  contextMenu_Opening(sender' null);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,FromCreatedTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == 127)                  FromCreatedTextBox_TextChanged(sender' e);              else if (e.KeyChar == 13)                  contextMenu_Opening(sender' null);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,FromSummaryTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == 127)                  FromSummaryTextBox_TextChanged(sender' e);              else if (e.KeyChar == 13)                  contextMenu_Opening(sender' null);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,FromSummaryTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == 127)                  FromSummaryTextBox_TextChanged(sender' e);              else if (e.KeyChar == 13)                  contextMenu_Opening(sender' null);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.IssuesList.Location = new System.Drawing.Point(12' 82);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.IssuesList.Location = new System.Drawing.Point(12' 82);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.IssuesList.Size = new System.Drawing.Size(604' 319);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.IssuesList.Size = new System.Drawing.Size(604' 319);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.Id.Width = 50;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.Status.Width = 70;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.Severity.Width = 70;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.Created1.Width = 130;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.CommentCount.Width = 5;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.contextMenu.Size = new System.Drawing.Size(160' 164);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.contextMenu.Size = new System.Drawing.Size(160' 164);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.changeStatusToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.changeStatusToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.unconfirmedToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.unconfirmedToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.openToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.openToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.assignedToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.assignedToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.testToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.testToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.closedToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.closedToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fixedToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fixedToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.wontfixToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.wontfixToolStripMenuItem.Size = new System.Drawing.Size(143' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.changeSeverityToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.changeSeverityToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.targetToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.targetToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.wishlistToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.wishlistToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.minorToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.minorToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.seriousToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.seriousToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.criticalToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.criticalToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fatalToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fatalToolStripMenuItem.Size = new System.Drawing.Size(113' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.filterOutToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.filterOutToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.clearToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.clearToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.allClosedItemsToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.allClosedItemsToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.allNotSeriousToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.allNotSeriousToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(193' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(193' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fromStatusToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fromStatusToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromStatusClear.Size = new System.Drawing.Size(160' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromStatusClear.Size = new System.Drawing.Size(160' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator3.Size = new System.Drawing.Size(157' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator3.Size = new System.Drawing.Size(157' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromStatusTextBox.Size = new System.Drawing.Size(100' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromStatusTextBox.Size = new System.Drawing.Size(100' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fromSeverityToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fromSeverityToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromSeverityClear.Size = new System.Drawing.Size(160' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromSeverityClear.Size = new System.Drawing.Size(160' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator4.Size = new System.Drawing.Size(157' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator4.Size = new System.Drawing.Size(157' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromSeverityTextBox.Size = new System.Drawing.Size(100' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromSeverityTextBox.Size = new System.Drawing.Size(100' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fromCreatedToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fromCreatedToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromCreatedClear.Size = new System.Drawing.Size(160' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromCreatedClear.Size = new System.Drawing.Size(160' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator5.Size = new System.Drawing.Size(157' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator5.Size = new System.Drawing.Size(157' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromCreatedTextBox.Size = new System.Drawing.Size(100' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromCreatedTextBox.Size = new System.Drawing.Size(100' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fromSummaryToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.fromSummaryToolStripMenuItem.Size = new System.Drawing.Size(196' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromSummaryClear.Size = new System.Drawing.Size(160' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromSummaryClear.Size = new System.Drawing.Size(160' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator6.Size = new System.Drawing.Size(157' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator6.Size = new System.Drawing.Size(157' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromSummaryTextBox.Size = new System.Drawing.Size(100' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.FromSummaryTextBox.Size = new System.Drawing.Size(100' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(156' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(156' 6);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.copyToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.copyToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.pasteToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.pasteToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.copyAsXMLToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.copyAsXMLToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem.Size = new System.Drawing.Size(159' 22);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.Location = new System.Drawing.Point(537' 407);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.Location = new System.Drawing.Point(537' 407);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.TabIndex = 4;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Location = new System.Drawing.Point(456' 407);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Location = new System.Drawing.Point(456' 407);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.TabIndex = 3;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(253' 33);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(253' 33);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(59' 13);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(59' 13);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocation.Location = new System.Drawing.Point(318' 30);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocation.Location = new System.Drawing.Point(318' 30);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocation.Size = new System.Drawing.Size(213' 20);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocation.Size = new System.Drawing.Size(213' 20);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocation.TabIndex = 5;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.NewIssue.Location = new System.Drawing.Point(16' 407);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.NewIssue.Location = new System.Drawing.Point(16' 407);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.NewIssue.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.NewIssue.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteIssue.Location = new System.Drawing.Point(97' 407);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteIssue.Location = new System.Drawing.Point(97' 407);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteIssue.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteIssue.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteIssue.TabIndex = 2;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocationBrowse.Location = new System.Drawing.Point(537' 28);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocationBrowse.Location = new System.Drawing.Point(537' 28);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocationBrowse.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocationBrowse.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.BERepoLocationBrowse.TabIndex = 6;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.VCSInfo.Location = new System.Drawing.Point(256' 56);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.VCSInfo.Location = new System.Drawing.Point(256' 56);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.VCSInfo.Size = new System.Drawing.Size(356' 20);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.VCSInfo.Size = new System.Drawing.Size(356' 20);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.VCSInfo.TabIndex = 8;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(87' 64);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(87' 64);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.TabIndex = 9;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.LinkAbout.Location = new System.Drawing.Point(106' 62);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.LinkAbout.Location = new System.Drawing.Point(106' 62);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.LinkAbout.Size = new System.Drawing.Size(35' 13);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.LinkAbout.Size = new System.Drawing.Size(35' 13);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.LinkAbout.TabIndex = 7;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(102' 12);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(102' 12);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(153' 25);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(153' 25);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 11;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(105' 44);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(105' 44);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(139' 13);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(139' 13);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 12;
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(624' 442);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(624' 442);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(540' 256);
Magic Number,BEurtle,IssuesForm,C:\repos\ned14_BEurtle\BEurtle\IssuesForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(540' 256);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,OptionsDialog_Shown,The following statement contains a magic number: try              {                  initialising = true;                  DefaultAuthorChanged = false;                  BoxDefaultAuthor.Text = "";                  BoxDefaultAuthor.ForeColor = Color.FromArgb(0' 0' 0);                  DumpHTMLPathChanged = false;                  BoxDumpHTMLPath.Text = "";                  BoxDumpHTMLPath.ForeColor = Color.FromArgb(0' 0' 0);                  if (parameters != null)                  {                      ParseParameters parsed = new ParseParameters(plugin' this' parameters' false);                      if (parsed.DefaultAuthor.Length > 0)                          DefaultAuthorChanged = true;                      else                          BoxDefaultAuthor.ForeColor = Color.FromArgb(192' 192' 192);                      if (parsed.DumpHTMLPath.Length > 0)                          DumpHTMLPathChanged = true;                      else                          BoxDumpHTMLPath.ForeColor = Color.FromArgb(192' 192' 192);                      parsed.FillInDefaults(this);                        BEPath = parsed.BEPath;                      BoxDefaultAuthor.Text = parsed.DefaultAuthor;                      CheckDumpHTML.Checked = parsed.DumpHTML;                      BoxDumpHTMLPath.Text = parsed.DumpHTMLPath;                      CheckAddCommitAsComment.Checked = parsed.AddCommitAsComment;                      CheckFilterOutClosedIssues.Checked = parsed.FilterOutClosedIssues;                      CheckBEXMLCache.Checked = parsed.CacheBEXML;                      switch(parsed.ShowCommentCount)                      {                          case ShowCommentCountType.DontShow:                              CheckShowCommentCount.CheckState = CheckState.Unchecked;                              break;                          case ShowCommentCountType.ShowEasy:                              CheckShowCommentCount.CheckState = CheckState.Indeterminate;                              break;                          case ShowCommentCountType.ShowAll:                              CheckShowCommentCount.CheckState = CheckState.Checked;                              break;                      }                      CheckUseBEXML.Checked = parsed.UseBEXML;                  }                  else                  {                      this.Text = "About BEurtle";                      OptionsGroupBox.Enabled = false;                      ButtonReset.Visible = false;                      ButtonCancel.Visible = false;                  }              }              finally              {                  initialising = false;              }
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,OptionsDialog_Shown,The following statement contains a magic number: try              {                  initialising = true;                  DefaultAuthorChanged = false;                  BoxDefaultAuthor.Text = "";                  BoxDefaultAuthor.ForeColor = Color.FromArgb(0' 0' 0);                  DumpHTMLPathChanged = false;                  BoxDumpHTMLPath.Text = "";                  BoxDumpHTMLPath.ForeColor = Color.FromArgb(0' 0' 0);                  if (parameters != null)                  {                      ParseParameters parsed = new ParseParameters(plugin' this' parameters' false);                      if (parsed.DefaultAuthor.Length > 0)                          DefaultAuthorChanged = true;                      else                          BoxDefaultAuthor.ForeColor = Color.FromArgb(192' 192' 192);                      if (parsed.DumpHTMLPath.Length > 0)                          DumpHTMLPathChanged = true;                      else                          BoxDumpHTMLPath.ForeColor = Color.FromArgb(192' 192' 192);                      parsed.FillInDefaults(this);                        BEPath = parsed.BEPath;                      BoxDefaultAuthor.Text = parsed.DefaultAuthor;                      CheckDumpHTML.Checked = parsed.DumpHTML;                      BoxDumpHTMLPath.Text = parsed.DumpHTMLPath;                      CheckAddCommitAsComment.Checked = parsed.AddCommitAsComment;                      CheckFilterOutClosedIssues.Checked = parsed.FilterOutClosedIssues;                      CheckBEXMLCache.Checked = parsed.CacheBEXML;                      switch(parsed.ShowCommentCount)                      {                          case ShowCommentCountType.DontShow:                              CheckShowCommentCount.CheckState = CheckState.Unchecked;                              break;                          case ShowCommentCountType.ShowEasy:                              CheckShowCommentCount.CheckState = CheckState.Indeterminate;                              break;                          case ShowCommentCountType.ShowAll:                              CheckShowCommentCount.CheckState = CheckState.Checked;                              break;                      }                      CheckUseBEXML.Checked = parsed.UseBEXML;                  }                  else                  {                      this.Text = "About BEurtle";                      OptionsGroupBox.Enabled = false;                      ButtonReset.Visible = false;                      ButtonCancel.Visible = false;                  }              }              finally              {                  initialising = false;              }
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,OptionsDialog_Shown,The following statement contains a magic number: try              {                  initialising = true;                  DefaultAuthorChanged = false;                  BoxDefaultAuthor.Text = "";                  BoxDefaultAuthor.ForeColor = Color.FromArgb(0' 0' 0);                  DumpHTMLPathChanged = false;                  BoxDumpHTMLPath.Text = "";                  BoxDumpHTMLPath.ForeColor = Color.FromArgb(0' 0' 0);                  if (parameters != null)                  {                      ParseParameters parsed = new ParseParameters(plugin' this' parameters' false);                      if (parsed.DefaultAuthor.Length > 0)                          DefaultAuthorChanged = true;                      else                          BoxDefaultAuthor.ForeColor = Color.FromArgb(192' 192' 192);                      if (parsed.DumpHTMLPath.Length > 0)                          DumpHTMLPathChanged = true;                      else                          BoxDumpHTMLPath.ForeColor = Color.FromArgb(192' 192' 192);                      parsed.FillInDefaults(this);                        BEPath = parsed.BEPath;                      BoxDefaultAuthor.Text = parsed.DefaultAuthor;                      CheckDumpHTML.Checked = parsed.DumpHTML;                      BoxDumpHTMLPath.Text = parsed.DumpHTMLPath;                      CheckAddCommitAsComment.Checked = parsed.AddCommitAsComment;                      CheckFilterOutClosedIssues.Checked = parsed.FilterOutClosedIssues;                      CheckBEXMLCache.Checked = parsed.CacheBEXML;                      switch(parsed.ShowCommentCount)                      {                          case ShowCommentCountType.DontShow:                              CheckShowCommentCount.CheckState = CheckState.Unchecked;                              break;                          case ShowCommentCountType.ShowEasy:                              CheckShowCommentCount.CheckState = CheckState.Indeterminate;                              break;                          case ShowCommentCountType.ShowAll:                              CheckShowCommentCount.CheckState = CheckState.Checked;                              break;                      }                      CheckUseBEXML.Checked = parsed.UseBEXML;                  }                  else                  {                      this.Text = "About BEurtle";                      OptionsGroupBox.Enabled = false;                      ButtonReset.Visible = false;                      ButtonCancel.Visible = false;                  }              }              finally              {                  initialising = false;              }
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,OptionsDialog_Shown,The following statement contains a magic number: try              {                  initialising = true;                  DefaultAuthorChanged = false;                  BoxDefaultAuthor.Text = "";                  BoxDefaultAuthor.ForeColor = Color.FromArgb(0' 0' 0);                  DumpHTMLPathChanged = false;                  BoxDumpHTMLPath.Text = "";                  BoxDumpHTMLPath.ForeColor = Color.FromArgb(0' 0' 0);                  if (parameters != null)                  {                      ParseParameters parsed = new ParseParameters(plugin' this' parameters' false);                      if (parsed.DefaultAuthor.Length > 0)                          DefaultAuthorChanged = true;                      else                          BoxDefaultAuthor.ForeColor = Color.FromArgb(192' 192' 192);                      if (parsed.DumpHTMLPath.Length > 0)                          DumpHTMLPathChanged = true;                      else                          BoxDumpHTMLPath.ForeColor = Color.FromArgb(192' 192' 192);                      parsed.FillInDefaults(this);                        BEPath = parsed.BEPath;                      BoxDefaultAuthor.Text = parsed.DefaultAuthor;                      CheckDumpHTML.Checked = parsed.DumpHTML;                      BoxDumpHTMLPath.Text = parsed.DumpHTMLPath;                      CheckAddCommitAsComment.Checked = parsed.AddCommitAsComment;                      CheckFilterOutClosedIssues.Checked = parsed.FilterOutClosedIssues;                      CheckBEXMLCache.Checked = parsed.CacheBEXML;                      switch(parsed.ShowCommentCount)                      {                          case ShowCommentCountType.DontShow:                              CheckShowCommentCount.CheckState = CheckState.Unchecked;                              break;                          case ShowCommentCountType.ShowEasy:                              CheckShowCommentCount.CheckState = CheckState.Indeterminate;                              break;                          case ShowCommentCountType.ShowAll:                              CheckShowCommentCount.CheckState = CheckState.Checked;                              break;                      }                      CheckUseBEXML.Checked = parsed.UseBEXML;                  }                  else                  {                      this.Text = "About BEurtle";                      OptionsGroupBox.Enabled = false;                      ButtonReset.Visible = false;                      ButtonCancel.Visible = false;                  }              }              finally              {                  initialising = false;              }
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,OptionsDialog_Shown,The following statement contains a magic number: try              {                  initialising = true;                  DefaultAuthorChanged = false;                  BoxDefaultAuthor.Text = "";                  BoxDefaultAuthor.ForeColor = Color.FromArgb(0' 0' 0);                  DumpHTMLPathChanged = false;                  BoxDumpHTMLPath.Text = "";                  BoxDumpHTMLPath.ForeColor = Color.FromArgb(0' 0' 0);                  if (parameters != null)                  {                      ParseParameters parsed = new ParseParameters(plugin' this' parameters' false);                      if (parsed.DefaultAuthor.Length > 0)                          DefaultAuthorChanged = true;                      else                          BoxDefaultAuthor.ForeColor = Color.FromArgb(192' 192' 192);                      if (parsed.DumpHTMLPath.Length > 0)                          DumpHTMLPathChanged = true;                      else                          BoxDumpHTMLPath.ForeColor = Color.FromArgb(192' 192' 192);                      parsed.FillInDefaults(this);                        BEPath = parsed.BEPath;                      BoxDefaultAuthor.Text = parsed.DefaultAuthor;                      CheckDumpHTML.Checked = parsed.DumpHTML;                      BoxDumpHTMLPath.Text = parsed.DumpHTMLPath;                      CheckAddCommitAsComment.Checked = parsed.AddCommitAsComment;                      CheckFilterOutClosedIssues.Checked = parsed.FilterOutClosedIssues;                      CheckBEXMLCache.Checked = parsed.CacheBEXML;                      switch(parsed.ShowCommentCount)                      {                          case ShowCommentCountType.DontShow:                              CheckShowCommentCount.CheckState = CheckState.Unchecked;                              break;                          case ShowCommentCountType.ShowEasy:                              CheckShowCommentCount.CheckState = CheckState.Indeterminate;                              break;                          case ShowCommentCountType.ShowAll:                              CheckShowCommentCount.CheckState = CheckState.Checked;                              break;                      }                      CheckUseBEXML.Checked = parsed.UseBEXML;                  }                  else                  {                      this.Text = "About BEurtle";                      OptionsGroupBox.Enabled = false;                      ButtonReset.Visible = false;                      ButtonCancel.Visible = false;                  }              }              finally              {                  initialising = false;              }
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,OptionsDialog_Shown,The following statement contains a magic number: try              {                  initialising = true;                  DefaultAuthorChanged = false;                  BoxDefaultAuthor.Text = "";                  BoxDefaultAuthor.ForeColor = Color.FromArgb(0' 0' 0);                  DumpHTMLPathChanged = false;                  BoxDumpHTMLPath.Text = "";                  BoxDumpHTMLPath.ForeColor = Color.FromArgb(0' 0' 0);                  if (parameters != null)                  {                      ParseParameters parsed = new ParseParameters(plugin' this' parameters' false);                      if (parsed.DefaultAuthor.Length > 0)                          DefaultAuthorChanged = true;                      else                          BoxDefaultAuthor.ForeColor = Color.FromArgb(192' 192' 192);                      if (parsed.DumpHTMLPath.Length > 0)                          DumpHTMLPathChanged = true;                      else                          BoxDumpHTMLPath.ForeColor = Color.FromArgb(192' 192' 192);                      parsed.FillInDefaults(this);                        BEPath = parsed.BEPath;                      BoxDefaultAuthor.Text = parsed.DefaultAuthor;                      CheckDumpHTML.Checked = parsed.DumpHTML;                      BoxDumpHTMLPath.Text = parsed.DumpHTMLPath;                      CheckAddCommitAsComment.Checked = parsed.AddCommitAsComment;                      CheckFilterOutClosedIssues.Checked = parsed.FilterOutClosedIssues;                      CheckBEXMLCache.Checked = parsed.CacheBEXML;                      switch(parsed.ShowCommentCount)                      {                          case ShowCommentCountType.DontShow:                              CheckShowCommentCount.CheckState = CheckState.Unchecked;                              break;                          case ShowCommentCountType.ShowEasy:                              CheckShowCommentCount.CheckState = CheckState.Indeterminate;                              break;                          case ShowCommentCountType.ShowAll:                              CheckShowCommentCount.CheckState = CheckState.Checked;                              break;                      }                      CheckUseBEXML.Checked = parsed.UseBEXML;                  }                  else                  {                      this.Text = "About BEurtle";                      OptionsGroupBox.Enabled = false;                      ButtonReset.Visible = false;                      ButtonCancel.Visible = false;                  }              }              finally              {                  initialising = false;              }
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(201' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(201' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(231' 94);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(231' 94);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.Link_nedproductions.Location = new System.Drawing.Point(201' 116);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.Link_nedproductions.Location = new System.Drawing.Point(201' 116);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.Link_nedproductions.Size = new System.Drawing.Size(231' 29);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.Link_nedproductions.Size = new System.Drawing.Size(231' 29);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(7' 23);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(7' 23);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(78' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(78' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.OptionsGroupBox.Location = new System.Drawing.Point(13' 148);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.OptionsGroupBox.Location = new System.Drawing.Point(13' 148);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.OptionsGroupBox.Size = new System.Drawing.Size(419' 164);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.OptionsGroupBox.Size = new System.Drawing.Size(419' 164);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.OptionsGroupBox.TabIndex = 3;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(6' 45);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(6' 45);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(407' 113);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(407' 113);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 201;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 13;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckFilterOutClosedIssues.Location = new System.Drawing.Point(3' 93);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckFilterOutClosedIssues.Location = new System.Drawing.Point(3' 93);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckFilterOutClosedIssues.Size = new System.Drawing.Size(192' 17);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckFilterOutClosedIssues.Size = new System.Drawing.Size(192' 17);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckFilterOutClosedIssues.TabIndex = 5;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckDumpHTML.Location = new System.Drawing.Point(3' 3);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckDumpHTML.Location = new System.Drawing.Point(3' 3);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckDumpHTML.Size = new System.Drawing.Size(190' 17);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckDumpHTML.Size = new System.Drawing.Size(190' 17);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckDumpHTML.TabIndex = 2;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckAddCommitAsComment.Location = new System.Drawing.Point(3' 52);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckAddCommitAsComment.Location = new System.Drawing.Point(3' 52);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckAddCommitAsComment.Size = new System.Drawing.Size(195' 35);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckAddCommitAsComment.Size = new System.Drawing.Size(195' 35);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckAddCommitAsComment.TabIndex = 4;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.BoxDumpHTMLPath.Location = new System.Drawing.Point(3' 26);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.BoxDumpHTMLPath.Location = new System.Drawing.Point(3' 26);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.BoxDumpHTMLPath.Size = new System.Drawing.Size(195' 20);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.BoxDumpHTMLPath.Size = new System.Drawing.Size(195' 20);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.BoxDumpHTMLPath.TabIndex = 3;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckShowCommentCount.Location = new System.Drawing.Point(3' 39);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckShowCommentCount.Location = new System.Drawing.Point(3' 39);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckShowCommentCount.Size = new System.Drawing.Size(131' 17);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckShowCommentCount.Size = new System.Drawing.Size(131' 17);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckShowCommentCount.TabIndex = 7;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckBEXMLCache.Location = new System.Drawing.Point(3' 3);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckBEXMLCache.Location = new System.Drawing.Point(3' 3);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckBEXMLCache.Size = new System.Drawing.Size(196' 30);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckBEXMLCache.Size = new System.Drawing.Size(196' 30);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckBEXMLCache.TabIndex = 6;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckUseBEXML.Location = new System.Drawing.Point(3' 62);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckUseBEXML.Location = new System.Drawing.Point(3' 62);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckUseBEXML.Size = new System.Drawing.Size(196' 43);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckUseBEXML.Size = new System.Drawing.Size(196' 43);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.CheckUseBEXML.TabIndex = 8;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.BoxDefaultAuthor.Location = new System.Drawing.Point(91' 19);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.BoxDefaultAuthor.Location = new System.Drawing.Point(91' 19);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.BoxDefaultAuthor.Size = new System.Drawing.Size(322' 20);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.BoxDefaultAuthor.Size = new System.Drawing.Size(322' 20);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(13' 315);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(13' 315);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(73' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(73' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 4;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkGithubIssues.Location = new System.Drawing.Point(95' 315);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkGithubIssues.Location = new System.Drawing.Point(95' 315);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkGithubIssues.Size = new System.Drawing.Size(159' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkGithubIssues.Size = new System.Drawing.Size(159' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkGithubIssues.TabIndex = 9;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(13' 332);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(13' 332);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(62' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(62' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 6;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkHomepage.Location = new System.Drawing.Point(95' 332);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkHomepage.Location = new System.Drawing.Point(95' 332);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkHomepage.Size = new System.Drawing.Size(255' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkHomepage.Size = new System.Drawing.Size(255' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkHomepage.TabIndex = 10;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(13' 353);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(13' 353);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(281' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(281' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 8;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.Location = new System.Drawing.Point(357' 527);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.Location = new System.Drawing.Point(357' 527);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOk.TabIndex = 14;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Location = new System.Drawing.Point(276' 527);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Location = new System.Drawing.Point(276' 527);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonCancel.TabIndex = 13;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonReset.Location = new System.Drawing.Point(195' 527);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonReset.Location = new System.Drawing.Point(195' 527);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonReset.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonReset.Size = new System.Drawing.Size(75' 23);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonReset.TabIndex = 12;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkDonate.Location = new System.Drawing.Point(12' 366);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkDonate.Location = new System.Drawing.Point(12' 366);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkDonate.Size = new System.Drawing.Size(420' 158);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkDonate.Size = new System.Drawing.Size(420' 158);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.LinkDonate.TabIndex = 11;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(13' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(13' 13);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(182' 132);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(182' 132);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.TabIndex = 12;
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(444' 561);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(444' 561);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(32768' 600);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(32768' 600);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(460' 600);
Magic Number,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(460' 600);
Magic Number,nedprod,MD5Sum,C:\repos\ned14_BEurtle\BEurtle\WindowSettings.cs,MD5Sum,The following statement contains a magic number: for (var i = 0; i < sum.Length; i++)                      sum[i] = byte.Parse(s.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,nedprod,MD5Sum,C:\repos\ned14_BEurtle\BEurtle\WindowSettings.cs,MD5Sum,The following statement contains a magic number: for (var i = 0; i < sum.Length; i++)                      sum[i] = byte.Parse(s.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);
Missing Default,BEurtle,ParseParameters,C:\repos\ned14_BEurtle\BEurtle\BEurtlePlugin.cs,ParseParameters,The following switch statement is missing a default case: switch (par.Substring(17))                      {                          case "DontShow":                              ShowCommentCount = ShowCommentCountType.DontShow;                              break;                          case "ShowEasy":                              ShowCommentCount = ShowCommentCountType.ShowEasy;                              break;                          case "ShowAll":                              ShowCommentCount = ShowCommentCountType.ShowAll;                              break;                      }
Missing Default,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,CommentContextMenu_ItemClicked,The following switch statement is missing a default case: switch (e.ClickedItem.Name)              {                  case "CommentBodyUndo":                      {                          CommentBody.Document.ExecCommand("Undo"' false' null);                          CommentBody.Focus();                          CommentBody.Document.ActiveElement.Focus();                          break;                      }                  case "CommentBodyCut":                      {                          CommentBody.Document.ExecCommand("Cut"' false' null);                          CommentBody.Focus();                          CommentBody.Document.ActiveElement.Focus();                          break;                      }                  case "CommentBodyCopy":                      {                          CommentBody.Document.ExecCommand("Copy"' false' null);                          CommentBody.Focus();                          CommentBody.Document.ActiveElement.Focus();                          break;                      }                  case "CommentBodyPaste":                      {                          CommentBody.Document.ExecCommand("Paste"' false' null);                          CommentBody.Focus();                          CommentBody.Document.ActiveElement.Focus();                          break;                      }                  case "CommentBodyDelete":                      {                          CommentBody.Document.ExecCommand("Delete"' false' null);                          CommentBody.Focus();                          CommentBody.Document.ActiveElement.Focus();                          break;                      }                  case "CommentBodySelectAll":                      {                          CommentBody.Document.ExecCommand("SelectAll"' false' null);                          CommentBody.Focus();                          CommentBody.Document.ActiveElement.Focus();                          break;                      }              }
Missing Default,BEurtle,IssueDetail,C:\repos\ned14_BEurtle\BEurtle\IssueDetail.cs,CommentBody_PreviewKeyDown,The following switch statement is missing a default case: switch (e.KeyCode)                  {                      case Keys.Z:                          if (!CommentEdit.Visible) CommentBodyUndo.PerformClick();                          else SystemSounds.Asterisk.Play();                          break;                      case Keys.X:                          if (!CommentEdit.Visible) CommentBodyCut.PerformClick();                          else SystemSounds.Asterisk.Play();                          break;                      case Keys.C:                          CommentBodyCopy.PerformClick();                          break;                      case Keys.V:                          if (!CommentEdit.Visible) CommentBodyPaste.PerformClick();                          else SystemSounds.Asterisk.Play();                          break;                      case Keys.A:                          CommentBodySelectAll.PerformClick();                          break;                  }
Missing Default,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,OptionsDialog_Shown,The following switch statement is missing a default case: switch(parsed.ShowCommentCount)                      {                          case ShowCommentCountType.DontShow:                              CheckShowCommentCount.CheckState = CheckState.Unchecked;                              break;                          case ShowCommentCountType.ShowEasy:                              CheckShowCommentCount.CheckState = CheckState.Indeterminate;                              break;                          case ShowCommentCountType.ShowAll:                              CheckShowCommentCount.CheckState = CheckState.Checked;                              break;                      }
Missing Default,BEurtle,OptionsDialog,C:\repos\ned14_BEurtle\BEurtle\OptionsDialog.cs,OptionsDialog_FormClosing,The following switch statement is missing a default case: switch (CheckShowCommentCount.CheckState)              {                  case CheckState.Unchecked:                      parameters += "&ShowCommentCount=DontShow";                      break;                  case CheckState.Indeterminate:                      parameters += "&ShowCommentCount=ShowEasy";                      break;                  case CheckState.Checked:                      parameters += "&ShowCommentCount=ShowAll";                      break;              }
