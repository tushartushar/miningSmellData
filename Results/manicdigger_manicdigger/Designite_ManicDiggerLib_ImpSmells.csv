Implementation smell,Namespace,Class,File,Method,Description
Long Method,ManicDigger.Server,InventoryServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,InventoryClick,The method has 119 lines of code.
Long Method,ManicDigger.Server,ServerSystemLoadConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\LoadConfig.cs,SaveConfig,The method has 124 lines of code.
Long Method,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,CompileScripts,The method has 116 lines of code.
Long Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The method has 655 lines of code.
Long Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,DoCommandBuild,The method has 118 lines of code.
Long Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The method has 578 lines of code.
Long Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,List,The method has 109 lines of code.
Long Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetSpawnPosition,The method has 155 lines of code.
Long Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetFillAreaLimit,The method has 123 lines of code.
Long Method,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The method has 182 lines of code.
Long Method,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The method has 167 lines of code.
Long Method,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The method has 1178 lines of code.
Long Method,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The method has 160 lines of code.
Long Method,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The method has 158 lines of code.
Long Method,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The method has 103 lines of code.
Long Method,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The method has 1182 lines of code.
Long Method,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The method has 162 lines of code.
Long Method,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The method has 174 lines of code.
Long Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The method has 114 lines of code.
Long Method,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The method has 147 lines of code.
Complex Method,ManicDigger.Common,LanguageNative,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\LanguageNative.cs,Override,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Common,LanguageNative,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\LanguageNative.cs,Get,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,GetFileStream,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\GetFile.cs,GetFile,Cyclomatic complexity of the method is 11
Complex Method,ManicDigger.Server,InventoryUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,ItemsAtArea,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Server,InventoryUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,GrabItem,Cyclomatic complexity of the method is 17
Complex Method,ManicDigger.Server,InventoryServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,InventoryClick,Cyclomatic complexity of the method is 18
Complex Method,ManicDigger.Server,InventoryServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,MoveToInventory,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Server,GameDataItemsBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,CanWear,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,ServerSystemLoadConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\LoadConfig.cs,SaveConfig,Cyclomatic complexity of the method is 18
Complex Method,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,GetScriptSources,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,CompileScripts,Cyclomatic complexity of the method is 11
Complex Method,ManicDigger.Server,Turtle,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,DirectionToString,Cyclomatic complexity of the method is 11
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ProcessMain,Cyclomatic complexity of the method is 14
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,OnConfigLoaded,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ProcessNetMessage,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,KillPlayer,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,Cyclomatic complexity of the method is 86
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CheckBuildPrivileges,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,MessageTypeToString,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,DoCommandCraft,Cyclomatic complexity of the method is 12
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,DoCommandBuild,Cyclomatic complexity of the method is 16
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,Cyclomatic complexity of the method is 75
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandHelp,Cyclomatic complexity of the method is 43
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ChangeGroupOffline,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetLogging,Cyclomatic complexity of the method is 12
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,List,Cyclomatic complexity of the method is 24
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GiveAll,Cyclomatic complexity of the method is 12
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Give,Cyclomatic complexity of the method is 17
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,AreaAdd,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetSpawnPosition,Cyclomatic complexity of the method is 24
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetFillAreaLimit,Cyclomatic complexity of the method is 21
Complex Method,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TimeCommand,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Server,ServerBanlist,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerBanlist.cs,ClearTimeBans,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,Cyclomatic complexity of the method is 37
Complex Method,ManicDigger.Server,ServerSystemChunksSimulation,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ChunksSimulation.cs,ChunkSimulation,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,NotifyPlayerPositions,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,NotifyEntities,Cyclomatic complexity of the method is 13
Complex Method,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,Cyclomatic complexity of the method is 12
Complex Method,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,NearestDirty,Cyclomatic complexity of the method is 12
Complex Method,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnDialogClick,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnPermission,Cyclomatic complexity of the method is 15
Complex Method,ManicDigger.Server,ServerMonitor,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerMonitor.cs,CheckPacket,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Server,ServerSystemUnloadUnusedChunks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\UnloadUnusedChunks.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,Cyclomatic complexity of the method is 31
Complex Method,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,OnUse,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,Cyclomatic complexity of the method is 19
Complex Method,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCuboid,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Mods,PermissionBlock,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Unused\PermissionBlock.cs,OnBuild,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Mods,Revert,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Revert.cs,OnCommand,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,Cyclomatic complexity of the method is 13
Complex Method,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Mods,BlockId,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Unused\BlockId.cs,OnLoad,Cyclomatic complexity of the method is 15
Complex Method,ManicDigger.Mods,BlockId,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Unused\BlockId.cs,ReassignBlockIds,Cyclomatic complexity of the method is 11
Complex Method,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetChunk,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetBlock,Cyclomatic complexity of the method is 11
Complex Method,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,DialogClickSelectTeam,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,DialogClickSelectSubclass,Cyclomatic complexity of the method is 11
Complex Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ResetInventoryOnRespawn,Cyclomatic complexity of the method is 13
Complex Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,Cyclomatic complexity of the method is 15
Complex Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Hit,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdatePlayerModel,Cyclomatic complexity of the method is 9
Complex Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdateRespawnTimer,Cyclomatic complexity of the method is 8
Complex Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdateMedicalKitAmmoPack,Cyclomatic complexity of the method is 11
Complex Method,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnChat,Cyclomatic complexity of the method is 10
Complex Method,ManicDigger.Mods.War,WaterSimple,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WaterSimple.cs,BlockChange,Cyclomatic complexity of the method is 11
Long Parameter List,ManicDigger.Server,InventoryUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,ItemsAtArea,The method has 5 parameters. Parameters: pX' pY' sizeX' sizeY' retCount
Long Parameter List,ManicDigger.Server,ChunkDb,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ChunkDb.cs,SetChunk,The method has 5 parameters. Parameters: db' x' y' z' c
Long Parameter List,ManicDigger.Server,ChunkDb,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ChunkDb.cs,GetChunkFromFile,The method has 5 parameters. Parameters: db' x' y' z' filename
Long Parameter List,ManicDigger.Server,ScriptConsole,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,DeleteChunkRange,The method has 6 parameters. Parameters: x1' y1' z1' x2' y2' z2
Long Parameter List,ManicDigger.Server,ScriptConsole,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,GetChunksFromDatabase,The method has 7 parameters. Parameters: x1' y1' z1' x2' y2' z2' file
Long Parameter List,ManicDigger.Server,ScriptConsole,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,CopyChunksToDatabase,The method has 7 parameters. Parameters: x1' y1' z1' x2' y2' z2' file
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CheckBuildPrivileges,The method has 5 parameters. Parameters: player' x' y' z' mode
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SendProjectile,The method has 9 parameters. Parameters: player' fromx' fromy' fromz' velocityx' velocityy' velocityz' block' explodesafter
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SendBullet,The method has 8 parameters. Parameters: player' fromx' fromy' fromz' tox' toy' toz' speed
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ClientSeenChunkSet,The method has 5 parameters. Parameters: clientid' vx' vy' vz' time
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SendFillArea,The method has 5 parameters. Parameters: clientid' a' b' blockType' blockCount
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SendSetBlock,The method has 5 parameters. Parameters: clientid' x' y' z' blocktype
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SendSound,The method has 5 parameters. Parameters: clientid' name' x' y' z
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The method has 5 parameters. Parameters: posx' posy' posz' sound' player
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAt,The method has 5 parameters. Parameters: posx' posy' posz' sound' range
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The method has 6 parameters. Parameters: posx' posy' posz' sound' player' range
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SendExplosion,The method has 7 parameters. Parameters: player' x' y' z' relativeposition' range' time
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,AreaAdd,The method has 6 parameters. Parameters: sourceClientId' id' coords' permittedGroups' permittedUsers' level
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetSpawnPosition,The method has 6 parameters. Parameters: sourceClientId' targetType' target' x' y' z
Long Parameter List,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TeleportPlayer,The method has 5 parameters. Parameters: sourceClientId' target' x' y' z
Long Parameter List,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Index3d,The method has 5 parameters. Parameters: x' y' h' sizex' sizey
Long Parameter List,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,IsValidChunkPos,The method has 5 parameters. Parameters: map' cx' cy' cz' chunksize
Long Parameter List,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SearchColumn,The method has 5 parameters. Parameters: map' x' y' id' startH
Long Parameter List,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBan,The method has 5 parameters. Parameters: server' sourceClientId' target' reason' duration
Long Parameter List,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBan,The method has 5 parameters. Parameters: server' sourceClientId' targetClientId' reason' duration
Long Parameter List,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBanIP,The method has 5 parameters. Parameters: server' sourceClientId' target' reason' duration
Long Parameter List,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBanIP,The method has 5 parameters. Parameters: server' sourceClientId' targetClientId' reason' duration
Long Parameter List,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,NearestDirty,The method has 6 parameters. Parameters: server' clientid' playerx' playery' playerz' retNearest
Long Parameter List,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,LoadAndSendChunk,The method has 6 parameters. Parameters: server' clientid' vx' vy' vz' s
Long Parameter List,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseWithTool,The method has 5 parameters. Parameters: player' x' y' z' tool
Long Parameter List,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,InArea,The method has 9 parameters. Parameters: x' y' z' areaX' areaY' areaZ' areaSizeX' areaSizeY' areaSizeZ
Long Parameter List,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,AddCraftingRecipe2,The method has 6 parameters. Parameters: output' outputAmount' Input0' Input0Amount' Input1' Input1Amount
Long Parameter List,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,AddCraftingRecipe3,The method has 8 parameters. Parameters: output' outputAmount' Input0' Input0Amount' Input1' Input1Amount' Input2' Input2Amount
Long Parameter List,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,PlaySoundAt,The method has 5 parameters. Parameters: x' y' z' sound' range
Long Parameter List,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,Index3d,The method has 5 parameters. Parameters: x' y' h' sizex' sizey
Long Parameter List,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,AddPermissionArea,The method has 7 parameters. Parameters: x1' y1' z1' x2' y2' z2' permissionLevel
Long Parameter List,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,RemovePermissionArea,The method has 6 parameters. Parameters: x1' y1' z1' x2' y2' z2
Long Parameter List,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,SendExplosion,The method has 7 parameters. Parameters: player' x' y' z' relativeposition' range' time
Long Parameter List,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnUseWithTool,The method has 5 parameters. Parameters: player' x' y' z' tool
Long Parameter List,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnDelete,The method has 5 parameters. Parameters: player' x' y' z' oldblock
Long Parameter List,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,OnDelete,The method has 5 parameters. Parameters: player' x' y' z' block
Long Parameter List,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The method has 12 parameters. Parameters: x' y' z' chunksize' rnd' enableCaves' gravelLength' goldOreLength' ironOreLength' coalOreLength' dirtOreLength' silverOreLength
Long Parameter List,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCuboid,The method has 10 parameters. Parameters: x' y' z' sizex' sizey' sizez' blocktype' allowin' chance' rnd
Long Parameter List,ManicDigger.Mods,PermissionBlock,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Unused\PermissionBlock.cs,OnDelete,The method has 5 parameters. Parameters: playerid' x' y' z' oldblock
Long Parameter List,ManicDigger.Mods,SandPhysics,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\SandPhysics.cs,Delete,The method has 5 parameters. Parameters: player' x' y' z' blockid
Long Parameter List,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeSmallTrees,The method has 6 parameters. Parameters: cx' cy' cz' chunksize' rnd' count
Long Parameter List,ManicDigger.Mods,VandalFinder,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VandalFinder.cs,OnUseWithTool,The method has 5 parameters. Parameters: player' x' y' z' tool
Long Parameter List,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The method has 5 parameters. Parameters: x' y' z' trunkID' leavesID
Long Parameter List,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The method has 6 parameters. Parameters: cx' cy' cz' id_trunk' id_leaves' isAppleTree
Long Parameter List,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetBlock,The method has 5 parameters. Parameters: x' y' z' height' special
Long Parameter List,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeSmallTrees,The method has 6 parameters. Parameters: cx' cy' cz' chunksize' rnd' count
Long Parameter List,ManicDigger.Mods.War,WaterSimple,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WaterSimple.cs,BlockDelete,The method has 5 parameters. Parameters: player' x' y' z' oldblock
Long Identifier,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,,The length of the parameter SpawnPositionRandomizationRange is 31.
Long Identifier,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,,The length of the parameter SEND_MONSTER_UDAPTES_PER_SECOND is 31.
Long Identifier,ManicDigger.Server,GameTime,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,,The length of the parameter _nIngameSecondsEveryRealTimeSecond is 34.
Long Identifier,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,,The length of the parameter PlayerPositionUpdatesPerSecond is 30.
Long Identifier,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,,The length of the parameter EntityPositionUpdatesPerSecond is 30.
Long Statement,ManicDigger.Common,CrashReporter,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\CrashReporter.cs,DisplayInGui,The length of the statement  "				//Just swallow this exception' to prevent a exception endless loop (UnhandledException -> CrashReport -> UnhandledException) " is 124.
Long Statement,ManicDigger.Server,ServerSystemLoadConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\LoadConfig.cs,LoadConfig,The length of the statement  "						server.config.ClientConnectionTimeout = int.Parse(XmlTool.XmlVal(d' "/ManicDiggerServerConfig/ClientConnectionTimeout")); " is 121.
Long Statement,ManicDigger.Server,ServerSystemLoadConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\LoadConfig.cs,LoadConfig,The length of the statement  "						File.Copy(Path.Combine(GameStorePath.gamepathconfig' filename)' Path.Combine(GameStorePath.gamepathconfig' filename + ".old")); " is 127.
Long Statement,ManicDigger.Server,ServerSystemLoadServerClient,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\LoadServerClient.cs,LoadServerClient,The length of the statement  "				server.defaultPlayerSpawn = server.DontSpawnPlayerInWater(new Vector3i(x' y' MapUtil.blockheight(server.d_Map' 0' x' y))); " is 122.
Long Statement,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,RestartMods,The length of the statement  "                server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandInsufficientPrivileges")' server.colorError)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,RestartMods,The length of the statement  "            server.SendMessageToAll(string.Format(server.language.Get("Server_CommandRestartModsSuccess")' server.colorImportant' server.GetClient(sourceClientId).ColoredPlayername(server.colorImportant))); " is 194.
Long Statement,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,GetScriptSources,The length of the statement  "            string[] modpaths = new[] { Path.Combine(Path.Combine(Path.Combine(Path.Combine(Path.Combine(".."' "..")' "..")' "ManicDiggerLib")' "Server")' "Mods")' "Mods" }; " is 161.
Long Statement,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,CompileScripts,The length of the statement  "            DirectoryInfo dirTemp = new DirectoryInfo(Path.Combine(new FileInfo(GetType().Assembly.Location).DirectoryName' "ModDebugInfos")); " is 130.
Long Statement,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,CompileScripts,The length of the statement  "            parms.OutputAssembly = Path.Combine(new DirectoryInfo(new FileInfo(GetType().Assembly.Location).DirectoryName).FullName '"Mods.dll"); " is 133.
Long Statement,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,StartMod,The length of the statement  "                            System.Windows.Forms.MessageBox.Show(string.Format("Can't load mod {0} because its dependency {1} couldn't be loaded."' name' required_name)); " is 142.
Long Statement,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,StartMod,The length of the statement  "                            Console.WriteLine(string.Format("[Mod error] Can't load mod {0} because its dependency {1} couldn't be loaded."' name' required_name)); " is 135.
Long Statement,ManicDigger.Server,ScriptConsole,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,InjectConsoleCommands,The length of the statement  "			interpreter.SetFunction("set_chunks_offset"' new ManicDigger.Action<double' double' double' Dictionary<Xyz' ushort[]>>(SetChunks)); " is 131.
Long Statement,ManicDigger.Server,ScriptConsole,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,InjectConsoleCommands,The length of the statement  "			interpreter.SetFunction("get_chunks_from_database"' new ManicDigger.Func<double' double' double' double' double' double' string' Dictionary<Xyz' ushort[]>>(GetChunksFromDatabase)); " is 180.
Long Statement,ManicDigger.Server,ScriptConsole,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,InjectConsoleCommands,The length of the statement  "			interpreter.SetFunction("copy_chunks_to_database"' new ManicDigger.Action<double' double' double' double' double' double' string>(CopyChunksToDatabase)); " is 153.
Long Statement,ManicDigger.Server,ScriptConsole,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,InjectConsoleCommands,The length of the statement  "			interpreter.SetFunction("delete_chunk_range"' new ManicDigger.Action<double' double' double' double' double' double>(DeleteChunkRange)); " is 136.
Long Statement,ManicDigger.Server,ScriptConsole,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,SetBlock,The length of the statement  "			//m_server.CreateBlock((int)x' (int)y' (int)z' m_client' new Item() { BlockId = (int)material' ItemClass = ItemClass.Block' BlockCount = 1 }); " is 142.
Long Statement,ManicDigger.Server,JavaScriptInterpreter,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptInterpreter.cs,Execute,The length of the statement  "				Console.WriteLine("Script failed with error:\n*********************************************\n\t" + e.InnerException.Message + "\n*********************************************" + e.StackTrace); " is 192.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ProcessMain,The length of the statement  "//                SendMessageToAll("Time of day: " + _time.Time.ToString(@"hh\:mm\:ss") + " Day: " + (int)_time.Time.Days); " is 123.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,LoadGame,The length of the statement  "        if (config.IsCreative) this.Inventory = Inventory = new Dictionary<string' PacketServerInventory>(StringComparer.InvariantCultureIgnoreCase); " is 141.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,NotifyPlayerStats,The length of the statement  "            SendPacket(clientid' ServerPackets.PlayerStats(stats.CurrentHealth' stats.MaxHealth' stats.CurrentOxygen' stats.MaxOxygen)); " is 124.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                        ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username)); " is 130.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                            BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z))); " is 146.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                        string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1); " is 139.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                    //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer); " is 142.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds " is 131.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid); " is 239.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                    SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)' " is 131.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                    Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)); " is 140.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                    Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)); " is 132.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                    SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)' " is 135.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                    pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) }; " is 139.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                    pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) }; " is 131.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                    Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32); " is 146.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]); " is 122.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The length of the statement  "                        Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid); " is 123.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetPlayerSpawnPositionMul32,The length of the statement  "            position = new Vector3i(this.defaultPlayerSpawn.x * 32' this.defaultPlayerSpawn.z * 32' this.defaultPlayerSpawn.y * 32); " is 120.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SendBlockTypes,The length of the statement  "            Packet_ServerBlockType p1 = new Packet_ServerBlockType() { Id = i' Blocktype = BlockTypeConverter.GetBlockType(BlockTypes[i]) }; " is 128.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SendServerIdentification,The length of the statement  "        SendPacket(clientid' Serialize(new Packet_Server() { Id = Packet_ServerIdEnum.ServerIdentification' Identification = p })); " is 123.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The length of the statement  "            int distance = DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' pos); " is 158.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The length of the statement  "            int distance = DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' pos); " is 158.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetEntityDirty,The length of the statement  "        ServerChunk chunk = d_Map.GetChunk(id.chunkx * Server.chunksize' id.chunky * Server.chunksize' id.chunkz * Server.chunksize); " is 125.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,DespawnEntity,The length of the statement  "        ServerChunk chunk = d_Map.GetChunk(id.chunkx * Server.chunksize' id.chunky * Server.chunksize' id.chunkz * Server.chunksize); " is 125.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The length of the statement  "					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero)); " is 131.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The length of the statement  "					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero)); " is 149.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Help,The length of the statement  "				SendMessage(sourceClientId' string.Format("{0}{1}: {2}"' colorHelp' privilege.ToString()' this.CommandHelp(privilege.ToString()))); " is 131.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,AnswerMessage,The length of the statement  "			SendMessage(sourceClientId' string.Format(language.Get("Server_CommandPlayerNotFound")' colorError' lastSender[sourceClient.playername])); " is 138.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ChangeGroup,The length of the statement  "				if (targetClient.clientGroup.IsSuperior(GetClient(sourceClientId).clientGroup) || targetClient.clientGroup.EqualLevel(GetClient(sourceClientId).clientGroup)) " is 157.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ChangeGroup,The length of the statement  "				SendMessageToAll(string.Format(language.Get("Server_CommandSetGroupTo")' colorSuccess' GetClient(sourceClientId).ColoredPlayername(colorSuccess)' targetClient.ColoredPlayername(colorSuccess)' newGroup.GroupColorString() + newGroup.Name + colorSuccess)); " is 253.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ChangeGroup,The length of the statement  "				ServerEventLog(String.Format("{0} sets group of {1} to {2}."' GetClient(sourceClientId).playername' targetClient.playername' newGroup.Name)); " is 141.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ChangeGroupOffline,The length of the statement  "				if (oldGroup.IsSuperior(GetClient(sourceClientId).clientGroup) || oldGroup.EqualLevel(GetClient(sourceClientId).clientGroup)) " is 125.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ChangeGroupOffline,The length of the statement  "			SendMessageToAll(string.Format(language.Get("Server_CommandSetOfflineGroupTo")' colorSuccess' GetClient(sourceClientId).ColoredPlayername(colorSuccess)' oldGroupColor + target + colorSuccess' newGroup.GroupColorString() + newGroup.Name + colorSuccess)); " is 253.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ChangeGroupOffline,The length of the statement  "			ServerEventLog(String.Format("{0} sets group of {1} to {2} (offline)."' GetClient(sourceClientId).playername' target' newGroup.Name)); " is 134.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,RemoveClientFromConfig,The length of the statement  "				if (targetGroup.IsSuperior(GetClient(sourceClientId).clientGroup) || targetGroup.EqualLevel(GetClient(sourceClientId).clientGroup)) " is 131.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,RemoveClientFromConfig,The length of the statement  "					SendMessageToAll(string.Format(language.Get("Server_CommandSetGroupTo")' colorSuccess' GetClient(sourceClientId).ColoredPlayername(colorSuccess)' GetClient(target).ColoredPlayername(colorSuccess)' this.defaultGroupGuest.GroupColorString() + defaultGroupGuest.Name)); " is 266.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Login,The length of the statement  "				SendMessageToAll(string.Format(language.Get("Server_CommandLoginSuccess")' colorSuccess' GetClient(sourceClientId).ColoredPlayername(colorSuccess)' targetGroupString)); " is 168.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Login,The length of the statement  "			ServerEventLog(string.Format("{0} fails to log in (invalid password: {1})."' GetClient(sourceClientId).playername' password)); " is 126.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,WelcomeMessage,The length of the statement  "			SendMessageToAll(string.Format(language.Get("Server_CommandWelcomeChanged")' colorSuccess' GetClient(sourceClientId).ColoredPlayername(colorSuccess)' welcomeMessage)); " is 167.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,WelcomeMessage,The length of the statement  "			ServerEventLog(string.Format("{0} changes welcome message to {1}."' GetClient(sourceClientId).playername' welcomeMessage)); " is 123.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Kick,The length of the statement  "				if (targetClient.clientGroup.IsSuperior(GetClient(sourceClientId).clientGroup) || targetClient.clientGroup.EqualLevel(GetClient(sourceClientId).clientGroup)) " is 157.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Kick,The length of the statement  "				SendMessageToAll(string.Format(language.Get("Server_CommandKickMessage")' colorImportant' targetNameColored' sourceNameColored' reason)); " is 137.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Kick,The length of the statement  "				SendPacket(targetClientId' ServerPackets.DisconnectPlayer(string.Format(language.Get("Server_CommandKickNotification")' reason))); " is 130.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,List,The length of the statement  "						SendMessage(sourceClientId' string.Format("[{0}] {1} {2}"' k.Key' k.Value.ColoredPlayername(colorNormal)' (k.Value.socket.RemoteEndPoint()).AddressToString())); " is 160.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Give,The length of the statement  "				SendMessage(sourceClientId' string.Format(language.Get("Server_CommandGiveSuccess")' colorSuccess' amount' blockname' targetName)); " is 131.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ResetInventory,The length of the statement  "				SendMessageToAll(string.Format(language.Get("Server_CommandResetInventorySuccess")' colorImportant' GetClient(sourceClientId).ColoredPlayername(colorImportant)' targetClient.ColoredPlayername(colorImportant))); " is 210.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ResetInventory,The length of the statement  "				ServerEventLog(string.Format("{0} resets inventory of {1}."' GetClient(sourceClientId).playername' targetClient.playername)); " is 125.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ResetInventory,The length of the statement  "				SendMessageToAll(string.Format(language.Get("Server_CommandResetInventoryOfflineSuccess")' colorImportant' GetClient(sourceClientId).ColoredPlayername(colorImportant)' target)); " is 177.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Monsters,The length of the statement  "			SendMessageToAll(string.Format(language.Get("Server_CommandMonstersToggle")' GetClient(sourceClientId).ColoredPlayername(colorSuccess)' option)); " is 145.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,AreaAdd,The length of the statement  "			SendMessage(sourceClientId' string.Format(language.Get("Server_CommandAreaAddSuccess")' colorSuccess' newArea.ToString())); " is 123.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetSpawnPosition,The length of the statement  "					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandSetSpawnDefaultSuccess")' colorSuccess' x' y' rZ)); " is 121.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetSpawnPosition,The length of the statement  "					ServerEventLog(String.Format("{0} sets default spawn to {1}'{2}{3}."' GetClient(sourceClientId).playername' x' y' z == null ? "" : "'" + z.Value)); " is 147.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetSpawnPosition,The length of the statement  "					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandSetSpawnGroupSuccess")' colorSuccess' targetGroup.Name' x' y' rZ)); " is 137.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetSpawnPosition,The length of the statement  "					ServerEventLog(String.Format("{0} sets spawn of group {1} to {2}'{3}{4}."' GetClient(sourceClientId).playername' targetGroup.Name' x' y' z == null ? "" : "'" + z.Value)); " is 170.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetSpawnPosition,The length of the statement  "					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandSetSpawnPlayerSuccess")' colorSuccess' targetClientPlayername' x' y' rZ)); " is 144.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetSpawnPosition,The length of the statement  "					ServerEventLog(String.Format("{0} sets spawn of player {1} to {2}'{3}{4}."' GetClient(sourceClientId).playername' targetClientPlayername' x' y' z == null ? "" : "'" + z.Value)); " is 177.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PrivilegeAdd,The length of the statement  "					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandPrivilegeAddHasAlready")' colorError' target' privilege.ToString())); " is 139.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PrivilegeAdd,The length of the statement  "				SendMessageToAll(string.Format(language.Get("Server_CommandPrivilegeAddSuccess")' colorSuccess' targetClient.ColoredPlayername(colorSuccess)' privilege.ToString())); " is 165.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PrivilegeAdd,The length of the statement  "				ServerEventLog(string.Format("{0} gives {1} privilege {2}."' GetClient(sourceClientId).playername' targetClient.playername' privilege.ToString())); " is 147.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PrivilegeRemove,The length of the statement  "					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandPrivilegeRemoveNoPriv")' colorError' target' privilege.ToString())); " is 138.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PrivilegeRemove,The length of the statement  "				SendMessageToAll(string.Format(language.Get("Server_CommandPrivilegeRemoveSuccess")' colorImportant' targetClient.ColoredPlayername(colorImportant)' privilege.ToString())); " is 172.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PrivilegeRemove,The length of the statement  "				ServerEventLog(string.Format("{0} removes {1} privilege {2}."' GetClient(sourceClientId).playername' targetClient.playername' privilege.ToString())); " is 149.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,RestartServer,The length of the statement  "			string message = string.Format(language.Get("Server_CommandRestartSuccess")' colorImportant' GetClient(sourceClientId).ColoredPlayername(colorImportant)); " is 154.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ShutdownServer,The length of the statement  "			string message = string.Format(language.Get("Server_CommandShutdownSuccess")' colorImportant' GetClient(sourceClientId).ColoredPlayername(colorImportant)); " is 155.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TeleportPlayer,The length of the statement  "				SendMessage(targetClient.Id' string.Format(language.Get("Server_CommandTeleportTargetMessage")' colorImportant' x' y' rZ' GetClient(sourceClientId).ColoredPlayername(colorImportant))); " is 184.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TeleportPlayer,The length of the statement  "				SendMessage(sourceClientId' string.Format(language.Get("Server_CommandTeleportSourceMessage")' colorSuccess' targetClient.ColoredPlayername(colorSuccess)' x' y' rZ)); " is 166.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TeleportPlayer,The length of the statement  "				ServerEventLog(string.Format("{0} teleports {1} to {2} {3} {4}."' GetClient(sourceClientId).playername' targetClient.playername' x' y' rZ)); " is 140.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetFillAreaLimit,The length of the statement  "					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandFillLimitDefaultSuccess")' colorSuccess' maxFill)); " is 121.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetFillAreaLimit,The length of the statement  "					ServerEventLog(String.Format("{0} sets default fill area limit to {1}."' GetClient(sourceClientId).playername' maxFill)); " is 121.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetFillAreaLimit,The length of the statement  "					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandFillLimitGroupSuccess")' colorSuccess' targetGroup.Name' maxFill)); " is 137.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetFillAreaLimit,The length of the statement  "					ServerEventLog(String.Format("{0} sets spawn of group {1} to {2}."' GetClient(sourceClientId).playername' targetGroup.Name' maxFill)); " is 134.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetFillAreaLimit,The length of the statement  "					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandFillLimitPlayerSuccess")' colorSuccess' targetClientPlayername' maxFill)); " is 144.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetFillAreaLimit,The length of the statement  "					ServerEventLog(String.Format("{0} sets fill area limit of player {1} to {2}."' GetClient(sourceClientId).playername' targetClientPlayername' maxFill)); " is 151.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TimeCommand,The length of the statement  "								SendMessage(sourceClientId' colorError + language.Get("Server_CommandException") + " unable to convert \"" + strValue + "\" to a time"); " is 136.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TimeCommand,The length of the statement  "								SendMessage(sourceClientId' colorError + language.Get("Server_CommandException") + " unable to convert \"" + strValue + "\" to a time"); " is 136.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TimeCommand,The length of the statement  "								SendMessage(sourceClientId' colorError + language.Get("Server_CommandException") + " unable to convert \"" + strValue + "\" to a time"); " is 136.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TimeCommand,The length of the statement  "								SendMessage(sourceClientId' colorError + language.Get("Server_CommandException") + " unable to convert \"" + strValue + "\" to a number"); " is 138.
Long Statement,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TimeCommand,The length of the statement  "				SendMessage(sourceClientId' string.Format("Current time: Year {0}' Day {1}' {2}:{3}:{4}"' _time.Year' _time.Day' _time.Time.Hours' _time.Time.Minutes' _time.Time.Seconds)); " is 172.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Update,The length of the statement  "					server.SendPacket(clientId' ServerPackets.DisconnectPlayer(string.Format(server.language.ServerUsernameBanned()' reason))); " is 123.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Update,The length of the statement  "					Console.WriteLine(string.Format("{0} fails to join (banned username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username)); " is 135.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Update,The length of the statement  "					server.ServerEventLog(string.Format("{0} fails to join (banned username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username)); " is 139.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Ban,The length of the statement  "			server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandPlayerNotFound")' server.colorError' target)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Ban,The length of the statement  "				server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandInsufficientPrivileges")' server.colorError)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Ban,The length of the statement  "				if (targetClient.clientGroup.IsSuperior(server.GetClient(sourceClientId).clientGroup) || targetClient.clientGroup.EqualLevel(server.GetClient(sourceClientId).clientGroup)) " is 171.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Ban,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandTargetUserSuperior")' server.colorError)); " is 126.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Ban,The length of the statement  "				server.SendMessageToAll(string.Format(server.language.Get("Server_CommandBanMessage")' server.colorImportant' targetNameColored' sourceNameColored' reason)); " is 157.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Ban,The length of the statement  "				server.SendPacket(targetClientId' ServerPackets.DisconnectPlayer(string.Format(server.language.Get("Server_CommandBanNotification")' reason))); " is 143.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Ban,The length of the statement  "			server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandNonexistantID")' server.colorError' targetClientId)); " is 137.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanIP,The length of the statement  "			server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandPlayerNotFound")' server.colorError' target)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanIP,The length of the statement  "				server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandInsufficientPrivileges")' server.colorError)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanIP,The length of the statement  "				if (targetClient.clientGroup.IsSuperior(server.GetClient(sourceClientId).clientGroup) || targetClient.clientGroup.EqualLevel(server.GetClient(sourceClientId).clientGroup)) " is 171.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanIP,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandTargetUserSuperior")' server.colorError)); " is 126.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanIP,The length of the statement  "				server.SendMessageToAll(string.Format(server.language.Get("Server_CommandIPBanMessage")' server.colorImportant' targetNameColored' sourceNameColored' reason)); " is 159.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanIP,The length of the statement  "				server.SendPacket(targetClientId' ServerPackets.DisconnectPlayer(string.Format(server.language.Get("Server_CommandIPBanNotification")' reason))); " is 145.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanIP,The length of the statement  "			server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandNonexistantID")' server.colorError' targetClientId)); " is 137.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBan,The length of the statement  "			server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandPlayerNotFound")' server.colorError' target)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBan,The length of the statement  "				server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandInsufficientPrivileges")' server.colorError)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBan,The length of the statement  "				if (targetClient.clientGroup.IsSuperior(server.GetClient(sourceClientId).clientGroup) || targetClient.clientGroup.EqualLevel(server.GetClient(sourceClientId).clientGroup)) " is 171.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBan,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandTargetUserSuperior")' server.colorError)); " is 126.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBan,The length of the statement  "				server.SendMessageToAll(string.Format(server.language.Get("Server_CommandTimeBanMessage")' server.colorImportant' targetNameColored' sourceNameColored' duration' reason)); " is 171.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBan,The length of the statement  "				server.SendPacket(targetClientId' ServerPackets.DisconnectPlayer(string.Format(server.language.Get("Server_CommandTimeBanNotification")' duration' reason))); " is 157.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBan,The length of the statement  "			server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandNonexistantID")' server.colorError' targetClientId)); " is 137.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBanIP,The length of the statement  "			server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandPlayerNotFound")' server.colorError' target)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBanIP,The length of the statement  "				server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandInsufficientPrivileges")' server.colorError)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBanIP,The length of the statement  "				if (targetClient.clientGroup.IsSuperior(server.GetClient(sourceClientId).clientGroup) || targetClient.clientGroup.EqualLevel(server.GetClient(sourceClientId).clientGroup)) " is 171.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBanIP,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandTargetUserSuperior")' server.colorError)); " is 126.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBanIP,The length of the statement  "				server.SendMessageToAll(string.Format(server.language.Get("Server_CommandTimeIPBanMessage")' server.colorImportant' targetNameColored' sourceNameColored' duration' reason)); " is 173.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBanIP,The length of the statement  "				server.SendPacket(targetClientId' ServerPackets.DisconnectPlayer(string.Format(server.language.Get("Server_CommandTimeIPBanNotification")' duration' reason))); " is 159.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,TimeBanIP,The length of the statement  "			server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandNonexistantID")' server.colorError' targetClientId)); " is 137.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanOffline,The length of the statement  "				server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandInsufficientPrivileges")' server.colorError)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanOffline,The length of the statement  "				server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandBanOfflineTargetOnline")' server.colorError' target)); " is 138.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanOffline,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandInvalidGroup")' server.colorError)); " is 120.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanOffline,The length of the statement  "				if (targetGroup.IsSuperior(server.GetClient(sourceClientId).clientGroup) || targetGroup.EqualLevel(server.GetClient(sourceClientId).clientGroup)) " is 145.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanOffline,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandTargetUserSuperior")' server.colorError)); " is 126.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,BanOffline,The length of the statement  "			server.SendMessageToAll(string.Format(server.language.Get("Server_CommandBanOfflineMessage")' server.colorImportant' target' server.GetClient(sourceClientId).ColoredPlayername(server.colorImportant)' reason)); " is 209.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Unban,The length of the statement  "				server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandInsufficientPrivileges")' server.colorError)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Unban,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandPlayerNotFound")' server.colorError' target)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Unban,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandUnbanSuccess")' server.colorSuccess' target)); " is 130.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Unban,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandUnbanIPNotFound")' server.colorError' target)); " is 131.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,Unban,The length of the statement  "					server.SendMessage(sourceClientId' string.Format(server.language.Get("Server_CommandUnbanIPSuccess")' server.colorSuccess' target)); " is 132.
Long Statement,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,LoadBanlist,The length of the statement  "					File.Copy(Path.Combine(GameStorePath.gamepathconfig' filename)' Path.Combine(GameStorePath.gamepathconfig' filename + ".old")); " is 127.
Long Statement,ManicDigger.Server,ServerSystemChunksSimulation,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ChunksSimulation.cs,ChunkSimulation,The length of the statement  "					ServerChunk c = server.d_Map.GetChunkValid(oldestpos.x / Server.chunksize' oldestpos.y / Server.chunksize' oldestpos.z / Server.chunksize); " is 139.
Long Statement,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,NotifyPlayerPositions,The length of the statement  "					if (server.DistanceSquared(server.PlayerBlockPosition(server.clients[k.Key])' server.PlayerBlockPosition(server.clients[clientid])) > server.config.PlayerDrawDistance * server.config.PlayerDrawDistance) " is 202.
Long Statement,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,NotifyPlayerPositions,The length of the statement  "				Packet_PositionAndOrientation position = ToNetworkEntityPosition(server.serverPlatform' server.clients[k.Key].entity.position); " is 127.
Long Statement,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,NotifyEntities,The length of the statement  "					ServerChunk chunk = server.d_Map.GetChunk(e.chunkx * Server.chunksize' e.chunky * Server.chunksize' e.chunkz * Server.chunksize); " is 129.
Long Statement,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,NotifyEntities,The length of the statement  "					ServerChunk chunk = server.d_Map.GetChunk(e.chunkx * Server.chunksize' e.chunky * Server.chunksize' e.chunkz * Server.chunksize); " is 129.
Long Statement,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The length of the statement  "						ServerChunk chunk = server.d_Map.GetChunk(chunkx * Server.chunksize' chunky * Server.chunksize' chunkz * Server.chunksize); " is 123.
Long Statement,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The length of the statement  "				var entityA = server.d_Map.GetChunk(a.chunkx * Server.chunksize' a.chunky * Server.chunksize' a.chunkz * Server.chunksize).Entities[a.id]; " is 138.
Long Statement,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The length of the statement  "				var entityB = server.d_Map.GetChunk(b.chunkx * Server.chunksize' b.chunky * Server.chunksize' b.chunkz * Server.chunksize).Entities[b.id]; " is 138.
Long Statement,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,LoadAndSendChunk,The length of the statement  "				SendChunk(server' clientid' new Vector3i(vx * Server.chunksize' vy * Server.chunksize' vz * Server.chunksize)' new Vector3i(vx' vy' vz)); " is 137.
Long Statement,ManicDigger.Server,ServerSystemNotifyPing,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyPing.cs,Update,The length of the statement  "						if (!k.Value.Ping.Send((int)server.serverUptime.ElapsedMilliseconds)/*&& k.Value.state == ClientStateOnServer.Playing*/) " is 120.
Long Statement,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseWithTool,The length of the statement  "				e.position.heading = GetHeadingLookAt(server.modManager.GetPlayerPositionX(player)' server.modManager.GetPlayerPositionY(player)' e.position.x' e.position.z); " is 158.
Long Statement,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The length of the statement  "			d.Widgets[widgetCount++] = Widget.MakeTextBox(e.permissionSign.name' font' 50' 50' 200' 50' Game.ColorFromArgb(255' 0' 0' 0)); " is 126.
Long Statement,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The length of the statement  "			double headingDeg = (360.0 / (2.0 * Math.PI)) * Math.Acos(deltaX / Math.Sqrt(deltaX * deltaX + deltaY * deltaY)) + 90.0; " is 120.
Long Statement,ManicDigger.Server,ServerHeartbeat,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ServerHeartbeat.cs,SendHeartbeat,The length of the statement  "			string staticData = String.Format("name={0}&max={1}&public={2}&passwordProtected={3}&allowGuests={4}&port={5}&version={6}&fingerprint={7}" " is 138.
Long Statement,ManicDigger.Server,ServerMonitor,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerMonitor.cs,ActionSetBlock,The length of the statement  "			this.server.ServerMessageToAll(string.Format(server.language.ServerMonitorBuildingDisabled()' server.GetClient(clientId).playername)' Server.MessageType.Important); " is 164.
Long Statement,ManicDigger.Server,ServerMonitor,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerMonitor.cs,ActionMessage,The length of the statement  "			this.server.ServerMessageToAll(string.Format(server.language.ServerMonitorChatMuted()' server.GetClient(clientId).playername' config.MessageBanTime)' Server.MessageType.Important); " is 180.
Long Statement,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,NearestPlayer,The length of the statement  "				int distance = server.DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' new Vector3i(x' y' z)); " is 183.
Long Statement,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,AddBot,The length of the statement  "			DummyNetwork network = new DummyNetwork() { ClientReceiveBufferLock = new MonitorObject()' ServerReceiveBufferLock = new MonitorObject() }; " is 139.
Long Statement,ManicDigger.Server,ServerSystemUnloadUnusedChunks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\UnloadUnusedChunks.cs,Update,The length of the statement  "					var globalpos = new Vector3i(chunkpos.X * Server.chunksize' chunkpos.Y * Server.chunksize' chunkpos.Z * Server.chunksize); " is 122.
Long Statement,ManicDigger.Server,ServerSystemUnloadUnusedChunks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\UnloadUnusedChunks.cs,Update,The length of the statement  "						// unload distance = view distance + 60% (prevents chunks from being unloaded too early (square loading vs. circular unloading)) " is 128.
Long Statement,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The length of the statement  "			d.Widgets[widgetCount++] = Widget.MakeTextBox(e.sign.text' font' 50' 50' 200' 50' Color.FromArgb(255' 0' 0' 0).ToArgb()); " is 121.
Long Statement,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnUseWithTool,The length of the statement  "			e.position.heading = GetHeadingLookAt(m.GetPlayerPositionX(player)' m.GetPlayerPositionY(player)' e.position.x' e.position.z); " is 126.
Long Statement,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The length of the statement  "			double headingDeg = (360.0 / (2.0 * Math.PI)) * Math.Acos(deltaX / Math.Sqrt(deltaX * deltaX + deltaY * deltaY)) + 90.0; " is 120.
Long Statement,ManicDigger.Mods,CoreEvents,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreEvents.cs,OnPlayerDeath,The length of the statement  "					deathMessage = string.Format("{0} &7was blown into pieces by {1}."' ColoredPlayername(player)' ColoredPlayername(sourceID)); " is 124.
Long Statement,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,OnDelete,The length of the statement  "			if (m.IsValidPos(x' y' z - 1) && (m.GetBlock(x' y' z - 1) == DoorBottomOpen || m.GetBlock(x' y' z - 1) == DoorBottomClosed)) " is 124.
Long Statement,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,PopulateChunk,The length of the statement  "			MakeCaves(x' y' z' m.GetChunkSize()' _rnd' this.EnableCaves' gravellength' goldorelength' ironorelength' coalorelength' dirtlength' silverlength); " is 146.
Long Statement,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The length of the statement  "					MakeCuboid((int)curx - sizex / 2 + dx' (int)cury - sizey / 2 + dy' (int)curz - sizez / 2 + dz' sizex' sizey' sizez' blocktype' allowin' density' rnd); " is 150.
Long Statement,ManicDigger.Mods,Revert,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Revert.cs,OnCommand,The length of the statement  "					m.SendMessage(player' string.Format(m.colorError() + "Not reverted any block changes by player {0}."' targetplayername)); " is 121.
Long Statement,ManicDigger.Mods,Revert,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Revert.cs,OnCommand,The length of the statement  "					m.SendMessageToAll(string.Format("{0} reverted {1} block changes by player {2}"' m.GetPlayerName(player)' reverted' targetplayername)); " is 135.
Long Statement,ManicDigger.Mods,Revert,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Revert.cs,OnCommand,The length of the statement  "					m.LogServerEvent(string.Format("{0} reverts {1} block changes by player {2}"' m.GetPlayerName(player)' reverted' targetplayername)); " is 132.
Long Statement,ManicDigger.Mods,SandPhysics,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\SandPhysics.cs,Update,The length of the statement  "			if (IsValidDualPos(x' y' z - 1) && (IsSlideDown(x' y' z' m.GetBlockId("Sand")) || IsSlideDown(x' y' z' m.GetBlockId("Gravel")))) " is 128.
Long Statement,ManicDigger.Mods,SandPhysics,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\SandPhysics.cs,Update,The length of the statement  "			else if (IsValidDualPos(x' y' z) && (IsDestroyOfBase(x' y' z' m.GetBlockId("Sand")) || IsDestroyOfBase(x' y' z' m.GetBlockId("Gravel")))) " is 137.
Long Statement,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx' y + yy' z + i + 1' tile); " is 121.
Long Statement,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx + 1' y + yy' z + i' tile); " is 121.
Long Statement,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx - 1' y + yy' z + i' tile); " is 121.
Long Statement,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx' y + yy + 1' z + i' tile); " is 121.
Long Statement,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx' y + yy - 1' z + i' tile); " is 121.
Long Statement,ManicDigger.Mods,VandalFinder,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VandalFinder.cs,ShowBlockLog,The length of the statement  "					messages.Add(string.Format("{0} {1} {2} {3}"' ltimestamp.ToString()' lplayername' m.GetBlockName(lblocktype)' lbuild ? "build" : "delete")); " is 140.
Long Statement,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The length of the statement  "				getnoise += this.noise (((double)x) * frequency / zoom' ((double)y) / zoom * frequency' this.seed) * amplitude;//This uses our perlin noise functions. It calculates all our zoom and frequency and amplitude " is 205.
Long Statement,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,noise,The length of the statement  "			double int2 = interpolate (u' v' x - floorx);//Here we use x-floorx' to get 1st dimension. Don't mind the x-floorx thingie' it's part of the cosine formula. " is 156.
Long Statement,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx' y + yy' z + i + 1' tile); " is 121.
Long Statement,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx + 1' y + yy' z + i' tile); " is 121.
Long Statement,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx - 1' y + yy' z + i' tile); " is 121.
Long Statement,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx' y + yy + 1' z + i' tile); " is 121.
Long Statement,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The length of the statement  "								tile = rnd.NextDouble() < appleChance ? BLOCK_APPLES : BLOCK_OAKLEAVES; SetBlockIfEmpty(x + xx' y + yy - 1' z + i' tile); " is 121.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,The length of the statement  "					deathMessage = string.Format("{0}{1} &7was doomed to fall."' GetTeamColorString(players[player].team)' m.GetPlayerName(player)); " is 128.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,The length of the statement  "						deathMessage = string.Format("{0}{1} &7thought they could swim in Lava."' GetTeamColorString(players[player].team)' m.GetPlayerName(player)); " is 141.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,The length of the statement  "						deathMessage = string.Format("{0}{1} &7was burned alive."' GetTeamColorString(players[player].team)' m.GetPlayerName(player)); " is 126.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,The length of the statement  "						deathMessage = string.Format("{0}{1} &7was killed by {2}."' GetTeamColorString(players[player].team)' m.GetPlayerName(player)' m.GetBlockName(sourceID)); " is 153.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,The length of the statement  "					deathMessage = string.Format("{0}{1} &7tried to breathe under water."' GetTeamColorString(players[player].team)' m.GetPlayerName(player)); " is 138.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,The length of the statement  "						deathMessage = string.Format("{0}{1} &7blew himself up."' GetTeamColorString(players[player].team)' m.GetPlayerName(player)); " is 125.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,The length of the statement  "						deathMessage = string.Format("{0}{1} &7was blown into pieces by {2}{3}. - {4}TEAMKILL"' GetTeamColorString(players[player].team)' m.GetPlayerName(player)' GetTeamColorString(players[sourceID].team)' m.GetPlayerName(sourceID)' m.colorError()); " is 242.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,The length of the statement  "						deathMessage = string.Format("{0}{1} &7was blown into pieces by {2}{3}&7."' GetTeamColorString(players[player].team)' m.GetPlayerName(player)' GetTeamColorString(players[sourceID].team)' m.GetPlayerName(sourceID)); " is 214.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Hit,The length of the statement  "				m.SendExplosion(targetplayer' dx' dy' dz' true' m.GetBlockType(block).ExplosionRange' m.GetBlockType(block).ExplosionTime); " is 123.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Hit,The length of the statement  "					m.SendMessageToAll(string.Format("{0} kills {1} - " + m.colorError() + "TEAMKILL"' m.GetPlayerName(sourceplayer)' m.GetPlayerName(targetplayer))); " is 146.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The length of the statement  "			float availableEntrySpace = tableHeight - row1Height - row2Height - row3Height - row4Height - (row5Height + tableLineWidth); " is 124.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row1' HeadingFont' tableX + xcenter(tableWidth' textWidth(row1' HeadingFont))' tableY + tablePadding' TEXT_COLOR.ToArgb())); " is 152.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row2' SmallFontBold' tableX + xcenter(tableWidth' textWidth(row2' SmallFontBold))' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 171.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row3_1' SmallFont' tableX + tablePadding' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 130.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row3_2' SmallFont' tableX + tableWidth - textWidth(row3_2' SmallFont) - tablePadding' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 174.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row4_1' SmallFont' tableX + tablePadding' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 130.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row4_2' SmallFont' tableX + tableWidth - textWidth(row4_2' SmallFont) - tablePadding' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 174.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The length of the statement  "					string s = string.Format("{0} {1}ms {2} kills"' m.GetPlayerName(players[i])' (int)(m.GetPlayerPing(players[i]) * 1000)' this.players[players[i]].kills); " is 152.
Long Statement,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The length of the statement  "					widgets.Add(Widget.MakeText(s' NormalFont' tableX + 200 * t' tableY + heightOffset + listEntryHeight * i' Color.White.ToArgb())); " is 129.
Long Statement,ManicDigger.Mods.Fortress,HttpInfoModule,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\HttpStats.cs,ProcessAsync,The length of the statement  "			html += string.Format("<li>Total processor time: {0}<br/></li>"' ToReadableString(Process.GetCurrentProcess().TotalProcessorTime)); " is 131.
Long Statement,ManicDigger.Mods.Fortress,HttpInfoModule,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\HttpStats.cs,ToReadableString,The length of the statement  "			                                 span.Duration().Days > 0 ? string.Format("{0:0} day{1}' "' span.Days' span.Days == 1 ? String.Empty : "s") : string.Empty' " is 122.
Long Statement,ManicDigger.Mods.Fortress,HttpInfoModule,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\HttpStats.cs,ToReadableString,The length of the statement  "			                                 span.Duration().Hours > 0 ? string.Format("{0:0} hour{1}' "' span.Hours' span.Hours == 1 ? String.Empty : "s") : string.Empty' " is 126.
Long Statement,ManicDigger.Mods.Fortress,HttpInfoModule,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\HttpStats.cs,ToReadableString,The length of the statement  "			                                 span.Duration().Minutes > 0 ? string.Format("{0:0} minute{1}' "' span.Minutes' span.Minutes == 1 ? String.Empty : "s") : string.Empty' " is 134.
Long Statement,ManicDigger.Mods.Fortress,HttpInfoModule,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\HttpStats.cs,ToReadableString,The length of the statement  "			                                 span.Duration().Seconds > 0 ? string.Format("{0:0} second{1}"' span.Seconds' span.Seconds == 1 ? String.Empty : "s") : string.Empty); " is 133.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			float availableEntrySpace = tableHeight - row1Height - row2Height - row3Height - row4Height - (row5Height + tableLineWidth); " is 124.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row1' HeadingFont' tableX + xcenter(tableWidth' textWidth(row1' HeadingFont))' tableY + tablePadding' TEXT_COLOR.ToArgb())); " is 152.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row2' SmallFontBold' tableX + xcenter(tableWidth' textWidth(row2' SmallFontBold))' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 171.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row3_1' SmallFont' tableX + tablePadding' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 130.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row3_2' SmallFont' tableX + tableWidth - textWidth(row3_2' SmallFont) - tablePadding' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 174.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row4_1' SmallFont' tableX + tablePadding' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 130.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row4_2' SmallFont' tableX + tableWidth - textWidth(row4_2' SmallFont) - tablePadding' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 174.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeSolid(tableX + tableIdColumnWidth' tableY + heightOffset' tablePlayerColumnWidth' row5Height' Color.DarkGray.ToArgb())); " is 143.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeSolid(tableX + tableIdColumnWidth + tablePlayerColumnWidth' tableY + heightOffset' tablePingColumnWidth' row5Height' Color.DarkGray.ToArgb())); " is 166.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeSolid(tableX + tableIdColumnWidth' tableY + heightOffset' tableLineWidth' row5Height' Color.DimGray.ToArgb())); " is 134.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeSolid(tableX + tableIdColumnWidth + tablePlayerColumnWidth - tableLineWidth' tableY + heightOffset' tableLineWidth' row5Height' Color.DimGray.ToArgb())); " is 176.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row5_1' NormalFontBold' tableX + xcenter(tableIdColumnWidth' textWidth(row5_1' NormalFontBold))' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 185.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row5_2' NormalFontBold' tableX + tableIdColumnWidth + tablePlayerColumnWidth / 2 - textWidth(row5_2' NormalFontBold) / 2' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 210.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "			widgets.Add(Widget.MakeText(row5_3' NormalFontBold' tableX + tableIdColumnWidth + tablePlayerColumnWidth + tablePingColumnWidth / 2 - textWidth(row5_3' NormalFontBold) / 2' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb())); " is 233.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "				widgets.Add(Widget.MakeSolid(tableX' tableY + heightOffset' tableIdColumnWidth' listEntryHeight' entryRowColor.ToArgb())); " is 122.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "				widgets.Add(Widget.MakeSolid(tableX + tableIdColumnWidth' tableY + heightOffset' tablePlayerColumnWidth' listEntryHeight' entryRowColor.ToArgb())); " is 147.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "				widgets.Add(Widget.MakeSolid(tableX + tableIdColumnWidth + tablePlayerColumnWidth' tableY + heightOffset' tablePingColumnWidth' listEntryHeight' entryRowColor.ToArgb())); " is 170.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "				widgets.Add(Widget.MakeSolid(tableX + tableIdColumnWidth' tableY + heightOffset' tableLineWidth' listEntryHeight' Color.DimGray.ToArgb())); " is 139.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "				widgets.Add(Widget.MakeSolid(tableX + tableIdColumnWidth + tablePlayerColumnWidth - tableLineWidth' tableY + heightOffset' tableLineWidth' listEntryHeight' Color.DimGray.ToArgb())); " is 181.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "				widgets.Add(Widget.MakeText(AllPlayers[i].ToString()' NormalFont' tableX + tableIdColumnWidth - textWidth(AllPlayers[i].ToString()' NormalFont) - tablePadding' tableY + heightOffset + listEntryPaddingTopBottom' TEXT_COLOR.ToArgb())); " is 233.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "				widgets.Add(Widget.MakeText(getPrefix(AllPlayers[i]) + m.GetPlayerName(AllPlayers[i])' NormalFont' tableX + tableIdColumnWidth + tablePadding' tableY + heightOffset + listEntryPaddingTopBottom' TEXT_COLOR.ToArgb())); " is 216.
Long Statement,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The length of the statement  "				widgets.Add(Widget.MakeText(pingString' NormalFont' tableX + tableIdColumnWidth + tablePlayerColumnWidth + tablePingColumnWidth - textWidth(pingString' NormalFont) - tablePadding' tableY + heightOffset + listEntryPaddingTopBottom' TEXT_COLOR.ToArgb())); " is 253.
Complex Conditional,ManicDigger.Server,InventoryServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,InventoryClick,The conditional expression  "pos.AreaX >= k.Key.X && pos.AreaY >= k.Key.Y  					               && pos.AreaX < k.Key.X + d_Items.ItemSizeX(k.Value)  					               && pos.AreaY < k.Key.Y + d_Items.ItemSizeY(k.Value)"  is complex.
Complex Conditional,ManicDigger.Server,InventoryServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,WearItem,The conditional expression  "from.Type == Packet_InventoryPositionTypeEnum.MainArea  			         && to.Type == Packet_InventoryPositionTypeEnum.MaterialSelector  			         && d_Inventory.RightHand[to.MaterialId] == null  			         && d_Inventory.Items.ContainsKey(originPoint)  			         && d_Items.CanWear(WearPlace_.RightHand' d_Inventory.Items[originPoint])"  is complex.
Complex Conditional,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetEntityDirty,The conditional expression  "s.chunkx == id.chunkx                      && s.chunky == id.chunky                      && s.chunkz == id.chunkz                      && s.id == id.id"  is complex.
Complex Conditional,ManicDigger.Server,AreaConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,IsInCoords,The conditional expression  "x >= x1 && x <= x2 && y >= y1 && y <= y2 && z >= z1 && z <= z2"  is complex.
Complex Conditional,ManicDigger.Server,ServerSystemChunksSimulation,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ChunksSimulation.cs,AddMonsters,The conditional expression  "server.d_Map.GetBlock(px' py' pz) == 0  				    && server.d_Map.GetBlock(px' py' pz + 1) == 0  				    && server.d_Map.GetBlock(px' py' pz - 1) != 0  				    && (!server.BlockTypes[server.d_Map.GetBlock(px' py' pz - 1)].IsFluid())"  is complex.
Complex Conditional,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,Contains,The conditional expression  "s.chunkx == value.chunkx  				            && s.chunky == value.chunky  				            && s.chunkz == value.chunkz  				            && s.id == value.id"  is complex.
Complex Conditional,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,SetPlayerNameColor,The conditional expression  "color.Equals("&0") || color.Equals("&1") || color.Equals("&2") || color.Equals("&3") ||  			    color.Equals("&4") || color.Equals("&5") || color.Equals("&6") || color.Equals("&7") ||  			    color.Equals("&8") || color.Equals("&9") || color.Equals("&a") || color.Equals("&b") ||  			    color.Equals("&c") || color.Equals("&d") || color.Equals("&e") || color.Equals("&f")"  is complex.
Complex Conditional,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,The conditional expression  "tntStack.Count < tntMax  								    && (pos2.x != pos.x || pos2.y != pos.y || pos2.z != pos.z)  								    && block == tnt"  is complex.
Complex Conditional,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceIfEmpty,The conditional expression  "m.IsValidPos(x' y' z) && (block == 0 || block == OakSapling || block == BirchSapling || block == SpruceSapling)"  is complex.
Empty Catch Block,ManicDigger.Common,AssetLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\AssetLoader.cs,LoadAssetsAsync,The method has an empty catch block.
Empty Catch Block,ManicDigger.Common,AssetLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\AssetLoader.cs,LoadAssetsAsync,The method has an empty catch block.
Empty Catch Block,ManicDigger.Common,CrashReporter,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\CrashReporter.cs,DisplayInGui,The method has an empty catch block.
Empty Catch Block,ManicDigger.Common,GameStorePath,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\GameStorePath.cs,GetStorePath,The method has an empty catch block.
Empty Catch Block,ManicDigger.Common,EnetNetConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkEnetCommon.cs,SendMessage,The method has an empty catch block.
Empty Catch Block,ManicDigger.Common,TcpConnectionRaw,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,OnBytesReceived,The method has an empty catch block.
Empty Catch Block,ManicDigger.Common,TcpConnectionRaw,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,OnBytesReceived,The method has an empty catch block.
Empty Catch Block,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,OnBytesReceived,The method has an empty catch block.
Empty Catch Block,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,OnBytesReceived,The method has an empty catch block.
Empty Catch Block,ManicDigger.Server,GetFileStream,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\GetFile.cs,GetFile,The method has an empty catch block.
Empty Catch Block,ManicDigger.Server,GetFileStream,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\GetFile.cs,GetFile,The method has an empty catch block.
Empty Catch Block,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,GetScriptSources,The method has an empty catch block.
Empty Catch Block,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,CompileScripts,The method has an empty catch block.
Empty Catch Block,ManicDigger.Server,ServerSystemModLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ModLoader.cs,CompileScripts,The method has an empty catch block.
Empty Catch Block,ManicDigger.Server,ServerManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\NetworkTcpServer.cs,OnConnectRequest,The method has an empty catch block.
Empty Catch Block,ManicDigger.Server,ServerManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\NetworkTcpServer.cs,newConn_Disconnected,The method has an empty catch block.
Empty Catch Block,ManicDigger.Server,ServerManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\NetworkTcpServer.cs,newConn_ReceivedMessage,The method has an empty catch block.
Empty Catch Block,ManicDigger.Server,ServerManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\NetworkTcpServer.cs,Send,The method has an empty catch block.
Magic Number,ManicDigger.Common,AssetLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\AssetLoader.cs,LoadAssetsAsync,The following statement contains a magic number: list.items = new Asset[2048];
Magic Number,ManicDigger.Common,AssetLoader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\AssetLoader.cs,ToHex,The following statement contains a magic number: StringBuilder result = new StringBuilder(bytes.Length * 2);
Magic Number,ManicDigger.Common,CompressionGzip,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\Compression.cs,Compress,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,ManicDigger.Common,CompressionGzip,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\Compression.cs,Decompress,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,ManicDigger.Common,CompressionGzip,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\Compression.cs,Decompress,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,ManicDigger.Common,CrashReporter,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\CrashReporter.cs,DisplayInGui,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ManicDigger.Common,CrashReporter,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\CrashReporter.cs,DisplayInGui,The following statement contains a magic number: i < 5
Magic Number,ManicDigger.Common,GameStorePath,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\GameStorePath.cs,IsValidName,The following statement contains a magic number: s.Length < 1 || s.Length > 32
Magic Number,ManicDigger.Common,LanguageNative,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\LanguageNative.cs,LanguageNative,The following statement contains a magic number: stringsMax = 1024 * 32;
Magic Number,ManicDigger.Common,LanguageNative,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\LanguageNative.cs,LanguageNative,The following statement contains a magic number: stringsMax = 1024 * 32;
Magic Number,ManicDigger.Common,LanguageNative,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\LanguageNative.cs,LanguageNative,The following statement contains a magic number: loadedLanguagesMax = 64;
Magic Number,ManicDigger.Common,LanguageNative,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\LanguageNative.cs,LoadTranslations,The following statement contains a magic number: splitList.Length >= 2
Magic Number,ManicDigger.Common,Misc,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\Misc.cs,UshortArrayToByteArray,The following statement contains a magic number: byte[] output = new byte[a.Length * 2];
Magic Number,ManicDigger.Common,Misc,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\Misc.cs,UshortArrayToByteArray,The following statement contains a magic number: i < a.Length * 2
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,OnBytesReceived,The following statement contains a magic number: packet[i] = receivedBytesArray[4 + i];
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,OnBytesReceived,The following statement contains a magic number: receivedBytes.RemoveRange(0' 4 + packetLength);
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,OnBytesReceived,The following statement contains a magic number: receivedBytes.Count >= 4 + packetLength
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,OnBytesReceived,The following statement contains a magic number: receivedBytes.Count >= 4
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,Send,The following statement contains a magic number: byte[] data2 = new byte[length + 4];
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,Send,The following statement contains a magic number: data2[4 + i] = data[i];
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,WriteInt,The following statement contains a magic number: int a = (n >> 24) & 0xFF;
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,WriteInt,The following statement contains a magic number: int b = (n >> 16) & 0xFF;
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,WriteInt,The following statement contains a magic number: int c = (n >> 8) & 0xFF;
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,WriteInt,The following statement contains a magic number: writeBuf[writePos + 2] = (byte)(c);
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,WriteInt,The following statement contains a magic number: writeBuf[writePos + 3] = (byte)(d);
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,ReadInt,The following statement contains a magic number: int n = readBuf[readPos] << 24;
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,ReadInt,The following statement contains a magic number: n |= readBuf[readPos + 1] << 16;
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,ReadInt,The following statement contains a magic number: n |= readBuf[readPos + 2] << 8;
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,ReadInt,The following statement contains a magic number: n |= readBuf[readPos + 2] << 8;
Magic Number,ManicDigger.Common,TcpConnection,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Common\NetworkTcpCommon.cs,ReadInt,The following statement contains a magic number: n |= readBuf[readPos + 3];
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: entity.position.pitch = 2 * 255 / 4;
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: entity.position.pitch = 2 * 255 / 4;
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: entity.position.pitch = 2 * 255 / 4;
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: FillLimit = 500;
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: EyeHeight = one * 15 / 10;
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: EyeHeight = one * 15 / 10;
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: ModelHeight = one * 17 / 10;
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: ModelHeight = one * 17 / 10;
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: WindowSize = new int[] { 800' 600 };
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: WindowSize = new int[] { 800' 600 };
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: playersDirty = new bool[128];
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: i < 128
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: spawnedEntities = new ServerEntityId[64];
Magic Number,ManicDigger.Server,ClientOnServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ClientOnServer.cs,ClientOnServer,The following statement contains a magic number: spawnedEntitiesCount = 64;
Magic Number,ManicDigger.Server,GetFileStream,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\GetFile.cs,GetFile,The following statement contains a magic number: i < 2
Magic Number,ManicDigger.Server,EnetNetServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\NetworkEnetServer.cs,Start,The following statement contains a magic number: ((EnetHostNative)host).host.InitializeServer(Port' 256);
Magic Number,ManicDigger.Server,InventoryUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,InventoryUtil,The following statement contains a magic number: CellCountX = 12;
Magic Number,ManicDigger.Server,InventoryUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,InventoryUtil,The following statement contains a magic number: CellCountY = 7 * 6;
Magic Number,ManicDigger.Server,InventoryUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,InventoryUtil,The following statement contains a magic number: CellCountY = 7 * 6;
Magic Number,ManicDigger.Server,InventoryUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,ItemsAtArea,The following statement contains a magic number: PointRef[] itemsAtArea = new PointRef[256];
Magic Number,ManicDigger.Server,InventoryUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,GrabItem,The following statement contains a magic number: switch (item.ItemClass)  			{  				case ItemClass.Block:  					if (item.BlockId == SpecialBlockId.Empty)  					{  						return true;  					}                  //stacking  					for (int i = 0; i < 10; i++)  					{  						if (d_Inventory.RightHand[i] == null)  						{  							continue;  						}  						Item result = d_Items.Stack(d_Inventory.RightHand[i]' item);  						if (result != null)  						{  							d_Inventory.RightHand[i] = result;  							return true;  						}  					}  					if (d_Inventory.RightHand[ActiveMaterial] == null)  					{  						d_Inventory.RightHand[ActiveMaterial] = item;  						return true;  					}                  //current hand  					if (d_Inventory.RightHand[ActiveMaterial].ItemClass == ItemClass.Block  					               && d_Inventory.RightHand[ActiveMaterial].BlockId == item.BlockId)  					{  						d_Inventory.RightHand[ActiveMaterial].BlockCount++;  						return true;  					}                  //any free hand  					for (int i = 0; i < 10; i++)  					{  						if (d_Inventory.RightHand[i] == null)  						{  							d_Inventory.RightHand[i] = item;  							return true;  						}  					}                  //grab to main area - stacking  					for (int y = 0; y < CellCountY; y++)  					{  						for (int x = 0; x < CellCountX; x++)  						{  							IntRef pCount = new IntRef();  							PointRef[] p = ItemsAtArea(x' y' d_Items.ItemSizeX(item)' d_Items.ItemSizeY(item)' pCount);  							if (p != null && pCount.value == 1)  							{  								var stacked = d_Items.Stack(d_Inventory.Items[new ProtoPoint(p[0].X' p[0].Y)]' item);  								if (stacked != null)  								{  									d_Inventory.Items[new ProtoPoint(x' y)] = stacked;  									return true;  								}  							}  						}  					}                  //grab to main area - adding  					for (int y = 0; y < CellCountY; y++)  					{  						for (int x = 0; x < CellCountX; x++)  						{  							IntRef pCount = new IntRef();  							PointRef[] p = ItemsAtArea(x' y' d_Items.ItemSizeX(item)' d_Items.ItemSizeY(item)' pCount);  							if (p != null && pCount.value == 0)  							{  								d_Inventory.Items[new ProtoPoint(x' y)] = item;  								return true;  							}  						}  					}  					return false;  				default:  					throw new NotImplementedException();  			}
Magic Number,ManicDigger.Server,InventoryUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Inventory.cs,GrabItem,The following statement contains a magic number: switch (item.ItemClass)  			{  				case ItemClass.Block:  					if (item.BlockId == SpecialBlockId.Empty)  					{  						return true;  					}                  //stacking  					for (int i = 0; i < 10; i++)  					{  						if (d_Inventory.RightHand[i] == null)  						{  							continue;  						}  						Item result = d_Items.Stack(d_Inventory.RightHand[i]' item);  						if (result != null)  						{  							d_Inventory.RightHand[i] = result;  							return true;  						}  					}  					if (d_Inventory.RightHand[ActiveMaterial] == null)  					{  						d_Inventory.RightHand[ActiveMaterial] = item;  						return true;  					}                  //current hand  					if (d_Inventory.RightHand[ActiveMaterial].ItemClass == ItemClass.Block  					               && d_Inventory.RightHand[ActiveMaterial].BlockId == item.BlockId)  					{  						d_Inventory.RightHand[ActiveMaterial].BlockCount++;  						return true;  					}                  //any free hand  					for (int i = 0; i < 10; i++)  					{  						if (d_Inventory.RightHand[i] == null)  						{  							d_Inventory.RightHand[i] = item;  							return true;  						}  					}                  //grab to main area - stacking  					for (int y = 0; y < CellCountY; y++)  					{  						for (int x = 0; x < CellCountX; x++)  						{  							IntRef pCount = new IntRef();  							PointRef[] p = ItemsAtArea(x' y' d_Items.ItemSizeX(item)' d_Items.ItemSizeY(item)' pCount);  							if (p != null && pCount.value == 1)  							{  								var stacked = d_Items.Stack(d_Inventory.Items[new ProtoPoint(p[0].X' p[0].Y)]' item);  								if (stacked != null)  								{  									d_Inventory.Items[new ProtoPoint(x' y)] = stacked;  									return true;  								}  							}  						}  					}                  //grab to main area - adding  					for (int y = 0; y < CellCountY; y++)  					{  						for (int x = 0; x < CellCountX; x++)  						{  							IntRef pCount = new IntRef();  							PointRef[] p = ItemsAtArea(x' y' d_Items.ItemSizeX(item)' d_Items.ItemSizeY(item)' pCount);  							if (p != null && pCount.value == 0)  							{  								d_Inventory.Items[new ProtoPoint(x' y)] = item;  								return true;  							}  						}  					}  					return false;  				default:  					throw new NotImplementedException();  			}
Magic Number,ManicDigger.Server,ChunkDbSqlite,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ChunkDb.cs,Backup,The following statement contains a magic number: sqliteConn.BackupDatabase(sqliteBckConn' sqliteBckConn.Database' sqliteConn.Database' -1' null' 10);
Magic Number,ManicDigger.Server,ChunkDbSqlite,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ChunkDb.cs,GetGlobalData,The following statement contains a magic number: return GetChunk(ulong.MaxValue / 2);
Magic Number,ManicDigger.Server,ChunkDbSqlite,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ChunkDb.cs,SetGlobalData,The following statement contains a magic number: InsertChunk(ulong.MaxValue / 2' data);
Magic Number,ManicDigger.Server,ServerSystemLoadConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\LoadConfig.cs,SaveConfig,The following statement contains a magic number: port > 0 && port <= 65565
Magic Number,ManicDigger.Server,ServerSystemLoadServerClient,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\LoadServerClient.cs,LoadServerClient,The following statement contains a magic number: int x = server.d_Map.MapSizeX / 2;
Magic Number,ManicDigger.Server,ServerSystemLoadServerClient,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\LoadServerClient.cs,LoadServerClient,The following statement contains a magic number: int y = server.d_Map.MapSizeY / 2;
Magic Number,ManicDigger.Server,ServerManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\NetworkTcpServer.cs,StartServer,The following statement contains a magic number: this.sock.Listen(10);
Magic Number,ManicDigger.Server,FastStack<T>,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ScriptConsole.cs,Push,The following statement contains a magic number: Array.Resize(ref values' values.Length * 2);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Server,The following statement contains a magic number: systems = new ServerSystem[256];
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ProcessSave,The following statement contains a magic number: (DateTime.UtcNow - lastsave).TotalMinutes > 2
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ProcessMain,The following statement contains a magic number: (DateTime.UtcNow - statsupdate).TotalSeconds >= 2
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ProcessMain,The following statement contains a magic number: lastServerTick > 500
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,OnConfigLoaded,The following statement contains a magic number: map.chunksize = 32;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,OnConfigLoaded,The following statement contains a magic number: server.mainSockets = new NetServer[3];
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,OnConfigLoaded,The following statement contains a magic number: server.mainSocketsCount = 3;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,OnConfigLoaded,The following statement contains a magic number: mainSockets[2] = new TcpNetServer();
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,OnConfigLoaded,The following statement contains a magic number: mainSockets[2] == null
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,OnConfigLoaded,The following statement contains a magic number: serverGroup.Level = 255;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Start,The following statement contains a magic number: mainSockets[2].SetPort(port + 2);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Start,The following statement contains a magic number: mainSockets[2].SetPort(port + 2);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Start,The following statement contains a magic number: mainSockets[2].Start();
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Start,The following statement contains a magic number: mainSockets[2] != null
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SaveAllLoadedChunks,The following statement contains a magic number: tosave.Count > 200
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,gettime,The following statement contains a magic number: return (double)DateTime.UtcNow.Ticks / (10 * 1000 * 1000);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,gettime,The following statement contains a magic number: return (double)DateTime.UtcNow.Ticks / (10 * 1000 * 1000);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,gettime,The following statement contains a magic number: return (double)DateTime.UtcNow.Ticks / (10 * 1000 * 1000);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ConvertInventory,The following statement contains a magic number: p.Inventory.RightHand = new Packet_Item[10];
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ConvertInventory,The following statement contains a magic number: p.Inventory.RightHandCount = 10;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ConvertInventory,The following statement contains a magic number: p.Inventory.RightHandLength = 10;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: int mapx = c.PositionMul32GlX / 32;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: int mapy = c.PositionMul32GlZ / 32;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: int mapz = c.PositionMul32GlY / 32;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: Vector3i ppos = new Vector3i                          {                              x = clients[clientid].PositionMul32GlX / 32'                              y = clients[clientid].PositionMul32GlZ / 32'                              z = clients[clientid].PositionMul32GlY / 32                          };
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: Vector3i ppos = new Vector3i                          {                              x = clients[clientid].PositionMul32GlX / 32'                              y = clients[clientid].PositionMul32GlZ / 32'                              z = clients[clientid].PositionMul32GlY / 32                          };
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: Vector3i ppos = new Vector3i                          {                              x = clients[clientid].PositionMul32GlX / 32'                              y = clients[clientid].PositionMul32GlZ / 32'                              z = clients[clientid].PositionMul32GlY / 32                          };
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: DistanceSquared(mpos' ppos) < 15
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: zz < 2
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: yy < 2
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,HitMonsters,The following statement contains a magic number: xx < 2
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,StartPlayerStats,The following statement contains a magic number: p.CurrentHealth = 20;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,StartPlayerStats,The following statement contains a magic number: p.MaxHealth = 20;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,StartPlayerStats,The following statement contains a magic number: p.CurrentOxygen = 10;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,StartPlayerStats,The following statement contains a magic number: p.MaxOxygen = 10;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlayerBlockPosition,The following statement contains a magic number: return new Vector3i(c.PositionMul32GlX / 32' c.PositionMul32GlZ / 32' c.PositionMul32GlY / 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlayerBlockPosition,The following statement contains a magic number: return new Vector3i(c.PositionMul32GlX / 32' c.PositionMul32GlZ / 32' c.PositionMul32GlY / 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlayerBlockPosition,The following statement contains a magic number: return new Vector3i(c.PositionMul32GlX / 32' c.PositionMul32GlZ / 32' c.PositionMul32GlY / 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TryReadPacket,The following statement contains a magic number: switch (packet.Id)          {              case Packet_ClientIdEnum.PingReply:          		clients[clientid].Ping.Receive((int)serverUptime.ElapsedMilliseconds);                  clients[clientid].LastPing = ((float)clients[clientid].Ping.RoundtripTimeTotalMilliseconds() / 1000);                  this.NotifyPing(clientid' (int)clients[clientid].Ping.RoundtripTimeTotalMilliseconds());                  break;              case Packet_ClientIdEnum.PlayerIdentification:                  {                      foreach (var cl in clients)                      {                          if (cl.Value.IsBot)                          {                              continue;                          }                          realPlayers++;                      }                      if (realPlayers > config.MaxClients)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerTooManyPlayers()));                          KillPlayer(clientid);                          break;                      }                      if (config.IsPasswordProtected() && packet.Identification.ServerPassword != config.Password)                      {                          Console.WriteLine(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          ServerEventLog(string.Format("{0} fails to join (invalid server password)."' packet.Identification.Username));                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerPasswordInvalid()));                          KillPlayer(clientid);                          break;                      }                      SendServerIdentification(clientid);                      string username = packet.Identification.Username;                        // allowed characters in username: a-z'A-Z'0-9'-'_ length: 1-16                      Regex allowedUsername = new Regex(@"^(\w|-){1'16}$");                        if (string.IsNullOrEmpty(username) || !allowedUsername.IsMatch(username))                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerUsernameInvalid()));                          ServerEventLog(string.Format("{0} can't join (invalid username: {1})."' (c.socket.RemoteEndPoint()).AddressToString()' username));                          KillPlayer(clientid);                          break;                      }                        bool isClientLocalhost = ((c.socket.RemoteEndPoint()).AddressToString() == "127.0.0.1");                      bool verificationFailed = false;                        if ((ComputeMd5(config.Key.Replace("-"' "") + username) != packet.Identification.VerificationKey)                          && (!isClientLocalhost))                      {                          //Account verification failed.                          username = "~" + username;                          verificationFailed = true;                      }                        if (!config.AllowGuests && verificationFailed)                      {                          SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerNoGuests()));                          KillPlayer(clientid);                          break;                      }                        //When a duplicate user connects' append a number to name.                      foreach (var k in clients)                      {                          if (k.Value.playername.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              // If duplicate is a registered user' kick duplicate. It is likely that the user lost connection before.                              if (!verificationFailed && !isClientLocalhost)                              {                                  KillPlayer(k.Key);                                  break;                              }                                // Duplicates are handled as guests.                              username = GenerateUsername(username);                              if (!username.StartsWith("~")) { username = "~" + username; }                              break;                          }                      }                      clients[clientid].playername = username;                        // Assign group to new client                      //Check if client is in ServerClient.txt and assign corresponding group.                      bool exists = false;                      foreach (ManicDigger.Client client in serverClient.Clients)                      {                          if (client.Name.Equals(username' StringComparison.InvariantCultureIgnoreCase))                          {                              foreach (ManicDigger.Group clientGroup in serverClient.Groups)                              {                                  if (clientGroup.Name.Equals(client.Group))                                  {                                      exists = true;                                      clients[clientid].AssignGroup(clientGroup);                                      break;                                  }                              }                              break;                          }                      }                      if (!exists)                      {                          //Assign admin group if client connected from localhost                          if (isClientLocalhost)                          {                              clients[clientid].AssignGroup(serverClient.Groups.Find(v => v.Name == "Admin"));                          }                          else if (clients[clientid].playername.StartsWith("~"))                          {                              clients[clientid].AssignGroup(this.defaultGroupGuest);                          }                          else                          {                              clients[clientid].AssignGroup(this.defaultGroupRegistered);                          }                      }                      this.SetFillAreaLimit(clientid);                      this.SendFreemoveState(clientid' clients[clientid].privileges.Contains(ServerClientMisc.Privilege.freemove));                      c.queryClient = false;                      clients[clientid].entity.drawName.name = username;                      if (config.EnablePlayerPushing)                      {                          // Player pushing                          clients[clientid].entity.push = new ServerEntityPush();                          clients[clientid].entity.push.range = 1;                      }                      PlayerEntitySetDirty(clientid);                  }                  break;              case Packet_ClientIdEnum.RequestBlob:                  {                      // Set player's spawn position                      Vector3i position = GetPlayerSpawnPositionMul32(clientid);                        clients[clientid].PositionMul32GlX = position.x;                      clients[clientid].PositionMul32GlY = position.y + (int)(0.5 * 32);                      clients[clientid].PositionMul32GlZ = position.z;                        string ip = (clients[clientid].socket.RemoteEndPoint()).AddressToString();                      SendMessageToAll(string.Format(language.ServerPlayerJoin()' clients[clientid].ColoredPlayername(colorNormal)));                      ServerEventLog(string.Format("{0} {1} joins."' clients[clientid].playername' ip));                      SendMessage(clientid' colorSuccess + config.WelcomeMessage);                      SendBlobs(clientid' packet.RequestBlob.RequestedMd5);                      SendBlockTypes(clientid);                      SendTranslations(clientid);                      SendSunLevels(clientid);                      SendLightLevels(clientid);                      SendCraftingRecipes(clientid);                        for (int i = 0; i < modEventHandlers.onplayerjoin.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerjoin[i](clientid);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerJoin");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                        SendPacket(clientid' ServerPackets.LevelFinalize());                      clients[clientid].state = ClientStateOnServer.Playing;                      NotifySeason(clientid);                  }                  break;              case Packet_ClientIdEnum.SetBlock:                  {                      int x = packet.SetBlock.X;                      int y = packet.SetBlock.Y;                      int z = packet.SetBlock.Z;                      if (packet.SetBlock.Mode == Packet_BlockSetModeEnum.Use)	//Check if player only uses block                      {                          if (!CheckUsePrivileges(clientid' x' y' z))                          {                              break;                          }                          DoCommandBuild(clientid' true' packet.SetBlock);                      }                      else	//Player builds' deletes or uses block with tool                      {                          if (!CheckBuildPrivileges(clientid' x' y' z' packet.SetBlock.Mode))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                              break;                          }                          if (!DoCommandBuild(clientid' true' packet.SetBlock))                          {                              SendSetBlock(clientid' x' y' z' d_Map.GetBlock(x' y' z)); //revert                          }                          //Only log when building/destroying blocks. Prevents VandalFinder entries                          if (packet.SetBlock.Mode != Packet_BlockSetModeEnum.UseWithTool)                              BuildLog(string.Format("{0} {1} {2} {3} {4} {5}"' x' y' z' c.playername' (c.socket.RemoteEndPoint()).AddressToString()' d_Map.GetBlock(x' y' z)));                      }                  }                  break;              case Packet_ClientIdEnum.FillArea:                  {                      if (!clients[clientid].privileges.Contains(ServerClientMisc.Privilege.build))                      {                          SendMessage(clientid' colorError + language.ServerNoBuildPrivilege());                          break;                      }                      if (clients[clientid].IsSpectator && !config.AllowSpectatorBuild)                      {                          SendMessage(clientid' colorError + language.ServerNoSpectatorBuild());                          break;                      }                      Vector3i a = new Vector3i(packet.FillArea.X1' packet.FillArea.Y1' packet.FillArea.Z1);                      Vector3i b = new Vector3i(packet.FillArea.X2' packet.FillArea.Y2' packet.FillArea.Z2);                        int blockCount = (Math.Abs(a.x - b.x) + 1) * (Math.Abs(a.y - b.y) + 1) * (Math.Abs(a.z - b.z) + 1);                        if (blockCount > clients[clientid].FillLimit)                      {                          SendMessage(clientid' colorError + language.ServerFillAreaTooLarge());                          break;                      }                      if (!this.IsFillAreaValid(clients[clientid]' a' b))                      {                          SendMessage(clientid' colorError + language.ServerFillAreaInvalid());                          break;                      }                      this.DoFillArea(clientid' packet.FillArea' blockCount);                        BuildLog(string.Format("{0} {1} {2} - {3} {4} {5} {6} {7} {8}"' a.x' a.y' a.z' b.x' b.y' b.z'                          c.playername' (c.socket.RemoteEndPoint()).AddressToString()'                          d_Map.GetBlock(a.x' a.y' a.z)));                  }                  break;              case Packet_ClientIdEnum.PositionandOrientation:                  {                      var p = packet.PositionAndOrientation;                      clients[clientid].PositionMul32GlX = p.X;                      clients[clientid].PositionMul32GlY = p.Y;                      clients[clientid].PositionMul32GlZ = p.Z;                      clients[clientid].positionheading = p.Heading;                      clients[clientid].positionpitch = p.Pitch;                      clients[clientid].stance = (byte)p.Stance;                  }                  break;              case Packet_ClientIdEnum.Message:                  {                      packet.Message.Message = packet.Message.Message.Trim();                      // empty message                      if (string.IsNullOrEmpty(packet.Message.Message))                      {                          //Ignore empty messages                          break;                      }                      // server command                      if (packet.Message.Message.StartsWith("/"))                      {                          string[] ss = packet.Message.Message.Split(new[] { ' ' });                          string command = ss[0].Replace("/"' "");                          string argument = packet.Message.Message.IndexOf(" ") < 0 ? "" : packet.Message.Message.Substring(packet.Message.Message.IndexOf(" ") + 1);                          try                          {                              //Try to execute the given command                              this.CommandInterpreter(clientid' command' argument);                          }                          catch (Exception ex)                          {                              //This will notify client of error instead of kicking him in case of an error                              SendMessage(clientid' "Server error while executing command!"' MessageType.Error);                              SendMessage(clientid' "Details on server console!"' MessageType.Error);                              Console.WriteLine("Client {0} caused a command error."' clientid);                              Console.WriteLine("Command: /{0}"' command);                              Console.WriteLine("Arguments: {0}"' argument);                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      // client command                      else if (packet.Message.Message.StartsWith("."))                      {                          //Ignore clientside commands                          break;                      }                      // chat message                      else                      {                          string message = packet.Message.Message;                          for (int i = 0; i < modEventHandlers.onplayerchat.Count; i++)                          {                              try                              {                                  message = modEventHandlers.onplayerchat[i](clientid' message' packet.Message.IsTeamchat != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnPlayerChat");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                          if (clients[clientid].privileges.Contains(ServerClientMisc.Privilege.chat))                          {                              if (message == null)                              {                                  break;                              }                              SendMessageToAll(string.Format("{0}: {1}"' clients[clientid].ColoredPlayername(colorNormal)' message));                              ChatLog(string.Format("{0}: {1}"' clients[clientid].playername' message));                          }                          else                          {                              SendMessage(clientid' string.Format(language.ServerNoChatPrivilege()' colorError));                          }                      }                  }                  break;              case Packet_ClientIdEnum.Craft:                  DoCommandCraft(true' packet.Craft);                  break;              case Packet_ClientIdEnum.InventoryAction:                  DoCommandInventory(clientid' packet.InventoryAction);                  break;              case Packet_ClientIdEnum.Health:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentHealth = packet.Health.CurrentHealth;                      if (stats.CurrentHealth < 1)                      {                          //death - reset health. More stuff done in Death packet handling                          stats.CurrentHealth = stats.MaxHealth;                      }                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.Death:                  {                      //Console.WriteLine("Death Packet Received. Client: {0}' Reason: {1}' Source: {2}"' clientid' packet.Death.Reason' packet.Death.SourcePlayer);                      for (int i = 0; i < modEventHandlers.onplayerdeath.Count; i++)                      {                          try                          {                              modEventHandlers.onplayerdeath[i](clientid' (DeathReason)packet.Death.Reason' packet.Death.SourcePlayer);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnPlayerDeath");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                  }                  break;              case Packet_ClientIdEnum.Oxygen:                  {                      //TODO: server side                      var stats = GetPlayerStats(clients[clientid].playername);                      stats.CurrentOxygen = packet.Oxygen.CurrentOxygen;                      clients[clientid].IsPlayerStatsDirty = true;                  }                  break;              case Packet_ClientIdEnum.MonsterHit:                  HitMonsters(clientid' packet.Health.CurrentHealth);                  break;              case Packet_ClientIdEnum.DialogClick:                  for (int i = 0; i < modEventHandlers.ondialogclick.Count; i++)                  {                      try                      {                          modEventHandlers.ondialogclick[i](clientid' packet.DialogClick_.WidgetId);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  for (int i = 0; i < modEventHandlers.ondialogclick2.Count; i++)                  {                      try                      {                          DialogClickArgs args = new DialogClickArgs();                          args.SetPlayer(clientid);                          args.SetWidgetId(packet.DialogClick_.WidgetId);                          args.SetTextBoxValue(packet.DialogClick_.TextBoxValue);                          modEventHandlers.ondialogclick2[i](args);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnDialogClick2");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Shot:                  int shootSoundIndex = pistolcycle++ % BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd.Length;	//Cycle all given ShootEnd sounds                  PlaySoundAtExceptPlayer((int)DeserializeFloat(packet.Shot.FromX)' (int)DeserializeFloat(packet.Shot.FromZ)' (int)DeserializeFloat(packet.Shot.FromY)' BlockTypes[packet.Shot.WeaponBlock].Sounds.ShootEnd[shootSoundIndex] + ".ogg"' clientid);                  if (BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed == 0)                  {                      SendBullet(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                         DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ)' 150);                  }                  else                  {                      Vector3f from = new Vector3f(DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ));                      Vector3f to = new Vector3f(DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ));                      Vector3f v = to - from;                      v.Normalize();                      v *= BlockTypes[packet.Shot.WeaponBlock].ProjectileSpeed;                      SendProjectile(clientid' DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ)'                          v.X' v.Y' v.Z' packet.Shot.WeaponBlock' DeserializeFloat(packet.Shot.ExplodesAfter));                      //Handle OnWeaponShot so grenade ammo is correct                      for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                      {                          try                          {                              modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                          }                          catch (Exception ex)                          {                              Console.WriteLine("Mod exception: OnWeaponShot");                              Console.WriteLine(ex.Message);                              Console.WriteLine(ex.StackTrace);                          }                      }                      return;                  }                  for (int i = 0; i < modEventHandlers.onweaponshot.Count; i++)                  {                      try                      {                          modEventHandlers.onweaponshot[i](clientid' packet.Shot.WeaponBlock);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnWeaponShot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  if (clients[clientid].LastPing < 0.3)                  {                      if (packet.Shot.HitPlayer != -1)                      {                          //client-side shooting                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' packet.Shot.HitPlayer' packet.Shot.WeaponBlock' packet.Shot.IsHitHead != 0);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      return;                  }                  foreach (var k in clients)                  {                      if (k.Key == clientid)                      {                          continue;                      }                      Line3D pick = new Line3D();                      pick.Start = new float[] { DeserializeFloat(packet.Shot.FromX)' DeserializeFloat(packet.Shot.FromY)' DeserializeFloat(packet.Shot.FromZ) };                      pick.End = new float[] { DeserializeFloat(packet.Shot.ToX)' DeserializeFloat(packet.Shot.ToY)' DeserializeFloat(packet.Shot.ToZ) };                        Vector3f feetpos = new Vector3f((float)k.Value.PositionMul32GlX / 32' (float)k.Value.PositionMul32GlY / 32' (float)k.Value.PositionMul32GlZ / 32);                      //var p = PlayerPositionSpawn;                      Box3D bodybox = new Box3D();                      float headsize = (k.Value.ModelHeight - k.Value.EyeHeight) * 2; //0.4f;                      float h = k.Value.ModelHeight - headsize;                      float r = 0.35f;                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + 0' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + 0' feetpos.Z + r);                        bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      bodybox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        Box3D headbox = new Box3D();                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h' feetpos.Z + r);                        headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X - r' feetpos.Y + h + headsize' feetpos.Z + r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z - r);                      headbox.AddPoint(feetpos.X + r' feetpos.Y + h + headsize' feetpos.Z + r);                        if (Intersection.CheckLineBoxExact(pick' headbox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' true);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                      else if (Intersection.CheckLineBoxExact(pick' bodybox) != null)                      {                          for (int i = 0; i < modEventHandlers.onweaponhit.Count; i++)                          {                              try                              {                                  modEventHandlers.onweaponhit[i](clientid' k.Key' packet.Shot.WeaponBlock' false);                              }                              catch (Exception ex)                              {                                  Console.WriteLine("Mod exception: OnWeaponHit");                                  Console.WriteLine(ex.Message);                                  Console.WriteLine(ex.StackTrace);                              }                          }                      }                  }                  break;              case Packet_ClientIdEnum.SpecialKey:                  for (int i = 0; i < modEventHandlers.onspecialkey.Count; i++)                  {                      try                      {                          modEventHandlers.onspecialkey[i](clientid' (SpecialKey)packet.SpecialKey_.Key_);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: OnSpecialKey");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.ActiveMaterialSlot:                  clients[clientid].ActiveMaterialSlot = packet.ActiveMaterialSlot.ActiveMaterialSlot;                  for (int i = 0; i < modEventHandlers.changedactivematerialslot.Count; i++)                  {                      try                      {                          modEventHandlers.changedactivematerialslot[i](clientid);                      }                      catch (Exception ex)                      {                          Console.WriteLine("Mod exception: ChangedActiveMaterialSlot");                          Console.WriteLine(ex.Message);                          Console.WriteLine(ex.StackTrace);                      }                  }                  break;              case Packet_ClientIdEnum.Leave:                  //0: Leave - 1: Crash                  Console.WriteLine("Disconnect reason: {0}"' packet.Leave.Reason);                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.Reload:                  break;              case Packet_ClientIdEnum.ServerQuery:                  //Flood/DDoS-abuse protection                  if ((DateTime.UtcNow - lastQuery) < TimeSpan.FromMilliseconds(200))                  {                      Console.WriteLine("ServerQuery rejected (too many requests)");                      SendPacket(clientid' ServerPackets.DisconnectPlayer("Too many requests!"));                      KillPlayer(clientid);                      return;                  }                  Console.WriteLine("ServerQuery processed.");                  lastQuery = DateTime.UtcNow;                  //Client only wants server information. No real client.                  List<string> playernames = new List<string>();                  lock (clients)                  {                      foreach (var k in clients)                      {                          if (k.Value.queryClient || k.Value.IsBot)                          {                              //Exclude bot players and query clients                              continue;                          }                          playernames.Add(k.Value.playername);                      }                  }                  //Create query answer                  Packet_ServerQueryAnswer answer = new Packet_ServerQueryAnswer()                  {                      Name = config.Name'                      MOTD = config.Motd'                      PlayerCount = playernames.Count'                      MaxPlayers = config.MaxClients'                      PlayerList = string.Join("'"' playernames.ToArray())'                      Port = config.Port'                      GameMode = gameMode'                      Password = config.IsPasswordProtected()'                      PublicHash = ReceivedKey'                      ServerVersion = GameVersion.Version'                      MapSizeX = d_Map.MapSizeX'                      MapSizeY = d_Map.MapSizeY'                      MapSizeZ = d_Map.MapSizeZ'                      ServerThumbnail = GenerateServerThumbnail()'                  };                  //Send answer                  SendPacket(clientid' ServerPackets.AnswerQuery(answer));                  //Directly disconnect client after request.                  SendPacket(clientid' ServerPackets.DisconnectPlayer("Query success."));                  KillPlayer(clientid);                  break;              case Packet_ClientIdEnum.GameResolution:                  //Update client information                  clients[clientid].WindowSize = new int[] { packet.GameResolution.Width' packet.GameResolution.Height };                  //Console.WriteLine("client:{0} --> {1}x{2}"' clientid' clients[clientid].WindowSize[0]' clients[clientid].WindowSize[1]);                  break;              case Packet_ClientIdEnum.EntityInteraction:                  switch (packet.EntityInteraction.InteractionType)                  {                      case Packet_EntityInteractionTypeEnum.Use:                          for (int i = 0; i < modEventHandlers.onentityuse.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityuse[i](clientid' id);                          }                          break;                      case Packet_EntityInteractionTypeEnum.Hit:                          for (int i = 0; i < modEventHandlers.onentityhit.Count; i++)                          {                              ServerEntityId id = c.spawnedEntities[packet.EntityInteraction.EntityId - 64];                              modEventHandlers.onentityhit[i](clientid' id);                          }                          break;                      default:                          Console.WriteLine("Unknown EntityInteractionType: {0}' clientid: {1}"' packet.EntityInteraction.InteractionType' clientid);                          break;                  }                  break;              default:                  Console.WriteLine("Invalid packet: {0}' clientid:{1}"' packet.Id' clientid);                  break;          }
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GenerateServerThumbnail,The following statement contains a magic number: bmp2 = new Bitmap(bmp' 64' 64);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GenerateServerThumbnail,The following statement contains a magic number: bmp2 = new Bitmap(bmp' 64' 64);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GenerateServerThumbnail,The following statement contains a magic number: bmp.Width != 64 || bmp.Height != 64
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GenerateServerThumbnail,The following statement contains a magic number: bmp.Width != 64 || bmp.Height != 64
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,DeserializeFloat,The following statement contains a magic number: return (float)p / 32;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetPlayerSpawnPositionMul32,The following statement contains a magic number: position = new Vector3i(this.defaultPlayerSpawn.x * 32' this.defaultPlayerSpawn.z * 32' this.defaultPlayerSpawn.y * 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetPlayerSpawnPositionMul32,The following statement contains a magic number: position = new Vector3i(this.defaultPlayerSpawn.x * 32' this.defaultPlayerSpawn.z * 32' this.defaultPlayerSpawn.y * 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetPlayerSpawnPositionMul32,The following statement contains a magic number: position = new Vector3i(this.defaultPlayerSpawn.x * 32' this.defaultPlayerSpawn.z * 32' this.defaultPlayerSpawn.y * 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SetFillAreaLimit,The following statement contains a magic number: int maxFill = 500;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CompressChunkNetwork,The following statement contains a magic number: z <= chunk.GetUpperBound(2)
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SendBlobs,The following statement contains a magic number: SendLevelProgress(clientid'                      (int)(((float)i / tosend.Count                                           + ((float)totalsent / blob.Length) / tosend.Count) * 100)' language.ServerProgressDownloadingData());
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SerializeFloat,The following statement contains a magic number: return (int)(p * 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SpawnToVector3i,The following statement contains a magic number: return new Vector3i(x * 32' z * 32' y * 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SpawnToVector3i,The following statement contains a magic number: return new Vector3i(x * 32' z * 32' y * 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,SpawnToVector3i,The following statement contains a magic number: return new Vector3i(x * 32' z * 32' y * 32);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: int xx = pos.x + x - 10 / 2;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: int xx = pos.x + x - 10 / 2;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: int yy = pos.y + y - 10 / 2;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: int yy = pos.y + y - 10 / 2;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: int zz = pos.z + z - 10 / 2;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: int zz = pos.z + z - 10 / 2;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: Length(Minus(PlayerBlockPosition(player.Value)' new Vector3i(xx' yy' zz))) < 3
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: z < 10
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: y < 10
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FindDumpPlace,The following statement contains a magic number: x < 10
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The following statement contains a magic number: int distance = DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' pos);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The following statement contains a magic number: int distance = DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' pos);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The following statement contains a magic number: int distance = DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' pos);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The following statement contains a magic number: distance < 64 * 64
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The following statement contains a magic number: distance < 64 * 64
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The following statement contains a magic number: int distance = DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' pos);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The following statement contains a magic number: int distance = DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' pos);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlaySoundAtExceptPlayer,The following statement contains a magic number: int distance = DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' pos);
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,AddEntity,The following statement contains a magic number: c.Entities = new ServerEntity[256];
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,CommandInterpreter,The following statement contains a magic number: switch (command)  			{  				case "msg":  				case "pm":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.PrivateMessage(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "re":  					if (!string.IsNullOrEmpty(argument))  					{  						this.AnswerMessage(sourceClientId' argument);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op":  				case "chgrp":  				case "cg":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroup(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "op_offline":  				case "chgrp_offline":  				case "cg_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.ChangeGroupOffline(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "remove_client":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.RemoveClientFromConfig(sourceClientId' ss[0]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "login":                  // enables to change temporary group with a group's password (only if group allows it)  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Login(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "welcome":  					this.WelcomeMessage(sourceClientId' argument);  					return;  				case "announcement":  					this.Announcement(sourceClientId' argument);  					return;  				case "logging":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 1)  					{  						this.SetLogging(sourceClientId' ss[0]' "");  						return;  					}  					if (ss.Length == 2)  					{  						this.SetLogging(sourceClientId' ss[0]' ss[1]);  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "kick_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' id);  					return;  				case "kick":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.Kick(sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return;  					}  					this.Kick(sourceClientId' argument);  					return;  				case "list":  					this.List(sourceClientId' argument);  					return;  				case "giveall":  					this.GiveAll(sourceClientId' argument);  					return;  				case "give":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 3)  					{  						int amount;  						if (!Int32.TryParse(ss[2]' out amount))  						{  							SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  							return;  						}  						else  						{  							this.Give(sourceClientId' ss[0]' ss[1]' amount);  						}  						return;  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return;  				case "monsters":  					if (!argument.Equals("off") && !argument.Equals("on"))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.Monsters(sourceClientId' argument);  					return;  				case "area_add":  					int areaId;  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 4 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					if (!Int32.TryParse(ss[0]' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					string coords = ss[1];  					string[] permittedGroups = ss[2].ToString().Split(new[] { ''' });  					string[] permittedUsers = ss[3].ToString().Split(new[] { ''' });    					int? areaLevel;  					try  					{  						areaLevel = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						areaLevel = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					this.AreaAdd(sourceClientId' areaId' coords' permittedGroups' permittedUsers' areaLevel);  					return;  				case "area_delete":  					if (!Int32.TryParse(argument' out areaId))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.AreaDelete(sourceClientId' areaId);  					return;  				case "help":  					this.Help(sourceClientId);  					return;  				case "run":  				case "":                  // JavaScript                  // assume script expression or command coming  					var script = argument;  					RunInClientSandbox(script' sourceClientId);  					return;  				case "crash":  					KillPlayer(sourceClientId);  					return;  				case "set_spawn":                  //           0    1      2 3 4                  // argument: type target x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 5)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                    // Add an empty target argument' when user sets default spawn.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}    					int x;  					int y;  					int? z;  					try  					{  						x = Convert.ToInt32(ss[2]);  						y = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[4]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' ss[0]' ss[1]' x' y' z);  					return;  				case "set_home":                  // When no coordinates are given' set spawn to players current position.  					if (string.IsNullOrEmpty(argument))  					{  						this.SetSpawnPosition(sourceClientId'  							(int)GetClient(sourceClientId).PositionMul32GlX / 32'  							(int)GetClient(sourceClientId).PositionMul32GlZ / 32'  							(int)GetClient(sourceClientId).PositionMul32GlY / 32);  						return;  					}                  //            0 1 2                  // agrument:  x y z  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidSpawnPosition"));  						return;  					}  					this.SetSpawnPosition(sourceClientId' x' y' z);  					return;  				case "privilege_add":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeAdd(sourceClientId' ss[0]' ss[1]);  					return;  				case "privilege_remove":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 2)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					this.PrivilegeRemove(sourceClientId' ss[0]' ss[1]);  					return;  				case "restart":  					this.RestartServer(sourceClientId);  					break;  				case "shutdown":  					this.ShutdownServer(sourceClientId);  					break;  			//case "crashserver": for (; ; ) ;  				case "stats":  					double seconds = (DateTime.UtcNow - statsupdate).TotalSeconds;  					SendMessage(sourceClientId' "Packets/s:" + decimal.Round((decimal)(StatTotalPackets / seconds)' 2' MidpointRounding.AwayFromZero));  					SendMessage(sourceClientId' "Total KBytes/s:" + decimal.Round((decimal)(StatTotalPacketsLength / seconds / 1024)' 2' MidpointRounding.AwayFromZero));  					break;  				case "tp":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length != 1)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.Equals(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					foreach (var k in clients)  					{  						if (k.Value.playername.StartsWith(ss[0]' StringComparison.InvariantCultureIgnoreCase))  						{  							this.TeleportToPlayer(sourceClientId' k.Key);  							return;  						}  					}  					SendMessage(sourceClientId' string.Format(language.Get("Server_CommandNonexistantPlayer")' colorError' ss[0]));  					break;  				case "tp_pos":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[0]);  						y = Convert.ToInt32(ss[1]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportToPosition(sourceClientId' x' y' z);  					break;  				case "teleport_player":  					ss = argument.Split(new[] { ' ' });    					if (ss.Length < 3 || ss.Length > 4)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}    					try  					{  						x = Convert.ToInt32(ss[1]);  						y = Convert.ToInt32(ss[2]);  					}  					catch (IndexOutOfRangeException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}    					try  					{  						z = Convert.ToInt32(ss[3]);  					}  					catch (IndexOutOfRangeException)  					{  						z = null;  					}  					catch (FormatException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					catch (OverflowException)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidPosition"));  						return;  					}  					this.TeleportPlayer(sourceClientId' ss[0]' x' y' z);  					break;  				case "backup_database":  					if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.backup_database))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));  						break;  					}  					if (!BackupDatabase(argument))  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupFailed")' colorError));  					}  					else  					{  						SendMessage(sourceClientId' string.Format(language.Get("Server_CommandBackupCreated")' colorSuccess));  						ServerEventLog(String.Format("{0} backups database: {1}."' GetClient(sourceClientId).playername' argument));  					}  					break;  			/*          case "load":              if (!GetClient(sourceClientId).privileges.Contains(ServerClientMisc.Privilege.load))              {                  SendMessage(sourceClientId' string.Format(language.Get("Server_CommandInsufficientPrivileges")' colorError));                  break;              }              if (!GameStorePath.IsValidName(argument))              {                  SendMessage(sourceClientId' string.Format("Invalid load filename: {0}"' argument));                  break;              }              if (!LoadDatabase(argument))              {                  SendMessage(sourceClientId' string.Format("{0}World could not be loaded. Check filename."' colorError));              }              else              {                  SendMessage(sourceClientId' string.Format("{0}World loaded."' colorSuccess));                  ServerEventLog(String.Format("{0} loads world: {1}."' GetClient(sourceClientId).playername' argument));              }              break;              */  				case "reset_inventory":  					this.ResetInventory(sourceClientId' argument);  					return;  				case "fill_limit":                  //           0    1      2                  // agrument: type target maxFill  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2 || ss.Length > 3)  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}                  // Add an empty target argument' when user sets default max-fill.  					if (ss[0].Equals("-d") || ss[0].Equals("-default"))  					{  						string[] ssTemp = new string[ss.Length + 1];  						ssTemp[0] = ss[0];  						ssTemp[1] = "";  						Array.Copy(ss' 1' ssTemp' 2' ss.Length - 1);  						ss = ssTemp;  					}  					int maxFill;  					if (!Int32.TryParse(ss[2]' out maxFill))  					{  						SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return;  					}  					else  					{  						this.SetFillAreaLimit(sourceClientId' ss[0]' ss[1]' maxFill);  					}  					return;  				case "time":  					{  						TimeCommand(sourceClientId' argument);  					}  					break;  				default:  					for (int i = 0; i < systemsCount; i++)  					{  						if (systems[i] == null)  						{  							continue;  						}  						try  						{  							if (systems[i].OnCommand(this' sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					for (int i = 0; i < modEventHandlers.oncommand.Count; i++)  					{  						try  						{  							if (modEventHandlers.oncommand[i](sourceClientId' command' argument))  							{  								return;  							}  						}  						catch  						{  							SendMessage(sourceClientId' language.Get("Server_CommandException"));  						}  					}  					SendMessage(sourceClientId' colorError + language.Get("Server_CommandUnknown") + command);  					return;  			}
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GiveAll,The following statement contains a magic number: int maxStack = 9999;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Give,The following statement contains a magic number: int maxStack = 9999;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TimeCommand,The following statement contains a magic number: strSplit.Length == 2
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,DontSpawnPlayerInWater,The following statement contains a magic number: bonus = 10;
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,DontSpawnPlayerInWater,The following statement contains a magic number: i < playerareasize / 4 - 5
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,DontSpawnPlayerInWater,The following statement contains a magic number: i < playerareasize / 4 - 5
Magic Number,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,IsPlayerPositionDry,The following statement contains a magic number: i < 4
Magic Number,ManicDigger.Server,GameTime,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetQuarterHourPartOfDay,The following statement contains a magic number: int nReturn = (_time.Hours * 4) + (_time.Minutes / 15) + 1;
Magic Number,ManicDigger.Server,GameTime,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetQuarterHourPartOfDay,The following statement contains a magic number: int nReturn = (_time.Hours * 4) + (_time.Minutes / 15) + 1;
Magic Number,ManicDigger.Server,GameTime,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,Tick,The following statement contains a magic number: _nLastIngameSecond < (_watchIngameTime.ElapsedMilliseconds / 1000)
Magic Number,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,blockheight,The following statement contains a magic number: return map.GetMapSizeZ() / 2;
Magic Number,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FromMapPos,The following statement contains a magic number: v = v >> 20;
Magic Number,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,FromMapPos,The following statement contains a magic number: v = v >> 20;
Magic Number,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ToMapPos,The following statement contains a magic number: v = (ulong)x << 40;
Magic Number,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ToMapPos,The following statement contains a magic number: v |= (ulong)y << 20;
Magic Number,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlayerArea,The following statement contains a magic number: int x = p.X + centerAreaSize / 2;
Magic Number,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlayerArea,The following statement contains a magic number: int y = p.Y + centerAreaSize / 2;
Magic Number,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlayerArea,The following statement contains a magic number: x -= playerAreaSize / 2;
Magic Number,ManicDigger.Server,MapUtil,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,PlayerArea,The following statement contains a magic number: y -= playerAreaSize / 2;
Magic Number,ManicDigger.Server,Timer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,gettime,The following statement contains a magic number: return (double)DateTime.UtcNow.Ticks / (10 * 1000 * 1000);
Magic Number,ManicDigger.Server,Timer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,gettime,The following statement contains a magic number: return (double)DateTime.UtcNow.Ticks / (10 * 1000 * 1000);
Magic Number,ManicDigger.Server,Timer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,gettime,The following statement contains a magic number: return (double)DateTime.UtcNow.Ticks / (10 * 1000 * 1000);
Magic Number,ManicDigger.Server,Vector2i,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: int hash = 23;
Magic Number,ManicDigger.Server,Vector2i,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + x;
Magic Number,ManicDigger.Server,Vector2i,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + y;
Magic Number,ManicDigger.Server,Vector3i,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: int hash = 23;
Magic Number,ManicDigger.Server,Vector3i,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + x;
Magic Number,ManicDigger.Server,Vector3i,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + y;
Magic Number,ManicDigger.Server,Vector3i,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + z;
Magic Number,ManicDigger.Server,Vector3f,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: int hash = 23;
Magic Number,ManicDigger.Server,Vector3f,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + X.GetHashCode();
Magic Number,ManicDigger.Server,Vector3f,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + Y.GetHashCode();
Magic Number,ManicDigger.Server,Vector3f,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + Z.GetHashCode();
Magic Number,ManicDigger.Server,ServerConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,ServerConfig,The following statement contains a magic number: this.Port = 25565;
Magic Number,ManicDigger.Server,ServerConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,ServerConfig,The following statement contains a magic number: this.MaxClients = 16;
Magic Number,ManicDigger.Server,ServerConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,ServerConfig,The following statement contains a magic number: this.ClientConnectionTimeout = 600;
Magic Number,ManicDigger.Server,ServerConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,ServerConfig,The following statement contains a magic number: this.ClientPlayingTimeout = 60;
Magic Number,ManicDigger.Server,ServerConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,ServerConfig,The following statement contains a magic number: this.MapSizeX = 9984;
Magic Number,ManicDigger.Server,ServerConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,ServerConfig,The following statement contains a magic number: this.MapSizeY = 9984;
Magic Number,ManicDigger.Server,ServerConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,ServerConfig,The following statement contains a magic number: this.MapSizeZ = 128;
Magic Number,ManicDigger.Server,ServerConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,ServerConfig,The following statement contains a magic number: this.AutoRestartCycle = 6;
Magic Number,ManicDigger.Server,ServerConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,ServerConfig,The following statement contains a magic number: this.PlayerDrawDistance = 128;
Magic Number,ManicDigger.Server,ServerConfigMisc,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConfig.cs,getDefaultAreas,The following statement contains a magic number: protectedArea.Id = 2;
Magic Number,ManicDigger.Server,ServerConsole,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerConsole.cs,CommandLineReader,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The following statement contains a magic number: switch (command)  			{  				case "banip_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' id);  					return true;  				case "banip":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						BanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					BanIP(server' sourceClientId' argument);  					return true;  				case "ban_id":  					ss = argument.Split(new[] { ' ' });  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' id' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' id);  					return true;  				case "ban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						Ban(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					Ban(server' sourceClientId' argument);  					return true;  				case "timebanip_id":  //Format: /timebanip_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' id' duration);  					return true;  				case "timebanip":  //Format: /timebanip <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBanIP(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBanIP(server' sourceClientId' ss[0]' duration);  					return true;  				case "timeban_id":  //Format: /timeban_id <player_id> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[0]' out id))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' id' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' id' duration);  					return true;  				case "timeban":  //Format: /timeban <playername> <duration> [reason]  					ss = argument.Split(new[] { ' ' });  					if (ss.Length < 2)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (!Int32.TryParse(ss[1]' out duration))  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  						return true;  					}  					if (duration <= 0)  					{  						server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandTimeBanInvalidValue"));  						return true;  					}  					if (ss.Length >= 3)  					{  						this.TimeBan(server' sourceClientId' ss[0]' string.Join(" "' ss' 2' ss.Length - 2)' duration);  						return true;  					}  					this.TimeBan(server' sourceClientId' ss[0]' duration);  					return true;  				case "ban_offline":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length >= 2)  					{  						this.BanOffline(server' sourceClientId' ss[0]' string.Join(" "' ss' 1' ss.Length - 1));  						return true;  					}  					this.BanOffline(server' sourceClientId' argument);  					return true;  				case "unban":  					ss = argument.Split(new[] { ' ' });  					if (ss.Length == 2)  					{  						this.Unban(server' sourceClientId' ss[0]' ss[1]);  						return true;  					}  					server.SendMessage(sourceClientId' colorError + language.Get("Server_CommandInvalidArgs"));  					return true;  				default:  					return false;  			}
Magic Number,ManicDigger.Server,ServerSystemChunksSimulation,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ChunksSimulation.cs,chunksimulation_every,The following statement contains a magic number: return (int)(1 / server.SIMULATION_STEP_LENGTH) * 60 * 10;
Magic Number,ManicDigger.Server,ServerSystemChunksSimulation,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ChunksSimulation.cs,chunksimulation_every,The following statement contains a magic number: return (int)(1 / server.SIMULATION_STEP_LENGTH) * 60 * 10;
Magic Number,ManicDigger.Server,ServerSystemChunksSimulation,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ChunksSimulation.cs,AddMonsters,The following statement contains a magic number: chunk.Monsters.Add(new Monster() {  						X = px'  						Y = py'  						Z = pz'  						Id = NewMonsterId(server)'  						Health = 20'  						MonsterType = type  					});
Magic Number,ManicDigger.Server,ServerSystemChunksSimulation,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ChunksSimulation.cs,AddMonsters,The following statement contains a magic number: tries++ > 500
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,NotifyEntities,The following statement contains a magic number: server.SendPacket(clientid' ServerPackets.EntityDespawn(64 + onClientId));
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,NotifyEntities,The following statement contains a magic number: server.SendPacket(clientid' ServerPackets.EntitySpawn(64 + onClientId' ne));
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,NotifyEntities,The following statement contains a magic number: server.SendPacket(clientid' ServerPackets.EntitySpawn(64 + i' ne));
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The following statement contains a magic number: int playerx = c.PositionMul32GlX / 32;
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The following statement contains a magic number: int playery = c.PositionMul32GlZ / 32;
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The following statement contains a magic number: int playerz = c.PositionMul32GlY / 32;
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The following statement contains a magic number: zz < 2
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The following statement contains a magic number: yy < 2
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The following statement contains a magic number: xx < 2
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The following statement contains a magic number: list.Sort((a' b) =>  			{  				var entityA = server.d_Map.GetChunk(a.chunkx * Server.chunksize' a.chunky * Server.chunksize' a.chunkz * Server.chunksize).Entities[a.id];  				var entityB = server.d_Map.GetChunk(b.chunkx * Server.chunksize' b.chunky * Server.chunksize' b.chunkz * Server.chunksize).Entities[b.id];    				Vector3i posA = new Vector3i((int)entityA.position.x' (int)entityA.position.y' (int)entityA.position.z);  				Vector3i posB = new Vector3i((int)entityB.position.x' (int)entityB.position.y' (int)entityB.position.z);  				Vector3i posPlayer = new Vector3i(c.PositionMul32GlX / 32' c.PositionMul32GlY / 32' c.PositionMul32GlZ / 32);  				return server.DistanceSquared(posA' posPlayer).CompareTo(server.DistanceSquared(posB' posPlayer));  			}  			);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The following statement contains a magic number: list.Sort((a' b) =>  			{  				var entityA = server.d_Map.GetChunk(a.chunkx * Server.chunksize' a.chunky * Server.chunksize' a.chunkz * Server.chunksize).Entities[a.id];  				var entityB = server.d_Map.GetChunk(b.chunkx * Server.chunksize' b.chunky * Server.chunksize' b.chunkz * Server.chunksize).Entities[b.id];    				Vector3i posA = new Vector3i((int)entityA.position.x' (int)entityA.position.y' (int)entityA.position.z);  				Vector3i posB = new Vector3i((int)entityB.position.x' (int)entityB.position.y' (int)entityB.position.z);  				Vector3i posPlayer = new Vector3i(c.PositionMul32GlX / 32' c.PositionMul32GlY / 32' c.PositionMul32GlZ / 32);  				return server.DistanceSquared(posA' posPlayer).CompareTo(server.DistanceSquared(posB' posPlayer));  			}  			);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,FindNearEntities,The following statement contains a magic number: list.Sort((a' b) =>  			{  				var entityA = server.d_Map.GetChunk(a.chunkx * Server.chunksize' a.chunky * Server.chunksize' a.chunkz * Server.chunksize).Entities[a.id];  				var entityB = server.d_Map.GetChunk(b.chunkx * Server.chunksize' b.chunky * Server.chunksize' b.chunkz * Server.chunksize).Entities[b.id];    				Vector3i posA = new Vector3i((int)entityA.position.x' (int)entityA.position.y' (int)entityA.position.z);  				Vector3i posB = new Vector3i((int)entityB.position.x' (int)entityB.position.y' (int)entityB.position.z);  				Vector3i posPlayer = new Vector3i(c.PositionMul32GlX / 32' c.PositionMul32GlY / 32' c.PositionMul32GlZ / 32);  				return server.DistanceSquared(posA' posPlayer).CompareTo(server.DistanceSquared(posB' posPlayer));  			}  			);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,ToNetworkEntityPosition,The following statement contains a magic number: p.X = platform.FloatToInt(position.x * 32);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,ToNetworkEntityPosition,The following statement contains a magic number: p.Y = platform.FloatToInt(position.y * 32);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,ToNetworkEntityPosition,The following statement contains a magic number: p.Z = platform.FloatToInt(position.z * 32);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,ToNetworkEntity,The following statement contains a magic number: p.DrawModel.EyeHeight = platform.FloatToInt(entity.drawModel.eyeHeight * 32);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,ToNetworkEntity,The following statement contains a magic number: p.DrawModel.ModelHeight = platform.FloatToInt(entity.drawModel.modelHeight * 32);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,ToNetworkEntity,The following statement contains a magic number: p.DrawText.Dx = platform.FloatToInt(entity.drawText.dx * 32);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,ToNetworkEntity,The following statement contains a magic number: p.DrawText.Dy = platform.FloatToInt(entity.drawText.dy * 32);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,ToNetworkEntity,The following statement contains a magic number: p.DrawText.Dz = platform.FloatToInt(entity.drawText.dz * 32);
Magic Number,ManicDigger.Server,ServerSystemNotifyEntities,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyEntities.cs,ToNetworkEntity,The following statement contains a magic number: p.Push.RangeFloat = platform.FloatToInt(entity.push.range * 32);
Magic Number,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,Update,The following statement contains a magic number: int[] retNearest = new int[3];
Magic Number,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,Update,The following statement contains a magic number: LoadAndSendChunk(server' k.Key' retNearest[0]' retNearest[1]' retNearest[2]' s);
Magic Number,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,Update,The following statement contains a magic number: (loaded) && (s.ElapsedMilliseconds < 10)
Magic Number,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,NearestDirty,The following statement contains a magic number: retNearest[2] = -1;
Magic Number,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,NearestDirty,The following statement contains a magic number: int chunksxy = mapAreaSize(server) / Server.chunksize / 2;
Magic Number,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,NearestDirty,The following statement contains a magic number: int chunksz = mapAreaSizeZ(server) / Server.chunksize / 2;
Magic Number,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,NearestDirty,The following statement contains a magic number: retNearest[2] = z;
Magic Number,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,SendChunk,The following statement contains a magic number: Server.Parts(compressedchunk' 1024)
Magic Number,ManicDigger.Server,ServerSystemNotifyMap,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\NotifyMap.cs,mapAreaSize,The following statement contains a magic number: return server.chunkdrawdistance * Server.chunksize * 2;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseWithTool,The following statement contains a magic number: e.position.x = x + one / 2;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseWithTool,The following statement contains a magic number: e.position.z = y + one / 2;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawModel.modelHeight = one * 13 / 10;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawModel.modelHeight = one * 13 / 10;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawText.dx = one * 3 / 32;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawText.dx = one * 3 / 32;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawText.dy = one * 36 / 32;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawText.dy = one * 36 / 32;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawText.dz = one * 3 / 32;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawText.dz = one * 3 / 32;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: int sizex = 32;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: int sizey = 32;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: int sizez = 32;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawArea.x = (int)e.position.x - sizex / 2;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawArea.y = (int)e.position.y - sizey / 2;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawArea.z = (int)e.position.z - sizez / 2;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: byte heading = (byte)(e.position.heading + 255 / 8);
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: byte heading = (byte)(e.position.heading + 255 / 8);
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: int rotDir = heading / 64;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawArea.x = (int)e.position.x - sizex / 2;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,UpdateEntity,The following statement contains a magic number: e.drawArea.y = (int)e.position.y - sizey / 2;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Width = 400;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Height = 400;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets = new ManicDigger.Widget[4 + server.serverClient.Groups.Count * 2];
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets = new ManicDigger.Widget[4 + server.serverClient.Groups.Count * 2];
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: var font = new DialogFont("Verdana"' 11f' DialogFontStyle.Bold);
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 400' 400' Game.ColorFromArgb(255' 50' 50' 50));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 400' 400' Game.ColorFromArgb(255' 50' 50' 50));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 400' 400' Game.ColorFromArgb(255' 50' 50' 50));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 400' 400' Game.ColorFromArgb(255' 50' 50' 50));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 400' 400' Game.ColorFromArgb(255' 50' 50' 50));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 400' 400' Game.ColorFromArgb(255' 50' 50' 50));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.permissionSign.name' font' 50' 50' 200' 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.permissionSign.name' font' 50' 50' 200' 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.permissionSign.name' font' 50' 50' 200' 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.permissionSign.name' font' 50' 50' 200' 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.permissionSign.name' font' 50' 50' 200' 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget button = Widget.MakeSolid(50' 150 + i * 50' 100' 40' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget button = Widget.MakeSolid(50' 150 + i * 50' 100' 40' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget button = Widget.MakeSolid(50' 150 + i * 50' 100' 40' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget button = Widget.MakeSolid(50' 150 + i * 50' 100' 40' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget button = Widget.MakeSolid(50' 150 + i * 50' 100' 40' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget button = Widget.MakeSolid(50' 150 + i * 50' 100' 40' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget button = Widget.MakeSolid(50' 150 + i * 50' 100' 40' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget button = Widget.MakeSolid(50' 150 + i * 50' 100' 40' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget button = Widget.MakeSolid(50' 150 + i * 50' 100' 40' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: button.ClickKey = (char)13;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText(g.Name' font' 50' 150 + i * 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText(g.Name' font' 50' 150 + i * 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText(g.Name' font' 50' 150 + i * 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText(g.Name' font' 50' 150 + i * 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(200' 50' 100' 50' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(200' 50' 100' 50' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(200' 50' 100' 50' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(200' 50' 100' 50' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(200' 50' 100' 50' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(200' 50' 100' 50' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(200' 50' 100' 50' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(200' 50' 100' 50' Game.ColorFromArgb(255' 100' 100' 100));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: okHandler.ClickKey = (char)13;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText("Set player"' font' 200' 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText("Set player"' font' 200' 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnUseEntity,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText("Set player"' font' 200' 50' Game.ColorFromArgb(255' 0' 0' 0));
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnPermission,The following statement contains a magic number: z < 3
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnPermission,The following statement contains a magic number: y < 3
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,OnPermission,The following statement contains a magic number: x < 3
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The following statement contains a magic number: double headingDeg = (360.0 / (2.0 * Math.PI)) * Math.Acos(deltaX / Math.Sqrt(deltaX * deltaX + deltaY * deltaY)) + 90.0;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The following statement contains a magic number: double headingDeg = (360.0 / (2.0 * Math.PI)) * Math.Acos(deltaX / Math.Sqrt(deltaX * deltaX + deltaY * deltaY)) + 90.0;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The following statement contains a magic number: double headingDeg = (360.0 / (2.0 * Math.PI)) * Math.Acos(deltaX / Math.Sqrt(deltaX * deltaX + deltaY * deltaY)) + 90.0;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The following statement contains a magic number: headingDeg = -headingDeg - 180.0;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The following statement contains a magic number: headingDeg += 360.0;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The following statement contains a magic number: headingDeg -= 360.0;
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The following statement contains a magic number: headingDeg > 360.0
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The following statement contains a magic number: return (byte)((headingDeg / 360.0) * 256.0);
Magic Number,ManicDigger.Server,ServerSystemPermissionSign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\PermissionSign.cs,GetHeadingLookAt,The following statement contains a magic number: return (byte)((headingDeg / 360.0) * 256.0);
Magic Number,ManicDigger.Server,ServerSystemHeartbeat,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ServerHeartbeat.cs,ServerSystemHeartbeat,The following statement contains a magic number: elapsed = 60;
Magic Number,ManicDigger.Server,ServerSystemHeartbeat,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ServerHeartbeat.cs,Update,The following statement contains a magic number: elapsed -= 60;
Magic Number,ManicDigger.Server,ServerSystemHeartbeat,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ServerHeartbeat.cs,Update,The following statement contains a magic number: elapsed >= 60
Magic Number,ManicDigger.Server,ServerHeartbeat,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ServerHeartbeat.cs,ServerHeartbeat,The following statement contains a magic number: this.MaxClients = 16;
Magic Number,ManicDigger.Server,ServerHeartbeat,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ServerHeartbeat.cs,ServerHeartbeat,The following statement contains a magic number: this.Port = 25565;
Magic Number,ManicDigger.Server,ServerHeartbeat,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\ServerHeartbeat.cs,SendHeartbeat,The following statement contains a magic number: request.Timeout = 15000;
Magic Number,ManicDigger.Server,ServerMonitorConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerMonitor.cs,ServerMonitorConfig,The following statement contains a magic number: this.MaxPackets = 500;
Magic Number,ManicDigger.Server,ServerMonitorConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerMonitor.cs,ServerMonitorConfig,The following statement contains a magic number: this.MaxBlocks = 50;
Magic Number,ManicDigger.Server,ServerMonitorConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerMonitor.cs,ServerMonitorConfig,The following statement contains a magic number: this.MaxMessages = 3;
Magic Number,ManicDigger.Server,ServerMonitorConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerMonitor.cs,ServerMonitorConfig,The following statement contains a magic number: this.MessageBanTime = 60;
Magic Number,ManicDigger.Server,ServerMonitorConfig,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\ServerMonitor.cs,ServerMonitorConfig,The following statement contains a magic number: this.TimeIntervall = 3;
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,NearestPlayer,The following statement contains a magic number: int distance = server.DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' new Vector3i(x' y' z));
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,NearestPlayer,The following statement contains a magic number: int distance = server.DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' new Vector3i(x' y' z));
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,NearestPlayer,The following statement contains a magic number: int distance = server.DistanceSquared(new Vector3i((int)k.Value.PositionMul32GlX / 32' (int)k.Value.PositionMul32GlZ / 32' (int)k.Value.PositionMul32GlY / 32)' new Vector3i(x' y' z));
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,GetPlayerPositionX,The following statement contains a magic number: return (float)server.GetClient(player).PositionMul32GlX / 32;
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,GetPlayerPositionY,The following statement contains a magic number: return (float)server.GetClient(player).PositionMul32GlZ / 32;
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,GetPlayerPositionZ,The following statement contains a magic number: return (float)server.GetClient(player).PositionMul32GlY / 32;
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,SetPlayerAreaSize,The following statement contains a magic number: server.centerareasize = size / 2;
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,SetPlayerAreaSize,The following statement contains a magic number: server.drawdistance = size / 2;
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,GetDefaultSpawnPosition,The following statement contains a magic number: return new float[3] { (float)pos.x / 32' (float)pos.z / 32' (float)pos.y / 32 };
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,GetDefaultSpawnPosition,The following statement contains a magic number: return new float[3] { (float)pos.x / 32' (float)pos.z / 32' (float)pos.y / 32 };
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,GetDefaultSpawnPosition,The following statement contains a magic number: return new float[3] { (float)pos.x / 32' (float)pos.z / 32' (float)pos.y / 32 };
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,GetDefaultSpawnPosition,The following statement contains a magic number: return new float[3] { (float)pos.x / 32' (float)pos.z / 32' (float)pos.y / 32 };
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,GetDefaultSpawnPosition,The following statement contains a magic number: return new int[3] { server.defaultPlayerSpawn.x' server.defaultPlayerSpawn.y' server.defaultPlayerSpawn.z };
Magic Number,ManicDigger.Server,ModManager1,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mod.cs,MeasureTextSize,The following statement contains a magic number: return new float[] { text.Length * 1f * font.Size' 1.7f * font.Size };
Magic Number,ManicDigger.Server,ServerSystemUnloadUnusedChunks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\UnloadUnusedChunks.cs,Update,The following statement contains a magic number: int viewdist = (int)(server.chunkdrawdistance * Server.chunksize * 1.8f);
Magic Number,ManicDigger.Server,ServerSystemUnloadUnusedChunks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\UnloadUnusedChunks.cs,Update,The following statement contains a magic number: i < 100
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,Start,The following statement contains a magic number: m.SetBlockType(75' "EntitySign"' new BlockType()  			{  				AllTextures = "VandalFinder"'  				DrawType = DrawType.Solid'  				WalkableType = WalkableType.Solid'  				IsUsable = true'  				IsTool = true'  			});
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUpdate,The following statement contains a magic number: e.drawModel.modelHeight = 1.3f;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUpdate,The following statement contains a magic number: e.drawText.dx = 0.1f;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUpdate,The following statement contains a magic number: e.drawText.dy = 1.1f;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUpdate,The following statement contains a magic number: e.drawText.dz = 0.1f;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Width = 400;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Height = 200;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets = new Widget[4];
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: var font = new DialogFont("Verdana"' 11f' DialogFontStyle.Bold);
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 300' 200' Color.FromArgb(255' 50' 50' 50).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 300' 200' Color.FromArgb(255' 50' 50' 50).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 300' 200' Color.FromArgb(255' 50' 50' 50).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 300' 200' Color.FromArgb(255' 50' 50' 50).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 300' 200' Color.FromArgb(255' 50' 50' 50).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeSolid(0' 0' 300' 200' Color.FromArgb(255' 50' 50' 50).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.sign.text' font' 50' 50' 200' 50' Color.FromArgb(255' 0' 0' 0).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.sign.text' font' 50' 50' 200' 50' Color.FromArgb(255' 0' 0' 0).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.sign.text' font' 50' 50' 200' 50' Color.FromArgb(255' 0' 0' 0).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.sign.text' font' 50' 50' 200' 50' Color.FromArgb(255' 0' 0' 0).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeTextBox(e.sign.text' font' 50' 50' 200' 50' Color.FromArgb(255' 0' 0' 0).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(100' 100' 100' 50' Color.FromArgb(255' 100' 100' 100).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(100' 100' 100' 50' Color.FromArgb(255' 100' 100' 100).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(100' 100' 100' 50' Color.FromArgb(255' 100' 100' 100).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(100' 100' 100' 50' Color.FromArgb(255' 100' 100' 100).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(100' 100' 100' 50' Color.FromArgb(255' 100' 100' 100).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(100' 100' 100' 50' Color.FromArgb(255' 100' 100' 100).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(100' 100' 100' 50' Color.FromArgb(255' 100' 100' 100).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: Widget okHandler = Widget.MakeSolid(100' 100' 100' 50' Color.FromArgb(255' 100' 100' 100).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: okHandler.ClickKey = (char)13;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText("OK"' font' 100' 100' Color.FromArgb(255' 0' 0' 0).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText("OK"' font' 100' 100' Color.FromArgb(255' 0' 0' 0).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnEntityUse,The following statement contains a magic number: d.Widgets[widgetCount++] = Widget.MakeText("OK"' font' 100' 100' Color.FromArgb(255' 0' 0' 0).ToArgb());
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnUseWithTool,The following statement contains a magic number: e.position.x = x + 0.5f;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,OnUseWithTool,The following statement contains a magic number: e.position.z = y + 0.5f;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The following statement contains a magic number: double headingDeg = (360.0 / (2.0 * Math.PI)) * Math.Acos(deltaX / Math.Sqrt(deltaX * deltaX + deltaY * deltaY)) + 90.0;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The following statement contains a magic number: double headingDeg = (360.0 / (2.0 * Math.PI)) * Math.Acos(deltaX / Math.Sqrt(deltaX * deltaX + deltaY * deltaY)) + 90.0;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The following statement contains a magic number: double headingDeg = (360.0 / (2.0 * Math.PI)) * Math.Acos(deltaX / Math.Sqrt(deltaX * deltaX + deltaY * deltaY)) + 90.0;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The following statement contains a magic number: headingDeg = -headingDeg - 180.0;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The following statement contains a magic number: headingDeg += 360.0;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The following statement contains a magic number: headingDeg -= 360.0;
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The following statement contains a magic number: headingDeg > 360.0
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The following statement contains a magic number: return (byte)((headingDeg / 360.0) * 256.0);
Magic Number,ManicDigger.Mods,EntitySigns,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\EntitySigns.cs,GetHeadingLookAt,The following statement contains a magic number: return (byte)((headingDeg / 360.0) * 256.0);
Magic Number,ManicDigger.Mods,Food,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Food.cs,OnUse,The following statement contains a magic number: health += 30;
Magic Number,ManicDigger.Mods,Sign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Unused\Sign.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Sign"' new BlockType()  			               {  			               	AllTextures = "Sign"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	IsUsable = true'  			               	IsTool = true'  			               });
Magic Number,ManicDigger.Mods,Sign,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Unused\Sign.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "PermissionSign"' new BlockType()  			               {  			               	AllTextures = "PermissionSign"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	IsUsable = true'  			               	IsTool = true'  			               });
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnLoad,The following statement contains a magic number: var l = new object[8];
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnLoad,The following statement contains a magic number: l[2] = br.ReadInt16();
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnLoad,The following statement contains a magic number: l[3] = br.ReadInt16();
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnLoad,The following statement contains a magic number: l[4] = br.ReadInt16();
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnLoad,The following statement contains a magic number: l[5] = br.ReadBoolean();
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnLoad,The following statement contains a magic number: l[6] = br.ReadString();
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnLoad,The following statement contains a magic number: l[7] = br.ReadString();
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnSave,The following statement contains a magic number: bw.Write((short)l[2]);
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnSave,The following statement contains a magic number: bw.Write((short)l[3]);
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnSave,The following statement contains a magic number: bw.Write((short)l[4]);
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnSave,The following statement contains a magic number: bw.Write((bool)l[5]);
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnSave,The following statement contains a magic number: bw.Write((string)l[6]);
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnSave,The following statement contains a magic number: bw.Write((string)l[7]);
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnBuild,The following statement contains a magic number: lines.RemoveRange(0' 1000);
Magic Number,ManicDigger.Mods,BuildLog,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\BuildLog.cs,OnDelete,The following statement contains a magic number: lines.RemoveRange(0' 1000);
Magic Number,ManicDigger.Mods,Core,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Core.cs,Start,The following statement contains a magic number: m.SetPlayerAreaSize(512);
Magic Number,ManicDigger.Mods,Core,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Core.cs,Start,The following statement contains a magic number: m.SetDaysPerYear(24);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Cobblestone"' 1' "Stone"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Stone"' 2' "Cobblestone"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("OakWood"' 2' "OakTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("BirchWood"' 2' "BirchTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("SpruceWood"' 2' "SpruceTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Brick"' 1' "Stone"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("CraftingTable"' 1' "OakWood"' 3);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("CraftingTable"' 1' "BirchWood"' 3);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("CraftingTable"' 1' "SpruceWood"' 3);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Stair"' 2' "DoubleStair"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("DoubleStair"' 1' "Stone"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("DoubleStair"' 1' "Stair"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Glass"' 1' "Sand"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("RedRoseDecorations"' 1' "OakLeaves"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("RedRoseDecorations"' 1' "BirchLeaves"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("RedRoseDecorations"' 1' "SpruceLeaves"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("YellowFlowerDecorations"' 1' "OakLeaves"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("YellowFlowerDecorations"' 1' "BirchLeaves"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("YellowFlowerDecorations"' 1' "SpruceLeaves"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("OakSapling"' 1' "OakLeaves"' 3);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("BirchSapling"' 1' "BirchLeaves"' 3);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("SpruceSapling"' 1' "SpruceLeaves"' 3);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("RedMushroom"' 1' "Dirt"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("BrownMushroom"' 1' "Dirt"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("RedMushroom"' 1' "Grass"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("BrownMushroom"' 1' "Grass"' 10);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Bookcase"' 1' "OakWood"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Bookcase"' 1' "BirchWood"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Bookcase"' 1' "SpruceWood"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("RedCloth"' 1' "RedCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("OrangeCloth"' 1' "OrangeCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("YellowCloth"' 1' "YellowCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("LightGreenCloth"' 1' "LightGreenCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("GreenCloth"' 1' "GreenCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("AquaGreenCloth"' 1' "AquaGreenCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("CyanCloth"' 1' "CyanCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("BlueCloth"' 1' "BlueCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("PurpleCloth"' 1' "PurpleCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("IndigoCloth"' 1' "IndigoCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("VioletCloth"' 1' "VioletCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("MagentaCloth"' 1' "MagentaCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("PinkCloth"' 1' "PinkCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("BlackCloth"' 1' "BlackCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("GrayCloth"' 1' "GrayCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("WhiteCloth"' 1' "WhiteCarpet"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("RedCarpet"' 4' "RedCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("OrangeCarpet"' 4' "OrangeCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("YellowCarpet"' 4' "YellowCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("LightGreenCarpet"' 4' "LightGreenCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("GreenCarpet"' 4' "GreenCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("AquaGreenCarpet"' 4' "AquaGreenCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("CyanCarpet"' 4' "CyanCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("BlueCarpet"' 4' "BlueCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("PurpleCarpet"' 4' "PurpleCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("IndigoCarpet"' 4' "IndigoCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("VioletCarpet"' 4' "VioletCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("MagentaCarpet"' 4' "MagentaCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("PinkCarpet"' 4' "PinkCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("BlackCarpet"' 4' "BlackCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("GrayCarpet"' 4' "GrayCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("WhiteCarpet"' 4' "WhiteCloth"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Roof"' 1' "Brick"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("DirtForFarming"' 1' "Dirt"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("DirtForFarming"' 1' "Grass"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Crops1"' 2' "Crops4"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Minecart"' 1' "BrushedMetal"' 5);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Salt"' 1' "Crops4"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("LuxuryRoof"' 1' "Roof"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Fence"' 1' "OakTreeTrunk"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Fence"' 1' "BirchTreeTrunk"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Fence"' 1' "SpruceTreeTrunk"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Hay"' 1' "Crops4"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("SilverCoin"' 30' "GoldCoin"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("GoldCoin"' 30' "GoldBar"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Ladder"' 1' "OakWood"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Ladder"' 1' "BirchWood"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Ladder"' 1' "SpruceWood"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Sandstone"' 1' "Sand"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("RedSandstone"' 1' "RedSand"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("HalfCobblestone"' 2' "Cobblestone"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("HalfMossyCobblestone"' 2' "MossyCobblestone"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("HalfOakWood"' 2' "OakWood"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("HalfBirchWood"' 2' "BirchWood"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("HalfSpruceWood"' 2' "SpruceWood"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("HalfBrick"' 2' "Brick"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("HalfSandBrick"' 2' "SandBrick"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Cobblestone"' 1' "HalfCobblestone"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("MossyCobblestone"' 1' "HalfMossyCobblestone"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("OakWood"' 1' "HalfOakWood"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("BirchWood"' 1' "HalfBirchWood"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("SpruceWood"' 1' "HalfSpruceWood"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("Brick"' 1' "HalfBrick"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("SandBrick"' 1' "HalfSandBrick"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("Rail3"' 4' "OakWood"' 1' "IronBlock"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("Rail3"' 4' "BirchWood"' 1' "IronBlock"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("Rail3"' 4' "SpruceWood"' 1' "IronBlock"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("Rail60"' 2' "OakWood"' 1' "IronBlock"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("Rail60"' 2' "BirchWood"' 1' "IronBlock"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("Rail60"' 2' "SpruceWood"' 1' "IronBlock"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("GrassTrap"' 1' "Dirt"' 10' "Camouflage"' 5);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("GrassTrap"' 1' "Dirt"' 10' "Camouflage"' 5);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("OakSapling"' 10' "Apples"' 5' "DirtForFarming"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("OakSapling"' 10' "Apples"' 5' "DirtForFarming"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("BirchSapling"' 10' "Apples"' 5' "DirtForFarming"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("BirchSapling"' 10' "Apples"' 5' "DirtForFarming"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("SpruceSapling"' 10' "Apples"' 5' "DirtForFarming"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("SpruceSapling"' 10' "Apples"' 5' "DirtForFarming"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("DirtBrick"' 1' "Dirt"' 2' "Stone"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("SandBrick"' 1' "Sand"' 1' "Stone"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("FakeBookcase"' 1' "Bookcase"' 1' "Camouflage"' 5);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("WoodDesk"' 1' "OakWood"' 2' "OakTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("WoodDesk"' 1' "OakWood"' 2' "BirchTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("WoodDesk"' 1' "OakWood"' 2' "SpruceTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("WoodDesk"' 1' "BirchWood"' 2' "OakTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("WoodDesk"' 1' "BirchWood"' 2' "BirchTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("WoodDesk"' 1' "BirchWood"' 2' "SpruceTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("WoodDesk"' 1' "SpruceWood"' 2' "OakWood"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("WoodDesk"' 1' "SpruceWood"' 2' "BirchWood"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("WoodDesk"' 1' "SpruceWood"' 2' "SpruceWood"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("GlassDesk"' 1' "Glass"' 2' "OakTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("GlassDesk"' 1' "Glass"' 2' "BirchTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("GlassDesk"' 1' "Glass"' 2' "SpruceTreeTrunk"' 1);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("Asphalt"' 1' "CoalOre"' 1' "Gravel"' 2);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("Cake"' 1' "Salt"' 2' "Crops4"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("Cake"' 1' "Salt"' 2' "Crops4"' 4);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("GoldBar"' 1' "GoldCoin"' 25' "GoldBlock"' 5);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("GoldBar"' 1' "GoldCoin"' 25' "GoldBlock"' 5);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("GoldCoin"' 1' "SilverCoin"' 25' "GoldOre"' 5);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe2("GoldCoin"' 1' "SilverCoin"' 25' "GoldOre"' 5);
Magic Number,ManicDigger.Mods,CoreCrafting,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreCrafting.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe3("Mosaik"' 1' "Sand"' 2' "Gravel"' 1' "Stone"' 1);
Magic Number,ManicDigger.Mods,CoreEvents,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreEvents.cs,OnSetSpawnKey,The following statement contains a magic number: float[] pos = new float[3];
Magic Number,ManicDigger.Mods,CoreEvents,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreEvents.cs,OnSetSpawnKey,The following statement contains a magic number: pos[2] = m.GetPlayerPositionZ(player);
Magic Number,ManicDigger.Mods,CoreEvents,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreEvents.cs,Respawn,The following statement contains a magic number: m.SetPlayerPosition(player' pos[0]' pos[1]' pos[2]);
Magic Number,ManicDigger.Mods,CoreEvents,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreEvents.cs,OnCommandSetModel,The following statement contains a magic number: texturename = ss[2];
Magic Number,ManicDigger.Mods,CoreEvents,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreEvents.cs,OnCommandSetModel,The following statement contains a magic number: ss.Length >= 3
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  			               {  			               	TextureIdTop = "Grass"'  			               	SideTextures = "GrassSide"'  			               	TextureIdForInventory = "GrassSide"'  			               	TextureIdBottom = "Dirt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	WhenPlayerPlacesGetsConvertedTo = 3'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  			               {  			               	TextureIdTop = "Grass"'  			               	SideTextures = "GrassSide"'  			               	TextureIdForInventory = "GrassSide"'  			               	TextureIdBottom = "Dirt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	WhenPlayerPlacesGetsConvertedTo = 3'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(3' "Dirt"' new BlockType()  			               {  			               	AllTextures = "Dirt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(4' "Cobblestone"' new BlockType()  			               {  			               	AllTextures = "Cobblestone"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(5' "OakWood"' new BlockType()  			               {  			               	AllTextures = "OakWood"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(6' "OakSapling"' new BlockType()  			               {  			               	AllTextures = "OakSapling"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(7' "Adminium"' new BlockType()  			               {  			               	AllTextures = "Adminium"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(8' "Water"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(9' "StationaryWater"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(10' "Lava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(10' "Lava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(10' "Lava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(11' "StationaryLava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(11' "StationaryLava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(11' "StationaryLava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(12' "Sand"' new BlockType()  			               {  			               	AllTextures = "Sand"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(13' "Gravel"' new BlockType()  			               {  			               	AllTextures = "Gravel"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(14' "GoldOre"' new BlockType()  			               {  			               	AllTextures = "GoldOre"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(15' "IronOre"' new BlockType()  			               {  			               	AllTextures = "IronOre"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(16' "CoalOre"' new BlockType()  			               {  			               	AllTextures = "CoalOre"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(17' "OakTreeTrunk"' new BlockType()  			               {  			               	TopBottomTextures = "OakTreeTrunkTopBottom"'  			               	SideTextures = "OakTreeTrunk"'  			               	TextureIdForInventory = "OakTreeTrunk"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  			               {  			               	AllTextures = "OakLeaves"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(19' "Sponge"' new BlockType()  			               {  			               	AllTextures = "Sponge"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(20' "Glass"' new BlockType()  			               {  			               	AllTextures = "Glass"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(21' "RedCloth"' new BlockType()  			               {  			               	AllTextures = "RedCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(22' "OrangeCloth"' new BlockType()  			               {  			               	AllTextures = "OrangeCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(23' "YellowCloth"' new BlockType()  			               {  			               	AllTextures = "YellowCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(24' "LightGreenCloth"' new BlockType()  			               {  			               	AllTextures = "LightGreenCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(25' "GreenCloth"' new BlockType()  			               {  			               	AllTextures = "GreenCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(26' "AquaGreenCloth"' new BlockType()  			               {  			               	AllTextures = "AquaGreenCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(27' "CyanCloth"' new BlockType()  			               {  			               	AllTextures = "CyanCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(28' "BlueCloth"' new BlockType()  			               {  			               	AllTextures = "BlueCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(29' "PurpleCloth"' new BlockType()  			               {  			               	AllTextures = "PurpleCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(30' "IndigoCloth"' new BlockType()  			               {  			               	AllTextures = "IndigoCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(31' "VioletCloth"' new BlockType()  			               {  			               	AllTextures = "VioletCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(32' "MagentaCloth"' new BlockType()  			               {  			               	AllTextures = "MagentaCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(33' "PinkCloth"' new BlockType()  			               {  			               	AllTextures = "PinkCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(34' "BlackCloth"' new BlockType()  			               {  			               	AllTextures = "BlackCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(35' "GrayCloth"' new BlockType()  			               {  			               	AllTextures = "GrayCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(36' "WhiteCloth"' new BlockType()  			               {  			               	AllTextures = "WhiteCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(37' "YellowFlowerDecorations"' new BlockType()  			               {  			               	AllTextures = "YellowFlowerDecorations"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(38' "RedRoseDecorations"' new BlockType()  			               {  			               	AllTextures = "RedRoseDecorations"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(39' "RedMushroom"' new BlockType()  			               {  			               	AllTextures = "RedMushroom"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(40' "BrownMushroom"' new BlockType()  			               {  			               	AllTextures = "BrownMushroom"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(41' "GoldBlock"' new BlockType()  			               {  			               	AllTextures = "GoldBlock"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(42' "IronBlock"' new BlockType()  			               {  			               	AllTextures = "IronBlock"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(43' "DoubleStair"' new BlockType()  			               {  			               	TopBottomTextures = "Stair"'  			               	SideTextures = "DoubleStairSide"'  			               	TextureIdForInventory = "DoubleStairSide"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(44' "Stair"' new BlockType()  			               {  			               	TopBottomTextures = "Stair"'  			               	SideTextures = "StairSide"'  			               	TextureIdForInventory = "StairInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(45' "Brick"' new BlockType()  			               {  			               	AllTextures = "Brick"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(47' "Bookcase"' new BlockType()  			               {  			               	TopBottomTextures = "OakWood"'  			               	SideTextures = "Bookcase"'  			               	TextureIdForInventory = "Bookcase"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(48' "MossyCobblestone"' new BlockType()  			               {  			               	AllTextures = "MossyCobblestone"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(49' "Obsidian"' new BlockType()  			               {  			               	AllTextures = "Obsidian"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(50' "Torch"' new BlockType()  			               {  			               	TextureIdTop = "TorchTop"'  			               	TextureIdBottom = "Torch"'  			               	SideTextures = "Torch"'  			               	TextureIdForInventory = "Torch"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Torch'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(50' "Torch"' new BlockType()  			               {  			               	TextureIdTop = "TorchTop"'  			               	TextureIdBottom = "Torch"'  			               	SideTextures = "Torch"'  			               	TextureIdForInventory = "Torch"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Torch'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(51' "Clay"' new BlockType()  			               {  			               	AllTextures = "Clay"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(52' "Marble"' new BlockType()  			               {  			               	AllTextures = "Marble"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(53' "Granite"' new BlockType()  			               {  			               	AllTextures = "Granite"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(54' "RedSand"' new BlockType()  			               {  			               	AllTextures = "RedSand"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(55' "Sandstone"' new BlockType()  			               {  			               	AllTextures = "Sandstone"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(56' "RedSandstone"' new BlockType()  			               {  			               	AllTextures = "RedSandstone"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(57' "Cactus"' new BlockType()  			               {  			               	TopBottomTextures = "CactusTopBottom"'  			               	SideTextures = "CactusSide"'  			               	TextureIdForInventory = "CactusSide"'  			               	DrawType = DrawType.Cactus'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(58' "DeadPlant"' new BlockType()  			               {  			               	AllTextures = "DeadPlant"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(59' "GrassPlant"' new BlockType()  			               {  			               	AllTextures = "GrassPlant"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(60' "BirchTreeTrunk"' new BlockType()  			               {  			               	TopBottomTextures = "BirchTreeTrunkTopBottom"'  			               	SideTextures = "BirchTreeTrunk"'  			               	TextureIdForInventory = "BirchTreeTrunk"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(61' "BirchLeaves"' new BlockType()  			               {  			               	AllTextures = "BirchLeaves"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(62' "BirchSapling"' new BlockType()  			               {  			               	AllTextures = "BirchSapling"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(63' "BirchWood"' new BlockType()  			               {  			               	AllTextures = "BirchWood"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(64' "SpruceTreeTrunk"' new BlockType()  			               {  			               	TopBottomTextures = "SpruceTreeTrunkTopBottom"'  			               	SideTextures = "SpruceTreeTrunk"'  			               	TextureIdForInventory = "SpruceTreeTrunk"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(65' "SpruceLeaves"' new BlockType()  			               {  			               	AllTextures = "SpruceLeaves"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(66' "SpruceSapling"' new BlockType()  			               {  			               	AllTextures = "SpruceSapling"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(67' "SpruceWood"' new BlockType()  			               {  			               	AllTextures = "SpruceWood"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(68' "HalfCobblestone"' new BlockType()  			               {  			               	TopBottomTextures = "Cobblestone"'  			               	SideTextures = "CobblestoneHalf"'  			               	TextureIdForInventory = "CobblestoneHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(69' "HalfMossyCobblestone"' new BlockType()  			               {  			               	TopBottomTextures = "MossyCobblestone"'  			               	SideTextures = "MossyCobblestoneHalf"'  			               	TextureIdForInventory = "MossyCobblestoneHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(70' "HalfOakWood"' new BlockType()  			               {  			               	TopBottomTextures = "OakWood"'  			               	SideTextures = "OakWoodHalf"'  			               	TextureIdForInventory = "OakWoodHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(71' "HalfBirchWood"' new BlockType()  			               {  			               	TopBottomTextures = "BirchWood"'  			               	SideTextures = "BirchWoodHalf"'  			               	TextureIdForInventory = "BirchWoodHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(72' "HalfSpruceWood"' new BlockType()  			               {  			               	TopBottomTextures = "SpruceWood"'  			               	SideTextures = "SpruceWoodHalf"'  			               	TextureIdForInventory = "SpruceWoodHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(73' "HalfBrick"' new BlockType()  			               {  			               	TopBottomTextures = "Brick"'  			               	SideTextures = "BrickHalf"'  			               	TextureIdForInventory = "BrickHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(74' "HalfSandBrick"' new BlockType()  			               {  			               	TopBottomTextures = "SandBrick"'  			               	SideTextures = "SandBrickHalf"'  			               	TextureIdForInventory = "SandBrickHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(100' "BrushedMetal"' new BlockType()  			               {  			               	AllTextures = "BrushedMetal"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(101' "ChemicalGreen"' new BlockType()  			               {  			               	AllTextures = "ChemicalGreen"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(102' "Salt"' new BlockType()  			               {  			               	AllTextures = "Salt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(103' "Roof"' new BlockType()  			               {  			               	AllTextures = "Roof"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(104' "Camouflage"' new BlockType()  			               {  			               	AllTextures = "Camouflage"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(105' "DirtForFarming"' new BlockType()  			               {  			               	AllTextures = "DirtForFarming"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  			               {  			               	AllTextures = "Apples"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	IsUsable = true'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(107' "Hay"' new BlockType()  			               {  			               	AllTextures = "Hay"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(108' "Crops1"' new BlockType()  			               {  			               	AllTextures = "Crops1"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(109' "Crops2"' new BlockType()  			               {  			               	AllTextures = "Crops2"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(110' "Crops3"' new BlockType()  			               {  			               	AllTextures = "Crops3"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(111' "Crops4"' new BlockType()  			               {  			               	AllTextures = "Crops4"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(112' "CraftingTable"' new BlockType()  			               {  			               	TopBottomTextures = "CraftingTableTopBottom"'  			               	SideTextures = "CraftingTableSide"'  			               	TextureIdForInventory = "CraftingTableTopBottom"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	IsUsable = true'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(113' "Minecart"' new BlockType()  			               {  			               	AllTextures = "Minecart"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(114' "Trampoline"' new BlockType()  			               {  			               	AllTextures = "Trampoline"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(115' "FillStart"' new BlockType()  			               {  			               	AllTextures = "FillStart"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(116' "Cuboid"' new BlockType()  			               {  			               	AllTextures = "FillEnd"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(117' "FillArea"' new BlockType()  			               {  			               	AllTextures = "FillArea"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(118' "Water0"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(119' "Water1"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(120' "Water2"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(121' "Water3"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(122' "Water4"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(123' "Water5"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(124' "Water6"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(125' "Water7"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(130' "GrassTrap"' new BlockType()  			               {  			               	TextureIdTop = "Grass"'  			               	SideTextures = "GrassSide"'  			               	TextureIdForInventory = "GrassSide"'  			               	TextureIdBottom = "Dirt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(131' "GoldCoin"' new BlockType()  			               {  			               	AllTextures = "GoldCoin"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(132' "GoldBar"' new BlockType()  			               {  			               	TopBottomTextures = "GoldBarTopBottom"'  			               	SideTextures = "GoldBarSide"'  			               	TextureIdForInventory = "GoldBarInvetory"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	LightRadius = 5'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(132' "GoldBar"' new BlockType()  			               {  			               	TopBottomTextures = "GoldBarTopBottom"'  			               	SideTextures = "GoldBarSide"'  			               	TextureIdForInventory = "GoldBarInvetory"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	LightRadius = 5'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(133' "SilverOre"' new BlockType()  			               {  			               	AllTextures = "SilverOre"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(135' "SilverCoin"' new BlockType()  			               {  			               	AllTextures = "SilverCoin"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(140' "DirtBrick"' new BlockType()  			               {  			               	AllTextures = "DirtBrick"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(141' "LuxuryRoof"' new BlockType()  			               {  			               	AllTextures = "LuxuryRoof"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(142' "SandBrick"' new BlockType()  			               {  			               	AllTextures = "SandBrick"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(143' "FakeBookcase"' new BlockType()  			               {  			               	TopBottomTextures = "OakWood"'  			               	SideTextures = "Bookcase"'  			               	TextureIdForInventory = "Bookcase"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(144' "WoodDesk"' new BlockType()  			               {  			               	TextureIdTop = "WoodBlock"'  			               	TextureIdBottom = "Empty"'  			               	SideTextures = "GlassDeskSide"'  			               	TextureIdForInventory = "WoodBlock"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(145' "GlassDesk"' new BlockType()  			               {  			               	TextureIdTop = "Glass"'  			               	TextureIdBottom = "Empty"'  			               	SideTextures = "GlassDeskSide"'  			               	TextureIdForInventory = "GlassDeskSide"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(146' "Mosaik"' new BlockType()  			               {  			               	AllTextures = "Mosaik"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(147' "Asphalt"' new BlockType()  			               {  			               	AllTextures = "Asphalt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(148' "Cake"' new BlockType()  			               {  			               	TextureIdTop = "CakeTop"'  			               	TextureIdBottom = "Gray"'  			               	SideTextures = "CakeSide"'  			               	TextureIdForInventory = "CakeTop"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	IsUsable = true'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(149' "Fire"' new BlockType()  			               {  			               	AllTextures = "Fire"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(149' "Fire"' new BlockType()  			               {  			               	AllTextures = "Fire"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(149' "Fire"' new BlockType()  			               {  			               	AllTextures = "Fire"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(150' "Fence"' new BlockType()  			               {  			               	AllTextures = "Fence"'  			               	DrawType = DrawType.Fence'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(151' "Compass"' new BlockType()  			               {  			               	AllTextures = "CompassInventory"'  			               	TextureIdForInventory = "CompassInventory"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(152' "Ladder"' new BlockType()  			               {  			               	AllTextures = "Ladder"'  			               	DrawType = DrawType.Ladder'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(153' "EmptyHand"' new BlockType()  			               {  			               	AllTextures = "YellowThing"'  			               	DrawType = DrawType.Torch'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = noSound'  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(176 + i' "Rail" + i.ToString()' new BlockType()  				               {  				               	TextureIdTop = "Rail" + i.ToString()'  				               	TextureIdBottom = "Cobblestone"'  				               	SideTextures = "Cobblestone"'  				               	TextureIdForInventory = "Rail" + i.ToString()'  				               	DrawType = DrawType.Transparent'  				               	WalkableType = WalkableType.Solid'  				               	Sounds = solidSounds'  				               	Rail = i'  				               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: i < 64
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(241' "RedCarpet"' new BlockType()  			               {  			               	AllTextures = "RedCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(242' "OrangeCarpet"' new BlockType()  			               {  			               	AllTextures = "OrangeCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(243' "YellowCarpet"' new BlockType()  			               {  			               	AllTextures = "YellowCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(244' "LightGreenCarpet"' new BlockType()  			               {  			               	AllTextures = "LightGreenCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(245' "GreenCarpet"' new BlockType()  			               {  			               	AllTextures = "GreenCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(246' "AquaGreenCarpet"' new BlockType()  			               {  			               	AllTextures = "AquaGreenCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(247' "CyanCarpet"' new BlockType()  			               {  			               	AllTextures = "CyanCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(248' "BlueCarpet"' new BlockType()  			               {  			               	AllTextures = "BlueCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(249' "PurpleCarpet"' new BlockType()  			               {  			               	AllTextures = "PurpleCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(250' "IndigoCarpet"' new BlockType()  			               {  			               	AllTextures = "IndigoCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(251' "VioletCarpet"' new BlockType()  			               {  			               	AllTextures = "VioletCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(252' "MagentaCarpet"' new BlockType()  			               {  			               	AllTextures = "MagentaCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(253' "PinkCarpet"' new BlockType()  			               {  			               	AllTextures = "PinkCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(254' "BlackCarpet"' new BlockType()  			               {  			               	AllTextures = "BlackCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(255' "GrayCarpet"' new BlockType()  			               {  			               	AllTextures = "GrayCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(256' "WhiteCarpet"' new BlockType()  			               {  			               	AllTextures = "WhiteCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.AddToStartInventory("Torch"' 6);
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.AddToStartInventory("CraftingTable"' 6);
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.AddToStartInventory("GoldCoin"' 2);
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,Start,The following statement contains a magic number: m.AddToStartInventory("GoldBar"' 5);
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "SpringGrass"'  					               	TextureIdBack = "SpringGrassSide"'  					               	TextureIdFront = "SpringGrassSide"'  					               	TextureIdLeft = "SpringGrassSide"'  					               	TextureIdRight = "SpringGrassSide"'  					               	TextureIdForInventory = "SpringGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "SpringGrass"'  					               	TextureIdBack = "SpringGrassSide"'  					               	TextureIdFront = "SpringGrassSide"'  					               	TextureIdLeft = "SpringGrassSide"'  					               	TextureIdRight = "SpringGrassSide"'  					               	TextureIdForInventory = "SpringGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  					               {  					               	AllTextures = "OakLeaves"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  					               {  					               	AllTextures = "Apples"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	IsUsable = true'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(8' "Water"' new BlockType()  					               {  					               	AllTextures = "Water"'  					               	DrawType = DrawType.Fluid'  					               	WalkableType = WalkableType.Fluid'  					               	Sounds = noSound'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "Grass"'  					               	TextureIdBack = "GrassSide"'  					               	TextureIdFront = "GrassSide"'  					               	TextureIdLeft = "GrassSide"'  					               	TextureIdRight = "GrassSide"'  					               	TextureIdForInventory = "GrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "Grass"'  					               	TextureIdBack = "GrassSide"'  					               	TextureIdFront = "GrassSide"'  					               	TextureIdLeft = "GrassSide"'  					               	TextureIdRight = "GrassSide"'  					               	TextureIdForInventory = "GrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  					               {  					               	AllTextures = "OakLeaves"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  					               {  					               	AllTextures = "Apples"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	IsUsable = true'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "AutumnGrass"'  					               	TextureIdBack = "AutumnGrassSide"'  					               	TextureIdFront = "AutumnGrassSide"'  					               	TextureIdLeft = "AutumnGrassSide"'  					               	TextureIdRight = "AutumnGrassSide"'  					               	TextureIdForInventory = "AutumnGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "AutumnGrass"'  					               	TextureIdBack = "AutumnGrassSide"'  					               	TextureIdFront = "AutumnGrassSide"'  					               	TextureIdLeft = "AutumnGrassSide"'  					               	TextureIdRight = "AutumnGrassSide"'  					               	TextureIdForInventory = "AutumnGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  					               {  					               	AllTextures = "AutumnLeaves"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  					               {  					               	AllTextures = "AutumnApples"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	IsUsable = true'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: currentSeason == 2
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "WinterGrass"'  					               	TextureIdBack = "WinterGrassSide"'  					               	TextureIdFront = "WinterGrassSide"'  					               	TextureIdLeft = "WinterGrassSide"'  					               	TextureIdRight = "WinterGrassSide"'  					               	TextureIdForInventory = "WinterGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "WinterGrass"'  					               	TextureIdBack = "WinterGrassSide"'  					               	TextureIdFront = "WinterGrassSide"'  					               	TextureIdLeft = "WinterGrassSide"'  					               	TextureIdRight = "WinterGrassSide"'  					               	TextureIdForInventory = "WinterGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  					               {  					               	AllTextures = "WinterLeaves"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  					               {  					               	AllTextures = "WinterApples"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	IsUsable = true'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(8' "Water"' new BlockType()  					               {  					               	AllTextures = "Ice"'  					               	DrawType = DrawType.Fluid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	IsSlipperyWalk = true'  					               });
Magic Number,ManicDigger.Mods,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: currentSeason == 3
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: noise.Frequency = 0.01;
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int currentHeight = (byte)((finalTerrain.GetValue((xx + x) / 100.0' 0' (yy + y) / 100.0) * 60) + 64);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int currentHeight = (byte)((finalTerrain.GetValue((xx + x) / 100.0' 0' (yy + y) / 100.0) * 60) + 64);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int currentHeight = (byte)((finalTerrain.GetValue((xx + x) / 100.0' 0' (yy + y) / 100.0) * 60) + 64);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int currentHeight = (byte)((finalTerrain.GetValue((xx + x) / 100.0' 0' (yy + y) / 100.0) * 60) + 64);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int biome = (int)(BiomeSelect.GetValue((x + xx) / 100.0' 0' (y + yy) / 100.0) * 2);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int biome = (int)(BiomeSelect.GetValue((x + xx) / 100.0' 0' (y + yy) / 100.0) * 2);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int biome = (int)(BiomeSelect.GetValue((x + xx) / 100.0' 0' (y + yy) / 100.0) * 2);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: biome == 2
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: biome == 3
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: biome == 4
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: biome == 5
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int stoneHeight = (int)currentHeight - ((64 - (currentHeight % 64)) / 8) + 1;
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int stoneHeight = (int)currentHeight - ((64 - (currentHeight % 64)) / 8) + 1;
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,GetChunk,The following statement contains a magic number: int stoneHeight = (int)currentHeight - ((64 - (currentHeight % 64)) / 8) + 1;
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: BiomeBase.Frequency = (0.2);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: BiomeSelect.Scale = (2.5);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: BiomeSelect.Bias = (2.5);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: mountainTerrain.Scale = (0.5);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: mountainTerrain.Bias = (0.5);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: plain.Value = (0.5);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: jaggieEdges.SetBounds(0.5' 1.0);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: jaggieEdges.EdgeFalloff = (0.11);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: jaggieControl.Seed = (Seed + 20);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: baseFlatTerrain.Frequency = (0.2);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: flatTerrain.Scale = (0.125);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: flatTerrain.Bias = (0.07);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: water.Scale = (0.3);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: water.Bias = (-0.5);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: terrainType.Seed = (Seed + 2);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: terrainType.Frequency = (0.5);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: terrainType.Persistence = (0.25);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: terrainType2.Seed = (Seed + 7);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: terrainType2.Frequency = (0.5);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: terrainType2.Persistence = (0.25);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: waterTerrain.EdgeFalloff = (0.1);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: waterTerrain.SetBounds(-0.5' 1.0);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: secondTerrain.EdgeFalloff = (0.3);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: secondTerrain.SetBounds(-0.5' 1.0);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: finalTerrain.EdgeFalloff = (0.2);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: finalTerrain.SetBounds(-0.3' 1.0);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: flowers.Seed = (Seed + 10);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: flowers.Frequency = (3);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: caveNoise.Seed = (Seed + 22);
Magic Number,ManicDigger.Mods,DefaultWorldGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\DefaultWorldGenerator.cs,Init,The following statement contains a magic number: caveNoise.OctaveCount = (4);
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.SetBlockType(126' "DoorBottomClosed"' new BlockType()  			               {  			               	AllTextures = "DoorBottom"'  			               	DrawType = DrawType.ClosedDoor'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = sounds'  			               	IsUsable = true'  			               });
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.SetBlockType(127' "DoorTopClosed"' new BlockType()  			               {  			               	AllTextures = "DoorTop"'  			               	DrawType = DrawType.ClosedDoor'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = sounds'  			               	IsUsable = true'  			               	WhenPlayerPlacesGetsConvertedTo = 126'  			               });
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.SetBlockType(127' "DoorTopClosed"' new BlockType()  			               {  			               	AllTextures = "DoorTop"'  			               	DrawType = DrawType.ClosedDoor'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = sounds'  			               	IsUsable = true'  			               	WhenPlayerPlacesGetsConvertedTo = 126'  			               });
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.SetBlockType(128' "DoorBottomOpen"' new BlockType()  			               {  			               	AllTextures = "DoorBottom"'  			               	DrawType = DrawType.OpenDoorLeft'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = sounds'  			               	IsUsable = true'  			               	WhenPlayerPlacesGetsConvertedTo = 126'  			               });
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.SetBlockType(128' "DoorBottomOpen"' new BlockType()  			               {  			               	AllTextures = "DoorBottom"'  			               	DrawType = DrawType.OpenDoorLeft'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = sounds'  			               	IsUsable = true'  			               	WhenPlayerPlacesGetsConvertedTo = 126'  			               });
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.SetBlockType(129' "DoorTopOpen"' new BlockType()  			               {  			               	AllTextures = "DoorTop"'  			               	DrawType = DrawType.OpenDoorLeft'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = sounds'  			               	IsUsable = true'  			               	WhenPlayerPlacesGetsConvertedTo = 126'  			               });
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.SetBlockType(129' "DoorTopOpen"' new BlockType()  			               {  			               	AllTextures = "DoorTop"'  			               	DrawType = DrawType.OpenDoorLeft'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = sounds'  			               	IsUsable = true'  			               	WhenPlayerPlacesGetsConvertedTo = 126'  			               });
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("DoorBottomClosed"' 1' "OakWood"' 2);
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("DoorBottomClosed"' 1' "BirchWood"' 2);
Magic Number,ManicDigger.Mods,Doors,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Doors.cs,Start,The following statement contains a magic number: m.AddCraftingRecipe("DoorBottomClosed"' 1' "SpruceWood"' 2);
Magic Number,ManicDigger.Mods,Ghost,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Ghost.cs,OnLoad,The following statement contains a magic number: m.RegisterTimer(f' 0.1);
Magic Number,ManicDigger.Mods,Ghost,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Ghost.cs,f,The following statement contains a magic number: history.Count < 20
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: i < 2
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int length = 200;
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int oretype = rnd.Next(6);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: oretype == 2
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: oretype == 3
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: oretype == 4
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: oretype == 5
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: blocktype = oretype < 4 ? TileIdGravel + oretype : (oretype > 4 ? TileIdGravel + oretype + 115 : TileIdDirt);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: blocktype = oretype < 4 ? TileIdGravel + oretype : (oretype > 4 ? TileIdGravel + oretype + 115 : TileIdDirt);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: blocktype = oretype < 4 ? TileIdGravel + oretype : (oretype > 4 ? TileIdGravel + oretype + 115 : TileIdDirt);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: rnd.NextDouble() < 0.85
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int dirx = rnd.NextDouble() < 0.5 ? -1 : 1;
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int dirz = rnd.NextDouble() < 0.5 ? -1 : 1;
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: double curspeedz = rnd.NextDouble() * 0.5 * dirz;
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: rnd.NextDouble() < 0.06
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: rnd.NextDouble() < 0.06
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: curspeedz = rnd.NextDouble() * 0.5 * dirz;
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: rnd.NextDouble() < 0.02
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int sizex = rnd.Next(3' 6);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int sizex = rnd.Next(3' 6);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int sizey = rnd.Next(3' 6);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int sizey = rnd.Next(3' 6);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int sizez = rnd.Next(2' 3);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int sizez = rnd.Next(2' 3);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int dx = rnd.Next(-sizex / 2' sizex / 2);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int dx = rnd.Next(-sizex / 2' sizex / 2);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int dy = rnd.Next(-sizey / 2' sizey / 2);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: int dy = rnd.Next(-sizey / 2' sizey / 2);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: double density = blocktype == 0 ? 1 : rnd.NextDouble() * 0.90;
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: MakeCuboid((int)curx - sizex / 2 + dx' (int)cury - sizey / 2 + dy' (int)curz - sizez / 2 + dz' sizex' sizey' sizez' blocktype' allowin' density' rnd);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: MakeCuboid((int)curx - sizex / 2 + dx' (int)cury - sizey / 2 + dy' (int)curz - sizez / 2 + dz' sizex' sizey' sizez' blocktype' allowin' density' rnd);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: MakeCuboid((int)curx - sizex / 2 + dx' (int)cury - sizey / 2 + dy' (int)curz - sizez / 2 + dz' sizex' sizey' sizez' blocktype' allowin' density' rnd);
Magic Number,ManicDigger.Mods,OreGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\OreGenerator.cs,MakeCaves,The following statement contains a magic number: ii < 3
Magic Number,ManicDigger.Mods,RememberPosition,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\RememberPosition.cs,LoadData,The following statement contains a magic number: positions.Store(linesplit[0]' pos[0]' pos[1]' pos[2]);
Magic Number,ManicDigger.Mods,RememberPosition,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\RememberPosition.cs,OnJoin,The following statement contains a magic number: m.SetPlayerPosition(player' pos[0]' pos[1]' pos[2]);
Magic Number,ManicDigger.Mods,PositionStorage,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\RememberPosition.cs,StringToPos,The following statement contains a magic number: int[] retval = new int[3];
Magic Number,ManicDigger.Mods,PositionStorage,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\RememberPosition.cs,StringToPos,The following statement contains a magic number: retval[2] = int.Parse(split[2]);
Magic Number,ManicDigger.Mods,PositionStorage,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\RememberPosition.cs,StringToPos,The following statement contains a magic number: retval[2] = int.Parse(split[2]);
Magic Number,ManicDigger.Mods,PermissionBlock,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Unused\PermissionBlock.cs,Start,The following statement contains a magic number: m.SetBlockType(241 + i' "BuildPermission" + i' new BlockType()  				               {  				               	AllTextures = "BuildPermission" + i'  				               	DrawType = DrawType.Solid'  				               	WalkableType = WalkableType.Solid'  				               	IsBuildable = true'  				               });
Magic Number,ManicDigger.Mods,Revert,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Revert.cs,OnCommand,The following statement contains a magic number: string lplayername = (string)l[6];
Magic Number,ManicDigger.Mods,Revert,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Revert.cs,OnCommand,The following statement contains a magic number: int ly = ((short)l[2]);
Magic Number,ManicDigger.Mods,Revert,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Revert.cs,OnCommand,The following statement contains a magic number: int lz = ((short)l[3]);
Magic Number,ManicDigger.Mods,Revert,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Revert.cs,OnCommand,The following statement contains a magic number: bool lbuild = (bool)l[5];
Magic Number,ManicDigger.Mods,Revert,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Revert.cs,OnCommand,The following statement contains a magic number: short lblocktype = ((short)l[4]);
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,Start,The following statement contains a magic number: m.SetBlockType(46' "TNT"' new BlockType()  			               {  			               	TextureIdTop = "TNTTop"'  			               	TextureIdBottom = "TNTBottom"'  			               	TextureIdBack = "TNT"'  			               	TextureIdFront = "TNT"'  			               	TextureIdLeft = "TNT"'  			               	TextureIdRight = "TNT"'  			               	TextureIdForInventory = "TNT"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	IsUsable = true'  			               });
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,Start,The following statement contains a magic number: m.RegisterTimer(UpdateTnt' 5);
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,The following statement contains a magic number: Vector3i pos2 = new Vector3i(pos.x + xx - tntRange / 2'  								                             pos.y + yy - tntRange / 2'  								                             pos.z + zz - tntRange / 2);
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,The following statement contains a magic number: Vector3i pos2 = new Vector3i(pos.x + xx - tntRange / 2'  								                             pos.y + yy - tntRange / 2'  								                             pos.z + zz - tntRange / 2);
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,The following statement contains a magic number: Vector3i pos2 = new Vector3i(pos.x + xx - tntRange / 2'  								                             pos.y + yy - tntRange / 2'  								                             pos.z + zz - tntRange / 2);
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,The following statement contains a magic number: sphereEq(xx - (tntRange - 1) / 2' yy - (tntRange - 1) / 2' zz - (tntRange - 1) / 2' tntRange / 2) <= 0
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,The following statement contains a magic number: sphereEq(xx - (tntRange - 1) / 2' yy - (tntRange - 1) / 2' zz - (tntRange - 1) / 2' tntRange / 2) <= 0
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,The following statement contains a magic number: sphereEq(xx - (tntRange - 1) / 2' yy - (tntRange - 1) / 2' zz - (tntRange - 1) / 2' tntRange / 2) <= 0
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,The following statement contains a magic number: sphereEq(xx - (tntRange - 1) / 2' yy - (tntRange - 1) / 2' zz - (tntRange - 1) / 2' tntRange / 2) <= 0
Magic Number,ManicDigger.Mods,Tnt,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\Tnt.cs,UpdateTnt,The following statement contains a magic number: now++ < 3
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Seed = (Seed + 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.OctaveCount = (6);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Frequency = (1.0 / 180.0);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Lacunarity = ((treeCount / 20.0) * (treeCount / 20.0) * 2.0);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Lacunarity = ((treeCount / 20.0) * (treeCount / 20.0) * 2.0);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Lacunarity = ((treeCount / 20.0) * (treeCount / 20.0) * 2.0);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: double count = treenoise.GetValue(x/512.0' 0' y/512.0) * 1000;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: double count = treenoise.GetValue(x/512.0' 0' y/512.0) * 1000;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: double count = treenoise.GetValue(x/512.0' 0' y/512.0) * 1000;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: count = System.Math.Min(count' 300);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: MakeSmallTrees(x' y' z' m.GetChunkSize()' _rnd' treeCount + 10 - (10 - treeCount / 10));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: MakeSmallTrees(x' y' z' m.GetChunkSize()' _rnd' treeCount + 10 - (10 - treeCount / 10));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: MakeSmallTrees(x' y' z' m.GetChunkSize()' _rnd' treeCount + 10 - (10 - treeCount / 10));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeSmallTrees,The following statement contains a magic number: chooseTreeType = rnd.Next(0' 3);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeSmallTrees,The following statement contains a magic number: switch (chooseTreeType)  				{  						case 0: MakeTreeType1(x' y' z' rnd); break; //Spruce  						case 1: MakeTreeType2(x' y' z' rnd); break; //Oak  						case 2: MakeTreeType3(x' y' z' rnd); break; //Birch  				}
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int treeHeight = rnd.Next(8' 12);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int treeHeight = rnd.Next(8' 12);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: i == treeHeight - 4
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: k < 4
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: i == treeHeight - 3
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: k < 3
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: int treeHeight = rnd.Next(4' 6);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: int treeHeight = rnd.Next(4' 6);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: float chanceToAppleTree = 0.1f;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: k < 2
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int treeHeight = rnd.Next(6' 9);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int treeHeight = rnd.Next(6' 9);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: k < 2
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 0 && i > 3
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 0 && i > 3
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: dir = 45;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: k < 3
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 2 && i > 3
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 2 && i > 3
Magic Number,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 2 && i > 3
Magic Number,ManicDigger.Mods,VandalFinder,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VandalFinder.cs,ShowBlockLog,The following statement contains a magic number: int ly = (short)l[2];
Magic Number,ManicDigger.Mods,VandalFinder,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VandalFinder.cs,ShowBlockLog,The following statement contains a magic number: int lz = (short)l[3];
Magic Number,ManicDigger.Mods,VandalFinder,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VandalFinder.cs,ShowBlockLog,The following statement contains a magic number: string lplayername = (string)l[6];
Magic Number,ManicDigger.Mods,VandalFinder,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VandalFinder.cs,ShowBlockLog,The following statement contains a magic number: int lblocktype = (short)l[4];
Magic Number,ManicDigger.Mods,VandalFinder,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VandalFinder.cs,ShowBlockLog,The following statement contains a magic number: bool lbuild = (bool)l[5];
Magic Number,ManicDigger.Mods,VandalFinder,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VandalFinder.cs,ShowBlockLog,The following statement contains a magic number: messages.Count > 10
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x' y' z + 2' trunkID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x' y' z + 3' trunkID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x + 1' y' z + 3' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x - 1' y' z + 3' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x' y + 1' z + 3' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x' y - 1' z + 3' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x + 1' y + 1' z + 3' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x + 1' y - 1' z + 3' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x - 1' y + 1' z + 3' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x - 1' y - 1' z + 3' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x + 1' y' z + 4' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x - 1' y' z + 4' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x' y + 1' z + 4' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x' y - 1' z + 4' leavesID);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,PlaceTree,The following statement contains a magic number: PlaceIfEmpty(x' y' z + 4' OakLeaves);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,BlockTickGrowGrassOrMushroomsOnDirt,The following statement contains a magic number: int tile = rnd.NextDouble() < 0.6 ? RedMushroom : BrownMushroom;
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,BlockTickGrowGrassOrMushroomsOnDirt,The following statement contains a magic number: rnd.NextDouble() < 0.01
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: int treeHeight = rnd.Next(4' 6);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: int treeHeight = rnd.Next(4' 6);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: xx = length * (int)Math.Round(Math.Cos(dir * Math.PI / 180));
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: yy = length * (int)Math.Round(Math.Sin(dir * Math.PI / 180));
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: float appleChance = isAppleTree ? 0.45f : 0f;
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: k < 2
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,MakeTree,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,BlockTickMushroomDeath,The following statement contains a magic number: rnd.NextDouble() < 0.2
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,BlockTickFlowerDeath,The following statement contains a magic number: rnd.NextDouble() < 0.02
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,IsShadow,The following statement contains a magic number: i < 10
Magic Number,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,reflectedSunnyLight,The following statement contains a magic number: i <= x + 2
Magic Number,ManicDigger.Mods.War,Food,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Food.cs,OnUse,The following statement contains a magic number: health += 30;
Magic Number,ManicDigger.Mods.War,CoreWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Core.cs,Start,The following statement contains a magic number: m.SetPlayerAreaSize(512);
Magic Number,ManicDigger.Mods.War,CoreWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Core.cs,Start,The following statement contains a magic number: m.SetDaysPerYear(24);
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  			               {  			               	TextureIdTop = "Grass"'  			               	SideTextures = "GrassSide"'  			               	TextureIdForInventory = "GrassSide"'  			               	TextureIdBottom = "Dirt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	WhenPlayerPlacesGetsConvertedTo = 3'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  			               {  			               	TextureIdTop = "Grass"'  			               	SideTextures = "GrassSide"'  			               	TextureIdForInventory = "GrassSide"'  			               	TextureIdBottom = "Dirt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	WhenPlayerPlacesGetsConvertedTo = 3'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(3' "Dirt"' new BlockType()  			               {  			               	AllTextures = "Dirt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(4' "Cobblestone"' new BlockType()  			               {  			               	AllTextures = "Cobblestone"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(5' "OakWood"' new BlockType()  			               {  			               	AllTextures = "OakWood"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(6' "OakSapling"' new BlockType()  			               {  			               	AllTextures = "OakSapling"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(7' "Adminium"' new BlockType()  			               {  			               	AllTextures = "Adminium"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(8' "Water"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(9' "StationaryWater"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(10' "Lava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(10' "Lava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(10' "Lava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(11' "StationaryLava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(11' "StationaryLava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(11' "StationaryLava"' new BlockType()  			               {  			               	AllTextures = "Lava"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = noSound'  			               	LightRadius = 15'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(12' "Sand"' new BlockType()  			               {  			               	AllTextures = "Sand"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(13' "Gravel"' new BlockType()  			               {  			               	AllTextures = "Gravel"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(14' "GoldOre"' new BlockType()  			               {  			               	AllTextures = "GoldOre"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(15' "IronOre"' new BlockType()  			               {  			               	AllTextures = "IronOre"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(16' "CoalOre"' new BlockType()  			               {  			               	AllTextures = "CoalOre"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(17' "OakTreeTrunk"' new BlockType()  			               {  			               	TopBottomTextures = "OakTreeTrunkTopBottom"'  			               	SideTextures = "OakTreeTrunk"'  			               	TextureIdForInventory = "OakTreeTrunk"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  			               {  			               	AllTextures = "OakLeaves"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(19' "Sponge"' new BlockType()  			               {  			               	AllTextures = "Sponge"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(20' "Glass"' new BlockType()  			               {  			               	AllTextures = "Glass"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(21' "RedCloth"' new BlockType()  			               {  			               	AllTextures = "RedCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(22' "OrangeCloth"' new BlockType()  			               {  			               	AllTextures = "OrangeCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(23' "YellowCloth"' new BlockType()  			               {  			               	AllTextures = "YellowCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(24' "LightGreenCloth"' new BlockType()  			               {  			               	AllTextures = "LightGreenCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(25' "GreenCloth"' new BlockType()  			               {  			               	AllTextures = "GreenCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(26' "AquaGreenCloth"' new BlockType()  			               {  			               	AllTextures = "AquaGreenCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(27' "CyanCloth"' new BlockType()  			               {  			               	AllTextures = "CyanCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(28' "BlueCloth"' new BlockType()  			               {  			               	AllTextures = "BlueCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(29' "PurpleCloth"' new BlockType()  			               {  			               	AllTextures = "PurpleCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(30' "IndigoCloth"' new BlockType()  			               {  			               	AllTextures = "IndigoCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(31' "VioletCloth"' new BlockType()  			               {  			               	AllTextures = "VioletCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(32' "MagentaCloth"' new BlockType()  			               {  			               	AllTextures = "MagentaCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(33' "PinkCloth"' new BlockType()  			               {  			               	AllTextures = "PinkCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(34' "BlackCloth"' new BlockType()  			               {  			               	AllTextures = "BlackCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(35' "GrayCloth"' new BlockType()  			               {  			               	AllTextures = "GrayCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(36' "WhiteCloth"' new BlockType()  			               {  			               	AllTextures = "WhiteCloth"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(37' "YellowFlowerDecorations"' new BlockType()  			               {  			               	AllTextures = "YellowFlowerDecorations"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(38' "RedRoseDecorations"' new BlockType()  			               {  			               	AllTextures = "RedRoseDecorations"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(39' "RedMushroom"' new BlockType()  			               {  			               	AllTextures = "RedMushroom"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(40' "BrownMushroom"' new BlockType()  			               {  			               	AllTextures = "BrownMushroom"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(41' "GoldBlock"' new BlockType()  			               {  			               	AllTextures = "GoldBlock"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(42' "IronBlock"' new BlockType()  			               {  			               	AllTextures = "IronBlock"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(43' "DoubleStair"' new BlockType()  			               {  			               	TopBottomTextures = "Stair"'  			               	SideTextures = "DoubleStairSide"'  			               	TextureIdForInventory = "DoubleStairSide"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(44' "Stair"' new BlockType()  			               {  			               	TopBottomTextures = "Stair"'  			               	SideTextures = "StairSide"'  			               	TextureIdForInventory = "StairInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(45' "Brick"' new BlockType()  			               {  			               	AllTextures = "Brick"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(47' "Bookcase"' new BlockType()  			               {  			               	TopBottomTextures = "OakWood"'  			               	SideTextures = "Bookcase"'  			               	TextureIdForInventory = "Bookcase"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(48' "MossyCobblestone"' new BlockType()  			               {  			               	AllTextures = "MossyCobblestone"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(49' "Obsidian"' new BlockType()  			               {  			               	AllTextures = "Obsidian"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(50' "Torch"' new BlockType()  			               {  			               	TextureIdTop = "TorchTop"'  			               	TextureIdBottom = "Torch"'  			               	SideTextures = "Torch"'  			               	TextureIdForInventory = "Torch"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Torch'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(50' "Torch"' new BlockType()  			               {  			               	TextureIdTop = "TorchTop"'  			               	TextureIdBottom = "Torch"'  			               	SideTextures = "Torch"'  			               	TextureIdForInventory = "Torch"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Torch'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(51' "Clay"' new BlockType()  			               {  			               	AllTextures = "Clay"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(52' "Marble"' new BlockType()  			               {  			               	AllTextures = "Marble"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(53' "Granite"' new BlockType()  			               {  			               	AllTextures = "Granite"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(54' "RedSand"' new BlockType()  			               {  			               	AllTextures = "RedSand"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(55' "Sandstone"' new BlockType()  			               {  			               	AllTextures = "Sandstone"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(56' "RedSandstone"' new BlockType()  			               {  			               	AllTextures = "RedSandstone"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(57' "Cactus"' new BlockType()  			               {  			               	TopBottomTextures = "CactusTopBottom"'  			               	SideTextures = "CactusSide"'  			               	TextureIdForInventory = "CactusSide"'  			               	DrawType = DrawType.Cactus'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(58' "DeadPlant"' new BlockType()  			               {  			               	AllTextures = "DeadPlant"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(59' "GrassPlant"' new BlockType()  			               {  			               	AllTextures = "GrassPlant"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(60' "BirchTreeTrunk"' new BlockType()  			               {  			               	TopBottomTextures = "BirchTreeTrunkTopBottom"'  			               	SideTextures = "BirchTreeTrunk"'  			               	TextureIdForInventory = "BirchTreeTrunk"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(61' "BirchLeaves"' new BlockType()  			               {  			               	AllTextures = "BirchLeaves"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(62' "BirchSapling"' new BlockType()  			               {  			               	AllTextures = "BirchSapling"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(63' "BirchWood"' new BlockType()  			               {  			               	AllTextures = "BirchWood"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(64' "SpruceTreeTrunk"' new BlockType()  			               {  			               	TopBottomTextures = "SpruceTreeTrunkTopBottom"'  			               	SideTextures = "SpruceTreeTrunk"'  			               	TextureIdForInventory = "SpruceTreeTrunk"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(65' "SpruceLeaves"' new BlockType()  			               {  			               	AllTextures = "SpruceLeaves"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(66' "SpruceSapling"' new BlockType()  			               {  			               	AllTextures = "SpruceSapling"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(67' "SpruceWood"' new BlockType()  			               {  			               	AllTextures = "SpruceWood"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(68' "HalfCobblestone"' new BlockType()  			               {  			               	TopBottomTextures = "Cobblestone"'  			               	SideTextures = "CobblestoneHalf"'  			               	TextureIdForInventory = "CobblestoneHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(69' "HalfMossyCobblestone"' new BlockType()  			               {  			               	TopBottomTextures = "MossyCobblestone"'  			               	SideTextures = "MossyCobblestoneHalf"'  			               	TextureIdForInventory = "MossyCobblestoneHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(70' "HalfOakWood"' new BlockType()  			               {  			               	TopBottomTextures = "OakWood"'  			               	SideTextures = "OakWoodHalf"'  			               	TextureIdForInventory = "OakWoodHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(71' "HalfBirchWood"' new BlockType()  			               {  			               	TopBottomTextures = "BirchWood"'  			               	SideTextures = "BirchWoodHalf"'  			               	TextureIdForInventory = "BirchWoodHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(72' "HalfSpruceWood"' new BlockType()  			               {  			               	TopBottomTextures = "SpruceWood"'  			               	SideTextures = "SpruceWoodHalf"'  			               	TextureIdForInventory = "SpruceWoodHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(73' "HalfBrick"' new BlockType()  			               {  			               	TopBottomTextures = "Brick"'  			               	SideTextures = "BrickHalf"'  			               	TextureIdForInventory = "BrickHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(74' "HalfSandBrick"' new BlockType()  			               {  			               	TopBottomTextures = "SandBrick"'  			               	SideTextures = "SandBrickHalf"'  			               	TextureIdForInventory = "SandBrickHalfInventory"'  			               	DrawType = DrawType.HalfHeight'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(100' "BrushedMetal"' new BlockType()  			               {  			               	AllTextures = "BrushedMetal"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(101' "ChemicalGreen"' new BlockType()  			               {  			               	AllTextures = "ChemicalGreen"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(102' "Salt"' new BlockType()  			               {  			               	AllTextures = "Salt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(103' "Roof"' new BlockType()  			               {  			               	AllTextures = "Roof"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(104' "Camouflage"' new BlockType()  			               {  			               	AllTextures = "Camouflage"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(105' "DirtForFarming"' new BlockType()  			               {  			               	AllTextures = "DirtForFarming"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  			               {  			               	AllTextures = "Apples"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	IsUsable = true'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(107' "Hay"' new BlockType()  			               {  			               	AllTextures = "Hay"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(108' "Crops1"' new BlockType()  			               {  			               	AllTextures = "Crops1"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(109' "Crops2"' new BlockType()  			               {  			               	AllTextures = "Crops2"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(110' "Crops3"' new BlockType()  			               {  			               	AllTextures = "Crops3"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(111' "Crops4"' new BlockType()  			               {  			               	AllTextures = "Crops4"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(112' "CraftingTable"' new BlockType()  			               {  			               	TopBottomTextures = "CraftingTableTopBottom"'  			               	SideTextures = "CraftingTableSide"'  			               	TextureIdForInventory = "CraftingTableTopBottom"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	IsUsable = true'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(113' "Minecart"' new BlockType()  			               {  			               	AllTextures = "Minecart"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(114' "Trampoline"' new BlockType()  			               {  			               	AllTextures = "Trampoline"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(115' "FillStart"' new BlockType()  			               {  			               	AllTextures = "FillStart"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(116' "Cuboid"' new BlockType()  			               {  			               	AllTextures = "FillEnd"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(117' "FillArea"' new BlockType()  			               {  			               	AllTextures = "FillArea"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(118' "Water0"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(119' "Water1"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(120' "Water2"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(121' "Water3"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(122' "Water4"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(123' "Water5"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(124' "Water6"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(125' "Water7"' new BlockType()  			               {  			               	AllTextures = "Water"'  			               	DrawType = DrawType.Fluid'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(130' "GrassTrap"' new BlockType()  			               {  			               	TextureIdTop = "Grass"'  			               	SideTextures = "GrassSide"'  			               	TextureIdForInventory = "GrassSide"'  			               	TextureIdBottom = "Dirt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(131' "GoldCoin"' new BlockType()  			               {  			               	AllTextures = "GoldCoin"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(132' "GoldBar"' new BlockType()  			               {  			               	TopBottomTextures = "GoldBarTopBottom"'  			               	SideTextures = "GoldBarSide"'  			               	TextureIdForInventory = "GoldBarInvetory"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	LightRadius = 5'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(132' "GoldBar"' new BlockType()  			               {  			               	TopBottomTextures = "GoldBarTopBottom"'  			               	SideTextures = "GoldBarSide"'  			               	TextureIdForInventory = "GoldBarInvetory"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	LightRadius = 5'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(133' "SilverOre"' new BlockType()  			               {  			               	AllTextures = "SilverOre"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(135' "SilverCoin"' new BlockType()  			               {  			               	AllTextures = "SilverCoin"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(140' "DirtBrick"' new BlockType()  			               {  			               	AllTextures = "DirtBrick"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(141' "LuxuryRoof"' new BlockType()  			               {  			               	AllTextures = "LuxuryRoof"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(142' "SandBrick"' new BlockType()  			               {  			               	AllTextures = "SandBrick"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(143' "FakeBookcase"' new BlockType()  			               {  			               	TopBottomTextures = "OakWood"'  			               	SideTextures = "Bookcase"'  			               	TextureIdForInventory = "Bookcase"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(144' "WoodDesk"' new BlockType()  			               {  			               	TextureIdTop = "WoodBlock"'  			               	TextureIdBottom = "Empty"'  			               	SideTextures = "GlassDeskSide"'  			               	TextureIdForInventory = "WoodBlock"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(145' "GlassDesk"' new BlockType()  			               {  			               	TextureIdTop = "Glass"'  			               	TextureIdBottom = "Empty"'  			               	SideTextures = "GlassDeskSide"'  			               	TextureIdForInventory = "GlassDeskSide"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(146' "Mosaik"' new BlockType()  			               {  			               	AllTextures = "Mosaik"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(147' "Asphalt"' new BlockType()  			               {  			               	AllTextures = "Asphalt"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(148' "Cake"' new BlockType()  			               {  			               	TextureIdTop = "CakeTop"'  			               	TextureIdBottom = "Gray"'  			               	SideTextures = "CakeSide"'  			               	TextureIdForInventory = "CakeTop"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(149' "Fire"' new BlockType()  			               {  			               	AllTextures = "Fire"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(149' "Fire"' new BlockType()  			               {  			               	AllTextures = "Fire"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(149' "Fire"' new BlockType()  			               {  			               	AllTextures = "Fire"'  			               	LightRadius = 15'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               	DamageToPlayer = 2'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(150' "Fence"' new BlockType()  			               {  			               	AllTextures = "Fence"'  			               	DrawType = DrawType.Fence'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(151' "Compass"' new BlockType()  			               {  			               	AllTextures = "CompassInventory"'  			               	TextureIdForInventory = "CompassInventory"'  			               	DrawType = DrawType.Plant'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(152' "Ladder"' new BlockType()  			               {  			               	AllTextures = "Ladder"'  			               	DrawType = DrawType.Ladder'  			               	WalkableType = WalkableType.Fluid'  			               	Sounds = solidSounds'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(153' "EmptyHand"' new BlockType()  			               {  			               	AllTextures = "YellowThing"'  			               	DrawType = DrawType.Torch'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = noSound'  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(176 + i' "Rail" + i.ToString()' new BlockType()  				               {  				               	TextureIdTop = "Rail" + i.ToString()'  				               	TextureIdBottom = "Cobblestone"'  				               	SideTextures = "Cobblestone"'  				               	TextureIdForInventory = "Rail" + i.ToString()'  				               	DrawType = DrawType.Transparent'  				               	WalkableType = WalkableType.Solid'  				               	Sounds = solidSounds'  				               	Rail = i'  				               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: i < 64
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(241' "RedCarpet"' new BlockType()  			               {  			               	AllTextures = "RedCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(242' "OrangeCarpet"' new BlockType()  			               {  			               	AllTextures = "OrangeCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(243' "YellowCarpet"' new BlockType()  			               {  			               	AllTextures = "YellowCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(244' "LightGreenCarpet"' new BlockType()  			               {  			               	AllTextures = "LightGreenCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(245' "GreenCarpet"' new BlockType()  			               {  			               	AllTextures = "GreenCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(246' "AquaGreenCarpet"' new BlockType()  			               {  			               	AllTextures = "AquaGreenCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(247' "CyanCarpet"' new BlockType()  			               {  			               	AllTextures = "CyanCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(248' "BlueCarpet"' new BlockType()  			               {  			               	AllTextures = "BlueCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(249' "PurpleCarpet"' new BlockType()  			               {  			               	AllTextures = "PurpleCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(250' "IndigoCarpet"' new BlockType()  			               {  			               	AllTextures = "IndigoCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(251' "VioletCarpet"' new BlockType()  			               {  			               	AllTextures = "VioletCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(252' "MagentaCarpet"' new BlockType()  			               {  			               	AllTextures = "MagentaCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(253' "PinkCarpet"' new BlockType()  			               {  			               	AllTextures = "PinkCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(254' "BlackCarpet"' new BlockType()  			               {  			               	AllTextures = "BlackCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(255' "GrayCarpet"' new BlockType()  			               {  			               	AllTextures = "GrayCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(256' "WhiteCarpet"' new BlockType()  			               {  			               	AllTextures = "WhiteCloth"'  			               	DrawType = DrawType.Flat'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds  			               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.AddToStartInventory("Torch"' 6);
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.AddToStartInventory("CraftingTable"' 6);
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.AddToStartInventory("GoldCoin"' 2);
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,Start,The following statement contains a magic number: m.AddToStartInventory("GoldBar"' 5);
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "SpringGrass"'  					               	TextureIdBack = "SpringGrassSide"'  					               	TextureIdFront = "SpringGrassSide"'  					               	TextureIdLeft = "SpringGrassSide"'  					               	TextureIdRight = "SpringGrassSide"'  					               	TextureIdForInventory = "SpringGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "SpringGrass"'  					               	TextureIdBack = "SpringGrassSide"'  					               	TextureIdFront = "SpringGrassSide"'  					               	TextureIdLeft = "SpringGrassSide"'  					               	TextureIdRight = "SpringGrassSide"'  					               	TextureIdForInventory = "SpringGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  					               {  					               	AllTextures = "OakLeaves"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  					               {  					               	AllTextures = "Apples"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	IsUsable = true'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "Grass"'  					               	TextureIdBack = "GrassSide"'  					               	TextureIdFront = "GrassSide"'  					               	TextureIdLeft = "GrassSide"'  					               	TextureIdRight = "GrassSide"'  					               	TextureIdForInventory = "GrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "Grass"'  					               	TextureIdBack = "GrassSide"'  					               	TextureIdFront = "GrassSide"'  					               	TextureIdLeft = "GrassSide"'  					               	TextureIdRight = "GrassSide"'  					               	TextureIdForInventory = "GrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  					               {  					               	AllTextures = "OakLeaves"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  					               {  					               	AllTextures = "Apples"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	IsUsable = true'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(8' "Water"' new BlockType()  					               {  					               	AllTextures = "Water"'  					               	DrawType = DrawType.Fluid'  					               	WalkableType = WalkableType.Fluid'  					               	Sounds = noSound'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "AutumnGrass"'  					               	TextureIdBack = "AutumnGrassSide"'  					               	TextureIdFront = "AutumnGrassSide"'  					               	TextureIdLeft = "AutumnGrassSide"'  					               	TextureIdRight = "AutumnGrassSide"'  					               	TextureIdForInventory = "AutumnGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "AutumnGrass"'  					               	TextureIdBack = "AutumnGrassSide"'  					               	TextureIdFront = "AutumnGrassSide"'  					               	TextureIdLeft = "AutumnGrassSide"'  					               	TextureIdRight = "AutumnGrassSide"'  					               	TextureIdForInventory = "AutumnGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  					               {  					               	AllTextures = "AutumnLeaves"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  					               {  					               	AllTextures = "AutumnApples"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	IsUsable = true'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: currentSeason == 2
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "WinterGrass"'  					               	TextureIdBack = "WinterGrassSide"'  					               	TextureIdFront = "WinterGrassSide"'  					               	TextureIdLeft = "WinterGrassSide"'  					               	TextureIdRight = "WinterGrassSide"'  					               	TextureIdForInventory = "WinterGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(2' "Grass"' new BlockType()  					               {  					               	TextureIdTop = "WinterGrass"'  					               	TextureIdBack = "WinterGrassSide"'  					               	TextureIdFront = "WinterGrassSide"'  					               	TextureIdLeft = "WinterGrassSide"'  					               	TextureIdRight = "WinterGrassSide"'  					               	TextureIdForInventory = "WinterGrassSide"'  					               	TextureIdBottom = "Dirt"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	WhenPlayerPlacesGetsConvertedTo = 3'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(18' "OakLeaves"' new BlockType()  					               {  					               	AllTextures = "WinterLeaves"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(106' "Apples"' new BlockType()  					               {  					               	AllTextures = "WinterApples"'  					               	DrawType = DrawType.Transparent'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = solidSounds'  					               	IsUsable = true'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: m.SetBlockType(8' "Water"' new BlockType()  					               {  					               	AllTextures = "Ice"'  					               	DrawType = DrawType.Solid'  					               	WalkableType = WalkableType.Solid'  					               	Sounds = snowSounds'  					               	IsSlipperyWalk = true'  					               });
Magic Number,ManicDigger.Mods.War,CoreBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\CoreBlocks.cs,UpdateSeasons,The following statement contains a magic number: currentSeason == 3
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(154' "Pistol"' new BlockType()  			               {  			               	AllTextures = "Pistol"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "pistolhand.png"'  			               	IsPistol = true'  			               	AimRadius = 15'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "pistolhandsights.png"'  			               	IronSightsAimRadius = 15'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 12'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 50'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(155' "SubmachineGun"' new BlockType()  			               {  			               	AllTextures = "SubmachineGun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "submachinegunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.1f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "submachinegunhandsights.png"'  			               	IronSightsAimRadius = 20'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 15'  			               	DamageHead = 40'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(156' "Shotgun"' new BlockType()  			               {  			               	AllTextures = "Shotgun"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "shotgunhand.png"'  			               	IsPistol = true'  			               	AimRadius = 50'  			               	Recoil = 0.08f'  			               	Delay = 1f'  			               	BulletsPerShot = 6'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 1f'  			               	IronSightsImage = "shotgunhandsights.png"'  			               	IronSightsAimRadius = 50'  			               	IronSightsFov = 0.8f'  			               	AmmoMagazine = 30'  			               	AmmoTotal = 120'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 60'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(157' "Rifle"' new BlockType()  			               {  			               	AllTextures = "Rifle"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = solidSounds'  			               	handimage = "riflehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 2f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = true'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "riflehandsights.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 48'  			               	ReloadDelay = 2'  			               	ExplosionRange = 0.2f'  			               	ExplosionTime = 0.2f'  			               	DamageBody = 35'  			               	DamageHead = 100'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(158' "MedicalKit"' new BlockType()  			               {  			               	AllTextures = "MedicalKit"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               	handimage = null'  			               	IsPistol = false'  			               	WalkSpeedWhenUsed = 1f'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(159' "AmmoPack"' new BlockType()  			               {  			               	TextureIdTop = "AmmoTop"'  			               	TextureIdBack = "AmmoPack"'  			               	TextureIdFront = "AmmoPack"'  			               	TextureIdLeft = "AmmoPack"'  			               	TextureIdRight = "AmmoPack"'  			               	TextureIdForInventory = "AmmoPack"'  			               	TextureIdBottom = "AmmoTop"'  			               	DrawType = DrawType.Transparent'  			               	WalkableType = WalkableType.Empty'  			               	Sounds = solidSounds'  			               	handimage = null'  			               	IsPistol = false'  			               	WalkSpeedWhenUsed = 1f'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,WarBlocks,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\WarBlocks.cs,Start,The following statement contains a magic number: m.SetBlockType(160' "Grenade"' new BlockType()  			               {  			               	AllTextures = "Grenade"'  			               	DrawType = DrawType.Solid'  			               	WalkableType = WalkableType.Solid'  			               	Sounds = grenadesounds'  			               	handimage = "grenadehand.png"'  			               	IsPistol = true'  			               	AimRadius = 20'  			               	Recoil = 0.04f'  			               	Delay = 0.5f'  			               	WalkSpeedWhenUsed = 1f'  			               	IronSightsEnabled = false'  			               	IronSightsMoveSpeed = 0.4f'  			               	IronSightsImage = "grenadehand.png"'  			               	IronSightsAimRadius = 10'  			               	IronSightsFov = 0.5f'  			               	AmmoMagazine = 6'  			               	AmmoTotal = 6'  			               	ReloadDelay = 2'  			               	ExplosionRange = 10f'  			               	ExplosionTime = 1f'  			               	ProjectileSpeed = 25f'  			               	ProjectileBounce = true'  			               	DamageBody = 200'  			               	PistolType = PistolType.Grenade'  			               });
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetChunk,The following statement contains a magic number: bool IsHay = _rnd.NextDouble () < 0.005 ? false : true;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetBlock,The following statement contains a magic number: z > height - 5
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: x += 30;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: y -= 30;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: double p = 0.5;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: double zoom = 150;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: int octaves = 6;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: double frequency = Math.Pow (2' a);
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: double maxheight = 64;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: int height = (int)(((getnoise + 1) / 2.0) * (maxheight - 5)) + 3;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: int height = (int)(((getnoise + 1) / 2.0) * (maxheight - 5)) + 3;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: int height = (int)(((getnoise + 1) / 2.0) * (maxheight - 5)) + 3;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: height = 2;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,GetHeight,The following statement contains a magic number: height < 2
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,findNoise2,The following statement contains a magic number: int n = (int)x + (int)y * 57;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,findNoise1,The following statement contains a magic number: n = (n << 13) ^ n;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,findNoise1,The following statement contains a magic number: int nn = (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,findNoise1,The following statement contains a magic number: int nn = (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,findNoise1,The following statement contains a magic number: int nn = (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,findNoise1,The following statement contains a magic number: return 1.0 - ((double)nn / 1073741824.0);
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,interpolate,The following statement contains a magic number: double ft = x * 3.1415927;
Magic Number,ManicDigger.Mods.War,Noise2DWorldGeneratorWar,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\Noise2DWorldGenerator.cs,interpolate,The following statement contains a magic number: double f = (1.0 - Math.Cos (ft)) * 0.5;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Seed = (Seed + 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.OctaveCount = (6);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Frequency = (1.0 / 180.0);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Lacunarity = ((treeCount / 20.0) * (treeCount / 20.0) * 2.0);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Lacunarity = ((treeCount / 20.0) * (treeCount / 20.0) * 2.0);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,Init,The following statement contains a magic number: treenoise.Lacunarity = ((treeCount / 20.0) * (treeCount / 20.0) * 2.0);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: double count = treenoise.GetValue(x/512.0' 0' y/512.0) * 1000;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: double count = treenoise.GetValue(x/512.0' 0' y/512.0) * 1000;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: double count = treenoise.GetValue(x/512.0' 0' y/512.0) * 1000;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: count = System.Math.Min(count' 300);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: MakeSmallTrees(x' y' z' m.GetChunkSize()' _rnd' treeCount + 10 - (10 - treeCount / 10));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: MakeSmallTrees(x' y' z' m.GetChunkSize()' _rnd' treeCount + 10 - (10 - treeCount / 10));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,PopulateChunk,The following statement contains a magic number: MakeSmallTrees(x' y' z' m.GetChunkSize()' _rnd' treeCount + 10 - (10 - treeCount / 10));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeSmallTrees,The following statement contains a magic number: chooseTreeType = rnd.Next(0' 3);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeSmallTrees,The following statement contains a magic number: switch (chooseTreeType)  				{  						case 0: MakeTreeType1(x' y' z' rnd); break; //Spruce  						case 1: MakeTreeType2(x' y' z' rnd); break; //Oak  						case 2: MakeTreeType3(x' y' z' rnd); break; //Birch  				}
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int treeHeight = rnd.Next(8' 12);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int treeHeight = rnd.Next(8' 12);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: i == treeHeight - 4
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: k < 4
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: i == treeHeight - 3
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: k < 3
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType1,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: int treeHeight = rnd.Next(4' 6);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: int treeHeight = rnd.Next(4' 6);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: float chanceToAppleTree = 0.1f;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: k < 2
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType2,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int treeHeight = rnd.Next(6' 9);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int treeHeight = rnd.Next(6' 9);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: k < 2
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 0 && i > 3
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 0 && i > 3
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: dir = 45;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: dir += 45;
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: int length = dir % 90 == 0 ? k : (int)(k / 2);
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: xx = length * (int)System.Math.Round(System.Math.Cos(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: yy = length * (int)System.Math.Round(System.Math.Sin(dir * System.Math.PI / 180));
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: k < 3
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: j < 9
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 2 && i > 3
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 2 && i > 3
Magic Number,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeTreeType3,The following statement contains a magic number: i % 3 == 2 && i > 3
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Start,The following statement contains a magic number: m.SetWorldSize(256' 256' 128);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Start,The following statement contains a magic number: m.SetWorldSize(256' 256' 128);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Start,The following statement contains a magic number: m.SetWorldSize(256' 256' 128);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Start,The following statement contains a magic number: m.RegisterTimer(UpdateMedicalKitAmmoPack' 0.1);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,PlayerJoin,The following statement contains a magic number: m.SetPlayerHealth(playerid' 100' 100);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,PlayerJoin,The following statement contains a magic number: m.SetPlayerHealth(playerid' 100' 100);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,PlayerJoin,The following statement contains a magic number: switch (warmode)  			{  				case WarMode.Edit:  					m.EnableExtraPrivilegeToAll("build"' false);  					m.EnableFreemove(playerid' true);  					int posx = m.GetMapSizeX() / 2;  					int posy = m.GetMapSizeY() / 2;  					int posz = BlockHeight(posx' posy);  					m.SetPlayerPosition(playerid' posx' posy' posz);  					ClearInventory(playerid);  					GiveAllBlocks(playerid);  					m.SetGlobalDataNotSaved("enablewater"' false);  					break;  				case WarMode.TeamDeathmatch:  					m.SetCreative(false);  					m.EnableExtraPrivilegeToAll("build"' true);  					m.EnableFreemove(playerid' false);  					ShowTeamSelectionDialog(playerid);  					m.SetGlobalDataNotSaved("enablewater"' true);  					break;  			}
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,PlayerJoin,The following statement contains a magic number: switch (warmode)  			{  				case WarMode.Edit:  					m.EnableExtraPrivilegeToAll("build"' false);  					m.EnableFreemove(playerid' true);  					int posx = m.GetMapSizeX() / 2;  					int posy = m.GetMapSizeY() / 2;  					int posz = BlockHeight(posx' posy);  					m.SetPlayerPosition(playerid' posx' posy' posz);  					ClearInventory(playerid);  					GiveAllBlocks(playerid);  					m.SetGlobalDataNotSaved("enablewater"' false);  					break;  				case WarMode.TeamDeathmatch:  					m.SetCreative(false);  					m.EnableExtraPrivilegeToAll("build"' true);  					m.EnableFreemove(playerid' false);  					ShowTeamSelectionDialog(playerid);  					m.SetGlobalDataNotSaved("enablewater"' true);  					break;  			}
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,GiveAllBlocks,The following statement contains a magic number: m.GrabBlocks(playerid' i' 9999);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: background.Width = 800;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: background.Height = 600;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: w1.X = 50;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: w1.Y = 400;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: w2.X = 600;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: w2.Y = 400;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: w3.X = 300;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: w3.Y = 400;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: d.Width = 800;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowTeamSelectionDialog,The following statement contains a magic number: d.Height = 600;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowClassSelectionDialog,The following statement contains a magic number: background.Width = 800;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowClassSelectionDialog,The following statement contains a magic number: background.Height = 600;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowClassSelectionDialog,The following statement contains a magic number: w.X = 50 + 250 * i;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowClassSelectionDialog,The following statement contains a magic number: w.X = 50 + 250 * i;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowClassSelectionDialog,The following statement contains a magic number: w.Y = 400;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowClassSelectionDialog,The following statement contains a magic number: i < 3
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowClassSelectionDialog,The following statement contains a magic number: d.Width = 800;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowClassSelectionDialog,The following statement contains a magic number: d.Height = 600;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowSubclassSelectionDialog,The following statement contains a magic number: background.Width = 800;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowSubclassSelectionDialog,The following statement contains a magic number: background.Height = 600;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowSubclassSelectionDialog,The following statement contains a magic number: w.X = 50 + 275 * i;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowSubclassSelectionDialog,The following statement contains a magic number: w.X = 50 + 275 * i;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowSubclassSelectionDialog,The following statement contains a magic number: w.Y = 400;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowSubclassSelectionDialog,The following statement contains a magic number: d.Width = 800;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ShowSubclassSelectionDialog,The following statement contains a magic number: d.Height = 600;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ResetInventoryOnRespawn,The following statement contains a magic number: i < 4
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ResetInventoryOnRespawn,The following statement contains a magic number: i < 5
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ResetInventoryOnRespawn,The following statement contains a magic number: i < 10
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnPlayerDeath,The following statement contains a magic number: switch (reason)  			{  				case DeathReason.FallDamage:  					Die(player);  					deathMessage = string.Format("{0}{1} &7was doomed to fall."' GetTeamColorString(players[player].team)' m.GetPlayerName(player));  					break;  				case DeathReason.BlockDamage:  					if (sourceID == m.GetBlockId("Lava"))  					{  						Die(player);  						deathMessage = string.Format("{0}{1} &7thought they could swim in Lava."' GetTeamColorString(players[player].team)' m.GetPlayerName(player));  					}  					else if (sourceID == m.GetBlockId("Fire"))  					{  						Die(player);  						deathMessage = string.Format("{0}{1} &7was burned alive."' GetTeamColorString(players[player].team)' m.GetPlayerName(player));  					}  					else  					{  						Die(player);  						deathMessage = string.Format("{0}{1} &7was killed by {2}."' GetTeamColorString(players[player].team)' m.GetPlayerName(player)' m.GetBlockName(sourceID));  					}  					break;  				case DeathReason.Drowning:  					Die(player);  					deathMessage = string.Format("{0}{1} &7tried to breathe under water."' GetTeamColorString(players[player].team)' m.GetPlayerName(player));  					break;  				case DeathReason.Explosion:  					if (!EnableTeamkill)  					{  						if (players[sourceID].team == players[player].team)  						{  							break;  						}  					}  					//Check if one of the players is spectator  					if (players[sourceID].team == Team.Spectator || players[player].team == Team.Spectator)  					{  						//Just here for safety. Spectators shouldn't have weapons...  						break;  					}  					//Check if one of the players is dead  					if (players[player].isdead || players[sourceID].isdead)  					{  						break;  					}  					Die(player);  					if (sourceID == player)  					{  						deathMessage = string.Format("{0}{1} &7blew himself up."' GetTeamColorString(players[player].team)' m.GetPlayerName(player));  						break;  					}  					if (players[sourceID].team != players[player].team)  					{  						players[sourceID].kills = players[sourceID].kills + 1;  					}  					else  					{  						players[sourceID].kills = players[sourceID].kills - 2;  					}  					if (players[sourceID].team == players[player].team)  					{  						deathMessage = string.Format("{0}{1} &7was blown into pieces by {2}{3}. - {4}TEAMKILL"' GetTeamColorString(players[player].team)' m.GetPlayerName(player)' GetTeamColorString(players[sourceID].team)' m.GetPlayerName(sourceID)' m.colorError());  					}  					else  					{  						deathMessage = string.Format("{0}{1} &7was blown into pieces by {2}{3}&7."' GetTeamColorString(players[player].team)' m.GetPlayerName(player)' GetTeamColorString(players[sourceID].team)' m.GetPlayerName(sourceID));  					}  					break;  				default:  					Die(player);  					deathMessage = string.Format("{0}{1} &7died."' GetTeamColorString(players[player].team)' m.GetPlayerName(player));  					break;  			}
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Respawn,The following statement contains a magic number: switch (players[playerid].team)  			{  				case Team.Blue:  					posx = m.GetMapSizeX() / 2;  					posy = 50;  					break;  				case Team.Green:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() - 50;  					break;  				case Team.Spectator:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() / 2;  					break;  			}
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Respawn,The following statement contains a magic number: switch (players[playerid].team)  			{  				case Team.Blue:  					posx = m.GetMapSizeX() / 2;  					posy = 50;  					break;  				case Team.Green:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() - 50;  					break;  				case Team.Spectator:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() / 2;  					break;  			}
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Respawn,The following statement contains a magic number: switch (players[playerid].team)  			{  				case Team.Blue:  					posx = m.GetMapSizeX() / 2;  					posy = 50;  					break;  				case Team.Green:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() - 50;  					break;  				case Team.Spectator:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() / 2;  					break;  			}
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Respawn,The following statement contains a magic number: switch (players[playerid].team)  			{  				case Team.Blue:  					posx = m.GetMapSizeX() / 2;  					posy = 50;  					break;  				case Team.Green:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() - 50;  					break;  				case Team.Spectator:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() / 2;  					break;  			}
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Respawn,The following statement contains a magic number: switch (players[playerid].team)  			{  				case Team.Blue:  					posx = m.GetMapSizeX() / 2;  					posy = 50;  					break;  				case Team.Green:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() - 50;  					break;  				case Team.Spectator:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() / 2;  					break;  			}
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Respawn,The following statement contains a magic number: switch (players[playerid].team)  			{  				case Team.Blue:  					posx = m.GetMapSizeX() / 2;  					posy = 50;  					break;  				case Team.Green:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() - 50;  					break;  				case Team.Spectator:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() / 2;  					break;  			}
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,BlockHeight,The following statement contains a magic number: return m.GetMapSizeZ() / 2;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Hit,The following statement contains a magic number: dx = (dx / dist) * 0.1f;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Hit,The following statement contains a magic number: dy = (dy / dist) * 0.1f;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Hit,The following statement contains a magic number: dz = (dz / dist) * 0.1f;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Hit,The following statement contains a magic number: int dmghead = 50;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Hit,The following statement contains a magic number: int dmgbody = 15;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: row1 = cutText(row1' HeadingFont' tableWidth - 2 * tablePadding);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: row2 = cutText(row2' SmallFontBold' tableWidth - 2 * tablePadding);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: string row3_2 = (int)(m.GetPlayerPing(player) * 1000) + "ms";
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: float row1Height = textHeight(row1' HeadingFont) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: float row2Height = textHeight(row2' SmallFontBold) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: float row3Height = textHeight(row3_1' SmallFont) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: float row4Height = textHeight(row4_1' SmallFont) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: float row5Height = textHeight(row5_1' NormalFontBold) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: float listEntryHeight = textHeight("Player"' NormalFont) + 2 * listEntryPaddingTopBottom;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: string s = string.Format("{0} {1}ms {2} kills"' m.GetPlayerName(players[i])' (int)(m.GetPlayerPing(players[i]) * 1000)' this.players[players[i]].kills);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: widgets.Add(Widget.MakeText(s' NormalFont' tableX + 200 * t' tableY + heightOffset + listEntryHeight * i' Color.White.ToArgb()));
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,OnTabKey,The following statement contains a magic number: wesc.ClickKey = (char)27;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,xcenter,The following statement contains a magic number: return (outerWidth / 2 - innerWidth / 2);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,xcenter,The following statement contains a magic number: return (outerWidth / 2 - innerWidth / 2);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ycenter,The following statement contains a magic number: return (outerHeight / 2 - innerHeight / 2);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,ycenter,The following statement contains a magic number: return (outerHeight / 2 - innerHeight / 2);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,cutText,The following statement contains a magic number: textWidth(text' font) > maxWidth && text.Length > 3
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdatePlayerModel,The following statement contains a magic number: m.SetPlayerHeight(player' 2.2f' 2.4f);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdatePlayerModel,The following statement contains a magic number: m.SetPlayerHeight(player' 2.2f' 2.4f);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdateRespawnTimer,The following statement contains a magic number: DialogFont f = new DialogFont("Verdana"' 60f' DialogFontStyle.Regular);
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdateRespawnTimer,The following statement contains a magic number: Widget w = Widget.MakeText(text' f' -m.MeasureTextSize(text' f)[0] / 2' -200' Color.Red.ToArgb());
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdateRespawnTimer,The following statement contains a magic number: Widget w = Widget.MakeText(text' f' -m.MeasureTextSize(text' f)[0] / 2' -200' Color.Red.ToArgb());
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdateMedicalKitAmmoPack,The following statement contains a magic number: health += 30;
Magic Number,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdateMedicalKitAmmoPack,The following statement contains a magic number: ammo += m.GetBlockType(k).AmmoTotal / 3;
Magic Number,ManicDigger.Mods.Fortress,HttpInfoModule,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\HttpStats.cs,BytesToString,The following statement contains a magic number: int place = Convert.ToInt32(Math.Floor(Math.Log(bytes' 1024)));
Magic Number,ManicDigger.Mods.Fortress,HttpInfoModule,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\HttpStats.cs,BytesToString,The following statement contains a magic number: double num = Math.Round(bytes / Math.Pow(1024' place)' 1);
Magic Number,ManicDigger.Mods.Fortress,HttpInfoModule,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\HttpStats.cs,ToReadableString,The following statement contains a magic number: formatted = formatted.Substring(0' formatted.Length - 2);
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: row1 = cutText(row1' HeadingFont' tableWidth - 2 * tablePadding);
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: row2 = cutText(row2' SmallFontBold' tableWidth - 2 * tablePadding);
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: string row3_2 = (int)(m.GetPlayerPing(player) * 1000) + "ms";
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: float row1Height = textHeight(row1' HeadingFont) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: float row2Height = textHeight(row2' SmallFontBold) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: float row3Height = textHeight(row3_1' SmallFont) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: float row4Height = textHeight(row4_1' SmallFont) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: float row5Height = textHeight(row5_1' NormalFontBold) + 2 * tablePadding;
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: float listEntryHeight = textHeight("Player"' NormalFont) + 2 * listEntryPaddingTopBottom;
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: widgets.Add(Widget.MakeText(row5_2' NormalFontBold' tableX + tableIdColumnWidth + tablePlayerColumnWidth / 2 - textWidth(row5_2' NormalFontBold) / 2' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb()));
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: widgets.Add(Widget.MakeText(row5_2' NormalFontBold' tableX + tableIdColumnWidth + tablePlayerColumnWidth / 2 - textWidth(row5_2' NormalFontBold) / 2' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb()));
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: widgets.Add(Widget.MakeText(row5_3' NormalFontBold' tableX + tableIdColumnWidth + tablePlayerColumnWidth + tablePingColumnWidth / 2 - textWidth(row5_3' NormalFontBold) / 2' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb()));
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: widgets.Add(Widget.MakeText(row5_3' NormalFontBold' tableX + tableIdColumnWidth + tablePlayerColumnWidth + tablePingColumnWidth / 2 - textWidth(row5_3' NormalFontBold) / 2' tableY + heightOffset + tablePadding' TEXT_COLOR.ToArgb()));
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: i % 2 == 0
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,OnTabKey,The following statement contains a magic number: wesc.ClickKey = (char)27;
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,xcenter,The following statement contains a magic number: return (outerWidth / 2 - innerWidth / 2);
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,xcenter,The following statement contains a magic number: return (outerWidth / 2 - innerWidth / 2);
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,ycenter,The following statement contains a magic number: return (outerHeight / 2 - innerHeight / 2);
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,ycenter,The following statement contains a magic number: return (outerHeight / 2 - innerHeight / 2);
Magic Number,ManicDigger.Mods.Fortress,PlayerList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\PlayerList.cs,cutText,The following statement contains a magic number: textWidth(text' font) > maxWidth && text.Length > 3
Duplicate Code,ManicDigger.Server,ServerSystemBanList,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Systems\BanList.cs,OnCommand,The method contains a code clone-set at the following line numbers (starting from the method definition): ((58' 80)' (111' 133))
Missing Default,ManicDigger.Server,EnetNetServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\NetworkEnetServer.cs,ReadMessage,The following switch statement is missing a default case: switch (event_.Type())  					{  						case EnetEventType.Connect:  							{  								EnetPeer peer = event_.Peer();  								peer.SetUserData(clientid++);  								EnetNetConnection senderConnectionConnect = new EnetNetConnection();  								senderConnectionConnect.peer = event_.Peer();  								NetIncomingMessage message = new NetIncomingMessage();  								message.SenderConnection = senderConnectionConnect;  								message.Type = NetworkMessageType.Connect;  								messages.Enqueue(message);  							}  							break;  						case EnetEventType.Receive:  							{  								byte[] data = event_.Packet().GetBytes();  								event_.Packet().Dispose();  								EnetNetConnection senderConnectionReceive = new EnetNetConnection();  								senderConnectionReceive.peer = event_.Peer();  								NetIncomingMessage message = new NetIncomingMessage();  								message.SenderConnection = senderConnectionReceive;  								message.message = data;  								message.Type = NetworkMessageType.Data;  								messages.Enqueue(message);  							}  							break;  						case EnetEventType.Disconnect:  							{  								EnetNetConnection senderConnectionDisconnect = new EnetNetConnection();  								senderConnectionDisconnect.peer = event_.Peer();  								NetIncomingMessage message = new NetIncomingMessage();  								message.SenderConnection = senderConnectionDisconnect;  								message.Type = NetworkMessageType.Disconnect;  								messages.Enqueue(message);  							}  							break;  					}
Missing Default,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,ProcessNetMessage,The following switch statement is missing a default case: switch (msg.Type)          {              case NetworkMessageType.Connect:                  //new connection                  //ISocket client1 = d_MainSocket.Accept();                  NetConnection client1 = msg.SenderConnection;                  IPEndPointCi iep1 = client1.RemoteEndPoint();                    ClientOnServer c = new ClientOnServer();                  c.mainSocket = mainSocket;                  c.socket = client1;                  c.Ping.SetTimeoutValue(config.ClientConnectionTimeout);                  c.chunksseen = new bool[d_Map.MapSizeX / chunksize * d_Map.MapSizeY / chunksize * d_Map.MapSizeZ / chunksize];                  lock (clients)                  {                      this.lastClientId = this.GenerateClientId();                      c.Id = lastClientId;                      clients[lastClientId] = c;                  }                  //clientid = c.Id;                  c.notifyMapTimer = new Timer()                  {                      INTERVAL = 1.0 / SEND_CHUNKS_PER_SECOND'                  };                  c.notifyMonstersTimer = new Timer()                  {                      INTERVAL = 1.0 / SEND_MONSTER_UDAPTES_PER_SECOND'                  };                  break;              case NetworkMessageType.Data:                  if (clientid == -1)                  {                      break;                  }                    // process packet                  try                  {                      TotalReceivedBytes += msg.messageLength;                      TryReadPacket(clientid' msg.message);                  }                  catch (Exception e)                  {                      //client problem. disconnect client.                      Console.WriteLine("Exception at client " + clientid + ". Disconnecting client.");                      SendPacket(clientid' ServerPackets.DisconnectPlayer(language.ServerClientException()));                      KillPlayer(clientid);                      Console.WriteLine(e.ToString());                  }                  break;              case NetworkMessageType.Disconnect:                  Console.WriteLine("Client disconnected.");                  KillPlayer(clientid);                  break;          }
Missing Default,ManicDigger.Server,Server,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Server.cs,TimeCommand,The following switch statement is missing a default case: switch (strSplit[0])  				{  					case "set":  						{  							TimeSpan time;    							if (!strValue.Contains(":"))  							{  								//If only a number is present' the days will be set to the given number  								//since we don't want that' a ":" is enforced  								SendMessage(sourceClientId' colorError + language.Get("Server_CommandException") + " unable to convert \"" + strValue + "\" to a time");  							}  							else  							if (TimeSpan.TryParse(strValue' out time))  							{  								_time.Set(time);  								SendMessage(sourceClientId' "The time is: " + _time.Time.ToString());  							}  							else  							{  								SendMessage(sourceClientId' colorError + language.Get("Server_CommandException") + " unable to convert \"" + strValue + "\" to a time");  							}  						}  						break;  					case "add":  						{  							TimeSpan time;    							int nMinuts = 0;  							if (int.TryParse(strValue' out nMinuts))  							{  								//only a number  								//take it as minutes  								_time.Add(TimeSpan.FromMinutes(nMinuts));  								SendMessage(sourceClientId' "The time is: " + _time.Time.ToString());  							}  							else  							if (TimeSpan.TryParse(strValue' out time))  							{  								_time.Add(time);  								SendMessage(sourceClientId' "The time is: " + _time.Time.ToString());  							}  							else  							{  								SendMessage(sourceClientId' colorError + language.Get("Server_CommandException") + " unable to convert \"" + strValue + "\" to a time");  							}  						}  						break;  					case "speed":  						{  							int nSpeed = 0;    							if (!int.TryParse(strValue' out nSpeed))  							{  								SendMessage(sourceClientId' colorError + language.Get("Server_CommandException") + " unable to convert \"" + strValue + "\" to a number");  							}  							else  							{  								_time.SpeedOfTime = nSpeed;  								SendMessage(sourceClientId' "speed of time changed");  							}  						}  						break;  				}
Missing Default,ManicDigger.Mods,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\TreeGenerator.cs,MakeSmallTrees,The following switch statement is missing a default case: switch (chooseTreeType)  				{  						case 0: MakeTreeType1(x' y' z' rnd); break; //Spruce  						case 1: MakeTreeType2(x' y' z' rnd); break; //Oak  						case 2: MakeTreeType3(x' y' z' rnd); break; //Birch  				}
Missing Default,ManicDigger.Mods,VegetationGrowth,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\Fortress\VegetationGrowth.cs,BlockTickGrowSapling,The following switch statement is missing a default case: switch (GetTreeType(m.GetBlock(x' y' z)))  			{  				case TreeType.Oak:  					if (IsShadow(x' y' z) || !BlockSupportsSapling(x' y' z - 1))  					{  						return;  					}  					MakeTree(x' y' z' OakTreeTrunk' OakLeaves' true);  					break;    				case TreeType.Birch:  					if (IsShadow(x' y' z) || !BlockSupportsSapling(x' y' z - 1))  					{  						return;  					}  					MakeTree(x' y' z' BirchTreeTrunk' BirchLeaves' false);  					break;    				case TreeType.Spruce:  					if (IsShadow(x' y' z) || !BlockSupportsSapling(x' y' z - 1))  					{  						return;  					}  					MakeTree(x' y' z' SpruceTreeTrunk' SpruceLeaves' false);  					break;  			}
Missing Default,ManicDigger.Mods.War,TreeGenerator,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\TreeGenerator.cs,MakeSmallTrees,The following switch statement is missing a default case: switch (chooseTreeType)  				{  						case 0: MakeTreeType1(x' y' z' rnd); break; //Spruce  						case 1: MakeTreeType2(x' y' z' rnd); break; //Oak  						case 2: MakeTreeType3(x' y' z' rnd); break; //Birch  				}
Missing Default,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,PlayerJoin,The following switch statement is missing a default case: switch (warmode)  			{  				case WarMode.Edit:  					m.EnableExtraPrivilegeToAll("build"' false);  					m.EnableFreemove(playerid' true);  					int posx = m.GetMapSizeX() / 2;  					int posy = m.GetMapSizeY() / 2;  					int posz = BlockHeight(posx' posy);  					m.SetPlayerPosition(playerid' posx' posy' posz);  					ClearInventory(playerid);  					GiveAllBlocks(playerid);  					m.SetGlobalDataNotSaved("enablewater"' false);  					break;  				case WarMode.TeamDeathmatch:  					m.SetCreative(false);  					m.EnableExtraPrivilegeToAll("build"' true);  					m.EnableFreemove(playerid' false);  					ShowTeamSelectionDialog(playerid);  					m.SetGlobalDataNotSaved("enablewater"' true);  					break;  			}
Missing Default,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,GetTeamColorString,The following switch statement is missing a default case: switch (team)  			{  				case Team.Blue:  					return BlueColor;  				case Team.Green:  					return GreenColor;  				case Team.Spectator:  					return SpectatorColor;  			}
Missing Default,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,Respawn,The following switch statement is missing a default case: switch (players[playerid].team)  			{  				case Team.Blue:  					posx = m.GetMapSizeX() / 2;  					posy = 50;  					break;  				case Team.Green:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() - 50;  					break;  				case Team.Spectator:  					posx = m.GetMapSizeX() / 2;  					posy = m.GetMapSizeY() / 2;  					break;  			}
Missing Default,ManicDigger.Mods.War,War,D:\research\architectureSmells\repos\manicdigger_manicdigger\ManicDiggerLib\Server\Mods\War\War.cs,UpdatePlayerModel,The following switch statement is missing a default case: switch (team)  			{  				case Team.Blue:  					m.SetPlayerModel(player' model' "playerblue.png");  					break;  				case Team.Green:  					m.SetPlayerModel(player' model' "playergreen.png");  					break;  				case Team.Spectator:  					m.SetPlayerModel(player' model' "mineplayer.png");  					break;  			}
