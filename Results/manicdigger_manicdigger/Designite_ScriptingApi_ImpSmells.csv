Implementation smell,Namespace,Class,File,Method,Description
Long Method,ManicDigger,ServerClientMisc,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ServerClient.cs,getDefaultGroups,The method has 110 lines of code.
Complex Method,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,ProcessRequestText,Cyclomatic complexity of the method is 11
Complex Method,ManicDigger,ServerClientMisc,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ServerClient.cs,ClientColorToString,Cyclomatic complexity of the method is 17
Long Parameter List,ManicDigger,ModManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,AddCraftingRecipe2,The method has 6 parameters. Parameters: output' outputAmount' Input0' Input0Amount' Input1' Input1Amount
Long Parameter List,ManicDigger,ModManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,AddCraftingRecipe3,The method has 8 parameters. Parameters: output' outputAmount' Input0' Input0Amount' Input1' Input1Amount' Input2' Input2Amount
Long Parameter List,ManicDigger,ModManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,PlaySoundAt,The method has 5 parameters. Parameters: x' y' z' sound' range
Long Parameter List,ManicDigger,ModManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,Index3d,The method has 5 parameters. Parameters: x' y' h' sizex' sizey
Long Parameter List,ManicDigger,ModManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,AddPermissionArea,The method has 7 parameters. Parameters: x1' y1' z1' x2' y2' z2' permissionLevel
Long Parameter List,ManicDigger,ModManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,RemovePermissionArea,The method has 6 parameters. Parameters: x1' y1' z1' x2' y2' z2
Long Parameter List,ManicDigger,ModManager,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,SendExplosion,The method has 7 parameters. Parameters: targetplayer' dx' dy' dz' relativeposition' range' time
Long Parameter List,ManicDigger,Widget,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,MakeSolid,The method has 5 parameters. Parameters: x' y' width' height' color
Long Parameter List,ManicDigger,Widget,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,MakeText,The method has 5 parameters. Parameters: text' Font' x' y' textColor
Long Parameter List,ManicDigger,Widget,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,MakeTextBox,The method has 7 parameters. Parameters: text' Font' x' y' width' height' textColor
Long Identifier,ManicDigger,BlockType,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,,The length of the parameter WhenPlayerPlacesGetsConvertedTo is 31.
Long Statement,ManicDigger,Group,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ServerClient.cs,ToString,The length of the statement  "			return string.Format("{0}:{1}:{2}:{3}:{4}"' this.Name' this.Level' ServerClientMisc.PrivilegesString(this.GroupPrivileges)' this.GroupColor.ToString()' passwordString); " is 168.
Complex Conditional,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,ProcessRequestText,The conditional expression  "(request.Method == HttpMethod.POST ||                                  request.Method == HttpMethod.PUT ||                                  request.Method == HttpMethod.PATCH) &&                                  request.Headers.ContainsKey("Content-Length")"  is complex.
Empty Catch Block,FragLabs.HTTP,HttpServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpServer.cs,Start,The method has an empty catch block.
Empty Catch Block,FragLabs.HTTP,SeekableStream,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\ResponseProducer.cs,Dispose,The method has an empty catch block.
Empty Catch Block,FragLabs.HTTP,SeekableStream,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\ResponseProducer.cs,Dispose,The method has an empty catch block.
Magic Number,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,PreProcessBuffer,The following statement contains a magic number: int headerEnd = IndexOf(new byte[]{ 13' 10' 13' 10 }' args.Buffer);
Magic Number,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,PreProcessBuffer,The following statement contains a magic number: int headerEnd = IndexOf(new byte[]{ 13' 10' 13' 10 }' args.Buffer);
Magic Number,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,PreProcessBuffer,The following statement contains a magic number: int headerEnd = IndexOf(new byte[]{ 13' 10' 13' 10 }' args.Buffer);
Magic Number,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,PreProcessBuffer,The following statement contains a magic number: int headerEnd = IndexOf(new byte[]{ 13' 10' 13' 10 }' args.Buffer);
Magic Number,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,PreProcessBuffer,The following statement contains a magic number: headerEnd += 4;
Magic Number,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,ParseInitialLine,The following statement contains a magic number: bits.Length < 3
Magic Number,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,ParseInitialLine,The following statement contains a magic number: bits.Length < 3
Magic Number,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,ParseInitialLine,The following statement contains a magic number: bits[2] == "HTTP/1.0"
Magic Number,FragLabs.HTTP,HttpServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpServer.cs,HttpServer,The following statement contains a magic number: MaxBodySize = 16777216;
Magic Number,FragLabs.HTTP,HttpServer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpServer.cs,Start,The following statement contains a magic number: sock.Listen(50);
Magic Number,FragLabs.HTTP,StreamProducer,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\ResponseProducer.cs,StreamProducer,The following statement contains a magic number: readBuffer = new byte[1024];
Magic Number,ManicDigger,Inventory,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,OnDeserialized,The following statement contains a magic number: RightHand = new Item[10];
Magic Number,ManicDigger,Inventory,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,OnDeserialized,The following statement contains a magic number: i < 10
Magic Number,ManicDigger,Inventory,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,OnSerializing,The following statement contains a magic number: i < 10
Magic Number,ManicDigger,Inventory,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ModManager.cs,Create,The following statement contains a magic number: i.RightHand = new Item[10];
Magic Number,ManicDigger,ServerClientMisc,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ServerClient.cs,getDefaultGroups,The following statement contains a magic number: moderator.Level = 2;
Magic Number,ManicDigger,ServerClientMisc,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\ServerClient.cs,getDefaultGroups,The following statement contains a magic number: admin.Level = 3;
Missing Default,FragLabs.HTTP,HttpRequestReader,D:\research\architectureSmells\repos\manicdigger_manicdigger\ScriptingApi\libHTTP\HttpRequestReader.cs,ProcessRequestText,The following switch statement is missing a default case: switch (processingState)              {                  case ProcessingState.InitialLine:                      {                          var lfIndex = requestText.IndexOf("\n");                          if (lfIndex > -1)                          {                              var initialLine = requestText.Substring(0' lfIndex + 1).Trim();                              requestText = requestText.Substring(lfIndex + 1);                              ParseInitialLine(initialLine);                              if (!processingComplete)                              {                                  processingState = ProcessingState.Headers;                                  ProcessRequestText();                              }                          }                      }                      break;                  case ProcessingState.Headers:                      {                          var lfIndex = requestText.IndexOf("\n");                          while (lfIndex > -1)                          {                              var line = requestText.Substring(0' lfIndex + 1).Trim();                              if (line == "")                              {                                  processingState = ProcessingState.Body;                                  break;                              }                              requestText = requestText.Substring(lfIndex + 1);                              ParseHeader(line);                              if (processingComplete)                                  return;                              lfIndex = requestText.IndexOf("\n");                          }                            if (processingState == ProcessingState.Body)                          {                              //  determine if a body should be read or not                              if ((request.Method == HttpMethod.POST ||                                  request.Method == HttpMethod.PUT ||                                  request.Method == HttpMethod.PATCH) &&                                  request.Headers.ContainsKey("Content-Length"))                              {                                  //  body required                                  InitRequestBody();                              }                              else                              {                                  //  done reading                                  processingComplete = true;                                  if (ReadComplete != null)                                      ReadComplete(request);                              }                          }                      }                      break;              }
