Implementation smell,Namespace,Class,File,Method,Description
Long Method,LightInject,Emitter,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Emit,The method has 123 lines of code.
Complex Method,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,Cyclomatic complexity of the method is 10
Complex Method,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodForUnknownService,Cyclomatic complexity of the method is 15
Complex Method,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodBasedOnClosedGenericServiceRequest,Cyclomatic complexity of the method is 8
Complex Method,LightInject,Emitter,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Emit,Cyclomatic complexity of the method is 29
Long Parameter List,LightInject,IAssemblyScanner,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Scan,The method has 5 parameters. Parameters: assembly' serviceRegistry' lifetime' shouldRegister' serviceNameProvider
Long Parameter List,LightInject,ServiceRegistryExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Register,The method has 5 parameters. Parameters: serviceRegistry' serviceType' factory' serviceName' lifetime
Long Parameter List,LightInject,ServiceFactoryExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,GetInstance,The method has 5 parameters. Parameters: factory' arg1' arg2' arg3' serviceName
Long Parameter List,LightInject,ServiceFactoryExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,GetInstance,The method has 5 parameters. Parameters: factory' arg1' arg2' arg3' arg4
Long Parameter List,LightInject,ServiceFactoryExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,GetInstance,The method has 6 parameters. Parameters: factory' arg1' arg2' arg3' arg4' serviceName
Long Parameter List,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ServiceContainer,The method has 20 parameters. Parameters: options' constructorDependencyFactories' propertyDependencyFactories' availableServices' decorators' overrides' factoryRules' initializers' constructionInfoProvider' methodSkeletonFactory' log' compositionRootExecutor' serviceNameProvider' propertyDependencySelector' genericArgumentMapper' assemblyScanner' constructorDependencySelector' constructorSelector' assemblyLoader' scopeManagerProvider
Long Parameter List,LightInject,TypeConstructionInfoBuilder,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,TypeConstructionInfoBuilder,The method has 5 parameters. Parameters: constructorSelector' constructorDependencySelector' propertyDependencySelector' getConstructorDependencyExpression' getPropertyDependencyExpression
Long Parameter List,LightInject,AssemblyScanner,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Scan,The method has 5 parameters. Parameters: assembly' serviceRegistry' lifetimeFactory' shouldRegister' serviceNameProvider
Long Parameter List,LightInject,AssemblyScanner,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,BuildImplementationMap,The method has 5 parameters. Parameters: implementingType' serviceRegistry' lifetimeFactory' shouldRegister' serviceNameProvider
Long Parameter List,LightInject,AssemblyScanner,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,RegisterInternal,The method has 5 parameters. Parameters: serviceType' implementingType' serviceRegistry' lifetime' serviceNameProvider
Long Identifier,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ServiceContainer,The length of the parameter constructorDependencyFactories is 30.
Long Identifier,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,EmitConstructorDependencies,The length of the parameter createScopedLazyFromDelegateMethod is 34.
Long Identifier,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodBasedOnFuncServiceRequest,The length of the parameter createScopedGenericNamedFuncMethod is 34.
Long Identifier,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodForReadOnlyCollectionServiceRequest,The length of the parameter closedGenericReadOnlyCollectionType is 35.
Long Identifier,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodBasedOnClosedGenericServiceRequest,The length of the parameter openGenericServiceRegistrations is 31.
Long Identifier,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodBasedOnClosedGenericServiceRequest,The length of the parameter closedGenericImplementingTypeCandidate is 38.
Long Identifier,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodForEnumerableServiceServiceRequest,The length of the parameter openGenericServiceRegistrations is 31.
Long Identifier,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodForEnumerableServiceServiceRequest,The length of the parameter constructableOpenGenericServices is 32.
Long Identifier,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,,The length of the parameter constructorDependencyFactories is 30.
Long Identifier,LightInject,TypeConstructionInfoBuilder,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,TypeConstructionInfoBuilder,The length of the parameter getConstructorDependencyExpression is 34.
Long Identifier,LightInject,TypeConstructionInfoBuilder,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,TypeConstructionInfoBuilder,The length of the parameter getPropertyDependencyExpression is 31.
Long Identifier,LightInject,TypeConstructionInfoBuilder,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,,The length of the parameter getConstructorDependencyExpression is 34.
Long Identifier,LightInject,TypeConstructionInfoBuilder,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,,The length of the parameter getPropertyDependencyExpression is 31.
Long Identifier,LightInject,CompositionRootTypeExtractor,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CompositionRootTypeExtractor,The length of the parameter compositionRootAttributeExtractor is 33.
Long Identifier,LightInject,CompositionRootTypeExtractor,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,,The length of the parameter compositionRootAttributeExtractor is 33.
Long Identifier,LightInject,GenericArgumentMapper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateMap,The length of the parameter baseTypeImplementingOpenGenericServiceType is 42.
Long Identifier,LightInject,GenericArgumentMapper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,GetBaseTypeImplementingGenericTypeDefinition,The length of the parameter baseTypeImplementingGenericTypeDefinition is 41.
Long Identifier,LightInject,ScopeLoader,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,,The length of the parameter ValidateTrackedTransientMethod is 30.
Long Identifier,LightInject,FuncHelper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,,The length of the parameter CreateScopedGenericNamedFuncMethod is 34.
Long Identifier,LightInject,LazyHelper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,,The length of the parameter CreateScopedLazyFromDelegateMethod is 34.
Long Identifier,LightInject,ReflectionHelper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,,The length of the parameter GetInstanceWithParametersMethods is 32.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CanGetInstance,The length of the statement  "            if (serviceType.IsFuncRepresentingService() || serviceType.IsFuncRepresentingNamedService() || serviceType.IsFuncWithParameters() || serviceType.IsLazy()) " is 154.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,RegisterConstructorDependency,The length of the statement  "                    $"This might lead to incorrect behavior if a service with a {typeof(TDependency)} dependency has already been resolved"; " is 120.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,RegisterConstructorDependency,The length of the statement  "                    $"This might lead to incorrect behavior if a service with a {typeof(TDependency)} dependency has already been resolved"; " is 120.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,RegisterPropertyDependency,The length of the statement  "                    $"This might lead to incorrect behavior if a service with a {typeof(TDependency)} dependency has already been resolved"; " is 120.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Decorate,The length of the statement  "            var decoratorRegistration = new DecoratorRegistration { ServiceType = serviceType' ImplementingType = decoratorType' CanDecorate = predicate }; " is 143.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Decorate,The length of the statement  "            var decoratorRegistration = new DecoratorRegistration { FactoryExpression = factory' ServiceType = typeof(TService)' CanDecorate = si => true }; " is 144.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Compile,The length of the statement  "                    return $"{type.FullName.Substring(0' type.FullName.LastIndexOf("`"' StringComparison.OrdinalIgnoreCase))}<{string.Join("' "' type.GetTypeInfo().GenericTypeParameters.Select(GetPrettyName))}>"; " is 192.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateClosedGenericDecoratorRegistration,The length of the statement  "                log.Info($"Skipping decorator [{implementingType.FullName}] since it is incompatible with the service type [{serviceType.FullName}]"); " is 134.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreatePropertyInjectionDelegate,The length of the statement  "                IMethodSkeleton methodSkeleton = methodSkeletonFactory(typeof(object)' new[] { typeof(object[])' typeof(Scope)' typeof(object) }); " is 130.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreatePropertyInjectionDelegate,The length of the statement  "                return (Func<object[]' Scope' object' object>)methodSkeleton.CreateDelegate(typeof(Func<object[]' Scope' object' object>)); " is 123.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,UpdateServiceRegistration,The length of the statement  "                var message = $"Cannot overwrite existing serviceregistration {existingRegistration} after the first call to GetInstance."; " is 123.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,EmitNewInstanceUsingFactoryDelegate,The length of the statement  "                var createServiceRequestMethod = ServiceRequestHelper.CreateServiceRequestMethod.MakeGenericMethod(serviceRegistration.ServiceType); " is 132.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,EmitConstructorDependencies,The length of the statement  "                        var createScopedLazyFromDelegateMethod = LazyHelper.CreateScopedLazyFromDelegateMethod.MakeGenericMethod(dependency.ServiceType.GetTypeInfo().GenericTypeArguments.Last()); " is 171.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateServiceEmitterBasedOnFactoryRule,The length of the statement  "                return emitter => EmitLifetime(serviceRegistration' e => EmitNewInstanceWithDecorators(serviceRegistration' e)' emitter); " is 121.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodForListServiceRequest,The length of the statement  "            MethodInfo closedGenericToListMethod = openGenericToArrayMethod.MakeGenericMethod(TypeHelper.GetElementType(serviceType)); " is 122.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodBasedOnClosedGenericServiceRequest,The length of the statement  "            Dictionary<string' (Type closedGenericImplentingType' ILifetime lifetime)> candidates = new Dictionary<string' (Type closedGenericImplentingType' ILifetime lifetime)>(StringComparer.OrdinalIgnoreCase); " is 201.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodBasedOnClosedGenericServiceRequest,The length of the statement  "                var closedGenericImplementingTypeCandidate = GenericArgumentMapper.TryMakeGenericType(closedGenericServiceType' openGenericServiceRegistration.ImplementingType); " is 161.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodBasedOnClosedGenericServiceRequest,The length of the statement  "                    candidates.Add(openGenericServiceRegistration.ServiceName' (closedGenericImplementingTypeCandidate' openGenericServiceRegistration.Lifetime)); " is 142.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateEmitMethodForEnumerableServiceServiceRequest,The length of the statement  "                var constructableOpenGenericServices = openGenericServiceRegistrations.Values.Select(r => new { r.Lifetime' r.ServiceName' closedGenericImplementingType = GenericArgumentMapper.TryMakeGenericType(actualServiceType' r.ImplementingType) }) " is 237.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,GetEmitMethods,The length of the statement  "            return emitters.GetOrAdd(serviceType' s => new ThreadSafeDictionary<string' Action<IEmitter>>(StringComparer.CurrentCultureIgnoreCase)); " is 136.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,GetAvailableServices,The length of the statement  "            return availableServices.GetOrAdd(serviceType' s => new ThreadSafeDictionary<string' ServiceRegistration>(StringComparer.CurrentCultureIgnoreCase)); " is 148.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,RegisterService,The length of the statement  "            var serviceRegistration = new ServiceRegistration { ServiceType = serviceType' ImplementingType = implementingType' ServiceName = serviceName' Lifetime = lifetime ?? DefaultLifetime }; " is 184.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,EnsureConstructable,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(implementingType)' $"The implementing type {implementingType.FullName} is not assignable from {serviceType.FullName}."); " is 165.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ResolveEmitMethod,The length of the statement  "            return methodSkeleton => EmitLifetime(serviceRegistration' ms => EmitNewInstanceWithDecorators(serviceRegistration' ms)' methodSkeleton); " is 137.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,EmitLifetime,The length of the statement  "                int instanceDelegateIndex = servicesToDelegatesIndex.GetOrAdd(serviceRegistration' _ => CreateInstanceDelegateIndex(emitMethod)); " is 129.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,EmitLifetime,The length of the statement  "                int instanceDelegateIndex = servicesToDelegatesIndex.GetOrAdd(serviceRegistration' _ => CreateInstanceDelegateIndex(emitMethod)); " is 129.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,EmitLifetime,The length of the statement  "                var nonClosingGetInstanceMethod = LifetimeHelper.GetNonClosingGetInstanceMethod(serviceRegistration.Lifetime.GetType()); " is 120.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,EmitLifetime,The length of the statement  "                    int instanceDelegateIndex = servicesToDelegatesIndex.GetOrAdd(serviceRegistration' _ => CreateInstanceDelegateIndex(emitMethod)); " is 129.
Long Statement,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,EmitLifetime,The length of the statement  "                    int instanceDelegateIndex = servicesToDelegatesIndex.GetOrAdd(serviceRegistration' _ => CreateInstanceDelegateIndex(emitMethod)); " is 129.
Long Statement,LightInject,MostResolvableConstructorSelector,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Execute,The length of the statement  "            ConstructorInfo[] constructorCandidates = implementingType.GetTypeInfo().DeclaredConstructors.Where(c => c.IsPublic && !c.IsStatic).ToArray(); " is 142.
Long Statement,LightInject,MostResolvableConstructorSelector,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CanCreateParameterDependency,The length of the statement  "            return canGetInstance(parameterInfo.ParameterType' string.Empty) || canGetInstance(parameterInfo.ParameterType' GetServiceName(parameterInfo)); " is 143.
Long Statement,LightInject,ServiceRegistration,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ToString,The length of the statement  "            return $"ServiceType: '{ServiceType}'' ServiceName: '{ServiceName}'' ImplementingType: '{ImplementingType}'' Lifetime: '{lifeTime}'"; " is 133.
Long Statement,LightInject,GenericMappingResult,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,GetMappedArguments,The length of the statement  "                string message = $"The generic parameter(s) {missingParametersString} found in type {openGenericImplementingType.FullName} cannot be mapped from {genericServiceType.FullName}"; " is 176.
Long Statement,LightInject,Dependency,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ToString,The length of the statement  "            return sb.AppendFormat("[Requested dependency: ServiceType:{0}' ServiceName:{1}]"' ServiceType' ServiceName).ToString(); " is 120.
Long Statement,LightInject,PropertyDependency,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ToString,The length of the statement  "            return string.Format("[Target Type: {0}]' [Property: {1}({2})]"' Property.DeclaringType' Property.Name' Property.PropertyType) + "' " + base.ToString(); " is 152.
Long Statement,LightInject,ConstructorDependency,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ToString,The length of the statement  "            return string.Format("[Target Type: {0}]' [Parameter: {1}({2})]"' Parameter.Member.DeclaringType' Parameter.Name' Parameter.ParameterType) + "' " + base.ToString(); " is 164.
Long Statement,LightInject,GenericArgumentMapper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Map,The length of the statement  "            return new GenericMappingResult(genericParameterNames' genericArgumentMap' genericServiceType' openGenericImplementingType); " is 124.
Long Statement,LightInject,GenericArgumentMapper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,MapGenericArguments,The length of the statement  "                        MapGenericArguments(serviceTypeGenericArgument.GetTypeInfo().GenericTypeArguments' baseTypeGenericArgument.GetTypeInfo().GenericTypeArguments' map); " is 148.
Long Statement,LightInject,GenericArgumentMapper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,GetBaseTypeImplementingGenericTypeDefinition,The length of the statement  "                    .FirstOrDefault(i => i.GetTypeInfo().IsGenericType && i.GetTypeInfo().GetGenericTypeDefinition() == genericTypeDefinition); " is 123.
Long Statement,LightInject,GenericArgumentMapper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,GetBaseTypeImplementingGenericTypeDefinition,The length of the statement  "                throw new InvalidOperationException($"The generic type definition {genericTypeDefinition.FullName} not implemented by implementing type {implementingType.FullName}"); " is 166.
Long Statement,LightInject,GenericArgumentMapper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ImplementsOpenGenericTypeDefinition,The length of the statement  "            return baseType.GetTypeInfo().IsGenericType && baseType.GetTypeInfo().GetGenericTypeDefinition() == genericTypeDefinition; " is 122.
Long Statement,LightInject,PropertySelector,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,IsReadOnly,The length of the statement  "            return propertyInfo.SetMethod == null || propertyInfo.SetMethod.IsStatic || propertyInfo.SetMethod.IsPrivate || propertyInfo.GetIndexParameters().Length > 0; " is 157.
Long Statement,LightInject,LifetimeHelper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ResolveNonClosingGetInstanceMethod,The length of the statement  "            return lifetimeType.GetTypeInfo().DeclaredMethods.SingleOrDefault(m => m.GetParameters().Select(p => p.ParameterType).SequenceEqual(parameterTypes)); " is 149.
Long Statement,LightInject,ScopeLoader,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ValidateTrackedTransient,The length of the statement  "                    string message = $@"The disposable instance ({instance.GetType()}) was created outside a scope. If 'ContainerOptions.EnableCurrentScope=false'' " is 143.
Long Statement,LightInject,ScopeLoader,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ValidateTrackedTransient,The length of the statement  "the service must be requested directly from the scope. If `ContainerOptions.EnableCurrentScope=true`' the service can be requested from the container' " is 150.
Long Statement,LightInject,ScopeLoader,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ValidateScope,The length of the statement  "                string message = $@"Attempt to create a scoped instance ({typeof(TService)}) outside a scope. If 'ContainerOptions.EnableCurrentScope=false'' " is 141.
Long Statement,LightInject,ScopeLoader,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ValidateScope,The length of the statement  "the service must be requested directly from the scope. If `ContainerOptions.EnableCurrentScope=true`' the service can be requested from the container' " is 150.
Long Statement,LightInject,ReflectionHelper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateGetInstanceWithParametersMethod,The length of the statement  "                                                                                           && m.GetGenericArguments().Length == genericTypeArguments.Length && m.GetParameters().All(p => p.Name != "serviceName")); " is 121.
Long Statement,LightInject,ReflectionHelper,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreateGenericGetNamedParameterizedInstanceDelegate,The length of the statement  "            return (arg1' arg2' arg3' arg4) => factory.GetInstance<TArg1' TArg2' TArg3' TArg4' TService>(arg1' arg2' arg3' arg4' serviceName); " is 130.
Complex Conditional,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CanGetInstance,The conditional expression  "serviceType.IsFuncRepresentingService() || serviceType.IsFuncRepresentingNamedService() || serviceType.IsFuncWithParameters() || serviceType.IsLazy()"  is complex.
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: switch (index)              {                  case 0:                      emitter.Emit(OpCodes.Ldloc_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldloc_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldloc_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldloc_3);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: switch (index)              {                  case 0:                      emitter.Emit(OpCodes.Ldloc_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldloc_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldloc_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldloc_3);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: index <= 255
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,PushArgument,The following statement contains a magic number: switch (index)              {                  case 0:                      emitter.Emit(OpCodes.Ldarg_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldarg_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldarg_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldarg_3);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,PushArgument,The following statement contains a magic number: switch (index)              {                  case 0:                      emitter.Emit(OpCodes.Ldarg_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldarg_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldarg_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldarg_3);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,PushArgument,The following statement contains a magic number: index <= 255
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Store,The following statement contains a magic number: switch (index)              {                  case 0:                      emitter.Emit(OpCodes.Stloc_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Stloc_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Stloc_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Stloc_3);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Store,The following statement contains a magic number: switch (index)              {                  case 0:                      emitter.Emit(OpCodes.Stloc_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Stloc_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Stloc_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Stloc_3);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Store,The following statement contains a magic number: index <= 255
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: switch (value)              {                  case 0:                      emitter.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      emitter.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      emitter.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      emitter.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      emitter.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      emitter.Emit(OpCodes.Ldc_I4_8);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: switch (value)              {                  case 0:                      emitter.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      emitter.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      emitter.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      emitter.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      emitter.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      emitter.Emit(OpCodes.Ldc_I4_8);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: switch (value)              {                  case 0:                      emitter.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      emitter.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      emitter.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      emitter.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      emitter.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      emitter.Emit(OpCodes.Ldc_I4_8);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: switch (value)              {                  case 0:                      emitter.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      emitter.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      emitter.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      emitter.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      emitter.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      emitter.Emit(OpCodes.Ldc_I4_8);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: switch (value)              {                  case 0:                      emitter.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      emitter.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      emitter.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      emitter.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      emitter.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      emitter.Emit(OpCodes.Ldc_I4_8);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: switch (value)              {                  case 0:                      emitter.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      emitter.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      emitter.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      emitter.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      emitter.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      emitter.Emit(OpCodes.Ldc_I4_8);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: switch (value)              {                  case 0:                      emitter.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      emitter.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      emitter.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      emitter.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      emitter.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      emitter.Emit(OpCodes.Ldc_I4_8);                      return;              }
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: value > -129 && value < 128
Magic Number,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following statement contains a magic number: value > -129 && value < 128
Magic Number,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,RegisterOrdered,The following statement contains a magic number: return RegisterOrdered(serviceType' implementingTypes' lifeTimeFactory' i => i.ToString().PadLeft(3' '0'));
Magic Number,LightInject,ServiceContainer,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,CreatePropertyInjectionDelegate,The following statement contains a magic number: emitter.PushArgument(2);
Magic Number,LightInject,ImmutableHashTable<TKey;TValue>,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ImmutableHashTable,The following statement contains a magic number: this.Divisor = previous.Divisor * 2;
Magic Number,LightInject,ImmutableHashTable<TKey;TValue>,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ImmutableHashTable,The following statement contains a magic number: this.Buckets = new ImmutableHashTree<TKey' TValue>[2];
Magic Number,LightInject,ImmutableHashTable<TKey;TValue>,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ImmutableHashTable,The following statement contains a magic number: this.Divisor = 2;
Magic Number,LightInject,ImmutableHashTable<TKey;TValue>,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ImmutableHashTable,The following statement contains a magic number: InitializeBuckets(0' 2);
Magic Number,LightInject,ImmutableHashTree<TKey;TValue>,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ImmutableHashTree,The following statement contains a magic number: balance == -2
Magic Number,LightInject,ImmutableMapTree<TValue>,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,ImmutableMapTree,The following statement contains a magic number: balance == -2
Missing Default,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following switch statement is missing a default case: switch (index)              {                  case 0:                      emitter.Emit(OpCodes.Ldloc_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldloc_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldloc_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldloc_3);                      return;              }
Missing Default,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,PushArgument,The following switch statement is missing a default case: switch (index)              {                  case 0:                      emitter.Emit(OpCodes.Ldarg_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldarg_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldarg_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldarg_3);                      return;              }
Missing Default,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Store,The following switch statement is missing a default case: switch (index)              {                  case 0:                      emitter.Emit(OpCodes.Stloc_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Stloc_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Stloc_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Stloc_3);                      return;              }
Missing Default,LightInject,EmitterExtensions,D:\research\architectureSmells\repos1\seesharper_LightInject\src\LightInject\LightInject.cs,Push,The following switch statement is missing a default case: switch (value)              {                  case 0:                      emitter.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      emitter.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      emitter.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      emitter.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      emitter.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      emitter.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      emitter.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      emitter.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      emitter.Emit(OpCodes.Ldc_I4_8);                      return;              }
