Implementation smell,Namespace,Class,File,Method,Description
Long Method,MSTestHacks.RuntimeDataSource,AttachRuntimeDataSources,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\RuntimeDataSource\AttachRuntimeDataSources.cs,AttachRuntimeDataSources,The method has 116 lines of code.
Complex Method,MSTestHacks.RuntimeDataSource,AttachRuntimeDataSources,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\RuntimeDataSource\AttachRuntimeDataSources.cs,AttachRuntimeDataSources,Cyclomatic complexity of the method is 12
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,ExceptionAssert,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\Asserts\ExceptionAssert.cs,Throws,The length of the statement  "                var message = "Expected exception of type " + typeof(TException) + " but type of " + ex.GetType() + " was thrown instead." + exceptionDetails; " is 142.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,ExceptionAssert,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\Asserts\ExceptionAssert.cs,Throws,The length of the statement  "                Assert.IsTrue(ex is TException' "Expected exception of type " + typeof(TException) + " but type of " + ex.GetType() + " was thrown instead." + exceptionDetails); " is 161.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,ExceptionAssert,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\Asserts\ExceptionAssert.cs,Throws,The length of the statement  "                Assert.AreEqual(expectedMessage' ex.Message' "Expected exception with a message of '" + expectedMessage + "'' but exception with message of '" + ex.Message + "' was thrown instead." + exceptionDetails); " is 202.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,ExceptionAssert,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\Asserts\ExceptionAssert.cs,Throws,The length of the statement  "                Assert.IsTrue(ex is TException' "Expected exception of type " + typeof(TException) + " but type of " + ex.GetType() + " was thrown instead." + exceptionDetails); " is 161.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,ExceptionAssert,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\Asserts\ExceptionAssert.cs,Throws,The length of the statement  "                    Assert.Fail("Exception " + excValidator +" occured during evaluation of ValidatorForException " + exceptionDetails + Environment.NewLine + " Validator Exception Details: " + excValidator); " is 188.
Long Statement,MSTestHacks.Framework,Tools,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\Framework\Tools.cs,GetBaseDirectory,The length of the statement  "            var dir = Path.Combine(Path.GetDirectoryName(new UriBuilder(Assembly.GetExecutingAssembly().GetName().CodeBase).Uri.LocalPath)' "MSTestHacks"); " is 143.
Long Statement,MSTestHacks.RuntimeDataSource,AttachRuntimeDataSources,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\RuntimeDataSource\AttachRuntimeDataSources.cs,GetLoadableTypes,The length of the statement  "                Logger.WriteLine(ex.Source + " threw " + ex.Message + ": " + ex.LoaderExceptions.Aggregate(""' (e' s) => s + e.ToString())); " is 124.
Missing Default,MSTestHacks.Framework,ProviderReference,D:\research\architectureSmells\repos1\Thwaitesy_MSTestHacks\MSTestHacks\Framework\ProviderReference.cs,GetProviderObjectFromMember,The following switch statement is missing a default case: switch (member.MemberType)              {                  case MemberTypes.Property:                      PropertyInfo providerProperty = member as PropertyInfo;                      MethodInfo getMethod = providerProperty.GetGetMethod(true);                      if (!getMethod.IsStatic)                          instance = Construct(providerType);                      providerObject = providerProperty.GetValue(instance' null);                      break;                    case MemberTypes.Method:                      MethodInfo providerMethod = member as MethodInfo;                      if (!providerMethod.IsStatic)                          instance = Construct(providerType);                      providerObject = providerMethod.Invoke(instance' null);                      break;                    case MemberTypes.Field:                      FieldInfo providerField = member as FieldInfo;                      if (!providerField.IsStatic)                          instance = Construct(providerType);                      providerObject = providerField.GetValue(instance);                      break;              }
