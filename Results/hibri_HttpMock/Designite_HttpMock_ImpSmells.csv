Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,HttpMock,HttpServer,C:\repos\hibri_HttpMock\src\HttpMock\HttpServer.cs,IsAvailable,The method has an empty catch block.
Magic Number,HttpMock,FileResponseBody,C:\repos\hibri_HttpMock\src\HttpMock\FileResponseBody.cs,Connect,The following statement contains a magic number: using(FileStream fileStream = fileInfo.Open(FileMode.Open' FileAccess.Read)) {  				var buffer = new byte[fileInfo.Length];  				fileStream.Read(buffer' 0' (int) fileInfo.Length);  				int length = (int) fileInfo.Length;  				int offset = 0;    				if(_requestHeaders.ContainsKey(HttpRequestHeader.Range.ToString())) {  					string range = _requestHeaders[HttpRequestHeader.Range.ToString()];  					Regex rangeEx = new Regex(@"bytes=([\d]*)-([\d]*)");  					if(rangeEx.IsMatch(range)) {  						int from = Convert.ToInt32(rangeEx.Match(range).Groups[1].Value);  						int to = Convert.ToInt32(rangeEx.Match(range).Groups[2].Value);  						offset = from;  						length = (to - from) +1;  					}  				}  				ArraySegment<byte> data = new ArraySegment<byte>(buffer' offset' length);  				channel.OnData(data' null);  				  				_log.DebugFormat("Wrote {0} bytes to buffer"' data.Array.Length);  				channel.OnEnd();  				return null;  			}
Magic Number,HttpMock,HttpServer,C:\repos\hibri_HttpMock\src\HttpMock\HttpServer.cs,IsAvailable,The following statement contains a magic number: const int timesToWait = 5;
Magic Number,HttpMock,HttpServer,C:\repos\hibri_HttpMock\src\HttpMock\HttpServer.cs,IsAvailable,The following statement contains a magic number: using (var tcpClient = new TcpClient())  			{  				while (attempts < timesToWait)  				{  					try  					{  						tcpClient.Connect(_uri.Host' _uri.Port);  						return tcpClient.Connected;  					}  					catch (SocketException)  					{  					}    					Thread.Sleep(100);  					attempts++;  				}  				return false;  			}
Magic Number,HttpMock,HttpServer,C:\repos\hibri_HttpMock\src\HttpMock\HttpServer.cs,StartListening,The following statement contains a magic number: try  			{  				var ipEndPoint = new IPEndPoint(IPAddress.Any' _uri.Port);  				Exception e = null;  				_scheduler.Post(() =>  				{  					try  					{  						_disposableServer = KayakServer.Factory  							.CreateHttp(_requestProcessor' _scheduler)  							.Listen(ipEndPoint);  					}  					catch (Exception ex)  					{  						e = ex;  						_log.Error("Error when trying to post actions to the scheduler in StartListening"' ex);  					}  				});    				_scheduler.Start();  				Thread.Sleep(100);  				if (e != null)  					throw e;  			}  			catch (Exception ex)  			{  				_log.Error("Error when trying to StartListening"' ex);  			}
Magic Number,HttpMock,RequestProcessor,C:\repos\hibri_HttpMock\src\HttpMock\RequestProcessor.cs,ReturnHttpMockNotFound,The following statement contains a magic number: var notFoundResponse = new HttpResponseHead  			{Status = string.Format("{0} {1}"' 404' "NotFound")' Headers = dictionary};
