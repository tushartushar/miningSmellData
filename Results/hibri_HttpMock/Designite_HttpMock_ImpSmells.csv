Implementation smell,Namespace,Class,File,Method,Description
Long Statement,HttpMock,HeaderMatch,F:\newReposMay17\hibri_HttpMock\src\HttpMock\HeaderMatch.cs,MatchHeaders,The length of the statement  "	return requestHandler.RequestHeaders.All (expectedHeader => requestHeaders.Any (header => HeadersMatch (expectedHeader' header))); " is 130.
Long Statement,HttpMock,RequestMatcher,F:\newReposMay17\hibri_HttpMock\src\HttpMock\RequestMatcher.cs,Match,The length of the statement  "	var matches = requestHandlerList.Where (handler => _matchingRule.IsEndpointMatch (handler' request)).Where (handler => handler.CanVerifyConstraintsFor (request.Uri)); " is 166.
Long Statement,HttpMock,EndpointMatchingRule,F:\newReposMay17\hibri_HttpMock\src\HttpMock\EndpointMatchingRule.cs,GetQueryParams,The length of the statement  "	var requestQueryParams = valueCollection.AllKeys.Where (k => !string.IsNullOrEmpty (k)).ToDictionary (k => k' k => valueCollection [k]); " is 136.
Long Statement,HttpMock,RequestProcessor,F:\newReposMay17\hibri_HttpMock\src\HttpMock\RequestProcessor.cs,HandleRequest,The length of the statement  "	_log.DebugFormat ("Matched a handler {0}:{1} {2}"' handler.Method' handler.Path' DumpQueryParams (handler.QueryParams)); " is 120.
Long Statement,HttpMock,ResponseBuilder,F:\newReposMay17\hibri_HttpMock\src\HttpMock\ResponseBuilder.cs,WithFileRange,The length of the statement  "		AddHeader (HttpResponseHeader.ContentRange.ToString ()' string.Format ("bytes={0}-{1}/{2}"' from' to' fileInfo.Length)); " is 120.
Empty Catch Block,HttpMock,HttpServer,F:\newReposMay17\hibri_HttpMock\src\HttpMock\HttpServer.cs,IsAvailable,The method has an empty catch block.
Magic Number,HttpMock,FileResponseBody,F:\newReposMay17\hibri_HttpMock\src\HttpMock\FileResponseBody.cs,Connect,The following statement contains a magic number: using (FileStream fileStream = fileInfo.Open (FileMode.Open' FileAccess.Read)) {  	var buffer = new byte[fileInfo.Length];  	fileStream.Read (buffer' 0' (int)fileInfo.Length);  	int length = (int)fileInfo.Length;  	int offset = 0;  	if (_requestHeaders.ContainsKey (HttpRequestHeader.Range.ToString ())) {  		string range = _requestHeaders [HttpRequestHeader.Range.ToString ()];  		Regex rangeEx = new Regex (@"bytes=([\d]*)-([\d]*)");  		if (rangeEx.IsMatch (range)) {  			int from = Convert.ToInt32 (rangeEx.Match (range).Groups [1].Value);  			int to = Convert.ToInt32 (rangeEx.Match (range).Groups [2].Value);  			offset = from;  			length = (to - from) + 1;  		}  	}  	ArraySegment<byte> data = new ArraySegment<byte> (buffer' offset' length);  	channel.OnData (data' null);  	_log.DebugFormat ("Wrote {0} bytes to buffer"' data.Array.Length);  	channel.OnEnd ();  	return null;  }  
Magic Number,HttpMock,FileResponseBody,F:\newReposMay17\hibri_HttpMock\src\HttpMock\FileResponseBody.cs,Connect,The following statement contains a magic number: if (_requestHeaders.ContainsKey (HttpRequestHeader.Range.ToString ())) {  	string range = _requestHeaders [HttpRequestHeader.Range.ToString ()];  	Regex rangeEx = new Regex (@"bytes=([\d]*)-([\d]*)");  	if (rangeEx.IsMatch (range)) {  		int from = Convert.ToInt32 (rangeEx.Match (range).Groups [1].Value);  		int to = Convert.ToInt32 (rangeEx.Match (range).Groups [2].Value);  		offset = from;  		length = (to - from) + 1;  	}  }  
Magic Number,HttpMock,FileResponseBody,F:\newReposMay17\hibri_HttpMock\src\HttpMock\FileResponseBody.cs,Connect,The following statement contains a magic number: if (rangeEx.IsMatch (range)) {  	int from = Convert.ToInt32 (rangeEx.Match (range).Groups [1].Value);  	int to = Convert.ToInt32 (rangeEx.Match (range).Groups [2].Value);  	offset = from;  	length = (to - from) + 1;  }  
Magic Number,HttpMock,HttpServer,F:\newReposMay17\hibri_HttpMock\src\HttpMock\HttpServer.cs,IsAvailable,The following statement contains a magic number: using (var tcpClient = new TcpClient ()) {  	while (attempts < timesToWait) {  		try {  			tcpClient.Connect (_uri.Host' _uri.Port);  			return tcpClient.Connected;  		} catch (SocketException) {  		}  		Thread.Sleep (100);  		attempts++;  	}  	return false;  }  
Magic Number,HttpMock,HttpServer,F:\newReposMay17\hibri_HttpMock\src\HttpMock\HttpServer.cs,IsAvailable,The following statement contains a magic number: while (attempts < timesToWait) {  	try {  		tcpClient.Connect (_uri.Host' _uri.Port);  		return tcpClient.Connected;  	} catch (SocketException) {  	}  	Thread.Sleep (100);  	attempts++;  }  
Magic Number,HttpMock,HttpServer,F:\newReposMay17\hibri_HttpMock\src\HttpMock\HttpServer.cs,IsAvailable,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,HttpMock,HttpServer,F:\newReposMay17\hibri_HttpMock\src\HttpMock\HttpServer.cs,StartListening,The following statement contains a magic number: try {  	var ipEndPoint = new IPEndPoint (IPAddress.Any' _uri.Port);  	Exception e = null;  	_scheduler.Post (() => {  		try {  			_disposableServer = KayakServer.Factory.CreateHttp (_requestProcessor' _scheduler).Listen (ipEndPoint);  		} catch (Exception ex) {  			e = ex;  			_log.Error ("Error when trying to post actions to the scheduler in StartListening"' ex);  		}  	});  	_scheduler.Start ();  	Thread.Sleep (100);  	if (e != null)  		throw e;  } catch (Exception ex) {  	_log.Error ("Error when trying to StartListening"' ex);  }  
Magic Number,HttpMock,HttpServer,F:\newReposMay17\hibri_HttpMock\src\HttpMock\HttpServer.cs,StartListening,The following statement contains a magic number: Thread.Sleep (100);  
