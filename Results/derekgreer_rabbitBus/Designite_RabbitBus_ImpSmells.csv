Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,RabbitBus,MessageContext<TMessage>,C:\repos\derekgreer_rabbitBus\src\RabbitBus\MessageContext.cs,MessageContext,The method has 10 parameters. Parameters: message' consumeInfo' channel' deliveryTag' redelivered' exchange' routingKey' basicProperties' body' messagePublisher
Long Parameter List,RabbitBus,MessagePublisher,C:\repos\derekgreer_rabbitBus\src\RabbitBus\MessagePublisher.cs,MessagePublisher,The method has 6 parameters. Parameters: userName' defaultDeadLetterConfiguration' publishRouteConfiguration' consumeRouteConfiguration' defaultSerializationStrategy' queueStrategy
Long Parameter List,RabbitBus,Subscription<TMessage>,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Subscription.cs,Subscription,The method has 11 parameters. Parameters: connection' defaultDeadLetterConfiguration' defaultSerializationStrategy' consumeInfo' routingKey' callback' queueProperties' defaultErrorCallback' messagePublisher' subscriptionType' callbackTimeout
Long Identifier,RabbitBus,MessagePublisher,C:\repos\derekgreer_rabbitBus\src\RabbitBus\MessagePublisher.cs,MessagePublisher,The length of the parameter defaultDeadLetterConfiguration is 30.
Long Identifier,RabbitBus,MessagePublisher,C:\repos\derekgreer_rabbitBus\src\RabbitBus\MessagePublisher.cs,,The length of the parameter _defaultDeadLetterConfiguration is 31.
Long Identifier,RabbitBus,Subscription<TMessage>,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Subscription.cs,Subscription,The length of the parameter defaultDeadLetterConfiguration is 30.
Long Identifier,RabbitBus,Subscription<TMessage>,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Subscription.cs,,The length of the parameter _defaultDeadLetterConfiguration is 31.
Long Identifier,RabbitBus.Configuration,AutoConfigurationModelBuilder,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Configuration\AutoConfigurationModelBuilder.cs,WithPublishConfigurationConvention,The length of the parameter publishConfigurationConvention is 30.
Long Identifier,RabbitBus.Configuration,AutoConfigurationModelBuilder,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Configuration\AutoConfigurationModelBuilder.cs,WithConsumeConfigurationConvention,The length of the parameter consumeConfigurationConvention is 30.
Long Identifier,RabbitBus.Configuration,AutoConfigurationModelBuilder,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Configuration\AutoConfigurationModelBuilder.cs,,The length of the parameter _consumeConfigurationConventions is 32.
Long Identifier,RabbitBus.Configuration,AutoConfigurationModelBuilder,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Configuration\AutoConfigurationModelBuilder.cs,,The length of the parameter _publishConfigurationConventions is 32.
Long Identifier,RabbitBus.Configuration.Internal,AutoConfigurator,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Configuration\Internal\AutoConfigurator.cs,ConfigureSubscriptions,The length of the parameter openGetMessageHandlerMethodInfo is 31.
Long Identifier,RabbitBus.Configuration.Internal,AutoConfigurator,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Configuration\Internal\AutoConfigurator.cs,ConfigureSubscriptions,The length of the parameter closedGetMessageHandlerMethodInfo is 33.
Long Statement,RabbitBus,MessageProperties,C:\repos\derekgreer_rabbitBus\src\RabbitBus\MessageProperties.cs,Equals,The length of the statement  "			return Expiration.Equals(other.Expiration) && string.Equals(RoutingKey' other.RoutingKey) && Equals(Headers' other.Headers); " is 124.
Long Statement,RabbitBus,Bus,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Bus.cs,InitializeConnection,The length of the statement  "							"The connection initialization failed because the RabbitMQ broker was unavailable. Reattempting connection in {0} seconds."' " is 124.
Long Statement,RabbitBus,SubscriptionKey,C:\repos\derekgreer_rabbitBus\src\RabbitBus\SubscriptionKey.cs,GetHashCode,The length of the statement  "				return ((_messageType != null ? _messageType.GetHashCode() : 0)*397) ^ (_messageProperties != null ? _messageProperties.GetHashCode() : 0); " is 139.
Long Statement,RabbitBus.Configuration.Internal,AutoConfigurator,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Configuration\Internal\AutoConfigurator.cs,ConfigurePublish,The length of the statement  "					configurationModel.PublishRouteConfiguration.AddPolicy<MappingRouteInfoLookupStrategy<IPublishInfo>>(type' publishInfo); " is 120.
Magic Number,RabbitBus,MessageProperties,C:\repos\derekgreer_rabbitBus\src\RabbitBus\MessageProperties.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				int hashCode = Expiration.GetHashCode();  				hashCode = (hashCode*397) ^ (RoutingKey != null ? RoutingKey.GetHashCode() : 0);  				hashCode = (hashCode*397) ^ (Headers != null ? Headers.GetHashCode() : 0);  				return hashCode;  			}
Magic Number,RabbitBus,MessageProperties,C:\repos\derekgreer_rabbitBus\src\RabbitBus\MessageProperties.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				int hashCode = Expiration.GetHashCode();  				hashCode = (hashCode*397) ^ (RoutingKey != null ? RoutingKey.GetHashCode() : 0);  				hashCode = (hashCode*397) ^ (Headers != null ? Headers.GetHashCode() : 0);  				return hashCode;  			}
Magic Number,RabbitBus,Bus,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Bus.cs,Connect,The following statement contains a magic number: Connect(amqpUri' TimeSpan.FromSeconds(30));
Magic Number,RabbitBus,Bus,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Bus.cs,InitializeConnection,The following statement contains a magic number: TimeSpan timeoutInterval = TimeSpan.FromSeconds(10);
Magic Number,RabbitBus,Bus,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Bus.cs,UnexpectedConnectionShutdown,The following statement contains a magic number: lock (_connectionLock)  			{  				if (_closed) return;  				if (Reconnect(TimeSpan.FromSeconds(10)))  				{  					RenewSubscriptions(_subscriptions.Values);  					_messagePublisher.Flush();  				}  			}
Magic Number,RabbitBus,Subscription<TMessage>,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Subscription.cs,Subscribe,The following statement contains a magic number: while (true)  			{  				if (WaitExceeded() || _threadCancelled)  				{  					break;  				}    				BasicDeliverEventArgs eventArgs = null;    				try  				{  					object eArgs = null;  					_consumer.Queue.Dequeue(1000' out eArgs);    					if (eArgs != null)  					{  						eventArgs = (BasicDeliverEventArgs) eArgs;  						logger.Write(string.Format("Message received: {0} bytes"' eventArgs.Body.Length)' TraceEventType.Information);  						ISerializationStrategy serializationStrategy = _consumeInfo.SerializationStrategy ??  						                                               _defaultSerializationStrategy;  						object message = serializationStrategy.Deserialize<TMessage>(eventArgs.Body);    						var messageContext = new MessageContext<TMessage>( /*_deadLetterStrategy' */ (TMessage) message'  						                                                                             _consumeInfo'  						                                                                             channel'  						                                                                             eventArgs.DeliveryTag'  						                                                                             eventArgs.Redelivered'  						                                                                             eventArgs.Exchange'  						                                                                             eventArgs.RoutingKey'  						                                                                             eventArgs.BasicProperties'  						                                                                             eventArgs.Body'  						                                                                             _messagePublisher);    						_callback(messageContext);    						if (_subscriptionType == SubscriptionType.RemoteProcedure)  						{  							log =  								string.Format(  									"Terminating RPC subscription to messages from host: {0}' port: {1}' exchange: {2}' queue: {3}' routingKey: {4}"'  									_connection.Endpoint.HostName'  									_connection.Endpoint.Port'  									_consumeInfo.ExchangeName'  									_consumeInfo.QueueName'  									_routingKey);  							logger.Write(log' TraceEventType.Information);  							break;  						}  					}  				}  				catch (EndOfStreamException)  				{  					logger.Write("Received EndOfStreamException."' TraceEventType.Information);  					InvokeErrorCallback(eventArgs' channel);  					channel.Dispose();  					channel = null;  					logger.Write("Subscription terminated."' TraceEventType.Information);  					break;  				}  				catch (AlreadyClosedException e)  				{  					Logger.Current.Write(string.Format("An AlreadyClosedException occurred: {0} {1}"' e.Message' e.StackTrace)'  					                     TraceEventType.Error);  					InvokeErrorCallback(eventArgs' channel);  					break;  				}  				catch (Exception e)  				{  					Logger.Current.Write("An exception occurred while dequeuing a message: " + e.Message' TraceEventType.Error);  					InvokeErrorCallback(eventArgs' channel);  				}  			}
Magic Number,RabbitBus,SubscriptionKey,C:\repos\derekgreer_rabbitBus\src\RabbitBus\SubscriptionKey.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return ((_messageType != null ? _messageType.GetHashCode() : 0)*397) ^ (_messageProperties != null ? _messageProperties.GetHashCode() : 0);  			}
Magic Number,RabbitBus.Configuration.Internal,ConfigurationModel,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Configuration\Internal\ConfigurationModel.cs,ConfigurationModel,The following statement contains a magic number: ReconnectionInterval = TimeSpan.FromSeconds(10);
Magic Number,RabbitBus.Configuration.Internal,ConfigurationModel,C:\repos\derekgreer_rabbitBus\src\RabbitBus\Configuration\Internal\ConfigurationModel.cs,ConfigurationModel,The following statement contains a magic number: ReconnectionTimeout = TimeSpan.FromMinutes(60);
