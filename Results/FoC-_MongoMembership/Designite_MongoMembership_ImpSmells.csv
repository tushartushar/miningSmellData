Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,CreateUser,Cyclomatic complexity of the method is 9
Long Parameter List,MongoMembership.Mongo,IMongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\IMongoGateway.cs,GetAllByEmail,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,IMongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\IMongoGateway.cs,GetAllByUserName,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,IMongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\IMongoGateway.cs,GetAllAnonymByUserName,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,IMongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\IMongoGateway.cs,GetAllInactiveSince,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,IMongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\IMongoGateway.cs,GetAllInactiveAnonymSince,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,IMongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\IMongoGateway.cs,GetInactiveSinceByUserName,The method has 6 parameters.
Long Parameter List,MongoMembership.Mongo,IMongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\IMongoGateway.cs,GetInactiveAnonymSinceByUserName,The method has 6 parameters.
Long Parameter List,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetAllByEmail,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetAllByUserName,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetAllAnonymByUserName,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetAllInactiveSince,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetAllInactiveAnonymSince,The method has 5 parameters.
Long Parameter List,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetInactiveSinceByUserName,The method has 6 parameters.
Long Parameter List,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetInactiveAnonymSinceByUserName,The method has 6 parameters.
Long Parameter List,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,CreateUser,The method has 8 parameters.
Long Parameter List,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,FindInactiveProfilesByUserName,The method has 6 parameters.
Long Parameter List,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,FindProfilesByUserName,The method has 5 parameters.
Long Parameter List,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,GetAllInactiveProfiles,The method has 5 parameters.
Long Identifier,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,GetPropertyValues,The length of the parameter settingsPropertyValueCollection is 31.
Long Statement,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetByUserName,The length of the statement  "	return usersCollection.FindSync (UserFilter (applicationName' u => u.UsernameLowercase == username)).SingleOrDefault (); " is 120.
Long Statement,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetInactiveSinceByUserName,The length of the statement  "	var filter = UserFilter (applicationName' u => u.UsernameLowercase.Contains (username) && u.LastActivityDate <= userInactiveSinceDate); " is 135.
Long Statement,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetInactiveAnonymSinceByUserName,The length of the statement  "	var filter = UserFilter (applicationName' u => u.IsAnonymous && u.UsernameLowercase.Contains (username) && u.LastActivityDate <= userInactiveSinceDate); " is 152.
Long Statement,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetAllRoles,The length of the statement  "	return rolesCollection.FindSync (role => role.ApplicationName == applicationName).ToList ().Select (role => role.RoleName).ToArray (); " is 134.
Long Statement,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,GetUsersInRole,The length of the statement  "	return usersCollection.FindSync (user => user.ApplicationName == applicationName && (user.Roles.Contains (roleName.ToLowerInvariant ()) || user.Roles.Contains (roleName))).ToList ().Select (user => user.Username).ToArray (); " is 224.
Long Statement,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,UserFilter,The length of the statement  "	return Builders<User>.Filter.And (Builders<User>.Filter.Eq (u => u.IsDeleted' false)' Builders<User>.Filter.Eq (u => u.ApplicationName' applicationName)' Builders<User>.Filter.Where (extraFilter)); " is 197.
Long Statement,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,RoleFilter,The length of the statement  "	return Builders<Role>.Filter.And (Builders<Role>.Filter.Eq (u => u.ApplicationName' applicationName)' Builders<Role>.Filter.Where (extraFilter)); " is 145.
Long Statement,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,CreateIndex,The length of the statement  "	var combinedUserIndex = usersCollection.Indexes.CreateOne (Builders<User>.IndexKeys.Combine (Builders<User>.IndexKeys.Text (_ => _.ApplicationName)' Builders<User>.IndexKeys.Text (_ => _.EmailLowercase)' Builders<User>.IndexKeys.Text (_ => _.UsernameLowercase)' Builders<User>.IndexKeys.Text (_ => _.Roles)' Builders<User>.IndexKeys.Ascending (_ => _.IsAnonymous)' Builders<User>.IndexKeys.Ascending (_ => _.LastActivityDate))' new CreateIndexOptions () { " is 455.
Long Statement,MongoMembership.Mongo,MongoGateway,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Mongo\MongoGateway.cs,CreateIndex,The length of the statement  "	var combinedRoleCollectionKey = rolesCollection.Indexes.CreateOne (Builders<Role>.IndexKeys.Combine (Builders<Role>.IndexKeys.Text (_ => _.ApplicationName)' Builders<Role>.IndexKeys.Text (_ => _.RoleNameLowercased))' new CreateIndexOptions () { " is 244.
Long Statement,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,Initialize,The length of the statement  "	MongoConnectionString = Util.GetConnectionStringByName (config ["connectionStringKeys"].ConvertOrDefault (string.Empty)); " is 121.
Long Statement,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,Initialize,The length of the statement  "		throw new ProviderException ("Configured settings are invalid: Hashed passwords cannot be retrieved. Either set the password format to different type' or set enablePasswordRetrieval to false."); " is 194.
Long Statement,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,ResetPassword,The length of the statement  "		throw new NotSupportedException ("This provider is not configured to allow password resets. To enable password reset' set enablePasswordReset to \"true\" in the configuration file."); " is 183.
Long Statement,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,Initialize,The length of the statement  "	MongoConnectionString = Util.GetConnectionStringByName (config ["connectionStringKeys"].ConvertOrDefault (string.Empty)); " is 121.
Long Statement,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,DeleteInactiveProfiles,The length of the statement  "	ProfileInfoCollection profileInfoCollection = GetAllInactiveProfiles (authenticationOption' userInactiveSinceDate' 0' int.MaxValue' out totalRecords); " is 150.
Long Statement,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,FindInactiveProfilesByUserName,The length of the statement  "		users = mongoGateway.GetInactiveAnonymSinceByUserName (ApplicationName' usernameToMatch' userInactiveSinceDate' pageIndex' pageSize' out totalRecords); " is 151.
Long Statement,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,FindInactiveProfilesByUserName,The length of the statement  "		users = mongoGateway.GetInactiveSinceByUserName (ApplicationName' usernameToMatch' userInactiveSinceDate' pageIndex' pageSize' out totalRecords); " is 145.
Long Statement,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,GetAllInactiveProfiles,The length of the statement  "		users = mongoGateway.GetAllInactiveAnonymSince (ApplicationName' userInactiveSinceDate' pageIndex' pageSize' out totalRecords); " is 127.
Long Statement,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,GetAllInactiveProfiles,The length of the statement  "		users = mongoGateway.GetAllInactiveSince (ApplicationName' userInactiveSinceDate' pageIndex' pageSize' out totalRecords); " is 121.
Long Statement,MongoMembership.Providers,MongoRoleProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoRoleProvider.cs,Initialize,The length of the statement  "	MongoConnectionString = Util.GetConnectionStringByName (config ["connectionStringKeys"].ConvertOrDefault (string.Empty)); " is 121.
Long Statement,MongoMembership,User,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\User.cs,ToMembershipUser,The length of the statement  "	return new MembershipUser (providerName' Username' Id' Email' PasswordQuestion' Comment' IsApproved' IsLockedOut' CreateDate' LastLoginDate' LastActivityDate' LastPasswordChangedDate' LastLockedOutDate); " is 203.
Long Statement,MongoMembership.Utils,Util,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Utils\Util.cs,GetConnectionStringByName,The length of the statement  "	}' StringSplitOptions.RemoveEmptyEntries).Select (k => k.Trim ()).Where (k => k.IsNotNullOrEmpty ()).SelectMany (k => new[] { " is 125.
Magic Number,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,Initialize,The following statement contains a magic number: maxInvalidPasswordAttempts = config ["maxInvalidPasswordAttempts"].ConvertOrDefault (5);  
Magic Number,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,Initialize,The following statement contains a magic number: minRequiredPasswordLength = config ["minRequiredPasswordLength"].ConvertOrDefault (7);  
Magic Number,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,Initialize,The following statement contains a magic number: passwordAttemptWindow = config ["passwordAttemptWindow"].ConvertOrDefault (10);  
Magic Number,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,DecodePassword,The following statement contains a magic number: switch (PasswordFormat) {  case MembershipPasswordFormat.Clear:  	return password;  case MembershipPasswordFormat.Hashed:  	throw new ProviderException ("Hashed passwords cannot be decoded.");  default:  	var passwordBytes = Convert.FromBase64String (password);  	var decryptedBytes = DecryptPassword (passwordBytes);  	return decryptedBytes.ToUnicodeString (16);  }  
Magic Number,MongoMembership.Providers,MongoMembershipProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoMembershipProvider.cs,DecodePassword,The following statement contains a magic number: return decryptedBytes.ToUnicodeString (16);  
Magic Number,MongoMembership,User,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\User.cs,Unlock,The following statement contains a magic number: FailedPasswordAttemptWindowStart = new DateTime (1970' 1' 1);  
Magic Number,MongoMembership,User,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\User.cs,Unlock,The following statement contains a magic number: FailedPasswordAnswerAttemptWindowStart = new DateTime (1970' 1' 1);  
Magic Number,MongoMembership,User,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\User.cs,Unlock,The following statement contains a magic number: LastLockedOutDate = new DateTime (1970' 1' 1);  
Missing Default,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,FindInactiveProfilesByUserName,The following switch statement is missing a default case: switch (authenticationOption) {  case ProfileAuthenticationOption.Anonymous:  	users = mongoGateway.GetInactiveAnonymSinceByUserName (ApplicationName' usernameToMatch' userInactiveSinceDate' pageIndex' pageSize' out totalRecords);  	break;  case ProfileAuthenticationOption.Authenticated:  case ProfileAuthenticationOption.All:  	users = mongoGateway.GetInactiveSinceByUserName (ApplicationName' usernameToMatch' userInactiveSinceDate' pageIndex' pageSize' out totalRecords);  	break;  }  
Missing Default,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,FindProfilesByUserName,The following switch statement is missing a default case: switch (authenticationOption) {  case ProfileAuthenticationOption.Anonymous:  	users = mongoGateway.GetAllAnonymByUserName (ApplicationName' usernameToMatch' pageIndex' pageSize' out totalRecords);  	break;  case ProfileAuthenticationOption.Authenticated:  case ProfileAuthenticationOption.All:  	users = mongoGateway.GetAllByUserName (ApplicationName' usernameToMatch' pageIndex' pageSize' out totalRecords);  	break;  }  
Missing Default,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,GetAllInactiveProfiles,The following switch statement is missing a default case: switch (authenticationOption) {  case ProfileAuthenticationOption.Anonymous:  	users = mongoGateway.GetAllInactiveAnonymSince (ApplicationName' userInactiveSinceDate' pageIndex' pageSize' out totalRecords);  	break;  case ProfileAuthenticationOption.Authenticated:  case ProfileAuthenticationOption.All:  	users = mongoGateway.GetAllInactiveSince (ApplicationName' userInactiveSinceDate' pageIndex' pageSize' out totalRecords);  	break;  }  
Missing Default,MongoMembership.Providers,MongoProfileProvider,F:\newReposMay17\FoC-_MongoMembership\MongoMembership\Providers\MongoProfileProvider.cs,GetAllProfiles,The following switch statement is missing a default case: switch (authenticationOption) {  case ProfileAuthenticationOption.Anonymous:  	users = mongoGateway.GetAllAnonym (ApplicationName' pageIndex' pageSize' out totalRecords);  	break;  case ProfileAuthenticationOption.Authenticated:  case ProfileAuthenticationOption.All:  	users = mongoGateway.GetAll (ApplicationName' pageIndex' pageSize' out totalRecords);  	break;  }  
