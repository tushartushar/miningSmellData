Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Microsoft.AspNetCore.DataProtection,TimeLimitedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\TimeLimitedDataProtector.cs,,The length of the parameter _innerProtectorWithTimeLimitedPurpose is 37.
Long Statement,Microsoft.AspNetCore.DataProtection,TimeLimitedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\TimeLimitedDataProtector.cs,GetInnerProtectorWithTimeLimitedPurpose,The length of the statement  "                var newValue = _innerProtector.CreateProtector(MyPurposeString); // we always append our purpose to the end of the chain " is 120.
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)buffer[offset + 0]) << 56)                     | (((ulong)buffer[offset + 1]) << 48)                     | (((ulong)buffer[offset + 2]) << 40)                     | (((ulong)buffer[offset + 3]) << 32)                     | (((ulong)buffer[offset + 4]) << 24)                     | (((ulong)buffer[offset + 5]) << 16)                     | (((ulong)buffer[offset + 6]) << 8)                     | (ulong)buffer[offset + 7];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 0] = (byte)(value >> 56);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 1] = (byte)(value >> 48);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 2] = (byte)(value >> 40);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 2] = (byte)(value >> 40);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 3] = (byte)(value >> 32);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 3] = (byte)(value >> 32);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 4] = (byte)(value >> 24);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 4] = (byte)(value >> 24);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 5] = (byte)(value >> 16);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 5] = (byte)(value >> 16);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 6] = (byte)(value >> 8);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 6] = (byte)(value >> 8);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\BitHelpers.cs,WriteUInt64,The following statement contains a magic number: buffer[offset + 7] = (byte)(value);
Magic Number,Microsoft.AspNetCore.DataProtection,TimeLimitedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\TimeLimitedDataProtector.cs,Protect,The following statement contains a magic number: byte[] plaintextWithHeader = new byte[checked(8 + plaintext.Length)];
Magic Number,Microsoft.AspNetCore.DataProtection,TimeLimitedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\TimeLimitedDataProtector.cs,Protect,The following statement contains a magic number: Buffer.BlockCopy(plaintext' 0' plaintextWithHeader' 8' plaintext.Length);
Magic Number,Microsoft.AspNetCore.DataProtection,TimeLimitedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\TimeLimitedDataProtector.cs,UnprotectCore,The following statement contains a magic number: try              {                  byte[] plaintextWithHeader = GetInnerProtectorWithTimeLimitedPurpose().Unprotect(protectedData);                  if (plaintextWithHeader.Length < 8)                  {                      // header isn't present                      throw new CryptographicException(Resources.TimeLimitedDataProtector_PayloadInvalid);                  }                    // Read expiration time back out of the payload                  ulong utcTicksExpiration = BitHelpers.ReadUInt64(plaintextWithHeader' 0);                  DateTimeOffset embeddedExpiration = new DateTimeOffset(checked((long)utcTicksExpiration)' TimeSpan.Zero /* UTC */);                    // Are we expired?                  if (now > embeddedExpiration)                  {                      throw new CryptographicException(Resources.FormatTimeLimitedDataProtector_PayloadExpired(embeddedExpiration));                  }                    // Not expired - split and return payload                  byte[] retVal = new byte[plaintextWithHeader.Length - 8];                  Buffer.BlockCopy(plaintextWithHeader' 8' retVal' 0' retVal.Length);                  expiration = new DateTimeOffset((long)utcTicksExpiration' TimeSpan.Zero);                  return retVal;              }              catch (Exception ex) when (ex.RequiresHomogenization())              {                  // Homogenize all failures to CryptographicException                  throw new CryptographicException(Resources.CryptCommon_GenericError' ex);              }
Magic Number,Microsoft.AspNetCore.DataProtection,TimeLimitedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\TimeLimitedDataProtector.cs,UnprotectCore,The following statement contains a magic number: try              {                  byte[] plaintextWithHeader = GetInnerProtectorWithTimeLimitedPurpose().Unprotect(protectedData);                  if (plaintextWithHeader.Length < 8)                  {                      // header isn't present                      throw new CryptographicException(Resources.TimeLimitedDataProtector_PayloadInvalid);                  }                    // Read expiration time back out of the payload                  ulong utcTicksExpiration = BitHelpers.ReadUInt64(plaintextWithHeader' 0);                  DateTimeOffset embeddedExpiration = new DateTimeOffset(checked((long)utcTicksExpiration)' TimeSpan.Zero /* UTC */);                    // Are we expired?                  if (now > embeddedExpiration)                  {                      throw new CryptographicException(Resources.FormatTimeLimitedDataProtector_PayloadExpired(embeddedExpiration));                  }                    // Not expired - split and return payload                  byte[] retVal = new byte[plaintextWithHeader.Length - 8];                  Buffer.BlockCopy(plaintextWithHeader' 8' retVal' 0' retVal.Length);                  expiration = new DateTimeOffset((long)utcTicksExpiration' TimeSpan.Zero);                  return retVal;              }              catch (Exception ex) when (ex.RequiresHomogenization())              {                  // Homogenize all failures to CryptographicException                  throw new CryptographicException(Resources.CryptCommon_GenericError' ex);              }
Magic Number,Microsoft.AspNetCore.DataProtection,TimeLimitedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection.Extensions\TimeLimitedDataProtector.cs,UnprotectCore,The following statement contains a magic number: try              {                  byte[] plaintextWithHeader = GetInnerProtectorWithTimeLimitedPurpose().Unprotect(protectedData);                  if (plaintextWithHeader.Length < 8)                  {                      // header isn't present                      throw new CryptographicException(Resources.TimeLimitedDataProtector_PayloadInvalid);                  }                    // Read expiration time back out of the payload                  ulong utcTicksExpiration = BitHelpers.ReadUInt64(plaintextWithHeader' 0);                  DateTimeOffset embeddedExpiration = new DateTimeOffset(checked((long)utcTicksExpiration)' TimeSpan.Zero /* UTC */);                    // Are we expired?                  if (now > embeddedExpiration)                  {                      throw new CryptographicException(Resources.FormatTimeLimitedDataProtector_PayloadExpired(embeddedExpiration));                  }                    // Not expired - split and return payload                  byte[] retVal = new byte[plaintextWithHeader.Length - 8];                  Buffer.BlockCopy(plaintextWithHeader' 8' retVal' 0' retVal.Length);                  expiration = new DateTimeOffset((long)utcTicksExpiration' TimeSpan.Zero);                  return retVal;              }              catch (Exception ex) when (ex.RequiresHomogenization())              {                  // Homogenize all failures to CryptographicException                  throw new CryptographicException(Resources.CryptCommon_GenericError' ex);              }
