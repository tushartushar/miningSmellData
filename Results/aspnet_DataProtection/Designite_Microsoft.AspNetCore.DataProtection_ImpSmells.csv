Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The method has 266 lines of code.
Complex Method,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,UnprotectCore,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.DataProtection.KeyManagement,XmlKeyManager,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\XmlKeyManager.cs,GetAllKeys,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AuthenticatedEncryptorExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AuthenticatedEncryptorExtensions.cs,Encrypt,The method has 5 parameters. Parameters: encryptor' plaintext' additionalAuthenticatedData' preBufferSize' postBufferSize
Long Parameter List,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,CbcAuthenticatedEncryptor,The method has 5 parameters. Parameters: keyDerivationKey' symmetricAlgorithmHandle' symmetricAlgorithmKeySizeInBytes' hmacAlgorithmHandle' genRandom
Long Parameter List,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,DoCbcEncrypt,The method has 6 parameters. Parameters: symmetricKeyHandle' pbIV' pbInput' cbInput' pbOutput' cbOutput
Long Parameter List,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,EncryptImpl,The method has 6 parameters. Parameters: pbPlaintext' cbPlaintext' pbAdditionalAuthenticatedData' cbAdditionalAuthenticatedData' cbPreBuffer' cbPostBuffer
Long Parameter List,Microsoft.AspNetCore.DataProtection.Cng,DpapiSecretSerializerHelper,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\DpapiSecretSerializerHelper.cs,ProtectWithDpapiCore,The method has 5 parameters. Parameters: pbSecret' cbSecret' pbOptionalEntropy' cbOptionalEntropy' fLocalMachine
Long Parameter List,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,DoGcmEncrypt,The method has 7 parameters. Parameters: pbKey' cbKey' pbNonce' pbPlaintextData' cbPlaintextData' pbEncryptedData' pbTag
Long Parameter List,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,EncryptImpl,The method has 6 parameters. Parameters: pbPlaintext' cbPlaintext' pbAdditionalAuthenticatedData' cbAdditionalAuthenticatedData' cbPreBuffer' cbPostBuffer
Long Parameter List,Microsoft.AspNetCore.DataProtection.Cng.Internal,CngAuthenticatedEncryptorBase,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\Internal\CngAuthenticatedEncryptorBase.cs,EncryptImpl,The method has 6 parameters. Parameters: pbPlaintext' cbPlaintext' pbAdditionalAuthenticatedData' cbAdditionalAuthenticatedData' cbPreBuffer' cbPostBuffer
Long Parameter List,Microsoft.AspNetCore.DataProtection.KeyManagement,DeferredKey,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\DeferredKey.cs,DeferredKey,The method has 7 parameters. Parameters: keyId' creationDate' activationDate' expirationDate' keyManager' keyElement' encryptorFactories
Long Parameter List,Microsoft.AspNetCore.DataProtection.KeyManagement,Key,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\Key.cs,Key,The method has 6 parameters. Parameters: keyId' creationDate' activationDate' expirationDate' descriptor' encryptorFactories
Long Parameter List,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyBase,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyBase.cs,KeyBase,The method has 6 parameters. Parameters: keyId' creationDate' activationDate' expirationDate' lazyDescriptor' encryptorFactories
Long Parameter List,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,CreatingKey,The method has 5 parameters. Parameters: logger' keyId' creationDate' activationDate' expirationDate
Long Parameter List,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,ManagedAuthenticatedEncryptor,The method has 5 parameters. Parameters: keyDerivationKey' symmetricAlgorithmFactory' symmetricAlgorithmKeySizeInBytes' validationAlgorithmFactory' genRandom
Long Parameter List,Microsoft.AspNetCore.DataProtection.SP800_108,ISP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ISP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The method has 6 parameters. Parameters: pbLabel' cbLabel' pbContext' cbContext' pbDerivedKey' cbDerivedKey
Long Parameter List,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The method has 5 parameters. Parameters: kdk' label' context' prfFactory' output
Long Parameter List,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeysWithContextHeader,The method has 6 parameters. Parameters: kdk' label' contextHeader' context' prfFactory' output
Long Parameter List,Microsoft.AspNetCore.DataProtection.SP800_108,SP800_108_CTR_HMACSHA512Extensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\SP800_108_CTR_HMACSHA512Extensions.cs,DeriveKeyWithContextHeader,The method has 8 parameters. Parameters: provider' pbLabel' cbLabel' contextHeader' pbContext' cbContext' pbDerivedKey' cbDerivedKey
Long Parameter List,Microsoft.AspNetCore.DataProtection.SP800_108,Win7SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win7SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The method has 6 parameters. Parameters: pbLabel' cbLabel' pbContext' cbContext' pbDerivedKey' cbDerivedKey
Long Parameter List,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The method has 6 parameters. Parameters: pbLabel' cbLabel' pbContext' cbContext' pbDerivedKey' cbDerivedKey
Long Identifier,Microsoft.AspNetCore.DataProtection,MemoryProtection,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\MemoryProtection.cs,,The length of the parameter CRYPTPROTECTMEMORY_SAME_PROCESS is 31.
Long Identifier,Microsoft.AspNetCore.DataProtection,XmlConstants,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlConstants.cs,,The length of the parameter RequiresEncryptionAttributeName is 31.
Long Identifier,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AlgorithmAssert,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AlgorithmAssert.cs,,The length of the parameter SYMMETRIC_ALG_MIN_BLOCK_SIZE_IN_BITS is 36.
Long Identifier,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AlgorithmAssert,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AlgorithmAssert.cs,,The length of the parameter SYMMETRIC_ALG_MIN_KEY_LENGTH_IN_BITS is 36.
Long Identifier,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AlgorithmAssert,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AlgorithmAssert.cs,,The length of the parameter HASH_ALG_MIN_DIGEST_LENGTH_IN_BITS is 34.
Long Identifier,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,SecretExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\SecretExtensions.cs,ToMasterKeyElement,The length of the parameter unprotectedSecretAsBase64String is 31.
Long Identifier,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,CbcAuthenticatedEncryptor,The length of the parameter symmetricAlgorithmKeySizeInBytes is 32.
Long Identifier,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,,The length of the parameter _hmacAlgorithmDigestLengthInBytes is 33.
Long Identifier,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,,The length of the parameter _hmacAlgorithmSubkeyLengthInBytes is 33.
Long Identifier,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,,The length of the parameter _symmetricAlgorithmBlockSizeInBytes is 35.
Long Identifier,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,,The length of the parameter _symmetricAlgorithmSubkeyLengthInBytes is 38.
Long Identifier,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,GcmAuthenticatedEncryptor,The length of the parameter symmetricAlgorithmKeySizeInBytes is 32.
Long Identifier,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,,The length of the parameter _symmetricAlgorithmSubkeyLengthInBytes is 38.
Long Identifier,Microsoft.AspNetCore.DataProtection.Cng.Internal,CngAuthenticatedEncryptorBase,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\Internal\CngAuthenticatedEncryptorBase.cs,Decrypt,The length of the parameter pbAdditionalAuthenticatedDataArray is 34.
Long Identifier,Microsoft.AspNetCore.DataProtection.Cng.Internal,CngAuthenticatedEncryptorBase,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\Internal\CngAuthenticatedEncryptorBase.cs,Encrypt,The length of the parameter pbAdditionalAuthenticatedDataArray is 34.
Long Identifier,Microsoft.AspNetCore.DataProtection.KeyManagement,XmlKeyManager,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\XmlKeyManager.cs,DeserializeDescriptorFromKeyElement,The length of the parameter descriptorDeserializerTypeName is 30.
Long Identifier,Microsoft.AspNetCore.DataProtection.KeyManagement,XmlKeyManager,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\XmlKeyManager.cs,DeserializeDescriptorFromKeyElement,The length of the parameter unencryptedInputToDeserializer is 30.
Long Identifier,Microsoft.AspNetCore.DataProtection.KeyManagement,XmlKeyManager,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\XmlKeyManager.cs,,The length of the parameter _authenticatedEncryptorConfiguration is 36.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,EncryptingToWindowsDPAPINGUsingProtectionDescriptorRule,The length of the parameter protectionDescriptorRuleString is 30.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _usingFallbackKeyWithExpirationAsDefaultKey is 43.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _openingCNGAlgorithmFromProviderWithHMAC is 40.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _openingCNGAlgorithmFromProviderWithChainingModeCBC is 51.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _performingUnprotectOperationToKeyWithPurposes is 46.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _keyWasNotFoundInTheKeyRingUnprotectOperationCannotProceed is 58.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _keyWasRevokedCallerRequestedUnprotectOperationProceedRegardless is 64.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _keyWasRevokedUnprotectOperationCannotProceed is 45.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _openingCNGAlgorithmFromProviderWithChainingModeGCM is 51.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _usingManagedKeyedHashAlgorithm is 31.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _usingManagedSymmetricAlgorithm is 31.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _keyIsIneligibleToBeTheDefaultKeyBecauseItsMethodFailed is 55.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _consideringKeyWithExpirationDateAsDefaultKey is 45.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _keyIsNoLongerUnderConsiderationAsDefault is 41.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _unknownElementWithNameFoundInKeyringSkipping is 45.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _markedKeyAsRevokedInTheKeyring is 31.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _triedToProcessRevocationOfKeyButNoSuchKeyWasFound is 50.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _foundRevocationOfAllKeysCreatedPriorTo is 39.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _exceptionWhileProcessingRevocationElement is 42.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _keyCacheExpirationTokenTriggeredByOperation is 44.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _anExceptionOccurredWhileProcessingTheKeyElement is 48.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _anExceptionOccurredWhileProcessingTheKeyElementDebug is 53.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _encryptingToWindowsDPAPIForCurrentUserAccount is 46.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _encryptingToWindowsDPAPINGUsingProtectionDescriptorRule is 56.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _anErrorOccurredWhileEncryptingToX509CertificateWithThumbprint is 62.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _encryptingToX509CertificateWithThumbprint is 42.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _exceptionOccurredWhileTryingToResolveCertificateWithThumbprint is 63.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _performingProtectOperationToKeyWithPurposes is 44.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _descriptorDeserializerTypeForKeyIs is 35.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _keyEscrowSinkFoundWritingKeyToEscrow is 37.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _noKeyEscrowSinkFoundNotWritingKeyToEscrow is 42.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _noXMLEncryptorConfiguredKeyMayBePersistedToStorageInUnencryptedForm is 68.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _readingDataFromRegistryKeyValue is 32.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _nameIsNotSafeRegistryValueName is 31.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _decryptingSecretElementUsingWindowsDPAPING is 43.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _exceptionOccurredTryingToDecryptElement is 40.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _usingEphemeralDataProtectionProvider is 37.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _existingCachedKeyRingIsExpiredRefreshing is 41.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _errorOccurredWhileRefreshingKeyRing is 36.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _errorOccurredWhileReadingKeyRing is 33.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _keyRingDoesNotContainValidDefaultKey is 37.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _decryptingSecretElementUsingWindowsDPAPI is 41.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _defaultKeyExpirationImminentAndRepository is 42.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _repositoryContainsNoViableDefaultKey is 37.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _errorOccurredWhileEncryptingToWindowsDPAPI is 43.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _encryptingToWindowsDPAPIForLocalMachineAccount is 47.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _errorOccurredWhileEncryptingToWindowsDPAPING is 45.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _policyResolutionStatesThatANewKeyShouldBeAddedToTheKeyRing is 59.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _usingRegistryAsKeyRepositoryWithDPAPI is 38.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _usingProfileAsKeyRepositoryWithDPAPI is 37.
Long Identifier,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,,The length of the parameter _usingEphemeralFileSystemLocationInContainer is 44.
Long Identifier,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,ManagedAuthenticatedEncryptor,The length of the parameter symmetricAlgorithmKeySizeInBytes is 32.
Long Identifier,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,,The length of the parameter _symmetricAlgorithmBlockSizeInBytes is 35.
Long Identifier,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,,The length of the parameter _symmetricAlgorithmSubkeyLengthInBytes is 38.
Long Identifier,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,,The length of the parameter _validationAlgorithmDigestLengthInBytes is 39.
Long Identifier,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,,The length of the parameter _validationAlgorithmSubkeyLengthInBytes is 39.
Long Identifier,Microsoft.AspNetCore.DataProtection.SP800_108,SP800_108_CTR_HMACSHA512Extensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\SP800_108_CTR_HMACSHA512Extensions.cs,DeriveKeyWithContextHeader,The length of the parameter pbHeapAllocatedCombinedContext is 30.
Long Identifier,Microsoft.AspNetCore.DataProtection.SP800_108,SP800_108_CTR_HMACSHA512Extensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\SP800_108_CTR_HMACSHA512Extensions.cs,DeriveKeyWithContextHeader,The length of the parameter pbStackAllocatedCombinedContext is 31.
Long Identifier,Microsoft.AspNetCore.DataProtection.XmlEncryption,DpapiNGXmlEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\DpapiNGXmlEncryptor.cs,Encrypt,The length of the parameter protectionDescriptorRuleString is 30.
Long Identifier,Microsoft.AspNetCore.DataProtection.XmlEncryption,XmlEncryptionExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\XmlEncryptionExtensions.cs,DecryptElement,The length of the parameter elementWhichRequiresDecryption is 30.
Long Identifier,Microsoft.AspNetCore.DataProtection.XmlEncryption,XmlEncryptionExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\XmlEncryptionExtensions.cs,DecryptElement,The length of the parameter clonedElementWhichRequiresDecryption is 36.
Long Identifier,Microsoft.AspNetCore.DataProtection.XmlEncryption,XmlEncryptionExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\XmlEncryptionExtensions.cs,EncryptIfNecessary,The length of the parameter elementWhichRequiresEncryption is 30.
Long Identifier,Microsoft.AspNetCore.DataProtection.XmlEncryption,XmlEncryptionExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\XmlEncryptionExtensions.cs,EncryptIfNecessary,The length of the parameter clonedElementWhichRequiresEncryption is 36.
Long Statement,Microsoft.AspNetCore.DataProtection,RegistryPolicyResolver,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\RegistryPolicyResolver.cs,PopulateOptions,The length of the statement  "                            propInfo.SetValue(options' Type.GetType(Convert.ToString(valueFromRegistry' CultureInfo.InvariantCulture)' throwOnError: true)); " is 128.
Long Statement,Microsoft.AspNetCore.DataProtection,Secret,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Secret.cs,Protect,The length of the statement  "            var numBytesPaddingRequired = CRYPTPROTECTMEMORY_BLOCK_SIZE - (numTotalBytesToAllocate % CRYPTPROTECTMEMORY_BLOCK_SIZE); " is 120.
Long Statement,Microsoft.AspNetCore.DataProtection,Secret,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Secret.cs,Protect,The length of the statement  "            CryptoUtil.Assert(numTotalBytesToAllocate % CRYPTPROTECTMEMORY_BLOCK_SIZE == 0' "numTotalBytesToAllocate % CRYPTPROTECTMEMORY_BLOCK_SIZE == 0"); " is 144.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AuthenticatedEncryptorExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AuthenticatedEncryptorExtensions.cs,PerformSelfTest,The length of the statement  "            CryptoUtil.Assert(roundTrippedData != null && roundTrippedData.Length == plaintextAsBytes.Length && plaintextAsGuid == new Guid(roundTrippedData)' " is 146.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AuthenticatedEncryptorFactory.cs,CreateAuthenticatedEncryptorInstance,The length of the statement  "                return new CngGcmAuthenticatedEncryptorFactory(_loggerFactory).CreateAuthenticatedEncryptorInstance(secret' configuration); " is 123.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AuthenticatedEncryptorFactory.cs,CreateAuthenticatedEncryptorInstance,The length of the statement  "                    return new CngCbcAuthenticatedEncryptorFactory(_loggerFactory).CreateAuthenticatedEncryptorInstance(secret' configuration); " is 123.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AuthenticatedEncryptorFactory.cs,CreateAuthenticatedEncryptorInstance,The length of the statement  "                    return new ManagedAuthenticatedEncryptorFactory(_loggerFactory).CreateAuthenticatedEncryptorInstance(secret' configuration); " is 124.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,GetHmacAlgorithmHandle,The length of the statement  "                if (configuration.HashAlgorithm == Constants.BCRYPT_SHA1_ALGORITHM) { algorithmHandle = CachedAlgorithmHandles.HMAC_SHA1; } " is 123.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,GetHmacAlgorithmHandle,The length of the statement  "                else if (configuration.HashAlgorithm == Constants.BCRYPT_SHA256_ALGORITHM) { algorithmHandle = CachedAlgorithmHandles.HMAC_SHA256; } " is 132.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,GetHmacAlgorithmHandle,The length of the statement  "                else if (configuration.HashAlgorithm == Constants.BCRYPT_SHA512_ALGORITHM) { algorithmHandle = CachedAlgorithmHandles.HMAC_SHA512; } " is 132.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,GetHmacAlgorithmHandle,The length of the statement  "                algorithmHandle = BCryptAlgorithmHandle.OpenAlgorithmHandle(configuration.HashAlgorithm' configuration.HashAlgorithmProvider' hmac: true); " is 138.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The length of the statement  "            _logger.OpeningCNGAlgorithmFromProviderWithChainingModeCBC(configuration.EncryptionAlgorithm' configuration.EncryptionAlgorithmProvider); " is 137.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The length of the statement  "                if (configuration.EncryptionAlgorithm == Constants.BCRYPT_AES_ALGORITHM) { algorithmHandle = CachedAlgorithmHandles.AES_CBC; } " is 126.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The length of the statement  "                algorithmHandle = BCryptAlgorithmHandle.OpenAlgorithmHandle(configuration.EncryptionAlgorithm' configuration.EncryptionAlgorithmProvider); " is 138.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngGcmAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngGcmAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The length of the statement  "            _logger?.OpeningCNGAlgorithmFromProviderWithChainingModeGCM(configuration.EncryptionAlgorithm' configuration.EncryptionAlgorithmProvider); " is 138.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngGcmAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngGcmAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The length of the statement  "                if (configuration.EncryptionAlgorithm == Constants.BCRYPT_AES_ALGORITHM) { algorithmHandle = CachedAlgorithmHandles.AES_GCM; } " is 126.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngGcmAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngGcmAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The length of the statement  "                algorithmHandle = BCryptAlgorithmHandle.OpenAlgorithmHandle(configuration.EncryptionAlgorithm' configuration.EncryptionAlgorithmProvider); " is 138.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngGcmAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngGcmAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The length of the statement  "            CryptoUtil.Assert(algorithmHandle.GetCipherBlockLength() == 128 / 8' "GCM requires a block cipher algorithm with a 128-bit block size."); " is 137.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AlgorithmActivator,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ManagedAuthenticatedEncryptorFactory.cs,CreateFactory,The length of the statement  "                return ((IActivator<T>)Activator.CreateInstance(typeof(AlgorithmActivatorCore<>).MakeGenericType(implementation))).Creator; " is 123.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,AuthenticatedEncryptorDescriptorDeserializer,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\AuthenticatedEncryptorDescriptorDeserializer.cs,ImportFromXml,The length of the statement  "            configuration.EncryptionAlgorithm = (EncryptionAlgorithm)Enum.Parse(typeof(EncryptionAlgorithm)' (string)encryptionElement.Attribute("algorithm")); " is 147.
Long Statement,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,AuthenticatedEncryptorDescriptorDeserializer,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\AuthenticatedEncryptorDescriptorDeserializer.cs,ImportFromXml,The length of the statement  "                configuration.ValidationAlgorithm = (ValidationAlgorithm)Enum.Parse(typeof(ValidationAlgorithm)' (string)validationElement.Attribute("algorithm")); " is 147.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,CreateContextHeader,The length of the statement  "                    using (var symmetricKeyHandle = _symmetricAlgorithmHandle.GenerateSymmetricKey(pbSymmetricEncryptionSubkey' _symmetricAlgorithmSubkeyLengthInBytes)) " is 148.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,CreateContextHeader,The length of the statement  "            // retVal := { version || chainingMode || symAlgKeySize || symAlgBlockSize || hmacAlgKeySize || hmacAlgDigestSize || E("") || MAC("") }. " is 136.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,DecryptImpl,The length of the statement  "            if (cbCiphertext < checked(KEY_MODIFIER_SIZE_IN_BYTES + _symmetricAlgorithmBlockSizeInBytes + _hmacAlgorithmDigestLengthInBytes)) " is 129.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,DecryptImpl,The length of the statement  "            var cbEncryptedData = checked(cbCiphertext - (KEY_MODIFIER_SIZE_IN_BYTES + _symmetricAlgorithmBlockSizeInBytes + _hmacAlgorithmDigestLengthInBytes)); " is 149.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,DecryptImpl,The length of the statement  "                using (var decryptionSubkeyHandle = _symmetricAlgorithmHandle.GenerateSymmetricKey(pbSymmetricEncryptionSubkey' _symmetricAlgorithmSubkeyLengthInBytes)) " is 152.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,DoCbcDecrypt,The length of the statement  "            CryptoUtil.Assert(dwActualDecryptedByteCount <= dwEstimatedDecryptedByteCount' "dwActualDecryptedByteCount <= dwEstimatedDecryptedByteCount"); " is 142.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,EncryptImpl,The length of the statement  "                using (var symmetricKeyHandle = _symmetricAlgorithmHandle.GenerateSymmetricKey(pbSymmetricEncryptionSubkey' _symmetricAlgorithmSubkeyLengthInBytes)) " is 148.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,EncryptImpl,The length of the statement  "                    var retVal = new byte[checked(cbPreBuffer + KEY_MODIFIER_SIZE_IN_BYTES + _symmetricAlgorithmBlockSizeInBytes + cbOutputCiphertext + _hmacAlgorithmDigestLengthInBytes + cbPostBuffer)]; " is 183.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,EncryptImpl,The length of the statement  "                        // retVal will eventually contain { preBuffer | keyModifier | iv | encryptedData | HMAC(iv | encryptedData) | postBuffer } " is 122.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,DpapiSecretSerializerHelper,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\DpapiSecretSerializerHelper.cs,ProtectWithDpapi,The length of the statement  "                        return ProtectWithDpapiCore(pbPlaintextSecret' (uint)plaintextSecret.Length' pbPurpose' (uint)_purpose.Length' fLocalMachine: protectToLocalMachine); " is 149.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,CreateContextHeader,The length of the statement  "            // retVal := { version || chainingMode || symAlgKeySize || nonceSize || symAlgBlockSize || symAlgTagSize || TAG-of-E("") }. " is 123.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,DecryptImpl,The length of the statement  "                    using (var decryptionSubkeyHandle = _symmetricAlgorithmHandle.GenerateSymmetricKey(pbSymmetricDecryptionSubkey' _symmetricAlgorithmSubkeyLengthInBytes)) " is 152.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,EncryptImpl,The length of the statement  "            var retVal = new byte[checked(cbPreBuffer + KEY_MODIFIER_SIZE_IN_BYTES + NONCE_SIZE_IN_BYTES + cbPlaintext + TAG_SIZE_IN_BYTES + cbPostBuffer)]; " is 144.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng.Internal,CngAuthenticatedEncryptorBase,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\Internal\CngAuthenticatedEncryptorBase.cs,Decrypt,The length of the statement  "                            pbAdditionalAuthenticatedData: (pbAdditionalAuthenticatedDataArray != null) ? &pbAdditionalAuthenticatedDataArray[additionalAuthenticatedData.Offset] : &dummy' " is 159.
Long Statement,Microsoft.AspNetCore.DataProtection.Cng.Internal,CngAuthenticatedEncryptorBase,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\Internal\CngAuthenticatedEncryptorBase.cs,Encrypt,The length of the statement  "                            pbAdditionalAuthenticatedData: (pbAdditionalAuthenticatedDataArray != null) ? &pbAdditionalAuthenticatedDataArray[additionalAuthenticatedData.Offset] : &dummy' " is 159.
Long Statement,Microsoft.Extensions.DependencyInjection,DataProtectionServiceCollectionExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\DataProtectionServiceCollectionExtensions.cs,AddDataProtectionServices,The length of the statement  "                IDataProtectionProvider dataProtectionProvider = new KeyRingBasedDataProtectionProvider(keyRingProvider' loggerFactory); " is 120.
Long Statement,Microsoft.AspNetCore.DataProtection.KeyManagement,DefaultKeyResolver,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\DefaultKeyResolver.cs,FindDefaultKey,The length of the statement  "                if (preferredDefaultKey.IsRevoked || preferredDefaultKey.IsExpired(now) || !CanCreateAuthenticatedEncryptor(preferredDefaultKey)) " is 129.
Long Statement,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Protect,The length of the statement  "                CryptoUtil.Assert(retVal != null && retVal.Length >= sizeof(uint) + sizeof(Guid)' "retVal != null && retVal.Length >= sizeof(uint) + sizeof(Guid)"); " is 148.
Long Statement,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,UnprotectCore,The length of the statement  "                ArraySegment<byte> ciphertext = new ArraySegment<byte>(protectedData' sizeof(uint) + sizeof(Guid)' protectedData.Length - (sizeof(uint) + sizeof(Guid))); // chop off magic header + encryptor id " is 193.
Long Statement,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,UnprotectCore,The length of the statement  "                ArraySegment<byte> additionalAuthenticatedData = new ArraySegment<byte>(_aadTemplate.GetAadForKey(keyIdFromPayload' isProtecting: false)); " is 138.
Long Statement,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingProvider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingProvider.cs,CreateCacheableKeyRingCore,The length of the statement  "                var newKey = _keyManager.CreateNewKey(activationDate: defaultKeyPolicy.DefaultKey.ExpirationDate' expirationDate: now + _keyManagementOptions.NewKeyLifetime); " is 158.
Long Statement,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingProvider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingProvider.cs,CreateCacheableKeyRingCoreStep2,The length of the statement  "                expirationTime: (defaultKey.ExpirationDate <= now) ? nextAutoRefreshTime : Min(defaultKey.ExpirationDate' nextAutoRefreshTime)' " is 127.
Long Statement,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingProvider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingProvider.cs,GetCurrentKeyRingCore,The length of the statement  "                Monitor.TryEnter(_cacheableKeyRingLockObj' (existingCacheableKeyRing != null) ? 0 : Timeout.Infinite' ref acquiredLock); " is 120.
Long Statement,Microsoft.AspNetCore.DataProtection.KeyManagement,XmlKeyManager,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\XmlKeyManager.cs,DeserializeDescriptorFromKeyElement,The length of the statement  "                var deserializerInstance = _activator.CreateInstance<IAuthenticatedEncryptorDescriptorDeserializer>(descriptorDeserializerTypeName); " is 132.
Long Statement,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,CreateContextHeader,The length of the statement  "                    CryptoUtil.Assert(ciphertext != null && ciphertext.Length == _symmetricAlgorithmBlockSizeInBytes' "ciphertext != null && ciphertext.Length == _symmetricAlgorithmBlockSizeInBytes"); " is 180.
Long Statement,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,CreateContextHeader,The length of the statement  "            using (var hashAlg = CreateValidationAlgorithm(new ArraySegment<byte>(tempKeys' _symmetricAlgorithmSubkeyLengthInBytes' _validationAlgorithmSubkeyLengthInBytes).AsStandaloneArray())) " is 182.
Long Statement,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,CreateContextHeader,The length of the statement  "                CryptoUtil.Assert(digest != null && digest.Length == _validationAlgorithmDigestLengthInBytes' "digest != null && digest.Length == _validationAlgorithmDigestLengthInBytes"); " is 172.
Long Statement,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,CreateContextHeader,The length of the statement  "            // retVal := { version || chainingMode || symAlgKeySize || symAlgBlockSize || macAlgKeySize || macAlgDigestSize || E("") || MAC("") }. " is 134.
Long Statement,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,Decrypt,The length of the statement  "            if (protectedPayload.Count < checked(KEY_MODIFIER_SIZE_IN_BYTES + _symmetricAlgorithmBlockSizeInBytes + _validationAlgorithmDigestLengthInBytes)) " is 145.
Long Statement,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,Decrypt,The length of the statement  "                ArraySegment<byte> keyModifier = new ArraySegment<byte>(protectedPayload.Array' keyModifierOffset' ivOffset - keyModifierOffset); " is 129.
Long Statement,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,Decrypt,The length of the statement  "                        if (!CryptoUtil.TimeConstantBuffersAreEqual(correctHash' 0' correctHash.Length' protectedPayload.Array' macOffset' eofOffset - macOffset)) " is 138.
Long Statement,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,Encrypt,The length of the statement  "                                var mac = validationAlgorithm.ComputeHash(underlyingBuffer' KEY_MODIFIER_SIZE_IN_BYTES' checked((int)outputStream.Length - KEY_MODIFIER_SIZE_IN_BYTES)); " is 152.
Long Statement,Microsoft.AspNetCore.DataProtection.Managed,SymmetricAlgorithmExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\SymmetricAlgorithmExtensions.cs,GetBlockSizeInBytes,The length of the statement  "            CryptoUtil.Assert(blockSizeInBits >= 0 && blockSizeInBits % 8 == 0' "blockSizeInBits >= 0 && blockSizeInBits % 8 == 0"); " is 120.
Long Statement,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The length of the statement  "                var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)]; " is 131.
Long Statement,Microsoft.AspNetCore.DataProtection.SP800_108,SP800_108_CTR_HMACSHA512Extensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\SP800_108_CTR_HMACSHA512Extensions.cs,DeriveKeyWithContextHeader,The length of the statement  "            // Try allocating the combined context on the stack to avoid temporary managed objects; only fall back to heap if buffers are too large. " is 136.
Long Statement,Microsoft.AspNetCore.DataProtection.SP800_108,SP800_108_CTR_HMACSHA512Extensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\SP800_108_CTR_HMACSHA512Extensions.cs,DeriveKeyWithContextHeader,The length of the statement  "            byte[] heapAllocatedCombinedContext = (cbCombinedContext > Constants.MAX_STACKALLOC_BYTES) ? new byte[cbCombinedContext] : null; " is 128.
Long Statement,Microsoft.AspNetCore.DataProtection.XmlEncryption,DpapiNGXmlEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\DpapiNGXmlEncryptor.cs,Encrypt,The length of the statement  "                    cngDpapiEncryptedData = DpapiSecretSerializerHelper.ProtectWithDpapiNG(plaintextElementAsSecret' _protectionDescriptorHandle); " is 126.
Long Statement,Microsoft.AspNetCore.DataProtection.XmlEncryption,DpapiXmlEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\DpapiXmlEncryptor.cs,Encrypt,The length of the statement  "                    dpapiEncryptedData = DpapiSecretSerializerHelper.ProtectWithDpapi(plaintextElementAsSecret' protectToLocalMachine: _protectToLocalMachine); " is 139.
Long Statement,Microsoft.AspNetCore.DataProtection.XmlEncryption,XmlEncryptionExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\XmlEncryptionExtensions.cs,DecryptElement,The length of the statement  "                string decryptorTypeName = (string)clonedElementWhichRequiresDecryption.Attribute(XmlConstants.DecryptorTypeAttributeName); " is 123.
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: bytePtr[0] = (byte)(value >> 24);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: bytePtr[1] = (byte)(value >> 16);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: bytePtr[2] = (byte)(value >> 8);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: bytePtr[2] = (byte)(value >> 8);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: bytePtr[3] = (byte)(value);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: pTemp[0] = (byte)(value >> 24);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: pTemp[1] = (byte)(value >> 16);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: pTemp[2] = (byte)(value >> 8);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: pTemp[2] = (byte)(value >> 8);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: pTemp[3] = (byte)(value);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: ptr = &pTemp[4];
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: buffer[idx++] = (byte)(value >> 24);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: buffer[idx++] = (byte)(value >> 16);
Magic Number,Microsoft.AspNetCore.DataProtection,BitHelpers,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\BitHelpers.cs,WriteTo,The following statement contains a magic number: buffer[idx++] = (byte)(value >> 8);
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AlgorithmAssert,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AlgorithmAssert.cs,IsValidCore,The following statement contains a magic number: return (value % 8 == 0) // must be whole bytes                  && (value >= minValue) // must meet our basic security requirements                  && (value <= MAX_SIZE_IN_BITS);
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AuthenticatedEncryptorFactory.cs,GetAlgorithmKeySizeInBits,The following statement contains a magic number: switch (algorithm)              {                  case EncryptionAlgorithm.AES_128_CBC:                  case EncryptionAlgorithm.AES_128_GCM:                      return 128;                    case EncryptionAlgorithm.AES_192_CBC:                  case EncryptionAlgorithm.AES_192_GCM:                      return 192;                    case EncryptionAlgorithm.AES_256_CBC:                  case EncryptionAlgorithm.AES_256_GCM:                      return 256;                    default:                      throw new ArgumentOutOfRangeException(nameof(EncryptionAlgorithm));              }
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AuthenticatedEncryptorFactory.cs,GetAlgorithmKeySizeInBits,The following statement contains a magic number: switch (algorithm)              {                  case EncryptionAlgorithm.AES_128_CBC:                  case EncryptionAlgorithm.AES_128_GCM:                      return 128;                    case EncryptionAlgorithm.AES_192_CBC:                  case EncryptionAlgorithm.AES_192_GCM:                      return 192;                    case EncryptionAlgorithm.AES_256_CBC:                  case EncryptionAlgorithm.AES_256_GCM:                      return 256;                    default:                      throw new ArgumentOutOfRangeException(nameof(EncryptionAlgorithm));              }
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,AuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\AuthenticatedEncryptorFactory.cs,GetAlgorithmKeySizeInBits,The following statement contains a magic number: switch (algorithm)              {                  case EncryptionAlgorithm.AES_128_CBC:                  case EncryptionAlgorithm.AES_128_GCM:                      return 128;                    case EncryptionAlgorithm.AES_192_CBC:                  case EncryptionAlgorithm.AES_192_GCM:                      return 192;                    case EncryptionAlgorithm.AES_256_CBC:                  case EncryptionAlgorithm.AES_256_GCM:                      return 256;                    default:                      throw new ArgumentOutOfRangeException(nameof(EncryptionAlgorithm));              }
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,CreateAuthenticatedEncryptorInstance,The following statement contains a magic number: return new CbcAuthenticatedEncryptor(                  keyDerivationKey: new Secret(secret)'                  symmetricAlgorithmHandle: GetSymmetricBlockCipherAlgorithmHandle(configuration)'                  symmetricAlgorithmKeySizeInBytes: (uint)(configuration.EncryptionAlgorithmKeySize / 8)'                  hmacAlgorithmHandle: GetHmacAlgorithmHandle(configuration));
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,GetHmacAlgorithmHandle,The following statement contains a magic number: AlgorithmAssert.IsAllowableValidationAlgorithmDigestSize(checked(digestSize * 8));
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngCbcAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngCbcAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The following statement contains a magic number: AlgorithmAssert.IsAllowableSymmetricAlgorithmBlockSize(checked(algorithmHandle.GetCipherBlockLength() * 8));
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngGcmAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngGcmAuthenticatedEncryptorFactory.cs,CreateAuthenticatedEncryptorInstance,The following statement contains a magic number: return new GcmAuthenticatedEncryptor(                  keyDerivationKey: new Secret(secret)'                  symmetricAlgorithmHandle: GetSymmetricBlockCipherAlgorithmHandle(configuration)'                  symmetricAlgorithmKeySizeInBytes: (uint)(configuration.EncryptionAlgorithmKeySize / 8));
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngGcmAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngGcmAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The following statement contains a magic number: CryptoUtil.Assert(algorithmHandle.GetCipherBlockLength() == 128 / 8' "GCM requires a block cipher algorithm with a 128-bit block size.");
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,CngGcmAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\CngGcmAuthenticatedEncryptorFactory.cs,GetSymmetricBlockCipherAlgorithmHandle,The following statement contains a magic number: CryptoUtil.Assert(algorithmHandle.GetCipherBlockLength() == 128 / 8' "GCM requires a block cipher algorithm with a 128-bit block size.");
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption,ManagedAuthenticatedEncryptorFactory,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ManagedAuthenticatedEncryptorFactory.cs,CreateAuthenticatedEncryptorInstance,The following statement contains a magic number: return new ManagedAuthenticatedEncryptor(                  keyDerivationKey: new Secret(secret)'                  symmetricAlgorithmFactory: GetSymmetricBlockCipherAlgorithmFactory(configuration)'                  symmetricAlgorithmKeySizeInBytes: configuration.EncryptionAlgorithmKeySize / 8'                  validationAlgorithmFactory: GetKeyedHashAlgorithmFactory(configuration));
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,AuthenticatedEncryptorConfiguration,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\AuthenticatedEncryptorConfiguration.cs,Validate,The following statement contains a magic number: var encryptor = factory.CreateAuthenticatedEncryptorInstance(Secret.Random(512 / 8)' this);
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,AuthenticatedEncryptorConfiguration,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\AuthenticatedEncryptorConfiguration.cs,Validate,The following statement contains a magic number: var encryptor = factory.CreateAuthenticatedEncryptorInstance(Secret.Random(512 / 8)' this);
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,CngCbcAuthenticatedEncryptorConfiguration,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\CngCbcAuthenticatedEncryptorConfiguration.cs,Validate,The following statement contains a magic number: using (var encryptor = factory.CreateAuthenticatedEncryptorInstance(Secret.Random(512 / 8)' this))              {                  encryptor.PerformSelfTest();              }
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,CngCbcAuthenticatedEncryptorConfiguration,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\CngCbcAuthenticatedEncryptorConfiguration.cs,Validate,The following statement contains a magic number: using (var encryptor = factory.CreateAuthenticatedEncryptorInstance(Secret.Random(512 / 8)' this))              {                  encryptor.PerformSelfTest();              }
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,CngGcmAuthenticatedEncryptorConfiguration,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\CngGcmAuthenticatedEncryptorConfiguration.cs,Validate,The following statement contains a magic number: using (var encryptor = factory.CreateAuthenticatedEncryptorInstance(Secret.Random(512 / 8)' this))              {                  encryptor.PerformSelfTest();              }
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,CngGcmAuthenticatedEncryptorConfiguration,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\CngGcmAuthenticatedEncryptorConfiguration.cs,Validate,The following statement contains a magic number: using (var encryptor = factory.CreateAuthenticatedEncryptorInstance(Secret.Random(512 / 8)' this))              {                  encryptor.PerformSelfTest();              }
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,ManagedAuthenticatedEncryptorConfiguration,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\ManagedAuthenticatedEncryptorConfiguration.cs,Validate,The following statement contains a magic number: using (var encryptor = factory.CreateAuthenticatedEncryptorInstance(Secret.Random(512 / 8)' this))              {                  encryptor.PerformSelfTest();              }
Magic Number,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel,ManagedAuthenticatedEncryptorConfiguration,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\AuthenticatedEncryption\ConfigurationModel\ManagedAuthenticatedEncryptorConfiguration.cs,Validate,The following statement contains a magic number: using (var encryptor = factory.CreateAuthenticatedEncryptorInstance(Secret.Random(512 / 8)' this))              {                  encryptor.PerformSelfTest();              }
Magic Number,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,CbcAuthenticatedEncryptor,The following statement contains a magic number: AlgorithmAssert.IsAllowableSymmetricAlgorithmBlockSize(checked(_symmetricAlgorithmBlockSizeInBytes * 8));
Magic Number,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,CbcAuthenticatedEncryptor,The following statement contains a magic number: AlgorithmAssert.IsAllowableSymmetricAlgorithmKeySize(checked(_symmetricAlgorithmSubkeyLengthInBytes * 8));
Magic Number,Microsoft.AspNetCore.DataProtection.Cng,CbcAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\CbcAuthenticatedEncryptor.cs,CbcAuthenticatedEncryptor,The following statement contains a magic number: AlgorithmAssert.IsAllowableValidationAlgorithmDigestSize(checked(_hmacAlgorithmDigestLengthInBytes * 8));
Magic Number,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,GcmAuthenticatedEncryptor,The following statement contains a magic number: AlgorithmAssert.IsAllowableSymmetricAlgorithmKeySize(checked(symmetricAlgorithmKeySizeInBytes * 8));
Magic Number,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,GcmAuthenticatedEncryptor,The following statement contains a magic number: CryptoUtil.Assert(symmetricAlgorithmHandle.GetCipherBlockLength() == 128 / 8' "GCM requires a block cipher algorithm with a 128-bit block size.");
Magic Number,Microsoft.AspNetCore.DataProtection.Cng,GcmAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Cng\GcmAuthenticatedEncryptor.cs,GcmAuthenticatedEncryptor,The following statement contains a magic number: CryptoUtil.Assert(symmetricAlgorithmHandle.GetCipherBlockLength() == 128 / 8' "GCM requires a block cipher algorithm with a 128-bit block size.");
Magic Number,Microsoft.AspNetCore.DataProtection.Internal,DockerUtils,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Internal\DockerUtils.cs,IsDirectoryMounted,The following statement contains a magic number: foreach (var line in fstab)              {                  if (line == null || line.Length == 0 || line[0] == '#')                  {                      // skip empty and commented-out lines                      continue;                  }                    var fields = line.Split(new[] { '\t'' ' ' });                    if (fields.Length < 2 // line had too few fields                      || fields[1].Length <= 1 // fs_file empty or is the root directory '/'                      || fields[1][0] != '/') // fs_file was not a file path                  {                      continue;                  }                    // check if directory is a subdirectory of this location                  var fs_file = new DirectoryInfo(fields[1].TrimEnd(Path.DirectorySeparatorChar)).FullName;                  var dir = directory;                  while (dir != null)                  {                      // filesystems on Linux are case sensitive                      if (fs_file.Equals(dir.FullName.TrimEnd(Path.DirectorySeparatorChar)' StringComparison.Ordinal))                      {                          return true;                      }                        dir = dir.Parent;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Read32bitAlignedGuid,The following statement contains a magic number: Debug.Assert((long)ptr % 4 == 0);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Read32bitAlignedGuid,The following statement contains a magic number: ((int*)&retVal)[2] = ((int*)ptr)[2];
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Read32bitAlignedGuid,The following statement contains a magic number: ((int*)&retVal)[2] = ((int*)ptr)[2];
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Read32bitAlignedGuid,The following statement contains a magic number: ((int*)&retVal)[3] = ((int*)ptr)[3];
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Read32bitAlignedGuid,The following statement contains a magic number: ((int*)&retVal)[3] = ((int*)ptr)[3];
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,ReadBigEndian32BitInteger,The following statement contains a magic number: return ((uint)ptr[0] << 24)                  | ((uint)ptr[1] << 16)                  | ((uint)ptr[2] << 8)                  | ((uint)ptr[3]);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,ReadBigEndian32BitInteger,The following statement contains a magic number: return ((uint)ptr[0] << 24)                  | ((uint)ptr[1] << 16)                  | ((uint)ptr[2] << 8)                  | ((uint)ptr[3]);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,ReadBigEndian32BitInteger,The following statement contains a magic number: return ((uint)ptr[0] << 24)                  | ((uint)ptr[1] << 16)                  | ((uint)ptr[2] << 8)                  | ((uint)ptr[3]);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,ReadBigEndian32BitInteger,The following statement contains a magic number: return ((uint)ptr[0] << 24)                  | ((uint)ptr[1] << 16)                  | ((uint)ptr[2] << 8)                  | ((uint)ptr[3]);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,ReadBigEndian32BitInteger,The following statement contains a magic number: return ((uint)ptr[0] << 24)                  | ((uint)ptr[1] << 16)                  | ((uint)ptr[2] << 8)                  | ((uint)ptr[3]);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Write32bitAlignedGuid,The following statement contains a magic number: Debug.Assert((long)ptr % 4 == 0);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Write32bitAlignedGuid,The following statement contains a magic number: ((int*)ptr)[2] = ((int*)&value)[2];
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Write32bitAlignedGuid,The following statement contains a magic number: ((int*)ptr)[2] = ((int*)&value)[2];
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Write32bitAlignedGuid,The following statement contains a magic number: ((int*)ptr)[3] = ((int*)&value)[3];
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,Write32bitAlignedGuid,The following statement contains a magic number: ((int*)ptr)[3] = ((int*)&value)[3];
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,WriteBigEndianInteger,The following statement contains a magic number: ptr[0] = (byte)(value >> 24);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,WriteBigEndianInteger,The following statement contains a magic number: ptr[1] = (byte)(value >> 16);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,WriteBigEndianInteger,The following statement contains a magic number: ptr[2] = (byte)(value >> 8);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,WriteBigEndianInteger,The following statement contains a magic number: ptr[2] = (byte)(value >> 8);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingBasedDataProtector,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,WriteBigEndianInteger,The following statement contains a magic number: ptr[3] = (byte)(value);
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,PurposeBinaryWriter,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,WriteBigEndian,The following statement contains a magic number: outStream.WriteByte((byte)(value >> 24));
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,PurposeBinaryWriter,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,WriteBigEndian,The following statement contains a magic number: outStream.WriteByte((byte)(value >> 16));
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,PurposeBinaryWriter,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingBasedDataProtector.cs,WriteBigEndian,The following statement contains a magic number: outStream.WriteByte((byte)(value >> 8));
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement,KeyRingProvider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\KeyRingProvider.cs,GetRefreshPeriodWithJitter,The following statement contains a magic number: return TimeSpan.FromTicks((long)(refreshPeriod.Ticks * (1.0d - (new Random().NextDouble() / 5))));
Magic Number,Microsoft.AspNetCore.DataProtection.KeyManagement.Internal,CacheableKeyRing,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\KeyManagement\Internal\CacheableKeyRing.cs,WithTemporaryExtendedLifetime,The following statement contains a magic number: var extension = TimeSpan.FromMinutes(2);
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _usingKeyAsDefaultKey = LoggerMessage.Define<Guid>(                  eventId: 2'                  logLevel: LogLevel.Debug'                  formatString: "Using key {KeyId:B} as the default key.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _openingCNGAlgorithmFromProviderWithHMAC = LoggerMessage.Define<string' string>(                  eventId: 3'                  logLevel: LogLevel.Debug'                  formatString: "Opening CNG algorithm '{HashAlgorithm}' from provider '{HashAlgorithmProvider}' with HMAC.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _openingCNGAlgorithmFromProviderWithChainingModeCBC = LoggerMessage.Define<string' string>(                  eventId: 4'                  logLevel: LogLevel.Debug'                  formatString: "Opening CNG algorithm '{EncryptionAlgorithm}' from provider '{EncryptionAlgorithmProvider}' with chaining mode CBC.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _performingUnprotectOperationToKeyWithPurposes = LoggerMessage.Define<Guid' string>(                  eventId: 5'                  logLevel: LogLevel.Trace'                  formatString: "Performing unprotect operation to key {KeyId:B} with purposes {Purposes}.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _keyWasNotFoundInTheKeyRingUnprotectOperationCannotProceed = LoggerMessage.Define<Guid>(                  eventId: 6'                  logLevel: LogLevel.Trace'                  formatString: "Key {KeyId:B} was not found in the key ring. Unprotect operation cannot proceed.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _keyWasRevokedCallerRequestedUnprotectOperationProceedRegardless = LoggerMessage.Define<Guid>(                  eventId: 7'                  logLevel: LogLevel.Debug'                  formatString: "Key {KeyId:B} was revoked. Caller requested unprotect operation proceed regardless.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _keyWasRevokedUnprotectOperationCannotProceed = LoggerMessage.Define<Guid>(                  eventId: 8'                  logLevel: LogLevel.Debug'                  formatString: "Key {KeyId:B} was revoked. Unprotect operation cannot proceed.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _openingCNGAlgorithmFromProviderWithChainingModeGCM = LoggerMessage.Define<string' string>(                  eventId: 9'                  logLevel: LogLevel.Debug'                  formatString: "Opening CNG algorithm '{EncryptionAlgorithm}' from provider '{EncryptionAlgorithmProvider}' with chaining mode GCM.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _usingManagedKeyedHashAlgorithm = LoggerMessage.Define<string>(                  eventId: 10'                  logLevel: LogLevel.Debug'                  formatString: "Using managed keyed hash algorithm '{FullName}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _usingManagedSymmetricAlgorithm = LoggerMessage.Define<string>(                  eventId: 11'                  logLevel: LogLevel.Debug'                  formatString: "Using managed symmetric algorithm '{FullName}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _keyIsIneligibleToBeTheDefaultKeyBecauseItsMethodFailed = LoggerMessage.Define<Guid' string>(                  eventId: 12'                  logLevel: LogLevel.Warning'                  formatString: "Key {KeyId:B} is ineligible to be the default key because its {MethodName} method failed.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _consideringKeyWithExpirationDateAsDefaultKey = LoggerMessage.Define<Guid' DateTimeOffset>(                  eventId: 13'                  logLevel: LogLevel.Debug'                  formatString: "Considering key {KeyId:B} with expiration date {ExpirationDate:u} as default key.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _keyIsNoLongerUnderConsiderationAsDefault = LoggerMessage.Define<Guid>(                  eventId: 14'                  logLevel: LogLevel.Debug'                  formatString: "Key {KeyId:B} is no longer under consideration as default key because it is expired' revoked' or cannot be deciphered.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _unknownElementWithNameFoundInKeyringSkipping = LoggerMessage.Define<XName>(                  eventId: 15'                  logLevel: LogLevel.Warning'                  formatString: "Unknown element with name '{Name}' found in keyring' skipping.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _markedKeyAsRevokedInTheKeyring = LoggerMessage.Define<Guid>(                  eventId: 16'                  logLevel: LogLevel.Debug'                  formatString: "Marked key {KeyId:B} as revoked in the keyring.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _triedToProcessRevocationOfKeyButNoSuchKeyWasFound = LoggerMessage.Define<Guid>(                  eventId: 17'                  logLevel: LogLevel.Warning'                  formatString: "Tried to process revocation of key {KeyId:B}' but no such key was found in keyring. Skipping.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _foundKey = LoggerMessage.Define<Guid>(                  eventId: 18'                  logLevel: LogLevel.Debug'                  formatString: "Found key {KeyId:B}.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _foundRevocationOfAllKeysCreatedPriorTo = LoggerMessage.Define<DateTimeOffset>(                  eventId: 19'                  logLevel: LogLevel.Debug'                  formatString: "Found revocation of all keys created prior to {RevocationDate:u}.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _foundRevocationOfKey = LoggerMessage.Define<Guid>(                  eventId: 20'                  logLevel: LogLevel.Debug'                  formatString: "Found revocation of key {KeyId:B}.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _exceptionWhileProcessingRevocationElement = LoggerMessage.Define<XElement>(                  eventId: 21'                  logLevel: LogLevel.Error'                  formatString: "An exception occurred while processing the revocation element '{RevocationElement}'. Cannot continue keyring processing.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _revokingAllKeysAsOfForReason = LoggerMessage.Define<DateTimeOffset' string>(                  eventId: 22'                  logLevel: LogLevel.Information'                  formatString: "Revoking all keys as of {RevocationDate:u} for reason '{Reason}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _keyCacheExpirationTokenTriggeredByOperation = LoggerMessage.Define<string>(                  eventId: 23'                  logLevel: LogLevel.Debug'                  formatString: "Key cache expiration token triggered by '{OperationName}' operation.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _anExceptionOccurredWhileProcessingTheKeyElement = LoggerMessage.Define<XElement>(                  eventId: 24'                  logLevel: LogLevel.Error'                  formatString: "An exception occurred while processing the key element '{Element}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _anExceptionOccurredWhileProcessingTheKeyElementDebug = LoggerMessage.Define<XElement>(                  eventId: 25'                  logLevel: LogLevel.Trace'                  formatString: "An exception occurred while processing the key element '{Element}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _encryptingToWindowsDPAPIForCurrentUserAccount = LoggerMessage.Define<string>(                  eventId: 26'                  logLevel: LogLevel.Debug'                  formatString: "Encrypting to Windows DPAPI for current user account ({Name}).");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _encryptingToWindowsDPAPINGUsingProtectionDescriptorRule = LoggerMessage.Define<string>(                  eventId: 27'                  logLevel: LogLevel.Debug'                  formatString: "Encrypting to Windows DPAPI-NG using protection descriptor rule '{DescriptorRule}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _anErrorOccurredWhileEncryptingToX509CertificateWithThumbprint = LoggerMessage.Define<string>(                  eventId: 28'                  logLevel: LogLevel.Error'                  formatString: "An error occurred while encrypting to X.509 certificate with thumbprint '{Thumbprint}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _encryptingToX509CertificateWithThumbprint = LoggerMessage.Define<string>(                  eventId: 29'                  logLevel: LogLevel.Debug'                  formatString: "Encrypting to X.509 certificate with thumbprint '{Thumbprint}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _exceptionOccurredWhileTryingToResolveCertificateWithThumbprint = LoggerMessage.Define<string>(                  eventId: 30'                  logLevel: LogLevel.Error'                  formatString: "An exception occurred while trying to resolve certificate with thumbprint '{Thumbprint}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _performingProtectOperationToKeyWithPurposes = LoggerMessage.Define<Guid' string>(                  eventId: 31'                  logLevel: LogLevel.Trace'                  formatString: "Performing protect operation to key {KeyId:B} with purposes {Purposes}.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _descriptorDeserializerTypeForKeyIs = LoggerMessage.Define<Guid' string>(                  eventId: 32'                  logLevel: LogLevel.Debug'                  formatString: "Descriptor deserializer type for key {KeyId:B} is '{AssemblyQualifiedName}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _keyEscrowSinkFoundWritingKeyToEscrow = LoggerMessage.Define<Guid>(                  eventId: 33'                  logLevel: LogLevel.Debug'                  formatString: "Key escrow sink found. Writing key {KeyId:B} to escrow.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _noKeyEscrowSinkFoundNotWritingKeyToEscrow = LoggerMessage.Define<Guid>(                  eventId: 34'                  logLevel: LogLevel.Debug'                  formatString: "No key escrow sink found. Not writing key {KeyId:B} to escrow.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _noXMLEncryptorConfiguredKeyMayBePersistedToStorageInUnencryptedForm = LoggerMessage.Define<Guid>(                  eventId: 35'                  logLevel: LogLevel.Warning'                  formatString: "No XML encryptor configured. Key {KeyId:B} may be persisted to storage in unencrypted form.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _revokingKeyForReason = LoggerMessage.Define<Guid' DateTimeOffset' string>(                  eventId: 36'                  logLevel: LogLevel.Information'                  formatString: "Revoking key {KeyId:B} at {RevocationDate:u} for reason '{Reason}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _readingDataFromFile = LoggerMessage.Define<string>(                  eventId: 37'                  logLevel: LogLevel.Debug'                  formatString: "Reading data from file '{FullPath}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _nameIsNotSafeFileName = LoggerMessage.Define<string' string>(                  eventId: 38'                  logLevel: LogLevel.Debug'                  formatString: "The name '{FriendlyName}' is not a safe file name' using '{NewFriendlyName}' instead.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _writingDataToFile = LoggerMessage.Define<string>(                  eventId: 39'                  logLevel: LogLevel.Information'                  formatString: "Writing data to file '{FileName}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _readingDataFromRegistryKeyValue = LoggerMessage.Define<RegistryKey' string>(                  eventId: 40'                  logLevel: LogLevel.Debug'                  formatString: "Reading data from registry key '{RegistryKeyName}'' value '{Value}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _nameIsNotSafeRegistryValueName = LoggerMessage.Define<string' string>(                  eventId: 41'                  logLevel: LogLevel.Debug'                  formatString: "The name '{FriendlyName}' is not a safe registry value name' using '{NewFriendlyName}' instead.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _decryptingSecretElementUsingWindowsDPAPING = LoggerMessage.Define<string>(                  eventId: 42'                  logLevel: LogLevel.Debug'                  formatString: "Decrypting secret element using Windows DPAPI-NG with protection descriptor rule '{DescriptorRule}'.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _exceptionOccurredTryingToDecryptElement = LoggerMessage.Define(                  eventId: 43'                  logLevel: LogLevel.Error'                  formatString: "An exception occurred while trying to decrypt the element.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _encryptingUsingNullEncryptor = LoggerMessage.Define(                  eventId: 44'                  logLevel: LogLevel.Warning'                  formatString: "Encrypting using a null encryptor; secret information isn't being protected.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _usingEphemeralDataProtectionProvider = LoggerMessage.Define(                  eventId: 45'                  logLevel: LogLevel.Warning'                  formatString: "Using ephemeral data protection provider. Payloads will be undecipherable upon application shutdown.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _existingCachedKeyRingIsExpiredRefreshing = LoggerMessage.Define(                  eventId: 46'                  logLevel: LogLevel.Debug'                  formatString: "Existing cached key ring is expired. Refreshing.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _errorOccurredWhileRefreshingKeyRing = LoggerMessage.Define(                  eventId: 47'                  logLevel: LogLevel.Error'                  formatString: "An error occurred while refreshing the key ring. Will try again in 2 minutes.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _errorOccurredWhileReadingKeyRing = LoggerMessage.Define(                  eventId: 48'                  logLevel: LogLevel.Error'                  formatString: "An error occurred while reading the key ring.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _keyRingDoesNotContainValidDefaultKey = LoggerMessage.Define(                  eventId: 49'                  logLevel: LogLevel.Error'                  formatString: "The key ring does not contain a valid default key' and the key manager is configured with auto-generation of keys disabled.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _usingInmemoryRepository = LoggerMessage.Define(                  eventId: 50'                  logLevel: LogLevel.Warning'                  formatString: "Using an in-memory repository. Keys will not be persisted to storage.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _decryptingSecretElementUsingWindowsDPAPI = LoggerMessage.Define(                  eventId: 51'                  logLevel: LogLevel.Debug'                  formatString: "Decrypting secret element using Windows DPAPI.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _defaultKeyExpirationImminentAndRepository = LoggerMessage.Define(                  eventId: 52'                  logLevel: LogLevel.Debug'                  formatString: "Default key expiration imminent and repository contains no viable successor. Caller should generate a successor.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _repositoryContainsNoViableDefaultKey = LoggerMessage.Define(                  eventId: 53'                  logLevel: LogLevel.Debug'                  formatString: "Repository contains no viable default key. Caller should generate a key with immediate activation.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _errorOccurredWhileEncryptingToWindowsDPAPI = LoggerMessage.Define(                  eventId: 54'                  logLevel: LogLevel.Error'                  formatString: "An error occurred while encrypting to Windows DPAPI.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _encryptingToWindowsDPAPIForLocalMachineAccount = LoggerMessage.Define(                  eventId: 55'                  logLevel: LogLevel.Debug'                  formatString: "Encrypting to Windows DPAPI for local machine account.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _errorOccurredWhileEncryptingToWindowsDPAPING = LoggerMessage.Define(                  eventId: 56'                  logLevel: LogLevel.Error'                  formatString: "An error occurred while encrypting to Windows DPAPI-NG.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _policyResolutionStatesThatANewKeyShouldBeAddedToTheKeyRing = LoggerMessage.Define(                  eventId: 57'                  logLevel: LogLevel.Debug'                  formatString: "Policy resolution states that a new key should be added to the key ring.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _creatingKey = LoggerMessage.Define<Guid' DateTimeOffset' DateTimeOffset' DateTimeOffset>(                  eventId: 58'                  logLevel: LogLevel.Information'                  formatString: "Creating key {KeyId:B} with creation date {CreationDate:u}' activation date {ActivationDate:u}' and expiration date {ExpirationDate:u}.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _usingEphemeralKeyRepository = LoggerMessage.Define(                  eventId: 59'                  logLevel: LogLevel.Warning'                  formatString: "Neither user profile nor HKLM registry available. Using an ephemeral key repository. Protected data will be unavailable when application exits.");
Magic Number,Microsoft.Extensions.Logging,LoggingExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\LoggingExtensions.cs,LoggingExtensions,The following statement contains a magic number: _usingEphemeralFileSystemLocationInContainer = LoggerMessage.Define<string>(                  eventId: 60'                  logLevel: LogLevel.Warning'                  formatString: Resources.FileSystem_EphemeralKeysLocationInContainer);
Magic Number,Microsoft.AspNetCore.DataProtection.Managed,HashAlgorithmExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\HashAlgorithmExtensions.cs,GetDigestSizeInBytes,The following statement contains a magic number: CryptoUtil.Assert(hashSizeInBits >= 0 && hashSizeInBits % 8 == 0' "hashSizeInBits >= 0 && hashSizeInBits % 8 == 0");
Magic Number,Microsoft.AspNetCore.DataProtection.Managed,HashAlgorithmExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\HashAlgorithmExtensions.cs,GetDigestSizeInBytes,The following statement contains a magic number: return hashSizeInBits / 8;
Magic Number,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,ManagedAuthenticatedEncryptor,The following statement contains a magic number: AlgorithmAssert.IsAllowableSymmetricAlgorithmBlockSize(checked((uint)_symmetricAlgorithmBlockSizeInBytes * 8));
Magic Number,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,ManagedAuthenticatedEncryptor,The following statement contains a magic number: AlgorithmAssert.IsAllowableSymmetricAlgorithmKeySize(checked((uint)_symmetricAlgorithmSubkeyLengthInBytes * 8));
Magic Number,Microsoft.AspNetCore.DataProtection.Managed,ManagedAuthenticatedEncryptor,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\ManagedAuthenticatedEncryptor.cs,ManagedAuthenticatedEncryptor,The following statement contains a magic number: AlgorithmAssert.IsAllowableValidationAlgorithmDigestSize(checked((uint)_validationAlgorithmDigestLengthInBytes * 8));
Magic Number,Microsoft.AspNetCore.DataProtection.Managed,SymmetricAlgorithmExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\SymmetricAlgorithmExtensions.cs,GetBlockSizeInBytes,The following statement contains a magic number: CryptoUtil.Assert(blockSizeInBits >= 0 && blockSizeInBits % 8 == 0' "blockSizeInBits >= 0 && blockSizeInBits % 8 == 0");
Magic Number,Microsoft.AspNetCore.DataProtection.Managed,SymmetricAlgorithmExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Managed\SymmetricAlgorithmExtensions.cs,GetBlockSizeInBytes,The following statement contains a magic number: return blockSizeInBits / 8;
Magic Number,Microsoft.AspNetCore.DataProtection.Repositories,RegistryXmlRepository,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\Repositories\RegistryXmlRepository.cs,GetDefaultHklmStorageKey,The following statement contains a magic number: try              {                  var registryView = IntPtr.Size == 4 ? RegistryView.Registry32 : RegistryView.Registry64;                  // Try reading the auto-generated machine key from HKLM                  using (var hklmBaseKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine' registryView))                  {                      // Even though this is in HKLM' WAS ensures that applications hosted in IIS are properly isolated.                      // See APP_POOL::EnsureSharedMachineKeyStorage in WAS source for more info.                      // The version number will need to change if IIS hosts Core CLR directly.                      var aspnetAutoGenKeysBaseKeyName = string.Format(                          CultureInfo.InvariantCulture'                          @"SOFTWARE\Microsoft\ASP.NET\4.0.30319.0\AutoGenKeys\{0}"'                          WindowsIdentity.GetCurrent().User.Value);                        var aspnetBaseKey = hklmBaseKey.OpenSubKey(aspnetAutoGenKeysBaseKeyName' writable: true);                      if (aspnetBaseKey != null)                      {                          using (aspnetBaseKey)                          {                              // We'll create a 'DataProtection' subkey under the auto-gen keys base                              return aspnetBaseKey.OpenSubKey("DataProtection"' writable: true)                                  ?? aspnetBaseKey.CreateSubKey("DataProtection");                          }                      }                      return null; // couldn't find the auto-generated machine key                  }              }              catch              {                  // swallow all errors; they're not fatal                  return null;              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,ManagedSP800_108_CTR_HMACSHA512,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\ManagedSP800_108_CTR_HMACSHA512.cs,DeriveKeys,The following statement contains a magic number: using (var prf = prfFactory(kdk))              {                  // See SP800-108' Sec. 5.1 for the format of the input to the PRF routine.                  var prfInput = new byte[checked(sizeof(uint) /* [i]_2 */ + label.Count + 1 /* 0x00 */ + context.Count + sizeof(uint) /* [K]_2 */)];                    // Copy [L]_2 to prfInput since it's stable over all iterations                  uint outputSizeInBits = (uint)checked((int)outputCount * 8);                  prfInput[prfInput.Length - 4] = (byte)(outputSizeInBits >> 24);                  prfInput[prfInput.Length - 3] = (byte)(outputSizeInBits >> 16);                  prfInput[prfInput.Length - 2] = (byte)(outputSizeInBits >> 8);                  prfInput[prfInput.Length - 1] = (byte)(outputSizeInBits);                    // Copy label and context to prfInput since they're stable over all iterations                  Buffer.BlockCopy(label.Array' label.Offset' prfInput' sizeof(uint)' label.Count);                  Buffer.BlockCopy(context.Array' context.Offset' prfInput' sizeof(int) + label.Count + 1' context.Count);                    var prfOutputSizeInBytes = prf.GetDigestSizeInBytes();                  for (uint i = 1; outputCount > 0; i++)                  {                      // Copy [i]_2 to prfInput since it mutates with each iteration                      prfInput[0] = (byte)(i >> 24);                      prfInput[1] = (byte)(i >> 16);                      prfInput[2] = (byte)(i >> 8);                      prfInput[3] = (byte)(i);                        // Run the PRF and copy the results to the output buffer                      var prfOutput = prf.ComputeHash(prfInput);                      CryptoUtil.Assert(prfOutputSizeInBytes == prfOutput.Length' "prfOutputSizeInBytes == prfOutput.Length");                      var numBytesToCopyThisIteration = Math.Min(prfOutputSizeInBytes' outputCount);                      Buffer.BlockCopy(prfOutput' 0' output.Array' outputOffset' numBytesToCopyThisIteration);                      Array.Clear(prfOutput' 0' prfOutput.Length); // contains key material' so delete it                        // adjust offsets                      outputOffset += numBytesToCopyThisIteration;                      outputCount -= numBytesToCopyThisIteration;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win7SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win7SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: const uint SHA512_DIGEST_SIZE_IN_BYTES = 512 / 8;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win7SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win7SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: const uint SHA512_DIGEST_SIZE_IN_BYTES = 512 / 8;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win7SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win7SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: fixed (byte* pbTempInputBuffer = tempInputBuffer)              {                  // Step 1: Calculate all necessary offsets into the temp input & output buffer.                  byte* pbTempInputCounter = pbTempInputBuffer;                  byte* pbTempInputLabel = &pbTempInputCounter[sizeof(int)];                  byte* pbTempInputContext = &pbTempInputLabel[cbLabel + 1 /* 0x00 */];                  byte* pbTempInputBitlengthIndicator = &pbTempInputContext[cbContext];                    // Step 2: Copy Label and Context into the temp input buffer.                  UnsafeBufferUtil.BlockCopy(from: pbLabel' to: pbTempInputLabel' byteCount: cbLabel);                  UnsafeBufferUtil.BlockCopy(from: pbContext' to: pbTempInputContext' byteCount: cbContext);                    // Step 3: copy [L] into last part of data to be hashed' big-endian                  BitHelpers.WriteTo(pbTempInputBitlengthIndicator' checked(cbDerivedKey * 8));                    // Step 4: iterate until all desired bytes have been generated                  for (uint i = 1; cbDerivedKey > 0; i++)                  {                      // Step 4a: Copy [i] into the first part of data to be hashed' big-endian                      BitHelpers.WriteTo(pbTempInputCounter' i);                        // Step 4b: Hash. Win7 doesn't allow reusing hash algorithm objects after the final hash                      // has been computed' so we'll just keep calling DuplicateHash on the original                      // hash handle. This offers a slight performance increase over allocating a new hash                      // handle for each iteration. We don't need to mess with any of this on Win8 since on                      // that platform we use BCryptKeyDerivation directly' which offers superior performance.                      using (var hashHandle = _hashHandle.DuplicateHash())                      {                          hashHandle.HashData(pbTempInputBuffer' (uint)tempInputBuffer.Length' pbHashDigest' SHA512_DIGEST_SIZE_IN_BYTES);                      }                        // Step 4c: Copy bytes from the temporary buffer to the output buffer.                      uint numBytesToCopy = Math.Min(cbDerivedKey' SHA512_DIGEST_SIZE_IN_BYTES);                      UnsafeBufferUtil.BlockCopy(from: pbHashDigest' to: pbDerivedKey' byteCount: numBytesToCopy);                      pbDerivedKey += numBytesToCopy;                      cbDerivedKey -= numBytesToCopy;                  }              }
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: const int SHA512_ALG_CHAR_COUNT = 7;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: pszHashAlgorithm[2] = 'A';
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: pszHashAlgorithm[3] = '5';
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: pszHashAlgorithm[4] = '1';
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: pszHashAlgorithm[5] = '2';
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: pszHashAlgorithm[6] = (char)0;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: BCryptBuffer* pBuffers = stackalloc BCryptBuffer[3];
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: pBuffers[2].BufferType = BCryptKeyDerivationBufferType.KDF_HASH_ALGORITHM;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: pBuffers[2].pvBuffer = (IntPtr)pszHashAlgorithm;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: pBuffers[2].cbBuffer = checked(SHA512_ALG_CHAR_COUNT * sizeof(char));
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,DeriveKey,The following statement contains a magic number: bufferDesc.cBuffers = 3;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,ImportKey,The following statement contains a magic number: const uint SHA512_BLOCK_SIZE_IN_BYTES = 1024 / 8;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,ImportKey,The following statement contains a magic number: const uint SHA512_BLOCK_SIZE_IN_BYTES = 1024 / 8;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,ImportKey,The following statement contains a magic number: const uint SHA512_DIGEST_SIZE_IN_BYTES = 512 / 8;
Magic Number,Microsoft.AspNetCore.DataProtection.SP800_108,Win8SP800_108_CTR_HMACSHA512Provider,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\SP800_108\Win8SP800_108_CTR_HMACSHA512Provider.cs,ImportKey,The following statement contains a magic number: const uint SHA512_DIGEST_SIZE_IN_BYTES = 512 / 8;
Magic Number,Microsoft.AspNetCore.DataProtection.XmlEncryption,XmlEncryptionExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\XmlEncryptionExtensions.cs,ToSecret,The following statement contains a magic number: const int DEFAULT_BUFFER_SIZE = 16 * 1024;
Magic Number,Microsoft.AspNetCore.DataProtection.XmlEncryption,XmlEncryptionExtensions,C:\repos\aspnet_DataProtection\src\Microsoft.AspNetCore.DataProtection\XmlEncryption\XmlEncryptionExtensions.cs,ToSecret,The following statement contains a magic number: const int DEFAULT_BUFFER_SIZE = 16 * 1024;
