Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tavis,LinkExtensions,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkExtensions.cs,AsLinkHeader,Cyclomatic complexity of the method is 10
Complex Method,Tavis,LinkHeaderParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,ReadToken,Cyclomatic complexity of the method is 10
Long Statement,Tavis,Link,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\Link.cs,CreateParametersFromQueryString,The length of the statement  "            var reg = new Regex(@"([-A-Za-z0-9._~]*)=([^&]*)&?");		// Unreserved characters: http://tools.ietf.org/html/rfc3986#section-2.3 " is 127.
Long Statement,Tavis,LinkHeaderParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,Error,The length of the statement  "            throw new FormatException(string.Format("Invalid HTTP Web Link. {0} in '{1}' (around pos {2})."' msg' InputString' InputPos)); " is 126.
Complex Conditional,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The conditional expression  "value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])"  is complex.
Empty Catch Block,Tavis,LinkHeaderParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,Parse,The method has an empty catch block.
Empty Catch Block,Tavis,LinkHeaderParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,ParseLink,The method has an empty catch block.
Magic Number,Tavis,HttpHeaderExtensions,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\HttpHeaderExtensions.cs,AddLinkHeaders,The following statement contains a magic number: headerValue = headerValue.Substring(0' headerValue.Length - 2);
Magic Number,Tavis,Link,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\Link.cs,CreateParametersFromQueryString,The following statement contains a magic number: foreach (Match m in reg.Matches(Target.Query))              {                  string key = m.Groups[1].Value.ToLowerInvariant();                  string value = m.Groups[2].Value;                  SetParameter(key'value);              }
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,Parse,The following statement contains a magic number: string[] parts = header.Split(new char[] { '\'' }' StringSplitOptions.None).Take(3).ToArray();
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,Parse,The following statement contains a magic number: string charset = (parts.Length == 3 ? parts[0] : null);
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,Parse,The following statement contains a magic number: string language = (parts.Length == 3 ? parts[1] : null);
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      result[length++] = (byte)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]));                        i += 2;                  }                  else if (value[i] == '+')                  {                      result[length++] = (byte)' ';                  }                  else                  {                      int c = value[i];                        if (c > byte.MaxValue)                          throw new InvalidOperationException("URI contained unexpected character");                        result[length++] = (byte)c;                  }              }
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      result[length++] = (byte)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]));                        i += 2;                  }                  else if (value[i] == '+')                  {                      result[length++] = (byte)' ';                  }                  else                  {                      int c = value[i];                        if (c > byte.MaxValue)                          throw new InvalidOperationException("URI contained unexpected character");                        result[length++] = (byte)c;                  }              }
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      result[length++] = (byte)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]));                        i += 2;                  }                  else if (value[i] == '+')                  {                      result[length++] = (byte)' ';                  }                  else                  {                      int c = value[i];                        if (c > byte.MaxValue)                          throw new InvalidOperationException("URI contained unexpected character");                        result[length++] = (byte)c;                  }              }
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      result[length++] = (byte)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]));                        i += 2;                  }                  else if (value[i] == '+')                  {                      result[length++] = (byte)' ';                  }                  else                  {                      int c = value[i];                        if (c > byte.MaxValue)                          throw new InvalidOperationException("URI contained unexpected character");                        result[length++] = (byte)c;                  }              }
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      result[length++] = (byte)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]));                        i += 2;                  }                  else if (value[i] == '+')                  {                      result[length++] = (byte)' ';                  }                  else                  {                      int c = value[i];                        if (c > byte.MaxValue)                          throw new InvalidOperationException("URI contained unexpected character");                        result[length++] = (byte)c;                  }              }
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,HexToInt,The following statement contains a magic number: switch (value)              {                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return value - '0';                    case 'a':                  case 'b':                  case 'c':                  case 'd':                  case 'e':                  case 'f':                      return (value - 'a') + 10;                    case 'A':                  case 'B':                  case 'C':                  case 'D':                  case 'E':                  case 'F':                      return (value - 'A') + 10;                    default:                      throw new ArgumentOutOfRangeException("value");              }
Magic Number,Tavis,HeaderEncodingParser,C:\repos\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,HexToInt,The following statement contains a magic number: switch (value)              {                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return value - '0';                    case 'a':                  case 'b':                  case 'c':                  case 'd':                  case 'e':                  case 'f':                      return (value - 'a') + 10;                    case 'A':                  case 'B':                  case 'C':                  case 'D':                  case 'E':                  case 'F':                      return (value - 'A') + 10;                    default:                      throw new ArgumentOutOfRangeException("value");              }
