Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tavis,LinkExtensions,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkExtensions.cs,AsLinkHeader,Cyclomatic complexity of the method is 10
Complex Method,Tavis,LinkHeaderParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,ParseLink,Cyclomatic complexity of the method is 8
Complex Method,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,HexToInt,Cyclomatic complexity of the method is 24
Complex Method,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,IsHex,Cyclomatic complexity of the method is 23
Long Statement,Tavis,HttpClientExtensions,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\HttpClientExtensions.cs,EmbedLinkAsync,The length of the statement  "				return link.HandleResponseAsync (t.Result).ContinueWith (t2 => embedTarget.EmbedContent (link' t2.Result.Content).ContinueWith (t4 => t2.Result)).Unwrap (); " is 156.
Long Statement,Tavis,Link,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\Link.cs,AddParametersAsTemplate,The length of the statement  "	var queryTokens = String.Join ("'"' _Parameters.Keys.Where (k => !Target.OriginalString.Contains ("{" + k + "}")).Select (p => p).ToArray ()); " is 142.
Long Statement,Tavis,LinkHeaderParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,ReadRelType,The length of the statement  "	while (Char.IsLetterOrDigit (InputString [InputPos]) || InputString [InputPos] == '.' || InputString [InputPos] == '-') { " is 121.
Long Statement,Tavis,LinkHeaderParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,Error,The length of the statement  "	throw new FormatException (string.Format ("Invalid HTTP Web Link. {0} in '{1}' (around pos {2})."' msg' InputString' InputPos)); " is 128.
Complex Conditional,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The conditional expression  "value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])"  is complex.
Empty Catch Block,Tavis,LinkHeaderParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,Parse,The method has an empty catch block.
Empty Catch Block,Tavis,LinkHeaderParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,ParseLink,The method has an empty catch block.
Magic Number,Tavis,HttpHeaderExtensions,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\HttpHeaderExtensions.cs,AddLinkHeaders,The following statement contains a magic number: headerValue = headerValue.Substring (0' headerValue.Length - 2);  
Magic Number,Tavis,Link,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\Link.cs,CreateParametersFromQueryString,The following statement contains a magic number: foreach (Match m in reg.Matches (Target.Query)) {  	string key = m.Groups [1].Value.ToLowerInvariant ();  	string value = m.Groups [2].Value;  	SetParameter (key' value);  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  		result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  		i += 2;  	} else if (value [i] == '+') {  		result [length++] = (byte)' ';  	} else {  		int c = value [i];  		if (c > byte.MaxValue)  			throw new InvalidOperationException ("URI contained unexpected character");  		result [length++] = (byte)c;  	}  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  		result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  		i += 2;  	} else if (value [i] == '+') {  		result [length++] = (byte)' ';  	} else {  		int c = value [i];  		if (c > byte.MaxValue)  			throw new InvalidOperationException ("URI contained unexpected character");  		result [length++] = (byte)c;  	}  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  		result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  		i += 2;  	} else if (value [i] == '+') {  		result [length++] = (byte)' ';  	} else {  		int c = value [i];  		if (c > byte.MaxValue)  			throw new InvalidOperationException ("URI contained unexpected character");  		result [length++] = (byte)c;  	}  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  		result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  		i += 2;  	} else if (value [i] == '+') {  		result [length++] = (byte)' ';  	} else {  		int c = value [i];  		if (c > byte.MaxValue)  			throw new InvalidOperationException ("URI contained unexpected character");  		result [length++] = (byte)c;  	}  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++) {  	if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  		result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  		i += 2;  	} else if (value [i] == '+') {  		result [length++] = (byte)' ';  	} else {  		int c = value [i];  		if (c > byte.MaxValue)  			throw new InvalidOperationException ("URI contained unexpected character");  		result [length++] = (byte)c;  	}  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  	result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  	i += 2;  } else if (value [i] == '+') {  	result [length++] = (byte)' ';  } else {  	int c = value [i];  	if (c > byte.MaxValue)  		throw new InvalidOperationException ("URI contained unexpected character");  	result [length++] = (byte)c;  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  	result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  	i += 2;  } else if (value [i] == '+') {  	result [length++] = (byte)' ';  } else {  	int c = value [i];  	if (c > byte.MaxValue)  		throw new InvalidOperationException ("URI contained unexpected character");  	result [length++] = (byte)c;  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  	result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  	i += 2;  } else if (value [i] == '+') {  	result [length++] = (byte)' ';  } else {  	int c = value [i];  	if (c > byte.MaxValue)  		throw new InvalidOperationException ("URI contained unexpected character");  	result [length++] = (byte)c;  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  	result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  	i += 2;  } else if (value [i] == '+') {  	result [length++] = (byte)' ';  } else {  	int c = value [i];  	if (c > byte.MaxValue)  		throw new InvalidOperationException ("URI contained unexpected character");  	result [length++] = (byte)c;  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: if (value [i] == '%' && i < value.Length - 2 && IsHex (value [i + 1]) && IsHex (value [i + 2])) {  	result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  	i += 2;  } else if (value [i] == '+') {  	result [length++] = (byte)' ';  } else {  	int c = value [i];  	if (c > byte.MaxValue)  		throw new InvalidOperationException ("URI contained unexpected character");  	result [length++] = (byte)c;  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: result [length++] = (byte)(HexToInt (value [i + 1]) * 16 + HexToInt (value [i + 2]));  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: i += 2;  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,HexToInt,The following statement contains a magic number: switch (value) {  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return value - '0';  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  	return (value - 'a') + 10;  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  	return (value - 'A') + 10;  default:  	throw new ArgumentOutOfRangeException ("value");  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,HexToInt,The following statement contains a magic number: switch (value) {  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	return value - '0';  case 'a':  case 'b':  case 'c':  case 'd':  case 'e':  case 'f':  	return (value - 'a') + 10;  case 'A':  case 'B':  case 'C':  case 'D':  case 'E':  case 'F':  	return (value - 'A') + 10;  default:  	throw new ArgumentOutOfRangeException ("value");  }  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,HexToInt,The following statement contains a magic number: return (value - 'a') + 10;  
Magic Number,Tavis,HeaderEncodingParser,F:\newReposMay17\FamilySearch_gedcomx-csharp\Link\src\Link\LinkHeaderParser.cs,HexToInt,The following statement contains a magic number: return (value - 'A') + 10;  
