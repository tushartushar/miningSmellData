Implementation smell,Namespace,Class,File,Method,Description
Long Method,Gedcomx.Date,GedcomxDateDuration,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateDuration.cs,ParseNormalizedDuration,The method has 150 lines of code.
Long Method,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,The method has 111 lines of code.
Long Method,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The method has 117 lines of code.
Long Method,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The method has 105 lines of code.
Complex Method,Gedcomx.Date,GedcomxDateRange,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateRange.cs,GedcomxDateRange,Cyclomatic complexity of the method is 9
Complex Method,Gedcomx.Date,GedcomxDateRecurring,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateRecurring.cs,GedcomxDateRecurring,Cyclomatic complexity of the method is 9
Complex Method,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,Cyclomatic complexity of the method is 22
Complex Method,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,Cyclomatic complexity of the method is 23
Complex Method,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTimezone,Cyclomatic complexity of the method is 13
Complex Method,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,GetDuration,Cyclomatic complexity of the method is 21
Complex Method,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,Cyclomatic complexity of the method is 23
Complex Method,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,MultiplyDuration,Cyclomatic complexity of the method is 10
Complex Method,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,ZipDates,Cyclomatic complexity of the method is 11
Long Statement,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,The length of the statement  "                throw new GedcomxDateException("Invalid Date: There are only " + daysInMonth + " days in Month " + month + " year " + year); " is 124.
Long Statement,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The length of the statement  "                endString.Append(startDate.TzHours >= 0 ? "+" : "-").Append(String.Format("{0:00}"' Math.Abs(startDate.TzHours.Value))); " is 120.
Magic Number,Gedcomx.Date,GedcomxDateRange,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateRange.cs,GedcomxDateRange,The following statement contains a magic number: if (parts.Length < 1 || parts.Length > 2)              {                  throw new GedcomxDateException("Invalid Range: One or two parts are required");              }
Magic Number,Gedcomx.Date,GedcomxDateRange,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateRange.cs,GedcomxDateRange,The following statement contains a magic number: if (parts.Length == 2)              {                  if (parts[1][0] == 'P')                  {                      if (start == null)                      {                          throw new GedcomxDateException("Invalid Range: A range may not end with a duration if missing a start date");                      }                      try                      {                          duration = new GedcomxDateDuration(parts[1]);                      }                      catch (GedcomxDateException e)                      {                          throw new GedcomxDateException(e.Message + " in Range End Duration");                      }                      // Use the duration to calculate the end date                      end = GedcomxDateUtil.AddDuration(start' duration);                  }                  else                  {                      try                      {                          end = new GedcomxDateSimple(parts[1]);                      }                      catch (GedcomxDateException e)                      {                          throw new GedcomxDateException(e.Message + " in Range End Date");                      }                      if (start != null)                      {                          duration = GedcomxDateUtil.GetDuration(start' end);                      }                  }              }
Magic Number,Gedcomx.Date,GedcomxDateRecurring,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateRecurring.cs,GedcomxDateRecurring,The following statement contains a magic number: if (date == null || date.Length < 3)              {                  throw new GedcomxDateException("Invalid Recurring Date");              }
Magic Number,Gedcomx.Date,GedcomxDateRecurring,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateRecurring.cs,GedcomxDateRecurring,The following statement contains a magic number: if (parts.Length != 3)              {                  throw new GedcomxDateException("Invalid Recurring Date: Must contain 3 parts");              }
Magic Number,Gedcomx.Date,GedcomxDateRecurring,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateRecurring.cs,GedcomxDateRecurring,The following statement contains a magic number: if (parts[1].Equals("") || parts[2].Equals(""))              {                  throw new GedcomxDateException("Invalid Recurring Date: Range must have a start and an end");              }
Magic Number,Gedcomx.Date,GedcomxDateRecurring,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateRecurring.cs,GedcomxDateRecurring,The following statement contains a magic number: try              {                  range = new GedcomxDateRange(parts[1] + "/" + parts[2]);              }              catch (GedcomxDateException e)              {                  throw new GedcomxDateException(e.Message + " in Recurring Range");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,The following statement contains a magic number: if (date.Length < 5)              {                  throw new GedcomxDateException("Invalid Date: Must have at least [+-]YYYY");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  if (!Char.IsDigit(date[offset]))                  {                      throw new GedcomxDateException("Invalid Date: Malformed Year");                  }                  num += date[offset++];              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,The following statement contains a magic number: if (end - offset < 3)              {                  throw new GedcomxDateException("Invalid Date: Month must be 2 digits");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  if (!Char.IsDigit(date[offset]))                  {                      throw new GedcomxDateException("Invalid Date: Malformed Month");                  }                  num += date[offset++];              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,The following statement contains a magic number: if (month < 1 || month > 12)              {                  throw new GedcomxDateException("Invalid Date: Month must be between 1 and 12");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,The following statement contains a magic number: if (end - offset < 3)              {                  throw new GedcomxDateException("Invalid Date: Day must be 2 digits");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseDate,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  if (!Char.IsDigit(date[offset]))                  {                      throw new GedcomxDateException("Invalid Date: Malformed Day");                  }                  num += date[offset++];              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: tzHours = Convert.ToInt32(offsetInMillis / 3600000);
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: tzMinutes = Convert.ToInt32((offsetInMillis / 60000) % 60);
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: tzMinutes = Convert.ToInt32((offsetInMillis / 60000) % 60);
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: if (end < 2)              {                  throw new GedcomxDateException("Invalid Date: Hours must be 2 digits");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  if (!Char.IsDigit(date[offset]))                  {                      throw new GedcomxDateException("Invalid Date: Malformed Hours");                  }                  num += date[offset++];              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: if (hours > 24)              {                  throw new GedcomxDateException("Invalid Date: Hours must be between 0 and 24");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: if (hours == 24)              {                  flag24 = true;              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: if (end - offset < 3)              {                  throw new GedcomxDateException("Invalid Date: Minutes must be 2 digits");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  if (!Char.IsDigit(date[offset]))                  {                      throw new GedcomxDateException("Invalid Date: Malformed Minutes");                  }                  num += date[offset++];              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: if (minutes > 59)              {                  throw new GedcomxDateException("Invalid Date: Minutes must be between 0 and 59");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: if (end - offset < 3)              {                  throw new GedcomxDateException("Invalid Date: Seconds must be 2 digits");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  if (!Char.IsDigit(date[offset]))                  {                      throw new GedcomxDateException("Invalid Date: Malformed Seconds");                  }                  num += date[offset++];              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTime,The following statement contains a magic number: if (seconds > 59)              {                  throw new GedcomxDateException("Invalid Date: Seconds must be between 0 and 59");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTimezone,The following statement contains a magic number: if (end - offset < 3)              {                  throw new GedcomxDateException("Invalid Date: Malformed Timezone - tzHours must be [+-] followed by 2 digits");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTimezone,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  if (!Char.IsDigit(date[offset]))                  {                      throw new GedcomxDateException("Invalid Date: Malformed tzHours");                  }                  num += date[offset++];              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTimezone,The following statement contains a magic number: if (end - offset < 3)              {                  throw new GedcomxDateException("Invalid Date: tzSecond must be 2 digits");              }
Magic Number,Gedcomx.Date,GedcomxDateSimple,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateSimple.cs,ParseTimezone,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  if (!Char.IsDigit(date[offset]))                  {                      throw new GedcomxDateException("Invalid Date: Malformed tzMinutes");                  }                  num += date[offset++];              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,GetDuration,The following statement contains a magic number: if (end.seconds != null)              {                  while (end.seconds - start.seconds < 0)                  {                      end.minutes -= 1;                      end.seconds += 60;                  }                  if (end.seconds - start.seconds > 0)                  {                      hasTime = true;                      duration.Insert(0' 'S').Insert(0' String.Format("{0:00}"' end.seconds - start.seconds));                  }              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,GetDuration,The following statement contains a magic number: if (end.minutes != null)              {                  while (end.minutes - start.minutes < 0)                  {                      end.hours -= 1;                      end.minutes += 60;                  }                  if (end.minutes - start.minutes > 0)                  {                      hasTime = true;                      duration.Insert(0' 'M').Insert(0' String.Format("{0:00}"' end.minutes - start.minutes));                  }              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,GetDuration,The following statement contains a magic number: if (end.hours != null)              {                  while (end.hours - start.hours < 0)                  {                      end.day -= 1;                      end.hours += 24;                  }                  if (end.hours - start.hours > 0)                  {                      hasTime = true;                      duration.Insert(0' 'H').Insert(0' String.Format("{0:00}"' end.hours - start.hours));                  }              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,GetDuration,The following statement contains a magic number: if (end.day != null)              {                  while (end.day - start.day < 0)                  {                      end.day += DateTime.DaysInMonth(end.year.Value' end.month.Value);                      end.month -= 1;                      if (end.month < 1)                      {                          end.year -= 1;                          end.month += 12;                      }                  }                  if (end.day - start.day > 0)                  {                      duration.Insert(0' 'D').Insert(0' String.Format("{0:00}"' end.day - start.day));                  }              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,GetDuration,The following statement contains a magic number: if (end.month != null)              {                  while (end.month - start.month < 0)                  {                      end.year -= 1;                      end.month += 12;                  }                  if (end.month - start.month > 0)                  {                      duration.Insert(0' 'M').Insert(0' String.Format("{0:00}"' end.month - start.month));                  }              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.seconds != null)              {                  if (duration.Seconds != null)                  {                      end.seconds += duration.Seconds;                  }                  while (end.seconds >= 60)                  {                      end.seconds -= 60;                      end.minutes += 1;                  }                  endString.Insert(0' String.Format("{0:00}"' end.seconds)).Insert(0' ":");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.seconds != null)              {                  if (duration.Seconds != null)                  {                      end.seconds += duration.Seconds;                  }                  while (end.seconds >= 60)                  {                      end.seconds -= 60;                      end.minutes += 1;                  }                  endString.Insert(0' String.Format("{0:00}"' end.seconds)).Insert(0' ":");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.minutes != null)              {                  if (duration.Minutes != null)                  {                      end.minutes += duration.Minutes;                  }                  while (end.minutes >= 60)                  {                      end.minutes -= 60;                      end.hours += 1;                  }                  endString.Insert(0' String.Format("{0:00}"' end.minutes)).Insert(0' ":");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.minutes != null)              {                  if (duration.Minutes != null)                  {                      end.minutes += duration.Minutes;                  }                  while (end.minutes >= 60)                  {                      end.minutes -= 60;                      end.hours += 1;                  }                  endString.Insert(0' String.Format("{0:00}"' end.minutes)).Insert(0' ":");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.hours != null)              {                  if (duration.Hours != null)                  {                      end.hours += duration.Hours;                  }                  while (end.hours >= 24)                  {                      end.hours -= 24;                      end.day += 1;                  }                  endString.Insert(0' String.Format("{0:00}"' end.hours)).Insert(0' "T");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.hours != null)              {                  if (duration.Hours != null)                  {                      end.hours += duration.Hours;                  }                  while (end.hours >= 24)                  {                      end.hours -= 24;                      end.day += 1;                  }                  endString.Insert(0' String.Format("{0:00}"' end.hours)).Insert(0' "T");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.day != null)              {                  if (duration.Days != null)                  {                      end.day += duration.Days;                  }                  while (end.day >= DateTime.DaysInMonth(end.year.Value' end.month.Value))                  {                      end.month += 1;                      if (end.month > 12)                      {                          end.month -= 12;                          end.year += 1;                      }                      end.day -= DateTime.DaysInMonth(end.year.Value' end.month.Value);                  }                  endString.Insert(0' String.Format("{0:00}"' end.day)).Insert(0' "-");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.day != null)              {                  if (duration.Days != null)                  {                      end.day += duration.Days;                  }                  while (end.day >= DateTime.DaysInMonth(end.year.Value' end.month.Value))                  {                      end.month += 1;                      if (end.month > 12)                      {                          end.month -= 12;                          end.year += 1;                      }                      end.day -= DateTime.DaysInMonth(end.year.Value' end.month.Value);                  }                  endString.Insert(0' String.Format("{0:00}"' end.day)).Insert(0' "-");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.month != null)              {                  if (duration.Months != null)                  {                      end.month += duration.Months;                  }                  while (end.month > 12)                  {                      end.month -= 12;                      end.year += 1;                  }                  endString.Insert(0' String.Format("{0:00}"' end.month)).Insert(0' "-");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.month != null)              {                  if (duration.Months != null)                  {                      end.month += duration.Months;                  }                  while (end.month > 12)                  {                      end.month -= 12;                      end.year += 1;                  }                  endString.Insert(0' String.Format("{0:00}"' end.month)).Insert(0' "-");              }
Magic Number,Gedcomx.Date,GedcomxDateUtil,C:\repos\FamilySearch_gedcomx-csharp\GEDCOM X Date\GedcomxDateUtil.cs,AddDuration,The following statement contains a magic number: if (end.year > 9999)              {                  throw new GedcomxDateException("New date out of range");              }
