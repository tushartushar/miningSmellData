Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,Sync,Cyclomatic complexity of the method is 14
Complex Method,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,UpdateStatus,Cyclomatic complexity of the method is 31
Complex Method,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,Download,Cyclomatic complexity of the method is 15
Long Statement,AmazonSetupUploader,Program,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\Program.cs,Main,The length of the statement  "	var fs = new S3FolderSynchronizer ("0QEGQJ1M8RF3X413SY02"' "rh/NhdUpGlobZH+NgfuBzMLbOSf57+tHUwVKieT+"' "US Standard"' "www.mertsakarya.com"); " is 141.
Long Statement,AmazonSetupUploader,S3Status,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,ToString,The length of the statement  "	//return String.Format("BucketName {0}' LocalTotal {1}' CloudTotal {2}' MatchingFiles {3}' NotProcessedFiles {4}' Uploading {5}' UploadingTotal {6}' UploadingException {7}' Downloading {8}' DownloadingTotal {9}' DownloadingException {10}"' BucketName' LocalTotal' CloudTotal' MatchingFiles' NotProcessedFiles' Uploading' UploadingTotal' UploadingException' Downloading' DownloadingTotal' DownloadingException); " is 410.
Long Statement,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,Upload,The length of the statement  "				request.WithBucketName (_bucketName).WithCannedACL (S3CannedACL.PublicRead).WithMetaData (metadata).WithKey (file.S3Path).InputStream = fileStream; " is 147.
Empty Catch Block,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,Download,The method has an empty catch block.
Magic Number,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,Download,The following statement contains a magic number: using (var client = CreateAmazonS3Client ()) {  	file.Action = ProcessAction.DownloadingException;  	if (client == null)  		return;  	try {  		var request = new GetObjectRequest ();  		request.WithBucketName (_bucketName).WithKey (file.S3Path);  		using (var response = client.GetObject (request)) {  			var fileName = "";  			if (response.Metadata != null && response.Metadata.Count > 0) {  				var localPath = response.Metadata.Get ("x-amz-meta-localpath");  				if (String.IsNullOrWhiteSpace (localPath))  					return;  				localPath = HttpUtility.UrlDecode (localPath);  				if (localPath != null) {  					var localPathArr = localPath.Split ('\\');  					var rootDirectory = localFolderName;  					for (var i = 1; i < localPathArr.Length - 1; i++) {  						rootDirectory = Path.Combine (rootDirectory' localPathArr [i]);  						if (!Directory.Exists (rootDirectory))  							Directory.CreateDirectory (rootDirectory);  					}  					fileName = Path.Combine (rootDirectory' localPathArr [localPathArr.Length - 1]);  				}  			}  			if (String.IsNullOrWhiteSpace (fileName))  				return;  			using (var fileStream = new FileStream (fileName' FileMode.Create)) {  				using (var stream = response.ResponseStream) {  					var data = new byte[32768];  					int bytesRead;  					do {  						bytesRead = stream.Read (data' 0' data.Length);  						fileStream.Write (data' 0' bytesRead);  					}  					while (bytesRead > 0);  					fileStream.Flush ();  					file.Action = ProcessAction.DownloadingDone;  				}  			}  		}  	}  	catch (Exception) {  	}  }  
Magic Number,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,Download,The following statement contains a magic number: try {  	var request = new GetObjectRequest ();  	request.WithBucketName (_bucketName).WithKey (file.S3Path);  	using (var response = client.GetObject (request)) {  		var fileName = "";  		if (response.Metadata != null && response.Metadata.Count > 0) {  			var localPath = response.Metadata.Get ("x-amz-meta-localpath");  			if (String.IsNullOrWhiteSpace (localPath))  				return;  			localPath = HttpUtility.UrlDecode (localPath);  			if (localPath != null) {  				var localPathArr = localPath.Split ('\\');  				var rootDirectory = localFolderName;  				for (var i = 1; i < localPathArr.Length - 1; i++) {  					rootDirectory = Path.Combine (rootDirectory' localPathArr [i]);  					if (!Directory.Exists (rootDirectory))  						Directory.CreateDirectory (rootDirectory);  				}  				fileName = Path.Combine (rootDirectory' localPathArr [localPathArr.Length - 1]);  			}  		}  		if (String.IsNullOrWhiteSpace (fileName))  			return;  		using (var fileStream = new FileStream (fileName' FileMode.Create)) {  			using (var stream = response.ResponseStream) {  				var data = new byte[32768];  				int bytesRead;  				do {  					bytesRead = stream.Read (data' 0' data.Length);  					fileStream.Write (data' 0' bytesRead);  				}  				while (bytesRead > 0);  				fileStream.Flush ();  				file.Action = ProcessAction.DownloadingDone;  			}  		}  	}  }  catch (Exception) {  }  
Magic Number,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,Download,The following statement contains a magic number: using (var response = client.GetObject (request)) {  	var fileName = "";  	if (response.Metadata != null && response.Metadata.Count > 0) {  		var localPath = response.Metadata.Get ("x-amz-meta-localpath");  		if (String.IsNullOrWhiteSpace (localPath))  			return;  		localPath = HttpUtility.UrlDecode (localPath);  		if (localPath != null) {  			var localPathArr = localPath.Split ('\\');  			var rootDirectory = localFolderName;  			for (var i = 1; i < localPathArr.Length - 1; i++) {  				rootDirectory = Path.Combine (rootDirectory' localPathArr [i]);  				if (!Directory.Exists (rootDirectory))  					Directory.CreateDirectory (rootDirectory);  			}  			fileName = Path.Combine (rootDirectory' localPathArr [localPathArr.Length - 1]);  		}  	}  	if (String.IsNullOrWhiteSpace (fileName))  		return;  	using (var fileStream = new FileStream (fileName' FileMode.Create)) {  		using (var stream = response.ResponseStream) {  			var data = new byte[32768];  			int bytesRead;  			do {  				bytesRead = stream.Read (data' 0' data.Length);  				fileStream.Write (data' 0' bytesRead);  			}  			while (bytesRead > 0);  			fileStream.Flush ();  			file.Action = ProcessAction.DownloadingDone;  		}  	}  }  
Magic Number,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,Download,The following statement contains a magic number: using (var fileStream = new FileStream (fileName' FileMode.Create)) {  	using (var stream = response.ResponseStream) {  		var data = new byte[32768];  		int bytesRead;  		do {  			bytesRead = stream.Read (data' 0' data.Length);  			fileStream.Write (data' 0' bytesRead);  		}  		while (bytesRead > 0);  		fileStream.Flush ();  		file.Action = ProcessAction.DownloadingDone;  	}  }  
Magic Number,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,Download,The following statement contains a magic number: using (var stream = response.ResponseStream) {  	var data = new byte[32768];  	int bytesRead;  	do {  		bytesRead = stream.Read (data' 0' data.Length);  		fileStream.Write (data' 0' bytesRead);  	}  	while (bytesRead > 0);  	fileStream.Flush ();  	file.Action = ProcessAction.DownloadingDone;  }  
Missing Default,AmazonSetupUploader,S3FolderSynchronizer,C:\repos\mertsakarya_MS.Youtube.Playlist.Downloader\AmazonSetupUploader\S3FolderSynchronizer.cs,UpdateStatus,The following switch statement is missing a default case: switch (file.Value.Action) {  case ProcessAction.Match:  	matchingFiles++;  	break;  case ProcessAction.Upload:  	uploadingTotal++;  	break;  case ProcessAction.Download:  	downloadingTotal++;  	break;  case ProcessAction.UploadingDone:  	uploadingTotal++;  	uploading++;  	break;  case ProcessAction.UploadingException:  	uploading++;  	uploadingTotal++;  	uploadingException++;  	break;  case ProcessAction.DownloadingDone:  	downloadingTotal++;  	downloading++;  	break;  case ProcessAction.DownloadingException:  	downloading++;  	downloadingTotal++;  	downloadingException++;  	break;  case ProcessAction.Empty:  	notProcessedFiles++;  	break;  }  
