Implementation smell,Namespace,Class,File,Method,Description
Long Method,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,Run,The method has 118 lines of code.
Long Method,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The method has 123 lines of code.
Long Method,XenAdmin.Actions,SystemStatusAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SystemStatusAction.cs,Run,The method has 110 lines of code.
Long Method,XenAdmin.Actions,UploadSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\UploadSupplementalPackAction.cs,UploadSupplementalPack,The method has 146 lines of code.
Long Method,XenAdmin.Actions,ExportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ExportVmAction.cs,Run,The method has 135 lines of code.
Long Method,XenAdmin.Actions,ImportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ImportVmAction.cs,Run,The method has 121 lines of code.
Long Method,XenAdmin.Actions,ZipStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ZipStatusReportAction.cs,Run,The method has 113 lines of code.
Long Method,XenAdmin.Actions,PerfmonDefinitionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Perfmon\PerfmonDefinitionAction.cs,Run,The method has 129 lines of code.
Long Method,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The method has 116 lines of code.
Long Method,XenAdmin.Actions,SrCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCreateAction.cs,Run,The method has 109 lines of code.
Long Method,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The method has 143 lines of code.
Long Method,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ConnectWorkerThread,The method has 199 lines of code.
Long Method,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionResult,The method has 126 lines of code.
Long Method,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,SaveChanges,The method has 179 lines of code.
Long Method,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The method has 142 lines of code.
Long Method,XenAPI,Relation,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Relation.cs,GetRelations,The method has 103 lines of code.
Long Method,XenAPI,vm_operations_helper,C:\repos\xenserver_xenadmin\XenModel\XenAPI\vm_operations.cs,ToString,The method has 101 lines of code.
Long Method,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The method has 129 lines of code.
Long Method,XenAdmin.XenSearch,PropertyAccessors,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Common.cs,PropertyAccessors,The method has 240 lines of code.
Complex Method,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,Run,Cyclomatic complexity of the method is 13
Complex Method,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,Cyclomatic complexity of the method is 11
Complex Method,XenAdmin.Actions,SystemStatusAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SystemStatusAction.cs,Run,Cyclomatic complexity of the method is 12
Complex Method,XenAdmin.Actions,MultipleActionLauncher,C:\repos\xenserver_xenadmin\XenModel\Actions\MultipleActionLauncher.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Actions,PoolAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\PoolAction.cs,FixCpus,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Actions,DownloadUpdatesXmlAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadUpdatesXmlAction.cs,GetXenServerVersions,Cyclomatic complexity of the method is 13
Complex Method,XenAdmin.Actions,ImportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ImportVmAction.cs,Run,Cyclomatic complexity of the method is 24
Complex Method,XenAdmin.Actions,ZipStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ZipStatusReportAction.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,WaitForslavesToRecover,Cyclomatic complexity of the method is 9
Complex Method,XenAdmin.Actions,ChangeNetworkingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\ChangeNetworkingAction.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,XenAdmin.Actions,PerfmonDefinitionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Perfmon\PerfmonDefinitionAction.cs,Run,Cyclomatic complexity of the method is 15
Complex Method,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,Cyclomatic complexity of the method is 16
Complex Method,XenAdmin.Actions.DR,GetMetadataVDIsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\GetMetadataVDIsAction.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Actions.DR,ShutdownAndDestroyVMsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\ShutdownAndDestroyVMsAction.cs,DestroyVM,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Actions.HostActions,VMsWhichCanBeMigratedAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\VMsWhichCanBeMigratedAction.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,CanJoinPool,Cyclomatic complexity of the method is 26
Complex Method,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,CompatibleCPUs,Cyclomatic complexity of the method is 11
Complex Method,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,HomogeneousSuppPacksDiffering,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,Cyclomatic complexity of the method is 24
Complex Method,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddCdDrive,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddDisks,Cyclomatic complexity of the method is 10
Complex Method,XenAdmin.Actions.VMActions,VMDestroyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMDestroyAction.cs,DestroyVM,Cyclomatic complexity of the method is 10
Complex Method,XenAdmin.Actions.VMActions,VMMoveAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMMoveAction.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Model,DockerContainers,C:\repos\xenserver_xenadmin\XenModel\DockerContainers.cs,GetContainersFromOtherConfig,Cyclomatic complexity of the method is 12
Complex Method,XenAdmin.Model,Folders,C:\repos\xenserver_xenadmin\XenModel\Folders.cs,Descendants,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ConnectWorkerThread,Cyclomatic complexity of the method is 11
Complex Method,XenAPI,VMSS,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VMSS.cs,GetDaysFromDictionary,Cyclomatic complexity of the method is 9
Complex Method,XenAPI,VM_Docker_Info,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_Docker_Info.cs,VM_Docker_Info,Cyclomatic complexity of the method is 25
Complex Method,XenAPI,VM_Docker_Version,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_Docker_Version.cs,VM_Docker_Version,Cyclomatic complexity of the method is 9
Complex Method,XenAPI,SuppPack,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,SuppPack,Cyclomatic complexity of the method is 8
Complex Method,XenAPI,Pool_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_patch.cs,GetAllThatApply,Cyclomatic complexity of the method is 12
Complex Method,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,GetMultiPathStatusLunPerVDI,Cyclomatic complexity of the method is 15
Complex Method,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,GetAppliesToNames,Cyclomatic complexity of the method is 8
Complex Method,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,TemplateType,Cyclomatic complexity of the method is 22
Complex Method,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetOSName,Cyclomatic complexity of the method is 8
Complex Method,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,AnyDiskFastClonable,Cyclomatic complexity of the method is 8
Complex Method,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,BuildUri,Cyclomatic complexity of the method is 8
Complex Method,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.ServerDBs,StatusReportXmlDocReader,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\StatusReportXmlDocReader.cs,PopulateDbFromXml,Cyclomatic complexity of the method is 12
Complex Method,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.XenSearch,Group,C:\repos\xenserver_xenadmin\XenModel\XenSearch\GroupAlg.cs,Compare,Cyclomatic complexity of the method is 10
Complex Method,XenAdmin.XenSearch,NodeGroup,C:\repos\xenserver_xenadmin\XenModel\XenSearch\GroupAlg.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.XenSearch,MetricUpdater,C:\repos\xenserver_xenadmin\XenModel\XenSearch\MetricUpdater.cs,AnyNewObjects,Cyclomatic complexity of the method is 8
Long Parameter List,XenAdmin.Actions,ActionBase,C:\repos\xenserver_xenadmin\XenModel\Actions\Action.cs,ActionBase,The method has 5 parameters. Parameters: title' description' suppressHistory' completeImmediately' error
Long Parameter List,XenAdmin.Actions,HealthCheckAuthenticationAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\HealthCheckAuthenticationAction.cs,HealthCheckAuthenticationAction,The method has 9 parameters. Parameters: username' password' identityTokenDomainName' uploadGrantTokenDomainName' uploadTokenDomainName' diagnosticTokenDomainName' productKey' tokenExpiration' suppressHistory
Long Parameter List,XenAdmin.Actions,SaveHealthCheckSettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\SaveHealthCheckSettingsAction.cs,SaveHealthCheckSettingsAction,The method has 7 parameters. Parameters: pool' healthCheckSettings' authenticationToken' diagnosticToken' userName' passWord' suppressHistory
Long Parameter List,XenAdmin.Actions,TransferHealthCheckSettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\TransferHealthCheckSettingAction.cs,TransferHealthCheckSettingsAction,The method has 5 parameters. Parameters: pool' healthCheckSettings' username' password' suppressHistory
Long Parameter List,XenAdmin.Actions,TransferProxySettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\TransferProxySettingsAction.cs,TransferProxySettingsAction,The method has 10 parameters. Parameters: style' address' port' timeout' suppressHistory' bypassForServer' provideCredentials' username' password' proxyAuthMethod
Long Parameter List,XenAdmin.Actions,UploadServerStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\UploadServerStatusReportAction.cs,UploadServerStatusReportAction,The method has 5 parameters. Parameters: bundleToUpload' uploadToken' caseNumber' uploadDomainName' suppressHistory
Long Parameter List,XenAdmin.Actions,DockerContainerLifetimeAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DockerContainer\DockerContainerLifetimeAction.cs,DockerContainerLifetimeAction,The method has 5 parameters. Parameters: dockerContainer' title' startDescription' endDescription' action
Long Parameter List,XenAdmin.Actions,ExecuteContainerPluginAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DockerContainer\ExecuteContainerPluginAction.cs,ExecuteContainerPluginAction,The method has 6 parameters. Parameters: container' host' plugin' function' args' suppressHistory
Long Parameter List,XenAdmin.Actions,VMEnlightenmentAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DockerContainer\VMEnlightenmentAction.cs,VMEnlightenmentAction,The method has 5 parameters. Parameters: vm' action' title' description' suppressHistory
Long Parameter List,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,ApplyLicenseEditionAction,The method has 5 parameters. Parameters: xos' edition' licenseServerAddress' licenseServerPort' DoOnLicensingFailure
Long Parameter List,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,EvacuateHostAction,The method has 5 parameters. Parameters: host' newMaster' hostRecommendations' acceptNTolChanges' acceptNTolChangesOnEnable
Long Parameter List,XenAdmin.Actions,HostAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostAbstractAction.cs,HostAbstractAction,The method has 5 parameters. Parameters: connection' title' description' acceptNTolChanges' acceptNTolChangesOnEnable
Long Parameter List,XenAdmin.Actions,MultipleAction,C:\repos\xenserver_xenadmin\XenModel\Actions\MultipleAction.cs,MultipleAction,The method has 6 parameters. Parameters: connection' title' startDescription' endDescription' subActions' suppressHistory
Long Parameter List,XenAdmin.Actions,MultipleAction,C:\repos\xenserver_xenadmin\XenModel\Actions\MultipleAction.cs,MultipleAction,The method has 5 parameters. Parameters: connection' title' startDescription' endDescription' subActions
Long Parameter List,XenAdmin.Actions,MultipleAction,C:\repos\xenserver_xenadmin\XenModel\Actions\MultipleAction.cs,MultipleAction,The method has 7 parameters. Parameters: connection' title' startDescription' endDescription' subActions' suppressHistory' showSubActionsDetails
Long Parameter List,XenAdmin.Actions,MultipleAction,C:\repos\xenserver_xenadmin\XenModel\Actions\MultipleAction.cs,MultipleAction,The method has 8 parameters. Parameters: connection' title' startDescription' endDescription' subActions' suppressHistory' showSubActionsDetails' stopOnFirstException
Long Parameter List,XenAdmin.Actions,MultipleActionLauncher,C:\repos\xenserver_xenadmin\XenModel\Actions\MultipleActionLauncher.cs,MultipleActionLauncher,The method has 5 parameters. Parameters: actions' title' startDescription' endDescription' runActionInParallel
Long Parameter List,XenAdmin.Actions,ParallelAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ParallelAction.cs,ParallelAction,The method has 8 parameters. Parameters: connection' title' startDescription' endDescription' subActions' suppressHistory' showSubActionsDetails' maxNumberOfParallelActions
Long Parameter List,XenAdmin.Actions,ParallelAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ParallelAction.cs,ParallelAction,The method has 6 parameters. Parameters: connection' title' startDescription' endDescription' subActions' maxNumberOfParallelActions
Long Parameter List,XenAdmin.Actions,ParallelAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ParallelAction.cs,ParallelAction,The method has 7 parameters. Parameters: title' startDescription' endDescription' subActions' suppressHistory' showSubActionsDetails' maxNumberOfParallelActions
Long Parameter List,XenAdmin.Actions,ParallelAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ParallelAction.cs,ParallelAction,The method has 5 parameters. Parameters: title' startDescription' endDescription' subActions' maxNumberOfParallelActions
Long Parameter List,XenAdmin.Actions,AddHostToPoolAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\AddHostToPoolAction.cs,AddHostToPoolAction,The method has 5 parameters. Parameters: poolToJoin' joiningHost' getAdCredentials' acceptNTolChanges' doOnLicensingFailure
Long Parameter List,XenAdmin.Actions,CreatePoolAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\CreatePoolAction.cs,CreatePoolAction,The method has 7 parameters. Parameters: master' slaves' name' description' getAdCredentials' acceptNTolChanges' doOnLicensingFailure
Long Parameter List,XenAdmin.Actions,PoolAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\PoolAction.cs,PoolAbstractAction,The method has 5 parameters. Parameters: connection' title' getAdCredentials' acceptNTolChanges' doOnLicensingFailure
Long Parameter List,XenAdmin.Actions,DiskSpaceRequirements,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\GetDiskSpaceRequirementsAction.cs,DiskSpaceRequirements,The method has 6 parameters. Parameters: operation' host' updateName' requiredDiskSpace' availableDiskSpace' reclaimableDiskSpace
Long Parameter List,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,DownloadAndUnzipXenServerPatchAction,The method has 5 parameters. Parameters: patchName' uri' outputFileName' suppressHist' updateFileExtensions
Long Parameter List,XenAdmin.Actions,DownloadUpdatesXmlAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadUpdatesXmlAction.cs,DownloadUpdatesXmlAction,The method has 6 parameters. Parameters: checkForXenCenter' checkForServerVersion' checkForPatches' userAgent' userAgentId' checkForUpdatesUrl
Long Parameter List,XenAdmin.Actions,VbdEditAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VBD\VbdEditAction.cs,VbdEditAction,The method has 7 parameters. Parameters: vbd' vbdMode' priority' changeDevicePosition' other' devicePosition' suppressHistory
Long Parameter List,XenAdmin.Actions,VbdEditAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VBD\VbdEditAction.cs,SetUserDevice,The method has 5 parameters. Parameters: session' vm' vbd' userdevice' plug
Long Parameter List,XenAdmin.Actions,VbdSaveAndPlugAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VBD\VbdSaveAndPlugAction.cs,VbdSaveAndPlugAction,The method has 8 parameters. Parameters: vm' vbd' vdiName' session' installingTools' supress' showMustRebootBoxCD' showVBDWarningBox
Long Parameter List,XenAdmin.Actions,VbdSaveAndPlugAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VBD\VbdSaveAndPlugAction.cs,VbdSaveAndPlugAction,The method has 7 parameters. Parameters: vm' vbd' vdiName' session' supress' showMustRebootBoxCD' showVBDWarningBox
Long Parameter List,XenAdmin.Actions,ChangeMemorySettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ChangeMemorySettingsAction.cs,ChangeMemorySettingsAction,The method has 9 parameters. Parameters: vm' title' static_min' dynamic_min' dynamic_max' static_max' warningDialogHAInvalidConfig' startDiagnosticForm' suppressHistory
Long Parameter List,XenAdmin.Actions,ExportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ExportVmAction.cs,ExportVmAction,The method has 5 parameters. Parameters: connection' host' vm' filename' verify
Long Parameter List,XenAdmin.Actions,VMSnapshotCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSnapshotCreateAction.cs,VMSnapshotCreateAction,The method has 5 parameters. Parameters: vm' NewName' newDescription' type' screenShotProvider
Long Parameter List,XenAdmin.Actions,EnableAdAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\EnableAdAction.cs,EnableAdAction,The method has 5 parameters. Parameters: pool' domain' user' password' hideFromHistory
Long Parameter List,XenAdmin.Actions,DelegatedAsyncAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DelegatedAsyncAction.cs,DelegatedAsyncAction,The method has 5 parameters. Parameters: connection' title' startDescription' endDescription' invoker
Long Parameter List,XenAdmin.Actions,DelegatedAsyncAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DelegatedAsyncAction.cs,DelegatedAsyncAction,The method has 6 parameters. Parameters: connection' title' startDescription' endDescription' invoker' suppressHistory
Long Parameter List,XenAdmin.Actions,DelegatedAsyncAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DelegatedAsyncAction.cs,DelegatedAsyncAction,The method has 6 parameters. Parameters: connection' title' startDescription' endDescription' invoker' rbacMethods
Long Parameter List,XenAdmin.Actions,DelegatedAsyncAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DelegatedAsyncAction.cs,DelegatedAsyncAction,The method has 7 parameters. Parameters: connection' title' startDescription' endDescription' invoker' suppressHistory' rbacMethods
Long Parameter List,XenAdmin.Actions,ExecutePluginAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ExecutePluginAction.cs,ExecutePluginAction,The method has 6 parameters. Parameters: connection' host' plugin' function' args' hide_from_logs
Long Parameter List,XenAdmin.Actions,SavePowerOnSettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SavePowerOnSettingsAction.cs,SavePowerOnSettingsAction,The method has 8 parameters. Parameters: connection' hosts' newMode' ip' user' password' customConfig' suppressHistory
Long Parameter List,XenAdmin.Actions,SavePowerOnSettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SavePowerOnSettingsAction.cs,SavePowerOnSettingsAction,The method has 7 parameters. Parameters: host' newMode' ip' user' password' customConfig' suppressHistory
Long Parameter List,XenAdmin.Actions,NetworkAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkAction.cs,NetworkAction,The method has 7 parameters. Parameters: connection' network' changePIFs' external' pif' vlan' suppressHistory
Long Parameter List,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,BringUp,The method has 5 parameters. Parameters: action' new_pif' new_ip' existing_pif' hi
Long Parameter List,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,ReconfigureIP,The method has 5 parameters. Parameters: action' new_pif' existing_pif' ip' hi
Long Parameter List,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,ReconfigureManagement,The method has 7 parameters. Parameters: action' down_pif' up_pif' this_host' lock_pif' hi' bring_down_down_pif
Long Parameter List,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,PoolReconfigureManagement,The method has 5 parameters. Parameters: action' pool' up_pif' down_pif' hi
Long Parameter List,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,ForSomeHosts,The method has 6 parameters. Parameters: action' pif' this_host' lock_pif' hi' pif_method
Long Parameter List,XenAdmin.Actions,ChangeNetworkingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\ChangeNetworkingAction.cs,ChangeNetworkingAction,The method has 8 parameters. Parameters: connection' pool' host' newPIFs' downPIFs' newManagement' downManagement' managementIPChanged
Long Parameter List,XenAdmin.Actions,CreateBondAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\CreateBondAction.cs,CreateBondAction,The method has 7 parameters. Parameters: connection' name_label' PIFs_on_master' autoplug' mtu' bondMode' hashingAlgoritm
Long Parameter List,XenAdmin.Actions,ISCSIPopulateIQNsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\ISCSIPopulateIQNsAction.cs,ISCSIPopulateIQNsAction,The method has 5 parameters. Parameters: connection' targetHost' targetPort' chapUsername' chapPassword
Long Parameter List,XenAdmin.Actions,ISCSIPopulateLunsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\ISCSIPopulateLunsAction.cs,ISCSIPopulateLunsAction,The method has 6 parameters. Parameters: connection' targetHost' targetPort' targetIQN' chapUsername' chapPassword
Long Parameter List,XenAdmin.Actions,ISCSIInfo,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\ISCSIPopulateLunsAction.cs,ISCSIInfo,The method has 5 parameters. Parameters: scsiid' lunid' vendor' serial' size
Long Parameter List,XenAdmin.Actions,SrIntroduceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrIntroduceAction.cs,SrIntroduceAction,The method has 7 parameters. Parameters: connection' srUuid' srName' srDescription' srType' srContentType' dconf
Long Parameter List,XenAdmin.Actions,SrProbeAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrProbeAction.cs,SrProbeAction,The method has 5 parameters. Parameters: connection' host' srType' dconf' smconf
Long Parameter List,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,SrScanAction,The method has 5 parameters. Parameters: connection' hostname' username' password' type
Long Parameter List,XenAdmin.Actions,NetAppAggregate,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,NetAppAggregate,The method has 5 parameters. Parameters: name' size' disks' raidType' asisCapable
Long Parameter List,XenAdmin.Actions,DellStoragePool,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,DellStoragePool,The method has 6 parameters. Parameters: Name' Default' Members' Volumes' Capacity' Freespace
Long Parameter List,XenAdmin.Actions,SrCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCreateAction.cs,SrCreateAction,The method has 8 parameters. Parameters: connection' host' srName' srDescription' srType' srContentType' dconf' smconf
Long Parameter List,XenAdmin.Actions,SrCslgStoragePoolScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStoragePoolScanAction.cs,SrCslgStoragePoolScanAction,The method has 5 parameters. Parameters: connection' hostname' username' passwordSecret' storageSystemId
Long Parameter List,XenAdmin.Actions,SrCslgStoragePoolScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStoragePoolScanAction.cs,SrCslgStoragePoolScanAction,The method has 6 parameters. Parameters: connection' hostname' username' password' storagesystemid' adapterid
Long Parameter List,XenAdmin.Actions,CslgStoragePool,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStoragePoolScanAction.cs,CslgStoragePool,The method has 6 parameters. Parameters: displayName' storagePoolId' raidTypes' provisioningTypes' hasParent' storageLinkPool
Long Parameter List,XenAdmin.Actions,SrCslgStorageSystemScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStorageSystemScanAction.cs,SrCslgStorageSystemScanAction,The method has 5 parameters. Parameters: connection' adapterid' target' user' password
Long Parameter List,XenAdmin.Actions,CslgSystemStorage,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStorageSystemScanAction.cs,CslgSystemStorage,The method has 5 parameters. Parameters: displayName' storageSystemId' protocols' provisioningOptions' supportsCHAP
Long Parameter List,XenServerHealthCheck,XenServerHealthCheckUpload,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\XenServerHealthCheckUpload.cs,UploadChunk,The method has 5 parameters. Parameters: address' filePath' offset' thisChunkSize' uploadToken
Long Parameter List,XenAdmin.Actions.DR,StartVMsAndAppliancesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\StartVMsAndAppliancesAction.cs,StartVMsAndAppliancesAction,The method has 6 parameters. Parameters: connection' vmsToStart' vmAppliancesToStart' warningDialogHAInvalidConfig' startDiagnosisForm' paused
Long Parameter List,XenAdmin.Core,XenCenterVersion,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\XenCenterVersion.cs,XenCenterVersion,The method has 6 parameters. Parameters: version_lang' name' latest' latest_cr' url' timestamp
Long Parameter List,XenAdmin.Core,XenServerPatch,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\XenServerPatch.cs,XenServerPatch,The method has 11 parameters. Parameters: uuid' name' description' guidance' guidance_mandatory' version' url' patchUrl' timestamp' priority' installationSize
Long Parameter List,XenAdmin.Core,XenServerPatch,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\XenServerPatch.cs,XenServerPatch,The method has 13 parameters. Parameters: uuid' name' description' guidance' guidance_mandatory' version' url' patchUrl' timestamp' priority' installationSize' conflictingPatches' requiredPatches
Long Parameter List,XenAdmin.Core,XenServerVersion,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\XenServerVersion.cs,XenServerVersion,The method has 11 parameters. Parameters: version_oem' name' latest' latestCr' url' patches' minimumPatches' timestamp' buildNumber' patchUuid' presentAsUpdate
Long Parameter List,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,CanJoinPool,The method has 6 parameters. Parameters: slaveConnection' masterConnection' allowLicenseUpgrade' allowCpuLevelling' allowSlaveAdConfig' poolSizeIncrement
Long Parameter List,XenAdmin.Core,PrettyTimeSpan,C:\repos\xenserver_xenadmin\XenModel\Utils\PrettyTimeSpan.cs,PrettyTimeSpan,The method has 5 parameters. Parameters: days' hours' minutes' seconds' milliseconds
Long Parameter List,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,CreateVMAction,The method has 26 parameters. Parameters: connection' template' copyBiosStringsFrom' name' description' installMethod' pvArgs' cd' url' homeServer' vcpusMax' vcpusAtStartup' memoryDynamicMin' memoryDynamicMax' memoryStaticMax' disks' fullCopySR' vifs' startAfter' warningDialogHAInvalidConfig' startDiagnosisForm' gpuGroup' vgpuType' modifyVgpuSettings' coresPerSocket' cloudConfigDriveTemplateText
Long Parameter List,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,CreateVbd,The method has 5 parameters. Parameters: disk' vdi' progress1' progress2' bootable
Long Parameter List,XenAdmin.Actions.VMActions,ResumeAndStartVMsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ResumeAndStartVMsAction.cs,ResumeAndStartVMsAction,The method has 6 parameters. Parameters: connection' host' vmsToResume' vmsToStart' warningDialogHAInvalidConfig' startDiagnosisForm
Long Parameter List,XenAdmin.Actions.VMActions,VMCrossPoolMigrateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMCrossPoolMigrateAction.cs,VMCrossPoolMigrateAction,The method has 5 parameters. Parameters: vm' destinationHost' transferNetwork' mapping' copy
Long Parameter List,XenAdmin.Actions.VMActions,VMCopyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMCopyAction.cs,VMCopyAction,The method has 5 parameters. Parameters: vm' host' sr' nameLabel' description
Long Parameter List,XenAdmin.Alerts,PolicyAlert,C:\repos\xenserver_xenadmin\XenModel\Alerts\PolicyAlert.cs,PolicyAlert,The method has 5 parameters. Parameters: priority' name' time' body' policyName
Long Parameter List,XenAdmin.Model,DockerContainer,C:\repos\xenserver_xenadmin\XenModel\DockerContainer.cs,DockerContainer,The method has 10 parameters. Parameters: parent' uuid' name' description' status' container' created' image' command' ports
Long Parameter List,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,NewSession,The method has 5 parameters. Parameters: hostname' port' username' password' isElevated
Long Parameter List,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,GetNewSession,The method has 5 parameters. Parameters: hostname' port' username' password' isElevated
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,Put,The method has 6 parameters. Parameters: action' timeout' path' hostname' f' p
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,Put,The method has 6 parameters. Parameters: action' timeout' path' hostname' f' p
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,Put,The method has 10 parameters. Parameters: progressDelegate' cancellingDelegate' timeout' connection' task' session' path' hostname' f' p
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,Put,The method has 10 parameters. Parameters: progressDelegate' cancellingDelegate' timeout' connection' task' session' path' hostname' f' p
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,Get,The method has 6 parameters. Parameters: action' timeout' path' hostname' f' p
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,Get,The method has 7 parameters. Parameters: action' timeout' dataRxDelegate' path' hostname' f' p
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,Get,The method has 11 parameters. Parameters: progressDelegate' cancellingDelegate' timeout' dataRxDelegate' connection' task' session' path' hostname' f' p
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,PollTaskForResult,The method has 5 parameters. Parameters: connection' session' cancellingDelegate' task' timeout
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,CONNECT,The method has 5 parameters. Parameters: uri' connection' session' timeout' do_log
Long Parameter List,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,GET,The method has 5 parameters. Parameters: uri' connection' timeout' do_log' isForXenServer
Long Parameter List,XenAPI,Blob,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Blob.cs,Blob,The method has 7 parameters. Parameters: uuid' name_label' name_description' size' pubblic' last_updated' mime_type
Long Parameter List,XenAPI,PUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PUSB.cs,PUSB,The method has 13 parameters. Parameters: uuid' USB_group' host' path' vendor_id' vendor_desc' product_id' product_desc' serial' version' description' passthrough_enabled' other_config
Long Parameter List,XenAPI,VMSS,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VMSS.cs,VMSS,The method has 10 parameters. Parameters: uuid' name_label' name_description' enabled' type' retained_snapshots' frequency' schedule' last_run_time' VMs
Long Parameter List,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,Pool_update,The method has 11 parameters. Parameters: uuid' name_label' name_description' version' installation_size' key' after_apply_guidance' vdi' hosts' other_config' enforce_homogeneity
Long Parameter List,XenAPI,PVS_cache_storage,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_cache_storage.cs,PVS_cache_storage,The method has 6 parameters. Parameters: uuid' host' SR' site' size' VDI
Long Parameter List,XenAPI,PVS_site,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_site.cs,PVS_site,The method has 7 parameters. Parameters: uuid' name_label' name_description' PVS_uuid' cache_storage' servers' proxies
Long Parameter List,XenAPI,PVS_proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_proxy.cs,PVS_proxy,The method has 5 parameters. Parameters: uuid' site' VIF' currently_attached' status
Long Parameter List,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,GPU_group,The method has 10 parameters. Parameters: uuid' name_label' name_description' PGPUs' VGPUs' GPU_types' other_config' allocation_algorithm' supported_VGPU_types' enabled_VGPU_types
Long Parameter List,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,PGPU,The method has 12 parameters. Parameters: uuid' PCI' GPU_group' host' other_config' supported_VGPU_types' enabled_VGPU_types' resident_VGPUs' supported_VGPU_max_capacities' dom0_access' is_system_display_device' compatibility_metadata
Long Parameter List,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,VGPU,The method has 9 parameters. Parameters: uuid' VM' GPU_group' device' currently_attached' other_config' type' resident_on' scheduled_to_be_resident_on
Long Parameter List,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,create,The method has 5 parameters. Parameters: session' _vm' _gpu_group' _device' _other_config
Long Parameter List,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,async_create,The method has 5 parameters. Parameters: session' _vm' _gpu_group' _device' _other_config
Long Parameter List,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,create,The method has 6 parameters. Parameters: session' _vm' _gpu_group' _device' _other_config' _type
Long Parameter List,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,async_create,The method has 6 parameters. Parameters: session' _vm' _gpu_group' _device' _other_config' _type
Long Parameter List,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,VGPU_type,The method has 15 parameters. Parameters: uuid' vendor_name' model_name' framebuffer_size' max_heads' max_resolution_x' max_resolution_y' supported_on_PGPUs' enabled_on_PGPUs' VGPUs' supported_on_GPU_groups' enabled_on_GPU_groups' implementation' identifier' experimental
Long Parameter List,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,VM_appliance,The method has 6 parameters. Parameters: uuid' name_label' name_description' allowed_operations' current_operations' VMs
Long Parameter List,XenAPI,Feature,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Feature.cs,Feature,The method has 7 parameters. Parameters: uuid' name_label' name_description' enabled' experimental' version' host
Long Parameter List,XenAPI,LVHD,C:\repos\xenserver_xenadmin\XenModel\XenAPI\LVHD.cs,enable_thin_provisioning,The method has 5 parameters. Parameters: session' _host' _sr' _initial_allocation' _allocation_quantum
Long Parameter List,XenAPI,LVHD,C:\repos\xenserver_xenadmin\XenModel\XenAPI\LVHD.cs,async_enable_thin_provisioning,The method has 5 parameters. Parameters: session' _host' _sr' _initial_allocation' _allocation_quantum
Long Parameter List,XenAPI,PCI,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PCI.cs,PCI,The method has 10 parameters. Parameters: uuid' class_name' vendor_name' device_name' host' pci_id' dependencies' other_config' subsystem_vendor_name' subsystem_device_name
Long Parameter List,XenAPI,PVS_server,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PVS_server.cs,PVS_server,The method has 5 parameters. Parameters: uuid' addresses' first_port' last_port' site
Long Parameter List,XenAPI,PVS_server,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PVS_server.cs,introduce,The method has 5 parameters. Parameters: session' _addresses' _first_port' _last_port' _site
Long Parameter List,XenAPI,PVS_server,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PVS_server.cs,async_introduce,The method has 5 parameters. Parameters: session' _addresses' _first_port' _last_port' _site
Long Parameter List,XenAPI,USB_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI\USB_group.cs,USB_group,The method has 6 parameters. Parameters: uuid' name_label' name_description' PUSBs' VUSBs' other_config
Long Parameter List,XenAPI,Vdi_nbd_server_info,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Vdi_nbd_server_info.cs,Vdi_nbd_server_info,The method has 5 parameters. Parameters: exportname' address' port' cert' subject
Long Parameter List,XenAPI,VUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VUSB.cs,VUSB,The method has 7 parameters. Parameters: uuid' allowed_operations' current_operations' VM' USB_group' other_config' currently_attached
Long Parameter List,XenAPI,StorageLinkCredentials,C:\repos\xenserver_xenadmin\XenModel\StorageLinkAPI\CowleyLegacy\StorageLinkCredentials.cs,StorageLinkCredentials,The method has 5 parameters. Parameters: connection' host' username' password' passwordSecret
Long Parameter List,XenAPI,StorageLinkPool,C:\repos\xenserver_xenadmin\XenModel\StorageLinkAPI\CowleyLegacy\StorageLinkPool.cs,StorageLinkPool,The method has 8 parameters. Parameters: opaque_ref' friendlyName' parentStorageLinkPoolId' storageLinkSystemId' capacity' usedSpace' raidTypes' provisioningTypes
Long Parameter List,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,Bond,The method has 8 parameters. Parameters: uuid' master' slaves' other_config' primary_slave' mode' properties' links_up
Long Parameter List,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,create,The method has 5 parameters. Parameters: session' _network' _members' _mac' _mode
Long Parameter List,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,async_create,The method has 5 parameters. Parameters: session' _network' _members' _mac' _mode
Long Parameter List,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,create,The method has 6 parameters. Parameters: session' _network' _members' _mac' _mode' _properties
Long Parameter List,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,async_create,The method has 6 parameters. Parameters: session' _network' _members' _mac' _mode' _properties
Long Parameter List,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,Host,The method has 56 parameters. Parameters: uuid' name_label' name_description' memory_overhead' allowed_operations' current_operations' API_version_major' API_version_minor' API_version_vendor' API_version_vendor_implementation' enabled' software_version' other_config' capabilities' cpu_configuration' sched_policy' supported_bootloaders' resident_VMs' logging' PIFs' suspend_image_sr' crash_dump_sr' crashdumps' patches' updates' PBDs' host_CPUs' cpu_info' hostname' address' metrics' license_params' ha_statefiles' ha_network_peers' blobs' tags' external_auth_type' external_auth_service_name' external_auth_configuration' edition' license_server' bios_strings' power_on_mode' power_on_config' local_cache_sr' chipset_info' PCIs' PGPUs' PUSBs' ssl_legacy' guest_VCPUs_params' display' virtual_hardware_platform_versions' control_domain' updates_requiring_reboot' features
Long Parameter List,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,create_new_blob,The method has 5 parameters. Parameters: session' _host' _name' _mime_type' _public
Long Parameter List,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_create_new_blob,The method has 5 parameters. Parameters: session' _host' _name' _mime_type' _public
Long Parameter List,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,call_plugin,The method has 5 parameters. Parameters: session' _host' _plugin' _fn' _args
Long Parameter List,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_call_plugin,The method has 5 parameters. Parameters: session' _host' _plugin' _fn' _args
Long Parameter List,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,enable_external_auth,The method has 5 parameters. Parameters: session' _host' _config' _service_name' _auth_type
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,Get,The method has 8 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' remotePath' proxy' localPath' args
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,Put,The method has 8 parameters. Parameters: progressDelegate' cancellingDelegate' timeout_ms' hostname' remotePath' proxy' localPath' args
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_services,The method has 8 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,put_import,The method has 11 parameters. Parameters: progressDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' restore' force' sr_id
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,put_import_metadata,The method has 10 parameters. Parameters: progressDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' restore' force
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,put_import_raw_vdi,The method has 9 parameters. Parameters: progressDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' vdi
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_export,The method has 9 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' uuid
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_export_metadata,The method has 9 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' uuid
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_export_raw_vdi,The method has 9 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' vdi
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_host_backup,The method has 8 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,put_host_restore,The method has 8 parameters. Parameters: progressDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_host_logs_download,The method has 8 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,put_pool_patch_upload,The method has 8 parameters. Parameters: progressDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_pool_patch_download,The method has 9 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' uuid
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,put_oem_patch_stream,The method has 8 parameters. Parameters: progressDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_vncsnapshot,The method has 9 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' uuid
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_pool_xml_db_sync,The method has 8 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_system_status,The method has 10 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' entries' output
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,vm_rrd,The method has 9 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' uuid
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,host_rrd,The method has 9 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' json
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,sr_rrd,The method has 9 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' uuid
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,rrd_updates,The method has 14 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' start' cf' interval' host' uuid' json
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,put_blob,The method has 9 parameters. Parameters: progressDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' reff
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_wlb_report,The method has 10 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id' report' args
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_wlb_diagnostics,The method has 8 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id
Long Parameter List,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,get_audit_log,The method has 8 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' timeout_ms' hostname' proxy' path' task_id' session_id
Long Parameter List,XenAPI,Message,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Message.cs,Message,The method has 7 parameters. Parameters: uuid' name' priority' cls' obj_uuid' timestamp' body
Long Parameter List,XenAPI,Message,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Message.cs,create,The method has 6 parameters. Parameters: session' _name' _priority' _cls' _obj_uuid' _body
Long Parameter List,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,Network,The method has 16 parameters. Parameters: uuid' name_label' name_description' allowed_operations' current_operations' VIFs' PIFs' MTU' other_config' bridge' managed' blobs' tags' default_locking_mode' assigned_ips' purpose
Long Parameter List,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,create_new_blob,The method has 5 parameters. Parameters: session' _network' _name' _mime_type' _public
Long Parameter List,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,async_create_new_blob,The method has 5 parameters. Parameters: session' _network' _name' _mime_type' _public
Long Parameter List,XenAPI,PBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PBD.cs,PBD,The method has 6 parameters. Parameters: uuid' host' SR' device_config' currently_attached' other_config
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,PIF,The method has 32 parameters. Parameters: uuid' device' network' host' MAC' MTU' VLAN' metrics' physical' currently_attached' ip_configuration_mode' IP' netmask' gateway' DNS' bond_slave_of' bond_master_of' VLAN_master_of' VLAN_slave_of' management' other_config' disallow_unplug' tunnel_access_PIF_of' tunnel_transport_PIF_of' ipv6_configuration_mode' IPv6' ipv6_gateway' primary_address_type' managed' properties' capabilities' igmp_snooping_status
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,create_VLAN,The method has 5 parameters. Parameters: session' _device' _network' _host' _vlan
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_create_VLAN,The method has 5 parameters. Parameters: session' _device' _network' _host' _vlan
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,reconfigure_ip,The method has 7 parameters. Parameters: session' _pif' _mode' _ip' _netmask' _gateway' _dns
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_reconfigure_ip,The method has 7 parameters. Parameters: session' _pif' _mode' _ip' _netmask' _gateway' _dns
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,reconfigure_ipv6,The method has 6 parameters. Parameters: session' _pif' _mode' _ipv6' _gateway' _dns
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_reconfigure_ipv6,The method has 6 parameters. Parameters: session' _pif' _mode' _ipv6' _gateway' _dns
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,introduce,The method has 5 parameters. Parameters: session' _host' _mac' _device' _managed
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_introduce,The method has 5 parameters. Parameters: session' _host' _mac' _device' _managed
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,db_introduce,The method has 18 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_db_introduce,The method has 18 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,db_introduce,The method has 22 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_db_introduce,The method has 22 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,db_introduce,The method has 23 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type' _managed
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_db_introduce,The method has 23 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type' _managed
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,db_introduce,The method has 24 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type' _managed' _properties
Long Parameter List,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_db_introduce,The method has 24 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type' _managed' _properties
Long Parameter List,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,Pool,The method has 36 parameters. Parameters: uuid' name_label' name_description' master' default_SR' suspend_image_SR' crash_dump_SR' other_config' ha_enabled' ha_configuration' ha_statefiles' ha_host_failures_to_tolerate' ha_plan_exists_for' ha_allow_overcommit' ha_overcommitted' blobs' tags' gui_config' health_check_config' wlb_url' wlb_username' wlb_enabled' wlb_verify_cert' redo_log_enabled' redo_log_vdi' vswitch_controller' restrictions' metadata_VDIs' ha_cluster_stack' allowed_operations' current_operations' guest_agent_config' cpu_info' policy_no_vendor_device' live_patching_disabled' igmp_snooping_enabled
Long Parameter List,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,create_new_blob,The method has 5 parameters. Parameters: session' _pool' _name' _mime_type' _public
Long Parameter List,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_create_new_blob,The method has 5 parameters. Parameters: session' _pool' _name' _mime_type' _public
Long Parameter List,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,enable_external_auth,The method has 5 parameters. Parameters: session' _pool' _config' _service_name' _auth_type
Long Parameter List,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,initialize_wlb,The method has 6 parameters. Parameters: session' _wlb_url' _wlb_username' _wlb_password' _xenserver_username' _xenserver_password
Long Parameter List,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_initialize_wlb,The method has 6 parameters. Parameters: session' _wlb_url' _wlb_username' _wlb_password' _xenserver_username' _xenserver_password
Long Parameter List,XenAPI,Pool_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_patch.cs,Pool_patch,The method has 10 parameters. Parameters: uuid' name_label' name_description' version' size' pool_applied' host_patches' after_apply_guidance' pool_update' other_config
Long Parameter List,XenAPI,SM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SM.cs,SM,The method has 14 parameters. Parameters: uuid' name_label' name_description' type' vendor' copyright' version' required_api_version' configuration' capabilities' features' other_config' driver_filename' required_cluster_stack
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,SR,The method has 21 parameters. Parameters: uuid' name_label' name_description' allowed_operations' current_operations' VDIs' PBDs' virtual_allocation' physical_utilisation' physical_size' type' content_type' shared' other_config' tags' sm_config' blobs' local_cache_enabled' introduced_by' clustered' is_tools_sr
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,create,The method has 9 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _shared
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_create,The method has 9 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _shared
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,create,The method has 10 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _shared' _sm_config
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_create,The method has 10 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _shared' _sm_config
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,introduce,The method has 7 parameters. Parameters: session' _uuid' _name_label' _name_description' _type' _content_type' _shared
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_introduce,The method has 7 parameters. Parameters: session' _uuid' _name_label' _name_description' _type' _content_type' _shared
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,introduce,The method has 8 parameters. Parameters: session' _uuid' _name_label' _name_description' _type' _content_type' _shared' _sm_config
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_introduce,The method has 8 parameters. Parameters: session' _uuid' _name_label' _name_description' _type' _content_type' _shared' _sm_config
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,make,The method has 8 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_make,The method has 8 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,make,The method has 9 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _sm_config
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_make,The method has 9 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _sm_config
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,probe,The method has 5 parameters. Parameters: session' _host' _device_config' _type' _sm_config
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_probe,The method has 5 parameters. Parameters: session' _host' _device_config' _type' _sm_config
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,create_new_blob,The method has 5 parameters. Parameters: session' _sr' _name' _mime_type' _public
Long Parameter List,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_create_new_blob,The method has 5 parameters. Parameters: session' _sr' _name' _mime_type' _public
Long Parameter List,XenAPI,SRInfo,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,SRInfo,The method has 6 parameters. Parameters: uuid' size' aggr' name' description' poolMetadataDetected
Long Parameter List,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,Task,The method has 17 parameters. Parameters: uuid' name_label' name_description' allowed_operations' current_operations' created' finished' status' resident_on' progress' type' result' error_info' other_config' subtask_of' subtasks' backtrace
Long Parameter List,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,VBD,The method has 22 parameters. Parameters: uuid' allowed_operations' current_operations' VM' VDI' device' userdevice' bootable' mode' type' unpluggable' storage_lock' empty' other_config' currently_attached' status_code' status_detail' runtime_properties' qos_algorithm_type' qos_algorithm_params' qos_supported_algorithms' metrics
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,VDI,The method has 32 parameters. Parameters: uuid' name_label' name_description' allowed_operations' current_operations' SR' VBDs' crash_dumps' virtual_size' physical_utilisation' type' sharable' read_only' other_config' storage_lock' location' managed' missing' parent' xenstore_data' sm_config' is_a_snapshot' snapshot_of' snapshots' snapshot_time' tags' allow_caching' on_boot' metadata_of_pool' metadata_latest' is_tools_iso' cbt_enabled
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,introduce,The method has 12 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_introduce,The method has 12 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,introduce,The method has 19 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_introduce,The method has 19 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,db_introduce,The method has 12 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_db_introduce,The method has 12 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,db_introduce,The method has 19 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_db_introduce,The method has 19 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,db_introduce,The method has 20 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of' _cbt_enabled
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_db_introduce,The method has 20 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of' _cbt_enabled
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,copy,The method has 5 parameters. Parameters: session' _vdi' _sr' _base_vdi' _into_vdi
Long Parameter List,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_copy,The method has 5 parameters. Parameters: session' _vdi' _sr' _base_vdi' _into_vdi
Long Parameter List,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,VIF,The method has 27 parameters. Parameters: uuid' allowed_operations' current_operations' device' network' VM' MAC' MTU' other_config' currently_attached' status_code' status_detail' runtime_properties' qos_algorithm_type' qos_algorithm_params' qos_supported_algorithms' metrics' MAC_autogenerated' locking_mode' ipv4_allowed' ipv6_allowed' ipv4_configuration_mode' ipv4_addresses' ipv4_gateway' ipv6_configuration_mode' ipv6_addresses' ipv6_gateway
Long Parameter List,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,configure_ipv4,The method has 5 parameters. Parameters: session' _vif' _mode' _address' _gateway
Long Parameter List,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,async_configure_ipv4,The method has 5 parameters. Parameters: session' _vif' _mode' _address' _gateway
Long Parameter List,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,configure_ipv6,The method has 5 parameters. Parameters: session' _vif' _mode' _address' _gateway
Long Parameter List,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,async_configure_ipv6,The method has 5 parameters. Parameters: session' _vif' _mode' _address' _gateway
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,VM,The method has 83 parameters. Parameters: uuid' allowed_operations' current_operations' power_state' name_label' name_description' user_version' is_a_template' is_default_template' suspend_VDI' resident_on' affinity' memory_overhead' memory_target' memory_static_max' memory_dynamic_max' memory_dynamic_min' memory_static_min' VCPUs_params' VCPUs_max' VCPUs_at_startup' actions_after_shutdown' actions_after_reboot' actions_after_crash' consoles' VIFs' VBDs' VUSBs' crash_dumps' VTPMs' PV_bootloader' PV_kernel' PV_ramdisk' PV_args' PV_bootloader_args' PV_legacy_args' HVM_boot_policy' HVM_boot_params' HVM_shadow_multiplier' platform' PCI_bus' other_config' domid' domarch' last_boot_CPU_flags' is_control_domain' metrics' guest_metrics' last_booted_record' recommendations' xenstore_data' ha_always_run' ha_restart_priority' is_a_snapshot' snapshot_of' snapshots' snapshot_time' transportable_snapshot_id' blobs' tags' blocked_operations' snapshot_info' snapshot_metadata' parent' children' bios_strings' protection_policy' is_snapshot_from_vmpp' snapshot_schedule' is_vmss_snapshot' appliance' start_delay' shutdown_delay' order' VGPUs' attached_PCIs' suspend_SR' version' generation_id' hardware_platform_version' has_vendor_device' requires_reboot' reference_label
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,start_on,The method has 5 parameters. Parameters: session' _vm' _host' _start_paused' _force
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_start_on,The method has 5 parameters. Parameters: session' _vm' _host' _start_paused' _force
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,resume_on,The method has 5 parameters. Parameters: session' _vm' _host' _start_paused' _force
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_resume_on,The method has 5 parameters. Parameters: session' _vm' _host' _start_paused' _force
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,set_memory_limits,The method has 6 parameters. Parameters: session' _vm' _static_min' _static_max' _dynamic_min' _dynamic_max
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_set_memory_limits,The method has 6 parameters. Parameters: session' _vm' _static_min' _static_max' _dynamic_min' _dynamic_max
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,migrate_send,The method has 7 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_migrate_send,The method has 7 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,migrate_send,The method has 8 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options' _vgpu_map
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_migrate_send,The method has 8 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options' _vgpu_map
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,assert_can_migrate,The method has 7 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_assert_can_migrate,The method has 7 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,assert_can_migrate,The method has 8 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options' _vgpu_map
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_assert_can_migrate,The method has 8 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options' _vgpu_map
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,create_new_blob,The method has 5 parameters. Parameters: session' _vm' _name' _mime_type' _public
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_create_new_blob,The method has 5 parameters. Parameters: session' _vm' _name' _mime_type' _public
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,import_convert,The method has 6 parameters. Parameters: session' _type' _username' _password' _sr' _remote_config
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_import_convert,The method has 6 parameters. Parameters: session' _type' _username' _password' _sr' _remote_config
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,call_plugin,The method has 5 parameters. Parameters: session' _vm' _plugin' _fn' _args
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_call_plugin,The method has 5 parameters. Parameters: session' _vm' _plugin' _fn' _args
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,import,The method has 5 parameters. Parameters: session' _url' _sr' _full_restore' _force
Long Parameter List,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_import,The method has 5 parameters. Parameters: session' _url' _sr' _full_restore' _force
Long Parameter List,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,VM_guest_metrics,The method has 14 parameters. Parameters: uuid' os_version' PV_drivers_version' PV_drivers_up_to_date' memory' disks' networks' other' last_updated' other_config' live' can_use_hotplug_vbd' can_use_hotplug_vif' PV_drivers_detected
Long Parameter List,XenAPI,Console,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Console.cs,Console,The method has 5 parameters. Parameters: uuid' protocol' location' VM' other_config
Long Parameter List,XenAPI,Data_source,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Data_source.cs,Data_source,The method has 8 parameters. Parameters: name_label' name_description' enabled' standard' units' min' max' value
Long Parameter List,XenAPI,Host_cpu,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_cpu.cs,Host_cpu,The method has 13 parameters. Parameters: uuid' host' number' vendor' speed' modelname' family' model' stepping' flags' features' utilisation' other_config
Long Parameter List,XenAPI,Host_crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_crashdump.cs,Host_crashdump,The method has 5 parameters. Parameters: uuid' host' timestamp' size' other_config
Long Parameter List,XenAPI,Host_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_metrics.cs,Host_metrics,The method has 6 parameters. Parameters: uuid' memory_total' memory_free' live' last_updated' other_config
Long Parameter List,XenAPI,Host_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_patch.cs,Host_patch,The method has 10 parameters. Parameters: uuid' name_label' name_description' version' host' applied' timestamp_applied' size' pool_patch' other_config
Long Parameter List,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,ReadHttpHeaders,The method has 5 parameters. Parameters: stream' proxy' nodelay' timeout_ms' headers
Long Parameter List,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The method has 7 parameters. Parameters: stream' uri' proxy' nodelay' timeout_ms' initialResponse' header
Long Parameter List,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,DO_HTTP,The method has 5 parameters. Parameters: uri' proxy' nodelay' timeout_ms' headers
Long Parameter List,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,Put,The method has 6 parameters. Parameters: progressDelegate' cancellingDelegate' uri' proxy' path' timeout_ms
Long Parameter List,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,Get,The method has 6 parameters. Parameters: dataCopiedDelegate' cancellingDelegate' uri' proxy' path' timeout_ms
Long Parameter List,XenAPI,PIF_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PIF_metrics.cs,PIF_metrics,The method has 13 parameters. Parameters: uuid' io_read_kbs' io_write_kbs' carrier' vendor_id' vendor_name' device_id' device_name' speed' duplex' pci_bus_path' last_updated' other_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pool_create_new_blob,The method has 5 parameters. Parameters: session' _pool' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pool_create_new_blob,The method has 5 parameters. Parameters: session' _pool' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pool_enable_external_auth,The method has 5 parameters. Parameters: session' _pool' _config' _service_name' _auth_type
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pool_initialize_wlb,The method has 6 parameters. Parameters: session' _wlb_url' _wlb_username' _wlb_password' _xenserver_username' _xenserver_password
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pool_initialize_wlb,The method has 6 parameters. Parameters: session' _wlb_url' _wlb_username' _wlb_password' _xenserver_username' _xenserver_password
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_start_on,The method has 5 parameters. Parameters: session' _vm' _host' _start_paused' _force
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_start_on,The method has 5 parameters. Parameters: session' _vm' _host' _start_paused' _force
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_resume_on,The method has 5 parameters. Parameters: session' _vm' _host' _start_paused' _force
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_resume_on,The method has 5 parameters. Parameters: session' _vm' _host' _start_paused' _force
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_set_memory_limits,The method has 6 parameters. Parameters: session' _vm' _static_min' _static_max' _dynamic_min' _dynamic_max
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_set_memory_limits,The method has 6 parameters. Parameters: session' _vm' _static_min' _static_max' _dynamic_min' _dynamic_max
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_migrate_send,The method has 7 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_migrate_send,The method has 7 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_migrate_send,The method has 8 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options' _vgpu_map
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_migrate_send,The method has 8 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options' _vgpu_map
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_assert_can_migrate,The method has 7 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_assert_can_migrate,The method has 7 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_assert_can_migrate,The method has 8 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options' _vgpu_map
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_assert_can_migrate,The method has 8 parameters. Parameters: session' _vm' _dest' _live' _vdi_map' _vif_map' _options' _vgpu_map
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_create_new_blob,The method has 5 parameters. Parameters: session' _vm' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_create_new_blob,The method has 5 parameters. Parameters: session' _vm' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_import_convert,The method has 6 parameters. Parameters: session' _type' _username' _password' _sr' _remote_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_import_convert,The method has 6 parameters. Parameters: session' _type' _username' _password' _sr' _remote_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_call_plugin,The method has 5 parameters. Parameters: session' _vm' _plugin' _fn' _args
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_call_plugin,The method has 5 parameters. Parameters: session' _vm' _plugin' _fn' _args
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vm_import,The method has 5 parameters. Parameters: session' _url' _sr' _full_restore' _force
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vm_import,The method has 5 parameters. Parameters: session' _url' _sr' _full_restore' _force
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,host_create_new_blob,The method has 5 parameters. Parameters: session' _host' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_host_create_new_blob,The method has 5 parameters. Parameters: session' _host' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,host_call_plugin,The method has 5 parameters. Parameters: session' _host' _plugin' _fn' _args
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_host_call_plugin,The method has 5 parameters. Parameters: session' _host' _plugin' _fn' _args
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,host_enable_external_auth,The method has 5 parameters. Parameters: session' _host' _config' _service_name' _auth_type
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,network_create_new_blob,The method has 5 parameters. Parameters: session' _network' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_network_create_new_blob,The method has 5 parameters. Parameters: session' _network' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vif_configure_ipv4,The method has 5 parameters. Parameters: session' _vif' _mode' _address' _gateway
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vif_configure_ipv4,The method has 5 parameters. Parameters: session' _vif' _mode' _address' _gateway
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vif_configure_ipv6,The method has 5 parameters. Parameters: session' _vif' _mode' _address' _gateway
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vif_configure_ipv6,The method has 5 parameters. Parameters: session' _vif' _mode' _address' _gateway
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pif_create_vlan,The method has 5 parameters. Parameters: session' _device' _network' _host' _vlan
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pif_create_vlan,The method has 5 parameters. Parameters: session' _device' _network' _host' _vlan
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pif_reconfigure_ip,The method has 7 parameters. Parameters: session' _pif' _mode' _ip' _netmask' _gateway' _dns
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pif_reconfigure_ip,The method has 7 parameters. Parameters: session' _pif' _mode' _ip' _netmask' _gateway' _dns
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pif_reconfigure_ipv6,The method has 6 parameters. Parameters: session' _pif' _mode' _ipv6' _gateway' _dns
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pif_reconfigure_ipv6,The method has 6 parameters. Parameters: session' _pif' _mode' _ipv6' _gateway' _dns
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pif_introduce,The method has 5 parameters. Parameters: session' _host' _mac' _device' _managed
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pif_introduce,The method has 5 parameters. Parameters: session' _host' _mac' _device' _managed
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pif_db_introduce,The method has 18 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pif_db_introduce,The method has 18 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pif_db_introduce,The method has 22 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pif_db_introduce,The method has 22 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pif_db_introduce,The method has 23 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type' _managed
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pif_db_introduce,The method has 23 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type' _managed
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pif_db_introduce,The method has 24 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type' _managed' _properties
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pif_db_introduce,The method has 24 parameters. Parameters: session' _device' _network' _host' _mac' _mtu' _vlan' _physical' _ip_configuration_mode' _ip' _netmask' _gateway' _dns' _bond_slave_of' _vlan_master_of' _management' _other_config' _disallow_unplug' _ipv6_configuration_mode' _ipv6' _ipv6_gateway' _primary_address_type' _managed' _properties
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,bond_create,The method has 5 parameters. Parameters: session' _network' _members' _mac' _mode
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_bond_create,The method has 5 parameters. Parameters: session' _network' _members' _mac' _mode
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,bond_create,The method has 6 parameters. Parameters: session' _network' _members' _mac' _mode' _properties
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_bond_create,The method has 6 parameters. Parameters: session' _network' _members' _mac' _mode' _properties
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,sr_create,The method has 9 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _shared
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_sr_create,The method has 9 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _shared
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,sr_create,The method has 10 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _shared' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_sr_create,The method has 10 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _shared' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,sr_introduce,The method has 7 parameters. Parameters: session' _uuid' _name_label' _name_description' _type' _content_type' _shared
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_sr_introduce,The method has 7 parameters. Parameters: session' _uuid' _name_label' _name_description' _type' _content_type' _shared
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,sr_introduce,The method has 8 parameters. Parameters: session' _uuid' _name_label' _name_description' _type' _content_type' _shared' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_sr_introduce,The method has 8 parameters. Parameters: session' _uuid' _name_label' _name_description' _type' _content_type' _shared' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,sr_make,The method has 8 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_sr_make,The method has 8 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,sr_make,The method has 9 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_sr_make,The method has 9 parameters. Parameters: session' _host' _device_config' _physical_size' _name_label' _name_description' _type' _content_type' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,sr_probe,The method has 5 parameters. Parameters: session' _host' _device_config' _type' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_sr_probe,The method has 5 parameters. Parameters: session' _host' _device_config' _type' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,sr_create_new_blob,The method has 5 parameters. Parameters: session' _sr' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_sr_create_new_blob,The method has 5 parameters. Parameters: session' _sr' _name' _mime_type' _public
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,lvhd_enable_thin_provisioning,The method has 5 parameters. Parameters: session' _host' _sr' _initial_allocation' _allocation_quantum
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_lvhd_enable_thin_provisioning,The method has 5 parameters. Parameters: session' _host' _sr' _initial_allocation' _allocation_quantum
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vdi_introduce,The method has 12 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vdi_introduce,The method has 12 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vdi_introduce,The method has 19 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vdi_introduce,The method has 19 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vdi_db_introduce,The method has 12 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vdi_db_introduce,The method has 12 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vdi_db_introduce,The method has 19 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vdi_db_introduce,The method has 19 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vdi_db_introduce,The method has 20 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of' _cbt_enabled
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vdi_db_introduce,The method has 20 parameters. Parameters: session' _uuid' _name_label' _name_description' _sr' _type' _sharable' _read_only' _other_config' _location' _xenstore_data' _sm_config' _managed' _virtual_size' _physical_utilisation' _metadata_of_pool' _is_a_snapshot' _snapshot_time' _snapshot_of' _cbt_enabled
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vdi_copy,The method has 5 parameters. Parameters: session' _vdi' _sr' _base_vdi' _into_vdi
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vdi_copy,The method has 5 parameters. Parameters: session' _vdi' _sr' _base_vdi' _into_vdi
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,message_create,The method has 6 parameters. Parameters: session' _name' _priority' _cls' _obj_uuid' _body
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vgpu_create,The method has 5 parameters. Parameters: session' _vm' _gpu_group' _device' _other_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vgpu_create,The method has 5 parameters. Parameters: session' _vm' _gpu_group' _device' _other_config
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,vgpu_create,The method has 6 parameters. Parameters: session' _vm' _gpu_group' _device' _other_config' _type
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_vgpu_create,The method has 6 parameters. Parameters: session' _vm' _gpu_group' _device' _other_config' _type
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,pvs_server_introduce,The method has 5 parameters. Parameters: session' _addresses' _first_port' _last_port' _site
Long Parameter List,XenAPI,Proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,async_pvs_server_introduce,The method has 5 parameters. Parameters: session' _addresses' _first_port' _last_port' _site
Long Parameter List,XenAPI,Tunnel,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Tunnel.cs,Tunnel,The method has 5 parameters. Parameters: uuid' access_PIF' transport_PIF' status' other_config
Long Parameter List,XenAPI,VBD_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VBD_metrics.cs,VBD_metrics,The method has 5 parameters. Parameters: uuid' io_read_kbs' io_write_kbs' last_updated' other_config
Long Parameter List,XenAPI,VIF_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VIF_metrics.cs,VIF_metrics,The method has 5 parameters. Parameters: uuid' io_read_kbs' io_write_kbs' last_updated' other_config
Long Parameter List,XenAPI,VLAN,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VLAN.cs,VLAN,The method has 5 parameters. Parameters: uuid' tagged_PIF' untagged_PIF' tag' other_config
Long Parameter List,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,VMPP,The method has 20 parameters. Parameters: uuid' name_label' name_description' is_policy_enabled' backup_type' backup_retention_value' backup_frequency' backup_schedule' is_backup_running' backup_last_run_time' archive_target_type' archive_target_config' archive_frequency' archive_schedule' is_archive_running' archive_last_run_time' VMs' is_alarm_enabled' alarm_config' recent_alerts
Long Parameter List,XenAPI,VM_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VM_metrics.cs,VM_metrics,The method has 15 parameters. Parameters: uuid' memory_actual' VCPUs_number' VCPUs_utilisation' VCPUs_CPU' VCPUs_params' VCPUs_flags' state' start_time' install_time' last_updated' other_config' hvm' nested_virt' nomigrate
Long Parameter List,XenAdmin.ServerDBs,PropInfo,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\Db.cs,PropInfo,The method has 5 parameters. Parameters: table' rowKey' row' prop' propValue
Long Parameter List,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,EditObject_,The method has 5 parameters. Parameters: editType' typeName' opaqueRef' field' args
Long Parameter List,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,AddToDictionary,The method has 5 parameters. Parameters: typeName' opaqueRef' field' key' new_value
Long Parameter List,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,MakeProxyEvent,The method has 5 parameters. Parameters: typeName' opaqueRef' operation' ProxyT' proxy
Long Parameter List,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,edit_record,The method has 5 parameters. Parameters: editType' clazz' opaqueRef' field' args
Long Parameter List,XenAdmin.ServerDBs,ProxyMethodInfo,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\ProxyMethodInfo.cs,ProxyMethodInfo,The method has 5 parameters. Parameters: methodName' typeName' fakeType' fakeMethod' fakeMethodType
Long Parameter List,XenAdmin.ServerDBs.FakeAPI,fakeHost,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeHost.cs,call_plugin,The method has 5 parameters. Parameters: session' master_opaque_ref' arg1' arg2' arg3
Long Parameter List,XenAdmin.ServerDBs.FakeAPI,fakeSR,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeSR.cs,probe,The method has 5 parameters. Parameters: session' host_ref' device_config' type' sm_config
Long Parameter List,XenAdmin.ServerDBs.FakeAPI,fakeSR,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeSR.cs,create,The method has 10 parameters. Parameters: session' host_ref' device_config' size' label' description' type' content' shared' sm_config
Long Parameter List,XenAdmin.ServerDBs.FakeAPI,fakeVM,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeVM.cs,resume_on,The method has 5 parameters. Parameters: session' opaque_ref' host_ref' paused' force
Long Parameter List,XenAdmin.ServerDBs.FakeAPI,fakeVM,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeVM.cs,assert_can_migrate,The method has 7 parameters. Parameters: session' vm' receiveMapping' live' srMap' networkMap' options
Long Parameter List,XenAdmin.StorageLinkAPI,StorageLinkAdapterBoston,C:\repos\xenserver_xenadmin\XenModel\StorageLinkAPI\StorageLinkAdapterBoston.cs,StorageLinkAdapterBoston,The method has 7 parameters. Parameters: id' name' description' type' replicationtype' versionmajor' versionminor
Long Parameter List,XenAdmin.Actions.Wlb,WlbReportAction,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbReportAction.cs,WlbReportAction,The method has 6 parameters. Parameters: connection' host' report' reportName' hideException' parms
Long Parameter List,XenAdmin.Actions.Wlb,InitializeWLBAction,C:\repos\xenserver_xenadmin\XenModel\Actions\WLB\InitializeWLBAction.cs,InitializeWLBAction,The method has 6 parameters. Parameters: pool' wlbUrl' wlbUserName' wlbPassword' xenServerUserName' xenServerPassword
Long Parameter List,XenAdmin.Wlb,WlbOptimizationRecommendation,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,WlbOptimizationRecommendation,The method has 7 parameters. Parameters: vm' fromHost' toHost' reason' recId' optId' powerOperation
Long Parameter List,XenAdmin.XenSearch,PropertyAccessors,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Common.cs,Switch,The method has 7 parameters. Parameters: o' vmDelegate' hostDelegate' poolDelegate' srDelegate' vdiDelegate' folderDelegate
Long Parameter List,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,Search,The method has 6 parameters. Parameters: query' grouping' showSearch' name' uuid' defaultSearch
Long Parameter List,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,Search,The method has 7 parameters. Parameters: query' grouping' showSearch' name' uuid' columns' sorting
Long Identifier,XenAdmin.Actions,ParallelAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ParallelAction.cs,,The length of the parameter DEFAULT_MAX_NUMBER_OF_PARALLEL_ACTIONS is 38.
Long Identifier,XenAdmin.Actions,CheckDiskSpaceForPatchUploadAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\CheckDiskSpaceForPatchUploadAction.cs,Run,The length of the parameter getDiskSpaceRequirementsAction is 30.
Long Identifier,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,,The length of the parameter SLEEP_TIME_TO_CHECK_DOWNLOAD_STATUS_MS is 38.
Long Identifier,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,,The length of the parameter XLVHD_DEF_ALLOCATION_QUANTUM_DIVISOR is 36.
Long Identifier,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,,The length of the parameter XLVHD_MIN_ALLOCATION_QUANTUM_DIVISOR is 36.
Long Identifier,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,,The length of the parameter XLVHD_MAX_ALLOCATION_QUANTUM_DIVISOR is 36.
Long Identifier,XenAdmin.Alerts,PerfmonDefinition,C:\repos\xenserver_xenadmin\XenModel\Alerts\PerfmonDefinition.cs,,The length of the parameter ALARM_TRIGGER_LEVEL_ELEMENT_NAME is 32.
Long Identifier,XenAdmin.Alerts,PerfmonDefinition,C:\repos\xenserver_xenadmin\XenModel\Alerts\PerfmonDefinition.cs,,The length of the parameter ALARM_TRIGGER_PERIOD_ELEMENT_NAME is 33.
Long Identifier,XenAdmin.Alerts,PerfmonDefinition,C:\repos\xenserver_xenadmin\XenModel\Alerts\PerfmonDefinition.cs,,The length of the parameter ALARM_AUTO_INHIBIT_PERIOD_ELEMENT_NAME is 38.
Long Identifier,XenAdmin.Alerts,PerfmonDefinition,C:\repos\xenserver_xenadmin\XenModel\Alerts\PerfmonDefinition.cs,,The length of the parameter ALARM_TYPE_SR_PHYSICAL_UTILISATION is 34.
Long Identifier,XenAdmin.Model,HealthCheckSettings,C:\repos\xenserver_xenadmin\XenModel\HealthCheckSettings.cs,,The length of the parameter UPLOAD_REQUEST_VALIDITY_INTERVAL is 32.
Long Identifier,XenAdmin.Model,HealthCheckSettings,C:\repos\xenserver_xenadmin\XenModel\HealthCheckSettings.cs,,The length of the parameter UPLOAD_CREDENTIAL_PASSWORD_SECRET is 33.
Long Identifier,XenAdmin.Model,HealthCheckSettings,C:\repos\xenserver_xenadmin\XenModel\HealthCheckSettings.cs,,The length of the parameter REPORT_ANALYSIS_ISSUES_DETECTED is 31.
Long Identifier,XenAdmin.Model,XenServerPlugins,C:\repos\xenserver_xenadmin\XenModel\XenServerPlugins.cs,,The length of the parameter PLUGIN_PERFMON_FUNCTION_RESTART is 31.
Long Identifier,XenAdmin.Model,XenServerPlugins,C:\repos\xenserver_xenadmin\XenModel\XenServerPlugins.cs,,The length of the parameter PLUGIN_PERFMON_FUNCTION_REFRESH is 31.
Long Identifier,XenAdmin.Model,XenServerPlugins,C:\repos\xenserver_xenadmin\XenModel\XenServerPlugins.cs,,The length of the parameter PLUGIN_PERFMON_ERROR_NOT_RUNNING is 32.
Long Identifier,XenAdmin,OtherConfigAndTagsWatcher,C:\repos\xenserver_xenadmin\XenModel\OtherConfigWatcher.cs,,The length of the parameter PoolCollectionChangedWithInvoke is 31.
Long Identifier,XenAdmin,OtherConfigAndTagsWatcher,C:\repos\xenserver_xenadmin\XenModel\OtherConfigWatcher.cs,,The length of the parameter HostCollectionChangedWithInvoke is 31.
Long Identifier,XenAdmin,OtherConfigAndTagsWatcher,C:\repos\xenserver_xenadmin\XenModel\OtherConfigWatcher.cs,,The length of the parameter VDICollectionChangedWithInvoke is 30.
Long Identifier,XenAdmin,OtherConfigAndTagsWatcher,C:\repos\xenserver_xenadmin\XenModel\OtherConfigWatcher.cs,,The length of the parameter NetworkCollectionChangedWithInvoke is 34.
Long Identifier,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,,The length of the parameter DEFAULT_MAX_SESSION_LOGIN_ATTEMPTS is 34.
Long Identifier,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,,The length of the parameter POLL_FOR_TASK_RESULT_SLEEP_INTERVAL is 35.
Long Identifier,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,,The length of the parameter _supported_VGPU_max_capacities is 30.
Long Identifier,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,,The length of the parameter HA_OPERATION_WOULD_BREAK_FAILOVER_PLAN is 38.
Long Identifier,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,,The length of the parameter RBAC_PERMISSION_DENIED_FRIENDLY is 31.
Long Identifier,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,,The length of the parameter POOL_AUTH_ENABLE_FAILED_WRONG_CREDENTIALS is 41.
Long Identifier,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,,The length of the parameter PVS_SITE_CONTAINS_RUNNING_PROXIES is 33.
Long Identifier,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,,The length of the parameter MESSAGE_PARAMETER_COUNT_MISMATCH is 32.
Long Identifier,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,Host,The length of the parameter API_version_vendor_implementation is 33.
Long Identifier,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,Host,The length of the parameter virtual_hardware_platform_versions is 34.
Long Identifier,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,,The length of the parameter MAINTENANCE_MODE_EVACUATED_VMS_MIGRATED is 39.
Long Identifier,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,,The length of the parameter MAINTENANCE_MODE_EVACUATED_VMS_SUSPENDED is 40.
Long Identifier,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,,The length of the parameter MAINTENANCE_MODE_EVACUATED_VMS_HALTED is 37.
Long Identifier,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,,The length of the parameter _API_version_vendor_implementation is 34.
Long Identifier,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,,The length of the parameter _virtual_hardware_platform_versions is 35.
Long Identifier,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,,The length of the parameter RESTART_PRIORITY_ALWAYS_RESTART_HIGH_PRIORITY is 45.
Long Identifier,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,,The length of the parameter RESTART_PRIORITY_ALWAYS_RESTART is 31.
Long Identifier,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,,The length of the parameter RESTART_PRIORITY_DO_NOT_RESTART is 31.
Long Identifier,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,,The length of the parameter CurrentProxyAuthenticationMethod is 32.
Long Identifier,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,,The length of the parameter FILE_MOVE_SLEEP_BETWEEN_RETRIES is 31.
Long Identifier,XenAPI,Proxy_Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,,The length of the parameter API_version_vendor_implementation is 33.
Long Identifier,XenAPI,Proxy_Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Proxy.cs,,The length of the parameter virtual_hardware_platform_versions is 34.
Long Identifier,XenAdmin.Wlb,WlbHostConfiguration,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbHostConfiguration.cs,,The length of the parameter KEY_PARTICIPATES_IN_POWER_MANAGEMENT is 36.
Long Identifier,XenAdmin.Wlb,WlbHostConfiguration,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbHostConfiguration.cs,,The length of the parameter KEY_HOST_EXCLUSION_OPTIMIZATION is 31.
Long Identifier,XenAdmin.Wlb,WlbHostConfiguration,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbHostConfiguration.cs,,The length of the parameter KEY_HOST_EXCLUSION_OPTIMIZATION_ACCEPT_VMS is 42.
Long Statement,XenAdmin.Actions,HealthCheckAuthenticationAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\HealthCheckAuthenticationAction.cs,GetIdentityToken,The length of the statement  "                log.InfoFormat("WebException while getting identity token from {0}. Exception Message: {1} "' identityTokenDomainName' e.Message); " is 130.
Long Statement,XenAdmin.Actions,HealthCheckAuthenticationAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\HealthCheckAuthenticationAction.cs,GetIdentityToken,The length of the statement  "                if (e.Status == WebExceptionStatus.ProtocolError && ((HttpWebResponse) e.Response).StatusCode == HttpStatusCode.Forbidden) " is 122.
Long Statement,XenAdmin.Actions,HealthCheckAuthenticationAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\HealthCheckAuthenticationAction.cs,GetIdentityToken,The length of the statement  "                log.InfoFormat("Exception while getting identity token from {0}. Exception Message: {1} "' identityTokenDomainName' e.Message); " is 127.
Long Statement,XenAdmin.Actions,HealthCheckAuthenticationAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\HealthCheckAuthenticationAction.cs,GetUploadGrantToken,The length of the statement  "                log.InfoFormat("Exception while getting upload grant token from {0}. Exception Message: {1} "' uploadGrantTokenDomainName' e.Message); " is 134.
Long Statement,XenAdmin.Actions,HealthCheckAuthenticationAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\HealthCheckAuthenticationAction.cs,GetUploadToken,The length of the statement  "                log.InfoFormat("Exception while getting upload token from {0}. Exception Message: {1} "' uploadTokenDomainName' e.Message); " is 123.
Long Statement,XenAdmin.Actions,HealthCheckAuthenticationAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\HealthCheckAuthenticationAction.cs,GetDiagnosticToken,The length of the statement  "                log.InfoFormat("Exception while getting diagnostic token from {0}. Exception Message: {1} "' diagnosticTokenDomainName' e.Message); " is 131.
Long Statement,XenAdmin.Actions,TransferDataToHealthCheckAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\TransferHealthCheckSettingAction.cs,SendMessageToHealthCheck,The length of the statement  "            NamedPipeClientStream pipeClient = new NamedPipeClientStream("."' HealthCheckSettings.HEALTH_CHECK_PIPE' PipeDirection.Out); " is 124.
Long Statement,XenAdmin.Actions,TransferDataToHealthCheckAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\TransferHealthCheckSettingAction.cs,SendMessageToHealthCheck,The length of the statement  "            pipeClient.Write(Encoding.UTF8.GetBytes(HealthCheckSettings.HEALTH_CHECK_PIPE_END_MESSAGE)' 0' HealthCheckSettings.HEALTH_CHECK_PIPE_END_MESSAGE.Length); " is 153.
Long Statement,XenAdmin.Actions,TransferHealthCheckSettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\TransferHealthCheckSettingAction.cs,GetMessageToBeSent,The length of the statement  "            if (healthCheckSettings.Status == HealthCheckStatus.Enabled && (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))) " is 130.
Long Statement,XenAdmin.Actions,GetHealthCheckAnalysisResultAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\GetHealthCheckAnalysisResultAction.cs,Run,The length of the statement  "                    log.DebugFormat("Cannot get the diagnostic result for {0}' because couldn't retrieve the diagnostic token"' Pool.Name());" is 121.
Long Statement,XenAdmin.Actions,GetHealthCheckAnalysisResultAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\GetHealthCheckAnalysisResultAction.cs,Run,The length of the statement  "                if (analysisResult.Count == 0 && analysisProgress == -1 && DateTime.Compare(healthCheckSettings.LastSuccessfulUploadTime.AddMinutes(10)' DateTime.UtcNow) > 0)" is 158.
Long Statement,XenAdmin.Actions,GetHealthCheckAnalysisResultAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\GetHealthCheckAnalysisResultAction.cs,Run,The length of the statement  "                log.ErrorFormat("Exception while getting diagnostic result from {0}. Exception Message: {1} "' diagnosticDomainName' e.Message);" is 128.
Long Statement,XenAdmin.Actions,GetHealthCheckAnalysisResultAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\GetHealthCheckAnalysisResultAction.cs,GetAnalysisProgress,The length of the statement  "                log.DebugFormat("Exception while getting analysis progress result from {0}. Exception Message: {1} "' diagnosticDomainName' e.Message);" is 135.
Long Statement,XenAdmin.Actions,DockerContainerLifetimeAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DockerContainer\DockerContainerLifetimeAction.cs,Run,The length of the statement  "                var args = new Dictionary<string' string> { { "vmuuid"' dockerContainer.Parent.uuid }' { "container"' dockerContainer.container } };" is 132.
Long Statement,XenAdmin.Actions,VMEnlightenmentAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DockerContainer\VMEnlightenmentAction.cs,Run,The length of the statement  "                log.WarnFormat("Plugin call xscontainer.{0}({1}) on {2} failed with {3}"' action' VM.uuid' Host.Name()' Exception.Message);" is 123.
Long Statement,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,Run,The length of the statement  "            // PR-1102: hosts that have been updated' plus the previous edition information - this data will be sent to the licensing server " is 128.
Long Statement,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,Run,The length of the statement  "            Dictionary<Host' LicensingHelper.LicenseDataStruct> updatedHosts = new Dictionary<Host' LicensingHelper.LicenseDataStruct>(); " is 125.
Long Statement,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,Run,The length of the statement  "                        pool.Connection.Cache.Hosts.ToList().ForEach(h => SetLicenseServer(h' previousLicenseServerAddress' previousLicenseServerPort)); " is 128.
Long Statement,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,Run,The length of the statement  "                string exceptionText = LicenseFailures.Count == 1 ? string.Format(Messages.LICENSE_ERROR_1' LicenseFailures[0].Host.Name()) : string.Format(Messages.LICENSE_ERROR_MANY' LicenseFailures.Count' new List<IXenObject>(xos).Count); " is 225.
Long Statement,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The length of the statement  "                // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)' " is 126.
Long Statement,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The length of the statement  "                    //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref); " is 133.
Long Statement,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The length of the statement  "                log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref); " is 131.
Long Statement,XenAdmin.Actions,HostAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostAbstractAction.cs,MaybeReduceNtolBeforeOp,The length of the statement  "                actionKind == HostActionKind.RebootAndWait || actionKind == HostActionKind.Shutdown||actionKind==HostActionKind.Evacuate); " is 122.
Long Statement,XenAdmin.Actions,HostAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostAbstractAction.cs,MaybeReduceNtolBeforeOp,The length of the statement  "                Dictionary<XenRef<VM>' string> config = Helpers.GetVmHaRestartPrioritiesForApi(Helpers.GetVmHaRestartPriorities(pool.Connection' true)); " is 136.
Long Statement,XenAdmin.Actions,HostAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostAbstractAction.cs,Enable,The length of the statement  "                Dictionary<XenRef<VM>' string> config = Helpers.GetVmHaRestartPrioritiesForApi(Helpers.GetVmHaRestartPriorities(pool.Connection' true)); " is 136.
Long Statement,XenAdmin.Actions,HostBackupRestoreAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostBackupRestoreAction.cs,Run,The length of the statement  "                        this.Description = String.Format(Messages.BACKINGUP_HOST_WITH_DATA' Host.Name()' Util.MemorySizeStringSuitableUnits(0' false)); " is 127.
Long Statement,XenAdmin.Actions,HostBackupRestoreAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostBackupRestoreAction.cs,DataReceived,The length of the statement  "            this.Description = String.Format(Messages.BACKINGUP_HOST_WITH_DATA' Host.Name()' Util.MemorySizeStringSuitableUnits(bytes' false)); " is 131.
Long Statement,XenAdmin.Actions,MultipleAction,C:\repos\xenserver_xenadmin\XenModel\Actions\MultipleAction.cs,RunSubActions,The length of the statement  "                    // Record the first exception we come to. Though later if there are more than one we will replace this with non specific one. " is 125.
Long Statement,XenAdmin.Actions,MultipleActionLauncher,C:\repos\xenserver_xenadmin\XenModel\Actions\MultipleActionLauncher.cs,Run,The length of the statement  "            Dictionary<IXenConnection' List<AsyncAction>> actionsByConnection = new Dictionary<IXenConnection' List<AsyncAction>>(); " is 120.
Long Statement,XenAdmin.Actions,ParallelAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ParallelAction.cs,RunSubActions,The length of the statement  "                queuesByConnection[connection] = new ProduceConsumerQueue(Math.Min(maxNumberOfParallelActions' actionsByConnection[connection].Count)); " is 135.
Long Statement,XenAdmin.Actions,ParallelAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ParallelAction.cs,EnqueueAction,The length of the statement  "                        // Record the first exception we come to. Though later if there are more than one we will replace this with non specific one. " is 125.
Long Statement,XenAdmin.Actions,AddHostToPoolAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\AddHostToPoolAction.cs,Run,The length of the statement  "                RelatedTask = XenAPI.Pool.async_join(Session' Pool.Connection.Hostname' Pool.Connection.Username' Pool.Connection.Password); " is 124.
Long Statement,XenAdmin.Actions,CreatePoolAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\CreatePoolAction.cs,Run,The length of the statement  "                // RBAC: We have forced identical AD configs' but this will fail unless both slave-to-be and master sessions have the correct role. " is 131.
Long Statement,XenAdmin.Actions,CreatePoolAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\CreatePoolAction.cs,Run,The length of the statement  "                RelatedTask = XenAPI.Pool.async_join(Session' master_pool.Connection.Hostname' master_pool.Connection.Username' master_pool.Connection.Password); " is 145.
Long Statement,XenAdmin.Actions,PoolAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\PoolAction.cs,FixLicensing,The length of the statement  "            AsyncAction action = new ApplyLicenseEditionAction(hostsToRelicense.ConvertAll(h=>h as IXenObject)' Host.GetEdition(poolMaster.edition)' poolMaster.license_server["address"]' poolMaster.license_server["port"]'  " is 209.
Long Statement,XenAdmin.Actions,PoolAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\PoolAction.cs,FixAd,The length of the statement  "                        action = new EnableAdAction(Helpers.GetPoolOfOne(h.Connection)' poolMaster.external_auth_service_name'adUserAndPassword.Username' adUserAndPassword.Password) " is 157.
Long Statement,XenAdmin.Actions,GetDiskSpaceRequirementsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\GetDiskSpaceRequirementsAction.cs,Run,The length of the statement  "            if (!Helpers.ElyOrGreater(Host))  // for ElyOrGreater we don't need to call get_required_space' because it will always return updateSize" is 136.
Long Statement,XenAdmin.Actions,GetDiskSpaceRequirementsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\GetDiskSpaceRequirementsAction.cs,Run,The length of the statement  "                result = Host.call_plugin(Session' Host.opaque_ref' "disk-space"' "get_avail_host_disk_space"' new Dictionary<string' string>());" is 129.
Long Statement,XenAdmin.Actions,GetDiskSpaceRequirementsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\GetDiskSpaceRequirementsAction.cs,Run,The length of the statement  "                log.WarnFormat("Plugin call disk-space.get_avail_host_disk_space on {0} failed with {1}"' Host.Name()' failure.Message);" is 120.
Long Statement,XenAdmin.Actions,GetDiskSpaceRequirementsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\GetDiskSpaceRequirementsAction.cs,Run,The length of the statement  "            if (availableDiskSpace < requiredDiskSpace && !Helpers.ElyOrGreater(Host))  // for ElyOrGreater we shouldn't call get_reclaimable_disk_space" is 140.
Long Statement,XenAdmin.Actions,GetDiskSpaceRequirementsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\GetDiskSpaceRequirementsAction.cs,Run,The length of the statement  "                    log.WarnFormat("Plugin call disk-space.get_reclaimable_disk_space on {0} failed with {1}"' Host.Name()' failure.Message);" is 121.
Long Statement,XenAdmin.Actions,GetDiskSpaceRequirementsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\GetDiskSpaceRequirementsAction.cs,Run,The length of the statement  "            DiskSpaceRequirements = new DiskSpaceRequirements(operation' Host' updateName' requiredDiskSpace' availableDiskSpace' reclaimableDiskSpace);" is 140.
Long Statement,XenAdmin.Actions,ApplyUpdateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_update\ApplyUpdateAction.cs,ApplyUpdate,The length of the statement  "                var poolUpdate = poolUpdates.FirstOrDefault(u => u != null && string.Equals(u.uuid' update.uuid' StringComparison.OrdinalIgnoreCase)); " is 134.
Long Statement,XenAdmin.Actions,InstallSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\InstallSupplementalPackAction.cs,InstallSuppPack,The length of the statement  "                Host.call_plugin(session' host.opaque_ref' "install-supp-pack"' "install"' new Dictionary<string' string> { { "vdi"' vdi.uuid } });" is 131.
Long Statement,XenAdmin.Actions,InstallSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\InstallSupplementalPackAction.cs,InstallSuppPack,The length of the statement  "                log.ErrorFormat("Plugin call install-supp-pack.install({0}) on {1} failed with {2}"' vdi.uuid' host.Name()' failure.Message);" is 125.
Long Statement,XenAdmin.Actions,InstallSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\InstallSupplementalPackAction.cs,InstallSuppPack,The length of the statement  "                throw new SupplementalPackInstallFailedException(string.Format(Messages.SUPP_PACK_INSTALL_FAILED' vdi.Name()' host.Name())' failure);" is 133.
Long Statement,XenAdmin.Actions,UploadSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\UploadSupplementalPackAction.cs,UploadSupplementalPack,The length of the statement  "                result = HTTPHelper.Put(progressDelegate' GetCancelling' true' Connection' RelatedTask' ref session'  suppPackFilePath' hostUrl'" is 128.
Long Statement,XenAdmin.Actions,UploadSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\UploadSupplementalPackAction.cs,UploadSupplementalPack,The length of the statement  "                        throw new Exception(Messages.UPDATE_ERROR_INTRODUCE); // This should not happen' because such case will result in a XAPI Failure. But this code has to be protected at this point." is 178.
Long Statement,XenAdmin.Actions,UploadSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\UploadSupplementalPackAction.cs,UploadSupplementalPack,The length of the statement  "                    if (ex.ErrorDescription != null && ex.ErrorDescription.Count > 1 && string.Equals("UPDATE_ALREADY_EXISTS"' ex.ErrorDescription[0]' StringComparison.InvariantCultureIgnoreCase))" is 176.
Long Statement,XenAdmin.Actions,UploadSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\UploadSupplementalPackAction.cs,UploadSupplementalPack,The length of the statement  "                        poolUpdate = Connection.Cache.Pool_updates.FirstOrDefault(pu => string.Equals(pu.uuid' uuidFound' System.StringComparison.InvariantCultureIgnoreCase));" is 151.
Long Statement,XenAdmin.Actions,UploadSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\UploadSupplementalPackAction.cs,UploadSupplementalPack,The length of the statement  "                    log.ErrorFormat("Upload failed when introducing update from VDI {0} on {1}: {2}"' vdi.opaque_ref' Connection' ex.Message);" is 122.
Long Statement,XenAdmin.Actions,UploadSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\UploadSupplementalPackAction.cs,NewVDI,The length of the statement  "            vdi.name_description = Helpers.ElyOrGreater(Connection) ? Messages.UPDATE_TEMP_VDI_DESCRIPTION : Messages.SUPP_PACK_TEMP_VDI_DESCRIPTION;" is 137.
Long Statement,XenAdmin.Actions,PatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\ApplyPatchAction.cs,BringPatchToPoolForHost,The length of the statement  "                    throw new PatchDownloadFailedException(string.Format(Messages.PATCH_DOWNLOAD_FAILED' patch.name_label' patch.Connection.Name)' e); " is 130.
Long Statement,XenAdmin.Actions,SrTrimAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrTrimAction.cs,Run,The length of the statement  "                log.WarnFormat("Plugin call trim.do_trim({0}) is not possible. Reason: {1}"' SR.uuid' Messages.SR_TRIM_NO_STORAGE_HOST_ERROR);" is 126.
Long Statement,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,DownloadFile,The length of the statement  "                            log.ErrorFormat("Error while downloading from '{0}'. Number of errors so far (including this): {1}. Trying maximum {2} times."' address' errorCount' MAX_NUMBER_OF_TRIES); " is 170.
Long Statement,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,ExtractFile,The length of the statement  "                            log.DebugFormat("Found '{0}' in the downloaded archive when looking for a '{1}' file. Extracting..."' iterator.CurrentFileName()' currentExtension); " is 148.
Long Statement,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,archiveIterator_CurrentFileExtractProgressChanged,The length of the statement  "            int pc = downloadUpdate ? 95 + (int)(5.0 * e.BytesTransferred / e.TotalBytesToTransfer) : (int)(100.0 * e.BytesTransferred / e.TotalBytesToTransfer); " is 149.
Long Statement,XenAdmin.Actions,DownloadUpdatesXmlAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadUpdatesXmlAction.cs,GetPatchDependencies,The length of the statement  "            var dependenciesNode = patchsNode.ChildNodes.Cast<XmlNode>().FirstOrDefault(childNode => childNode.Name == dependenciesNodeName); " is 129.
Long Statement,XenAdmin.Actions,DownloadUpdatesXmlAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadUpdatesXmlAction.cs,GetXenServerVersions,The length of the statement  "                                XenServerPatch mp = XenServerPatches.Find(p => string.Equals(p.Uuid' minimalpatch.Attributes["uuid"].Value' StringComparison.OrdinalIgnoreCase)); " is 145.
Long Statement,XenAdmin.Actions,DownloadUpdatesXmlAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadUpdatesXmlAction.cs,GetXenServerVersions,The length of the statement  "                            XenServerPatch patch = XenServerPatches.Find(item => string.Equals(item.Uuid' childnode.Attributes["uuid"].Value' StringComparison.OrdinalIgnoreCase)); " is 151.
Long Statement,XenAdmin.Actions,DownloadUpdatesXmlAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadUpdatesXmlAction.cs,GetXenServerVersions,The length of the statement  "                    XenServerVersions.Add(new XenServerVersion(version_oem' name' is_latest' is_latest_cr' url' patches' minimalPatches' timestamp' " is 127.
Long Statement,XenAdmin.Actions,StartApplianceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VMAppliances\StartApplianceAction.cs,Run,The length of the statement  "			Description = string.Format(m_suspend ? Messages.VM_APPLIANCE_STARTING_PAUSED : Messages.VM_APPLIANCE_STARTING' m_appliance.Name()); " is 132.
Long Statement,XenAdmin.Actions,StartApplianceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VMAppliances\StartApplianceAction.cs,Run,The length of the statement  "			Description = string.Format(m_suspend ? Messages.VM_APPLIANCE_STARTING_PAUSED_COMPLETED : Messages.VM_APPLIANCE_STARTING_COMPLETED' m_appliance.Name()); " is 152.
Long Statement,XenAdmin.Actions,CreateCdDriveAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateCdDriveAction.cs,Run,The length of the statement  "                VbdSaveAndPlugAction cdCreate = new VbdSaveAndPlugAction(VM' cdDrive' Messages.DVD_DRIVE' Session' InstallingTools' true'_showMustRebootBoxCD'_showVBDWarningBox); " is 162.
Long Statement,XenAdmin.Actions,ImportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ImportVmAction.cs,applyVersionOneFiles,The length of the statement  "                // CA-33665: We found a situation before were the task handling had been messed up' we should check the exit code as a failsafe " is 127.
Long Statement,XenAdmin.Actions,ZipStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ZipStatusReportAction.cs,CopyStream,The length of the statement  "                int bytesRead = inputStream.Read(buf' 0' Math.Min(bytesToCopy > int.MaxValue ? int.MaxValue : (int)bytesToCopy' buf.Length)); " is 125.
Long Statement,XenAdmin.Actions,AddRemoveRolesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveRolesAction.cs,Run,The length of the statement  "            log.DebugFormat("Adding {0} roles on subject '{1}'"' toAdd.Count' (subject.DisplayName ?? subject.SubjectName ?? subject.subject_identifier).Ellipsise(50)); " is 156.
Long Statement,XenAdmin.Actions,AddRemoveRolesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveRolesAction.cs,Run,The length of the statement  "            log.DebugFormat("Removing {0} roles on subject '{1}'"' toRemove.Count' (subject.DisplayName ?? subject.SubjectName ?? subject.subject_identifier).Ellipsise(50)); " is 161.
Long Statement,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,Run,The length of the statement  "            // We have only only kept track of the latest exception no matter how many occurred - refer the user to the logs for full info. " is 127.
Long Statement,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,resolveSubjects,The length of the statement  "                    if (!Auth.get_subject_information_from_identifier(Session' sid).TryGetValue(Subject.SUBJECT_NAME_KEY' out resolvedName)) " is 120.
Long Statement,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,removeSubjects,The length of the statement  "            log.DebugFormat("Removing {0} existing subjects on pool '{1}'"' subjectsToRemove.Count' Helpers.GetName(Pool).Ellipsise(50)); " is 125.
Long Statement,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,removeSubjects,The length of the statement  "                    // (deliberate use of the original session for subject analysis... the sudo session is not the one we want to interrogate " is 121.
Long Statement,XenAdmin.Actions,DisableAdAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\DisableAdAction.cs,Run,The length of the statement  "                log.DebugFormat("Disabling AD on pool '{0}' without disabling machine account in AD."' Helpers.GetName(Pool).Ellipsise(50)); " is 124.
Long Statement,XenAdmin.Actions,EnableAdAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\EnableAdAction.cs,Run,The length of the statement  "            config["domain"] = domain; // NB this line is now redundant' it is here to support the old now-superseded way of passing in the domain " is 134.
Long Statement,XenAdmin.Actions,EnableAdAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\EnableAdAction.cs,Run,The length of the statement  "                    log.Debug("Tried to disable AD before enabling it' but it has failed. Ignoring it' because in this case we are executing disable on best effort basis only."' ex); " is 162.
Long Statement,XenAdmin.Actions,AsyncAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AsyncAction.cs,SetSessionByRole,The length of the statement  "            log.DebugFormat("Subject {0} has roles: {1}"' Connection.Session.UserLogName()' Role.FriendlyCSVRoleList(Connection.Session.Roles)); " is 132.
Long Statement,XenAdmin.Actions,AsyncAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AsyncAction.cs,BestEffort,The length of the statement  "                    exn is WebException && ((WebException)exn).Status == WebExceptionStatus.KeepAliveFailure)  // ignore keep-alive failures if disruption is expected " is 146.
Long Statement,XenAdmin.Actions,FibreChannelProbeAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\FibreChannelProbeAction.cs,Run,The length of the statement  "                Result = XenAPI.SR.probe(Session' Host.opaque_ref' new Dictionary<string' string>()' srType.ToString()' new Dictionary<string' string>()); " is 138.
Long Statement,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,ClearIP,The length of the statement  "            action.RelatedTask = PIF.async_reconfigure_ip(action.Session' pif.opaque_ref' ip_configuration_mode.None' ""' ""' ""' ""); " is 122.
Long Statement,XenAdmin.Actions,UnplugPlugNetworkAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\UnplugPlugNetworkAction.cs,Run,The length of the statement  "                // Ideally we would like to keep the previous description' but we need to throw the error to force the history switch or red highlighting " is 137.
Long Statement,XenAdmin.Actions,PerfmonDefinitionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Perfmon\PerfmonDefinitionAction.cs,Run,The length of the statement  "            // Dom0 Memory usage alert is an exception. While configuration for all the alerts (eg. related to the Host) have to be saved to this "xo"'  " is 139.
Long Statement,XenAdmin.Actions,PerfmonOptionsDefinitionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Perfmon\PerfmonOptionsDefinitionAction.cs,Run,The length of the statement  "                Helpers.SetOtherConfig(Session' pool' PerfmonOptionsDefinition.MAIL_DESTINATION_KEY_NAME' perfmonOptions.MailDestination); " is 122.
Long Statement,XenAdmin.Actions,PerfmonOptionsDefinitionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Perfmon\PerfmonOptionsDefinitionAction.cs,Run,The length of the statement  "                    Helpers.SetOtherConfig(Session' pool' PerfmonOptionsDefinition.MAIL_LANGUAGE_KEY_NAME' perfmonOptions.MailLanguageCode); " is 120.
Long Statement,XenAdmin.Actions,DestroyPoolAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\DestroyPoolAction.cs,Run,The length of the statement  "                throw new Exception("Cannot destroy a pool of more than one host");  // We should not have any UI to reach here' and must not be allowed to proceed " is 147.
Long Statement,XenAdmin.Actions,SrAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrAction.cs,UnplugPBDs,The length of the statement  "            //CA-176935' CA-173497 - we need to run Unplug for the master last - creating a new list of hosts where the master is always the last " is 133.
Long Statement,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The length of the statement  "            //CA-176935' CA-173497 - we need to run Plug for the master first - creating a new list of hosts where the master is always first " is 129.
Long Statement,XenAdmin.Actions,SrCslgScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgScanAction.cs,RunProbe,The length of the statement  "                RelatedTask = XenAPI.SR.async_probe(Session' Helpers.GetMaster(Connection).opaque_ref' dconf' XenAPI.SR.SRTypes.cslg.ToString()' new Dictionary<String' String>()); " is 163.
Long Statement,XenAdmin.Actions,SrCslgStoragePoolScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStoragePoolScanAction.cs,ParseStoragePoolXml,The length of the statement  "                foreach (string innerText in GetXmlChildNodeInnerTexts(storagePoolInfo' "provisioningOptions/supportedProvisioningTypes/provisioningType")) " is 139.
Long Statement,XenAdmin.Actions,SrCslgStoragePoolScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStoragePoolScanAction.cs,ParseStoragePoolXml,The length of the statement  "                StorageLinkPool storageLinkPool = new StorageLinkPool(storagePoolId' displayName' parentStoragePoolId' _storageSystemId' capacity' usedSpace' " is 141.
Long Statement,XenAdmin.Actions,SrCslgStoragePoolScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStoragePoolScanAction.cs,ParseStoragePoolXml,The length of the statement  "                    (StorageLinkEnums.ProvisioningType)Enum.Parse(typeof(StorageLinkEnums.ProvisioningType)' provisioningTypes[0].Name.ToUpper())); " is 127.
Long Statement,XenAdmin.Actions,SrCslgStoragePoolScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStoragePoolScanAction.cs,ParseStoragePoolXml,The length of the statement  "                output.Add(new CslgStoragePool(displayName' storagePoolId' raidTypes' provisioningTypes' !string.IsNullOrEmpty(parentStoragePoolId)' storageLinkPool)); " is 151.
Long Statement,XenAdmin.Actions,SrCslgStorageSystemScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStorageSystemScanAction.cs,Run,The length of the statement  "                _cslgSystemStorages = new ReadOnlyCollection<CslgSystemStorage>(ParseStorageSystemsXml(Util.GetContentsOfValueNode(Result))); " is 125.
Long Statement,XenAdmin.Actions,DetachVirtualDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\DetachVirtualDiskAction.cs,Run,The length of the statement  "                if (vbd != null && vbd.currently_attached && XenAPI.VBD.get_allowed_operations(Session' vbd.opaque_ref).Contains(XenAPI.vbd_operations.unplug)) " is 143.
Long Statement,XenAdmin.Actions,ChangeVCPUSettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ChangeVCPUSettingsAction.cs,Run,The length of the statement  "            if (m_VM.power_state == vm_power_state.Running) // if the VM is running' we can only change the vCPUs number' not the max. " is 122.
Long Statement,XenAdmin.Actions,ChangeVCPUSettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ChangeVCPUSettingsAction.cs,Run,The length of the statement  "            if (m_VM.VCPUs_at_startup > m_VCPUs_at_startup) // reducing VCPUs_at_startup: we need to change this value first' and then the VCPUs_max " is 136.
Long Statement,XenAdmin.Actions,InstallPVToolsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\InstallPVToolsAction.cs,Run,The length of the statement  "            if (guestMetrics != null && !VM.HasNewVirtualisationStates() && guestMetrics.PV_drivers_installed() && guestMetrics.PV_drivers_up_to_date) " is 138.
Long Statement,XenAdmin.Actions.HostActions,HostPowerOnAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostPowerOnAction.cs,Run,The length of the statement  "                    Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_advised"' Host.other_config[WlbOptimizePoolAction.OPTIMIZINGPOOL]); " is 140.
Long Statement,XenAdmin.Actions.HostActions,HostPowerOnAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostPowerOnAction.cs,UpdateHostLastPowerOnSucceeded,The length of the statement  "                    SendWlbConfigurationAction action = new SendWlbConfigurationAction(pool' hostConfig.ToDictionary()' SendWlbConfigurationKind.SetHostConfiguration); " is 147.
Long Statement,XenAdmin.Actions.HostActions,LicensingHelper,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\LicensingHelper.cs,SendActivationData,The length of the statement  "            SendLicenseDataHelper sendLicenseDataHelper = new SendLicenseDataHelper(hosts' "activation"' XenAPI.Host.GetEditionText(XenAPI.Host.Edition.Free)' true); " is 153.
Long Statement,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,CanJoinPool,The length of the statement  "                return masterHost.Connection.Cache.Hosts.Length > 1 ? Reason.DifferentHomogeneousUpdatesFromPool : Reason.DifferentHomogeneousUpdatesFromMaster; " is 144.
Long Statement,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,CanJoinPool,The length of the statement  "            if (Helpers.FeatureForbidden(slaveConnection' Host.RestrictManagementOnVLAN) && HasSlaveAnyNonPhysicalPif(slaveConnection)) " is 123.
Long Statement,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,CanJoinPool,The length of the statement  "            if (!Helpers.FeatureForbidden(slaveConnection' Host.RestrictManagementOnVLAN) && !HasCompatibleManagementInterface(slaveConnection)) " is 132.
Long Statement,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,CompatibleCPUs,The length of the statement  "                    return MaskableTo(slave_cpu_info["maskable"]' slave_cpu_info["physical_features"]' master_cpu_info["features"]' cpuid_feature_mask); " is 132.
Long Statement,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,DifferentHomogeneousUpdates,The length of the statement  "            var masterUpdates = master.AppliedUpdates().Where(update => update.EnforceHomogeneity()).Select(update => update.uuid).ToList(); " is 128.
Long Statement,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,DifferentHomogeneousUpdates,The length of the statement  "            var slaveUpdates = slave.AppliedUpdates().Where(update => update.EnforceHomogeneity()).Select(update => update.uuid).ToList(); " is 126.
Long Statement,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,CompatibleAdConfig,The length of the statement  "            // CA-30223: There is no need to check the config of the auth services are the same' as xapi only relies on these two values being equal " is 136.
Long Statement,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,WillExceedPoolMaxSize,The length of the statement  "            return Helpers.FeatureForbidden(connection' Host.RestrictPoolSize) && connection.Cache.HostCount + poolSizeIncrement > 3; " is 121.
Long Statement,XenAdmin.Core,RbacCollectorProxy,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\RbacCollectorProxy.cs,Invoke,The length of the statement  "            if (pmi.MethodName == "add_to_other_config" || pmi.MethodName == "remove_from_other_config")  // these calls are special because they can have per-key permissions " is 162.
Long Statement,XenAdmin.Core,SimpleProxyMethodParser,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\SimpleProxyMethodParser.cs,ParseTypeAndNameOnly,The length of the statement  "            MethodType fakeMethodType = proxyMethodName.StartsWith(String.Format("{0}_"' typeName)) ? MethodType.Sync : MethodType.Async; " is 125.
Long Statement,XenAdmin.Core,SimpleProxyMethodParser,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\SimpleProxyMethodParser.cs,ParseTypeAndNameOnly,The length of the statement  "            string methodName = fakeMethodType == MethodType.Sync ? proxyMethodName.Substring(typeName.Length + 1) : proxyMethodName.Substring(7 + typeName.Length); " is 152.
Long Statement,XenAdmin.Core,SimpleProxyMethodParser,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\SimpleProxyMethodParser.cs,GetTypeName,The length of the statement  "                if (proxyMethodName.StartsWith(string.Format("{0}_"' type)) || proxyMethodName.StartsWith(string.Format("async_{0}_"' type))) " is 125.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The length of the statement  "                return FormatFriendly(string.Format("Label-performance.nic_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' m.Groups[1].Value); " is 126.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The length of the statement  "            	       	: FormatFriendly(string.Format("Label-performance.xenbr_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' network.Name()); " is 120.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The length of the statement  "				return FormatFriendly(string.Format("Label-performance.xapi_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' m.Groups[1].Value); " is 127.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The length of the statement  "                return FormatFriendly(string.Format("Label-performance.tap_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' m.Groups[1].Value); " is 126.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,FindNetworkOfVIF,The length of the statement  "                if (vif.device == device && (iXenObject is Host && ((Host)iXenObject).resident_VMs.Contains(vif.VM) || iXenObject is VM && vif.VM.opaque_ref == iXenObject.opaque_ref)) " is 167.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,FindVlan,The length of the statement  "				if (pif.device == device && (iXenObject is Host && pif.host.opaque_ref == iXenObject.opaque_ref || iXenObject is VM && pif.host.opaque_ref == ((VM)iXenObject).resident_on.opaque_ref) && pif.VLAN == long.Parse(tag)) " is 214.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,FindPIF,The length of the statement  "                if ((!physical || pif.IsPhysical()) && pif.device == device && (iXenObject is Host && pif.host.opaque_ref == iXenObject.opaque_ref || iXenObject is VM && pif.host.opaque_ref == ((VM)iXenObject).resident_on.opaque_ref)) " is 218.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,RestartPriorityI18n,The length of the statement  "                return XenAdmin.Core.PropertyManager.GetFriendlyName("Label-VM.ha_restart_priority." + priority.ToString()) ?? priority.ToString(); " is 131.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,RestartPriorityDescription,The length of the statement  "                return XenAdmin.Core.PropertyManager.GetFriendlyName("Description-VM.ha_restart_priority." + priority.ToString()) ?? priority.ToString(); " is 137.
Long Statement,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,ContainerCapability,The length of the statement  "           return CreamOrGreater(connection) && master.SuppPacks().Any(suppPack => suppPack.Name.ToLower().StartsWith("xscontainer"));  " is 123.
Long Statement,XenAdmin.Core,I18NException,C:\repos\xenserver_xenadmin\XenModel\I18NException.cs,ToString,The length of the statement  "            return string.Format("I18NException of type '{0}' occurred\nException parameters: '{1}'\n{2}"' Type' string.Join("' "' Parameters)' base.ToString()); " is 149.
Long Statement,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,ApplyRecommendationsForVendorDevice,The length of the statement  "            if (hasVendorDeviceRecommendation && !poolPolicyNoVendorDevice && !Helpers.FeatureForbidden(VM' Host.RestrictVendorDevice)) " is 123.
Long Statement,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,ApplyRecommendationsForVendorDevice,The length of the statement  "                log.DebugFormat("Recommendation (has-vendor-device = true) has been found on the template ({0}) and the host is licensed' so applying it on VM ({1}) being created."' Template.opaque_ref' VM.opaque_ref); " is 202.
Long Statement,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,ApplyRecommendationsForVendorDevice,The length of the statement  "                log.DebugFormat("Recommendation (has-vendor-device = true) has not been applied on the VM ({0}) being created."' VM.opaque_ref); " is 128.
Long Statement,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,ApplyRecommendationsForVendorDevice,The length of the statement  "                    log.DebugFormat("Helpers.FeatureForbidden(VM' Host.RestrictVendorDevice) returned {0}"' Helpers.FeatureForbidden(VM' Host.RestrictVendorDevice)); " is 145.
Long Statement,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,SetVMParams,The length of the statement  "            if (Template.memory_dynamic_min != MemoryDynamicMin || Template.memory_dynamic_max != MemoryDynamicMax || Template.memory_static_max != MemoryStaticMax) " is 152.
Long Statement,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,SetVMParams,The length of the statement  "                XenAPI.VM.set_memory_limits(Session' VM.opaque_ref' Template.memory_static_min' MemoryStaticMax' MemoryDynamicMin' MemoryDynamicMax); " is 133.
Long Statement,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddCdDrive,The length of the statement  "                return; // we have skipped the install media page because we are a cutom template with no cd drive - the user doesnt want a cd drive " is 132.
Long Statement,XenAdmin.Actions.VMActions,ResumeAndStartVMsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ResumeAndStartVMsAction.cs,Run,The length of the statement  "                Description = string.Format(Messages.ACTION_RESUMEANDSTARTVMS_STARTINGN' ActionCountCompleted - VmsToResume.Count' VmsToStart.Count); " is 133.
Long Statement,XenAdmin.Actions.VMActions,SuspendAndShutdownVMsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\SuspendAndShutdownVMsAction.cs,Run,The length of the statement  "                Description = string.Format(Messages.SHUTTING_DOWN_VM_OUT_OF' ActionCountCompleted - VmsToSuspend.Count + 1' VmsToShutdown.Count); " is 130.
Long Statement,XenAdmin.Actions.VMActions,VMDestroyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMDestroyAction.cs,DestroyVM,The length of the statement  "            DestroyVM(session' vm' deleteAllOwnerDisks ? vm.Connection.ResolveAll(vm.VBDs).FindAll(x => x.GetIsOwner()) : new List<VBD>()' new List<VM>()); " is 143.
Long Statement,XenAdmin.Actions.VMActions,VMDestroyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMDestroyAction.cs,DestroyVM,The length of the statement  "                //CA-115249. XenAPI could have already deleted the VDI. Destroy suspended VM and destroy snapshot functions are affected. " is 121.
Long Statement,XenAdmin.Actions.VMActions,VMDestroyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMDestroyAction.cs,DestroyVM,The length of the statement  "                if (failure != null && failure.ErrorDescription != null && failure.ErrorDescription.Count > 0 && failure.ErrorDescription[0] == "HANDLE_INVALID") " is 145.
Long Statement,XenAdmin.Alerts,PerfmonDefinition,C:\repos\xenserver_xenadmin\XenModel\Alerts\PerfmonDefinition.cs,ToXmlNode,The length of the statement  "            XmlNode alarmAutoInhibitPeriodNode = doc.CreateNode(XmlNodeType.Element' ALARM_AUTO_INHIBIT_PERIOD_ELEMENT_NAME' xmlns); " is 120.
Long Statement,XenAdmin.Model,DockerContainers,C:\repos\xenserver_xenadmin\XenModel\DockerContainers.cs,GetContainersFromOtherConfig,The length of the statement  "                    DockerContainer newContainer = new DockerContainer(vm' id' name' string.Empty' status' container' created' image' command' ports); " is 130.
Long Statement,XenAdmin.Model,DockerContainer,C:\repos\xenserver_xenadmin\XenModel\DockerContainer.cs,UpdateFrom,The length of the statement  "            opaque_ref = parent.opaque_ref + uuid; //using parent.opaque_ref + uuid' because opaque_ref does not exist at server side " is 121.
Long Statement,XenAdmin.Model,HealthCheckSettings,C:\repos\xenserver_xenadmin\XenModel\HealthCheckSettings.cs,ToDictionary,The length of the statement  "            var newConfig = baseDictionary == null ? new Dictionary<string' string>() : new Dictionary<string' string>(baseDictionary);" is 123.
Long Statement,XenAdmin.Model,HealthCheckSettings,C:\repos\xenserver_xenadmin\XenModel\HealthCheckSettings.cs,GetReportAnalysisLink,The length of the statement  "            return string.Format("{0}/{1}/{2}"' string.IsNullOrEmpty(domainName) ? REPORT_LINK_DOMAIN_NAME : domainName' REPORT_LINK_PATH' ReportAnalysisUploadUuid);" is 153.
Long Statement,XenAdmin.Model,HealthCheckSettings,C:\repos\xenserver_xenadmin\XenModel\HealthCheckSettings.cs,StringToDateTime,The length of the statement  "            DateTime dateTime = DateTime.ParseExact(dateTimeString' "o"' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind);" is 121.
Long Statement,XenAdmin.Model,HealthCheckSettings,C:\repos\xenserver_xenadmin\XenModel\HealthCheckSettings.cs,TryParseStringToDateTime,The length of the statement  "            return DateTime.TryParseExact(dateTimeString' "o"' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out dateTime);" is 125.
Long Statement,XenAdmin.CustomFields,CustomFieldDefinition,C:\repos\xenserver_xenadmin\XenModel\CustomFields\CustomFieldDefinition.cs,ToXmlNode,The length of the statement  "            SearchMarshalling.AddAttribute(doc' node' "defaultValue"' "");  // always unused' but needed until George is retired because of CA-37473 " is 136.
Long Statement,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,CorrectRoundingErrors,The length of the statement  "            if (roundingDiff > -1.0 && roundingDiff < 1.0)  // within 1 byte: although I think it will always be positive in the case we want to correct " is 140.
Long Statement,XenAdmin.Network,Cache,C:\repos\xenserver_xenadmin\XenModel\Network\Cache.cs,IgnoreObjectChange,The length of the statement  "                return oldPool != null && newPool.DeepEquals(oldPool' false); //We do want to see changes in the Pool.current_operations. " is 121.
Long Statement,XenAdmin.Network,Cache,C:\repos\xenserver_xenadmin\XenModel\Network\Cache.cs,UpdateDockerContainersForVM,The length of the statement  "                containersGoneFromThisVM = _dockerContainers.Where(c => c.Value != null && c.Value.Parent.uuid == vm.uuid && !containers.Any(cont => cont.uuid == c.Value.uuid)).ToList(); " is 170.
Long Statement,XenAdmin.Network,Heartbeat,C:\repos\xenserver_xenadmin\XenModel\Network\Heartbeat.cs,DoHeartbeat,The length of the statement  "                    session.ConnectionGroupName = heartbeatConnectionGroupName; // this will force the Heartbeat session onto its own set of TCP streams (see CA-108676) " is 148.
Long Statement,XenAdmin.Network,Heartbeat,C:\repos\xenserver_xenadmin\XenModel\Network\Heartbeat.cs,DoHeartbeat,The length of the statement  "                if (webResponse != null && webResponse.StatusCode == HttpStatusCode.ProxyAuthenticationRequired) // work-around for CA-214653 " is 125.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,GetNewSession,The length of the statement  "                    session.login_with_password(uname' pwd' !string.IsNullOrEmpty(Version) ? Version : Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent); " is 147.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,GetNewSession,The length of the statement  "                    if (e.Status == WebExceptionStatus.NameResolutionFailure || e.Status == WebExceptionStatus.ProtocolError || attempt >= DEFAULT_MAX_SESSION_LOGIN_ATTEMPTS) " is 154.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,BeginConnect,The length of the statement  "            //InvokeHelper.Synchronizer is used for synchronizing the cache update. Must not be null at this point. It can be initialized through InvokeHelper.Initialize() " is 159.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ClearCache,The length of the statement  "            // This call to Clear needs to occur on the background thread' otherwise the event firing in response to all the changes " is 120.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ClearCache,The length of the statement  "            // granularity.  If you do all this on the event thread' then the app tends to go (Not Responding) when you lose a connection. " is 126.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ClearCache,The length of the statement  "            // It doesn't actually occur on the background thread all the time.  There's a path from AddServerDialog.ConnectToServer. " is 121.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ConnectWorkerThread,The length of the statement  "                eventNextSession.ConnectionGroupName = eventNextConnectionGroupName; // this will force the eventNextSession onto its own set of TCP streams (see CA-108676) " is 156.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ConnectWorkerThread,The length of the statement  "                                (exn is WebException && ((exn as WebException).Status == WebExceptionStatus.KeepAliveFailure || (exn as WebException).Status == WebExceptionStatus.ConnectFailure))) " is 164.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionResult,The length of the statement  "                    if (FindingNewMaster && (error is WebException || (f != null && f.ErrorDescription[0] != Failure.RBAC_PERMISSION_DENIED))) " is 122.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionResult,The length of the statement  "                                log.DebugFormat("While trying to find a connection for {0}' tried to connect to every remembered host. Will now loop back through pool members again."' " is 151.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionResult,The length of the statement  "                                log.DebugFormat("Stopping search for new master for {0}: timeout reached without success. Trying the old master one last time"' " is 127.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionLost,The length of the statement  "                description = string.Format(Messages.CONNECTION_LOST_NOTICE_MASTER_IN_X_SECONDS' LastConnectionFullName' XenConnection.SEARCH_NEW_MASTER_TIMEOUT_MS / 1000); " is 156.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionLost,The length of the statement  "                log.DebugFormat("Beginning search for new master; will give up after {0} seconds"' SEARCH_NEW_MASTER_STOP_AFTER.TotalSeconds); " is 126.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionLost,The length of the statement  "                description = string.Format(Messages.CONNECTION_LOST_RECONNECT_IN_X_SECONDS' LastConnectionFullName' ReconnectHostTimeoutMs / 1000); " is 132.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,StartReconnectMasterTimer,The length of the statement  "            OnConnectionMessageChanged(string.Format(Messages.CONNECTION_WILL_RETRY_SLAVE' LastConnectionFullName.Ellipsise(25) ' timeout / 1000)); " is 135.
Long Statement,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ReconnectMasterTimer,The length of the statement  "            OnConnectionMessageChanged(string.Format(Messages.CONNECTION_RETRYING_SLAVE' LastConnectionFullName.Ellipsise(25)' Hostname)); " is 126.
Long Statement,XenAdmin.Network,TaskPoller,C:\repos\xenserver_xenadmin\XenModel\Network\TaskPoller.cs,GetTask,The length of the statement  "                return (Task)_action.DoWithSessionRetry(ref session' (Task.TaskGetRecordOp)Task.get_record' _action.RelatedTask.opaque_ref); " is 124.
Long Statement,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,Get,The length of the statement  "                if (e is WebException && e.InnerException is IOException && Win32.GetHResult(e.InnerException as IOException) == Win32.ERROR_DISK_FULL) " is 135.
Long Statement,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,CONNECT,The length of the statement  "            return HTTP.CONNECT(uri' XenAdminConfigManager.Provider.GetProxyFromSettings(connection)' session' XenAdminConfigManager.Provider.GetProxyTimeout(timeout)); " is 156.
Long Statement,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,PUT,The length of the statement  "            return HTTP.PUT(uri' XenAdminConfigManager.Provider.GetProxyFromSettings(null)' ContentLength' XenAdminConfigManager.Provider.GetProxyTimeout(timeout)); " is 152.
Long Statement,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,GET,The length of the statement  "            return HTTP.GET(uri' XenAdminConfigManager.Provider.GetProxyFromSettings(connection' isForXenServer)' XenAdminConfigManager.Provider.GetProxyTimeout(timeout)); " is 159.
Long Statement,XenAPI,PUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PUSB.cs,set_other_config,The length of the statement  "            session.proxy.pusb_set_other_config(session.uuid' _pusb ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,PUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PUSB.cs,async_set_passthrough_enabled,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pusb_set_passthrough_enabled(session.uuid' _pusb ?? ""' _value).parse()); " is 120.
Long Statement,XenAPI,VMSS,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VMSS.cs,GetNextRunTime,The length of the statement  "                return GetWeeklyDate(serverLocalTime' BackupScheduleHour()' BackupScheduleMin()' new List<DayOfWeek>(DaysOfWeekBackup()));" is 122.
Long Statement,XenAPI,VMSS,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VMSS.cs,UpdateFromProxy,The length of the statement  "            frequency = proxy.frequency == null ? (vmss_frequency) 0 : (vmss_frequency)Helper.EnumParseDefault(typeof(vmss_frequency)' (string)proxy.frequency); " is 148.
Long Statement,XenAPI,VMSS,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VMSS.cs,get_type,The length of the statement  "            return (vmss_type)Helper.EnumParseDefault(typeof(vmss_type)' (string)session.proxy.vmss_get_type(session.uuid' _vmss ?? "").parse()); " is 133.
Long Statement,XenAPI,VMSS,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VMSS.cs,get_frequency,The length of the statement  "            return (vmss_frequency)Helper.EnumParseDefault(typeof(vmss_frequency)' (string)session.proxy.vmss_get_frequency(session.uuid' _vmss ?? "").parse()); " is 148.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,EnforceHomogeneity,The length of the statement  "            var poolPatchOfUpdate = Connection.Cache.Pool_patches.FirstOrDefault(p => p.pool_update != null && p.pool_update.opaque_ref == opaque_ref); " is 139.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,UpdateFromProxy,The length of the statement  "            after_apply_guidance = proxy.after_apply_guidance == null ? null : Helper.StringArrayToEnumList<update_after_apply_guidance>(proxy.after_apply_guidance); " is 153.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,ToProxy,The length of the statement  "            result_.after_apply_guidance = (after_apply_guidance != null) ? Helper.ObjectListToStringArray(after_apply_guidance) : new string[] {}; " is 135.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,get_record,The length of the statement  "            return new Pool_update((Proxy_Pool_update)session.proxy.pool_update_get_record(session.uuid' _pool_update ?? "").parse()); " is 122.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,get_after_apply_guidance,The length of the statement  "            return Helper.StringArrayToEnumList<update_after_apply_guidance>(session.proxy.pool_update_get_after_apply_guidance(session.uuid' _pool_update ?? "").parse()); " is 159.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.pool_update_get_other_config(session.uuid' _pool_update ?? "").parse()); " is 131.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,set_other_config,The length of the statement  "            session.proxy.pool_update_set_other_config(session.uuid' _pool_update ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 137.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,precheck,The length of the statement  "            return (livepatch_status)Helper.EnumParseDefault(typeof(livepatch_status)' (string)session.proxy.pool_update_precheck(session.uuid' _pool_update ?? ""' _host ?? "").parse()); " is 174.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,async_precheck,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_update_precheck(session.uuid' _pool_update ?? ""' _host ?? "").parse()); " is 124.
Long Statement,XenAPI,Pool_update,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_update.cs,async_apply,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_update_apply(session.uuid' _pool_update ?? ""' _host ?? "").parse()); " is 121.
Long Statement,XenAPI,PVS_cache_storage,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_cache_storage.cs,get_record,The length of the statement  "            return new PVS_cache_storage((Proxy_PVS_cache_storage)session.proxy.pvs_cache_storage_get_record(session.uuid' _pvs_cache_storage ?? "").parse()); " is 146.
Long Statement,XenAPI,PVS_cache_storage,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_cache_storage.cs,get_by_uuid,The length of the statement  "            return XenRef<PVS_cache_storage>.Create(session.proxy.pvs_cache_storage_get_by_uuid(session.uuid' _uuid ?? "").parse()); " is 120.
Long Statement,XenAPI,PVS_cache_storage,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_cache_storage.cs,create,The length of the statement  "            return XenRef<PVS_cache_storage>.Create(session.proxy.pvs_cache_storage_create(session.uuid' _record.ToProxy()).parse()); " is 121.
Long Statement,XenAPI,PVS_cache_storage,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_cache_storage.cs,async_destroy,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pvs_cache_storage_destroy(session.uuid' _pvs_cache_storage ?? "").parse()); " is 122.
Long Statement,XenAPI,PVS_cache_storage,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_cache_storage.cs,get_site,The length of the statement  "            return XenRef<PVS_site>.Create(session.proxy.pvs_cache_storage_get_site(session.uuid' _pvs_cache_storage ?? "").parse()); " is 121.
Long Statement,XenAPI,PVS_cache_storage,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_cache_storage.cs,get_all_records,The length of the statement  "            return XenRef<PVS_cache_storage>.Create<Proxy_PVS_cache_storage>(session.proxy.pvs_cache_storage_get_all_records(session.uuid).parse()); " is 136.
Long Statement,XenAPI,PVS_site,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_site.cs,get_cache_storage,The length of the statement  "            return XenRef<PVS_cache_storage>.Create(session.proxy.pvs_site_get_cache_storage(session.uuid' _pvs_site ?? "").parse()); " is 121.
Long Statement,XenAPI,PVS_site,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_site.cs,introduce,The length of the statement  "            return XenRef<PVS_site>.Create(session.proxy.pvs_site_introduce(session.uuid' _name_label ?? ""' _name_description ?? ""' _pvs_uuid ?? "").parse()); " is 148.
Long Statement,XenAPI,PVS_site,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_site.cs,async_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pvs_site_introduce(session.uuid' _name_label ?? ""' _name_description ?? ""' _pvs_uuid ?? "").parse()); " is 150.
Long Statement,XenAPI,PVS_site,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_site.cs,async_set_PVS_uuid,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pvs_site_set_pvs_uuid(session.uuid' _pvs_site ?? ""' _value ?? "").parse()); " is 123.
Long Statement,XenAPI,PVS_proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_proxy.cs,UpdateFromProxy,The length of the statement  "            status = proxy.status == null ? (pvs_proxy_status) 0 : (pvs_proxy_status)Helper.EnumParseDefault(typeof(pvs_proxy_status)' (string)proxy.status); " is 145.
Long Statement,XenAPI,PVS_proxy,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_proxy.cs,get_status,The length of the statement  "            return (pvs_proxy_status)Helper.EnumParseDefault(typeof(pvs_proxy_status)' (string)session.proxy.pvs_proxy_get_status(session.uuid' _pvs_proxy ?? "").parse()); " is 159.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,UpdateFromProxy,The length of the statement  "            allocation_algorithm = proxy.allocation_algorithm == null ? (allocation_algorithm) 0 : (allocation_algorithm)Helper.EnumParseDefault(typeof(allocation_algorithm)' (string)proxy.allocation_algorithm); " is 199.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,UpdateFromProxy,The length of the statement  "            supported_VGPU_types = proxy.supported_VGPU_types == null ? null : XenRef<VGPU_type>.Create(proxy.supported_VGPU_types); " is 120.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,ToProxy,The length of the statement  "            result_.supported_VGPU_types = (supported_VGPU_types != null) ? Helper.RefListToStringArray(supported_VGPU_types) : new string[] {}; " is 132.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,ToProxy,The length of the statement  "            result_.enabled_VGPU_types = (enabled_VGPU_types != null) ? Helper.RefListToStringArray(enabled_VGPU_types) : new string[] {}; " is 126.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.gpu_group_get_other_config(session.uuid' _gpu_group ?? "").parse()); " is 127.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,get_allocation_algorithm,The length of the statement  "            return (allocation_algorithm)Helper.EnumParseDefault(typeof(allocation_algorithm)' (string)session.proxy.gpu_group_get_allocation_algorithm(session.uuid' _gpu_group ?? "").parse()); " is 181.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,get_supported_VGPU_types,The length of the statement  "            return XenRef<VGPU_type>.Create(session.proxy.gpu_group_get_supported_vgpu_types(session.uuid' _gpu_group ?? "").parse()); " is 122.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,get_enabled_VGPU_types,The length of the statement  "            return XenRef<VGPU_type>.Create(session.proxy.gpu_group_get_enabled_vgpu_types(session.uuid' _gpu_group ?? "").parse()); " is 120.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,set_other_config,The length of the statement  "            session.proxy.gpu_group_set_other_config(session.uuid' _gpu_group ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 133.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,set_allocation_algorithm,The length of the statement  "            session.proxy.gpu_group_set_allocation_algorithm(session.uuid' _gpu_group ?? ""' allocation_algorithm_helper.ToString(_allocation_algorithm)).parse(); " is 150.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,create,The length of the statement  "            return XenRef<GPU_group>.Create(session.proxy.gpu_group_create(session.uuid' _name_label ?? ""' _name_description ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse()); " is 182.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_gpu_group_create(session.uuid' _name_label ?? ""' _name_description ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse()); " is 183.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,get_remaining_capacity,The length of the statement  "            return long.Parse((string)session.proxy.gpu_group_get_remaining_capacity(session.uuid' _gpu_group ?? ""' _vgpu_type ?? "").parse()); " is 132.
Long Statement,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,async_get_remaining_capacity,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_gpu_group_get_remaining_capacity(session.uuid' _gpu_group ?? ""' _vgpu_type ?? "").parse()); " is 139.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,UpdateFromProxy,The length of the statement  "            supported_VGPU_types = proxy.supported_VGPU_types == null ? null : XenRef<VGPU_type>.Create(proxy.supported_VGPU_types); " is 120.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,UpdateFromProxy,The length of the statement  "            supported_VGPU_max_capacities = proxy.supported_VGPU_max_capacities == null ? null : Maps.convert_from_proxy_XenRefVGPU_type_long(proxy.supported_VGPU_max_capacities); " is 167.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,UpdateFromProxy,The length of the statement  "            dom0_access = proxy.dom0_access == null ? (pgpu_dom0_access) 0 : (pgpu_dom0_access)Helper.EnumParseDefault(typeof(pgpu_dom0_access)' (string)proxy.dom0_access); " is 160.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,UpdateFromProxy,The length of the statement  "            compatibility_metadata = proxy.compatibility_metadata == null ? null : Maps.convert_from_proxy_string_string(proxy.compatibility_metadata); " is 139.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,ToProxy,The length of the statement  "            result_.supported_VGPU_types = (supported_VGPU_types != null) ? Helper.RefListToStringArray(supported_VGPU_types) : new string[] {}; " is 132.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,ToProxy,The length of the statement  "            result_.enabled_VGPU_types = (enabled_VGPU_types != null) ? Helper.RefListToStringArray(enabled_VGPU_types) : new string[] {}; " is 126.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,get_supported_VGPU_max_capacities,The length of the statement  "            return Maps.convert_from_proxy_XenRefVGPU_type_long(session.proxy.pgpu_get_supported_vgpu_max_capacities(session.uuid' _pgpu ?? "").parse()); " is 141.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,get_dom0_access,The length of the statement  "            return (pgpu_dom0_access)Helper.EnumParseDefault(typeof(pgpu_dom0_access)' (string)session.proxy.pgpu_get_dom0_access(session.uuid' _pgpu ?? "").parse()); " is 154.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,get_compatibility_metadata,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.pgpu_get_compatibility_metadata(session.uuid' _pgpu ?? "").parse()); " is 127.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,set_other_config,The length of the statement  "            session.proxy.pgpu_set_other_config(session.uuid' _pgpu ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,async_add_enabled_VGPU_types,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pgpu_add_enabled_vgpu_types(session.uuid' _pgpu ?? ""' _value ?? "").parse()); " is 125.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,async_remove_enabled_VGPU_types,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pgpu_remove_enabled_vgpu_types(session.uuid' _pgpu ?? ""' _value ?? "").parse()); " is 128.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,set_enabled_VGPU_types,The length of the statement  "            session.proxy.pgpu_set_enabled_vgpu_types(session.uuid' _pgpu ?? ""' (_value != null) ? Helper.RefListToStringArray(_value) : new string[] {}).parse(); " is 151.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,async_set_enabled_VGPU_types,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pgpu_set_enabled_vgpu_types(session.uuid' _pgpu ?? ""' (_value != null) ? Helper.RefListToStringArray(_value) : new string[] {}).parse()); " is 185.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,get_remaining_capacity,The length of the statement  "            return long.Parse((string)session.proxy.pgpu_get_remaining_capacity(session.uuid' _pgpu ?? ""' _vgpu_type ?? "").parse()); " is 122.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,async_get_remaining_capacity,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pgpu_get_remaining_capacity(session.uuid' _pgpu ?? ""' _vgpu_type ?? "").parse()); " is 129.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,enable_dom0_access,The length of the statement  "            return (pgpu_dom0_access)Helper.EnumParseDefault(typeof(pgpu_dom0_access)' (string)session.proxy.pgpu_enable_dom0_access(session.uuid' _pgpu ?? "").parse()); " is 157.
Long Statement,XenAPI,PGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PGPU.cs,disable_dom0_access,The length of the statement  "            return (pgpu_dom0_access)Helper.EnumParseDefault(typeof(pgpu_dom0_access)' (string)session.proxy.pgpu_disable_dom0_access(session.uuid' _pgpu ?? "").parse()); " is 158.
Long Statement,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,UpdateFromProxy,The length of the statement  "            scheduled_to_be_resident_on = proxy.scheduled_to_be_resident_on == null ? null : XenRef<PGPU>.Create(proxy.scheduled_to_be_resident_on); " is 136.
Long Statement,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,set_other_config,The length of the statement  "            session.proxy.vgpu_set_other_config(session.uuid' _vgpu ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,create,The length of the statement  "            return XenRef<VGPU>.Create(session.proxy.vgpu_create(session.uuid' _vm ?? ""' _gpu_group ?? ""' _device ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse()); " is 172.
Long Statement,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vgpu_create(session.uuid' _vm ?? ""' _gpu_group ?? ""' _device ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse()); " is 178.
Long Statement,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,create,The length of the statement  "            return XenRef<VGPU>.Create(session.proxy.vgpu_create(session.uuid' _vm ?? ""' _gpu_group ?? ""' _device ?? ""' Maps.convert_to_proxy_string_string(_other_config)' _type ?? "").parse()); " is 185.
Long Statement,XenAPI,VGPU,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vgpu_create(session.uuid' _vm ?? ""' _gpu_group ?? ""' _device ?? ""' Maps.convert_to_proxy_string_string(_other_config)' _type ?? "").parse()); " is 191.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,UpdateFromProxy,The length of the statement  "            supported_on_GPU_groups = proxy.supported_on_GPU_groups == null ? null : XenRef<GPU_group>.Create(proxy.supported_on_GPU_groups); " is 129.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,UpdateFromProxy,The length of the statement  "            enabled_on_GPU_groups = proxy.enabled_on_GPU_groups == null ? null : XenRef<GPU_group>.Create(proxy.enabled_on_GPU_groups); " is 123.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,UpdateFromProxy,The length of the statement  "            implementation = proxy.implementation == null ? (vgpu_type_implementation) 0 : (vgpu_type_implementation)Helper.EnumParseDefault(typeof(vgpu_type_implementation)' (string)proxy.implementation); " is 193.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,ToProxy,The length of the statement  "            result_.supported_on_PGPUs = (supported_on_PGPUs != null) ? Helper.RefListToStringArray(supported_on_PGPUs) : new string[] {}; " is 126.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,ToProxy,The length of the statement  "            result_.enabled_on_PGPUs = (enabled_on_PGPUs != null) ? Helper.RefListToStringArray(enabled_on_PGPUs) : new string[] {}; " is 120.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,ToProxy,The length of the statement  "            result_.supported_on_GPU_groups = (supported_on_GPU_groups != null) ? Helper.RefListToStringArray(supported_on_GPU_groups) : new string[] {}; " is 141.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,ToProxy,The length of the statement  "            result_.enabled_on_GPU_groups = (enabled_on_GPU_groups != null) ? Helper.RefListToStringArray(enabled_on_GPU_groups) : new string[] {}; " is 135.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,get_supported_on_GPU_groups,The length of the statement  "            return XenRef<GPU_group>.Create(session.proxy.vgpu_type_get_supported_on_gpu_groups(session.uuid' _vgpu_type ?? "").parse()); " is 125.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,get_enabled_on_GPU_groups,The length of the statement  "            return XenRef<GPU_group>.Create(session.proxy.vgpu_type_get_enabled_on_gpu_groups(session.uuid' _vgpu_type ?? "").parse()); " is 123.
Long Statement,XenAPI,VGPU_type,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VGPU_type.cs,get_implementation,The length of the statement  "            return (vgpu_type_implementation)Helper.EnumParseDefault(typeof(vgpu_type_implementation)' (string)session.proxy.vgpu_type_get_implementation(session.uuid' _vgpu_type ?? "").parse()); " is 183.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,GetFateSharingVMs,The length of the statement  "                    if (otherVm.is_a_real_vm() && otherVm.power_state != vm_power_state.Halted && otherVm.SRs().Intersect(thisVm.SRs()).FirstOrDefault() != null && !fateSharingVms.Contains(otherVm)) " is 178.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<vm_appliance_operation>(proxy.allowed_operations); " is 142.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_vm_appliance_operation(proxy.current_operations); " is 143.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,get_record,The length of the statement  "            return new VM_appliance((Proxy_VM_appliance)session.proxy.vm_appliance_get_record(session.uuid' _vm_appliance ?? "").parse()); " is 126.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<vm_appliance_operation>(session.proxy.vm_appliance_get_allowed_operations(session.uuid' _vm_appliance ?? "").parse()); " is 154.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_vm_appliance_operation(session.proxy.vm_appliance_get_current_operations(session.uuid' _vm_appliance ?? "").parse()); " is 155.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,async_assert_can_be_recovered,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_appliance_assert_can_be_recovered(session.uuid' _vm_appliance ?? ""' _session_to ?? "").parse()); " is 147.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,get_SRs_required_for_recovery,The length of the statement  "            return XenRef<SR>.Create(session.proxy.vm_appliance_get_srs_required_for_recovery(session.uuid' _vm_appliance ?? ""' _session_to ?? "").parse()); " is 145.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,async_get_SRs_required_for_recovery,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_appliance_get_srs_required_for_recovery(session.uuid' _vm_appliance ?? ""' _session_to ?? "").parse()); " is 153.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,async_recover,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_appliance_recover(session.uuid' _vm_appliance ?? ""' _session_to ?? ""' _force).parse()); " is 139.
Long Statement,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,get_all_records,The length of the statement  "            return XenRef<VM_appliance>.Create<Proxy_VM_appliance>(session.proxy.vm_appliance_get_all_records(session.uuid).parse()); " is 121.
Long Statement,XenAPI,DR_task,C:\repos\xenserver_xenadmin\XenModel\XenAPI\DR_task.cs,create,The length of the statement  "            return XenRef<DR_task>.Create(session.proxy.dr_task_create(session.uuid' _type ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _whitelist).parse()); " is 160.
Long Statement,XenAPI,DR_task,C:\repos\xenserver_xenadmin\XenModel\XenAPI\DR_task.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_dr_task_create(session.uuid' _type ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _whitelist).parse()); " is 163.
Long Statement,XenAPI,LVHD,C:\repos\xenserver_xenadmin\XenModel\XenAPI\LVHD.cs,enable_thin_provisioning,The length of the statement  "            return (string)session.proxy.lvhd_enable_thin_provisioning(session.uuid' _host ?? ""' _sr ?? ""' _initial_allocation.ToString()' _allocation_quantum.ToString()).parse(); " is 169.
Long Statement,XenAPI,LVHD,C:\repos\xenserver_xenadmin\XenModel\XenAPI\LVHD.cs,async_enable_thin_provisioning,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_lvhd_enable_thin_provisioning(session.uuid' _host ?? ""' _sr ?? ""' _initial_allocation.ToString()' _allocation_quantum.ToString()).parse()); " is 188.
Long Statement,XenAPI,PCI,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PCI.cs,set_other_config,The length of the statement  "            session.proxy.pci_set_other_config(session.uuid' _pci ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 121.
Long Statement,XenAPI,PVS_server,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PVS_server.cs,introduce,The length of the statement  "            return XenRef<PVS_server>.Create(session.proxy.pvs_server_introduce(session.uuid' _addresses' _first_port.ToString()' _last_port.ToString()' _site ?? "").parse()); " is 163.
Long Statement,XenAPI,PVS_server,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PVS_server.cs,async_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pvs_server_introduce(session.uuid' _addresses' _first_port.ToString()' _last_port.ToString()' _site ?? "").parse()); " is 163.
Long Statement,XenAPI,SDN_controller,C:\repos\xenserver_xenadmin\XenModel\XenAPI\SDN_controller.cs,UpdateFromProxy,The length of the statement  "            protocol = proxy.protocol == null ? (sdn_controller_protocol) 0 : (sdn_controller_protocol)Helper.EnumParseDefault(typeof(sdn_controller_protocol)' (string)proxy.protocol); " is 172.
Long Statement,XenAPI,SDN_controller,C:\repos\xenserver_xenadmin\XenModel\XenAPI\SDN_controller.cs,get_record,The length of the statement  "            return new SDN_controller((Proxy_SDN_controller)session.proxy.sdn_controller_get_record(session.uuid' _sdn_controller ?? "").parse()); " is 134.
Long Statement,XenAPI,SDN_controller,C:\repos\xenserver_xenadmin\XenModel\XenAPI\SDN_controller.cs,get_protocol,The length of the statement  "            return (sdn_controller_protocol)Helper.EnumParseDefault(typeof(sdn_controller_protocol)' (string)session.proxy.sdn_controller_get_protocol(session.uuid' _sdn_controller ?? "").parse()); " is 185.
Long Statement,XenAPI,SDN_controller,C:\repos\xenserver_xenadmin\XenModel\XenAPI\SDN_controller.cs,introduce,The length of the statement  "            return XenRef<SDN_controller>.Create(session.proxy.sdn_controller_introduce(session.uuid' sdn_controller_protocol_helper.ToString(_protocol)' _address ?? ""' _port.ToString()).parse()); " is 185.
Long Statement,XenAPI,SDN_controller,C:\repos\xenserver_xenadmin\XenModel\XenAPI\SDN_controller.cs,async_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sdn_controller_introduce(session.uuid' sdn_controller_protocol_helper.ToString(_protocol)' _address ?? ""' _port.ToString()).parse()); " is 181.
Long Statement,XenAPI,SDN_controller,C:\repos\xenserver_xenadmin\XenModel\XenAPI\SDN_controller.cs,get_all_records,The length of the statement  "            return XenRef<SDN_controller>.Create<Proxy_SDN_controller>(session.proxy.sdn_controller_get_all_records(session.uuid).parse()); " is 127.
Long Statement,XenAPI,USB_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI\USB_group.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.usb_group_get_other_config(session.uuid' _usb_group ?? "").parse()); " is 127.
Long Statement,XenAPI,USB_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI\USB_group.cs,set_other_config,The length of the statement  "            session.proxy.usb_group_set_other_config(session.uuid' _usb_group ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 133.
Long Statement,XenAPI,USB_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI\USB_group.cs,create,The length of the statement  "            return XenRef<USB_group>.Create(session.proxy.usb_group_create(session.uuid' _name_label ?? ""' _name_description ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse()); " is 182.
Long Statement,XenAPI,USB_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI\USB_group.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_usb_group_create(session.uuid' _name_label ?? ""' _name_description ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse()); " is 183.
Long Statement,XenAPI,VUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VUSB.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<vusb_operations>(proxy.allowed_operations); " is 135.
Long Statement,XenAPI,VUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VUSB.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_vusb_operations(proxy.current_operations); " is 136.
Long Statement,XenAPI,VUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VUSB.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,VUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VUSB.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<vusb_operations>(session.proxy.vusb_get_allowed_operations(session.uuid' _vusb ?? "").parse()); " is 131.
Long Statement,XenAPI,VUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VUSB.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_vusb_operations(session.proxy.vusb_get_current_operations(session.uuid' _vusb ?? "").parse()); " is 132.
Long Statement,XenAPI,VUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VUSB.cs,set_other_config,The length of the statement  "            session.proxy.vusb_set_other_config(session.uuid' _vusb ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,VUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VUSB.cs,create,The length of the statement  "            return XenRef<VUSB>.Create(session.proxy.vusb_create(session.uuid' _vm ?? ""' _usb_group ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse()); " is 157.
Long Statement,XenAPI,VUSB,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VUSB.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vusb_create(session.uuid' _vm ?? ""' _usb_group ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse()); " is 163.
Long Statement,XenAPI,Auth,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Auth.cs,get_subject_information_from_identifier,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.auth_get_subject_information_from_identifier(session.uuid' _subject_identifier ?? "").parse()); " is 154.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,get_mode,The length of the statement  "            return (bond_mode)Helper.EnumParseDefault(typeof(bond_mode)' (string)session.proxy.bond_get_mode(session.uuid' _bond ?? "").parse()); " is 133.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,set_other_config,The length of the statement  "            session.proxy.bond_set_other_config(session.uuid' _bond ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,create,The length of the statement  "            return XenRef<Bond>.Create(session.proxy.bond_create(session.uuid' _network ?? ""' (_members != null) ? Helper.RefListToStringArray(_members) : new string[] {}' _mac ?? "").parse()); " is 182.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_bond_create(session.uuid' _network ?? ""' (_members != null) ? Helper.RefListToStringArray(_members) : new string[] {}' _mac ?? "").parse()); " is 188.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,create,The length of the statement  "            return XenRef<Bond>.Create(session.proxy.bond_create(session.uuid' _network ?? ""' (_members != null) ? Helper.RefListToStringArray(_members) : new string[] {}' _mac ?? ""' bond_mode_helper.ToString(_mode)).parse()); " is 216.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_bond_create(session.uuid' _network ?? ""' (_members != null) ? Helper.RefListToStringArray(_members) : new string[] {}' _mac ?? ""' bond_mode_helper.ToString(_mode)).parse()); " is 222.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,create,The length of the statement  "            return XenRef<Bond>.Create(session.proxy.bond_create(session.uuid' _network ?? ""' (_members != null) ? Helper.RefListToStringArray(_members) : new string[] {}' _mac ?? ""' bond_mode_helper.ToString(_mode)' Maps.convert_to_proxy_string_string(_properties)).parse()); " is 266.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_bond_create(session.uuid' _network ?? ""' (_members != null) ? Helper.RefListToStringArray(_members) : new string[] {}' _mac ?? ""' bond_mode_helper.ToString(_mode)' Maps.convert_to_proxy_string_string(_properties)).parse()); " is 272.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,async_set_mode,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_bond_set_mode(session.uuid' _bond ?? ""' bond_mode_helper.ToString(_value)).parse()); " is 132.
Long Statement,XenAPI,Bond,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Bond.cs,async_set_property,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_bond_set_property(session.uuid' _bond ?? ""' _name ?? ""' _value ?? "").parse()); " is 128.
Long Statement,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,ParseRBACFailure,The length of the statement  "                sb.Append(string.Format(Messages.ROLE_ON_CONNECTION' s.FriendlyRoleDescription()' Helpers.GetName(s.Connection).Ellipsise(50))); " is 128.
Long Statement,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,TryParseCslg,The length of the statement  "            if (ErrorDescription.Count > 2 && ErrorDescription[2] != null && ErrorDescription[0] != null && ErrorDescription[0].StartsWith("SR_BACKEND_FAILURE")) " is 149.
Long Statement,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,TryParseCslg,The length of the statement  "                Match m = Regex.Match(ErrorDescription[2]' @"<StorageLinkServiceError>.*</StorageLinkServiceError>"' RegexOptions.Singleline); " is 126.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,Description,The length of the statement  "            if (name_description == "Default install of XenServer" || name_description == "Default install") // i18n: CA-30372' CA-207273 " is 125.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,LongProductVersion,The length of the statement  "            return productVersion != null ? string.Format("{0}.{1}"' productVersion' Helpers.ElyOrGreater(this) ? BuildNumberRaw() : BuildNumber().ToString()) : null; " is 154.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,IsFullyPatched,The length of the statement  "                if (!appliedPatches.Exists(otherPatch => string.Equals(patch1.uuid' otherPatch.uuid' StringComparison.OrdinalIgnoreCase))) " is 122.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,AgentStartTime,The length of the statement  "            if (!double.TryParse(other_config[AGENT_START_TIME]' System.Globalization.NumberStyles.Any' CultureInfo.InvariantCulture' out agentStartTime)) " is 142.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<host_allowed_operations>(proxy.allowed_operations); " is 143.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_host_allowed_operations(proxy.current_operations); " is 144.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            API_version_vendor_implementation = proxy.API_version_vendor_implementation == null ? null : Maps.convert_from_proxy_string_string(proxy.API_version_vendor_implementation); " is 172.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            software_version = proxy.software_version == null ? null : Maps.convert_from_proxy_string_string(proxy.software_version); " is 121.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            cpu_configuration = proxy.cpu_configuration == null ? null : Maps.convert_from_proxy_string_string(proxy.cpu_configuration); " is 124.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            external_auth_service_name = proxy.external_auth_service_name == null ? null : (string)proxy.external_auth_service_name; " is 120.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            external_auth_configuration = proxy.external_auth_configuration == null ? null : Maps.convert_from_proxy_string_string(proxy.external_auth_configuration); " is 154.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            guest_VCPUs_params = proxy.guest_VCPUs_params == null ? null : Maps.convert_from_proxy_string_string(proxy.guest_VCPUs_params); " is 127.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            display = proxy.display == null ? (host_display) 0 : (host_display)Helper.EnumParseDefault(typeof(host_display)' (string)proxy.display); " is 136.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            virtual_hardware_platform_versions = proxy.virtual_hardware_platform_versions == null ? null : Helper.StringArrayToLongArray(proxy.virtual_hardware_platform_versions); " is 167.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,UpdateFromProxy,The length of the statement  "            updates_requiring_reboot = proxy.updates_requiring_reboot == null ? null : XenRef<Pool_update>.Create(proxy.updates_requiring_reboot); " is 134.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,ToProxy,The length of the statement  "            result_.virtual_hardware_platform_versions = (virtual_hardware_platform_versions != null) ? Helper.LongArrayToStringArray(virtual_hardware_platform_versions) : new string[] {}; " is 176.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,ToProxy,The length of the statement  "            result_.updates_requiring_reboot = (updates_requiring_reboot != null) ? Helper.RefListToStringArray(updates_requiring_reboot) : new string[] {}; " is 144.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<host_allowed_operations>(session.proxy.host_get_allowed_operations(session.uuid' _host ?? "").parse()); " is 139.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_host_allowed_operations(session.proxy.host_get_current_operations(session.uuid' _host ?? "").parse()); " is 140.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_API_version_vendor_implementation,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_get_api_version_vendor_implementation(session.uuid' _host ?? "").parse()); " is 138.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_software_version,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_get_software_version(session.uuid' _host ?? "").parse()); " is 121.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_cpu_configuration,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_get_cpu_configuration(session.uuid' _host ?? "").parse()); " is 122.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_external_auth_configuration,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_get_external_auth_configuration(session.uuid' _host ?? "").parse()); " is 132.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_power_on_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_get_power_on_config(session.uuid' _host ?? "").parse()); " is 120.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_guest_VCPUs_params,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_get_guest_vcpus_params(session.uuid' _host ?? "").parse()); " is 123.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_display,The length of the statement  "            return (host_display)Helper.EnumParseDefault(typeof(host_display)' (string)session.proxy.host_get_display(session.uuid' _host ?? "").parse()); " is 142.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_virtual_hardware_platform_versions,The length of the statement  "            return Helper.StringArrayToLongArray(session.proxy.host_get_virtual_hardware_platform_versions(session.uuid' _host ?? "").parse()); " is 131.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,set_other_config,The length of the statement  "            session.proxy.host_set_other_config(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,set_license_server,The length of the statement  "            session.proxy.host_set_license_server(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_license_server)).parse(); " is 127.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,set_guest_VCPUs_params,The length of the statement  "            session.proxy.host_set_guest_vcpus_params(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_guest_vcpus_params)).parse(); " is 135.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,bugreport_upload,The length of the statement  "            session.proxy.host_bugreport_upload(session.uuid' _host ?? ""' _url ?? ""' Maps.convert_to_proxy_string_string(_options)).parse(); " is 130.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_bugreport_upload,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_host_bugreport_upload(session.uuid' _host ?? ""' _url ?? ""' Maps.convert_to_proxy_string_string(_options)).parse()); " is 164.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,get_vms_which_prevent_evacuation,The length of the statement  "            return Maps.convert_from_proxy_XenRefVM_string_array(session.proxy.host_get_vms_which_prevent_evacuation(session.uuid' _host ?? "").parse()); " is 141.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_get_vms_which_prevent_evacuation,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_host_get_vms_which_prevent_evacuation(session.uuid' _host ?? "").parse()); " is 121.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.host_create_new_blob(session.uuid' _host ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 129.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_host_create_new_blob(session.uuid' _host ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 135.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.host_create_new_blob(session.uuid' _host ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 138.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_host_create_new_blob(session.uuid' _host ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 144.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,call_plugin,The length of the statement  "            return (string)session.proxy.host_call_plugin(session.uuid' _host ?? ""' _plugin ?? ""' _fn ?? ""' Maps.convert_to_proxy_string_string(_args)).parse(); " is 151.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_call_plugin,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_host_call_plugin(session.uuid' _host ?? ""' _plugin ?? ""' _fn ?? ""' Maps.convert_to_proxy_string_string(_args)).parse()); " is 170.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,enable_external_auth,The length of the statement  "            session.proxy.host_enable_external_auth(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_config)' _service_name ?? ""' _auth_type ?? "").parse(); " is 160.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,disable_external_auth,The length of the statement  "            session.proxy.host_disable_external_auth(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_config)).parse(); " is 122.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,retrieve_wlb_evacuate_recommendations,The length of the statement  "            return Maps.convert_from_proxy_XenRefVM_string_array(session.proxy.host_retrieve_wlb_evacuate_recommendations(session.uuid' _host ?? "").parse()); " is 146.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_retrieve_wlb_evacuate_recommendations,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_host_retrieve_wlb_evacuate_recommendations(session.uuid' _host ?? "").parse()); " is 126.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,set_power_on_mode,The length of the statement  "            session.proxy.host_set_power_on_mode(session.uuid' _host ?? ""' _power_on_mode ?? ""' Maps.convert_to_proxy_string_string(_power_on_config)).parse(); " is 149.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_set_power_on_mode,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_host_set_power_on_mode(session.uuid' _host ?? ""' _power_on_mode ?? ""' Maps.convert_to_proxy_string_string(_power_on_config)).parse()); " is 183.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,migrate_receive,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_migrate_receive(session.uuid' _host ?? ""' _network ?? ""' Maps.convert_to_proxy_string_string(_options)).parse()); " is 179.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,async_migrate_receive,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_host_migrate_receive(session.uuid' _host ?? ""' _network ?? ""' Maps.convert_to_proxy_string_string(_options)).parse()); " is 167.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,enable_display,The length of the statement  "            return (host_display)Helper.EnumParseDefault(typeof(host_display)' (string)session.proxy.host_enable_display(session.uuid' _host ?? "").parse()); " is 145.
Long Statement,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,disable_display,The length of the statement  "            return (host_display)Helper.EnumParseDefault(typeof(host_display)' (string)session.proxy.host_disable_display(session.uuid' _host ?? "").parse()); " is 146.
Long Statement,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,Get,The length of the statement  "            HTTP.Get(dataCopiedDelegate' cancellingDelegate' HTTP.BuildUri(hostname' remotePath' args)' proxy' localPath' timeout_ms); " is 122.
Long Statement,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,Put,The length of the statement  "            HTTP.Put(progressDelegate' cancellingDelegate' HTTP.BuildUri(hostname' remotePath' args)' proxy' localPath' timeout_ms); " is 120.
Long Statement,XenAPI,HTTP_actions,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\HTTP_actions.cs,rrd_updates,The length of the statement  "                "task_id"' task_id' "session_id"' session_id' "start"' start' "cf"' cf' "interval"' interval' "host"' host' "uuid"' uuid' "json"' json); " is 136.
Long Statement,XenAPI,Message,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Message.cs,create,The length of the statement  "            return XenRef<Message>.Create(session.proxy.message_create(session.uuid' _name ?? ""' _priority.ToString()' cls_helper.ToString(_cls)' _obj_uuid ?? ""' _body ?? "").parse()); " is 174.
Long Statement,XenAPI,Message,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Message.cs,get,The length of the statement  "            return XenRef<Message>.Create<Proxy_Message>(session.proxy.message_get(session.uuid' cls_helper.ToString(_cls)' _obj_uuid ?? ""' _since).parse()); " is 146.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<network_operations>(proxy.allowed_operations); " is 138.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_network_operations(proxy.current_operations); " is 139.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,UpdateFromProxy,The length of the statement  "            default_locking_mode = proxy.default_locking_mode == null ? (network_default_locking_mode) 0 : (network_default_locking_mode)Helper.EnumParseDefault(typeof(network_default_locking_mode)' (string)proxy.default_locking_mode); " is 223.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<network_operations>(session.proxy.network_get_allowed_operations(session.uuid' _network ?? "").parse()); " is 140.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_network_operations(session.proxy.network_get_current_operations(session.uuid' _network ?? "").parse()); " is 141.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.network_get_other_config(session.uuid' _network ?? "").parse()); " is 123.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,get_blobs,The length of the statement  "            return Maps.convert_from_proxy_string_XenRefBlob(session.proxy.network_get_blobs(session.uuid' _network ?? "").parse()); " is 120.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,get_default_locking_mode,The length of the statement  "            return (network_default_locking_mode)Helper.EnumParseDefault(typeof(network_default_locking_mode)' (string)session.proxy.network_get_default_locking_mode(session.uuid' _network ?? "").parse()); " is 193.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,get_assigned_ips,The length of the statement  "            return Maps.convert_from_proxy_XenRefVIF_string(session.proxy.network_get_assigned_ips(session.uuid' _network ?? "").parse()); " is 126.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,get_purpose,The length of the statement  "            return Helper.StringArrayToEnumList<network_purpose>(session.proxy.network_get_purpose(session.uuid' _network ?? "").parse()); " is 126.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,set_other_config,The length of the statement  "            session.proxy.network_set_other_config(session.uuid' _network ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 129.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.network_create_new_blob(session.uuid' _network ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 135.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_network_create_new_blob(session.uuid' _network ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 141.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.network_create_new_blob(session.uuid' _network ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 144.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_network_create_new_blob(session.uuid' _network ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 150.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,set_default_locking_mode,The length of the statement  "            session.proxy.network_set_default_locking_mode(session.uuid' _network ?? ""' network_default_locking_mode_helper.ToString(_value)).parse(); " is 139.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,async_set_default_locking_mode,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_network_set_default_locking_mode(session.uuid' _network ?? ""' network_default_locking_mode_helper.ToString(_value)).parse()); " is 173.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,async_add_purpose,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_network_add_purpose(session.uuid' _network ?? ""' network_purpose_helper.ToString(_value)).parse()); " is 147.
Long Statement,XenAPI,Network,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Network.cs,async_remove_purpose,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_network_remove_purpose(session.uuid' _network ?? ""' network_purpose_helper.ToString(_value)).parse()); " is 150.
Long Statement,XenAPI,PBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PBD.cs,set_other_config,The length of the statement  "            session.proxy.pbd_set_other_config(session.uuid' _pbd ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 121.
Long Statement,XenAPI,PBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PBD.cs,async_set_device_config,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pbd_set_device_config(session.uuid' _pbd ?? ""' Maps.convert_to_proxy_string_string(_value)).parse()); " is 149.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,IsSecondaryManagementInterface,The length of the statement  "            bool criterion = (ip_configuration_mode != ip_configuration_mode.None && ip_configuration_mode != ip_configuration_mode.unknown); " is 129.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,UpdateFromProxy,The length of the statement  "            ip_configuration_mode = proxy.ip_configuration_mode == null ? (ip_configuration_mode) 0 : (ip_configuration_mode)Helper.EnumParseDefault(typeof(ip_configuration_mode)' (string)proxy.ip_configuration_mode); " is 205.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,UpdateFromProxy,The length of the statement  "            tunnel_transport_PIF_of = proxy.tunnel_transport_PIF_of == null ? null : XenRef<Tunnel>.Create(proxy.tunnel_transport_PIF_of); " is 126.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,UpdateFromProxy,The length of the statement  "            ipv6_configuration_mode = proxy.ipv6_configuration_mode == null ? (ipv6_configuration_mode) 0 : (ipv6_configuration_mode)Helper.EnumParseDefault(typeof(ipv6_configuration_mode)' (string)proxy.ipv6_configuration_mode); " is 217.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,UpdateFromProxy,The length of the statement  "            primary_address_type = proxy.primary_address_type == null ? (primary_address_type) 0 : (primary_address_type)Helper.EnumParseDefault(typeof(primary_address_type)' (string)proxy.primary_address_type); " is 199.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,UpdateFromProxy,The length of the statement  "            igmp_snooping_status = proxy.igmp_snooping_status == null ? (pif_igmp_status) 0 : (pif_igmp_status)Helper.EnumParseDefault(typeof(pif_igmp_status)' (string)proxy.igmp_snooping_status); " is 184.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,ToProxy,The length of the statement  "            result_.tunnel_access_PIF_of = (tunnel_access_PIF_of != null) ? Helper.RefListToStringArray(tunnel_access_PIF_of) : new string[] {}; " is 132.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,ToProxy,The length of the statement  "            result_.tunnel_transport_PIF_of = (tunnel_transport_PIF_of != null) ? Helper.RefListToStringArray(tunnel_transport_PIF_of) : new string[] {}; " is 141.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,get_ip_configuration_mode,The length of the statement  "            return (ip_configuration_mode)Helper.EnumParseDefault(typeof(ip_configuration_mode)' (string)session.proxy.pif_get_ip_configuration_mode(session.uuid' _pif ?? "").parse()); " is 172.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,get_ipv6_configuration_mode,The length of the statement  "            return (ipv6_configuration_mode)Helper.EnumParseDefault(typeof(ipv6_configuration_mode)' (string)session.proxy.pif_get_ipv6_configuration_mode(session.uuid' _pif ?? "").parse()); " is 178.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,get_primary_address_type,The length of the statement  "            return (primary_address_type)Helper.EnumParseDefault(typeof(primary_address_type)' (string)session.proxy.pif_get_primary_address_type(session.uuid' _pif ?? "").parse()); " is 169.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,get_igmp_snooping_status,The length of the statement  "            return (pif_igmp_status)Helper.EnumParseDefault(typeof(pif_igmp_status)' (string)session.proxy.pif_get_igmp_snooping_status(session.uuid' _pif ?? "").parse()); " is 159.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,set_other_config,The length of the statement  "            session.proxy.pif_set_other_config(session.uuid' _pif ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 121.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,create_VLAN,The length of the statement  "            return XenRef<PIF>.Create(session.proxy.pif_create_vlan(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _vlan.ToString()).parse()); " is 141.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_create_VLAN,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_create_vlan(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _vlan.ToString()).parse()); " is 148.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,reconfigure_ip,The length of the statement  "            session.proxy.pif_reconfigure_ip(session.uuid' _pif ?? ""' ip_configuration_mode_helper.ToString(_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? "").parse(); " is 168.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_reconfigure_ip,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_reconfigure_ip(session.uuid' _pif ?? ""' ip_configuration_mode_helper.ToString(_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? "").parse()); " is 202.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,reconfigure_ipv6,The length of the statement  "            session.proxy.pif_reconfigure_ipv6(session.uuid' _pif ?? ""' ipv6_configuration_mode_helper.ToString(_mode)' _ipv6 ?? ""' _gateway ?? ""' _dns ?? "").parse(); " is 158.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_reconfigure_ipv6,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_reconfigure_ipv6(session.uuid' _pif ?? ""' ipv6_configuration_mode_helper.ToString(_mode)' _ipv6 ?? ""' _gateway ?? ""' _dns ?? "").parse()); " is 192.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,set_primary_address_type,The length of the statement  "            session.proxy.pif_set_primary_address_type(session.uuid' _pif ?? ""' primary_address_type_helper.ToString(_primary_address_type)).parse(); " is 138.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_set_primary_address_type,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_set_primary_address_type(session.uuid' _pif ?? ""' primary_address_type_helper.ToString(_primary_address_type)).parse()); " is 172.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_introduce(session.uuid' _host ?? ""' _mac ?? ""' _device ?? "").parse()); " is 124.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,introduce,The length of the statement  "            return XenRef<PIF>.Create(session.proxy.pif_introduce(session.uuid' _host ?? ""' _mac ?? ""' _device ?? ""' _managed).parse()); " is 127.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_introduce(session.uuid' _host ?? ""' _mac ?? ""' _device ?? ""' _managed).parse()); " is 134.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,db_introduce,The length of the statement  "            return XenRef<PIF>.Create(session.proxy.pif_db_introduce(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _mac ?? ""' _mtu.ToString()' _vlan.ToString()' _physical' ip_configuration_mode_helper.ToString(_ip_configuration_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? ""' _bond_slave_of ?? ""' _vlan_master_of ?? ""' _management' Maps.convert_to_proxy_string_string(_other_config)' _disallow_unplug).parse()); " is 428.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_db_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_db_introduce(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _mac ?? ""' _mtu.ToString()' _vlan.ToString()' _physical' ip_configuration_mode_helper.ToString(_ip_configuration_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? ""' _bond_slave_of ?? ""' _vlan_master_of ?? ""' _management' Maps.convert_to_proxy_string_string(_other_config)' _disallow_unplug).parse()); " is 435.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,db_introduce,The length of the statement  "            return XenRef<PIF>.Create(session.proxy.pif_db_introduce(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _mac ?? ""' _mtu.ToString()' _vlan.ToString()' _physical' ip_configuration_mode_helper.ToString(_ip_configuration_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? ""' _bond_slave_of ?? ""' _vlan_master_of ?? ""' _management' Maps.convert_to_proxy_string_string(_other_config)' _disallow_unplug' ipv6_configuration_mode_helper.ToString(_ipv6_configuration_mode)' _ipv6' _ipv6_gateway ?? ""' primary_address_type_helper.ToString(_primary_address_type)).parse()); " is 584.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_db_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_db_introduce(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _mac ?? ""' _mtu.ToString()' _vlan.ToString()' _physical' ip_configuration_mode_helper.ToString(_ip_configuration_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? ""' _bond_slave_of ?? ""' _vlan_master_of ?? ""' _management' Maps.convert_to_proxy_string_string(_other_config)' _disallow_unplug' ipv6_configuration_mode_helper.ToString(_ipv6_configuration_mode)' _ipv6' _ipv6_gateway ?? ""' primary_address_type_helper.ToString(_primary_address_type)).parse()); " is 591.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,db_introduce,The length of the statement  "            return XenRef<PIF>.Create(session.proxy.pif_db_introduce(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _mac ?? ""' _mtu.ToString()' _vlan.ToString()' _physical' ip_configuration_mode_helper.ToString(_ip_configuration_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? ""' _bond_slave_of ?? ""' _vlan_master_of ?? ""' _management' Maps.convert_to_proxy_string_string(_other_config)' _disallow_unplug' ipv6_configuration_mode_helper.ToString(_ipv6_configuration_mode)' _ipv6' _ipv6_gateway ?? ""' primary_address_type_helper.ToString(_primary_address_type)' _managed).parse()); " is 594.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_db_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_db_introduce(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _mac ?? ""' _mtu.ToString()' _vlan.ToString()' _physical' ip_configuration_mode_helper.ToString(_ip_configuration_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? ""' _bond_slave_of ?? ""' _vlan_master_of ?? ""' _management' Maps.convert_to_proxy_string_string(_other_config)' _disallow_unplug' ipv6_configuration_mode_helper.ToString(_ipv6_configuration_mode)' _ipv6' _ipv6_gateway ?? ""' primary_address_type_helper.ToString(_primary_address_type)' _managed).parse()); " is 601.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,db_introduce,The length of the statement  "            return XenRef<PIF>.Create(session.proxy.pif_db_introduce(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _mac ?? ""' _mtu.ToString()' _vlan.ToString()' _physical' ip_configuration_mode_helper.ToString(_ip_configuration_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? ""' _bond_slave_of ?? ""' _vlan_master_of ?? ""' _management' Maps.convert_to_proxy_string_string(_other_config)' _disallow_unplug' ipv6_configuration_mode_helper.ToString(_ipv6_configuration_mode)' _ipv6' _ipv6_gateway ?? ""' primary_address_type_helper.ToString(_primary_address_type)' _managed' Maps.convert_to_proxy_string_string(_properties)).parse()); " is 644.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_db_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_db_introduce(session.uuid' _device ?? ""' _network ?? ""' _host ?? ""' _mac ?? ""' _mtu.ToString()' _vlan.ToString()' _physical' ip_configuration_mode_helper.ToString(_ip_configuration_mode)' _ip ?? ""' _netmask ?? ""' _gateway ?? ""' _dns ?? ""' _bond_slave_of ?? ""' _vlan_master_of ?? ""' _management' Maps.convert_to_proxy_string_string(_other_config)' _disallow_unplug' ipv6_configuration_mode_helper.ToString(_ipv6_configuration_mode)' _ipv6' _ipv6_gateway ?? ""' primary_address_type_helper.ToString(_primary_address_type)' _managed' Maps.convert_to_proxy_string_string(_properties)).parse()); " is 651.
Long Statement,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,async_set_property,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pif_set_property(session.uuid' _pif ?? ""' _name ?? ""' _value ?? "").parse()); " is 126.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,UpdateFromProxy,The length of the statement  "            ha_configuration = proxy.ha_configuration == null ? null : Maps.convert_from_proxy_string_string(proxy.ha_configuration); " is 121.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,UpdateFromProxy,The length of the statement  "            ha_host_failures_to_tolerate = proxy.ha_host_failures_to_tolerate == null ? 0 : long.Parse((string)proxy.ha_host_failures_to_tolerate); " is 135.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,UpdateFromProxy,The length of the statement  "            health_check_config = proxy.health_check_config == null ? null : Maps.convert_from_proxy_string_string(proxy.health_check_config); " is 130.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<pool_allowed_operations>(proxy.allowed_operations); " is 143.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_pool_allowed_operations(proxy.current_operations); " is 144.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,UpdateFromProxy,The length of the statement  "            guest_agent_config = proxy.guest_agent_config == null ? null : Maps.convert_from_proxy_string_string(proxy.guest_agent_config); " is 127.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,get_ha_configuration,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.pool_get_ha_configuration(session.uuid' _pool ?? "").parse()); " is 121.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,get_health_check_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.pool_get_health_check_config(session.uuid' _pool ?? "").parse()); " is 124.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<pool_allowed_operations>(session.proxy.pool_get_allowed_operations(session.uuid' _pool ?? "").parse()); " is 139.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_pool_allowed_operations(session.proxy.pool_get_current_operations(session.uuid' _pool ?? "").parse()); " is 140.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,get_guest_agent_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.pool_get_guest_agent_config(session.uuid' _pool ?? "").parse()); " is 123.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,set_other_config,The length of the statement  "            session.proxy.pool_set_other_config(session.uuid' _pool ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,set_health_check_config,The length of the statement  "            session.proxy.pool_set_health_check_config(session.uuid' _pool ?? ""' Maps.convert_to_proxy_string_string(_health_check_config)).parse(); " is 137.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_join,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_join(session.uuid' _master_address ?? ""' _master_username ?? ""' _master_password ?? "").parse()); " is 151.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,join_force,The length of the statement  "            session.proxy.pool_join_force(session.uuid' _master_address ?? ""' _master_username ?? ""' _master_password ?? "").parse(); " is 123.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_join_force,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_join_force(session.uuid' _master_address ?? ""' _master_username ?? ""' _master_password ?? "").parse()); " is 157.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,create_VLAN,The length of the statement  "            return XenRef<PIF>.Create(session.proxy.pool_create_vlan(session.uuid' _device ?? ""' _network ?? ""' _vlan.ToString()).parse()); " is 129.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_create_VLAN,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_create_vlan(session.uuid' _device ?? ""' _network ?? ""' _vlan.ToString()).parse()); " is 136.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,create_VLAN_from_PIF,The length of the statement  "            return XenRef<PIF>.Create(session.proxy.pool_create_vlan_from_pif(session.uuid' _pif ?? ""' _network ?? ""' _vlan.ToString()).parse()); " is 135.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_create_VLAN_from_PIF,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_create_vlan_from_pif(session.uuid' _pif ?? ""' _network ?? ""' _vlan.ToString()).parse()); " is 142.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,enable_ha,The length of the statement  "            session.proxy.pool_enable_ha(session.uuid' (_heartbeat_srs != null) ? Helper.RefListToStringArray(_heartbeat_srs) : new string[] {}' Maps.convert_to_proxy_string_string(_configuration)).parse(); " is 194.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_enable_ha,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_enable_ha(session.uuid' (_heartbeat_srs != null) ? Helper.RefListToStringArray(_heartbeat_srs) : new string[] {}' Maps.convert_to_proxy_string_string(_configuration)).parse()); " is 228.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,ha_compute_hypothetical_max_host_failures_to_tolerate,The length of the statement  "            return long.Parse((string)session.proxy.pool_ha_compute_hypothetical_max_host_failures_to_tolerate(session.uuid' Maps.convert_to_proxy_XenRefVM_string(_configuration)).parse()); " is 177.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,ha_compute_vm_failover_plan,The length of the statement  "            return Maps.convert_from_proxy_XenRefVM_Dictionary_string_string(session.proxy.pool_ha_compute_vm_failover_plan(session.uuid' (_failed_hosts != null) ? Helper.RefListToStringArray(_failed_hosts) : new string[] {}' (_failed_vms != null) ? Helper.RefListToStringArray(_failed_vms) : new string[] {}).parse()); " is 307.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_set_ha_host_failures_to_tolerate,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_set_ha_host_failures_to_tolerate(session.uuid' _pool ?? ""' _value.ToString()).parse()); " is 140.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.pool_create_new_blob(session.uuid' _pool ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 129.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_create_new_blob(session.uuid' _pool ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 135.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.pool_create_new_blob(session.uuid' _pool ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 138.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_create_new_blob(session.uuid' _pool ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 144.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,enable_external_auth,The length of the statement  "            session.proxy.pool_enable_external_auth(session.uuid' _pool ?? ""' Maps.convert_to_proxy_string_string(_config)' _service_name ?? ""' _auth_type ?? "").parse(); " is 160.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,disable_external_auth,The length of the statement  "            session.proxy.pool_disable_external_auth(session.uuid' _pool ?? ""' Maps.convert_to_proxy_string_string(_config)).parse(); " is 122.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,initialize_wlb,The length of the statement  "            session.proxy.pool_initialize_wlb(session.uuid' _wlb_url ?? ""' _wlb_username ?? ""' _wlb_password ?? ""' _xenserver_username ?? ""' _xenserver_password ?? "").parse(); " is 168.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_initialize_wlb,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_initialize_wlb(session.uuid' _wlb_url ?? ""' _wlb_username ?? ""' _wlb_password ?? ""' _xenserver_username ?? ""' _xenserver_password ?? "").parse()); " is 202.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_send_wlb_configuration,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_send_wlb_configuration(session.uuid' Maps.convert_to_proxy_string_string(_config)).parse()); " is 144.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,retrieve_wlb_recommendations,The length of the statement  "            return Maps.convert_from_proxy_XenRefVM_string_array(session.proxy.pool_retrieve_wlb_recommendations(session.uuid).parse()); " is 124.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_send_test_post,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_send_test_post(session.uuid' _host ?? ""' _port.ToString()' _body ?? "").parse()); " is 134.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_certificate_install,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_certificate_install(session.uuid' _name ?? ""' _cert ?? "").parse()); " is 121.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,test_archive_target,The length of the statement  "            return (string)session.proxy.pool_test_archive_target(session.uuid' _pool ?? ""' Maps.convert_to_proxy_string_string(_config)).parse(); " is 135.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_set_igmp_snooping_enabled,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_set_igmp_snooping_enabled(session.uuid' _pool ?? ""' _value).parse()); " is 122.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_add_to_guest_agent_config,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_add_to_guest_agent_config(session.uuid' _pool ?? ""' _key ?? ""' _value ?? "").parse()); " is 140.
Long Statement,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,async_remove_from_guest_agent_config,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_remove_from_guest_agent_config(session.uuid' _pool ?? ""' _key ?? "").parse()); " is 131.
Long Statement,XenAPI,Pool_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_patch.cs,UpdateFromProxy,The length of the statement  "            after_apply_guidance = proxy.after_apply_guidance == null ? null : Helper.StringArrayToEnumList<after_apply_guidance>(proxy.after_apply_guidance); " is 146.
Long Statement,XenAPI,Pool_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_patch.cs,ToProxy,The length of the statement  "            result_.after_apply_guidance = (after_apply_guidance != null) ? Helper.ObjectListToStringArray(after_apply_guidance) : new string[] {}; " is 135.
Long Statement,XenAPI,Pool_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_patch.cs,get_after_apply_guidance,The length of the statement  "            return Helper.StringArrayToEnumList<after_apply_guidance>(session.proxy.pool_patch_get_after_apply_guidance(session.uuid' _pool_patch ?? "").parse()); " is 150.
Long Statement,XenAPI,Pool_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_patch.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.pool_patch_get_other_config(session.uuid' _pool_patch ?? "").parse()); " is 129.
Long Statement,XenAPI,Pool_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_patch.cs,set_other_config,The length of the statement  "            session.proxy.pool_patch_set_other_config(session.uuid' _pool_patch ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 135.
Long Statement,XenAPI,Pool_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_patch.cs,async_precheck,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_patch_precheck(session.uuid' _pool_patch ?? ""' _host ?? "").parse()); " is 122.
Long Statement,XenAPI,Pool_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool_patch.cs,async_clean_on_host,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_pool_patch_clean_on_host(session.uuid' _pool_patch ?? ""' _host ?? "").parse()); " is 127.
Long Statement,XenAPI,Role,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Role.cs,ValidRoleList,The length of the statement  "                log.DebugFormat("Checking roles required to complete the following calls: {0}"' String.Join("' "' ApiMethodsToRoleCheck.ToStringArray())); " is 138.
Long Statement,XenAPI,Role,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Role.cs,ValidRoleList,The length of the statement  "                System.Diagnostics.Trace.Assert(rolesAbleToCompleteApiCall.Count > 0' String.Format("No roles able to perform API call {0}"' ApiMethodToRoleCheck)); " is 148.
Long Statement,XenAPI,Secret,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Secret.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.secret_get_other_config(session.uuid' _secret ?? "").parse()); " is 121.
Long Statement,XenAPI,Secret,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Secret.cs,set_other_config,The length of the statement  "            session.proxy.secret_set_other_config(session.uuid' _secret ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 127.
Long Statement,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,LogRequest,The length of the statement  "            else if (methodName == "event.next" || methodName == "event.from" || methodName == "host.get_servertime" || methodName.StartsWith("task.get_"))  // these occur frequently and we don't need to know about them " is 207.
Long Statement,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,SetADDetails,The length of the statement  "            // allRoles will contain every role on the server' permissions contains the subset of those that are available to this session. " is 127.
Long Statement,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,SetADDetails,The length of the statement  "            // every Role object is either a single api call (a permission) or has subroles and contains permissions through its descendants. " is 129.
Long Statement,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,async_logout_subject_identifier,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_session_logout_subject_identifier(session.uuid' subject_identifier).parse()); " is 124.
Long Statement,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.session_get_other_config(session.uuid' _self ?? "").parse()); " is 120.
Long Statement,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,set_other_config,The length of the statement  "            session.proxy.session_set_other_config(session.uuid' _self ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 126.
Long Statement,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,GetUrl,The length of the statement  "            return string.Format("{0}://{1}:{2}"' port==8080||port == 80 ? "http" : "https"' hostname' port); // https' unless port=80 " is 122.
Long Statement,XenAPI,SM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SM.cs,UpdateFromProxy,The length of the statement  "            required_cluster_stack = proxy.required_cluster_stack == null ? new string[] {} : (string [])proxy.required_cluster_stack; " is 122.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,GetFirstAttachedStorageHost,The length of the statement  "            var currentlyAttachedPBDs = PBDs.Select(pbdref => Connection.Resolve(pbdref)).Where(p => p != null && p.currently_attached); " is 124.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,Target,The length of the statement  "                if ((type == SR.SRTypes.netapp || type == SR.SRTypes.lvmoiscsi || type == SR.SRTypes.equal) && pbd.device_config.ContainsKey("target")) // netapp or iscsi " is 154.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<storage_operations>(proxy.allowed_operations); " is 138.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_storage_operations(proxy.current_operations); " is 139.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<storage_operations>(session.proxy.sr_get_allowed_operations(session.uuid' _sr ?? "").parse()); " is 130.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_storage_operations(session.proxy.sr_get_current_operations(session.uuid' _sr ?? "").parse()); " is 131.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,create,The length of the statement  "            return XenRef<SR>.Create(session.proxy.sr_create(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _physical_size.ToString()' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' _shared).parse()); " is 252.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_create(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _physical_size.ToString()' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' _shared).parse()); " is 260.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,create,The length of the statement  "            return XenRef<SR>.Create(session.proxy.sr_create(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _physical_size.ToString()' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' _shared' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 301.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_create(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _physical_size.ToString()' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' _shared' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 309.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,introduce,The length of the statement  "            return XenRef<SR>.Create(session.proxy.sr_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' _shared).parse()); " is 175.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' _shared).parse()); " is 183.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,introduce,The length of the statement  "            return XenRef<SR>.Create(session.proxy.sr_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' _shared' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 224.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' _shared' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 232.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,make,The length of the statement  "            return (string)session.proxy.sr_make(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _physical_size.ToString()' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? "").parse(); " is 230.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_make,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_make(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _physical_size.ToString()' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? "").parse()); " is 249.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,make,The length of the statement  "            return (string)session.proxy.sr_make(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _physical_size.ToString()' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' Maps.convert_to_proxy_string_string(_sm_config)).parse(); " is 279.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_make,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_make(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _physical_size.ToString()' _name_label ?? ""' _name_description ?? ""' _type ?? ""' _content_type ?? ""' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 298.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,probe,The length of the statement  "            return (string)session.proxy.sr_probe(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _type ?? ""' Maps.convert_to_proxy_string_string(_sm_config)).parse(); " is 188.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_probe,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_probe(session.uuid' _host ?? ""' Maps.convert_to_proxy_string_string(_device_config)' _type ?? ""' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 207.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.sr_create_new_blob(session.uuid' _sr ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 125.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_create_new_blob(session.uuid' _sr ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 131.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.sr_create_new_blob(session.uuid' _sr ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 134.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_create_new_blob(session.uuid' _sr ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 140.
Long Statement,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,async_assert_supports_database_replication,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_sr_assert_supports_database_replication(session.uuid' _sr ?? "").parse()); " is 121.
Long Statement,XenAPI,Subject,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Subject.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.subject_get_other_config(session.uuid' _subject ?? "").parse()); " is 123.
Long Statement,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<task_allowed_operations>(proxy.allowed_operations); " is 143.
Long Statement,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_task_allowed_operations(proxy.current_operations); " is 144.
Long Statement,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,UpdateFromProxy,The length of the statement  "            status = proxy.status == null ? (task_status_type) 0 : (task_status_type)Helper.EnumParseDefault(typeof(task_status_type)' (string)proxy.status); " is 145.
Long Statement,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<task_allowed_operations>(session.proxy.task_get_allowed_operations(session.uuid' _task ?? "").parse()); " is 139.
Long Statement,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_task_allowed_operations(session.proxy.task_get_current_operations(session.uuid' _task ?? "").parse()); " is 140.
Long Statement,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,get_status,The length of the statement  "            return (task_status_type)Helper.EnumParseDefault(typeof(task_status_type)' (string)session.proxy.task_get_status(session.uuid' _task ?? "").parse()); " is 149.
Long Statement,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,set_other_config,The length of the statement  "            session.proxy.task_set_other_config(session.uuid' _task ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<vbd_operations>(proxy.allowed_operations); " is 134.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_vbd_operations(proxy.current_operations); " is 135.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,UpdateFromProxy,The length of the statement  "            runtime_properties = proxy.runtime_properties == null ? null : Maps.convert_from_proxy_string_string(proxy.runtime_properties); " is 127.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,UpdateFromProxy,The length of the statement  "            qos_algorithm_params = proxy.qos_algorithm_params == null ? null : Maps.convert_from_proxy_string_string(proxy.qos_algorithm_params); " is 133.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,UpdateFromProxy,The length of the statement  "            qos_supported_algorithms = proxy.qos_supported_algorithms == null ? new string[] {} : (string [])proxy.qos_supported_algorithms; " is 128.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<vbd_operations>(session.proxy.vbd_get_allowed_operations(session.uuid' _vbd ?? "").parse()); " is 128.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_vbd_operations(session.proxy.vbd_get_current_operations(session.uuid' _vbd ?? "").parse()); " is 129.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,get_mode,The length of the statement  "            return (vbd_mode)Helper.EnumParseDefault(typeof(vbd_mode)' (string)session.proxy.vbd_get_mode(session.uuid' _vbd ?? "").parse()); " is 129.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,get_type,The length of the statement  "            return (vbd_type)Helper.EnumParseDefault(typeof(vbd_type)' (string)session.proxy.vbd_get_type(session.uuid' _vbd ?? "").parse()); " is 129.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,get_runtime_properties,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vbd_get_runtime_properties(session.uuid' _vbd ?? "").parse()); " is 121.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,get_qos_algorithm_params,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vbd_get_qos_algorithm_params(session.uuid' _vbd ?? "").parse()); " is 123.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,set_other_config,The length of the statement  "            session.proxy.vbd_set_other_config(session.uuid' _vbd ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 121.
Long Statement,XenAPI,VBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VBD.cs,set_qos_algorithm_params,The length of the statement  "            session.proxy.vbd_set_qos_algorithm_params(session.uuid' _vbd ?? ""' Maps.convert_to_proxy_string_string(_algorithm_params)).parse(); " is 133.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<vdi_operations>(proxy.allowed_operations); " is 134.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_vdi_operations(proxy.current_operations); " is 135.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,UpdateFromProxy,The length of the statement  "            on_boot = proxy.on_boot == null ? (on_boot) 0 : (on_boot)Helper.EnumParseDefault(typeof(on_boot)' (string)proxy.on_boot); " is 121.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<vdi_operations>(session.proxy.vdi_get_allowed_operations(session.uuid' _vdi ?? "").parse()); " is 128.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_vdi_operations(session.proxy.vdi_get_current_operations(session.uuid' _vdi ?? "").parse()); " is 129.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,get_type,The length of the statement  "            return (vdi_type)Helper.EnumParseDefault(typeof(vdi_type)' (string)session.proxy.vdi_get_type(session.uuid' _vdi ?? "").parse()); " is 129.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,get_on_boot,The length of the statement  "            return (on_boot)Helper.EnumParseDefault(typeof(on_boot)' (string)session.proxy.vdi_get_on_boot(session.uuid' _vdi ?? "").parse()); " is 130.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,set_other_config,The length of the statement  "            session.proxy.vdi_set_other_config(session.uuid' _vdi ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 121.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,set_xenstore_data,The length of the statement  "            session.proxy.vdi_set_xenstore_data(session.uuid' _vdi ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)).parse(); " is 123.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,snapshot,The length of the statement  "            return XenRef<VDI>.Create(session.proxy.vdi_snapshot(session.uuid' _vdi ?? ""' Maps.convert_to_proxy_string_string(_driver_params)).parse()); " is 141.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_snapshot,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_snapshot(session.uuid' _vdi ?? ""' Maps.convert_to_proxy_string_string(_driver_params)).parse()); " is 148.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,clone,The length of the statement  "            return XenRef<VDI>.Create(session.proxy.vdi_clone(session.uuid' _vdi ?? ""' Maps.convert_to_proxy_string_string(_driver_params)).parse()); " is 138.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_clone,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_clone(session.uuid' _vdi ?? ""' Maps.convert_to_proxy_string_string(_driver_params)).parse()); " is 145.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,introduce,The length of the statement  "            return XenRef<VDI>.Create(session.proxy.vdi_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 372.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 379.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,introduce,The length of the statement  "            return XenRef<VDI>.Create(session.proxy.vdi_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)' _managed' _virtual_size.ToString()' _physical_utilisation.ToString()' _metadata_of_pool ?? ""' _is_a_snapshot' _snapshot_time' _snapshot_of ?? "").parse()); " is 519.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)' _managed' _virtual_size.ToString()' _physical_utilisation.ToString()' _metadata_of_pool ?? ""' _is_a_snapshot' _snapshot_time' _snapshot_of ?? "").parse()); " is 526.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,db_introduce,The length of the statement  "            return XenRef<VDI>.Create(session.proxy.vdi_db_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 375.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_db_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_db_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)).parse()); " is 382.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,db_introduce,The length of the statement  "            return XenRef<VDI>.Create(session.proxy.vdi_db_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)' _managed' _virtual_size.ToString()' _physical_utilisation.ToString()' _metadata_of_pool ?? ""' _is_a_snapshot' _snapshot_time' _snapshot_of ?? "").parse()); " is 522.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_db_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_db_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)' _managed' _virtual_size.ToString()' _physical_utilisation.ToString()' _metadata_of_pool ?? ""' _is_a_snapshot' _snapshot_time' _snapshot_of ?? "").parse()); " is 529.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,db_introduce,The length of the statement  "            return XenRef<VDI>.Create(session.proxy.vdi_db_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)' _managed' _virtual_size.ToString()' _physical_utilisation.ToString()' _metadata_of_pool ?? ""' _is_a_snapshot' _snapshot_time' _snapshot_of ?? ""' _cbt_enabled).parse()); " is 536.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_db_introduce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_db_introduce(session.uuid' _uuid ?? ""' _name_label ?? ""' _name_description ?? ""' _sr ?? ""' vdi_type_helper.ToString(_type)' _sharable' _read_only' Maps.convert_to_proxy_string_string(_other_config)' _location ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)' Maps.convert_to_proxy_string_string(_sm_config)' _managed' _virtual_size.ToString()' _physical_utilisation.ToString()' _metadata_of_pool ?? ""' _is_a_snapshot' _snapshot_time' _snapshot_of ?? ""' _cbt_enabled).parse()); " is 543.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,copy,The length of the statement  "            return XenRef<VDI>.Create(session.proxy.vdi_copy(session.uuid' _vdi ?? ""' _sr ?? ""' _base_vdi ?? ""' _into_vdi ?? "").parse()); " is 129.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_copy,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_copy(session.uuid' _vdi ?? ""' _sr ?? ""' _base_vdi ?? ""' _into_vdi ?? "").parse()); " is 136.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_set_name_description,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_set_name_description(session.uuid' _vdi ?? ""' _value ?? "").parse()); " is 121.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_set_on_boot,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_set_on_boot(session.uuid' _vdi ?? ""' on_boot_helper.ToString(_value)).parse()); " is 131.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,pool_migrate,The length of the statement  "            return XenRef<VDI>.Create(session.proxy.vdi_pool_migrate(session.uuid' _vdi ?? ""' _sr ?? ""' Maps.convert_to_proxy_string_string(_options)).parse()); " is 150.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_pool_migrate,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_pool_migrate(session.uuid' _vdi ?? ""' _sr ?? ""' Maps.convert_to_proxy_string_string(_options)).parse()); " is 157.
Long Statement,XenAPI,VDI,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VDI.cs,async_list_changed_blocks,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vdi_list_changed_blocks(session.uuid' _vdi ?? ""' _vdi_to ?? "").parse()); " is 121.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<vif_operations>(proxy.allowed_operations); " is 134.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_vif_operations(proxy.current_operations); " is 135.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,UpdateFromProxy,The length of the statement  "            runtime_properties = proxy.runtime_properties == null ? null : Maps.convert_from_proxy_string_string(proxy.runtime_properties); " is 127.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,UpdateFromProxy,The length of the statement  "            qos_algorithm_params = proxy.qos_algorithm_params == null ? null : Maps.convert_from_proxy_string_string(proxy.qos_algorithm_params); " is 133.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,UpdateFromProxy,The length of the statement  "            qos_supported_algorithms = proxy.qos_supported_algorithms == null ? new string[] {} : (string [])proxy.qos_supported_algorithms; " is 128.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,UpdateFromProxy,The length of the statement  "            locking_mode = proxy.locking_mode == null ? (vif_locking_mode) 0 : (vif_locking_mode)Helper.EnumParseDefault(typeof(vif_locking_mode)' (string)proxy.locking_mode); " is 163.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,UpdateFromProxy,The length of the statement  "            ipv4_configuration_mode = proxy.ipv4_configuration_mode == null ? (vif_ipv4_configuration_mode) 0 : (vif_ipv4_configuration_mode)Helper.EnumParseDefault(typeof(vif_ipv4_configuration_mode)' (string)proxy.ipv4_configuration_mode); " is 229.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,UpdateFromProxy,The length of the statement  "            ipv6_configuration_mode = proxy.ipv6_configuration_mode == null ? (vif_ipv6_configuration_mode) 0 : (vif_ipv6_configuration_mode)Helper.EnumParseDefault(typeof(vif_ipv6_configuration_mode)' (string)proxy.ipv6_configuration_mode); " is 229.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<vif_operations>(session.proxy.vif_get_allowed_operations(session.uuid' _vif ?? "").parse()); " is 128.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_vif_operations(session.proxy.vif_get_current_operations(session.uuid' _vif ?? "").parse()); " is 129.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,get_runtime_properties,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vif_get_runtime_properties(session.uuid' _vif ?? "").parse()); " is 121.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,get_qos_algorithm_params,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vif_get_qos_algorithm_params(session.uuid' _vif ?? "").parse()); " is 123.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,get_locking_mode,The length of the statement  "            return (vif_locking_mode)Helper.EnumParseDefault(typeof(vif_locking_mode)' (string)session.proxy.vif_get_locking_mode(session.uuid' _vif ?? "").parse()); " is 153.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,get_ipv4_configuration_mode,The length of the statement  "            return (vif_ipv4_configuration_mode)Helper.EnumParseDefault(typeof(vif_ipv4_configuration_mode)' (string)session.proxy.vif_get_ipv4_configuration_mode(session.uuid' _vif ?? "").parse()); " is 186.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,get_ipv6_configuration_mode,The length of the statement  "            return (vif_ipv6_configuration_mode)Helper.EnumParseDefault(typeof(vif_ipv6_configuration_mode)' (string)session.proxy.vif_get_ipv6_configuration_mode(session.uuid' _vif ?? "").parse()); " is 186.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,set_other_config,The length of the statement  "            session.proxy.vif_set_other_config(session.uuid' _vif ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 121.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,set_qos_algorithm_params,The length of the statement  "            session.proxy.vif_set_qos_algorithm_params(session.uuid' _vif ?? ""' Maps.convert_to_proxy_string_string(_algorithm_params)).parse(); " is 133.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,async_set_locking_mode,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vif_set_locking_mode(session.uuid' _vif ?? ""' vif_locking_mode_helper.ToString(_value)).parse()); " is 145.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,async_remove_ipv4_allowed,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vif_remove_ipv4_allowed(session.uuid' _vif ?? ""' _value ?? "").parse()); " is 120.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,async_remove_ipv6_allowed,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vif_remove_ipv6_allowed(session.uuid' _vif ?? ""' _value ?? "").parse()); " is 120.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,configure_ipv4,The length of the statement  "            session.proxy.vif_configure_ipv4(session.uuid' _vif ?? ""' vif_ipv4_configuration_mode_helper.ToString(_mode)' _address ?? ""' _gateway ?? "").parse(); " is 151.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,async_configure_ipv4,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vif_configure_ipv4(session.uuid' _vif ?? ""' vif_ipv4_configuration_mode_helper.ToString(_mode)' _address ?? ""' _gateway ?? "").parse()); " is 185.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,configure_ipv6,The length of the statement  "            session.proxy.vif_configure_ipv6(session.uuid' _vif ?? ""' vif_ipv6_configuration_mode_helper.ToString(_mode)' _address ?? ""' _gateway ?? "").parse(); " is 151.
Long Statement,XenAPI,VIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VIF.cs,async_configure_ipv6,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vif_configure_ipv6(session.uuid' _vif ?? ""' vif_ipv6_configuration_mode_helper.ToString(_mode)' _address ?? ""' _gateway ?? "").parse()); " is 185.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,Home,The length of the statement  "            if (is_a_snapshot)  // Snapshots have the same "home" as their VM. This is necessary to make a pool-server-VM-snapshot tree (CA-76273). " is 135.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVcpuWeight,The length of the statement  "                if (int.TryParse(VCPUs_params["weight"]' out weight)) // if we cant parse it we assume its because it is too large' obviously if it isnt a number (ie a string) then we will still go to the else " is 193.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVcpuWeight,The length of the statement  "                    return weight > 0 ? weight : 1; // because we perform a log on what is returned from this the weight must always be greater than 0 " is 130.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,is_lifecycle_operation,The length of the statement  "            return op != vm_operations.changing_dynamic_range && op != vm_operations.changing_static_range && op != vm_operations.changing_memory_limits; " is 141.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,SetBodgeStartupTime,The length of the statement  "            // This has an impact on the virt state of the VM as we allow a set amount of time for tools to show up before assuming unvirt " is 126.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,VirtualisationVersion,The length of the statement  "            if (metrics == null || !metrics.PV_drivers_version.ContainsKey("major") || !metrics.PV_drivers_version.ContainsKey("minor")) " is 124.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVirtualisationWarningMessages,The length of the statement  "            if (status.HasFlag(VirtualisationStatus.IO_DRIVERS_INSTALLED) && status.HasFlag(VirtualisationStatus.MANAGEMENT_INSTALLED) " is 122.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVirtualisationWarningMessages,The length of the statement  "                    // calling function shouldn't send us here if tools are' or might be' present: used to assert here but it can sometimes happen (CA-51460) " is 137.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVirtualisationWarningMessages,The length of the statement  "            return HasNewVirtualisationStates() ? Messages.VIRTUALIZATION_STATE_VM_MANAGEMENT_AGENT_NOT_INSTALLED : Messages.PV_DRIVERS_NOT_INSTALLED; " is 138.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVirtualisationStatusOldVM,The length of the statement  "                // check to see if the metrics object has appeared' if so cancel the timer' no need to notify the property changed as this should be picked up on vm_guest_metrics being created. " is 177.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,IsP2V,The length of the statement  "            return other_config != null && other_config.ContainsKey(P2V_SOURCE_MACHINE) && other_config.ContainsKey(P2V_IMPORT_DATE); " is 121.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetTopology,The length of the statement  "                return cores == 1 ? string.Format(Messages.CPU_TOPOLOGY_STRING_INVALID_VALUE_1) : string.Format(Messages.CPU_TOPOLOGY_STRING_INVALID_VALUE' cores); " is 147.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CanBeMoved,The length of the statement  "            if (!is_a_template && !Locked && allowed_operations != null && allowed_operations.Contains(vm_operations.export) && power_state != vm_power_state.Suspended) " is 156.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CanBeCopied,The length of the statement  "            if (!is_a_template && !Locked && allowed_operations != null && allowed_operations.Contains(vm_operations.export) && power_state != vm_power_state.Suspended) " is 156.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,UpdateFromProxy,The length of the statement  "            allowed_operations = proxy.allowed_operations == null ? null : Helper.StringArrayToEnumList<vm_operations>(proxy.allowed_operations); " is 133.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,UpdateFromProxy,The length of the statement  "            current_operations = proxy.current_operations == null ? null : Maps.convert_from_proxy_string_vm_operations(proxy.current_operations); " is 134.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,UpdateFromProxy,The length of the statement  "            power_state = proxy.power_state == null ? (vm_power_state) 0 : (vm_power_state)Helper.EnumParseDefault(typeof(vm_power_state)' (string)proxy.power_state); " is 154.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,UpdateFromProxy,The length of the statement  "            actions_after_shutdown = proxy.actions_after_shutdown == null ? (on_normal_exit) 0 : (on_normal_exit)Helper.EnumParseDefault(typeof(on_normal_exit)' (string)proxy.actions_after_shutdown); " is 187.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,UpdateFromProxy,The length of the statement  "            actions_after_reboot = proxy.actions_after_reboot == null ? (on_normal_exit) 0 : (on_normal_exit)Helper.EnumParseDefault(typeof(on_normal_exit)' (string)proxy.actions_after_reboot); " is 181.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,UpdateFromProxy,The length of the statement  "            actions_after_crash = proxy.actions_after_crash == null ? (on_crash_behaviour) 0 : (on_crash_behaviour)Helper.EnumParseDefault(typeof(on_crash_behaviour)' (string)proxy.actions_after_crash); " is 190.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,UpdateFromProxy,The length of the statement  "            last_boot_CPU_flags = proxy.last_boot_CPU_flags == null ? null : Maps.convert_from_proxy_string_string(proxy.last_boot_CPU_flags); " is 130.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,UpdateFromProxy,The length of the statement  "            blocked_operations = proxy.blocked_operations == null ? null : Maps.convert_from_proxy_vm_operations_string(proxy.blocked_operations); " is 134.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,UpdateFromProxy,The length of the statement  "            hardware_platform_version = proxy.hardware_platform_version == null ? 0 : long.Parse((string)proxy.hardware_platform_version); " is 126.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,ToProxy,The length of the statement  "            result_.allowed_operations = (allowed_operations != null) ? Helper.ObjectListToStringArray(allowed_operations) : new string[] {}; " is 129.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,get_allowed_operations,The length of the statement  "            return Helper.StringArrayToEnumList<vm_operations>(session.proxy.vm_get_allowed_operations(session.uuid' _vm ?? "").parse()); " is 125.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,get_current_operations,The length of the statement  "            return Maps.convert_from_proxy_string_vm_operations(session.proxy.vm_get_current_operations(session.uuid' _vm ?? "").parse()); " is 126.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,get_power_state,The length of the statement  "            return (vm_power_state)Helper.EnumParseDefault(typeof(vm_power_state)' (string)session.proxy.vm_get_power_state(session.uuid' _vm ?? "").parse()); " is 146.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,get_actions_after_shutdown,The length of the statement  "            return (on_normal_exit)Helper.EnumParseDefault(typeof(on_normal_exit)' (string)session.proxy.vm_get_actions_after_shutdown(session.uuid' _vm ?? "").parse()); " is 157.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,get_actions_after_reboot,The length of the statement  "            return (on_normal_exit)Helper.EnumParseDefault(typeof(on_normal_exit)' (string)session.proxy.vm_get_actions_after_reboot(session.uuid' _vm ?? "").parse()); " is 155.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,get_actions_after_crash,The length of the statement  "            return (on_crash_behaviour)Helper.EnumParseDefault(typeof(on_crash_behaviour)' (string)session.proxy.vm_get_actions_after_crash(session.uuid' _vm ?? "").parse()); " is 162.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,get_last_boot_CPU_flags,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_get_last_boot_cpu_flags(session.uuid' _vm ?? "").parse()); " is 120.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,get_blocked_operations,The length of the statement  "            return Maps.convert_from_proxy_vm_operations_string(session.proxy.vm_get_blocked_operations(session.uuid' _vm ?? "").parse()); " is 126.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,set_actions_after_shutdown,The length of the statement  "            session.proxy.vm_set_actions_after_shutdown(session.uuid' _vm ?? ""' on_normal_exit_helper.ToString(_after_shutdown)).parse(); " is 126.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,set_actions_after_reboot,The length of the statement  "            session.proxy.vm_set_actions_after_reboot(session.uuid' _vm ?? ""' on_normal_exit_helper.ToString(_after_reboot)).parse(); " is 122.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,set_actions_after_crash,The length of the statement  "            session.proxy.vm_set_actions_after_crash(session.uuid' _vm ?? ""' on_crash_behaviour_helper.ToString(_after_crash)).parse(); " is 124.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,set_HVM_boot_params,The length of the statement  "            session.proxy.vm_set_hvm_boot_params(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_boot_params)).parse(); " is 121.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,set_xenstore_data,The length of the statement  "            session.proxy.vm_set_xenstore_data(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_xenstore_data)).parse(); " is 121.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,set_blocked_operations,The length of the statement  "            session.proxy.vm_set_blocked_operations(session.uuid' _vm ?? ""' Maps.convert_to_proxy_vm_operations_string(_blocked_operations)).parse(); " is 138.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,add_to_blocked_operations,The length of the statement  "            session.proxy.vm_add_to_blocked_operations(session.uuid' _vm ?? ""' vm_operations_helper.ToString(_key)' _value ?? "").parse(); " is 127.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_snapshot_with_quiesce,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_snapshot_with_quiesce(session.uuid' _vm ?? ""' _new_name ?? "").parse()); " is 123.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_start_on,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_start_on(session.uuid' _vm ?? ""' _host ?? ""' _start_paused' _force).parse()); " is 129.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_resume_on,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_resume_on(session.uuid' _vm ?? ""' _host ?? ""' _start_paused' _force).parse()); " is 130.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,pool_migrate,The length of the statement  "            session.proxy.vm_pool_migrate(session.uuid' _vm ?? ""' _host ?? ""' Maps.convert_to_proxy_string_string(_options)).parse(); " is 123.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_pool_migrate,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_pool_migrate(session.uuid' _vm ?? ""' _host ?? ""' Maps.convert_to_proxy_string_string(_options)).parse()); " is 157.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_set_VCPUs_number_live,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_set_vcpus_number_live(session.uuid' _vm ?? ""' _nvcpu.ToString()).parse()); " is 125.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_add_to_VCPUs_params_live,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_add_to_vcpus_params_live(session.uuid' _vm ?? ""' _key ?? ""' _value ?? "").parse()); " is 135.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_set_memory_dynamic_range,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_set_memory_dynamic_range(session.uuid' _vm ?? ""' _min.ToString()' _max.ToString()).parse()); " is 143.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_set_memory_static_range,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_set_memory_static_range(session.uuid' _vm ?? ""' _min.ToString()' _max.ToString()).parse()); " is 142.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,set_memory_limits,The length of the statement  "            session.proxy.vm_set_memory_limits(session.uuid' _vm ?? ""' _static_min.ToString()' _static_max.ToString()' _dynamic_min.ToString()' _dynamic_max.ToString()).parse(); " is 166.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_set_memory_limits,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_set_memory_limits(session.uuid' _vm ?? ""' _static_min.ToString()' _static_max.ToString()' _dynamic_min.ToString()' _dynamic_max.ToString()).parse()); " is 200.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_set_memory_target_live,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_set_memory_target_live(session.uuid' _vm ?? ""' _target.ToString()).parse()); " is 127.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_set_shadow_multiplier_live,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_set_shadow_multiplier_live(session.uuid' _vm ?? ""' _multiplier).parse()); " is 124.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,maximise_memory,The length of the statement  "            return long.Parse((string)session.proxy.vm_maximise_memory(session.uuid' _vm ?? ""' _total.ToString()' _approximate).parse()); " is 126.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_maximise_memory,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_maximise_memory(session.uuid' _vm ?? ""' _total.ToString()' _approximate).parse()); " is 133.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,migrate_send,The length of the statement  "            return XenRef<VM>.Create(session.proxy.vm_migrate_send(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_dest)' _live' Maps.convert_to_proxy_XenRefVDI_XenRefSR(_vdi_map)' Maps.convert_to_proxy_XenRefVIF_XenRefNetwork(_vif_map)' Maps.convert_to_proxy_string_string(_options)).parse()); " is 296.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_migrate_send,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_migrate_send(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_dest)' _live' Maps.convert_to_proxy_XenRefVDI_XenRefSR(_vdi_map)' Maps.convert_to_proxy_XenRefVIF_XenRefNetwork(_vif_map)' Maps.convert_to_proxy_string_string(_options)).parse()); " is 304.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,migrate_send,The length of the statement  "            return XenRef<VM>.Create(session.proxy.vm_migrate_send(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_dest)' _live' Maps.convert_to_proxy_XenRefVDI_XenRefSR(_vdi_map)' Maps.convert_to_proxy_XenRefVIF_XenRefNetwork(_vif_map)' Maps.convert_to_proxy_string_string(_options)' Maps.convert_to_proxy_XenRefVGPU_XenRefGPU_group(_vgpu_map)).parse()); " is 357.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_migrate_send,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_migrate_send(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_dest)' _live' Maps.convert_to_proxy_XenRefVDI_XenRefSR(_vdi_map)' Maps.convert_to_proxy_XenRefVIF_XenRefNetwork(_vif_map)' Maps.convert_to_proxy_string_string(_options)' Maps.convert_to_proxy_XenRefVGPU_XenRefGPU_group(_vgpu_map)).parse()); " is 365.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,assert_can_migrate,The length of the statement  "            session.proxy.vm_assert_can_migrate(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_dest)' _live' Maps.convert_to_proxy_XenRefVDI_XenRefSR(_vdi_map)' Maps.convert_to_proxy_XenRefVIF_XenRefNetwork(_vif_map)' Maps.convert_to_proxy_string_string(_options)).parse(); " is 276.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_assert_can_migrate,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_assert_can_migrate(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_dest)' _live' Maps.convert_to_proxy_XenRefVDI_XenRefSR(_vdi_map)' Maps.convert_to_proxy_XenRefVIF_XenRefNetwork(_vif_map)' Maps.convert_to_proxy_string_string(_options)).parse()); " is 310.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,assert_can_migrate,The length of the statement  "            session.proxy.vm_assert_can_migrate(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_dest)' _live' Maps.convert_to_proxy_XenRefVDI_XenRefSR(_vdi_map)' Maps.convert_to_proxy_XenRefVIF_XenRefNetwork(_vif_map)' Maps.convert_to_proxy_string_string(_options)' Maps.convert_to_proxy_XenRefVGPU_XenRefGPU_group(_vgpu_map)).parse(); " is 337.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_assert_can_migrate,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_assert_can_migrate(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_dest)' _live' Maps.convert_to_proxy_XenRefVDI_XenRefSR(_vdi_map)' Maps.convert_to_proxy_XenRefVIF_XenRefNetwork(_vif_map)' Maps.convert_to_proxy_string_string(_options)' Maps.convert_to_proxy_XenRefVGPU_XenRefGPU_group(_vgpu_map)).parse()); " is 371.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_assert_operation_valid,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_assert_operation_valid(session.uuid' _vm ?? ""' vm_operations_helper.ToString(_op)).parse()); " is 143.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.vm_create_new_blob(session.uuid' _vm ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 125.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_create_new_blob(session.uuid' _vm ?? ""' _name ?? ""' _mime_type ?? "").parse()); " is 131.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,create_new_blob,The length of the statement  "            return XenRef<Blob>.Create(session.proxy.vm_create_new_blob(session.uuid' _vm ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 134.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_create_new_blob,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_create_new_blob(session.uuid' _vm ?? ""' _name ?? ""' _mime_type ?? ""' _public).parse()); " is 140.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,retrieve_wlb_recommendations,The length of the statement  "            return Maps.convert_from_proxy_XenRefHost_string_array(session.proxy.vm_retrieve_wlb_recommendations(session.uuid' _vm ?? "").parse()); " is 135.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_set_bios_strings,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_set_bios_strings(session.uuid' _vm ?? ""' Maps.convert_to_proxy_string_string(_value)).parse()); " is 146.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_set_shutdown_delay,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_set_shutdown_delay(session.uuid' _vm ?? ""' _value.ToString()).parse()); " is 122.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_assert_can_be_recovered,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_assert_can_be_recovered(session.uuid' _vm ?? ""' _session_to ?? "").parse()); " is 127.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,get_SRs_required_for_recovery,The length of the statement  "            return XenRef<SR>.Create(session.proxy.vm_get_srs_required_for_recovery(session.uuid' _vm ?? ""' _session_to ?? "").parse()); " is 125.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_get_SRs_required_for_recovery,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_get_srs_required_for_recovery(session.uuid' _vm ?? ""' _session_to ?? "").parse()); " is 133.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,import_convert,The length of the statement  "            session.proxy.vm_import_convert(session.uuid' _type ?? ""' _username ?? ""' _password ?? ""' _sr ?? ""' Maps.convert_to_proxy_string_string(_remote_config)).parse(); " is 165.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_import_convert,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_import_convert(session.uuid' _type ?? ""' _username ?? ""' _password ?? ""' _sr ?? ""' Maps.convert_to_proxy_string_string(_remote_config)).parse()); " is 199.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,call_plugin,The length of the statement  "            return (string)session.proxy.vm_call_plugin(session.uuid' _vm ?? ""' _plugin ?? ""' _fn ?? ""' Maps.convert_to_proxy_string_string(_args)).parse(); " is 147.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_call_plugin,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_call_plugin(session.uuid' _vm ?? ""' _plugin ?? ""' _fn ?? ""' Maps.convert_to_proxy_string_string(_args)).parse()); " is 166.
Long Statement,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,async_import,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vm_import(session.uuid' _url ?? ""' _sr ?? ""' _full_restore' _force).parse()); " is 126.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,IsVmNotWindows,The length of the statement  "                if (this.os_version.ContainsKey("distro") && !string.IsNullOrEmpty(this.os_version["distro"]) && linuxDistros.Contains(this.os_version["distro"].ToLowerInvariant())) " is 165.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,UpdateFromProxy,The length of the statement  "            PV_drivers_version = proxy.PV_drivers_version == null ? null : Maps.convert_from_proxy_string_string(proxy.PV_drivers_version); " is 127.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,UpdateFromProxy,The length of the statement  "            can_use_hotplug_vbd = proxy.can_use_hotplug_vbd == null ? (tristate_type) 0 : (tristate_type)Helper.EnumParseDefault(typeof(tristate_type)' (string)proxy.can_use_hotplug_vbd); " is 175.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,UpdateFromProxy,The length of the statement  "            can_use_hotplug_vif = proxy.can_use_hotplug_vif == null ? (tristate_type) 0 : (tristate_type)Helper.EnumParseDefault(typeof(tristate_type)' (string)proxy.can_use_hotplug_vif); " is 175.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_record,The length of the statement  "            return new VM_guest_metrics((Proxy_VM_guest_metrics)session.proxy.vm_guest_metrics_get_record(session.uuid' _vm_guest_metrics ?? "").parse()); " is 142.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_os_version,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_guest_metrics_get_os_version(session.uuid' _vm_guest_metrics ?? "").parse()); " is 139.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_PV_drivers_version,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_guest_metrics_get_pv_drivers_version(session.uuid' _vm_guest_metrics ?? "").parse()); " is 147.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_memory,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_guest_metrics_get_memory(session.uuid' _vm_guest_metrics ?? "").parse()); " is 135.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_disks,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_guest_metrics_get_disks(session.uuid' _vm_guest_metrics ?? "").parse()); " is 134.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_networks,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_guest_metrics_get_networks(session.uuid' _vm_guest_metrics ?? "").parse()); " is 137.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_other,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_guest_metrics_get_other(session.uuid' _vm_guest_metrics ?? "").parse()); " is 134.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_guest_metrics_get_other_config(session.uuid' _vm_guest_metrics ?? "").parse()); " is 141.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_can_use_hotplug_vbd,The length of the statement  "            return (tristate_type)Helper.EnumParseDefault(typeof(tristate_type)' (string)session.proxy.vm_guest_metrics_get_can_use_hotplug_vbd(session.uuid' _vm_guest_metrics ?? "").parse()); " is 180.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_can_use_hotplug_vif,The length of the statement  "            return (tristate_type)Helper.EnumParseDefault(typeof(tristate_type)' (string)session.proxy.vm_guest_metrics_get_can_use_hotplug_vif(session.uuid' _vm_guest_metrics ?? "").parse()); " is 180.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,set_other_config,The length of the statement  "            session.proxy.vm_guest_metrics_set_other_config(session.uuid' _vm_guest_metrics ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 147.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,add_to_other_config,The length of the statement  "            session.proxy.vm_guest_metrics_add_to_other_config(session.uuid' _vm_guest_metrics ?? ""' _key ?? ""' _value ?? "").parse(); " is 124.
Long Statement,XenAPI,VM_guest_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_guest_metrics.cs,get_all_records,The length of the statement  "            return XenRef<VM_guest_metrics>.Create<Proxy_VM_guest_metrics>(session.proxy.vm_guest_metrics_get_all_records(session.uuid).parse()); " is 133.
Long Statement,XenAPI,Console,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Console.cs,UpdateFromProxy,The length of the statement  "            protocol = proxy.protocol == null ? (console_protocol) 0 : (console_protocol)Helper.EnumParseDefault(typeof(console_protocol)' (string)proxy.protocol); " is 151.
Long Statement,XenAPI,Console,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Console.cs,get_protocol,The length of the statement  "            return (console_protocol)Helper.EnumParseDefault(typeof(console_protocol)' (string)session.proxy.console_get_protocol(session.uuid' _console ?? "").parse()); " is 157.
Long Statement,XenAPI,Console,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Console.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.console_get_other_config(session.uuid' _console ?? "").parse()); " is 123.
Long Statement,XenAPI,Console,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Console.cs,set_other_config,The length of the statement  "            session.proxy.console_set_other_config(session.uuid' _console ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 129.
Long Statement,XenAPI,Crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Crashdump.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.crashdump_get_other_config(session.uuid' _crashdump ?? "").parse()); " is 127.
Long Statement,XenAPI,Crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Crashdump.cs,set_other_config,The length of the statement  "            session.proxy.crashdump_set_other_config(session.uuid' _crashdump ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 133.
Long Statement,XenAPI,Event,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Event.cs,SaveChanges,The length of the statement  "                throw new InvalidOperationException("There is no constructor available for this type; you cannot directly create one on the server."); " is 134.
Long Statement,XenAPI,Host_cpu,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_cpu.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_cpu_get_other_config(session.uuid' _host_cpu ?? "").parse()); " is 125.
Long Statement,XenAPI,Host_cpu,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_cpu.cs,set_other_config,The length of the statement  "            session.proxy.host_cpu_set_other_config(session.uuid' _host_cpu ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 131.
Long Statement,XenAPI,Host_crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_crashdump.cs,get_record,The length of the statement  "            return new Host_crashdump((Proxy_Host_crashdump)session.proxy.host_crashdump_get_record(session.uuid' _host_crashdump ?? "").parse()); " is 134.
Long Statement,XenAPI,Host_crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_crashdump.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_crashdump_get_other_config(session.uuid' _host_crashdump ?? "").parse()); " is 137.
Long Statement,XenAPI,Host_crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_crashdump.cs,set_other_config,The length of the statement  "            session.proxy.host_crashdump_set_other_config(session.uuid' _host_crashdump ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 143.
Long Statement,XenAPI,Host_crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_crashdump.cs,add_to_other_config,The length of the statement  "            session.proxy.host_crashdump_add_to_other_config(session.uuid' _host_crashdump ?? ""' _key ?? ""' _value ?? "").parse(); " is 120.
Long Statement,XenAPI,Host_crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_crashdump.cs,upload,The length of the statement  "            session.proxy.host_crashdump_upload(session.uuid' _host_crashdump ?? ""' _url ?? ""' Maps.convert_to_proxy_string_string(_options)).parse(); " is 140.
Long Statement,XenAPI,Host_crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_crashdump.cs,async_upload,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_host_crashdump_upload(session.uuid' _host_crashdump ?? ""' _url ?? ""' Maps.convert_to_proxy_string_string(_options)).parse()); " is 174.
Long Statement,XenAPI,Host_crashdump,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_crashdump.cs,get_all_records,The length of the statement  "            return XenRef<Host_crashdump>.Create<Proxy_Host_crashdump>(session.proxy.host_crashdump_get_all_records(session.uuid).parse()); " is 127.
Long Statement,XenAPI,Host_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_metrics.cs,get_record,The length of the statement  "            return new Host_metrics((Proxy_Host_metrics)session.proxy.host_metrics_get_record(session.uuid' _host_metrics ?? "").parse()); " is 126.
Long Statement,XenAPI,Host_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_metrics.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_metrics_get_other_config(session.uuid' _host_metrics ?? "").parse()); " is 133.
Long Statement,XenAPI,Host_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_metrics.cs,set_other_config,The length of the statement  "            session.proxy.host_metrics_set_other_config(session.uuid' _host_metrics ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 139.
Long Statement,XenAPI,Host_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_metrics.cs,get_all_records,The length of the statement  "            return XenRef<Host_metrics>.Create<Proxy_Host_metrics>(session.proxy.host_metrics_get_all_records(session.uuid).parse()); " is 121.
Long Statement,XenAPI,Host_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_patch.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.host_patch_get_other_config(session.uuid' _host_patch ?? "").parse()); " is 129.
Long Statement,XenAPI,Host_patch,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Host_patch.cs,set_other_config,The length of the statement  "            session.proxy.host_patch_set_other_config(session.uuid' _host_patch ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 135.
Long Statement,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The length of the statement  "                string field = initialResponse.Find(str => str.StartsWith("Proxy-Connection: Close"' StringComparison.CurrentCultureIgnoreCase)); " is 129.
Long Statement,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The length of the statement  "                        throw new ProxyServerAuthenticationException("Basic authentication scheme is not supported/enabled by the proxy server."); " is 122.
Long Statement,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The length of the statement  "                        throw new ProxyServerAuthenticationException("Digest authentication scheme is not supported/enabled by the proxy server."); " is 123.
Long Statement,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The length of the statement  "                        string entityBody = initialResponse[initialResponse.Count - 1]; // entity body should have been stored as last element of initialResponse " is 137.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_host_allowed_operations,The length of the statement  "                        host_allowed_operations v = table[key] == null ? (host_allowed_operations) 0 : (host_allowed_operations)Helper.EnumParseDefault(typeof(host_allowed_operations)' (string)table[key]); " is 181.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_network_operations,The length of the statement  "                        network_operations v = table[key] == null ? (network_operations) 0 : (network_operations)Helper.EnumParseDefault(typeof(network_operations)' (string)table[key]); " is 161.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_pool_allowed_operations,The length of the statement  "                        pool_allowed_operations v = table[key] == null ? (pool_allowed_operations) 0 : (pool_allowed_operations)Helper.EnumParseDefault(typeof(pool_allowed_operations)' (string)table[key]); " is 181.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_storage_operations,The length of the statement  "                        storage_operations v = table[key] == null ? (storage_operations) 0 : (storage_operations)Helper.EnumParseDefault(typeof(storage_operations)' (string)table[key]); " is 161.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_task_allowed_operations,The length of the statement  "                        task_allowed_operations v = table[key] == null ? (task_allowed_operations) 0 : (task_allowed_operations)Helper.EnumParseDefault(typeof(task_allowed_operations)' (string)table[key]); " is 181.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_vbd_operations,The length of the statement  "                        vbd_operations v = table[key] == null ? (vbd_operations) 0 : (vbd_operations)Helper.EnumParseDefault(typeof(vbd_operations)' (string)table[key]); " is 145.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_vdi_operations,The length of the statement  "                        vdi_operations v = table[key] == null ? (vdi_operations) 0 : (vdi_operations)Helper.EnumParseDefault(typeof(vdi_operations)' (string)table[key]); " is 145.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_vif_operations,The length of the statement  "                        vif_operations v = table[key] == null ? (vif_operations) 0 : (vif_operations)Helper.EnumParseDefault(typeof(vif_operations)' (string)table[key]); " is 145.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_vm_appliance_operation,The length of the statement  "                        vm_appliance_operation v = table[key] == null ? (vm_appliance_operation) 0 : (vm_appliance_operation)Helper.EnumParseDefault(typeof(vm_appliance_operation)' (string)table[key]); " is 177.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_vm_operations,The length of the statement  "                        vm_operations v = table[key] == null ? (vm_operations) 0 : (vm_operations)Helper.EnumParseDefault(typeof(vm_operations)' (string)table[key]); " is 141.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_string_vusb_operations,The length of the statement  "                        vusb_operations v = table[key] == null ? (vusb_operations) 0 : (vusb_operations)Helper.EnumParseDefault(typeof(vusb_operations)' (string)table[key]); " is 149.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_long_string_array,The length of the statement  "                        string[] v = table[key] == null ? new string[] {} : Array.ConvertAll<object' string>((object[])table[key]' Convert.ToString); " is 125.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_XenRefVM_string_array,The length of the statement  "                        string[] v = table[key] == null ? new string[] {} : Array.ConvertAll<object' string>((object[])table[key]' Convert.ToString); " is 125.
Long Statement,XenAPI,Maps,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Maps.cs,convert_from_proxy_XenRefHost_string_array,The length of the statement  "                        string[] v = table[key] == null ? new string[] {} : Array.ConvertAll<object' string>((object[])table[key]' Convert.ToString); " is 125.
Long Statement,XenAPI,PIF_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PIF_metrics.cs,get_record,The length of the statement  "            return new PIF_metrics((Proxy_PIF_metrics)session.proxy.pif_metrics_get_record(session.uuid' _pif_metrics ?? "").parse()); " is 122.
Long Statement,XenAPI,PIF_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PIF_metrics.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.pif_metrics_get_other_config(session.uuid' _pif_metrics ?? "").parse()); " is 131.
Long Statement,XenAPI,PIF_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\PIF_metrics.cs,set_other_config,The length of the statement  "            session.proxy.pif_metrics_set_other_config(session.uuid' _pif_metrics ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 137.
Long Statement,XenAPI,Tunnel,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Tunnel.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.tunnel_get_other_config(session.uuid' _tunnel ?? "").parse()); " is 121.
Long Statement,XenAPI,Tunnel,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Tunnel.cs,set_other_config,The length of the statement  "            session.proxy.tunnel_set_other_config(session.uuid' _tunnel ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 127.
Long Statement,XenAPI,Tunnel,C:\repos\xenserver_xenadmin\XenModel\XenAPI\Tunnel.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_tunnel_create(session.uuid' _transport_pif ?? ""' _network ?? "").parse()); " is 122.
Long Statement,XenAPI,User,C:\repos\xenserver_xenadmin\XenModel\XenAPI\User.cs,set_other_config,The length of the statement  "            session.proxy.user_set_other_config(session.uuid' _user ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,VBD_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VBD_metrics.cs,get_record,The length of the statement  "            return new VBD_metrics((Proxy_VBD_metrics)session.proxy.vbd_metrics_get_record(session.uuid' _vbd_metrics ?? "").parse()); " is 122.
Long Statement,XenAPI,VBD_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VBD_metrics.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vbd_metrics_get_other_config(session.uuid' _vbd_metrics ?? "").parse()); " is 131.
Long Statement,XenAPI,VBD_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VBD_metrics.cs,set_other_config,The length of the statement  "            session.proxy.vbd_metrics_set_other_config(session.uuid' _vbd_metrics ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 137.
Long Statement,XenAPI,VIF_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VIF_metrics.cs,get_record,The length of the statement  "            return new VIF_metrics((Proxy_VIF_metrics)session.proxy.vif_metrics_get_record(session.uuid' _vif_metrics ?? "").parse()); " is 122.
Long Statement,XenAPI,VIF_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VIF_metrics.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vif_metrics_get_other_config(session.uuid' _vif_metrics ?? "").parse()); " is 131.
Long Statement,XenAPI,VIF_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VIF_metrics.cs,set_other_config,The length of the statement  "            session.proxy.vif_metrics_set_other_config(session.uuid' _vif_metrics ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 137.
Long Statement,XenAPI,VLAN,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VLAN.cs,set_other_config,The length of the statement  "            session.proxy.vlan_set_other_config(session.uuid' _vlan ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 123.
Long Statement,XenAPI,VLAN,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VLAN.cs,create,The length of the statement  "            return XenRef<VLAN>.Create(session.proxy.vlan_create(session.uuid' _tagged_pif ?? ""' _tag.ToString()' _network ?? "").parse()); " is 128.
Long Statement,XenAPI,VLAN,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VLAN.cs,async_create,The length of the statement  "            return XenRef<Task>.Create(session.proxy.async_vlan_create(session.uuid' _tagged_pif ?? ""' _tag.ToString()' _network ?? "").parse()); " is 134.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,UpdateFromProxy,The length of the statement  "            backup_type = proxy.backup_type == null ? (vmpp_backup_type) 0 : (vmpp_backup_type)Helper.EnumParseDefault(typeof(vmpp_backup_type)' (string)proxy.backup_type); " is 160.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,UpdateFromProxy,The length of the statement  "            backup_frequency = proxy.backup_frequency == null ? (vmpp_backup_frequency) 0 : (vmpp_backup_frequency)Helper.EnumParseDefault(typeof(vmpp_backup_frequency)' (string)proxy.backup_frequency); " is 190.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,UpdateFromProxy,The length of the statement  "            archive_target_type = proxy.archive_target_type == null ? (vmpp_archive_target_type) 0 : (vmpp_archive_target_type)Helper.EnumParseDefault(typeof(vmpp_archive_target_type)' (string)proxy.archive_target_type); " is 208.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,UpdateFromProxy,The length of the statement  "            archive_target_config = proxy.archive_target_config == null ? null : Maps.convert_from_proxy_string_string(proxy.archive_target_config); " is 136.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,UpdateFromProxy,The length of the statement  "            archive_frequency = proxy.archive_frequency == null ? (vmpp_archive_frequency) 0 : (vmpp_archive_frequency)Helper.EnumParseDefault(typeof(vmpp_archive_frequency)' (string)proxy.archive_frequency); " is 196.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,UpdateFromProxy,The length of the statement  "            archive_schedule = proxy.archive_schedule == null ? null : Maps.convert_from_proxy_string_string(proxy.archive_schedule); " is 121.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,get_backup_type,The length of the statement  "            return (vmpp_backup_type)Helper.EnumParseDefault(typeof(vmpp_backup_type)' (string)session.proxy.vmpp_get_backup_type(session.uuid' _vmpp ?? "").parse()); " is 154.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,get_backup_frequency,The length of the statement  "            return (vmpp_backup_frequency)Helper.EnumParseDefault(typeof(vmpp_backup_frequency)' (string)session.proxy.vmpp_get_backup_frequency(session.uuid' _vmpp ?? "").parse()); " is 169.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,get_backup_schedule,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vmpp_get_backup_schedule(session.uuid' _vmpp ?? "").parse()); " is 120.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,get_archive_target_type,The length of the statement  "            return (vmpp_archive_target_type)Helper.EnumParseDefault(typeof(vmpp_archive_target_type)' (string)session.proxy.vmpp_get_archive_target_type(session.uuid' _vmpp ?? "").parse()); " is 178.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,get_archive_target_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vmpp_get_archive_target_config(session.uuid' _vmpp ?? "").parse()); " is 126.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,get_archive_frequency,The length of the statement  "            return (vmpp_archive_frequency)Helper.EnumParseDefault(typeof(vmpp_archive_frequency)' (string)session.proxy.vmpp_get_archive_frequency(session.uuid' _vmpp ?? "").parse()); " is 172.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,get_archive_schedule,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vmpp_get_archive_schedule(session.uuid' _vmpp ?? "").parse()); " is 121.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,set_backup_frequency,The length of the statement  "            session.proxy.vmpp_set_backup_frequency(session.uuid' _vmpp ?? ""' vmpp_backup_frequency_helper.ToString(_value)).parse(); " is 122.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,set_archive_frequency,The length of the statement  "            session.proxy.vmpp_set_archive_frequency(session.uuid' _vmpp ?? ""' vmpp_archive_frequency_helper.ToString(_value)).parse(); " is 124.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,set_archive_schedule,The length of the statement  "            session.proxy.vmpp_set_archive_schedule(session.uuid' _vmpp ?? ""' Maps.convert_to_proxy_string_string(_value)).parse(); " is 120.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,set_archive_target_type,The length of the statement  "            session.proxy.vmpp_set_archive_target_type(session.uuid' _vmpp ?? ""' vmpp_archive_target_type_helper.ToString(_value)).parse(); " is 128.
Long Statement,XenAPI,VMPP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VMPP.cs,set_archive_target_config,The length of the statement  "            session.proxy.vmpp_set_archive_target_config(session.uuid' _vmpp ?? ""' Maps.convert_to_proxy_string_string(_value)).parse(); " is 125.
Long Statement,XenAPI,VM_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VM_metrics.cs,UpdateFromProxy,The length of the statement  "            VCPUs_utilisation = proxy.VCPUs_utilisation == null ? null : Maps.convert_from_proxy_long_double(proxy.VCPUs_utilisation); " is 122.
Long Statement,XenAPI,VM_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VM_metrics.cs,get_VCPUs_utilisation,The length of the statement  "            return Maps.convert_from_proxy_long_double(session.proxy.vm_metrics_get_vcpus_utilisation(session.uuid' _vm_metrics ?? "").parse()); " is 132.
Long Statement,XenAPI,VM_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VM_metrics.cs,get_VCPUs_CPU,The length of the statement  "            return Maps.convert_from_proxy_long_long(session.proxy.vm_metrics_get_vcpus_cpu(session.uuid' _vm_metrics ?? "").parse()); " is 122.
Long Statement,XenAPI,VM_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VM_metrics.cs,get_VCPUs_params,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_metrics_get_vcpus_params(session.uuid' _vm_metrics ?? "").parse()); " is 129.
Long Statement,XenAPI,VM_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VM_metrics.cs,get_VCPUs_flags,The length of the statement  "            return Maps.convert_from_proxy_long_string_array(session.proxy.vm_metrics_get_vcpus_flags(session.uuid' _vm_metrics ?? "").parse()); " is 132.
Long Statement,XenAPI,VM_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VM_metrics.cs,get_other_config,The length of the statement  "            return Maps.convert_from_proxy_string_string(session.proxy.vm_metrics_get_other_config(session.uuid' _vm_metrics ?? "").parse()); " is 129.
Long Statement,XenAPI,VM_metrics,C:\repos\xenserver_xenadmin\XenModel\XenAPI\VM_metrics.cs,set_other_config,The length of the statement  "            session.proxy.vm_metrics_set_other_config(session.uuid' _vm_metrics ?? ""' Maps.convert_to_proxy_string_string(_other_config)).parse(); " is 135.
Long Statement,XenAdmin.ServerDBs,Db,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\Db.cs,UpdateRelations,The length of the statement  "                        if (relation.manyField.ToLower() == propInfo.Prop.Name.ToLower() && propInfo.Table.Name.ToLower() == relation.manyType.ToLower()) " is 129.
Long Statement,XenAdmin.ServerDBs,Db,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\Db.cs,UpdateRelations,The length of the statement  "                                List<string> list = new List<string>((string[])Tables[relTypeName].Rows[propInfo.PropValue].Props[relation.field].XapiObjectValue); " is 131.
Long Statement,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,get_record,The length of the statement  "                FieldInfo info = type.GetField(propName' BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 137.
Long Statement,XenAdmin.ServerDBs,HighLoadEventGenerator,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\HighLoadEventGenerator.cs,GetHighLoadEvents,The length of the statement  "            // this fires an event every 2 seconds (for this connection). This is roughly equivalent to the rate at which events occur " is 122.
Long Statement,XenAdmin.ServerDBs,HighLoadEventGenerator,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\HighLoadEventGenerator.cs,GetHighLoadEvents,The length of the statement  "                            output.Add(DbProxy.MakeProxyEvent(typeName' opaqueRef' eventOperation' TypeCache.GetProxyType(typeName)' _proxy.get_record(typeName' opaqueRef' false))); " is 153.
Long Statement,XenAdmin.ServerDBs,ProxyMethodNameParser,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\ProxyMethodNameParser.cs,Parse,The length of the statement  "                MethodType fakeMethodType = proxyMethodName.StartsWith(String.Format("{0}_"' typeName)) ? MethodType.Sync : MethodType.Async; " is 125.
Long Statement,XenAdmin.ServerDBs,ProxyMethodNameParser,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\ProxyMethodNameParser.cs,Parse,The length of the statement  "                string methodName = fakeMethodType == MethodType.Sync ? proxyMethodName.Substring(typeName.Length + 1) : proxyMethodName.Substring(7 + typeName.Length); " is 152.
Long Statement,XenAdmin.ServerDBs,ProxyMethodNameParser,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\ProxyMethodNameParser.cs,Parse,The length of the statement  "                Type fakeType = Type.GetType(String.Format("XenAdmin.ServerDBs.FakeAPI.fake{0}"' typeName)' false' true) ?? typeof(fakeUnknown); " is 128.
Long Statement,XenAdmin.ServerDBs,ProxyMethodNameParser,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\ProxyMethodNameParser.cs,GetTypeName,The length of the statement  "                if (proxyMethodName.StartsWith(string.Format("{0}_"' type)) || proxyMethodName.StartsWith(string.Format("async_{0}_"' type))) " is 125.
Long Statement,XenAdmin.ServerDBs,SimulatorWebStream,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\SimulatorWebStream.cs,ParseHttpHeader,The length of the statement  "</xport>"' uuid' (long)(new TimeSpan(DateTime.Now.Ticks - new DateTime(1970' 1' 1).Ticks).TotalSeconds)' CpuStatsForHost(host_ref)); " is 132.
Long Statement,XenAdmin.ServerDBs,TypeCacheEntry,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\TypeCache.cs,GetFieldType,The length of the statement  "                        FieldInfo fi = ProxyType.GetField(fieldName' BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 141.
Long Statement,XenAdmin.ServerDBs,ClassGenerator,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\ClassGenerator.cs,CreateProxyInstance,The length of the statement  "            FieldInfo handlerField = proxyType.GetField(INVOCATION_HANDLER_FIELD_NAME' BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 171.
Long Statement,XenAdmin.ServerDBs,MethodImplementor,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\ClassGenerator.cs,EmitMethodSignature,The length of the statement  "            il.Emit(OpCodes.Ldstr' ts.Length == 1 ? ts[0].Name : "");  // normally Response<T> and we pick out the T. Couldn't work out how to pass this as a Type not a string. " is 164.
Long Statement,XenAdmin.ServerDBs.FakeAPI,fakeHost,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeHost.cs,license_apply,The length of the statement  "            license_params["expiry"] = string.Format("{0}{1}{2}T00:00:00Z"' expiry.Year' expiry.Month.ToString("00")' expiry.Day.ToString("00")); " is 133.
Long Statement,XenAdmin.ServerDBs.FakeAPI,fakeHost,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeHost.cs,reboot,The length of the statement  "                proxy.EditObject_(DbProxy.EditTypes.AddToDict' "host"' opaque_ref' "other_config"' "boot_time"' Util.ToUnixTime(DateTime.Now).ToString()); " is 138.
Long Statement,XenAdmin.ServerDBs.FakeAPI,fakeHost,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeHost.cs,call_plugin,The length of the statement  "                string metricsOpaqueRef = proxy.db.Tables["host"].Rows[hostToPowerOnOpaqueRef].Props["metrics"].XapiObjectValue.ToString(); " is 123.
Long Statement,XenAdmin.Actions.Wlb,RetrieveWlbConfigurationAction,C:\repos\xenserver_xenadmin\XenModel\WLB\RetrieveWlbConfigurationAction.cs,Run,The length of the statement  "                        Failure f = new Failure(new string[] { Messages.ResourceManager.GetString("WLB_ERROR_" + ((Failure)ex).ErrorDescription[1]) }); " is 127.
Long Statement,XenAdmin.Actions.Wlb,InitializeWLBAction,C:\repos\xenserver_xenadmin\XenModel\Actions\WLB\InitializeWLBAction.cs,Run,The length of the statement  "                RelatedTask = XenAPI.Pool.async_initialize_wlb(this.Session' _wlbUrl' _wlbUserName' _wlbPassword' _xenServerUserName' _xenServerPassword); " is 138.
Long Statement,XenAdmin.Actions.Wlb,SendWlbConfigurationAction,C:\repos\xenserver_xenadmin\XenModel\Actions\WLB\SendWlbConfigurationAction.cs,Run,The length of the statement  "                        Failure f = new Failure(new string[] { Messages.ResourceManager.GetString("WLB_ERROR_" + ((Failure)ex).ErrorDescription[1]) }); " is 127.
Long Statement,XenAdmin.Actions.Wlb,WlbRetrieveRecommendationAction,C:\repos\xenserver_xenadmin\XenModel\Actions\WLB\WlbRetrieveRecommendationAction.cs,Run,The length of the statement  "                if (WlbServerState.GetState(Pool) == WlbServerState.ServerState.ConnectionError || WlbServerState.GetState(Pool) == WlbServerState.ServerState.Unknown) " is 151.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                    //XenObject<Host> toHost = (!vm.Server.is_control_domain || (vm.Server.is_control_domain && (String.Compare(rec.Value[(int)WlbOptimizePool.RecProperties.Reason].ToString()' "PowerOn"' true) == 0))) ? pool.Connection.Cache.Find_by_Uuid<Host>(rec.Value[(int)WlbOptimizePool.RecProperties.ToHost]) : null; " is 302.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                    //XenObject<Host> fromHost = (!vm.Server.is_control_domain || (vm.Server.is_control_domain && (String.Compare(rec.Value[(int)WlbOptimizePool.RecProperties.Reason].ToString()' "PowerOff"' true) == 0))) ? pool.Connection.Resolve(vm.Server.resident_on) : null; " is 257.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                    Host toHost = (!vm.is_control_domain) ? pool.Connection.Cache.Find_By_Uuid<Host>(rec.Value[(int)RecProperties.ToHost]) : null; " is 126.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                    Host fromHost = (!vm.is_control_domain) ? pool.Connection.Resolve(vm.resident_on) : pool.Connection.Cache.Find_By_Uuid<Host>(rec.Value[(int)RecProperties.ToHost]); " is 163.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                    string powerOperation = Messages.ResourceManager.GetString(String.Format("WLB_OPT_OPERATION_HOST_{0}"' rec.Value[(int)RecProperties.Reason].ToString().ToUpper())); " is 163.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                    string resourcedReasonOutput = Messages.ResourceManager.GetString(String.Format("WLB_OPT_REASON_{0}"' rec.Value[(int)RecProperties.Reason].ToString().ToUpper())); " is 162.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                     *  - if the moving vm is running' toHost not equal to fromHost' and toHost is disable but it's a powerOnHost or toHost is enabled   " is 129.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                        || (vm.power_state == XenAPI.vm_power_state.Running && toHost != fromHost && ((powerOnHosts.Count > 0 && !toHost.enabled && powerOnHosts.Contains(toHost)) || (toHost != null && toHost.enabled)))) " is 195.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                        //if (vm.Server.is_control_domain && (powerOperation == Messages.WLB_OPT_OPERATION_HOST_POWERON)&& !fromHost.Server.IsLive) " is 123.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                        WlbOptimizationRecommendation optVmSetting = new WlbOptimizationRecommendation(vm' fromHost' toHost' resourcedReasonOutput' recId' optId' powerOperation); " is 154.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The length of the statement  "                        //if (!vm.Server.is_control_domain || (vm.Server.is_control_domain && (((powerOperation == Messages.WLB_OPT_OPERATION_HOST_POWERON) && !fromHost.Server.IsLive) || ((powerOperation == Messages.WLB_OPT_OPERATION_HOST_POWEROFF) && fromHost.Server.IsLive)))) " is 254.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,GetAllPowerOnHosts,The length of the statement  "                    Host fromHost = (!vm.is_control_domain) ? pool.Connection.Resolve(vm.resident_on) : pool.Connection.Cache.Find_By_Uuid<Host>(rec.Value[(int)RecProperties.ToHost]); " is 163.
Long Statement,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,GetAllPowerOnHosts,The length of the statement  "                    string powerOperation = Messages.ResourceManager.GetString(String.Format("WLB_OPT_OPERATION_HOST_{0}"' rec.Value[(int)RecProperties.Reason].ToString().ToUpper())); " is 163.
Long Statement,XenAdmin.Wlb,WlbConfigurationBase,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbConfigurationBase.cs,GetConfigValuePercent,The length of the statement  "            if (!_configuration.ContainsKey(key) || !double.TryParse(_configuration[key]' System.Globalization.NumberStyles.Any' _nfi' out floatValue)) " is 139.
Long Statement,XenAdmin.Wlb,WlbConfigurationBase,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbConfigurationBase.cs,GetConfigValueDouble,The length of the statement  "            if (!_configuration.ContainsKey(key) || !double.TryParse(_configuration[key]' System.Globalization.NumberStyles.Any' _nfi' out doubleValue)) " is 140.
Long Statement,XenAdmin.XenSearch,PropertyGrouping<T>,C:\repos\xenserver_xenadmin\XenModel\XenSearch\GroupingTypes.cs,GetGroupName,The length of the statement  "            Debug.Assert(i18ns == null || i18ns.ContainsKey((T)group)); //if i18ns is specified' it should contain an item for the group " is 124.
Long Statement,XenAdmin.XenSearch,MetricUpdater,C:\repos\xenserver_xenadmin\XenModel\XenSearch\MetricUpdater.cs,UpdateMetrics,The length of the statement  "                        //Intentionally using TryGetValue (instead of indexer's getter)' because there is a slight chance 'host' is not in 'hosts.Keys' anymore. " is 136.
Long Statement,XenAdmin.XenSearch,MetricUpdater,C:\repos\xenserver_xenadmin\XenModel\XenSearch\MetricUpdater.cs,GetUri,The length of the statement  "            builder.Query = string.Format(RrdHostAndVmUpdatesQuery' Uri.EscapeDataString(session.uuid)' TimeUtil.TicksToSecondsSince1970(DateTime.UtcNow.Ticks - (host.Connection.ServerTimeOffset.Ticks + TicksInTenSeconds))' RrdCFAverage' 5); " is 229.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmMemoryUsageStringByMetric,The length of the statement  "            return String.Format(Messages.QUERY_MEMORY_USAGE' Util.MemorySizeStringSuitableUnits((total - (free * Util.BINARY_KILO))' false)' Util.MemorySizeStringSuitableUnits(total' false)); " is 180.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmMemoryUsagePercentageStringByMetric,The length of the statement  "            return String.Format(Messages.QUERY_MEMORY_PERCENT' ((total - (free * Util.BINARY_KILO)) / total * 100.0).ToString("0.")' Util.MemorySizeStringSuitableUnits(total' false)); " is 172.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmDiskUsageString,The length of the statement  "                double value = MetricUpdater.GetValue(vm' String.Format("vbd_{0}_read"' vbd.device)) + MetricUpdater.GetValue(vm' String.Format("vbd_{0}_write"' vbd.device)); " is 158.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmDiskUsageString,The length of the statement  "            return i == 0 ? Messages.HYPHEN : String.Format(Messages.QUERY_DATA_AVG_MAX' (sum / (Util.BINARY_KILO * i)).ToString("0.")' (max / Util.BINARY_KILO).ToString("0.")); " is 165.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmNetworkUsageString,The length of the statement  "                double value = MetricUpdater.GetValue(vm' String.Format("vif_{0}_rx"' vif.device)) + MetricUpdater.GetValue(vm' String.Format("vbd_{0}_tx"' vif.device)); " is 153.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmNetworkUsageString,The length of the statement  "            return i == 0 ? Messages.HYPHEN : String.Format(Messages.QUERY_DATA_AVG_MAX' (sum / (Util.BINARY_KILO * i)).ToString("0.")' (max / Util.BINARY_KILO).ToString("0.")); " is 165.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,hostMemoryUsageStringByMetric,The length of the statement  "            return String.Format(Messages.QUERY_MEMORY_USAGE' Util.MemorySizeStringSuitableUnits((total - free) * Util.BINARY_KILO' false)' Util.MemorySizeStringSuitableUnits(total * Util.BINARY_KILO' false)); " is 197.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,hostMemoryUsagePercentageStringByMetric,The length of the statement  "            return String.Format(Messages.QUERY_MEMORY_PERCENT' ((total - free) / total * 100.0).ToString("0.")' Util.MemorySizeStringSuitableUnits(total * Util.BINARY_KILO' false)); " is 170.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,hostNetworkUsageStringByMetric,The length of the statement  "                double value = MetricUpdater.GetValue(host' String.Format("pif_{0}_rx"' pif.device)) + MetricUpdater.GetValue(host' String.Format("vbd_{0}_tx"' pif.device)); " is 157.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,hostNetworkUsageStringByMetric,The length of the statement  "            return i == 0 ? Messages.HYPHEN : String.Format(Messages.QUERY_DATA_AVG_MAX' (sum / (Util.BINARY_KILO * i)).ToString("0.")' (max / Util.BINARY_KILO).ToString("0.")); " is 165.
Long Statement,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,PGPUMemoryUsageString,The length of the statement  "                return String.Format(Messages.QUERY_MEMORY_USAGE' (used / (free + used) * 100).ToString("0.") + "%"' Util.MemorySizeStringSuitableUnits(free + used' false)); " is 157.
Long Statement,XenAdmin.XenSearch,Query,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Query.cs,Match,The length of the statement  "            return (scope.WantType(o) && o.Show(XenAdminConfigManager.Provider.ShowHiddenVMs) && (filter == null || filter.Match(o) != false)); " is 131.
Long Statement,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,SearchFor,The length of the statement  "                        QueryFilter uuidQuery = new StringPropertyQuery(PropertyNames.uuid' Helpers.GetUuid(poolAncestor)' StringPropertyQuery.PropertyQueryType.exactmatch' true); " is 155.
Long Statement,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,SearchFor,The length of the statement  "                            QueryFilter uuidQuery = new StringPropertyQuery(PropertyNames.uuid' Helpers.GetUuid(hostAncestor)' StringPropertyQuery.PropertyQueryType.exactmatch' true); " is 155.
Long Statement,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,SearchFor,The length of the statement  "                QueryFilter uuidQuery = new StringPropertyQuery(PropertyNames.uuid' Helpers.GetUuid(value)' StringPropertyQuery.PropertyQueryType.exactmatch' true); " is 148.
Long Statement,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,SearchFor,The length of the statement  "                return new Search(query' hostGrouping' false' String.Format(Messages.SEARCH_TITLE_HOST' Helpers.GetName(value))' null' false); " is 126.
Long Statement,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,SearchFor,The length of the statement  "                QueryFilter uuidQuery = new StringPropertyQuery(PropertyNames.uuid' Helpers.GetUuid(value)' StringPropertyQuery.PropertyQueryType.exactmatch' true); " is 148.
Long Statement,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,SearchFor,The length of the statement  "                return new Search(query' poolGrouping' false' String.Format(Messages.SEARCH_TITLE_POOL' Helpers.GetName(value))' null' false); " is 126.
Long Statement,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,InitDefaultSearches,The length of the statement  "                            new EnumPropertyQuery<VM.VirtualisationStatus>(PropertyNames.virtualisation_status' VM.VirtualisationStatus.IO_DRIVERS_INSTALLED | VM.VirtualisationStatus.MANAGEMENT_INSTALLED' false) " is 183.
Long Statement,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,InitDefaultSearches,The length of the statement  "            Search VMsByAppliance = new Search(new Query(new QueryScope(ObjectTypes.VM)' new BooleanQuery(PropertyNames.in_any_appliance' true))' " is 133.
Long Statement,XenAdmin.XenSearch,SearchMarshalling,C:\repos\xenserver_xenadmin\XenModel\XenSearch\SearchMarshalling.cs,SearchesToXML,The length of the statement  "            document.AppendChild(document.CreateDocumentType(Search.BrandedSearchKey' "-//" + Search.BrandedSearchKey.ToUpper() + "//DTD " + Search.BrandedSearchKey.ToUpper() + " 1//EN"' Search.BrandedSearchKey + "-1.dtd"' null)); " is 218.
Long Statement,XenAdmin.XenSearch,Sort,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Sort.cs,CalcProperty,The length of the statement  "                if (customFieldDefinition == null)  // a custom field that existed at the time the search was created but no longer exists " is 122.
Long Statement,XenAdmin.XenSearch,Sort,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Sort.cs,Compare,The length of the statement  "                c1 = (_1 is DateTime ? ((DateTime)_1).ToString("u"' CultureInfo.InvariantCulture) : _1.ToString());  // CP-2036' CA-67113 " is 121.
Complex Conditional,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,ApplyLicenseEditionAction,The conditional expression  "xos != null &&  Host == null && Pool == null && xos.Count() == 1"  is complex.
Complex Conditional,XenAdmin.Actions,InstallPVToolsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\InstallPVToolsAction.cs,Run,The conditional expression  "guestMetrics != null && !VM.HasNewVirtualisationStates() && guestMetrics.PV_drivers_installed() && guestMetrics.PV_drivers_up_to_date"  is complex.
Complex Conditional,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,CompatibleCPUs,The conditional expression  "cpu1.vendor != cpu2.vendor ||                          cpu1.family != cpu2.family ||                          cpu1.model != cpu2.model ||                          cpu1.flags != cpu2.flags"  is complex.
Complex Conditional,XenAdmin.Core,RbacCollectorProxy,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\RbacCollectorProxy.cs,Invoke,The conditional expression  "proxyMethodName == "host_call_plugin" && args != null && args.Length > 2 && "trim".Equals(args[2])"  is complex.
Complex Conditional,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,FindNetworkOfVIF,The conditional expression  "vif.device == device && (iXenObject is Host && ((Host)iXenObject).resident_VMs.Contains(vif.VM) || iXenObject is VM && vif.VM.opaque_ref == iXenObject.opaque_ref)"  is complex.
Complex Conditional,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,FindVlan,The conditional expression  "pif.device == device && (iXenObject is Host && pif.host.opaque_ref == iXenObject.opaque_ref || iXenObject is VM && pif.host.opaque_ref == ((VM)iXenObject).resident_on.opaque_ref) && pif.VLAN == long.Parse(tag)"  is complex.
Complex Conditional,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,FindPIF,The conditional expression  "(!physical || pif.IsPhysical()) && pif.device == device && (iXenObject is Host && pif.host.opaque_ref == iXenObject.opaque_ref || iXenObject is VM && pif.host.opaque_ref == ((VM)iXenObject).resident_on.opaque_ref)"  is complex.
Complex Conditional,XenAdmin.Actions.VMActions,VMDestroyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMDestroyAction.cs,DestroyVM,The conditional expression  "failure != null && failure.ErrorDescription != null && failure.ErrorDescription.Count > 0 && failure.ErrorDescription[0] == "HANDLE_INVALID""  is complex.
Complex Conditional,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ConnectWorkerThread,The conditional expression  "exn is XmlRpcIllFormedXmlException ||                                   exn is System.IO.IOException ||                                   (exn is WebException && ((exn as WebException).Status == WebExceptionStatus.KeepAliveFailure || (exn as WebException).Status == WebExceptionStatus.ConnectFailure))"  is complex.
Complex Conditional,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionResult,The conditional expression  "FindingNewMaster && (error is WebException || (f != null && f.ErrorDescription[0] != Failure.RBAC_PERMISSION_DENIED))"  is complex.
Complex Conditional,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionLost,The conditional expression  "!EventNextBlocked && (MasterMayChange || ha_enabled) && members.Count > 1"  is complex.
Complex Conditional,XenAPI,PVS_cache_storage,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PVS_cache_storage.cs,IsInUse,The conditional expression  "vm != null && vm.resident_on != null && vm.resident_on.opaque_ref == host.opaque_ref &&                      pvsProxy.site != null && pvsProxy.site.opaque_ref == site.opaque_ref"  is complex.
Complex Conditional,XenAPI,VM_appliance,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM_appliance.cs,GetFateSharingVMs,The conditional expression  "otherVm.is_a_real_vm() && otherVm.power_state != vm_power_state.Halted && otherVm.SRs().Intersect(thisVm.SRs()).FirstOrDefault() != null && !fateSharingVms.Contains(otherVm)"  is complex.
Complex Conditional,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,TryParseCslg,The conditional expression  "ErrorDescription.Count > 2 && ErrorDescription[2] != null && ErrorDescription[0] != null && ErrorDescription[0].StartsWith("SR_BACKEND_FAILURE")"  is complex.
Complex Conditional,XenAPI,Pool,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Pool.cs,GetMaximumTolerableHostFailures,The conditional expression  "p!= null && p.other_config != null                  && p.other_config.ContainsKey(FAULT_TOLERANCE_LIMIT_FOR_HCI)                  && long.TryParse(p.other_config[FAULT_TOLERANCE_LIMIT_FOR_HCI]' out result)                  && result <= max"  is complex.
Complex Conditional,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,LogRequest,The conditional expression  "methodName == "event.next" || methodName == "event.from" || methodName == "host.get_servertime" || methodName.StartsWith("task.get_")"  is complex.
Complex Conditional,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,IsBroken,The conditional expression  "PBDs == null || PBDs.Count == 0 ||                  checkAttached && !AllPBDsAttached()"  is complex.
Complex Conditional,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,Target,The conditional expression  "(type == SR.SRTypes.netapp || type == SR.SRTypes.lvmoiscsi || type == SR.SRTypes.equal) && pbd.device_config.ContainsKey("target")"  is complex.
Complex Conditional,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CanBeMoved,The conditional expression  "!is_a_template && !Locked && allowed_operations != null && allowed_operations.Contains(vm_operations.export) && power_state != vm_power_state.Suspended"  is complex.
Complex Conditional,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CanBeCopied,The conditional expression  "!is_a_template && !Locked && allowed_operations != null && allowed_operations.Contains(vm_operations.export) && power_state != vm_power_state.Suspended"  is complex.
Complex Conditional,XenAdmin.Wlb,WlbOptimizationRecommendationCollection,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbOptimizationRecommendation.cs,LoadSortedRecommendationList,The conditional expression  "(vm.is_control_domain && fromHost!=null)                          || (vm.power_state == XenAPI.vm_power_state.Running && toHost != fromHost && ((powerOnHosts.Count > 0 && !toHost.enabled && powerOnHosts.Contains(toHost)) || (toHost != null && toHost.enabled)))"  is complex.
Complex Conditional,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmMemoryUsageStringByMetric,The conditional expression  "total == 0 || Double.IsNaN(total) || Double.IsNaN(free) || total < (free * Util.BINARY_KILO)"  is complex.
Complex Conditional,XenAdmin.XenSearch,Query,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Query.cs,Equals,The conditional expression  "!((filter == null && other.filter == null) || (filter != null && filter.Equals(other.filter)))"  is complex.
Complex Conditional,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,Equals,The conditional expression  "!((name == null && other.name == null) || (name != null && name.Equals(other.Name)))"  is complex.
Complex Conditional,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,Equals,The conditional expression  "!((query == null && other.query == null) || (query != null && query.Equals(other.Query)))"  is complex.
Complex Conditional,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,Equals,The conditional expression  "!((grouping == null && other.grouping == null) || (grouping != null && grouping.Equals(other.grouping)))"  is complex.
Complex Conditional,XenAdmin.XenSearch,Search,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Search.cs,Equals,The conditional expression  "!((connection == null && other.connection == null) || (connection != null && connection.Equals(other.connection)))"  is complex.
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMStartAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMStartAction.cs,VMStartAbstractAction,The constructor "VMStartAbstractAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMCloneAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMCloneAction.cs,VMCloneAction,The constructor "VMCloneAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMDestroyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMDestroyAction.cs,VMDestroyAction,The constructor "VMDestroyAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMDestroyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMDestroyAction.cs,VMDestroyAction,The constructor "VMDestroyAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMDestroyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMDestroyAction.cs,VMDestroyAction,The constructor "VMDestroyAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMRebootAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMRebootAction.cs,VMRebootAction,The constructor "VMRebootAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMRebootAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMRebootAction.cs,VMRebootAction,The constructor "VMRebootAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMRebootAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMRebootAction.cs,VMRebootAction,The constructor "VMRebootAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMShutdownAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMShutdownAction.cs,VMShutdownAction,The constructor "VMShutdownAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMCleanShutdown,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMShutdownAction.cs,VMCleanShutdown,The constructor "VMCleanShutdown" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMCleanShutdown,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMShutdownAction.cs,VMCleanShutdown,The constructor "VMCleanShutdown" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMHardShutdown,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMShutdownAction.cs,VMHardShutdown,The constructor "VMHardShutdown" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMHardShutdown,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMShutdownAction.cs,VMHardShutdown,The constructor "VMHardShutdown" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.Actions.VMActions,VMToTemplateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMToTemplateAction.cs,VMToTemplateAction,The constructor "VMToTemplateAction" calls a virtual method "Home".
Virtual Method Call from Constructor,XenAdmin.ServerDBs,Table,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\Db.cs,Table,The constructor "Table" calls a virtual method "OnChanged".
Virtual Method Call from Constructor,XenAdmin.ServerDBs,Row,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\Db.cs,Row,The constructor "Row" calls a virtual method "OnChanged".
Empty Catch Block,XenAdmin.Actions,CancellingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\CancellingAction.cs,DoWithSessionRetry,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions,UploadSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\UploadSupplementalPackAction.cs,UploadSupplementalPack,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions,ExportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ExportVmAction.cs,Run,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions,VMSnapshotCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSnapshotCreateAction.cs,Run,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions,SavePowerOnSettingsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SavePowerOnSettingsAction.cs,SaveConfig,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions,SrIntroduceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrIntroduceAction.cs,Run,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions,SrCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCreateAction.cs,Run,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions,SrCslgStoragePoolScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\StorageLink\SrCslgStoragePoolScanAction.cs,ParseStoragePoolXml,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions,VMSnapshotRevertAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSnapshotRevertAction.cs,Run,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions.DR,VdiLoadMetadataAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\VdiLoadMetadataAction.cs,Run,The method has an empty catch block.
Empty Catch Block,XenAdmin.Actions.HostActions,SendLicenseDataHelper,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\LicensingHelper.cs,ThreadProc,The method has an empty catch block.
Empty Catch Block,XenAdmin.Alerts,PerfmonOptionsDefinition,C:\repos\xenserver_xenadmin\XenModel\Alerts\PerfmonOptionsDefinition.cs,GetSmtpServerAddress,The method has an empty catch block.
Empty Catch Block,XenAdmin.Alerts,PerfmonOptionsDefinition,C:\repos\xenserver_xenadmin\XenModel\Alerts\PerfmonOptionsDefinition.cs,GetSmtpPort,The method has an empty catch block.
Empty Catch Block,XenAPI,Helper,C:\repos\xenserver_xenadmin\XenModel\XenAPI\ApiVersion.cs,StringArrayToEnumList,The method has an empty catch block.
Empty Catch Block,XenAPI,Helper,C:\repos\xenserver_xenadmin\XenModel\XenAPI\ApiVersion.cs,StringArrayToLongArray,The method has an empty catch block.
Empty Catch Block,XenAPI,Helper,C:\repos\xenserver_xenadmin\XenModel\XenAPI\ApiVersion.cs,LongArrayToStringArray,The method has an empty catch block.
Empty Catch Block,XenAPI,Helper,C:\repos\xenserver_xenadmin\XenModel\XenAPI\ApiVersion.cs,ObjectArrayToEnumList,The method has an empty catch block.
Empty Catch Block,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,DoWithSessionRetry,The method has an empty catch block.
Empty Catch Block,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,Title,The method has an empty catch block.
Empty Catch Block,XenAPI,UserDetails,C:\repos\xenserver_xenadmin\XenModel\XenAPI\UserDetails.cs,UserDetails,The method has an empty catch block.
Empty Catch Block,XenAPI,UserDetails,C:\repos\xenserver_xenadmin\XenModel\XenAPI\UserDetails.cs,GetGroupMembershipNames,The method has an empty catch block.
Magic Number,XenAdmin.Actions,ActionBase,C:\repos\xenserver_xenadmin\XenModel\Actions\Action.cs,ActionBase,The following statement contains a magic number: if (completeImmediately)              {                  if (!string.IsNullOrEmpty(error))                      _exception = new Exception(error);                    Finished = DateTime.Now;                  _percentComplete = 100;                  _isCompleted = true;              }
Magic Number,XenAdmin.Actions,ActionBase,C:\repos\xenserver_xenadmin\XenModel\Actions\Action.cs,Tick,The following statement contains a magic number: if (percent > 100)                  percent = 100;
Magic Number,XenAdmin.Actions,ActionBase,C:\repos\xenserver_xenadmin\XenModel\Actions\Action.cs,Tick,The following statement contains a magic number: if (percent > 100)                  percent = 100;
Magic Number,XenAdmin.Actions,ActionBase,C:\repos\xenserver_xenadmin\XenModel\Actions\Action.cs,MarkCompletedCore,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,TransferDataToHealthCheckAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\TransferHealthCheckSettingAction.cs,SendMessageToHealthCheck,The following statement contains a magic number: int retryCount = 120;
Magic Number,XenAdmin.Actions,TransferDataToHealthCheckAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\TransferHealthCheckSettingAction.cs,SendMessageToHealthCheck,The following statement contains a magic number: do              {                  try                  {                      pipeClient.Connect(0);                  }                  catch (System.TimeoutException exp)                  {                      throw exp;                  }                  catch                  {                      System.Threading.Thread.Sleep(1000);                      pipeClient = new NamedPipeClientStream("."' HealthCheckSettings.HEALTH_CHECK_PIPE' PipeDirection.Out);                  }              } while (!pipeClient.IsConnected && retryCount-- != 0);
Magic Number,XenAdmin.Actions,GetHealthCheckAnalysisResultAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\GetHealthCheckAnalysisResultAction.cs,Run,The following statement contains a magic number: try             {                 var healthCheckSettings = Pool.HealthCheckSettings();                    var diagnosticToken = healthCheckSettings.GetSecretyInfo(Session' HealthCheckSettings.DIAGNOSTIC_TOKEN_SECRET);                 if (string.IsNullOrEmpty(diagnosticToken))                 {                     log.DebugFormat("Cannot get the diagnostic result for {0}' because couldn't retrieve the diagnostic token"' Pool.Name());                     Description = Messages.ACTION_GET_HEALTH_CHECK_RESULT_FAILED;                     return;                 }                  if (!healthCheckSettings.HasUpload)                 {                     log.DebugFormat("Cannot get the diagnostic result for {0}' because the there is no upload completed yet"' Pool.Name());                     Description = Messages.ACTION_GET_HEALTH_CHECK_RESULT_FAILED;                     return;                 }                      var analysisProgress = GetAnalysisProgress(diagnosticToken' healthCheckSettings.UploadUuid);                  if (analysisProgress >= 0 && analysisProgress < 100) // check if the progress is a valid value less than 100                 {                     log.DebugFormat("Analysis for {0} not completed yet"' Pool.Name());                     Description = Messages.COMPLETED;                     return;                 }                    var analysisResult = GetAnalysisResult(diagnosticToken' healthCheckSettings.UploadUuid);                    if (analysisResult.Count == 0 && analysisProgress == -1 && DateTime.Compare(healthCheckSettings.LastSuccessfulUploadTime.AddMinutes(10)' DateTime.UtcNow) > 0)                 {                     log.DebugFormat("Diagnostic result for {0} is empty. Maybe analysis result is not yet available"' Pool.Name());                     Description = Messages.COMPLETED;                     return;                 }                  log.Debug("Saving analysis result");                 Dictionary<string' string> newConfig = Pool.health_check_config;                 newConfig[HealthCheckSettings.REPORT_ANALYSIS_SEVERITY] = GetMaxSeverity(analysisResult).ToString();                 newConfig[HealthCheckSettings.REPORT_ANALYSIS_ISSUES_DETECTED] = GetDistinctIssueCount(analysisResult).ToString();                  newConfig[HealthCheckSettings.REPORT_ANALYSIS_UPLOAD_UUID] = healthCheckSettings.UploadUuid;                  newConfig[HealthCheckSettings.REPORT_ANALYSIS_UPLOAD_TIME] = healthCheckSettings.LastSuccessfulUpload;                 Pool.set_health_check_config(Session' Pool.opaque_ref' newConfig);             }             catch (Exception e)             {                 log.ErrorFormat("Exception while getting diagnostic result from {0}. Exception Message: {1} "' diagnosticDomainName' e.Message);                 Description = Messages.ACTION_GET_HEALTH_CHECK_RESULT_FAILED;                 throw;             }
Magic Number,XenAdmin.Actions,GetHealthCheckAnalysisResultAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\GetHealthCheckAnalysisResultAction.cs,Run,The following statement contains a magic number: try             {                 var healthCheckSettings = Pool.HealthCheckSettings();                    var diagnosticToken = healthCheckSettings.GetSecretyInfo(Session' HealthCheckSettings.DIAGNOSTIC_TOKEN_SECRET);                 if (string.IsNullOrEmpty(diagnosticToken))                 {                     log.DebugFormat("Cannot get the diagnostic result for {0}' because couldn't retrieve the diagnostic token"' Pool.Name());                     Description = Messages.ACTION_GET_HEALTH_CHECK_RESULT_FAILED;                     return;                 }                  if (!healthCheckSettings.HasUpload)                 {                     log.DebugFormat("Cannot get the diagnostic result for {0}' because the there is no upload completed yet"' Pool.Name());                     Description = Messages.ACTION_GET_HEALTH_CHECK_RESULT_FAILED;                     return;                 }                      var analysisProgress = GetAnalysisProgress(diagnosticToken' healthCheckSettings.UploadUuid);                  if (analysisProgress >= 0 && analysisProgress < 100) // check if the progress is a valid value less than 100                 {                     log.DebugFormat("Analysis for {0} not completed yet"' Pool.Name());                     Description = Messages.COMPLETED;                     return;                 }                    var analysisResult = GetAnalysisResult(diagnosticToken' healthCheckSettings.UploadUuid);                    if (analysisResult.Count == 0 && analysisProgress == -1 && DateTime.Compare(healthCheckSettings.LastSuccessfulUploadTime.AddMinutes(10)' DateTime.UtcNow) > 0)                 {                     log.DebugFormat("Diagnostic result for {0} is empty. Maybe analysis result is not yet available"' Pool.Name());                     Description = Messages.COMPLETED;                     return;                 }                  log.Debug("Saving analysis result");                 Dictionary<string' string> newConfig = Pool.health_check_config;                 newConfig[HealthCheckSettings.REPORT_ANALYSIS_SEVERITY] = GetMaxSeverity(analysisResult).ToString();                 newConfig[HealthCheckSettings.REPORT_ANALYSIS_ISSUES_DETECTED] = GetDistinctIssueCount(analysisResult).ToString();                  newConfig[HealthCheckSettings.REPORT_ANALYSIS_UPLOAD_UUID] = healthCheckSettings.UploadUuid;                  newConfig[HealthCheckSettings.REPORT_ANALYSIS_UPLOAD_TIME] = healthCheckSettings.LastSuccessfulUpload;                 Pool.set_health_check_config(Session' Pool.opaque_ref' newConfig);             }             catch (Exception e)             {                 log.ErrorFormat("Exception while getting diagnostic result from {0}. Exception Message: {1} "' diagnosticDomainName' e.Message);                 Description = Messages.ACTION_GET_HEALTH_CHECK_RESULT_FAILED;                 throw;             }
Magic Number,XenAdmin.Actions,GetHealthCheckAnalysisResultAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\GetHealthCheckAnalysisResultAction.cs,ParseAnalysisProgress,The following statement contains a magic number: try             {                 var serializer = new JavaScriptSerializer();                 Dictionary<string' object> result = serializer.DeserializeObject(jsonString) as Dictionary<string' object>;                 var progress = result != null && result.ContainsKey(uploadUuid) ? Convert.ToDouble(result[uploadUuid]) : -1;                 return progress >= 0 && progress <= 100 ? progress : -1;             }             catch (Exception e)             {                 log.DebugFormat("Exception while deserializing json: {0}. Exception Message: {1} "' jsonString' e.Message);                 return -1;             }
Magic Number,XenAdmin.Actions,UploadServerStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\UploadServerStatusReportAction.cs,BundleUpload,The following statement contains a magic number: XenServerHealthCheckUpload upload = new XenServerHealthCheckUpload(uploadToken' 9' uploadUrl' null);
Magic Number,XenAdmin.Actions,CancellingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\CancellingAction.cs,DoWithSessionRetry,The following statement contains a magic number: int retries = 60;
Magic Number,XenAdmin.Actions,CancellingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\CancellingAction.cs,DoWithSessionRetry,The following statement contains a magic number: while (true)              {                  try                  {                      object[] ps = new object[p.Length + 1];                        ps[0] = session;                        for (int i = 0; i < p.Length; i++)                      {                          ps[i + 1] = p[i];                      }                        try                      {                          return f.DynamicInvoke(ps);                      }                      catch (TargetInvocationException exn)                      {                          throw exn.InnerException;                      }                  }                  catch (XmlRpcNullParameterException xmlExcept)                  {                      log.ErrorFormat("XmlRpcNullParameterException in DoWithSessionRetry' retry {0}"' retries);                      log.Error(xmlExcept' xmlExcept);                      throw new Exception(Messages.INVALID_SESSION);                  }                  catch (XmlRpcIllFormedXmlException xmlRpcIllFormedXmlException)                  {                      log.ErrorFormat("XmlRpcIllFormedXmlException in DoWithSessionRetry' retry {0}"' retries);                      log.Error(xmlRpcIllFormedXmlException' xmlRpcIllFormedXmlException);                        if (!Connection.ExpectDisruption || retries <= 0)                          throw;                  }                  catch (WebException we)                  {                      log.ErrorFormat("WebException in DoWithSessionRetry' retry {0}"' retries);                      log.Error(we' we);                        if (retries <= 0)                          throw;                  }                  catch (Failure failure)                  {                      log.ErrorFormat("Failure in DoWithSessionRetry' retry {0}"' retries);                      log.Error(failure' failure);                        if (retries <= 0)                          throw;                        if (failure.ErrorDescription.Count < 1 || failure.ErrorDescription[0] != XenAPI.Failure.SESSION_INVALID)                          throw;                  }                    Session newSession;                    try                  {                      // try to create a new TCP stream to use' as the other one has failed us                      newSession = NewSession();                      session = newSession;                  }                  catch (DisconnectionException e)                  {                      if (!Connection.ExpectDisruption)                      {                          //this was not expected' throw the d/c exception                          throw e;                      }                      // We are expecting disruption on this connection. We need to wait for the hearbeat to recover.                      // Though after 60 retries we will give up in the previous try catch block                  }                  catch                  {                      // do nothing                  }                        retries--;                    Thread.Sleep(Connection.ExpectDisruption ? 500 : 100);              }
Magic Number,XenAdmin.Actions,CancellingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\CancellingAction.cs,DoWithSessionRetry,The following statement contains a magic number: while (true)              {                  try                  {                      object[] ps = new object[p.Length + 1];                        ps[0] = session;                        for (int i = 0; i < p.Length; i++)                      {                          ps[i + 1] = p[i];                      }                        try                      {                          return f.DynamicInvoke(ps);                      }                      catch (TargetInvocationException exn)                      {                          throw exn.InnerException;                      }                  }                  catch (XmlRpcNullParameterException xmlExcept)                  {                      log.ErrorFormat("XmlRpcNullParameterException in DoWithSessionRetry' retry {0}"' retries);                      log.Error(xmlExcept' xmlExcept);                      throw new Exception(Messages.INVALID_SESSION);                  }                  catch (XmlRpcIllFormedXmlException xmlRpcIllFormedXmlException)                  {                      log.ErrorFormat("XmlRpcIllFormedXmlException in DoWithSessionRetry' retry {0}"' retries);                      log.Error(xmlRpcIllFormedXmlException' xmlRpcIllFormedXmlException);                        if (!Connection.ExpectDisruption || retries <= 0)                          throw;                  }                  catch (WebException we)                  {                      log.ErrorFormat("WebException in DoWithSessionRetry' retry {0}"' retries);                      log.Error(we' we);                        if (retries <= 0)                          throw;                  }                  catch (Failure failure)                  {                      log.ErrorFormat("Failure in DoWithSessionRetry' retry {0}"' retries);                      log.Error(failure' failure);                        if (retries <= 0)                          throw;                        if (failure.ErrorDescription.Count < 1 || failure.ErrorDescription[0] != XenAPI.Failure.SESSION_INVALID)                          throw;                  }                    Session newSession;                    try                  {                      // try to create a new TCP stream to use' as the other one has failed us                      newSession = NewSession();                      session = newSession;                  }                  catch (DisconnectionException e)                  {                      if (!Connection.ExpectDisruption)                      {                          //this was not expected' throw the d/c exception                          throw e;                      }                      // We are expecting disruption on this connection. We need to wait for the hearbeat to recover.                      // Though after 60 retries we will give up in the previous try catch block                  }                  catch                  {                      // do nothing                  }                        retries--;                    Thread.Sleep(Connection.ExpectDisruption ? 500 : 100);              }
Magic Number,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,Run,The following statement contains a magic number: foreach (IXenObject xo in xos)              {                  Connection = xo.Connection;                    if (!Connection.IsConnected)                  {                      continue;                  }                    Host host = null;                  Pool pool = null;                    if(xo is Host)                      host = xo as Host;                  if(xo is Pool)                  {                      pool = xo as Pool;                      host = xo.Connection.Resolve(pool.master);                  }                    string previousLicenseServerAddress = null;                  string previousLicenseServerPort = null;                  CollectionChangeEventHandler alertsChangeHandler = null;                  string alertText = null;                  object lck = new object();                    if (host != null && host.license_server.ContainsKey("address"))                  {                      previousLicenseServerAddress = host.license_server["address"];                  }                    if (host != null &&  host.license_server.ContainsKey("port"))                  {                      previousLicenseServerPort = host.license_server["port"];                  }                    try                  {                      if(pool != null)                          pool.Connection.Cache.Hosts.ToList().ForEach(h=>SetLicenseServer(h' _licenseServerAddress' _licenseServerPort));                      else                          SetLicenseServer(host' _licenseServerAddress' _licenseServerPort);                        IXenObject xoClosure = xo;                      alertsChangeHandler = delegate(object sender' CollectionChangeEventArgs e)                      {                          if (e.Action == CollectionChangeAction.Add)                          {                              lock (lck)                              {                                  Alert alert = (Alert)e.Element;                                  Message.MessageType messageType;                                  // if this is a message alert' its Name property will contain the MessageType                                  if (host != null && host.uuid == alert.HostUuid && Enum.TryParse(alert.Name' out messageType))                                  {                                      switch (messageType)                                      {                                          case Message.MessageType.LICENSE_NOT_AVAILABLE:                                          case Message.MessageType.LICENSE_SERVER_UNREACHABLE:                                          case Message.MessageType.LICENSE_SERVER_VERSION_OBSOLETE:                                              alertText = string.Format(Message.FriendlyBody(alert.Name)' xoClosure.Name());                                              break;                                          case Message.MessageType.GRACE_LICENSE:                                              alertText = string.Empty;                                              break;                                      }                                  }                              }                          }                      };                        Alert.RegisterAlertCollectionChanged(alertsChangeHandler);                        // PR-1102: catch the host's license data' before applying the new one' so it can be sent later to the licensing server                      LicensingHelper.LicenseDataStruct previousLicenseData = new LicensingHelper.LicenseDataStruct(host);                        if(xo is Host && host != null)                      {                          Host.apply_edition(host.Connection.Session' host.opaque_ref' Host.GetEditionText(_edition)' false);                            // PR-1102: populate the list of updated hosts                          updatedHosts.Add(host' previousLicenseData);                      }                        if (xo is Pool)                      {                          Pool.apply_edition(xo.Connection.Session' pool.opaque_ref' Host.GetEditionText(_edition));                            xo.Connection.Cache.Hosts.ToList().ForEach(h => updatedHosts.Add(h' previousLicenseData));                      }                        Description = Messages.APPLYLICENSE_UPDATED;                  }                  catch (Failure e)                  {                      for (int i = 0; i < 50; i++)                      {                          Thread.Sleep(100);                            lock (lck)                          {                              if (alertText != null)                                  break;                          }                      }                        LicenseFailures.Add(new LicenseFailure(host' alertText ?? e.Message));                                            if (pool != null)                          pool.Connection.Cache.Hosts.ToList().ForEach(h => SetLicenseServer(h' previousLicenseServerAddress' previousLicenseServerPort));                      else                          SetLicenseServer(host' previousLicenseServerAddress' previousLicenseServerPort);                  }                  finally                  {                      Alert.DeregisterAlertCollectionChanged(alertsChangeHandler);                  }              }
Magic Number,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,Run,The following statement contains a magic number: foreach (IXenObject xo in xos)              {                  Connection = xo.Connection;                    if (!Connection.IsConnected)                  {                      continue;                  }                    Host host = null;                  Pool pool = null;                    if(xo is Host)                      host = xo as Host;                  if(xo is Pool)                  {                      pool = xo as Pool;                      host = xo.Connection.Resolve(pool.master);                  }                    string previousLicenseServerAddress = null;                  string previousLicenseServerPort = null;                  CollectionChangeEventHandler alertsChangeHandler = null;                  string alertText = null;                  object lck = new object();                    if (host != null && host.license_server.ContainsKey("address"))                  {                      previousLicenseServerAddress = host.license_server["address"];                  }                    if (host != null &&  host.license_server.ContainsKey("port"))                  {                      previousLicenseServerPort = host.license_server["port"];                  }                    try                  {                      if(pool != null)                          pool.Connection.Cache.Hosts.ToList().ForEach(h=>SetLicenseServer(h' _licenseServerAddress' _licenseServerPort));                      else                          SetLicenseServer(host' _licenseServerAddress' _licenseServerPort);                        IXenObject xoClosure = xo;                      alertsChangeHandler = delegate(object sender' CollectionChangeEventArgs e)                      {                          if (e.Action == CollectionChangeAction.Add)                          {                              lock (lck)                              {                                  Alert alert = (Alert)e.Element;                                  Message.MessageType messageType;                                  // if this is a message alert' its Name property will contain the MessageType                                  if (host != null && host.uuid == alert.HostUuid && Enum.TryParse(alert.Name' out messageType))                                  {                                      switch (messageType)                                      {                                          case Message.MessageType.LICENSE_NOT_AVAILABLE:                                          case Message.MessageType.LICENSE_SERVER_UNREACHABLE:                                          case Message.MessageType.LICENSE_SERVER_VERSION_OBSOLETE:                                              alertText = string.Format(Message.FriendlyBody(alert.Name)' xoClosure.Name());                                              break;                                          case Message.MessageType.GRACE_LICENSE:                                              alertText = string.Empty;                                              break;                                      }                                  }                              }                          }                      };                        Alert.RegisterAlertCollectionChanged(alertsChangeHandler);                        // PR-1102: catch the host's license data' before applying the new one' so it can be sent later to the licensing server                      LicensingHelper.LicenseDataStruct previousLicenseData = new LicensingHelper.LicenseDataStruct(host);                        if(xo is Host && host != null)                      {                          Host.apply_edition(host.Connection.Session' host.opaque_ref' Host.GetEditionText(_edition)' false);                            // PR-1102: populate the list of updated hosts                          updatedHosts.Add(host' previousLicenseData);                      }                        if (xo is Pool)                      {                          Pool.apply_edition(xo.Connection.Session' pool.opaque_ref' Host.GetEditionText(_edition));                            xo.Connection.Cache.Hosts.ToList().ForEach(h => updatedHosts.Add(h' previousLicenseData));                      }                        Description = Messages.APPLYLICENSE_UPDATED;                  }                  catch (Failure e)                  {                      for (int i = 0; i < 50; i++)                      {                          Thread.Sleep(100);                            lock (lck)                          {                              if (alertText != null)                                  break;                          }                      }                        LicenseFailures.Add(new LicenseFailure(host' alertText ?? e.Message));                                            if (pool != null)                          pool.Connection.Cache.Hosts.ToList().ForEach(h => SetLicenseServer(h' previousLicenseServerAddress' previousLicenseServerPort));                      else                          SetLicenseServer(host' previousLicenseServerAddress' previousLicenseServerPort);                  }                  finally                  {                      Alert.DeregisterAlertCollectionChanged(alertsChangeHandler);                  }              }
Magic Number,XenAdmin.Actions,DestroyHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\DestroyHostAction.cs,IsSRDetached,The following statement contains a magic number: const int max = 2 * 60;
Magic Number,XenAdmin.Actions,DestroyHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\DestroyHostAction.cs,IsSRDetached,The following statement contains a magic number: const int max = 2 * 60;
Magic Number,XenAdmin.Actions,DestroyHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\DestroyHostAction.cs,IsSRDetached,The following statement contains a magic number: while (i++ < max)              {                  if (!sr.HasPBDs())                      return true;                    Thread.Sleep(1000);              }
Magic Number,XenAdmin.Actions,DestroyHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\DestroyHostAction.cs,Run,The following statement contains a magic number: double p = 100.0 / n;
Magic Number,XenAdmin.Actions,EnableHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EnableHostAction.cs,Run,The following statement contains a magic number: Enable(0' _resumeVMs ? 10 : 100' true);
Magic Number,XenAdmin.Actions,EnableHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EnableHostAction.cs,Run,The following statement contains a magic number: Enable(0' _resumeVMs ? 10 : 100' true);
Magic Number,XenAdmin.Actions,EnableHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EnableHostAction.cs,Run,The following statement contains a magic number: if (_resumeVMs)              {                  List<VM> migratedVMs = Host.GetMigratedEvacuatedVMs();                  List<VM> haltedVMs = Host.GetHaltedEvacuatedVMs();                  List<VM> suspendedVMs = Host.GetSuspendedEvacuatedVMs();                  Host.ClearEvacuatedVMs(Session);                    if (migratedVMs.Count + haltedVMs.Count + suspendedVMs.Count > 0)                  {                      int start = 10;                      int each = 90 / (migratedVMs.Count + haltedVMs.Count + suspendedVMs.Count);                        foreach (VM vm in migratedVMs)                      {                          RelatedTask = XenAPI.VM.async_live_migrate(Session' vm.opaque_ref' Host.opaque_ref);                          PollToCompletion(start' start + each);                          start += each;                      }                        foreach (VM vm in haltedVMs)                      {                          RelatedTask = XenAPI.VM.async_start_on(Session' vm.opaque_ref' Host.opaque_ref' false' false);                          PollToCompletion(start' start + each);                          start += each;                      }                        foreach (VM vm in suspendedVMs)                      {                          RelatedTask = XenAPI.VM.async_resume_on(Session' vm.opaque_ref' Host.opaque_ref' false' false);                          PollToCompletion(start' start + each);                          start += each;                      }                  }                  else                  {                      Host.ClearEvacuatedVMs(Session);                  }              }
Magic Number,XenAdmin.Actions,EnableHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EnableHostAction.cs,Run,The following statement contains a magic number: if (_resumeVMs)              {                  List<VM> migratedVMs = Host.GetMigratedEvacuatedVMs();                  List<VM> haltedVMs = Host.GetHaltedEvacuatedVMs();                  List<VM> suspendedVMs = Host.GetSuspendedEvacuatedVMs();                  Host.ClearEvacuatedVMs(Session);                    if (migratedVMs.Count + haltedVMs.Count + suspendedVMs.Count > 0)                  {                      int start = 10;                      int each = 90 / (migratedVMs.Count + haltedVMs.Count + suspendedVMs.Count);                        foreach (VM vm in migratedVMs)                      {                          RelatedTask = XenAPI.VM.async_live_migrate(Session' vm.opaque_ref' Host.opaque_ref);                          PollToCompletion(start' start + each);                          start += each;                      }                        foreach (VM vm in haltedVMs)                      {                          RelatedTask = XenAPI.VM.async_start_on(Session' vm.opaque_ref' Host.opaque_ref' false' false);                          PollToCompletion(start' start + each);                          start += each;                      }                        foreach (VM vm in suspendedVMs)                      {                          RelatedTask = XenAPI.VM.async_resume_on(Session' vm.opaque_ref' Host.opaque_ref' false' false);                          PollToCompletion(start' start + each);                          start += each;                      }                  }                  else                  {                      Host.ClearEvacuatedVMs(Session);                  }              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,EvacuateHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\EvacuateHostAction.cs,Run,The following statement contains a magic number: try              {                  this.Description = String.Format(Messages.HOSTACTION_EVACUATING' Helpers.GetName(Host));                    // call "MaybeReduceNtolBeforeOp"'                   // if currentNtol > targetNtol' asks users whether to decrease ntol (since disable will fail if it would cause HA overcommit)'                  // if users don't cancel' puts MAINTENANCE_MODE=true into the host's other_config'                   // then does a Host.disable using XenAPI.Host.async_disable.                  // Parameters 0 and 20 are for scaling low and high values for progress bar                  Disable(0' 20);                      bool tryAgain = false;                    // WLB: use non-wlb evcaute when wlb is not enabled                  if (Helpers.WlbEnabled(Host.Connection))                  {                      //  WLB: get wlb evacuate recommendations                      //Dictionary<XenRef<VM>' String[]> hostRecommendations = XenAPI.Host.retrieve_wlb_evacuate_recommendations(Session' Host.opaque_ref);                        if (_hostRecommendations != null && _hostRecommendations.Count > 0)                      {                          List<string> error = new List<string>();                            // WLB: continue only if there are no errors in wlb evacuate recommendations                          if (NoRecommendationError(_hostRecommendations' out error))                          {                              int start = 20;                              int each = (isMaster ? 80 : 90) / _hostRecommendations.Count;                                IEnumerable<WlbHostEvacuationRecommendation> sortedRecommendations = SortedHostRecommendations(_hostRecommendations);                                foreach (WlbHostEvacuationRecommendation rec in sortedRecommendations)                              {                                  if (string.Compare(rec.Label' "wlb"' true) == 0)                                  {                                      Host toHost = Host.Connection.Cache.Find_By_Uuid<Host>(rec.HostUuid);                                      if ((Session.Connection.Resolve(rec.Vm)).is_control_domain)                                      {                                          if (!toHost.IsLive())                                          {                                              try                                              {                                                  new HostPowerOnAction(toHost).RunExternal(Session);                                              }                                              catch (Exception)                                              {                                                  Description = string.Format(Messages.ACTION_HOST_START_FAILED' Helpers.GetName(toHost));                                              }                                              if (!toHost.enabled)                                              {                                                  RelatedTask = XenAPI.Host.async_enable(Session' toHost.opaque_ref);                                                  PollToCompletion(start' start);                                              }                                          }                                      }                                      else                                      {                                          // sometimes' the SR is not available after host power-on' so give three try                                                                                        int retry = 3;                                          while (retry > 0)                                          {                                              try                                              {                                                  RelatedTask = XenAPI.VM.async_live_migrate(Session' rec.Vm.opaque_ref' toHost.opaque_ref);                                                  PollToCompletion(start' start + each);                                                  start += each;                                                  break;                                              }                                              catch (Exception ex)                                              {                                                  log.Error(ex.Message' ex);                                                    // sleep for 10s' then try again                                                  System.Threading.Thread.Sleep(10 * 1000);                                                  retry--;                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              // WLB: don't evacuate when there is errors in wlb evacuate recommendations                              throw new XenAPI.Failure(error);                          }                      }                      else                      {                          // WLB: when there is no wlb evacuate recommendations' fall through to use the non-WLB evacuate.                          tryAgain = true;                      }                  }                    if (!Helpers.WlbEnabled(Host.Connection) || tryAgain)                  {                      RelatedTask = XenAPI.Host.async_evacuate(Session' Host.opaque_ref);                      PollToCompletion(20' isMaster ? 80 : 90);                  }                    this.Description = String.Format(Messages.HOSTACTION_EVACUATED' Helpers.GetName(Host));                    if (isMaster && _newMaster != null)                  {                      // Signal to the connection that the master is going to change underneath us.                      Connection.MasterMayChange = true;                        //Transition to new master                      this.Description = String.Format(Messages.HOSTACTION_TRANSITIONING_NEW_MASTER' Helpers.GetName(_newMaster));                        try                      {                          RelatedTask = XenAPI.Pool.async_designate_new_master(Session' _newMaster.opaque_ref);                          PollToCompletion(80' 90);                      }                      catch                      {                          // If theres an error during designate new master' clear flag to prevent leak.                          Connection.MasterMayChange = false;                          throw;                      }                        this.Description = String.Format(Messages.HOSTACTION_TRANSITIONED_NEW_MASTER' Helpers.GetName(_newMaster));                  }                    this.PercentComplete = 100;              }              catch (Exception e)              {                  log.ErrorFormat("There was an exception putting the host {0} into maintenance mode.  Removing other_config key."' Host.opaque_ref);                  log.Error(e' e);                  Enable(isMaster ? 80 : 90' 100' false);                  throw;              }
Magic Number,XenAdmin.Actions,HostAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostAbstractAction.cs,ShutdownVMs,The following statement contains a magic number: try              {                  PercentComplete = 1;                    // Count the resident VMs that are not halted                  List<VM> toShutdown = new List<VM>();                  foreach (VM vm in Connection.ResolveAll(Host.resident_VMs))                  {                      if (vm.power_state == vm_power_state.Running && !vm.is_control_domain)                          toShutdown.Add(vm);                  }                    int n = toShutdown.Count;                  if (n == 0)                      return;                    int step = 94 / n;                  int i = 0;                  foreach (VM vm in toShutdown)                  {                      Description = String.Format(                          isForReboot ? Messages.HOSTACTION_REBOOT_VM_SHUTDOWN : Messages.HOSTACTION_SHUTDOWN_VM_SHUTDOWN'                          Helpers.GetName(vm)' i + 1' n);                      RelatedTask = vm.allowed_operations.Contains(vm_operations.clean_shutdown)                          ? VM.async_clean_shutdown(Session' vm.opaque_ref)                          : VM.async_hard_shutdown(Session' vm.opaque_ref);                      PollToCompletion(PercentComplete' PercentComplete + step);                      PercentComplete += step;                      i++;                  }              }              catch (Exception e)              {                  log.Error("Exception shutting down VMs before shutting down host."' e);                    try                  {                      // At least re-enable the host so user can manually shutdown vms                      XenAPI.Host.enable(Session' Host.opaque_ref);                  }                  catch (Exception ex)                  {                      log.Error("Exception trying to re-enable host after error shutting down VMs."' ex);                  }                    throw;              }
Magic Number,XenAdmin.Actions,RebootHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\RebootHostAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.Host.async_reboot(Session' Host.opaque_ref);                  PollToCompletion(95' 100);              }              catch (Exception e)              {                  log.Error("Exception rebooting host"' e);                  try                  {                      // Try to re-enable the host                      if (wasEnabled)                          XenAPI.Host.enable(Session' Host.opaque_ref);                  }                  catch (Exception e2)                  {                      log.Error("Exception trying to re-enable host after error rebooting Host"' e2);                  }                  throw;              }
Magic Number,XenAdmin.Actions,RebootHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\RebootHostAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.Host.async_reboot(Session' Host.opaque_ref);                  PollToCompletion(95' 100);              }              catch (Exception e)              {                  log.Error("Exception rebooting host"' e);                  try                  {                      // Try to re-enable the host                      if (wasEnabled)                          XenAPI.Host.enable(Session' Host.opaque_ref);                  }                  catch (Exception e2)                  {                      log.Error("Exception trying to re-enable host after error rebooting Host"' e2);                  }                  throw;              }
Magic Number,XenAdmin.Actions,RestartToolstackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\RestartToolstackAction.cs,Run,The following statement contains a magic number: Description = string.Format(Messages.ACTION_TOOLSTACK_RESTARTING_ON' Host.Name().Ellipsise(30));
Magic Number,XenAdmin.Actions,RestartToolstackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\RestartToolstackAction.cs,Run,The following statement contains a magic number: PollToCompletion(0' 100);
Magic Number,XenAdmin.Actions,RestartToolstackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\RestartToolstackAction.cs,Run,The following statement contains a magic number: Description = string.Format(Messages.ACTION_TOOLSTACK_RESTARTED_ON' Host.Name().Ellipsise(30));
Magic Number,XenAdmin.Actions,ShutdownHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ShutdownHostAction.cs,Run,The following statement contains a magic number: try              {                  // set host poweroff task key values for wlb reporting purpose                  string wlbRecId = String.Empty;                    if (Host.other_config.ContainsKey(WlbOptimizationRecommendation.OPTIMIZINGPOOL))                  {                      wlbRecId = Host.other_config[WlbOptimizationRecommendation.OPTIMIZINGPOOL];                  }                    string hostopaque_ref = Host.opaque_ref;                    RelatedTask = XenAPI.Host.async_shutdown(Session' Host.opaque_ref);                    // set host poweroff task key values for wlb reporting purpose                  if (Helpers.WlbEnabled(this.Connection) && !String.IsNullOrEmpty(wlbRecId))                  {                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_advised"' wlbRecId);                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action"' "host_poweroff");                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action_obj_ref"' hostopaque_ref);                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action_obj_type"' "host");                  }                    PollToCompletion(95' 100);              }              catch (Exception e)              {                  log.Error("Exception shutting down host: "' e);                  try                  {                      // Try to re-enable the host                       if (wasEnabled)                          XenAPI.Host.enable(Session' Host.opaque_ref);                  }                  catch (Exception edash)                  {                      log.Error("Exception trying to re-enable host after error shutting down Host."' edash);                  }                  throw;              }
Magic Number,XenAdmin.Actions,ShutdownHostAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ShutdownHostAction.cs,Run,The following statement contains a magic number: try              {                  // set host poweroff task key values for wlb reporting purpose                  string wlbRecId = String.Empty;                    if (Host.other_config.ContainsKey(WlbOptimizationRecommendation.OPTIMIZINGPOOL))                  {                      wlbRecId = Host.other_config[WlbOptimizationRecommendation.OPTIMIZINGPOOL];                  }                    string hostopaque_ref = Host.opaque_ref;                    RelatedTask = XenAPI.Host.async_shutdown(Session' Host.opaque_ref);                    // set host poweroff task key values for wlb reporting purpose                  if (Helpers.WlbEnabled(this.Connection) && !String.IsNullOrEmpty(wlbRecId))                  {                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_advised"' wlbRecId);                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action"' "host_poweroff");                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action_obj_ref"' hostopaque_ref);                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action_obj_type"' "host");                  }                    PollToCompletion(95' 100);              }              catch (Exception e)              {                  log.Error("Exception shutting down host: "' e);                  try                  {                      // Try to re-enable the host                       if (wasEnabled)                          XenAPI.Host.enable(Session' Host.opaque_ref);                  }                  catch (Exception edash)                  {                      log.Error("Exception trying to re-enable host after error shutting down Host."' edash);                  }                  throw;              }
Magic Number,XenAdmin.Actions,UpdateIntegratedGpuPassthroughAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\UpdateIntegratedGpuPassthroughAction.cs,Run,The following statement contains a magic number: PollToCompletion(0' 50);
Magic Number,XenAdmin.Actions,UpdateIntegratedGpuPassthroughAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\UpdateIntegratedGpuPassthroughAction.cs,Run,The following statement contains a magic number: if (pGpu != null)             {                 RelatedTask = enable                      ? PGPU.async_enable_dom0_access(Session' pGpu.opaque_ref)                      : PGPU.async_disable_dom0_access(Session' pGpu.opaque_ref);                 PollToCompletion(50' 100);             }
Magic Number,XenAdmin.Actions,UpdateIntegratedGpuPassthroughAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\UpdateIntegratedGpuPassthroughAction.cs,Run,The following statement contains a magic number: if (pGpu != null)             {                 RelatedTask = enable                      ? PGPU.async_enable_dom0_access(Session' pGpu.opaque_ref)                      : PGPU.async_disable_dom0_access(Session' pGpu.opaque_ref);                 PollToCompletion(50' 100);             }
Magic Number,XenAdmin.Actions,UpdateIntegratedGpuPassthroughAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\UpdateIntegratedGpuPassthroughAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,SingleHostStatusAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SingleHostStatusAction.cs,Run,The following statement contains a magic number: if (hostname.Length > 20)              {                  hostname = hostname.Truncate(20);              }
Magic Number,XenAdmin.Actions,SingleHostStatusAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SingleHostStatusAction.cs,Run,The following statement contains a magic number: if (hostname.Length > 20)              {                  hostname = hostname.Truncate(20);              }
Magic Number,XenAdmin.Actions,SingleHostStatusAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SingleHostStatusAction.cs,Run,The following statement contains a magic number: try              {                  host.Status = HostStatus.compiling;                  if (Session == null)                  {                      throw new Exception(Messages.CONNECTION_IO_EXCEPTION);                  }                    HTTPHelper.Get(this' false' dataRxDelegate' filename' host.Host.address'                      (HTTP_actions.get_ssss)HTTP_actions.get_system_status'                      Session.uuid' entries_string' "tar");                    log.DebugFormat("Getting system status from {0} successful"' hostname);                    host.Status = HostStatus.succeeded;                  base.PercentComplete = 100;              }              catch (CancelledException ce)              {                  log.Info("Getting system status cancelled");                    Description = Messages.ACTION_SYSTEM_STATUS_CANCELLED;                  host.Status = HostStatus.failed;                  host.error = ce;                    throw;              }              catch (Exception e)              {                  log.Warn(string.Format("Getting system status from {0} failed"' hostname)' e);                    host.Status = HostStatus.failed;                  host.error = e;                    Description =                       Win32.GetHResult(e) == Win32.ERROR_DISK_FULL ?                       Messages.ACTION_SYSTEM_STATUS_DISK_FULL :                       Messages.ACTION_SYSTEM_STATUS_FAILED;              }
Magic Number,XenAdmin.Actions,SingleHostStatusAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SingleHostStatusAction.cs,dataRxDelegate,The following statement contains a magic number: if (rxd < host.Size)                  base.PercentComplete = 10 + (int)((rxd * 80L) / host.Size);              else                   base.PercentComplete = 90;
Magic Number,XenAdmin.Actions,SingleHostStatusAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\SingleHostStatusAction.cs,dataRxDelegate,The following statement contains a magic number: if (rxd < host.Size)                  base.PercentComplete = 10 + (int)((rxd * 80L) / host.Size);              else                   base.PercentComplete = 90;
Magic Number,XenAdmin.Actions,MultipleAction,C:\repos\xenserver_xenadmin\XenModel\Actions\MultipleAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,ParallelAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ParallelAction.cs,action_Completed,The following statement contains a magic number: lock (_lock)              {                  i++;                  if (i == actionsCount)                  {                      Monitor.Pulse(_lock);                      PercentComplete = 100;                  }              }
Magic Number,XenAdmin.Actions,AddHostToPoolAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\AddHostToPoolAction.cs,Run,The following statement contains a magic number: try              {                  FixLicensing(Pool' _hostsToRelicense' DoOnLicensingFailure);                  FixAd(Pool' _hostsToAdConfigure' GetAdCredentials);                  bool fixedCpus = FixCpus(Pool' _hostsToCpuMask' AcceptNTolChanges);                  if (fixedCpus)                      Session = NewSession();  // We've rebooted the server' so we need to grab the new session                  RelatedTask = XenAPI.Pool.async_join(Session' Pool.Connection.Hostname' Pool.Connection.Username' Pool.Connection.Password);                  PollToCompletion(0' 90);              }              catch (Exception e)              {                  Failure f = e as Failure;                  // I think we shouldn't trigger this any more' because it's now checked in PoolJoinRules.                  // But let's leave it here in case. SRET.                  if (f != null && f.ErrorDescription[0] == Failure.RBAC_PERMISSION_DENIED)                  {                      Session[] sessions = new Session[] { Session' Pool.Connection.Session };                      // Special parse to cope with multiple connections.                      Failure.ParseRBACFailure(f' sessions);                      // Will not get RBAC parsed again after the throw as we have altered the error description in ParseRBACFailure                      throw f;                  }                  throw;              }
Magic Number,XenAdmin.Actions,CreatePoolAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\CreatePoolAction.cs,Run,The following statement contains a magic number: double p2 = 100.0 / _slaves.Count;
Magic Number,XenAdmin.Actions,PoolAbstractAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\PoolAction.cs,FixCpus,The following statement contains a magic number: while (true)              {                  bool done = true;                  foreach (RebootHostAction action in rebootActions)                  {                      if (!action.IsCompleted)                          done = false;                  }                  if (done)                      break;                  System.Threading.Thread.Sleep(10000);              }
Magic Number,XenAdmin.Actions,ConfigurePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\ConfigurePvsSiteAction.cs,Run,The following statement contains a magic number: if (pvsSite == null)              {                  // create site                  RelatedTask = PVS_site.async_introduce(Session' siteName' string.Empty' string.Empty);                  PollToCompletion(0'10);                  pvsSite = Connection.WaitForCache(new XenRef<PVS_site>(Result));              }              else              {                  // get the site again from cache' just in case it changed (or dissapeared) in the meantime                  pvsSite = Connection.Cache.Resolve(new XenRef<PVS_site>(pvsSite.opaque_ref));                  if (pvsSite == null)                  {                      log.InfoFormat("PVS Site '{0}' cannot be configured' because it cannot be found."' siteName);                      PercentComplete = 100;                      Description = Messages.COMPLETED;                      return;                  }                    if (pvsSite.name_label != siteName)                  {                      // set name_label                      PVS_site.set_name_label(Session' pvsSite.opaque_ref' siteName);                  }              }
Magic Number,XenAdmin.Actions,ConfigurePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\ConfigurePvsSiteAction.cs,Run,The following statement contains a magic number: if (pvsSite == null)              {                  // create site                  RelatedTask = PVS_site.async_introduce(Session' siteName' string.Empty' string.Empty);                  PollToCompletion(0'10);                  pvsSite = Connection.WaitForCache(new XenRef<PVS_site>(Result));              }              else              {                  // get the site again from cache' just in case it changed (or dissapeared) in the meantime                  pvsSite = Connection.Cache.Resolve(new XenRef<PVS_site>(pvsSite.opaque_ref));                  if (pvsSite == null)                  {                      log.InfoFormat("PVS Site '{0}' cannot be configured' because it cannot be found."' siteName);                      PercentComplete = 100;                      Description = Messages.COMPLETED;                      return;                  }                    if (pvsSite.name_label != siteName)                  {                      // set name_label                      PVS_site.set_name_label(Session' pvsSite.opaque_ref' siteName);                  }              }
Magic Number,XenAdmin.Actions,ConfigurePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\ConfigurePvsSiteAction.cs,Run,The following statement contains a magic number: PercentComplete = 10;
Magic Number,XenAdmin.Actions,ConfigurePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\ConfigurePvsSiteAction.cs,Run,The following statement contains a magic number: int inc = pvsCacheStorages.Count > 0 ? 90 / pvsCacheStorages.Count / 3 : 90;
Magic Number,XenAdmin.Actions,ConfigurePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\ConfigurePvsSiteAction.cs,Run,The following statement contains a magic number: int inc = pvsCacheStorages.Count > 0 ? 90 / pvsCacheStorages.Count / 3 : 90;
Magic Number,XenAdmin.Actions,ConfigurePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\ConfigurePvsSiteAction.cs,Run,The following statement contains a magic number: int inc = pvsCacheStorages.Count > 0 ? 90 / pvsCacheStorages.Count / 3 : 90;
Magic Number,XenAdmin.Actions,ConfigurePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\ConfigurePvsSiteAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,DeletePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\DeletePvsSiteAction.cs,Run,The following statement contains a magic number: int inc = pvsServers.Count > 0 ? 50 / pvsServers.Count : 50;
Magic Number,XenAdmin.Actions,DeletePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\DeletePvsSiteAction.cs,Run,The following statement contains a magic number: int inc = pvsServers.Count > 0 ? 50 / pvsServers.Count : 50;
Magic Number,XenAdmin.Actions,DeletePvsSiteAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\DeletePvsSiteAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,PvsProxyCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\PvsProxyCreateAction.cs,Run,The following statement contains a magic number: PollToCompletion(0' 100);
Magic Number,XenAdmin.Actions,PvsProxyDestroyAction,C:\repos\xenserver_xenadmin\XenModel\Actions\PVS\PvsProxyDestroyAction.cs,Run,The following statement contains a magic number: PollToCompletion(0' 100);
Magic Number,XenAdmin.Actions,UploadSupplementalPackAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SupplementalPack\UploadSupplementalPackAction.cs,UploadSupplementalPack,The following statement contains a magic number: try             {                 HTTP.UpdateProgressDelegate progressDelegate = delegate(int percent)                 {                     var actionPercent = (int)(((totalUploaded * 100) + percent) / totalCount);                     Tick(actionPercent' Description);                 };                  Session session = NewSession();                 RelatedTask = Task.create(Session' "uploadTask"' hostUrl);                  result = HTTPHelper.Put(progressDelegate' GetCancelling' true' Connection' RelatedTask' ref session'  suppPackFilePath' hostUrl'                                         (HTTP_actions.put_sss)HTTP_actions.put_import_raw_vdi'                                          session.uuid' vdiRef.opaque_ref);             }             catch (Exception ex)             {                 log.ErrorFormat("{0} {1}"' "Failed to import a virtual disk over HTTP."' ex.Message);                  if (vdiRef != null)                 {                     log.DebugFormat("Removing the VDI on a best effort basis.");                      try                     {                         RemoveVDI(Session' vdiRef);                     }                     catch (Exception removeEx)                     {                         //best effort                         log.Error("Failed to remove the VDI."' removeEx);                     }                 }                    //after having tried to remove the VDI' the original exception is thrown for the UI                  if (ex is TargetInvocationException && ex.InnerException != null)                      throw ex.InnerException;                  else                      throw ex;              }             finally             {                 Task.destroy(Session' RelatedTask);                 RelatedTask = null;             }
Magic Number,XenAdmin.Actions,UploadPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\UploadPatchAction.cs,UploadRetailPatch,The following statement contains a magic number: try              {                  Host h = Helpers.GetMaster(Connection);                    HTTP.UpdateProgressDelegate progressDelegate = delegate(int percent)                      {                          int actionPercent = (int)(((TotalUploaded * 90) + (size * percent)) / TotalSize);                          this.Tick(actionPercent' this.Description);                      };                    RelatedTask = XenAPI.Task.create(session' "uploadTask"' retailPatchPath);                    String result;                    try                  {                      result = HTTPHelper.Put(progressDelegate' GetCancelling' true' Connection' RelatedTask' ref session' retailPatchPath'                          h.address' (HTTP_actions.put_ss)HTTP_actions.put_pool_patch_upload' session.uuid);                  }                  catch(CancelledException)                  {                       if(deleteFileOnCancel && File.Exists(retailPatchPath))                       {                          File.Delete(retailPatchPath);                       }                       throw;                  }                  catch (TargetInvocationException ex)                  {                      if (ex.InnerException != null)                          throw ex.InnerException;                      else                          throw;                  }                    finally                  {                      Task.destroy(session' RelatedTask);                      RelatedTask = null;                  }                    TotalUploaded += size;                  return Connection.WaitForCache(new XenRef<Pool_patch>(result));              }              finally              {                  log.InfoFormat("File '{0}' uploaded to server '{1}'"' Path.GetFileName(retailPatchPath)' host.Name());                  Description = Messages.UPLOAD_PATCH_UPLOADED;              }
Magic Number,XenAdmin.Actions,SrTrimAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrTrimAction.cs,GetTrimError,The following statement contains a magic number: try             {                 var doc = new XmlDocument();                 doc.LoadXml(xml);                 string errcode = null;                 string errmsg = null;                  var kvpNodes = doc.SelectNodes("/trim_response/key_value_pair");                  if (kvpNodes == null)                     return null;                  foreach (XmlNode kvpNode in kvpNodes)                 {                     var keyNode = kvpNode.ChildNodes.Cast<XmlNode>().FirstOrDefault(node => node.Name == "key");                     var valueNode = kvpNode.ChildNodes.Cast<XmlNode>().FirstOrDefault(node => node.Name == "value");                      if (keyNode != null && valueNode != null && keyNode.InnerText == "errcode")                         errcode = valueNode.InnerText;                      if (keyNode != null && valueNode != null && keyNode.InnerText == "errmsg")                         errmsg = valueNode.InnerText;                 }                  return GetErrorMessageFromResources(errcode) ?? errmsg;             }             catch (Exception e)             {                 log.DebugFormat("Exception parsing xml '{0}'"' xml.Substring(0' 10000));                 log.Debug(e' e);                  return null;             }
Magic Number,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,DownloadFile,The following statement contains a magic number: while (errorCount < MAX_NUMBER_OF_TRIES && needToRetry)              {                  needToRetry = false;                    using (var client = new WebClient())                  {                      try                      {                          client.Proxy = XenAdminConfigManager.Provider.GetProxyFromSettings(null' false);                            //register download events                          client.DownloadProgressChanged += client_DownloadProgressChanged;                          client.DownloadFileCompleted += client_DownloadFileCompleted;                          //start the download                          client.DownloadFileAsync(address' zippedFileName);                            patchDownloadState = DownloadState.InProgress;                          bool patchDownloadCancelling = false;                            //wait for the file to be downloaded                          while (patchDownloadState == DownloadState.InProgress)                          {                              if (!patchDownloadCancelling && (Cancelling || Cancelled))                              {                                  Description = Messages.DOWNLOAD_AND_EXTRACT_ACTION_DOWNLOAD_CANCELLED_DESC;                                  client.CancelAsync();                                  patchDownloadCancelling = true;                              }                              Thread.Sleep(SLEEP_TIME_TO_CHECK_DOWNLOAD_STATUS_MS);                          }                            if (patchDownloadState == DownloadState.Cancelled)                              throw new CancelledException();                            if (patchDownloadState == DownloadState.Error)                          {                              needToRetry = true;                                // this many errors so far - including this one                              errorCount++;                                // logging only' it will retry again.                              log.ErrorFormat("Error while downloading from '{0}'. Number of errors so far (including this): {1}. Trying maximum {2} times."' address' errorCount' MAX_NUMBER_OF_TRIES);                              log.Error(patchDownloadError ?? new Exception(Messages.ERROR_UNKNOWN));                                                            // wait for some randomly increased amount of time after each retry                              nextSleepMs += random.Next(5000);                              Thread.Sleep(nextSleepMs);                          }                      }                      finally                      {                          //deregister download events                          client.DownloadProgressChanged -= client_DownloadProgressChanged;                          client.DownloadFileCompleted -= client_DownloadFileCompleted;                      }                  }              }
Magic Number,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,archiveIterator_CurrentFileExtractProgressChanged,The following statement contains a magic number: int pc = downloadUpdate ? 95 + (int)(5.0 * e.BytesTransferred / e.TotalBytesToTransfer) : (int)(100.0 * e.BytesTransferred / e.TotalBytesToTransfer);
Magic Number,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,archiveIterator_CurrentFileExtractProgressChanged,The following statement contains a magic number: int pc = downloadUpdate ? 95 + (int)(5.0 * e.BytesTransferred / e.TotalBytesToTransfer) : (int)(100.0 * e.BytesTransferred / e.TotalBytesToTransfer);
Magic Number,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,archiveIterator_CurrentFileExtractProgressChanged,The following statement contains a magic number: int pc = downloadUpdate ? 95 + (int)(5.0 * e.BytesTransferred / e.TotalBytesToTransfer) : (int)(100.0 * e.BytesTransferred / e.TotalBytesToTransfer);
Magic Number,XenAdmin.Actions,DownloadAndUnzipXenServerPatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Updates\DownloadAndUnzipXenServerPatchAction.cs,client_DownloadProgressChanged,The following statement contains a magic number: int pc = (int)(95.0 * e.BytesReceived / e.TotalBytesToReceive);
Magic Number,XenAdmin.Actions,DeleteVUSBAction,C:\repos\xenserver_xenadmin\XenModel\Actions\USB\DeleteVUSBAction.cs,Run,The following statement contains a magic number: try              {                  if ((_vusb.currently_attached) &&                      XenAPI.VUSB.get_allowed_operations(Session' _vusb.opaque_ref).Contains(XenAPI.vusb_operations.unplug))                  {                      RelatedTask = VUSB.async_unplug(Session' _vusb.opaque_ref);                      PollToCompletion(0' 50);                  }              }              finally              {                  PercentComplete = 50;                  RelatedTask = VUSB.async_destroy(Session' _vusb.opaque_ref);                  PollToCompletion(51' 100);              }
Magic Number,XenAdmin.Actions,DeleteVUSBAction,C:\repos\xenserver_xenadmin\XenModel\Actions\USB\DeleteVUSBAction.cs,Run,The following statement contains a magic number: try              {                  if ((_vusb.currently_attached) &&                      XenAPI.VUSB.get_allowed_operations(Session' _vusb.opaque_ref).Contains(XenAPI.vusb_operations.unplug))                  {                      RelatedTask = VUSB.async_unplug(Session' _vusb.opaque_ref);                      PollToCompletion(0' 50);                  }              }              finally              {                  PercentComplete = 50;                  RelatedTask = VUSB.async_destroy(Session' _vusb.opaque_ref);                  PollToCompletion(51' 100);              }
Magic Number,XenAdmin.Actions,DeleteVUSBAction,C:\repos\xenserver_xenadmin\XenModel\Actions\USB\DeleteVUSBAction.cs,Run,The following statement contains a magic number: try              {                  if ((_vusb.currently_attached) &&                      XenAPI.VUSB.get_allowed_operations(Session' _vusb.opaque_ref).Contains(XenAPI.vusb_operations.unplug))                  {                      RelatedTask = VUSB.async_unplug(Session' _vusb.opaque_ref);                      PollToCompletion(0' 50);                  }              }              finally              {                  PercentComplete = 50;                  RelatedTask = VUSB.async_destroy(Session' _vusb.opaque_ref);                  PollToCompletion(51' 100);              }
Magic Number,XenAdmin.Actions,DeleteVUSBAction,C:\repos\xenserver_xenadmin\XenModel\Actions\USB\DeleteVUSBAction.cs,Run,The following statement contains a magic number: try              {                  if ((_vusb.currently_attached) &&                      XenAPI.VUSB.get_allowed_operations(Session' _vusb.opaque_ref).Contains(XenAPI.vusb_operations.unplug))                  {                      RelatedTask = VUSB.async_unplug(Session' _vusb.opaque_ref);                      PollToCompletion(0' 50);                  }              }              finally              {                  PercentComplete = 50;                  RelatedTask = VUSB.async_destroy(Session' _vusb.opaque_ref);                  PollToCompletion(51' 100);              }
Magic Number,XenAdmin.Actions,CreateVMApplianceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VMAppliances\CreateVMApplianceAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,ExportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ExportVmAction.cs,Run,The following statement contains a magic number: taskThread.Name = "Progress polling thread for ExportVmAction for " + VM.Name().Ellipsise(20);
Magic Number,XenAdmin.Actions,ExportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ExportVmAction.cs,Run,The following statement contains a magic number: if (verify && _exception == null)              {                  long read = 0;                  int i = 0;                  long filesize = new FileInfo(tmpFile).Length / 50; //Div by 50 to save doing the * 50 in the callback                    Export.verifyCallback callback = new Export.verifyCallback(delegate(uint size)                      {                          read += size;                          i++;                            //divide number of updates by 10' so as not to spend all out time redrawing the control                          //but try and send an update every second to keep the timer ticking                          if (i > 10)                          {                              PercentComplete = 50 + (int)(read / filesize);                              i = 0;                          }                      });                    try                  {                      using (FileStream fs = new FileStream(tmpFile' FileMode.Open' FileAccess.Read))                      {                          log.DebugFormat("Verifying export of {0} in {1}"' VM.Name()' _filename);                          this.Description = Messages.ACTION_EXPORT_VERIFY;                            export = new Export();                          export.verify(fs' null' (Export.cancellingCallback)delegate() { return Cancelling; }' callback);                      }                  }                  catch (Exception e)                  {                      if (_exception == null)                          _exception = e;                  }              }
Magic Number,XenAdmin.Actions,ExportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ExportVmAction.cs,Run,The following statement contains a magic number: if (verify && _exception == null)              {                  long read = 0;                  int i = 0;                  long filesize = new FileInfo(tmpFile).Length / 50; //Div by 50 to save doing the * 50 in the callback                    Export.verifyCallback callback = new Export.verifyCallback(delegate(uint size)                      {                          read += size;                          i++;                            //divide number of updates by 10' so as not to spend all out time redrawing the control                          //but try and send an update every second to keep the timer ticking                          if (i > 10)                          {                              PercentComplete = 50 + (int)(read / filesize);                              i = 0;                          }                      });                    try                  {                      using (FileStream fs = new FileStream(tmpFile' FileMode.Open' FileAccess.Read))                      {                          log.DebugFormat("Verifying export of {0} in {1}"' VM.Name()' _filename);                          this.Description = Messages.ACTION_EXPORT_VERIFY;                            export = new Export();                          export.verify(fs' null' (Export.cancellingCallback)delegate() { return Cancelling; }' callback);                      }                  }                  catch (Exception e)                  {                      if (_exception == null)                          _exception = e;                  }              }
Magic Number,XenAdmin.Actions,ExportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ExportVmAction.cs,Run,The following statement contains a magic number: if (verify && _exception == null)              {                  long read = 0;                  int i = 0;                  long filesize = new FileInfo(tmpFile).Length / 50; //Div by 50 to save doing the * 50 in the callback                    Export.verifyCallback callback = new Export.verifyCallback(delegate(uint size)                      {                          read += size;                          i++;                            //divide number of updates by 10' so as not to spend all out time redrawing the control                          //but try and send an update every second to keep the timer ticking                          if (i > 10)                          {                              PercentComplete = 50 + (int)(read / filesize);                              i = 0;                          }                      });                    try                  {                      using (FileStream fs = new FileStream(tmpFile' FileMode.Open' FileAccess.Read))                      {                          log.DebugFormat("Verifying export of {0} in {1}"' VM.Name()' _filename);                          this.Description = Messages.ACTION_EXPORT_VERIFY;                            export = new Export();                          export.verify(fs' null' (Export.cancellingCallback)delegate() { return Cancelling; }' callback);                      }                  }                  catch (Exception e)                  {                      if (_exception == null)                          _exception = e;                  }              }
Magic Number,XenAdmin.Actions,ExportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ExportVmAction.cs,progressPoll,The following statement contains a magic number: try              {                  PollToCompletion(0' verify ? 50 : 95);              }              catch (Failure e)              {                  // Don't overwrite a previous exception unless we're sure that the one that                  // we have here is going to be more useful than the client one.  Sometimes'                  // the server exception will be "failed to write"' which is just in                  // response to us closing the stream when we run out of disk space or whatever                  // on the client side.  Other times' it's the server that's got the useful                  // error message.                  if (_exception == null || e.ErrorDescription[0] == Failure.VDI_IN_USE)                      _exception = e;              }              catch (Exception e)              {                  // Test for null: don't overwrite a previous exception                  if (_exception == null)                      _exception = e;              }
Magic Number,XenAdmin.Actions,ExportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ExportVmAction.cs,progressPoll,The following statement contains a magic number: try              {                  PollToCompletion(0' verify ? 50 : 95);              }              catch (Failure e)              {                  // Don't overwrite a previous exception unless we're sure that the one that                  // we have here is going to be more useful than the client one.  Sometimes'                  // the server exception will be "failed to write"' which is just in                  // response to us closing the stream when we run out of disk space or whatever                  // on the client side.  Other times' it's the server that's got the useful                  // error message.                  if (_exception == null || e.ErrorDescription[0] == Failure.VDI_IN_USE)                      _exception = e;              }              catch (Exception e)              {                  // Test for null: don't overwrite a previous exception                  if (_exception == null)                      _exception = e;              }
Magic Number,XenAdmin.Actions,ImportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ImportVmAction.cs,Run,The following statement contains a magic number: try              {                  string vmRef;    				if (m_filename.EndsWith("ova.xml"))//importing version 1 from of VM  				{  					m_filename = m_filename.Replace("ova.xml"' "");  					vmRef = GetVmRef(applyVersionOneFiles());  				}  				else//importing current format of VM  					vmRef = GetVmRef(applyFile());                	if (Cancelling)                      throw new CancelledException();                    // Now lets try and set the affinity and start the VM                    if (string.IsNullOrEmpty(vmRef))                      return;                    while (!Cancelling && (VM = Connection.Resolve(new XenRef<VM>(vmRef))) == null)                      Thread.Sleep(100);                    if (Cancelling)                      throw new CancelledException();                    isTemplate = VM.get_is_a_template(Session' vmRef);                  if (isTemplate && VM.get_is_default_template(Session' vmRef))                  {                      var otherConfig = VM.get_other_config(Session' vmRef);                      if (!otherConfig.ContainsKey(IMPORT_TASK) || otherConfig[IMPORT_TASK] != RelatedTask.opaque_ref)                      {                          throw new Exception(Messages.IMPORT_TEMPLATE_ALREADY_EXISTS);                      }                  }                    Description = isTemplate ? Messages.IMPORT_TEMPLATE_UPDATING_TEMPLATE : Messages.IMPORTVM_UPDATING_VM;                  VM.set_name_label(Session' vmRef' DefaultVMName(VM.get_name_label(Session' vmRef)));    				if (!isTemplate && m_affinity != null)  					VM.set_affinity(Session' vmRef' m_affinity.opaque_ref);                    // Wait here for the wizard to finish                  Description = isTemplate ? Messages.IMPORT_TEMPLATE_WAITING_FOR_WIZARD : Messages.IMPORTVM_WAITING_FOR_WIZARD;  				lock (monitor)  				{  					while (!(m_wizardDone || Cancelling))  						Monitor.Wait(monitor);  				}                    if (Cancelling)                      throw new CancelledException();                    if (m_proxyVIFs != null)                  {                      Description = isTemplate ? Messages.IMPORT_TEMPLATE_UPDATING_NETWORKS : Messages.IMPORTVM_UPDATING_NETWORKS;                        // For ElyOrGreater hosts' we can move the VIFs to another network'                       // but for older hosts we need to destroy all vifs and recreate them                        List<XenRef<VIF>> vifs = VM.get_VIFs(Session' vmRef);                      List<XenAPI.Network> networks = new List<XenAPI.Network>();                        bool canMoveVifs = Helpers.ElyOrGreater(Connection);                        foreach (XenRef<VIF> vif in vifs)                      {                          // Save the network as we may have to delete it later                          XenAPI.Network network = Connection.Resolve(VIF.get_network(Session' vif));                          if (network != null)                              networks.Add(network);                            if (canMoveVifs)                          {                              var vifObj = Connection.Resolve(vif);                              if (vifObj == null)                                  continue;                              // try to find a matching VIF in the m_proxyVIFs list' based on the device field                              var matchingProxyVif = m_proxyVIFs.FirstOrDefault(proxyVIF => proxyVIF.device == vifObj.device);                              if (matchingProxyVif != null)                              {                                  // move the VIF to the desired network                                  VIF.move(Session' vif' matchingProxyVif.network);                                  // remove matchingProxyVif from the list' so we don't create the VIF again later                                  m_proxyVIFs.Remove(matchingProxyVif);                                   continue;                              }                          }                          // destroy the VIF' if we haven't managed to move it                          VIF.destroy(Session' vif);                      }                        // recreate VIFs if needed (m_proxyVIFs can be empty' if we moved all the VIFs in the previous step)                      foreach (Proxy_VIF proxyVIF in m_proxyVIFs)                      {                          VIF vif = new VIF(proxyVIF) {VM = new XenRef<VM>(vmRef)};                          VIF.create(Session' vif);                      }                        // now delete any Networks associated with this task if they have no VIFs                        foreach (XenAPI.Network network in networks)                      {                          if (!network.other_config.ContainsKey(IMPORT_TASK))                              continue;                            if (network.other_config[IMPORT_TASK] != RelatedTask.opaque_ref)                              continue;                            try                          {                              if (XenAPI.Network.get_VIFs(Session' network.opaque_ref).Count > 0)                                  continue;                                if (XenAPI.Network.get_PIFs(Session' network.opaque_ref).Count > 0)                                  continue;                                XenAPI.Network.destroy(Session' network.opaque_ref);                          }                          catch (Exception e)                          {                              log.ErrorFormat("Exception while deleting network {0}. Squashing."' network.Name());                              log.Error(e' e);                          }                      }                  }                    if (!VM.get_is_a_template(Session' vmRef))                  {                      if (m_startAutomatically)                      {                          Description = Messages.IMPORTVM_STARTING;                          VM.start(Session' vmRef' false' false);                      }                  }              }              catch (CancelledException)              {                  Description = Messages.CANCELLED_BY_USER;                  throw;              }
Magic Number,XenAdmin.Actions,ImportVmAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ImportVmAction.cs,applyVersionOneFiles,The following statement contains a magic number: try              {  				long totalSize = getSize(new DirectoryInfo(m_filename)' 0);                  long bytesWritten = 0;                    if (totalSize == 0)                  {                      // We didn't find any .gz files' just bail out here                      throw new Exception(Messages.IMPORT_INCOMPLETE_FILES);                  }                	CommandLib.Config config = new CommandLib.Config              	                           	{              	                           		hostname = Connection.Hostname'              	                           		username = Connection.Username'              	                           		password = Connection.Password              	                           	};                                    CommandLib.thinCLIProtocol tCLIprotocol = null;                  int exitCode = 0;              	tCLIprotocol = new CommandLib.thinCLIProtocol(delegate(string s) { throw new Exception(s); }'              	                                              delegate { throw new Exception(Messages.EXPORTVM_NOT_HAPPEN); }'              	                                              delegate(string s' CommandLib.thinCLIProtocol t) { log.Debug(s); }'              	                                              delegate(string s) { log.Debug(s); }'              	                                              delegate(string s) { log.Debug(s); }'              	                                              delegate { throw new Exception(Messages.EXPORTVM_NOT_HAPPEN); }'              	                                              delegate(int i)              	                                              	{              	                                              		exitCode = i;              	                                              		tCLIprotocol.dropOut = true;              	                                              	}'              	                                              delegate(int i)              	                                              	{              	                                              		bytesWritten += i;              	                                              		PercentComplete = (int)(100.0*bytesWritten/totalSize);              	                                              	}'              	                                              config);                    string body = string.Format("vm-import\nsr-uuid={0}\nfilename={1}\ntask_id={2}\n"'  											SR.uuid' m_filename' RelatedTask.opaque_ref);  				log.DebugFormat("Importing Geneva-style XVA from {0} to SR {1} using {2}"' m_filename' SR.Name()' body);                  CommandLib.Messages.performCommand(body' tCLIprotocol);                    // Check the task status -- Geneva-style XVAs don't raise an error' so we need to check manually.                  List<string> excep = TaskErrorInfo();                  if (excep.Count > 0)                      throw new Failure(excep);                                    // CA-33665: We found a situation before were the task handling had been messed up' we should check the exit code as a failsafe  				if (exitCode != 0)  					throw new Failure(new[] {Messages.IMPORT_GENERIC_FAIL});                    return Task.get_result(Session' RelatedTask);              }              catch (Exception exn)              {                  List<string> excep = TaskErrorInfo();                  if (excep.Count > 0)                      throw new Failure(excep);                  else                      throw exn;              }              finally              {                  Task.destroy(Session' RelatedTask);              }
Magic Number,XenAdmin.Actions,SetVMStartupOptionsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\SetVMStartupOptionsAction.cs,Run,The following statement contains a magic number: foreach (VM vm in settings.Keys)              {                  Description = string.Format(Messages.SETTING_VM_STARTUP_OPTIONS_ON_X' Helpers.GetName(vm));                    VM.set_order(this.Session' vm.opaque_ref' settings[vm].Order);                  VM.set_start_delay(this.Session' vm.opaque_ref' settings[vm].StartDelay);                    PercentComplete = (int)(++i * (60.0 / settings.Count));                  if (Cancelling)                      throw new CancelledException();              }
Magic Number,XenAdmin.Actions,SetVMStartupOptionsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\SetVMStartupOptionsAction.cs,Run,The following statement contains a magic number: PollToCompletion(60' 100);
Magic Number,XenAdmin.Actions,SetVMStartupOptionsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\SetVMStartupOptionsAction.cs,Run,The following statement contains a magic number: PollToCompletion(60' 100);
Magic Number,XenAdmin.Actions,VMSnapshotCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSnapshotCreateAction.cs,Run,The following statement contains a magic number: string newVmRef = taskResult.Substring(7' taskResult.Length - 15);
Magic Number,XenAdmin.Actions,VMSnapshotCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSnapshotCreateAction.cs,Run,The following statement contains a magic number: string newVmRef = taskResult.Substring(7' taskResult.Length - 15);
Magic Number,XenAdmin.Actions,VMSnapshotCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSnapshotCreateAction.cs,SaveImageInBlob,The following statement contains a magic number: while ((blob = Connection.Resolve(blobRef)) == null) Thread.Sleep(1000);
Magic Number,XenAdmin.Actions,ZipStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ZipStatusReportAction.cs,Run,The following statement contains a magic number: try              {                  // Calculate total bytes to save                  long bytesToExtract = 1' bytesExtracted = 0;                  foreach (string inputFile in Directory.GetFiles(_inputTempFolder))                  {                      bytesToExtract += new FileInfo(inputFile).Length;                  }                    // Create temp dir for extracted stuff                  if (Directory.Exists(extractTempDir))                  {                      Directory.Delete(extractTempDir);                  }                  Directory.CreateDirectory(extractTempDir);                    // Extract each of the raw server files to the temp extraction directory                  foreach (string inputFile in Directory.GetFiles(_inputTempFolder))                  {                      if (inputFile.ToLowerInvariant().EndsWith(".tar"))                      {                          // Un-tar it. SharpZipLib doesn't account for illegal filenames or characters in                          // filenames (e.g. ':'in Windows)' so first we stream the tar to a new tar'                          // sanitizing any bad filenames as we go.                            // We also need to record the modification times of all the files' so that we can                          // restore them into the final zip.                                                    string outFilename = inputFile.Substring(0' inputFile.Length - 4);                          if (outFilename.Length == 0)                              outFilename = Path.GetRandomFileName();                          string outputDir = Path.Combine(extractTempDir' Path.GetFileName(outFilename));                            string sanitizedTar = Path.GetTempFileName();                            using (ArchiveIterator tarIterator = ArchiveFactory.Reader(ArchiveFactory.Type.Tar' File.OpenRead(inputFile)))                          {                              using (ArchiveWriter tarWriter = ArchiveFactory.Writer(ArchiveFactory.Type.Tar' File.OpenWrite(sanitizedTar)))                              {                                  Dictionary<string' string> usedNames = new Dictionary<string' string>();                                  while (tarIterator.HasNext())                                  {                                      if (Cancelling)                                      {                                          throw new CancelledException();                                      }                                        using( MemoryStream ms = new MemoryStream() )                                      {                                          tarIterator.ExtractCurrentFile(ms);                                          string saneName = SanitizeTarName(tarIterator.CurrentFileName()' usedNames);                                          tarWriter.Add(ms' saneName);                                          ModTimes[Path.Combine(outputDir' saneName)] = tarIterator.CurrentFileModificationTime();                                      }                                    }                              }                          }                            // Now extract the sanitized tar                          using(FileStream fs = File.OpenRead(sanitizedTar))                          {                              using (ArchiveIterator tarIterator = ArchiveFactory.Reader(ArchiveFactory.Type.Tar' fs))                              {                                  Directory.CreateDirectory(outputDir);                                  tarIterator.ExtractAllContents(outputDir);                                  bytesToCompress += Core.Helpers.GetDirSize(new DirectoryInfo(outputDir));                              }                          }                      }                      else                      {                          // Just copy vanilla input files unmodified to the temp directory                          string outputFile = Path.Combine(extractTempDir' Path.GetFileName(inputFile));                          File.Copy(inputFile' outputFile);                          ModTimes[outputFile] = new FileInfo(inputFile).LastWriteTimeUtc;                          bytesToCompress += new FileInfo(outputFile).Length;                      }                        bytesExtracted += new FileInfo(inputFile).Length;                      File.Delete(inputFile);                      this.PercentComplete = (int)(50.0 * bytesExtracted / bytesToExtract);                        if (Cancelling)                      {                          throw new CancelledException();                      }                  }                    // Now zip up all the temporarily extracted files into a single zip file for the user                  log.DebugFormat("Packing {0} of bug report files into zip file {1}"'                      Util.DiskSizeString(bytesToCompress)' _destFile);                    LogDescriptionChanges = false;                  try                  {                        ZipToOutputFile(extractTempDir);                      PercentComplete = 100;                        // Only cleanup files if it succeeded (or cancelled)                      CleanupFiles(extractTempDir);                  }                  finally                  {                      LogDescriptionChanges = true;                  }                    if (Cancelling)                      throw new CancelledException();              }              catch (CancelledException)              {                  CleanupFiles(extractTempDir' true);                    throw;              }              catch (Exception exn)              {                  ZipToOutputFile(_inputTempFolder);                  PercentComplete = 100;                  log.ErrorFormat("An exception was trapped while creating a server status report: " + exn.Message);                  throw new Exception(Messages.STATUS_REPORT_ZIP_FAILED);              }
Magic Number,XenAdmin.Actions,ZipStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ZipStatusReportAction.cs,Run,The following statement contains a magic number: try              {                  // Calculate total bytes to save                  long bytesToExtract = 1' bytesExtracted = 0;                  foreach (string inputFile in Directory.GetFiles(_inputTempFolder))                  {                      bytesToExtract += new FileInfo(inputFile).Length;                  }                    // Create temp dir for extracted stuff                  if (Directory.Exists(extractTempDir))                  {                      Directory.Delete(extractTempDir);                  }                  Directory.CreateDirectory(extractTempDir);                    // Extract each of the raw server files to the temp extraction directory                  foreach (string inputFile in Directory.GetFiles(_inputTempFolder))                  {                      if (inputFile.ToLowerInvariant().EndsWith(".tar"))                      {                          // Un-tar it. SharpZipLib doesn't account for illegal filenames or characters in                          // filenames (e.g. ':'in Windows)' so first we stream the tar to a new tar'                          // sanitizing any bad filenames as we go.                            // We also need to record the modification times of all the files' so that we can                          // restore them into the final zip.                                                    string outFilename = inputFile.Substring(0' inputFile.Length - 4);                          if (outFilename.Length == 0)                              outFilename = Path.GetRandomFileName();                          string outputDir = Path.Combine(extractTempDir' Path.GetFileName(outFilename));                            string sanitizedTar = Path.GetTempFileName();                            using (ArchiveIterator tarIterator = ArchiveFactory.Reader(ArchiveFactory.Type.Tar' File.OpenRead(inputFile)))                          {                              using (ArchiveWriter tarWriter = ArchiveFactory.Writer(ArchiveFactory.Type.Tar' File.OpenWrite(sanitizedTar)))                              {                                  Dictionary<string' string> usedNames = new Dictionary<string' string>();                                  while (tarIterator.HasNext())                                  {                                      if (Cancelling)                                      {                                          throw new CancelledException();                                      }                                        using( MemoryStream ms = new MemoryStream() )                                      {                                          tarIterator.ExtractCurrentFile(ms);                                          string saneName = SanitizeTarName(tarIterator.CurrentFileName()' usedNames);                                          tarWriter.Add(ms' saneName);                                          ModTimes[Path.Combine(outputDir' saneName)] = tarIterator.CurrentFileModificationTime();                                      }                                    }                              }                          }                            // Now extract the sanitized tar                          using(FileStream fs = File.OpenRead(sanitizedTar))                          {                              using (ArchiveIterator tarIterator = ArchiveFactory.Reader(ArchiveFactory.Type.Tar' fs))                              {                                  Directory.CreateDirectory(outputDir);                                  tarIterator.ExtractAllContents(outputDir);                                  bytesToCompress += Core.Helpers.GetDirSize(new DirectoryInfo(outputDir));                              }                          }                      }                      else                      {                          // Just copy vanilla input files unmodified to the temp directory                          string outputFile = Path.Combine(extractTempDir' Path.GetFileName(inputFile));                          File.Copy(inputFile' outputFile);                          ModTimes[outputFile] = new FileInfo(inputFile).LastWriteTimeUtc;                          bytesToCompress += new FileInfo(outputFile).Length;                      }                        bytesExtracted += new FileInfo(inputFile).Length;                      File.Delete(inputFile);                      this.PercentComplete = (int)(50.0 * bytesExtracted / bytesToExtract);                        if (Cancelling)                      {                          throw new CancelledException();                      }                  }                    // Now zip up all the temporarily extracted files into a single zip file for the user                  log.DebugFormat("Packing {0} of bug report files into zip file {1}"'                      Util.DiskSizeString(bytesToCompress)' _destFile);                    LogDescriptionChanges = false;                  try                  {                        ZipToOutputFile(extractTempDir);                      PercentComplete = 100;                        // Only cleanup files if it succeeded (or cancelled)                      CleanupFiles(extractTempDir);                  }                  finally                  {                      LogDescriptionChanges = true;                  }                    if (Cancelling)                      throw new CancelledException();              }              catch (CancelledException)              {                  CleanupFiles(extractTempDir' true);                    throw;              }              catch (Exception exn)              {                  ZipToOutputFile(_inputTempFolder);                  PercentComplete = 100;                  log.ErrorFormat("An exception was trapped while creating a server status report: " + exn.Message);                  throw new Exception(Messages.STATUS_REPORT_ZIP_FAILED);              }
Magic Number,XenAdmin.Actions,ZipStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ZipStatusReportAction.cs,Run,The following statement contains a magic number: try              {                  // Calculate total bytes to save                  long bytesToExtract = 1' bytesExtracted = 0;                  foreach (string inputFile in Directory.GetFiles(_inputTempFolder))                  {                      bytesToExtract += new FileInfo(inputFile).Length;                  }                    // Create temp dir for extracted stuff                  if (Directory.Exists(extractTempDir))                  {                      Directory.Delete(extractTempDir);                  }                  Directory.CreateDirectory(extractTempDir);                    // Extract each of the raw server files to the temp extraction directory                  foreach (string inputFile in Directory.GetFiles(_inputTempFolder))                  {                      if (inputFile.ToLowerInvariant().EndsWith(".tar"))                      {                          // Un-tar it. SharpZipLib doesn't account for illegal filenames or characters in                          // filenames (e.g. ':'in Windows)' so first we stream the tar to a new tar'                          // sanitizing any bad filenames as we go.                            // We also need to record the modification times of all the files' so that we can                          // restore them into the final zip.                                                    string outFilename = inputFile.Substring(0' inputFile.Length - 4);                          if (outFilename.Length == 0)                              outFilename = Path.GetRandomFileName();                          string outputDir = Path.Combine(extractTempDir' Path.GetFileName(outFilename));                            string sanitizedTar = Path.GetTempFileName();                            using (ArchiveIterator tarIterator = ArchiveFactory.Reader(ArchiveFactory.Type.Tar' File.OpenRead(inputFile)))                          {                              using (ArchiveWriter tarWriter = ArchiveFactory.Writer(ArchiveFactory.Type.Tar' File.OpenWrite(sanitizedTar)))                              {                                  Dictionary<string' string> usedNames = new Dictionary<string' string>();                                  while (tarIterator.HasNext())                                  {                                      if (Cancelling)                                      {                                          throw new CancelledException();                                      }                                        using( MemoryStream ms = new MemoryStream() )                                      {                                          tarIterator.ExtractCurrentFile(ms);                                          string saneName = SanitizeTarName(tarIterator.CurrentFileName()' usedNames);                                          tarWriter.Add(ms' saneName);                                          ModTimes[Path.Combine(outputDir' saneName)] = tarIterator.CurrentFileModificationTime();                                      }                                    }                              }                          }                            // Now extract the sanitized tar                          using(FileStream fs = File.OpenRead(sanitizedTar))                          {                              using (ArchiveIterator tarIterator = ArchiveFactory.Reader(ArchiveFactory.Type.Tar' fs))                              {                                  Directory.CreateDirectory(outputDir);                                  tarIterator.ExtractAllContents(outputDir);                                  bytesToCompress += Core.Helpers.GetDirSize(new DirectoryInfo(outputDir));                              }                          }                      }                      else                      {                          // Just copy vanilla input files unmodified to the temp directory                          string outputFile = Path.Combine(extractTempDir' Path.GetFileName(inputFile));                          File.Copy(inputFile' outputFile);                          ModTimes[outputFile] = new FileInfo(inputFile).LastWriteTimeUtc;                          bytesToCompress += new FileInfo(outputFile).Length;                      }                        bytesExtracted += new FileInfo(inputFile).Length;                      File.Delete(inputFile);                      this.PercentComplete = (int)(50.0 * bytesExtracted / bytesToExtract);                        if (Cancelling)                      {                          throw new CancelledException();                      }                  }                    // Now zip up all the temporarily extracted files into a single zip file for the user                  log.DebugFormat("Packing {0} of bug report files into zip file {1}"'                      Util.DiskSizeString(bytesToCompress)' _destFile);                    LogDescriptionChanges = false;                  try                  {                        ZipToOutputFile(extractTempDir);                      PercentComplete = 100;                        // Only cleanup files if it succeeded (or cancelled)                      CleanupFiles(extractTempDir);                  }                  finally                  {                      LogDescriptionChanges = true;                  }                    if (Cancelling)                      throw new CancelledException();              }              catch (CancelledException)              {                  CleanupFiles(extractTempDir' true);                    throw;              }              catch (Exception exn)              {                  ZipToOutputFile(_inputTempFolder);                  PercentComplete = 100;                  log.ErrorFormat("An exception was trapped while creating a server status report: " + exn.Message);                  throw new Exception(Messages.STATUS_REPORT_ZIP_FAILED);              }
Magic Number,XenAdmin.Actions,ZipStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ZipStatusReportAction.cs,Run,The following statement contains a magic number: try              {                  // Calculate total bytes to save                  long bytesToExtract = 1' bytesExtracted = 0;                  foreach (string inputFile in Directory.GetFiles(_inputTempFolder))                  {                      bytesToExtract += new FileInfo(inputFile).Length;                  }                    // Create temp dir for extracted stuff                  if (Directory.Exists(extractTempDir))                  {                      Directory.Delete(extractTempDir);                  }                  Directory.CreateDirectory(extractTempDir);                    // Extract each of the raw server files to the temp extraction directory                  foreach (string inputFile in Directory.GetFiles(_inputTempFolder))                  {                      if (inputFile.ToLowerInvariant().EndsWith(".tar"))                      {                          // Un-tar it. SharpZipLib doesn't account for illegal filenames or characters in                          // filenames (e.g. ':'in Windows)' so first we stream the tar to a new tar'                          // sanitizing any bad filenames as we go.                            // We also need to record the modification times of all the files' so that we can                          // restore them into the final zip.                                                    string outFilename = inputFile.Substring(0' inputFile.Length - 4);                          if (outFilename.Length == 0)                              outFilename = Path.GetRandomFileName();                          string outputDir = Path.Combine(extractTempDir' Path.GetFileName(outFilename));                            string sanitizedTar = Path.GetTempFileName();                            using (ArchiveIterator tarIterator = ArchiveFactory.Reader(ArchiveFactory.Type.Tar' File.OpenRead(inputFile)))                          {                              using (ArchiveWriter tarWriter = ArchiveFactory.Writer(ArchiveFactory.Type.Tar' File.OpenWrite(sanitizedTar)))                              {                                  Dictionary<string' string> usedNames = new Dictionary<string' string>();                                  while (tarIterator.HasNext())                                  {                                      if (Cancelling)                                      {                                          throw new CancelledException();                                      }                                        using( MemoryStream ms = new MemoryStream() )                                      {                                          tarIterator.ExtractCurrentFile(ms);                                          string saneName = SanitizeTarName(tarIterator.CurrentFileName()' usedNames);                                          tarWriter.Add(ms' saneName);                                          ModTimes[Path.Combine(outputDir' saneName)] = tarIterator.CurrentFileModificationTime();                                      }                                    }                              }                          }                            // Now extract the sanitized tar                          using(FileStream fs = File.OpenRead(sanitizedTar))                          {                              using (ArchiveIterator tarIterator = ArchiveFactory.Reader(ArchiveFactory.Type.Tar' fs))                              {                                  Directory.CreateDirectory(outputDir);                                  tarIterator.ExtractAllContents(outputDir);                                  bytesToCompress += Core.Helpers.GetDirSize(new DirectoryInfo(outputDir));                              }                          }                      }                      else                      {                          // Just copy vanilla input files unmodified to the temp directory                          string outputFile = Path.Combine(extractTempDir' Path.GetFileName(inputFile));                          File.Copy(inputFile' outputFile);                          ModTimes[outputFile] = new FileInfo(inputFile).LastWriteTimeUtc;                          bytesToCompress += new FileInfo(outputFile).Length;                      }                        bytesExtracted += new FileInfo(inputFile).Length;                      File.Delete(inputFile);                      this.PercentComplete = (int)(50.0 * bytesExtracted / bytesToExtract);                        if (Cancelling)                      {                          throw new CancelledException();                      }                  }                    // Now zip up all the temporarily extracted files into a single zip file for the user                  log.DebugFormat("Packing {0} of bug report files into zip file {1}"'                      Util.DiskSizeString(bytesToCompress)' _destFile);                    LogDescriptionChanges = false;                  try                  {                        ZipToOutputFile(extractTempDir);                      PercentComplete = 100;                        // Only cleanup files if it succeeded (or cancelled)                      CleanupFiles(extractTempDir);                  }                  finally                  {                      LogDescriptionChanges = true;                  }                    if (Cancelling)                      throw new CancelledException();              }              catch (CancelledException)              {                  CleanupFiles(extractTempDir' true);                    throw;              }              catch (Exception exn)              {                  ZipToOutputFile(_inputTempFolder);                  PercentComplete = 100;                  log.ErrorFormat("An exception was trapped while creating a server status report: " + exn.Message);                  throw new Exception(Messages.STATUS_REPORT_ZIP_FAILED);              }
Magic Number,XenAdmin.Actions,ZipStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ZipStatusReportAction.cs,SanitizeTarPathMember,The following statement contains a magic number: foreach (char c in member.ToCharArray())              {                  if (c > 31 && c < 127 && !IsCharExcluded(c))                  {                      sb.Append(c);                  }                  else                  {                      sb.Append("_");                  }              }
Magic Number,XenAdmin.Actions,ZipStatusReportAction,C:\repos\xenserver_xenadmin\XenModel\Actions\ZipStatusReportAction.cs,SanitizeTarPathMember,The following statement contains a magic number: foreach (char c in member.ToCharArray())              {                  if (c > 31 && c < 127 && !IsCharExcluded(c))                  {                      sb.Append(c);                  }                  else                  {                      sb.Append("_");                  }              }
Magic Number,XenAdmin.Actions,AddRemoveRolesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveRolesAction.cs,Run,The following statement contains a magic number: log.DebugFormat("Adding {0} roles on subject '{1}'"' toAdd.Count' (subject.DisplayName ?? subject.SubjectName ?? subject.subject_identifier).Ellipsise(50));
Magic Number,XenAdmin.Actions,AddRemoveRolesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveRolesAction.cs,Run,The following statement contains a magic number: foreach (Role r in toAdd)              {                  Subject.add_to_roles(Session' subject.opaque_ref' r.opaque_ref);                  done++;                  PercentComplete = (100 * done) / count;                }
Magic Number,XenAdmin.Actions,AddRemoveRolesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveRolesAction.cs,Run,The following statement contains a magic number: log.DebugFormat("Removing {0} roles on subject '{1}'"' toRemove.Count' (subject.DisplayName ?? subject.SubjectName ?? subject.subject_identifier).Ellipsise(50));
Magic Number,XenAdmin.Actions,AddRemoveRolesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveRolesAction.cs,Run,The following statement contains a magic number: foreach (Role r in toRemove)              {                  Subject.remove_from_roles(Session' subject.opaque_ref' r.opaque_ref);                  done++;                  PercentComplete = (100 * done) / count;              }
Magic Number,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,Run,The following statement contains a magic number: steps = subjectNamesToAdd.Count * 2 + subjectsToRemove.Count;
Magic Number,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,resolveSubjects,The following statement contains a magic number: log.DebugFormat("Resolving AD entries on pool '{0}'"' Helpers.GetName(Pool).Ellipsise(50));
Magic Number,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,resolveSubjects,The following statement contains a magic number: foreach (string name in subjectNamesToAdd)              {                  try                  {                      sid = Auth.get_subject_identifier(Session' name);                      sidsToAdd.Add(sid);                      if (!Auth.get_subject_information_from_identifier(Session' sid).TryGetValue(Subject.SUBJECT_NAME_KEY' out resolvedName))                          resolvedName = Messages.UNKNOWN_AD_USER;                    }                  catch (Failure f)                  {                      if (f.ErrorDescription[0] == Failure.RBAC_PERMISSION_DENIED)                          Failure.ParseRBACFailure(f'Connection'Session);                        Exception = f;                      log.Warn("Exception resolving AD user"' f);                      e = f;                  }                  finally                  {                      if (NameResolveComplete != null)                      {                          NameResolveComplete(this' name' resolvedName' sid' e);                      }                      e = null;                      sid = resolvedName = "";                  }                  stepsComplete++;                  PercentComplete = (100 * stepsComplete) / steps;              }
Magic Number,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,addResolvedSubjects,The following statement contains a magic number: log.DebugFormat("Adding {0} new subjects on pool '{1}'"' sidsToAdd.Count' Helpers.GetName(Pool).Ellipsise(50));
Magic Number,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,addResolvedSubjects,The following statement contains a magic number: foreach (string sid in sidsToAdd)              {                  try                  {                      // We pass this object back even if it fails so we know who we are talking about                      subject = new Subject();                      subject.subject_identifier = sid;                      subject.other_config = Auth.get_subject_information_from_identifier(Session' sid);                        // Check that this subject doesn't already exist                      foreach (Subject s in Pool.Connection.Cache.Subjects)                      {                          if (s.subject_identifier == sid)                          {                              log.WarnFormat("A Subject with sid {0} already exists on the server."' sid);                              string subjectName = (subject.DisplayName ?? subject.SubjectName ?? "").Ellipsise(50);                              throw new Exception(String.Format(Messages.AD_USER_ALREADY_HAS_ACCESS' subjectName));                          }                      }                                            XenAPI.Subject.create(Session' subject);                  }                  catch (Exception ex)                  {                      Failure f = ex as Failure;                      if (f != null && f.ErrorDescription[0] == Failure.RBAC_PERMISSION_DENIED)                          Failure.ParseRBACFailure(f'Connection'Session);                        Exception = ex;                      log.Warn("Exception adding AD user to subject list"' ex);                      e = ex;                  }                  finally                  {                      if (SubjectAddComplete != null)                      {                          SubjectAddComplete(this' subject' e);                      }                      e = null;                      subject = null;                  }                  stepsComplete++;                  PercentComplete = (100 * stepsComplete) / steps;              }
Magic Number,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,addResolvedSubjects,The following statement contains a magic number: foreach (string sid in sidsToAdd)              {                  try                  {                      // We pass this object back even if it fails so we know who we are talking about                      subject = new Subject();                      subject.subject_identifier = sid;                      subject.other_config = Auth.get_subject_information_from_identifier(Session' sid);                        // Check that this subject doesn't already exist                      foreach (Subject s in Pool.Connection.Cache.Subjects)                      {                          if (s.subject_identifier == sid)                          {                              log.WarnFormat("A Subject with sid {0} already exists on the server."' sid);                              string subjectName = (subject.DisplayName ?? subject.SubjectName ?? "").Ellipsise(50);                              throw new Exception(String.Format(Messages.AD_USER_ALREADY_HAS_ACCESS' subjectName));                          }                      }                                            XenAPI.Subject.create(Session' subject);                  }                  catch (Exception ex)                  {                      Failure f = ex as Failure;                      if (f != null && f.ErrorDescription[0] == Failure.RBAC_PERMISSION_DENIED)                          Failure.ParseRBACFailure(f'Connection'Session);                        Exception = ex;                      log.Warn("Exception adding AD user to subject list"' ex);                      e = ex;                  }                  finally                  {                      if (SubjectAddComplete != null)                      {                          SubjectAddComplete(this' subject' e);                      }                      e = null;                      subject = null;                  }                  stepsComplete++;                  PercentComplete = (100 * stepsComplete) / steps;              }
Magic Number,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,removeSubjects,The following statement contains a magic number: log.DebugFormat("Removing {0} existing subjects on pool '{1}'"' subjectsToRemove.Count' Helpers.GetName(Pool).Ellipsise(50));
Magic Number,XenAdmin.Actions,AddRemoveSubjectsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\AddRemoveSubjectsAction.cs,removeSubjects,The following statement contains a magic number: foreach (Subject subject in subjectsToRemove)              {                  string sid = subject.subject_identifier;                  try                  {                      if (!Pool.Connection.Session.IsLocalSuperuser && selfSid == sid)                      {                          // Committing suicide. We will log ourselves out later.                          logoutSession = true;                      }                      else                      {                          Session.logout_subject_identifier(Session' sid);                      }                      XenAPI.Subject.destroy(Session' subject.opaque_ref);                      // We look at the session subject as this is the authority under which we are connected.                       // (deliberate use of the original session for subject analysis... the sudo session is not the one we want to interrogate                                        }                  catch (Exception ex)                  {                      Failure f = ex as Failure;                      if (f != null && f.ErrorDescription[0] == Failure.RBAC_PERMISSION_DENIED)                          Failure.ParseRBACFailure(f' Connection' Session);                        Exception = ex;                      log.Warn("Exception removing AD user to subject list"' ex);                      e = ex;                  }                  finally                  {                      if (SubjectRemoveComplete != null)                      {                          SubjectRemoveComplete(this' sid' e);                      }                      e = null;                  }                  stepsComplete++;                  PercentComplete = (100 * stepsComplete) / steps;              }
Magic Number,XenAdmin.Actions,DisableAdAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\DisableAdAction.cs,Run,The following statement contains a magic number: if (!creds.ContainsKey(KEY_USER))              {                  log.DebugFormat("Disabling AD on pool '{0}' without disabling machine account in AD."' Helpers.GetName(Pool).Ellipsise(50));              }              else              {                  log.DebugFormat("Disabling AD on pool '{0}' and disabling machine account in AD"' Helpers.GetName(Pool).Ellipsise(50));              }
Magic Number,XenAdmin.Actions,DisableAdAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\DisableAdAction.cs,Run,The following statement contains a magic number: if (!creds.ContainsKey(KEY_USER))              {                  log.DebugFormat("Disabling AD on pool '{0}' without disabling machine account in AD."' Helpers.GetName(Pool).Ellipsise(50));              }              else              {                  log.DebugFormat("Disabling AD on pool '{0}' and disabling machine account in AD"' Helpers.GetName(Pool).Ellipsise(50));              }
Magic Number,XenAdmin.Actions,EnableAdAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\EnableAdAction.cs,Run,The following statement contains a magic number: log.DebugFormat("Enabling AD on pool '{0}'"' Helpers.GetName(Pool).Ellipsise(50));
Magic Number,XenAdmin.Actions,EnableAdAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\EnableAdAction.cs,Run,The following statement contains a magic number: try              {                  try                  {                      //CA-48122: Call disable just in case it was not disabled properly                      Pool.disable_external_auth(Session' Pool.opaque_ref' new Dictionary<string' string>());                  }                  catch (Exception ex)                  {                      log.Debug("Tried to disable AD before enabling it' but it has failed. Ignoring it' because in this case we are executing disable on best effort basis only."' ex);                  }                                    XenAPI.Pool.enable_external_auth(Session' Pool.opaque_ref' config' domain' Auth.AUTH_TYPE_AD);              }              catch (Failure f)              {                  // CA-37255 CA-38369 CA-39485                  // We can get errors from likewise that correspond to an error in WinError.h                  // By and large they are useless to the user so we log the details for support and show something more friendly.                  if (f.ErrorDescription[0] == Failure.AUTH_ENABLE_FAILED && f.ErrorDescription.Count > 2)                  {                        Match m = AuthFailedReg.Match(f.ErrorDescription[2]);                      if (!m.Success)                          throw f;                        int errorId;                      if (!int.TryParse(m.Groups[1].Value' NumberStyles.Integer' CultureInfo.InvariantCulture' out errorId))                          throw f;                        Win32Exception winErr = new Win32Exception(errorId);                        log.ErrorFormat("Received error from likewise when attempting to join domain: {0}"' winErr);                  }                  XenRef<Host> hostref = new XenRef<Host>(f.ErrorDescription[1]);                  Host host = Connection.Resolve(hostref);                  if (host == null)                      throw f;                  else if (f.ErrorDescription[0] == Failure.POOL_AUTH_ENABLE_FAILED_WRONG_CREDENTIALS)                      throw new CredentialsFailure(f.ErrorDescription);                  else                      throw new Exception(string.Format(Messages.AD_FAILURE_WITH_HOST' f.Message' host.Name()));              }
Magic Number,XenAdmin.Actions,EnableAdAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AD\EnableAdAction.cs,Run,The following statement contains a magic number: try              {                  try                  {                      //CA-48122: Call disable just in case it was not disabled properly                      Pool.disable_external_auth(Session' Pool.opaque_ref' new Dictionary<string' string>());                  }                  catch (Exception ex)                  {                      log.Debug("Tried to disable AD before enabling it' but it has failed. Ignoring it' because in this case we are executing disable on best effort basis only."' ex);                  }                                    XenAPI.Pool.enable_external_auth(Session' Pool.opaque_ref' config' domain' Auth.AUTH_TYPE_AD);              }              catch (Failure f)              {                  // CA-37255 CA-38369 CA-39485                  // We can get errors from likewise that correspond to an error in WinError.h                  // By and large they are useless to the user so we log the details for support and show something more friendly.                  if (f.ErrorDescription[0] == Failure.AUTH_ENABLE_FAILED && f.ErrorDescription.Count > 2)                  {                        Match m = AuthFailedReg.Match(f.ErrorDescription[2]);                      if (!m.Success)                          throw f;                        int errorId;                      if (!int.TryParse(m.Groups[1].Value' NumberStyles.Integer' CultureInfo.InvariantCulture' out errorId))                          throw f;                        Win32Exception winErr = new Win32Exception(errorId);                        log.ErrorFormat("Received error from likewise when attempting to join domain: {0}"' winErr);                  }                  XenRef<Host> hostref = new XenRef<Host>(f.ErrorDescription[1]);                  Host host = Connection.Resolve(hostref);                  if (host == null)                      throw f;                  else if (f.ErrorDescription[0] == Failure.POOL_AUTH_ENABLE_FAILED_WRONG_CREDENTIALS)                      throw new CredentialsFailure(f.ErrorDescription);                  else                      throw new Exception(string.Format(Messages.AD_FAILURE_WITH_HOST' f.Message' host.Name()));              }
Magic Number,XenAdmin.Actions,AsyncAction,C:\repos\xenserver_xenadmin\XenModel\Actions\AsyncAction.cs,PollToCompletion,The following statement contains a magic number: PollToCompletion(0' 100);
Magic Number,XenAdmin.Actions,ApplyLicenseAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseAction.cs,Run,The following statement contains a magic number: if (Connection.IsConnected)              {                  if (!File.Exists(Filepath))                  {                      throw new Exception(Messages.LICENSE_FILE_DOES_NOT_EXIST);                  }                  if (new FileInfo(Filepath).Length > 1048576)                  {                      throw new Exception(Messages.LICENSE_FILE_TOO_LARGE);                  }                    string encodedContent = Convert.ToBase64String(File.ReadAllBytes(Filepath));                    // PR-1102: catch the host's license data' before applying the new one' so it can be sent later to the licensing server                  LicensingHelper.LicenseDataStruct previousLicenseData = new LicensingHelper.LicenseDataStruct(this.Host);                    this.Description = string.Format(Messages.APPLYLICENSE_APPLYING' Filepath);                  log.DebugFormat("Applying license to server {0}"' this.Host.Name());                  RelatedTask = XenAPI.Host.async_license_apply(this.Session' this.Host.opaque_ref' encodedContent);                  PollToCompletion();                  this.Description = Messages.APPLYLICENSE_APPLIED;                    // PR-1102: send licensing data to the activation server                  Dictionary<Host' LicensingHelper.LicenseDataStruct> hosts = new Dictionary<Host' LicensingHelper.LicenseDataStruct>();                  hosts.Add(this.Host' previousLicenseData);                  if (ActivateFreeLicense)                      LicensingHelper.SendActivationData(hosts);                  else                      LicensingHelper.SendLicenseEditionData(hosts' "");              }
Magic Number,XenAdmin.Actions,DestroyHostCrashDumpAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\DestroyHostCrashDumpAction.cs,Run,The following statement contains a magic number: int delta = 100 / max;
Magic Number,XenAdmin.Actions,ExecutePluginAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ExecutePluginAction.cs,Run,The following statement contains a magic number: if (Result.StartsWith("True"))              {                  Description = string.Format(Messages.PLUGIN_SUCCEED' Plugin);                  Result = Result.Remove(0' 4);                  return;              }
Magic Number,XenAdmin.Actions,FibreChannelProbeAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\FibreChannelProbeAction.cs,Run,The following statement contains a magic number: try              {                  Result = XenAPI.SR.probe(Session' Host.opaque_ref' new Dictionary<string' string>()' srType.ToString()' new Dictionary<string' string>());              }              catch (XenAPI.Failure f)              {                  if (f.ErrorDescription[0] == "SR_BACKEND_FAILURE_90"                    || f.ErrorDescription[0] == "SR_BACKEND_FAILURE_107")                      Result = f.ErrorDescription[3];                  else                      throw;              }
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,ReconfigureSinglePrimaryManagement,The following statement contains a magic number: int mid = (hi + action.PercentComplete) / 2;
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,ReconfigurePrimaryManagement,The following statement contains a magic number: int inc = (hi - lo) / 4;
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,BringUp,The following statement contains a magic number: int inc = (hi - lo) / (primary ? 2 : 3);
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,BringUp,The following statement contains a magic number: int inc = (hi - lo) / (primary ? 2 : 3);
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,BringDown,The following statement contains a magic number: int mid = (action.PercentComplete + hi) / 2;
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,ReconfigureManagement,The following statement contains a magic number: int inc = (hi - lo) / 3;
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,ReconfigureManagement_,The following statement contains a magic number: int mid = (hi + action.PercentComplete) / 2;
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,WaitForslavesToRecover,The following statement contains a magic number: int RetryLimit = 60' RetryAttempt = 0;
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,WaitForslavesToRecover,The following statement contains a magic number: while (deadHost.Count < (pool.Connection.Cache.HostCount -1) && (RetryAttempt <= RetryLimit))              {                  foreach (Host host in pool.Connection.Cache.Hosts)                  {                      if (host.IsMaster())                          continue;                        if (!host.IsLive() && !deadHost.Contains(host.uuid))                      {                          deadHost.Add(host.uuid);                      }                    }                  RetryAttempt++;                  Thread.Sleep(1000);              }
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,WaitForslavesToRecover,The following statement contains a magic number: while (deadHost.Count != 0 && (RetryAttempt <= RetryLimit))              {                  foreach (Host host in pool.Connection.Cache.Hosts)                  {                      if (host.IsMaster())                          continue;                        if (host.IsLive() && deadHost.Contains(host.uuid))                      {                          deadHost.Remove(host.uuid);                      }                    }                  RetryAttempt++;                  Thread.Sleep(1000);              }
Magic Number,XenAdmin.Actions,NetworkingActionHelpers,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkingActionHelpers.cs,PoolReconfigureManagement,The following statement contains a magic number: int inc = (hi - lo) / 3;
Magic Number,XenAdmin.Actions,ChangeNetworkingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\ChangeNetworkingAction.cs,Run,The following statement contains a magic number: try              {                  int inc = (Pool == null ? 100 : 50) / (newPIFs.Count + downPIFs.Count + 1);                  int progress = 0;                    // We bring up / reconfigure the interfaces on the slaves.                  // Then the master.                  // Then we reconfigure the management interface on the slaves.                  // Then the master.                  // Then we bring down the other interfaces on the slaves.                  // And then the master.                  // If Pool isn't set' then we're just doing this for the one host.                    if (Pool != null)                  {                      foreach (PIF pif in newPIFs)                      {                          progress += inc;                          Reconfigure(pif' true' false' progress);                      }                  }                    foreach (PIF pif in newPIFs)                  {                      progress += inc;                      Reconfigure(pif' true' true' progress);                  }                    if (downManagement != null)                  {                      if (Pool != null)                      {                          progress += inc;                          if (!Helpers.FeatureForbidden(Connection' Host.RestrictManagementOnVLAN))                         {                              PoolReconfigureManagement(progress);                              return;                         }                            ReconfigureManagement(false' progress);                      }                        progress += inc;                      ReconfigureManagement(true' progress);                  }                    if (Pool != null)                  {                      foreach (PIF pif in downPIFs)                      {                          progress += inc;                          Reconfigure(pif' false' false' progress);                      }                  }                  foreach (PIF pif in downPIFs)                  {                      progress += inc;                      Reconfigure(pif' false' true' progress);                  }                    Description = Messages.ACTION_CHANGE_NETWORKING_DONE;              }              finally              {                  Connection.ExpectDisruption = false;              }
Magic Number,XenAdmin.Actions,ChangeNetworkingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\ChangeNetworkingAction.cs,Run,The following statement contains a magic number: try              {                  int inc = (Pool == null ? 100 : 50) / (newPIFs.Count + downPIFs.Count + 1);                  int progress = 0;                    // We bring up / reconfigure the interfaces on the slaves.                  // Then the master.                  // Then we reconfigure the management interface on the slaves.                  // Then the master.                  // Then we bring down the other interfaces on the slaves.                  // And then the master.                  // If Pool isn't set' then we're just doing this for the one host.                    if (Pool != null)                  {                      foreach (PIF pif in newPIFs)                      {                          progress += inc;                          Reconfigure(pif' true' false' progress);                      }                  }                    foreach (PIF pif in newPIFs)                  {                      progress += inc;                      Reconfigure(pif' true' true' progress);                  }                    if (downManagement != null)                  {                      if (Pool != null)                      {                          progress += inc;                          if (!Helpers.FeatureForbidden(Connection' Host.RestrictManagementOnVLAN))                         {                              PoolReconfigureManagement(progress);                              return;                         }                            ReconfigureManagement(false' progress);                      }                        progress += inc;                      ReconfigureManagement(true' progress);                  }                    if (Pool != null)                  {                      foreach (PIF pif in downPIFs)                      {                          progress += inc;                          Reconfigure(pif' false' false' progress);                      }                  }                  foreach (PIF pif in downPIFs)                  {                      progress += inc;                      Reconfigure(pif' false' true' progress);                  }                    Description = Messages.ACTION_CHANGE_NETWORKING_DONE;              }              finally              {                  Connection.ExpectDisruption = false;              }
Magic Number,XenAdmin.Actions,ChangeNetworkingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\ChangeNetworkingAction.cs,GetIPInRange,The following statement contains a magic number: return string.Format("{0}.{1}.{2}.{3}"' bits[0]' bits[1]' bits[2]' int.Parse(bits[3]) + i);
Magic Number,XenAdmin.Actions,ChangeNetworkingAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\ChangeNetworkingAction.cs,GetIPInRange,The following statement contains a magic number: return string.Format("{0}.{1}.{2}.{3}"' bits[0]' bits[1]' bits[2]' int.Parse(bits[3]) + i);
Magic Number,XenAdmin.Actions,CreateBondAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\CreateBondAction.cs,Run,The following statement contains a magic number: int inc = 100 / (Connection.Cache.HostCount * 2 + 1);
Magic Number,XenAdmin.Actions,CreateBondAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\CreateBondAction.cs,Run,The following statement contains a magic number: int inc = 100 / (Connection.Cache.HostCount * 2 + 1);
Magic Number,XenAdmin.Actions,DestroyBondAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\DestroyBondAction.cs,Run,The following statement contains a magic number: PercentComplete = 50;
Magic Number,XenAdmin.Actions,DestroyBondAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\DestroyBondAction.cs,Run,The following statement contains a magic number: int inc = 40 / Bonds.Count;
Magic Number,XenAdmin.Actions,DestroyBondAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\DestroyBondAction.cs,ReconfigureManagementInterfaces,The following statement contains a magic number: int inc = 50 / Masters.Count;
Magic Number,XenAdmin.Actions,RescanPIFsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\RescanPIFsAction.cs,Run,The following statement contains a magic number: PercentComplete = 40;
Magic Number,XenAdmin.Actions,RescanPIFsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\RescanPIFsAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,UnplugPlugNetworkAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\UnplugPlugNetworkAction.cs,Run,The following statement contains a magic number: PercentComplete = 10;
Magic Number,XenAdmin.Actions,UnplugPlugNetworkAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\UnplugPlugNetworkAction.cs,Run,The following statement contains a magic number: int percentStep = (int)Math.Floor(90.0d / (PIFs.Count*2 + VIFs.Count*2));
Magic Number,XenAdmin.Actions,UnplugPlugNetworkAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\UnplugPlugNetworkAction.cs,Run,The following statement contains a magic number: int percentStep = (int)Math.Floor(90.0d / (PIFs.Count*2 + VIFs.Count*2));
Magic Number,XenAdmin.Actions,UnplugPlugNetworkAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\UnplugPlugNetworkAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,EnableHAAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\EnableHAAction.cs,Run,The following statement contains a magic number: if (startupOptions != null)              {                  double increment = 10 / Math.Max(startupOptions.Count' 1);                  int i = 0;                  // First set any VM restart priorities supplied                  foreach (VM vm in startupOptions.Keys)                  {                      // Set new VM restart priority and ha_always_run                      log.DebugFormat("Setting HA priority on {0} to {1}"' vm.Name()' startupOptions[vm].HaRestartPriority);                      XenAPI.VM.SetHaRestartPriority(this.Session' vm' (VM.HA_Restart_Priority)startupOptions[vm].HaRestartPriority);                        // Set new VM order and start_delay                      log.DebugFormat("Setting start order on {0} to {1}"' vm.Name()' startupOptions[vm].Order);                      XenAPI.VM.set_order(this.Session' vm.opaque_ref' startupOptions[vm].Order);                        log.DebugFormat("Setting start order on {0} to {1}"' vm.Name()' startupOptions[vm].StartDelay);                      XenAPI.VM.set_start_delay(this.Session' vm.opaque_ref' startupOptions[vm].StartDelay);                        this.PercentComplete = (int)(++i * increment);                  }              }
Magic Number,XenAdmin.Actions,EnableHAAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\EnableHAAction.cs,Run,The following statement contains a magic number: this.PercentComplete = 10;
Magic Number,XenAdmin.Actions,EnableHAAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\EnableHAAction.cs,Run,The following statement contains a magic number: PollToCompletion(15' 100);
Magic Number,XenAdmin.Actions,EnableHAAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\EnableHAAction.cs,Run,The following statement contains a magic number: PollToCompletion(15' 100);
Magic Number,XenAdmin.Actions,GetHeartbeatSRsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool\GetHeartbeatSRsAction.cs,Run,The following statement contains a magic number: double increment = 100.0 / SRs.Count;
Magic Number,XenAdmin.Actions,RemovePatchAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\RemovePatchAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = Pool_patch.async_destroy(Session' patch.opaque_ref);                  PollToCompletion(0' 100);              }              catch (Failure f)              {                  log.Error("Clean up failed"' f);              }
Magic Number,XenAdmin.Actions,ISCSIPopulateIQNsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\ISCSIPopulateIQNsAction.cs,Run,The following statement contains a magic number: try              {                  // Perform a create with some missing params: should fail with the error                  // containing the list of SRs on the filer.                  RelatedTask = XenAPI.SR.async_create(Session' pool.master'                       settings' 0' Helpers.GuiTempObjectPrefix' Messages.ISCSI_SHOULD_NO_BE_CREATED'                       XenAPI.SR.SRTypes.lvmoiscsi.ToString()' "user"' true' new Dictionary<string' string>());                  this.PollToCompletion();                    // Create should always fail and never get here                  throw new InvalidOperationException(Messages.ISCSI_FAIL);              }              catch (XenAPI.Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(targetHost);                    // We expect an SR_BACKEND_FAILURE_96 error' with a message from                  // xapi' stdout' and then stderr.                  // stderr will be an XML-encoded description of the iSCSI IQNs.                  if (exn.ErrorDescription[0] != "SR_BACKEND_FAILURE_96")                      throw;                    // We want a custom error if the server returns no aggregates.                  if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                      throw new NoIQNsFoundException(targetHost);                    XmlDocument doc = new XmlDocument();                  List<IScsiIqnInfo> results = new List<IScsiIqnInfo>();                  try                  {                      doc.LoadXml(exn.ErrorDescription[3].ToString());                      foreach (XmlNode targetListNode in doc.GetElementsByTagName("iscsi-target-iqns"))                      {                          foreach (XmlNode targetNode in targetListNode.ChildNodes)                          {                              int index = -1;                              string address = null;                              UInt16 port = Util.DEFAULT_ISCSI_PORT;                              string targetIQN = null;                                foreach (XmlNode infoNode in targetNode.ChildNodes)                              {                                  if (infoNode.Name.ToLowerInvariant() == "index")                                  {                                      index = int.Parse(infoNode.InnerText' System.Globalization.CultureInfo.InvariantCulture);                                  }                                  else if (infoNode.Name.ToLowerInvariant() == "ipaddress")                                  {                                      string addr = infoNode.InnerText.Trim();                                      address = ParseIPAddress(addr);                                  }                                  else if (infoNode.Name.ToLowerInvariant() == "port")                                  {                                      port = UInt16.Parse(infoNode.InnerText' System.Globalization.CultureInfo.InvariantCulture);                                  }                                  else if (infoNode.Name.ToLowerInvariant() == "targetiqn")                                  {                                      targetIQN = infoNode.InnerText.Trim();                                  }                              }                              results.Add(new IScsiIqnInfo(index' targetIQN' address' port));                          }                      }                      results.Sort();                      _iqns = results.ToArray();                  }                  catch                  {                      throw new BadServerResponse(targetHost);                  }                    if (_iqns.Length < 1)                      throw new NoIQNsFoundException(targetHost);              }
Magic Number,XenAdmin.Actions,ISCSIPopulateIQNsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\ISCSIPopulateIQNsAction.cs,Run,The following statement contains a magic number: try              {                  // Perform a create with some missing params: should fail with the error                  // containing the list of SRs on the filer.                  RelatedTask = XenAPI.SR.async_create(Session' pool.master'                       settings' 0' Helpers.GuiTempObjectPrefix' Messages.ISCSI_SHOULD_NO_BE_CREATED'                       XenAPI.SR.SRTypes.lvmoiscsi.ToString()' "user"' true' new Dictionary<string' string>());                  this.PollToCompletion();                    // Create should always fail and never get here                  throw new InvalidOperationException(Messages.ISCSI_FAIL);              }              catch (XenAPI.Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(targetHost);                    // We expect an SR_BACKEND_FAILURE_96 error' with a message from                  // xapi' stdout' and then stderr.                  // stderr will be an XML-encoded description of the iSCSI IQNs.                  if (exn.ErrorDescription[0] != "SR_BACKEND_FAILURE_96")                      throw;                    // We want a custom error if the server returns no aggregates.                  if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                      throw new NoIQNsFoundException(targetHost);                    XmlDocument doc = new XmlDocument();                  List<IScsiIqnInfo> results = new List<IScsiIqnInfo>();                  try                  {                      doc.LoadXml(exn.ErrorDescription[3].ToString());                      foreach (XmlNode targetListNode in doc.GetElementsByTagName("iscsi-target-iqns"))                      {                          foreach (XmlNode targetNode in targetListNode.ChildNodes)                          {                              int index = -1;                              string address = null;                              UInt16 port = Util.DEFAULT_ISCSI_PORT;                              string targetIQN = null;                                foreach (XmlNode infoNode in targetNode.ChildNodes)                              {                                  if (infoNode.Name.ToLowerInvariant() == "index")                                  {                                      index = int.Parse(infoNode.InnerText' System.Globalization.CultureInfo.InvariantCulture);                                  }                                  else if (infoNode.Name.ToLowerInvariant() == "ipaddress")                                  {                                      string addr = infoNode.InnerText.Trim();                                      address = ParseIPAddress(addr);                                  }                                  else if (infoNode.Name.ToLowerInvariant() == "port")                                  {                                      port = UInt16.Parse(infoNode.InnerText' System.Globalization.CultureInfo.InvariantCulture);                                  }                                  else if (infoNode.Name.ToLowerInvariant() == "targetiqn")                                  {                                      targetIQN = infoNode.InnerText.Trim();                                  }                              }                              results.Add(new IScsiIqnInfo(index' targetIQN' address' port));                          }                      }                      results.Sort();                      _iqns = results.ToArray();                  }                  catch                  {                      throw new BadServerResponse(targetHost);                  }                    if (_iqns.Length < 1)                      throw new NoIQNsFoundException(targetHost);              }
Magic Number,XenAdmin.Actions,ISCSIPopulateIQNsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\ISCSIPopulateIQNsAction.cs,Run,The following statement contains a magic number: try              {                  // Perform a create with some missing params: should fail with the error                  // containing the list of SRs on the filer.                  RelatedTask = XenAPI.SR.async_create(Session' pool.master'                       settings' 0' Helpers.GuiTempObjectPrefix' Messages.ISCSI_SHOULD_NO_BE_CREATED'                       XenAPI.SR.SRTypes.lvmoiscsi.ToString()' "user"' true' new Dictionary<string' string>());                  this.PollToCompletion();                    // Create should always fail and never get here                  throw new InvalidOperationException(Messages.ISCSI_FAIL);              }              catch (XenAPI.Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(targetHost);                    // We expect an SR_BACKEND_FAILURE_96 error' with a message from                  // xapi' stdout' and then stderr.                  // stderr will be an XML-encoded description of the iSCSI IQNs.                  if (exn.ErrorDescription[0] != "SR_BACKEND_FAILURE_96")                      throw;                    // We want a custom error if the server returns no aggregates.                  if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                      throw new NoIQNsFoundException(targetHost);                    XmlDocument doc = new XmlDocument();                  List<IScsiIqnInfo> results = new List<IScsiIqnInfo>();                  try                  {                      doc.LoadXml(exn.ErrorDescription[3].ToString());                      foreach (XmlNode targetListNode in doc.GetElementsByTagName("iscsi-target-iqns"))                      {                          foreach (XmlNode targetNode in targetListNode.ChildNodes)                          {                              int index = -1;                              string address = null;                              UInt16 port = Util.DEFAULT_ISCSI_PORT;                              string targetIQN = null;                                foreach (XmlNode infoNode in targetNode.ChildNodes)                              {                                  if (infoNode.Name.ToLowerInvariant() == "index")                                  {                                      index = int.Parse(infoNode.InnerText' System.Globalization.CultureInfo.InvariantCulture);                                  }                                  else if (infoNode.Name.ToLowerInvariant() == "ipaddress")                                  {                                      string addr = infoNode.InnerText.Trim();                                      address = ParseIPAddress(addr);                                  }                                  else if (infoNode.Name.ToLowerInvariant() == "port")                                  {                                      port = UInt16.Parse(infoNode.InnerText' System.Globalization.CultureInfo.InvariantCulture);                                  }                                  else if (infoNode.Name.ToLowerInvariant() == "targetiqn")                                  {                                      targetIQN = infoNode.InnerText.Trim();                                  }                              }                              results.Add(new IScsiIqnInfo(index' targetIQN' address' port));                          }                      }                      results.Sort();                      _iqns = results.ToArray();                  }                  catch                  {                      throw new BadServerResponse(targetHost);                  }                    if (_iqns.Length < 1)                      throw new NoIQNsFoundException(targetHost);              }
Magic Number,XenAdmin.Actions,ISCSIPopulateLunsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\ISCSIPopulateLunsAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' pool.master' settings' 0'                       Helpers.GuiTempObjectPrefix' Messages.ISCSI_SHOULD_NO_BE_CREATED'                       XenAPI.SR.SRTypes.lvmoiscsi.ToString()' "user"' true' new Dictionary<string' string>());                  this.PollToCompletion();                  throw new InvalidOperationException(Messages.ISCSI_FAIL);              }              catch (XenAPI.Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(targetHost);                    // We expect an SR_BACKEND_FAILURE_96 error' with a message from                  // xapi' stdout' and then stderr.                  // stderr will be an XML-encoded description of the iSCSI IQNs.                  if (exn.ErrorDescription[0] != "SR_BACKEND_FAILURE_107" && exn.ErrorDescription[0] != "SR_BACKEND_FAILURE_87")                      throw;                    // We want a custom error if the server returns no aggregates.                  if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                      throw new NoLUNsFoundException(targetHost);                      try                  {                      List<ISCSIInfo> results = new List<ISCSIInfo>();                      XmlDocument doc = new XmlDocument();                      doc.LoadXml(exn.ErrorDescription[3].ToString());                      foreach (XmlNode target_node in doc.GetElementsByTagName("iscsi-target"))                      {                          foreach (XmlNode lun_node in target_node.ChildNodes)                          {                              int lunid = -1;                              string scsiid = "";                              string vendor = "";                              string serial = "";                              long size = -1;                              foreach (XmlNode n in lun_node.ChildNodes)                              {                                  if (n.Name.ToLowerInvariant() == "lunid")                                  {                                      lunid = int.Parse(n.InnerText.Trim()' System.Globalization.CultureInfo.InvariantCulture);                                  }                                  else if (n.Name.ToLowerInvariant() == "vendor")                                  {                                      vendor = n.InnerText.Trim();                                  }                                  else if (n.Name.ToLowerInvariant() == "serial")                                  {                                      serial = n.InnerText.Trim();                                  }                                  else if (n.Name.ToLowerInvariant() == "size")                                  {                                      long.TryParse(n.InnerText.Trim()' out size);                                  }                                  else if (n.Name.ToLowerInvariant() == "scsiid")                                  {                                      scsiid = n.InnerText.Trim();                                  }                              }                              results.Add(new ISCSIInfo(scsiid'lunid' vendor' serial' size));                          }                      }                      results.Sort();                      _luns = results.ToArray();                  }                  catch                  {                      throw new BadServerResponse(targetHost);                  }                    if (_luns.Length < 1)                      throw new NoLUNsFoundException(targetHost);              }
Magic Number,XenAdmin.Actions,ISCSIPopulateLunsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\ISCSIPopulateLunsAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' pool.master' settings' 0'                       Helpers.GuiTempObjectPrefix' Messages.ISCSI_SHOULD_NO_BE_CREATED'                       XenAPI.SR.SRTypes.lvmoiscsi.ToString()' "user"' true' new Dictionary<string' string>());                  this.PollToCompletion();                  throw new InvalidOperationException(Messages.ISCSI_FAIL);              }              catch (XenAPI.Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(targetHost);                    // We expect an SR_BACKEND_FAILURE_96 error' with a message from                  // xapi' stdout' and then stderr.                  // stderr will be an XML-encoded description of the iSCSI IQNs.                  if (exn.ErrorDescription[0] != "SR_BACKEND_FAILURE_107" && exn.ErrorDescription[0] != "SR_BACKEND_FAILURE_87")                      throw;                    // We want a custom error if the server returns no aggregates.                  if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                      throw new NoLUNsFoundException(targetHost);                      try                  {                      List<ISCSIInfo> results = new List<ISCSIInfo>();                      XmlDocument doc = new XmlDocument();                      doc.LoadXml(exn.ErrorDescription[3].ToString());                      foreach (XmlNode target_node in doc.GetElementsByTagName("iscsi-target"))                      {                          foreach (XmlNode lun_node in target_node.ChildNodes)                          {                              int lunid = -1;                              string scsiid = "";                              string vendor = "";                              string serial = "";                              long size = -1;                              foreach (XmlNode n in lun_node.ChildNodes)                              {                                  if (n.Name.ToLowerInvariant() == "lunid")                                  {                                      lunid = int.Parse(n.InnerText.Trim()' System.Globalization.CultureInfo.InvariantCulture);                                  }                                  else if (n.Name.ToLowerInvariant() == "vendor")                                  {                                      vendor = n.InnerText.Trim();                                  }                                  else if (n.Name.ToLowerInvariant() == "serial")                                  {                                      serial = n.InnerText.Trim();                                  }                                  else if (n.Name.ToLowerInvariant() == "size")                                  {                                      long.TryParse(n.InnerText.Trim()' out size);                                  }                                  else if (n.Name.ToLowerInvariant() == "scsiid")                                  {                                      scsiid = n.InnerText.Trim();                                  }                              }                              results.Add(new ISCSIInfo(scsiid'lunid' vendor' serial' size));                          }                      }                      results.Sort();                      _luns = results.ToArray();                  }                  catch                  {                      throw new BadServerResponse(targetHost);                  }                    if (_luns.Length < 1)                      throw new NoLUNsFoundException(targetHost);              }
Magic Number,XenAdmin.Actions,ISCSIPopulateLunsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\ISCSIPopulateLunsAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' pool.master' settings' 0'                       Helpers.GuiTempObjectPrefix' Messages.ISCSI_SHOULD_NO_BE_CREATED'                       XenAPI.SR.SRTypes.lvmoiscsi.ToString()' "user"' true' new Dictionary<string' string>());                  this.PollToCompletion();                  throw new InvalidOperationException(Messages.ISCSI_FAIL);              }              catch (XenAPI.Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(targetHost);                    // We expect an SR_BACKEND_FAILURE_96 error' with a message from                  // xapi' stdout' and then stderr.                  // stderr will be an XML-encoded description of the iSCSI IQNs.                  if (exn.ErrorDescription[0] != "SR_BACKEND_FAILURE_107" && exn.ErrorDescription[0] != "SR_BACKEND_FAILURE_87")                      throw;                    // We want a custom error if the server returns no aggregates.                  if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                      throw new NoLUNsFoundException(targetHost);                      try                  {                      List<ISCSIInfo> results = new List<ISCSIInfo>();                      XmlDocument doc = new XmlDocument();                      doc.LoadXml(exn.ErrorDescription[3].ToString());                      foreach (XmlNode target_node in doc.GetElementsByTagName("iscsi-target"))                      {                          foreach (XmlNode lun_node in target_node.ChildNodes)                          {                              int lunid = -1;                              string scsiid = "";                              string vendor = "";                              string serial = "";                              long size = -1;                              foreach (XmlNode n in lun_node.ChildNodes)                              {                                  if (n.Name.ToLowerInvariant() == "lunid")                                  {                                      lunid = int.Parse(n.InnerText.Trim()' System.Globalization.CultureInfo.InvariantCulture);                                  }                                  else if (n.Name.ToLowerInvariant() == "vendor")                                  {                                      vendor = n.InnerText.Trim();                                  }                                  else if (n.Name.ToLowerInvariant() == "serial")                                  {                                      serial = n.InnerText.Trim();                                  }                                  else if (n.Name.ToLowerInvariant() == "size")                                  {                                      long.TryParse(n.InnerText.Trim()' out size);                                  }                                  else if (n.Name.ToLowerInvariant() == "scsiid")                                  {                                      scsiid = n.InnerText.Trim();                                  }                              }                              results.Add(new ISCSIInfo(scsiid'lunid' vendor' serial' size));                          }                      }                      results.Sort();                      _luns = results.ToArray();                  }                  catch                  {                      throw new BadServerResponse(targetHost);                  }                    if (_luns.Length < 1)                      throw new NoLUNsFoundException(targetHost);              }
Magic Number,XenAdmin.Actions,SrAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrAction.cs,Run,The following statement contains a magic number: int inc = SR.PBDs.Count > 0 ? 100 / (SR.PBDs.Count * 2) : 0;
Magic Number,XenAdmin.Actions,SrAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrAction.cs,Run,The following statement contains a magic number: int inc = SR.PBDs.Count > 0 ? 100 / (SR.PBDs.Count * 2) : 0;
Magic Number,XenAdmin.Actions,SrAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrAction.cs,Run,The following statement contains a magic number: switch (kind)              {                  case SrActionKind.Detach:                      UnplugPBDs(ref inc);                      Description = string.Format(Messages.ACTION_SR_DETACH_SUCCESSFUL' SR.NameWithoutHost());                      break;                    case SrActionKind.Destroy:                      RelatedTask = XenAPI.SR.async_destroy(Session' SR.opaque_ref);                      PollToCompletion(50' 100);                      Description = Messages.ACTION_SR_DESTROY_SUCCESSFUL;                      break;                    case SrActionKind.Forget:                      Description = string.Format(Messages.FORGETTING_SR_0' SR.NameWithoutHost());                      if (!SR.allowed_operations.Contains(storage_operations.forget))                      {                          Description = Messages.ERROR_DIALOG_FORGET_SR_TITLE;                          break;                      }                                                RelatedTask = XenAPI.SR.async_forget(Session' SR.opaque_ref);                      PollToCompletion();                      Description = string.Format(Messages.SR_FORGOTTEN_0' SR.NameWithoutHost());                      break;                    case SrActionKind.SetAsDefault:                      XenRef<SR> r = new XenRef<SR>(SR);                      Pool = Helpers.GetPoolOfOne(Connection);                      Description = string.Format(Messages.ACTION_SR_SETTING_DEFAULT' SR' Pool);                      Pool poolCopy = (Pool)Pool.Clone();                      if (Pool != null)                      {                          poolCopy.crash_dump_SR = r;                          poolCopy.default_SR = r;                          poolCopy.suspend_image_SR = r;                          try                          {                              Pool.Locked = true;                              poolCopy.SaveChanges(Session);                          }                          finally                          {                              Pool.Locked = false;                          }                      }                        Description = Messages.ACTION_SR_SET_DEFAULT_SUCCESSFUL;                      break;                    case SrActionKind.UnplugAndDestroyPBDs:                      UnplugPBDs(ref inc);                      DestroyPBDs(ref inc);                      Description = string.Format(Messages.ACTION_SR_DETACH_SUCCESSFUL' SR.NameWithoutHost());                      break;                }
Magic Number,XenAdmin.Actions,SrAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrAction.cs,Run,The following statement contains a magic number: switch (kind)              {                  case SrActionKind.Detach:                      UnplugPBDs(ref inc);                      Description = string.Format(Messages.ACTION_SR_DETACH_SUCCESSFUL' SR.NameWithoutHost());                      break;                    case SrActionKind.Destroy:                      RelatedTask = XenAPI.SR.async_destroy(Session' SR.opaque_ref);                      PollToCompletion(50' 100);                      Description = Messages.ACTION_SR_DESTROY_SUCCESSFUL;                      break;                    case SrActionKind.Forget:                      Description = string.Format(Messages.FORGETTING_SR_0' SR.NameWithoutHost());                      if (!SR.allowed_operations.Contains(storage_operations.forget))                      {                          Description = Messages.ERROR_DIALOG_FORGET_SR_TITLE;                          break;                      }                                                RelatedTask = XenAPI.SR.async_forget(Session' SR.opaque_ref);                      PollToCompletion();                      Description = string.Format(Messages.SR_FORGOTTEN_0' SR.NameWithoutHost());                      break;                    case SrActionKind.SetAsDefault:                      XenRef<SR> r = new XenRef<SR>(SR);                      Pool = Helpers.GetPoolOfOne(Connection);                      Description = string.Format(Messages.ACTION_SR_SETTING_DEFAULT' SR' Pool);                      Pool poolCopy = (Pool)Pool.Clone();                      if (Pool != null)                      {                          poolCopy.crash_dump_SR = r;                          poolCopy.default_SR = r;                          poolCopy.suspend_image_SR = r;                          try                          {                              Pool.Locked = true;                              poolCopy.SaveChanges(Session);                          }                          finally                          {                              Pool.Locked = false;                          }                      }                        Description = Messages.ACTION_SR_SET_DEFAULT_SUCCESSFUL;                      break;                    case SrActionKind.UnplugAndDestroyPBDs:                      UnplugPBDs(ref inc);                      DestroyPBDs(ref inc);                      Description = string.Format(Messages.ACTION_SR_DETACH_SUCCESSFUL' SR.NameWithoutHost());                      break;                }
Magic Number,XenAdmin.Actions,SrIntroduceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrIntroduceAction.cs,Run,The following statement contains a magic number: try              {                  log.Debug("Performing preemptive SR.forget()");                  RelatedTask = XenAPI.SR.async_forget(this.Session' XenAPI.SR.get_by_uuid(this.Session'                      _srUuid).opaque_ref);                  PollToCompletion(0' 5);              }              catch (Failure)              {                  // Allow failure              }
Magic Number,XenAdmin.Actions,SrIntroduceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrIntroduceAction.cs,Run,The following statement contains a magic number: PollToCompletion(5' 10);
Magic Number,XenAdmin.Actions,SrIntroduceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrIntroduceAction.cs,Run,The following statement contains a magic number: PollToCompletion(5' 10);
Magic Number,XenAdmin.Actions,SrIntroduceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrIntroduceAction.cs,Run,The following statement contains a magic number: int delta = 90 / Connection.Cache.HostCount / 2;
Magic Number,XenAdmin.Actions,SrIntroduceAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrIntroduceAction.cs,Run,The following statement contains a magic number: int delta = 90 / Connection.Cache.HostCount / 2;
Magic Number,XenAdmin.Actions,SrReattachAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrReattachAction.cs,Run,The following statement contains a magic number: int delta = 100 / (Connection.Cache.HostCount * 2);
Magic Number,XenAdmin.Actions,SrReattachAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrReattachAction.cs,Run,The following statement contains a magic number: int delta = 100 / (Connection.Cache.HostCount * 2);
Magic Number,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The following statement contains a magic number: int max = _hostList.Count * 2;
Magic Number,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The following statement contains a magic number: int delta = 100 / max;
Magic Number,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The following statement contains a magic number: foreach (Host host in _hostList)              {                  if (!host.HasPBDTo(SR) && SR.shared && SR.PBDs.Count > 0)                  {                      PBD template = SR.Connection.Resolve(SR.PBDs[0]);                      if (template != null)                      {                          this.Description = string.Format(Messages.ACTION_SR_REPAIR_CREATE_PBD' Helpers.GetName(host));                          log.Debug(this.Description);                            Proxy_PBD proxyPBD = new Proxy_PBD();                          proxyPBD.currently_attached = false;                          proxyPBD.device_config = new Hashtable(template.device_config);                          proxyPBD.SR = template.SR;                          proxyPBD.host = new XenRef<Host>(host.opaque_ref);                            try                          {                              RelatedTask = XenAPI.PBD.async_create(this.Session' new PBD(proxyPBD));                                if (PercentComplete + delta <= 100)                              {                                  PollToCompletion(PercentComplete' PercentComplete + delta);                              }                              else                              {                                  PollToCompletion(PercentComplete' 100);                                  PercentComplete = 100;                              }                          }                          catch (XenAPI.Failure f)                          {                              failure = f;                              failureDescription = Description;                          }                      }                  }                  else                  {                      PercentComplete += delta;                  }                    PBD thePBD = host.GetPBDTo(SR);                  if (thePBD != null && !thePBD.currently_attached)                  {                      this.Description = string.Format(Messages.ACTION_SR_REPAIR_PLUGGING_PBD' Helpers.GetName(host));                      log.Debug(this.Description);                        try                      {                          RelatedTask = XenAPI.PBD.async_plug(this.Session' thePBD.opaque_ref);                            if (PercentComplete + delta <= 100)                          {                              PollToCompletion(PercentComplete' PercentComplete + delta);                          }                          else                          {                              PollToCompletion(PercentComplete' 100);                              PercentComplete = 100;                          }                      }                      catch (XenAPI.Failure f)                      {                          failure = f;                          failureDescription = Description;                      }                  }                  else                  {                      PercentComplete += delta;                  }              }
Magic Number,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The following statement contains a magic number: foreach (Host host in _hostList)              {                  if (!host.HasPBDTo(SR) && SR.shared && SR.PBDs.Count > 0)                  {                      PBD template = SR.Connection.Resolve(SR.PBDs[0]);                      if (template != null)                      {                          this.Description = string.Format(Messages.ACTION_SR_REPAIR_CREATE_PBD' Helpers.GetName(host));                          log.Debug(this.Description);                            Proxy_PBD proxyPBD = new Proxy_PBD();                          proxyPBD.currently_attached = false;                          proxyPBD.device_config = new Hashtable(template.device_config);                          proxyPBD.SR = template.SR;                          proxyPBD.host = new XenRef<Host>(host.opaque_ref);                            try                          {                              RelatedTask = XenAPI.PBD.async_create(this.Session' new PBD(proxyPBD));                                if (PercentComplete + delta <= 100)                              {                                  PollToCompletion(PercentComplete' PercentComplete + delta);                              }                              else                              {                                  PollToCompletion(PercentComplete' 100);                                  PercentComplete = 100;                              }                          }                          catch (XenAPI.Failure f)                          {                              failure = f;                              failureDescription = Description;                          }                      }                  }                  else                  {                      PercentComplete += delta;                  }                    PBD thePBD = host.GetPBDTo(SR);                  if (thePBD != null && !thePBD.currently_attached)                  {                      this.Description = string.Format(Messages.ACTION_SR_REPAIR_PLUGGING_PBD' Helpers.GetName(host));                      log.Debug(this.Description);                        try                      {                          RelatedTask = XenAPI.PBD.async_plug(this.Session' thePBD.opaque_ref);                            if (PercentComplete + delta <= 100)                          {                              PollToCompletion(PercentComplete' PercentComplete + delta);                          }                          else                          {                              PollToCompletion(PercentComplete' 100);                              PercentComplete = 100;                          }                      }                      catch (XenAPI.Failure f)                      {                          failure = f;                          failureDescription = Description;                      }                  }                  else                  {                      PercentComplete += delta;                  }              }
Magic Number,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The following statement contains a magic number: foreach (Host host in _hostList)              {                  if (!host.HasPBDTo(SR) && SR.shared && SR.PBDs.Count > 0)                  {                      PBD template = SR.Connection.Resolve(SR.PBDs[0]);                      if (template != null)                      {                          this.Description = string.Format(Messages.ACTION_SR_REPAIR_CREATE_PBD' Helpers.GetName(host));                          log.Debug(this.Description);                            Proxy_PBD proxyPBD = new Proxy_PBD();                          proxyPBD.currently_attached = false;                          proxyPBD.device_config = new Hashtable(template.device_config);                          proxyPBD.SR = template.SR;                          proxyPBD.host = new XenRef<Host>(host.opaque_ref);                            try                          {                              RelatedTask = XenAPI.PBD.async_create(this.Session' new PBD(proxyPBD));                                if (PercentComplete + delta <= 100)                              {                                  PollToCompletion(PercentComplete' PercentComplete + delta);                              }                              else                              {                                  PollToCompletion(PercentComplete' 100);                                  PercentComplete = 100;                              }                          }                          catch (XenAPI.Failure f)                          {                              failure = f;                              failureDescription = Description;                          }                      }                  }                  else                  {                      PercentComplete += delta;                  }                    PBD thePBD = host.GetPBDTo(SR);                  if (thePBD != null && !thePBD.currently_attached)                  {                      this.Description = string.Format(Messages.ACTION_SR_REPAIR_PLUGGING_PBD' Helpers.GetName(host));                      log.Debug(this.Description);                        try                      {                          RelatedTask = XenAPI.PBD.async_plug(this.Session' thePBD.opaque_ref);                            if (PercentComplete + delta <= 100)                          {                              PollToCompletion(PercentComplete' PercentComplete + delta);                          }                          else                          {                              PollToCompletion(PercentComplete' 100);                              PercentComplete = 100;                          }                      }                      catch (XenAPI.Failure f)                      {                          failure = f;                          failureDescription = Description;                      }                  }                  else                  {                      PercentComplete += delta;                  }              }
Magic Number,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The following statement contains a magic number: foreach (Host host in _hostList)              {                  if (!host.HasPBDTo(SR) && SR.shared && SR.PBDs.Count > 0)                  {                      PBD template = SR.Connection.Resolve(SR.PBDs[0]);                      if (template != null)                      {                          this.Description = string.Format(Messages.ACTION_SR_REPAIR_CREATE_PBD' Helpers.GetName(host));                          log.Debug(this.Description);                            Proxy_PBD proxyPBD = new Proxy_PBD();                          proxyPBD.currently_attached = false;                          proxyPBD.device_config = new Hashtable(template.device_config);                          proxyPBD.SR = template.SR;                          proxyPBD.host = new XenRef<Host>(host.opaque_ref);                            try                          {                              RelatedTask = XenAPI.PBD.async_create(this.Session' new PBD(proxyPBD));                                if (PercentComplete + delta <= 100)                              {                                  PollToCompletion(PercentComplete' PercentComplete + delta);                              }                              else                              {                                  PollToCompletion(PercentComplete' 100);                                  PercentComplete = 100;                              }                          }                          catch (XenAPI.Failure f)                          {                              failure = f;                              failureDescription = Description;                          }                      }                  }                  else                  {                      PercentComplete += delta;                  }                    PBD thePBD = host.GetPBDTo(SR);                  if (thePBD != null && !thePBD.currently_attached)                  {                      this.Description = string.Format(Messages.ACTION_SR_REPAIR_PLUGGING_PBD' Helpers.GetName(host));                      log.Debug(this.Description);                        try                      {                          RelatedTask = XenAPI.PBD.async_plug(this.Session' thePBD.opaque_ref);                            if (PercentComplete + delta <= 100)                          {                              PollToCompletion(PercentComplete' PercentComplete + delta);                          }                          else                          {                              PollToCompletion(PercentComplete' 100);                              PercentComplete = 100;                          }                      }                      catch (XenAPI.Failure f)                      {                          failure = f;                          failureDescription = Description;                      }                  }                  else                  {                      PercentComplete += delta;                  }              }
Magic Number,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The following statement contains a magic number: foreach (Host host in _hostList)              {                  if (!host.HasPBDTo(SR) && SR.shared && SR.PBDs.Count > 0)                  {                      PBD template = SR.Connection.Resolve(SR.PBDs[0]);                      if (template != null)                      {                          this.Description = string.Format(Messages.ACTION_SR_REPAIR_CREATE_PBD' Helpers.GetName(host));                          log.Debug(this.Description);                            Proxy_PBD proxyPBD = new Proxy_PBD();                          proxyPBD.currently_attached = false;                          proxyPBD.device_config = new Hashtable(template.device_config);                          proxyPBD.SR = template.SR;                          proxyPBD.host = new XenRef<Host>(host.opaque_ref);                            try                          {                              RelatedTask = XenAPI.PBD.async_create(this.Session' new PBD(proxyPBD));                                if (PercentComplete + delta <= 100)                              {                                  PollToCompletion(PercentComplete' PercentComplete + delta);                              }                              else                              {                                  PollToCompletion(PercentComplete' 100);                                  PercentComplete = 100;                              }                          }                          catch (XenAPI.Failure f)                          {                              failure = f;                              failureDescription = Description;                          }                      }                  }                  else                  {                      PercentComplete += delta;                  }                    PBD thePBD = host.GetPBDTo(SR);                  if (thePBD != null && !thePBD.currently_attached)                  {                      this.Description = string.Format(Messages.ACTION_SR_REPAIR_PLUGGING_PBD' Helpers.GetName(host));                      log.Debug(this.Description);                        try                      {                          RelatedTask = XenAPI.PBD.async_plug(this.Session' thePBD.opaque_ref);                            if (PercentComplete + delta <= 100)                          {                              PollToCompletion(PercentComplete' PercentComplete + delta);                          }                          else                          {                              PollToCompletion(PercentComplete' 100);                              PercentComplete = 100;                          }                      }                      catch (XenAPI.Failure f)                      {                          failure = f;                          failureDescription = Description;                      }                  }                  else                  {                      PercentComplete += delta;                  }              }
Magic Number,XenAdmin.Actions,SrRepairAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrRepairAction.cs,Run,The following statement contains a magic number: foreach (Host host in _hostList)              {                  if (!host.HasPBDTo(SR) && SR.shared && SR.PBDs.Count > 0)                  {                      PBD template = SR.Connection.Resolve(SR.PBDs[0]);                      if (template != null)                      {                          this.Description = string.Format(Messages.ACTION_SR_REPAIR_CREATE_PBD' Helpers.GetName(host));                          log.Debug(this.Description);                            Proxy_PBD proxyPBD = new Proxy_PBD();                          proxyPBD.currently_attached = false;                          proxyPBD.device_config = new Hashtable(template.device_config);                          proxyPBD.SR = template.SR;                          proxyPBD.host = new XenRef<Host>(host.opaque_ref);                            try                          {                              RelatedTask = XenAPI.PBD.async_create(this.Session' new PBD(proxyPBD));                                if (PercentComplete + delta <= 100)                              {                                  PollToCompletion(PercentComplete' PercentComplete + delta);                              }                              else                              {                                  PollToCompletion(PercentComplete' 100);                                  PercentComplete = 100;                              }                          }                          catch (XenAPI.Failure f)                          {                              failure = f;                              failureDescription = Description;                          }                      }                  }                  else                  {                      PercentComplete += delta;                  }                    PBD thePBD = host.GetPBDTo(SR);                  if (thePBD != null && !thePBD.currently_attached)                  {                      this.Description = string.Format(Messages.ACTION_SR_REPAIR_PLUGGING_PBD' Helpers.GetName(host));                      log.Debug(this.Description);                        try                      {                          RelatedTask = XenAPI.PBD.async_plug(this.Session' thePBD.opaque_ref);                            if (PercentComplete + delta <= 100)                          {                              PollToCompletion(PercentComplete' PercentComplete + delta);                          }                          else                          {                              PollToCompletion(PercentComplete' 100);                              PercentComplete = 100;                          }                      }                      catch (XenAPI.Failure f)                      {                          failure = f;                          failureDescription = Description;                      }                  }                  else                  {                      PercentComplete += delta;                  }              }
Magic Number,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' hostname' dconf' 0'                      Helpers.GuiTempObjectPrefix' ""' type.ToString()' ""' true'                       new Dictionary<String' String>());                    this.PollToCompletion(50' 100);                    throw new BadServerResponse(hostname);              }              catch (Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(hostname);                        // We expect a particular sort of failure' whose error details contain                  // the list of aggregates on the filer in XML.                    switch (exn.ErrorDescription[0])                  {                      case "SR_BACKEND_FAILURE_123":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            aggregates = ParseAggregateXML(exn.ErrorDescription[3]' hostname);                            break;                        case "SR_BACKEND_FAILURE_163":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            storagePools = ParseDellStoragePoolsXML(exn.ErrorDescription[3]' hostname);                            break;                        default:                          throw;                  }                    if (ListIsNullOrEmpty(srs)                       && ListIsNullOrEmpty(aggregates)                       && ListIsNullOrEmpty(storagePools))                      throw new NoExistingAndNowhereToCreateException(hostname);                                  }
Magic Number,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' hostname' dconf' 0'                      Helpers.GuiTempObjectPrefix' ""' type.ToString()' ""' true'                       new Dictionary<String' String>());                    this.PollToCompletion(50' 100);                    throw new BadServerResponse(hostname);              }              catch (Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(hostname);                        // We expect a particular sort of failure' whose error details contain                  // the list of aggregates on the filer in XML.                    switch (exn.ErrorDescription[0])                  {                      case "SR_BACKEND_FAILURE_123":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            aggregates = ParseAggregateXML(exn.ErrorDescription[3]' hostname);                            break;                        case "SR_BACKEND_FAILURE_163":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            storagePools = ParseDellStoragePoolsXML(exn.ErrorDescription[3]' hostname);                            break;                        default:                          throw;                  }                    if (ListIsNullOrEmpty(srs)                       && ListIsNullOrEmpty(aggregates)                       && ListIsNullOrEmpty(storagePools))                      throw new NoExistingAndNowhereToCreateException(hostname);                                  }
Magic Number,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' hostname' dconf' 0'                      Helpers.GuiTempObjectPrefix' ""' type.ToString()' ""' true'                       new Dictionary<String' String>());                    this.PollToCompletion(50' 100);                    throw new BadServerResponse(hostname);              }              catch (Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(hostname);                        // We expect a particular sort of failure' whose error details contain                  // the list of aggregates on the filer in XML.                    switch (exn.ErrorDescription[0])                  {                      case "SR_BACKEND_FAILURE_123":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            aggregates = ParseAggregateXML(exn.ErrorDescription[3]' hostname);                            break;                        case "SR_BACKEND_FAILURE_163":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            storagePools = ParseDellStoragePoolsXML(exn.ErrorDescription[3]' hostname);                            break;                        default:                          throw;                  }                    if (ListIsNullOrEmpty(srs)                       && ListIsNullOrEmpty(aggregates)                       && ListIsNullOrEmpty(storagePools))                      throw new NoExistingAndNowhereToCreateException(hostname);                                  }
Magic Number,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' hostname' dconf' 0'                      Helpers.GuiTempObjectPrefix' ""' type.ToString()' ""' true'                       new Dictionary<String' String>());                    this.PollToCompletion(50' 100);                    throw new BadServerResponse(hostname);              }              catch (Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(hostname);                        // We expect a particular sort of failure' whose error details contain                  // the list of aggregates on the filer in XML.                    switch (exn.ErrorDescription[0])                  {                      case "SR_BACKEND_FAILURE_123":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            aggregates = ParseAggregateXML(exn.ErrorDescription[3]' hostname);                            break;                        case "SR_BACKEND_FAILURE_163":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            storagePools = ParseDellStoragePoolsXML(exn.ErrorDescription[3]' hostname);                            break;                        default:                          throw;                  }                    if (ListIsNullOrEmpty(srs)                       && ListIsNullOrEmpty(aggregates)                       && ListIsNullOrEmpty(storagePools))                      throw new NoExistingAndNowhereToCreateException(hostname);                                  }
Magic Number,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' hostname' dconf' 0'                      Helpers.GuiTempObjectPrefix' ""' type.ToString()' ""' true'                       new Dictionary<String' String>());                    this.PollToCompletion(50' 100);                    throw new BadServerResponse(hostname);              }              catch (Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(hostname);                        // We expect a particular sort of failure' whose error details contain                  // the list of aggregates on the filer in XML.                    switch (exn.ErrorDescription[0])                  {                      case "SR_BACKEND_FAILURE_123":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            aggregates = ParseAggregateXML(exn.ErrorDescription[3]' hostname);                            break;                        case "SR_BACKEND_FAILURE_163":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            storagePools = ParseDellStoragePoolsXML(exn.ErrorDescription[3]' hostname);                            break;                        default:                          throw;                  }                    if (ListIsNullOrEmpty(srs)                       && ListIsNullOrEmpty(aggregates)                       && ListIsNullOrEmpty(storagePools))                      throw new NoExistingAndNowhereToCreateException(hostname);                                  }
Magic Number,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' hostname' dconf' 0'                      Helpers.GuiTempObjectPrefix' ""' type.ToString()' ""' true'                       new Dictionary<String' String>());                    this.PollToCompletion(50' 100);                    throw new BadServerResponse(hostname);              }              catch (Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(hostname);                        // We expect a particular sort of failure' whose error details contain                  // the list of aggregates on the filer in XML.                    switch (exn.ErrorDescription[0])                  {                      case "SR_BACKEND_FAILURE_123":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            aggregates = ParseAggregateXML(exn.ErrorDescription[3]' hostname);                            break;                        case "SR_BACKEND_FAILURE_163":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            storagePools = ParseDellStoragePoolsXML(exn.ErrorDescription[3]' hostname);                            break;                        default:                          throw;                  }                    if (ListIsNullOrEmpty(srs)                       && ListIsNullOrEmpty(aggregates)                       && ListIsNullOrEmpty(storagePools))                      throw new NoExistingAndNowhereToCreateException(hostname);                                  }
Magic Number,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' hostname' dconf' 0'                      Helpers.GuiTempObjectPrefix' ""' type.ToString()' ""' true'                       new Dictionary<String' String>());                    this.PollToCompletion(50' 100);                    throw new BadServerResponse(hostname);              }              catch (Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(hostname);                        // We expect a particular sort of failure' whose error details contain                  // the list of aggregates on the filer in XML.                    switch (exn.ErrorDescription[0])                  {                      case "SR_BACKEND_FAILURE_123":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            aggregates = ParseAggregateXML(exn.ErrorDescription[3]' hostname);                            break;                        case "SR_BACKEND_FAILURE_163":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            storagePools = ParseDellStoragePoolsXML(exn.ErrorDescription[3]' hostname);                            break;                        default:                          throw;                  }                    if (ListIsNullOrEmpty(srs)                       && ListIsNullOrEmpty(aggregates)                       && ListIsNullOrEmpty(storagePools))                      throw new NoExistingAndNowhereToCreateException(hostname);                                  }
Magic Number,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,Run,The following statement contains a magic number: try              {                  RelatedTask = XenAPI.SR.async_create(Session' hostname' dconf' 0'                      Helpers.GuiTempObjectPrefix' ""' type.ToString()' ""' true'                       new Dictionary<String' String>());                    this.PollToCompletion(50' 100);                    throw new BadServerResponse(hostname);              }              catch (Failure exn)              {                  if (exn.ErrorDescription.Count < 1)                      throw new BadServerResponse(hostname);                        // We expect a particular sort of failure' whose error details contain                  // the list of aggregates on the filer in XML.                    switch (exn.ErrorDescription[0])                  {                      case "SR_BACKEND_FAILURE_123":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            aggregates = ParseAggregateXML(exn.ErrorDescription[3]' hostname);                            break;                        case "SR_BACKEND_FAILURE_163":                          // We want a custom error if the server returns no iqns.                          if (exn.ErrorDescription.Count < 4 || exn.ErrorDescription[3].Length == 0)                              break;                            storagePools = ParseDellStoragePoolsXML(exn.ErrorDescription[3]' hostname);                            break;                        default:                          throw;                  }                    if (ListIsNullOrEmpty(srs)                       && ListIsNullOrEmpty(aggregates)                       && ListIsNullOrEmpty(storagePools))                      throw new NoExistingAndNowhereToCreateException(hostname);                                  }
Magic Number,XenAdmin.Actions,DestroyDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\DestroyDiskAction.cs,Run,The following statement contains a magic number: foreach (VBD vbd in SR.Connection.ResolveAll(Disk.VBDs))              {                  VM vm = Connection.Resolve<VM>(vbd.VM);                  if (vm == null)                      continue;                  if (vbd.currently_attached && !AllowRunningVMDelete)                  {                      throw new Exception(                          string.Format(Messages.CANNOT_DELETE_VDI_ACTIVE_ON'                           Helpers.GetName(vm).Ellipsise(20)));                  }                  DetachVirtualDiskAction action = new DetachVirtualDiskAction(Disk' vm' false);                  action.RunExternal(Session);              }
Magic Number,XenAdmin.Actions,DetachVirtualDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\DetachVirtualDiskAction.cs,Run,The following statement contains a magic number: try              {                  if (vbd != null && vbd.currently_attached && XenAPI.VBD.get_allowed_operations(Session' vbd.opaque_ref).Contains(XenAPI.vbd_operations.unplug))                  {                      RelatedTask = XenAPI.VBD.async_unplug(Session' vbd.opaque_ref);                      PollToCompletion(0' 50);                  }              }              catch (Exception exn)              {                  log.Error(exn' exn);                  throw;              }              finally              {                  PercentComplete = 50;                  RelatedTask = XenAPI.VBD.async_destroy(Session' vbd.opaque_ref);                  PollToCompletion(51' 100);              }
Magic Number,XenAdmin.Actions,DetachVirtualDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\DetachVirtualDiskAction.cs,Run,The following statement contains a magic number: try              {                  if (vbd != null && vbd.currently_attached && XenAPI.VBD.get_allowed_operations(Session' vbd.opaque_ref).Contains(XenAPI.vbd_operations.unplug))                  {                      RelatedTask = XenAPI.VBD.async_unplug(Session' vbd.opaque_ref);                      PollToCompletion(0' 50);                  }              }              catch (Exception exn)              {                  log.Error(exn' exn);                  throw;              }              finally              {                  PercentComplete = 50;                  RelatedTask = XenAPI.VBD.async_destroy(Session' vbd.opaque_ref);                  PollToCompletion(51' 100);              }
Magic Number,XenAdmin.Actions,DetachVirtualDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\DetachVirtualDiskAction.cs,Run,The following statement contains a magic number: try              {                  if (vbd != null && vbd.currently_attached && XenAPI.VBD.get_allowed_operations(Session' vbd.opaque_ref).Contains(XenAPI.vbd_operations.unplug))                  {                      RelatedTask = XenAPI.VBD.async_unplug(Session' vbd.opaque_ref);                      PollToCompletion(0' 50);                  }              }              catch (Exception exn)              {                  log.Error(exn' exn);                  throw;              }              finally              {                  PercentComplete = 50;                  RelatedTask = XenAPI.VBD.async_destroy(Session' vbd.opaque_ref);                  PollToCompletion(51' 100);              }
Magic Number,XenAdmin.Actions,DetachVirtualDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\DetachVirtualDiskAction.cs,Run,The following statement contains a magic number: try              {                  if (vbd != null && vbd.currently_attached && XenAPI.VBD.get_allowed_operations(Session' vbd.opaque_ref).Contains(XenAPI.vbd_operations.unplug))                  {                      RelatedTask = XenAPI.VBD.async_unplug(Session' vbd.opaque_ref);                      PollToCompletion(0' 50);                  }              }              catch (Exception exn)              {                  log.Error(exn' exn);                  throw;              }              finally              {                  PercentComplete = 50;                  RelatedTask = XenAPI.VBD.async_destroy(Session' vbd.opaque_ref);                  PollToCompletion(51' 100);              }
Magic Number,XenAdmin.Actions,MoveVirtualDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\MoveVirtualDiskAction.cs,Run,The following statement contains a magic number: PercentComplete = 10;
Magic Number,XenAdmin.Actions,MoveVirtualDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\MoveVirtualDiskAction.cs,Run,The following statement contains a magic number: PollToCompletion(PercentComplete' 60);
Magic Number,XenAdmin.Actions,MoveVirtualDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\MoveVirtualDiskAction.cs,Run,The following statement contains a magic number: PercentComplete = 70;
Magic Number,XenAdmin.Actions,MoveVirtualDiskAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VDI\MoveVirtualDiskAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,CreateVMPolicy,C:\repos\xenserver_xenadmin\XenModel\Actions\VMSS\CreateVMPolicy.cs,Run,The following statement contains a magic number: PercentComplete = 60;
Magic Number,XenAdmin.Actions,CreateVMPolicy,C:\repos\xenserver_xenadmin\XenModel\Actions\VMSS\CreateVMPolicy.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions,ChangeVMISOAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ChangeVMISOAction.cs,Run,The following statement contains a magic number: if (!cdrom.empty)              {                  RelatedTask = VBD.async_eject(Session' cdrom.opaque_ref);                  wasEmpty = true;                  PollToCompletion(0' 50);              }
Magic Number,XenAdmin.Actions,ChangeVMISOAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ChangeVMISOAction.cs,Run,The following statement contains a magic number: if (vdi != null)              {                  RelatedTask = VBD.async_insert(Session' cdrom.opaque_ref' vdi.opaque_ref);                  PollToCompletion(wasEmpty ? 50 : 0' 100);                  Description = String.Format(Messages.ISO_LOADED'                      vdi.Name()' VM.Name());              }              else              {                  Description = String.Format(Messages.ISO_UNLOADED'                      VM.Name());              }
Magic Number,XenAdmin.Actions,ChangeVMISOAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ChangeVMISOAction.cs,Run,The following statement contains a magic number: if (vdi != null)              {                  RelatedTask = VBD.async_insert(Session' cdrom.opaque_ref' vdi.opaque_ref);                  PollToCompletion(wasEmpty ? 50 : 0' 100);                  Description = String.Format(Messages.ISO_LOADED'                      vdi.Name()' VM.Name());              }              else              {                  Description = String.Format(Messages.ISO_UNLOADED'                      VM.Name());              }
Magic Number,XenAdmin.Actions,SetHaPrioritiesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\SetHaPrioritiesAction.cs,Run,The following statement contains a magic number: foreach (VM vm in settings.Keys)              {                  if (VM.HaPriorityIsRestart(vm.Connection' (VM.HA_Restart_Priority)settings[vm].HaRestartPriority))                      continue;                    this.Description = string.Format(Messages.HA_SETTING_PRIORITY_ON_X' Helpers.GetName(vm));                    // Set new VM restart priority and ha_always_run                  XenAPI.VM.SetHaRestartPriority(this.Session' vm' (VM.HA_Restart_Priority)settings[vm].HaRestartPriority);                  // If the above succeeded' then at least some changes have been committed                    // Set new VM order and delay                  VM.set_order(this.Session' vm.opaque_ref' settings[vm].Order);                  VM.set_start_delay(this.Session' vm.opaque_ref' settings[vm].StartDelay);                    this.PercentComplete = (int)(++i * (60.0 / settings.Count));                  if (Cancelling)                      throw new CancelledException();              }
Magic Number,XenAdmin.Actions,SetHaPrioritiesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\SetHaPrioritiesAction.cs,Run,The following statement contains a magic number: foreach (VM vm in settings.Keys)              {                  if (!VM.HaPriorityIsRestart(vm.Connection' (VM.HA_Restart_Priority)settings[vm].HaRestartPriority))                      continue;                    this.Description = string.Format(Messages.HA_SETTING_PRIORITY_ON_X' Helpers.GetName(vm));                    // Set new VM restart priority and ha_always_run                  XenAPI.VM.SetHaRestartPriority(this.Session' vm' (VM.HA_Restart_Priority)settings[vm].HaRestartPriority);                  // If the above succeeded' then at least some changes have been committed                    // Set new VM order and delay                  VM.set_order(this.Session' vm.opaque_ref' settings[vm].Order);                  VM.set_start_delay(this.Session' vm.opaque_ref' settings[vm].StartDelay);                    this.PercentComplete = (int)(++i * (60.0 / settings.Count));                  if (Cancelling)                      throw new CancelledException();              }
Magic Number,XenAdmin.Actions,SetHaPrioritiesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\SetHaPrioritiesAction.cs,Run,The following statement contains a magic number: this.PollToCompletion(60' 100);
Magic Number,XenAdmin.Actions,SetHaPrioritiesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\SetHaPrioritiesAction.cs,Run,The following statement contains a magic number: this.PollToCompletion(60' 100);
Magic Number,XenAdmin.Actions,VMSnapshotRevertAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSnapshotRevertAction.cs,Run,The following statement contains a magic number: PercentComplete = 90;
Magic Number,XenAdmin.Actions,VMSnapshotRevertAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSnapshotRevertAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenServerHealthCheck,XenServerHealthCheckUpload,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\XenServerHealthCheckUpload.cs,UploadZip,The following statement contains a magic number: while (offset < size)              {                  StringBuilder url = new StringBuilder(UPLOAD_URL + "upload_raw_chunk/?id=" + uploadUuid);                  url.Append(String.Format("&offset={0}"' offset));                  long remainingSize = size - offset;                  long thisChunkSize = (remainingSize > CHUNK_SIZE) ? CHUNK_SIZE : remainingSize;                    try                  {                      for (int i = 0; i < 3; i++)                      {                          if (cancel.IsCancellationRequested)                          {                              log.Info("Upload cancelled");                              return "";                          }                            if (UploadChunk(url.ToString()' fileName' offset' thisChunkSize' uploadToken))                          {                              // This chunk is successfully uploaded                              offset += thisChunkSize;                              break;                          }                            // Fail to upload the chunk for 3 times so fail the bundle upload.                          if (i == 2)                          {                              log.ErrorFormat("Fail to upload the chunk");                              return "";                          }                      }                  }                  catch (Exception e)                  {                      log.Error(e' e);                      return "";                  }                }
Magic Number,XenServerHealthCheck,XenServerHealthCheckUpload,C:\repos\xenserver_xenadmin\XenModel\Actions\HealthCheck\XenServerHealthCheckUpload.cs,UploadZip,The following statement contains a magic number: while (offset < size)              {                  StringBuilder url = new StringBuilder(UPLOAD_URL + "upload_raw_chunk/?id=" + uploadUuid);                  url.Append(String.Format("&offset={0}"' offset));                  long remainingSize = size - offset;                  long thisChunkSize = (remainingSize > CHUNK_SIZE) ? CHUNK_SIZE : remainingSize;                    try                  {                      for (int i = 0; i < 3; i++)                      {                          if (cancel.IsCancellationRequested)                          {                              log.Info("Upload cancelled");                              return "";                          }                            if (UploadChunk(url.ToString()' fileName' offset' thisChunkSize' uploadToken))                          {                              // This chunk is successfully uploaded                              offset += thisChunkSize;                              break;                          }                            // Fail to upload the chunk for 3 times so fail the bundle upload.                          if (i == 2)                          {                              log.ErrorFormat("Fail to upload the chunk");                              return "";                          }                      }                  }                  catch (Exception e)                  {                      log.Error(e' e);                      return "";                  }                }
Magic Number,XenAdmin.Actions.DR,GetMetadataVDIsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\GetMetadataVDIsAction.cs,Run,The following statement contains a magic number: double increment = 100.0 / srs.Count;
Magic Number,XenAdmin.Actions.DR,DrRecoverAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\DrRecoverAction.cs,Run,The following statement contains a magic number: if (MetadataSession != null)              {                  if (xenObject is VM)                      RelatedTask = VM.async_recover(MetadataSession' xenObject.opaque_ref' Session.uuid' true);                  if (xenObject is VM_appliance)                  {                      // if appliance already exists in target pool' it will be replaced during recovery and the uuid is preserved                      RelatedTask = VM_appliance.async_recover(MetadataSession' xenObject.opaque_ref' Session.uuid' true);                  }                  PollToCompletion();              }              else              {                  log.DebugFormat("Metadata session is NULL. Cannot recover {0} to Pool {1}"'                                  Helpers.GetName(xenObject).Ellipsise(50)'                                   Helpers.GetName(Pool).Ellipsise(50));              }
Magic Number,XenAdmin.Actions.DR,DrRecoverAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\DrRecoverAction.cs,Run,The following statement contains a magic number: if (MetadataSession != null)              {                  if (xenObject is VM)                      RelatedTask = VM.async_recover(MetadataSession' xenObject.opaque_ref' Session.uuid' true);                  if (xenObject is VM_appliance)                  {                      // if appliance already exists in target pool' it will be replaced during recovery and the uuid is preserved                      RelatedTask = VM_appliance.async_recover(MetadataSession' xenObject.opaque_ref' Session.uuid' true);                  }                  PollToCompletion();              }              else              {                  log.DebugFormat("Metadata session is NULL. Cannot recover {0} to Pool {1}"'                                  Helpers.GetName(xenObject).Ellipsise(50)'                                   Helpers.GetName(Pool).Ellipsise(50));              }
Magic Number,XenAdmin.Actions.DR,VdiLoadMetadataAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\VdiLoadMetadataAction.cs,Run,The following statement contains a magic number: PercentComplete = 30;
Magic Number,XenAdmin.Actions.DR,VdiLoadMetadataAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\VdiLoadMetadataAction.cs,Run,The following statement contains a magic number: if (MetadataSessionRef != null)              {                  MetadataSession = null;                  try                  {                      MetadataSession = Session.get_record(Session' MetadataSessionRef);                        #region FIND POOL                       Dictionary<XenRef<XenAPI.Pool>' XenAPI.Pool> pools = XenAPI.Pool.get_all_records(MetadataSession);                      foreach (var pool in pools.Values)                      {                          _poolMetadata.Pool = pool;                          string poolName = String.IsNullOrEmpty(pool.name_label) && pool.master != null                                                ? XenAPI.Host.get_name_label(MetadataSession' pool.master.opaque_ref)                                                : pool.name_label;                          _poolMetadata.Pool.name_label = poolName;                          log.DebugFormat("Found metadata of pool '{0}' (UUID={1})"' _poolMetadata.Pool.Name()'                                          _poolMetadata.Pool.uuid);                          break;                      }                      #endregion                        /*if (_poolMetadata.Pool.uuid == Pool.uuid) // metadata of current pool                      {                          return;                      }*/                        _poolMetadata.VmAppliances = VM_appliance.get_all_records(MetadataSession);                      foreach (var vmAppRef in _poolMetadata.VmAppliances.Keys)                      {                          _poolMetadata.VmAppliances[vmAppRef].opaque_ref = vmAppRef.opaque_ref;                      }                        PercentComplete = 50;                        Dictionary<XenRef<VM>' VM> vms = VM.get_all_records(MetadataSession);                      foreach (var vmRef in vms.Keys)                      {                          VM vm = vms[vmRef];                          if (vm.not_a_real_vm())                              continue;                          vm.opaque_ref = vmRef.opaque_ref;                          _poolMetadata.Vms.Add(vmRef' vm);                      }                  }                  catch (Exception)                  {                  }              }
Magic Number,XenAdmin.Actions.DR,VdiLoadMetadataAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\VdiLoadMetadataAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions.DR,VdiOpenDatabaseAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\VdiOpenDatabaseAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions.DR,ShutdownAndDestroyVmAppliancesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\ShutdownAndDestroyVmAppliancesAction.cs,Run,The following statement contains a magic number: if (selectedToDelete.Count > 0)                  increment = 100 / (selectedToDelete.Count * 3);
Magic Number,XenAdmin.Actions.DR,ShutdownAndDestroyVmAppliancesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\ShutdownAndDestroyVmAppliancesAction.cs,Run,The following statement contains a magic number: if (selectedToDelete.Count > 0)                  increment = 100 / (selectedToDelete.Count * 3);
Magic Number,XenAdmin.Actions.DR,ShutdownAndDestroyVmAppliancesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\ShutdownAndDestroyVmAppliancesAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions.DR,StartVMsAndAppliancesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\StartVMsAndAppliancesAction.cs,Run,The following statement contains a magic number: ActionCountTotal = 100 / (VmsToStart.Count + VmAppliancesToStart.Count);
Magic Number,XenAdmin.Actions.DR,StartVMsAndAppliancesAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\StartVMsAndAppliancesAction.cs,action_Changed,The following statement contains a magic number: PercentComplete = ((ActionCountCompleted * 100) + a.PercentComplete) / ActionCountTotal;
Magic Number,XenAdmin.Actions.DR,ShutdownAndDestroyVMsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\ShutdownAndDestroyVMsAction.cs,Run,The following statement contains a magic number: if (selectedToDelete.Count > 0)                   increment = 100 / (selectedToDelete.Count * 2);
Magic Number,XenAdmin.Actions.DR,ShutdownAndDestroyVMsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\ShutdownAndDestroyVMsAction.cs,Run,The following statement contains a magic number: if (selectedToDelete.Count > 0)                   increment = 100 / (selectedToDelete.Count * 2);
Magic Number,XenAdmin.Actions.DR,ShutdownAndDestroyVMsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\DR\ShutdownAndDestroyVMsAction.cs,Run,The following statement contains a magic number: PercentComplete = 100;
Magic Number,XenAdmin.Actions.HostActions,HostPowerOnAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostPowerOnAction.cs,Run,The following statement contains a magic number: try              {                  XenAPI.Host.power_on(Session' Host.opaque_ref);                  Description = Messages.ACTION_HOST_STARTED;                  succeeded = true;                    /* WLB: Below code doesn't work' becasue RelatedTask is not set.                    *      Need to explore other option when enabling set poweron task value for wlb reporting                  if (Helpers.IsWLBEnabled(this.Connection)                      && Host.other_config.ContainsKey(WlbOptimizePoolAction.OPTIMIZINGPOOL))                  {                      // set host poweroff task key values for wlb reporting purpose                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_advised"' Host.other_config[WlbOptimizePoolAction.OPTIMIZINGPOOL]);                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action"' "host_poweron");                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action_obj_ref"' Host.opaque_ref);                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action_obj_type"' "host");                  }                  */              }              catch (Exception e)              {                  Failure f = e as Failure;                  if (f != null)                  {                      string msg = f.ErrorDescription.Count > 2 ? Messages.ResourceManager.GetString(f.ErrorDescription[2]) : null;                      if (msg != null)                          throw new Exception(msg);                      else                      {                          throw new Exception(string.Format(Messages.POWER_ON_REQUEST_FAILED' this.Host));                      }                  }                  throw;              }              finally              {                  if (Helpers.WlbConfigured(this.Connection) && Helpers.WlbEnabledAndConfigured(this.Connection))                  {                      UpdateHostLastPowerOnSucceeded(succeeded' Host);                  }              }
Magic Number,XenAdmin.Actions.HostActions,HostPowerOnAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostPowerOnAction.cs,Run,The following statement contains a magic number: try              {                  XenAPI.Host.power_on(Session' Host.opaque_ref);                  Description = Messages.ACTION_HOST_STARTED;                  succeeded = true;                    /* WLB: Below code doesn't work' becasue RelatedTask is not set.                    *      Need to explore other option when enabling set poweron task value for wlb reporting                  if (Helpers.IsWLBEnabled(this.Connection)                      && Host.other_config.ContainsKey(WlbOptimizePoolAction.OPTIMIZINGPOOL))                  {                      // set host poweroff task key values for wlb reporting purpose                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_advised"' Host.other_config[WlbOptimizePoolAction.OPTIMIZINGPOOL]);                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action"' "host_poweron");                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action_obj_ref"' Host.opaque_ref);                      Task.add_to_other_config(this.Session' this.RelatedTask.opaque_ref' "wlb_action_obj_type"' "host");                  }                  */              }              catch (Exception e)              {                  Failure f = e as Failure;                  if (f != null)                  {                      string msg = f.ErrorDescription.Count > 2 ? Messages.ResourceManager.GetString(f.ErrorDescription[2]) : null;                      if (msg != null)                          throw new Exception(msg);                      else                      {                          throw new Exception(string.Format(Messages.POWER_ON_REQUEST_FAILED' this.Host));                      }                  }                  throw;              }              finally              {                  if (Helpers.WlbConfigured(this.Connection) && Helpers.WlbEnabledAndConfigured(this.Connection))                  {                      UpdateHostLastPowerOnSucceeded(succeeded' Host);                  }              }
Magic Number,XenAdmin.Actions.HostActions,SendLicenseDataHelper,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\LicensingHelper.cs,ThreadProc,The following statement contains a magic number: try                  {                      // build the xml                      using (MemoryStream ms = new MemoryStream())                      {                          Encoding Utf8 = new UTF8Encoding(false);                          XmlWriterSettings settings = new XmlWriterSettings();                          settings.OmitXmlDeclaration = true;                          settings.Encoding = Utf8;                          XmlWriter writer = XmlWriter.Create(ms' settings);                            writer.WriteStartDocument();                          writer.WriteStartElement(LicensingAction);                          foreach (XenAPI.Host host in Hosts.Keys)                          {                              ProduceXmlForHost(host' Hosts[host]' writer);                          }                          writer.WriteEndElement();                          writer.WriteEndDocument();                          writer.Close();                            licensingData = Utf8.GetString(ms.ToArray());                      }                        // send the xml                      ActivationProxy proxy = XmlRpcProxyGen.Create<ActivationProxy>();                      proxy.Url = string.Format(InvisibleMessages.ACTIVATION_URL' InvisibleMessages.ACTIVATION_SERVER);                      proxy.Timeout = 30 * 1000;                      proxy.UseIndentation = false;                      proxy.UserAgent = Session.UserAgent;                      proxy.KeepAlive = true;                      proxy.Proxy = Session.Proxy;                        // response is the transaction id of this call to the activation service                      string response = proxy.process_reactivation_request(licensingData);                  }                  catch (Exception)                  {                  }
Magic Number,XenAdmin.Actions.HostActions,SendLicenseDataHelper,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\LicensingHelper.cs,ThreadProc,The following statement contains a magic number: try                  {                      // build the xml                      using (MemoryStream ms = new MemoryStream())                      {                          Encoding Utf8 = new UTF8Encoding(false);                          XmlWriterSettings settings = new XmlWriterSettings();                          settings.OmitXmlDeclaration = true;                          settings.Encoding = Utf8;                          XmlWriter writer = XmlWriter.Create(ms' settings);                            writer.WriteStartDocument();                          writer.WriteStartElement(LicensingAction);                          foreach (XenAPI.Host host in Hosts.Keys)                          {                              ProduceXmlForHost(host' Hosts[host]' writer);                          }                          writer.WriteEndElement();                          writer.WriteEndDocument();                          writer.Close();                            licensingData = Utf8.GetString(ms.ToArray());                      }                        // send the xml                      ActivationProxy proxy = XmlRpcProxyGen.Create<ActivationProxy>();                      proxy.Url = string.Format(InvisibleMessages.ACTIVATION_URL' InvisibleMessages.ACTIVATION_SERVER);                      proxy.Timeout = 30 * 1000;                      proxy.UseIndentation = false;                      proxy.UserAgent = Session.UserAgent;                      proxy.KeepAlive = true;                      proxy.Proxy = Session.Proxy;                        // response is the transaction id of this call to the activation service                      string response = proxy.process_reactivation_request(licensingData);                  }                  catch (Exception)                  {                  }
Magic Number,XenAdmin.Actions.HostActions,SendLicenseDataHelper,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\LicensingHelper.cs,ProduceXmlForHost,The following statement contains a magic number: for (int i = 0; i < 100 &&                          Helper.AreEqual2(host.license_params["expiry"]' previousLicenseData.ExpiryDate) &&                          Helper.AreEqual2(host.edition' previousLicenseData.Edition); i++)                  {                      Thread.Sleep(100);                  }
Magic Number,XenAdmin.Actions.HostActions,SendLicenseDataHelper,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\LicensingHelper.cs,ProduceXmlForHost,The following statement contains a magic number: for (int i = 0; i < 100 &&                          Helper.AreEqual2(host.license_params["expiry"]' previousLicenseData.ExpiryDate) &&                          Helper.AreEqual2(host.edition' previousLicenseData.Edition); i++)                  {                      Thread.Sleep(100);                  }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: if (from2.Length != 32 || to2.Length != 32)                  return false;
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: if (from2.Length != 32 || to2.Length != 32)                  return false;
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: if (feature_mask == null)                  fm2 = "ffffffffffffffffffffffffffffffff";              else              {                  fm2 = feature_mask.Replace(" "' "");                  fm2 = fm2.Replace("-"' "");                  if (fm2.Length != 32)                      fm2 = "ffffffffffffffffffffffffffffffff";              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MaskableTo,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  string fromPart = from2.Substring(16 * i' 16);                  string toPart = to2.Substring(16 * i' 16);                  string fmPart = fm2.Substring(16 * i' 16);                    ulong fromInt = Convert.ToUInt64(fromPart' 16);                  ulong toInt = Convert.ToUInt64(toPart' 16);                  ulong fmInt = Convert.ToUInt64(fmPart' 16);                  fromInt &= fmInt;                  toInt &= fmInt;                    if (i == 1 && mask_type == "base")  // must be an exact match                  {                      if (fromInt != toInt)                          return false;                  }                  else  // "from" must be maskable to "to"                  {                      if ((fromInt & toInt) != toInt)                          return false;                  }              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,MasterPoolMaxNumberHostReached,The following statement contains a magic number: return Helpers.FeatureForbidden(connection' Host.RestrictPoolSize) && connection.Cache.HostCount > 2;
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,WillExceedPoolMaxSize,The following statement contains a magic number: return Helpers.FeatureForbidden(connection' Host.RestrictPoolSize) && connection.Cache.HostCount + poolSizeIncrement > 3;
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,FewerFeatures,The following statement contains a magic number: for (int i = 0; i < stringA.Length / 8; ++i)              {                  uint intA = Convert.ToUInt32(stringA.Substring(8 * i' 8)' 16);                  uint intB = Convert.ToUInt32(stringB.Substring(8 * i' 8)' 16);                    if ((intA & intB) != intB)                      return true;              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,FewerFeatures,The following statement contains a magic number: for (int i = 0; i < stringA.Length / 8; ++i)              {                  uint intA = Convert.ToUInt32(stringA.Substring(8 * i' 8)' 16);                  uint intB = Convert.ToUInt32(stringB.Substring(8 * i' 8)' 16);                    if ((intA & intB) != intB)                      return true;              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,FewerFeatures,The following statement contains a magic number: for (int i = 0; i < stringA.Length / 8; ++i)              {                  uint intA = Convert.ToUInt32(stringA.Substring(8 * i' 8)' 16);                  uint intB = Convert.ToUInt32(stringB.Substring(8 * i' 8)' 16);                    if ((intA & intB) != intB)                      return true;              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,FewerFeatures,The following statement contains a magic number: for (int i = 0; i < stringA.Length / 8; ++i)              {                  uint intA = Convert.ToUInt32(stringA.Substring(8 * i' 8)' 16);                  uint intB = Convert.ToUInt32(stringB.Substring(8 * i' 8)' 16);                    if ((intA & intB) != intB)                      return true;              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,FewerFeatures,The following statement contains a magic number: for (int i = 0; i < stringA.Length / 8; ++i)              {                  uint intA = Convert.ToUInt32(stringA.Substring(8 * i' 8)' 16);                  uint intB = Convert.ToUInt32(stringB.Substring(8 * i' 8)' 16);                    if ((intA & intB) != intB)                      return true;              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,FewerFeatures,The following statement contains a magic number: for (int i = 0; i < stringA.Length / 8; ++i)              {                  uint intA = Convert.ToUInt32(stringA.Substring(8 * i' 8)' 16);                  uint intB = Convert.ToUInt32(stringB.Substring(8 * i' 8)' 16);                    if ((intA & intB) != intB)                      return true;              }
Magic Number,XenAdmin.Core,PoolJoinRules,C:\repos\xenserver_xenadmin\XenModel\PoolJoinRules.cs,FewerFeatures,The following statement contains a magic number: for (int i = 0; i < stringA.Length / 8; ++i)              {                  uint intA = Convert.ToUInt32(stringA.Substring(8 * i' 8)' 16);                  uint intB = Convert.ToUInt32(stringB.Substring(8 * i' 8)' 16);                    if ((intA & intB) != intB)                      return true;              }
Magic Number,XenAdmin.Core,RbacCollectorProxy,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\RbacCollectorProxy.cs,Invoke,The following statement contains a magic number: if (proxyMethodName == "task_get_record")              {                  Proxy_Task task = new Proxy_Task() { progress = 100' status=XenAPI.task_status_type.success.ToString()'result = ""};                  return new Response<Proxy_Task>(task);              }
Magic Number,XenAdmin.Core,RbacCollectorProxy,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\RbacCollectorProxy.cs,Invoke,The following statement contains a magic number: if (proxyMethodName == "host_call_plugin" && args != null && args.Length > 2 && "trim".Equals(args[2]))                  return new Response<string>("True");
Magic Number,XenAdmin.Core,RbacCollectorProxy,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\RbacCollectorProxy.cs,Invoke,The following statement contains a magic number: if (proxyMethodName == "host_call_plugin" && args != null && args.Length > 2 && "trim".Equals(args[2]))                  return new Response<string>("True");
Magic Number,XenAdmin.Core,RbacCollectorProxy,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\RbacCollectorProxy.cs,Invoke,The following statement contains a magic number: if (pmi.MethodName == "add_to_other_config" || pmi.MethodName == "remove_from_other_config")  // these calls are special because they can have per-key permissions                  rbacMethods.Add(method' (string)args[2]);              else                  rbacMethods.Add(method);
Magic Number,XenAdmin.Core,SimpleProxyMethodParser,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\SimpleProxyMethodParser.cs,ParseTypeAndNameOnly,The following statement contains a magic number: string methodName = fakeMethodType == MethodType.Sync ? proxyMethodName.Substring(typeName.Length + 1) : proxyMethodName.Substring(7 + typeName.Length);
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: int a1 = 99' b1 = 99' c1 = 99' a2 = 99' b2 = 99' c2 = 99;
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: int a1 = 99' b1 = 99' c1 = 99' a2 = 99' b2 = 99' c2 = 99;
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: int a1 = 99' b1 = 99' c1 = 99' a2 = 99' b2 = 99' c2 = 99;
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: int a1 = 99' b1 = 99' c1 = 99' a2 = 99' b2 = 99' c2 = 99;
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: int a1 = 99' b1 = 99' c1 = 99' a2 = 99' b2 = 99' c2 = 99;
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: int a1 = 99' b1 = 99' c1 = 99' a2 = 99' b2 = 99' c2 = 99;
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: if (tokens != null && tokens.Length == 3)              {                  a1 = int.Parse(tokens[0]);                  b1 = int.Parse(tokens[1]);                  c1 = int.Parse(tokens[2]);              }              else              {                  if (!_unrecognisedVersionWarned)                  {                      log.DebugFormat("Unrecognised version format {0} - treating as developer version"' version1);                      _unrecognisedVersionWarned = true;                  }              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: if (tokens != null && tokens.Length == 3)              {                  a1 = int.Parse(tokens[0]);                  b1 = int.Parse(tokens[1]);                  c1 = int.Parse(tokens[2]);              }              else              {                  if (!_unrecognisedVersionWarned)                  {                      log.DebugFormat("Unrecognised version format {0} - treating as developer version"' version1);                      _unrecognisedVersionWarned = true;                  }              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: if (tokens != null && tokens.Length == 3)              {                  a2 = int.Parse(tokens[0]);                  b2 = int.Parse(tokens[1]);                  c2 = int.Parse(tokens[2]);              }              else              {                  if (!_unrecognisedVersionWarned)                  {                      log.DebugFormat("Unrecognised version format {0} - treating as developer version"' version2);                      _unrecognisedVersionWarned = true;                  }              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,productVersionCompare,The following statement contains a magic number: if (tokens != null && tokens.Length == 3)              {                  a2 = int.Parse(tokens[0]);                  b2 = int.Parse(tokens[1]);                  c2 = int.Parse(tokens[2]);              }              else              {                  if (!_unrecognisedVersionWarned)                  {                      log.DebugFormat("Unrecognised version format {0} - treating as developer version"' version2);                      _unrecognisedVersionWarned = true;                  }              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  string device = m.Groups[1].Value;                  XenAPI.Network network = FindNetworkOfVIF(iXenObject' device);                  return network == null                             ? null //don't try to retrieve it in the FriendlyNames.                             : FormatFriendly(string.Format("Label-performance.vif_{0}{1}"'                                 m.Groups[2].Value' m.Groups[3].Value)' network.Name());              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  string device = m.Groups[1].Value;                  XenAPI.Network network = FindNetworkOfVIF(iXenObject' device);                  return network == null                             ? null //don't try to retrieve it in the FriendlyNames.                             : FormatFriendly(string.Format("Label-performance.vif_{0}{1}"'                                 m.Groups[2].Value' m.Groups[3].Value)' network.Name());              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)                  return FormatFriendly(string.Format("Label-performance.nic_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' m.Groups[1].Value);
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)                  return FormatFriendly(string.Format("Label-performance.nic_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' m.Groups[1].Value);
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)  			{  				string device = string.Format("eth{0}"' m.Groups[1].Value);  				XenAPI.Network network = FindVlan(iXenObject' device' m.Groups[2].Value);  			    return network == null  			               ? null //don't try to retrieve it in the FriendlyNames.  			               : FormatFriendly(string.Format("Label-performance.vlan_{0}{1}"'  			                   m.Groups[3].Value' m.Groups[4].Value)' network.Name());  			}
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)  			{  				string device = string.Format("eth{0}"' m.Groups[1].Value);  				XenAPI.Network network = FindVlan(iXenObject' device' m.Groups[2].Value);  			    return network == null  			               ? null //don't try to retrieve it in the FriendlyNames.  			               : FormatFriendly(string.Format("Label-performance.vlan_{0}{1}"'  			                   m.Groups[3].Value' m.Groups[4].Value)' network.Name());  			}
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)  			{  				string device = string.Format("eth{0}"' m.Groups[1].Value);  				XenAPI.Network network = FindVlan(iXenObject' device' m.Groups[2].Value);  			    return network == null  			               ? null //don't try to retrieve it in the FriendlyNames.  			               : FormatFriendly(string.Format("Label-performance.vlan_{0}{1}"'  			                   m.Groups[3].Value' m.Groups[4].Value)' network.Name());  			}
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  string device = string.Format("eth{0}"' m.Groups[1].Value);                  XenAPI.Network network = FindNetworkOfPIF(iXenObject' device);              	return network == null              	       	? null //don't try to retrieve it in the FriendlyNames.              	       	: FormatFriendly(string.Format("Label-performance.xenbr_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' network.Name());              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  string device = string.Format("eth{0}"' m.Groups[1].Value);                  XenAPI.Network network = FindNetworkOfPIF(iXenObject' device);              	return network == null              	       	? null //don't try to retrieve it in the FriendlyNames.              	       	: FormatFriendly(string.Format("Label-performance.xenbr_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' network.Name());              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)  				return FormatFriendly(string.Format("Label-performance.xapi_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' m.Groups[1].Value);
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)  				return FormatFriendly(string.Format("Label-performance.xapi_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' m.Groups[1].Value);
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {              	PIF pif = FindPIF(iXenObject' m.Groups[1].Value' false);              	return pif == null              	       	? null //pif doesn't exist anymore so don't try to retrieve it in the FriendlyNames.              	       	: FormatFriendly(string.Format("Label-performance.bond_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' pif.Name());              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {              	PIF pif = FindPIF(iXenObject' m.Groups[1].Value' false);              	return pif == null              	       	? null //pif doesn't exist anymore so don't try to retrieve it in the FriendlyNames.              	       	: FormatFriendly(string.Format("Label-performance.bond_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' pif.Name());              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)                  return FormatFriendly(string.Format("Label-performance.lo_{0}{1}"' m.Groups[1].Value' m.Groups[2].Value));
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)                  return FormatFriendly(string.Format("Label-performance.tap_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' m.Groups[1].Value);
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)                  return FormatFriendly(string.Format("Label-performance.tap_{0}{1}"' m.Groups[2].Value' m.Groups[3].Value)' m.Groups[1].Value);
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  VBD vbd = FindVBD(iXenObject' m.Groups[1].Value);                  return vbd == null                             ? null                             : FormatFriendly(string.Format("Label-performance.vbd_{0}{1}"' m.Groups[3].Value' m.Groups[4].Value)' vbd.userdevice);              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  VBD vbd = FindVBD(iXenObject' m.Groups[1].Value);                  return vbd == null                             ? null                             : FormatFriendly(string.Format("Label-performance.vbd_{0}{1}"' m.Groups[3].Value' m.Groups[4].Value)' vbd.userdevice);              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  VBD vbd = FindVBD(iXenObject' m.Groups[1].Value);                  return vbd == null                             ? null                             : FormatFriendly(string.Format("Label-performance.vbd_iops_{0}"' m.Groups[3].Value)'                                 vbd.userdevice);              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  VBD vbd = FindVBD(iXenObject' m.Groups[1].Value);                  return vbd == null                             ? null                             : FormatFriendly(string.Format("Label-performance.vbd_io_throughput_{0}"' m.Groups[3].Value)'                                 vbd.userdevice);              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  VBD vbd = FindVBD(iXenObject' m.Groups[1].Value);                  return vbd == null                             ? null                             : FormatFriendly(string.Format("Label-performance.vbd_{0}"' m.Groups[3].Value)'                                 vbd.userdevice);              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)                  return FormatFriendly("Label-performance.cpu-state"' m.Groups[1].Value' m.Groups[2].Value' m.Groups[3].Value);
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)                  return FormatFriendly("Label-performance.cpu-state"' m.Groups[1].Value' m.Groups[2].Value' m.Groups[3].Value);
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  SR sr = FindSr(iXenObject' m.Groups[3].Value);                  return sr == null                             ? null                             : FormatFriendly(string.Format("Label-performance.sr_{0}_{1}"'                                 m.Groups[1].Value' m.Groups[2].Value)'                                 sr.Name().Ellipsise(30));              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  SR sr = FindSr(iXenObject' m.Groups[3].Value);                  return sr == null                             ? null                             : FormatFriendly(string.Format("Label-performance.sr_{0}_{1}"'                                 m.Groups[1].Value' m.Groups[2].Value)'                                 sr.Name().Ellipsise(30));              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  SR sr = FindSr(iXenObject' m.Groups[3].Value);                  return sr == null                             ? null                             : FormatFriendly(string.Format("Label-performance.sr_{0}_{1}"'                                 m.Groups[1].Value' m.Groups[2].Value)'                                 sr.Name().Ellipsise(30));              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  SR sr = FindSr(iXenObject' m.Groups[2].Value);                  return sr == null                             ? null                             : FormatFriendly(string.Format("Label-performance.sr_{0}"' m.Groups[1].Value)'                                 sr.Name().Ellipsise(30));              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  SR sr = FindSr(iXenObject' m.Groups[2].Value);                  return sr == null                             ? null                             : FormatFriendly(string.Format("Label-performance.sr_{0}"' m.Groups[1].Value)'                                 sr.Name().Ellipsise(30));              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  SR sr = FindSr(iXenObject' m.Groups[4].Value);                  return sr == null                      ? null                      : FormatFriendly(string.Format("Label-performance.sr_rw_{0}"' m.Groups[1].Value)'                          sr.Name().Ellipsise(30));              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  SR sr = FindSr(iXenObject' m.Groups[4].Value);                  return sr == null                      ? null                      : FormatFriendly(string.Format("Label-performance.sr_rw_{0}"' m.Groups[1].Value)'                          sr.Name().Ellipsise(30));              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,GetFriendlyDataSourceName_,The following statement contains a magic number: if (m.Success)              {                  string pciId = m.Groups[6].Value.Replace(@"/"' ":");                  PGPU gpu = FindGpu(iXenObject' pciId);                  return gpu == null                             ? null                             : FormatFriendly(string.Format("Label-performance.gpu_{0}"' m.Groups[1].Value)'                                              gpu.Name()' pciId);              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,PrettyFingerprint,The following statement contains a magic number: for (int i = 0; i < p.Length; i += 2)              {                  pairs.Add(p.Substring(i' 2));              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,PrettyFingerprint,The following statement contains a magic number: for (int i = 0; i < p.Length; i += 2)              {                  pairs.Add(p.Substring(i' 2));              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,StringifyList,The following statement contains a magic number: for (int i = 0; i < list.Count; ++i)              {                  ans.Append(list[i].ToString());                  if (i < list.Count - 2)                      ans.Append(Messages.STRINGIFY_LIST_INNERSEP);                  else if (i == list.Count - 2)                      ans.Append(Messages.STRINGIFY_LIST_LASTSEP);              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,StringifyList,The following statement contains a magic number: for (int i = 0; i < list.Count; ++i)              {                  ans.Append(list[i].ToString());                  if (i < list.Count - 2)                      ans.Append(Messages.STRINGIFY_LIST_INNERSEP);                  else if (i == list.Count - 2)                      ans.Append(Messages.STRINGIFY_LIST_LASTSEP);              }
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,BondSizeLimit,The following statement contains a magic number: return master != null && master.vSwitchNetworkBackend() ? 4 : 2;
Magic Number,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,BondSizeLimit,The following statement contains a magic number: return master != null && master.vSwitchNetworkBackend() ? 4 : 2;
Magic Number,XenAdmin.Core,RbacMethodList,C:\repos\xenserver_xenadmin\XenModel\RbacMethod.cs,RbacMethodList,The following statement contains a magic number: foreach (string entry in methods)              {                  if (entry == null)                      continue;                    string[] entrySplit = entry.Split(new string[] { RbacMethod.KEY_SPLITTER }' StringSplitOptions.None);                  string method = entrySplit[0].Trim();                  if (method == "")                      continue;                    switch (entrySplit.Length)                  {                      case 1:                          // no splitters' it's just a method                          Add(method);                          break;                      case 2:                          // we have a splitter so define it as a key                          string key = entrySplit[1].Trim();                          if (key == "")                              continue;                          Add(method' key);                          break;                      default:                          // ignore lengths of longer than 2' too many splitters                          continue;                  }                                }
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,Run,The following statement contains a magic number: PollToCompletion(0' 10);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,ProvisionVM,The following statement contains a magic number: PollToCompletion(10' 60);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,ProvisionVM,The following statement contains a magic number: PollToCompletion(10' 60);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddCdDrive,The following statement contains a magic number: if (!cd_drive.empty)              {                  RelatedTask = VBD.async_eject(Session' cd_drive.opaque_ref);                  PollToCompletion(65' 67);              }
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddCdDrive,The following statement contains a magic number: if (!cd_drive.empty)              {                  RelatedTask = VBD.async_eject(Session' cd_drive.opaque_ref);                  PollToCompletion(65' 67);              }
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddCdDrive,The following statement contains a magic number: if (InsMethod == InstallMethod.CD && Cd != null) // obviously dont insert the empty cd              {                  RelatedTask = VBD.async_insert(Session' cd_drive.opaque_ref' Cd.opaque_ref);                  PollToCompletion(67' 70);              }
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddCdDrive,The following statement contains a magic number: if (InsMethod == InstallMethod.CD && Cd != null) // obviously dont insert the empty cd              {                  RelatedTask = VBD.async_insert(Session' cd_drive.opaque_ref' Cd.opaque_ref);                  PollToCompletion(67' 70);              }
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,CreateCdDrive,The following statement contains a magic number: PollToCompletion(60' 65);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,CreateCdDrive,The following statement contains a magic number: PollToCompletion(60' 65);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddDisks,The following statement contains a magic number: double progress = 70;
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddDisks,The following statement contains a magic number: double step = 20.0 / (double)Disks.Count;
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,MoveDisk,The following statement contains a magic number: PollToCompletion(progress' progress + 0.25 * step);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,MoveDisk,The following statement contains a magic number: PollToCompletion(progress + 0.25 * step' progress + 0.5 * step);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,MoveDisk,The following statement contains a magic number: PollToCompletion(progress + 0.25 * step' progress + 0.5 * step);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,MoveDisk,The following statement contains a magic number: PollToCompletion(progress + 0.5 * step' progress + 0.75 * step);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,MoveDisk,The following statement contains a magic number: PollToCompletion(progress + 0.5 * step' progress + 0.75 * step);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,MoveDisk,The following statement contains a magic number: CreateVbd(disk' new_vdi' progress + 0.75 * step' progress + step' IsDeviceAtPositionZero(disk));
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,CreateDisk,The following statement contains a magic number: if(disk.Type == DiskDescription.DiskType.Existing)                  vdi = disk.Disk;              else              {                  vdi = CreateVdi(disk' progress' progress + 0.75 * step);                  bootable = IsDeviceAtPositionZero(disk) && InsMethod != InstallMethod.CD;              }
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,CreateDisk,The following statement contains a magic number: CreateVbd(disk' vdi' progress + 0.75 * step' progress + step' bootable);
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddNetworks,The following statement contains a magic number: double progress = 90;
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddNetworks,The following statement contains a magic number: double step = 5.0 / (double)existingTemplateVifs.Count;
Magic Number,XenAdmin.Actions.VMActions,CreateVMAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMAction.cs,AddNetworks,The following statement contains a magic number: step = 5.0 / (double)Vifs.Count;
Magic Number,XenAdmin.Actions.VMActions,CreateVMFastAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMFastAction.cs,Run,The following statement contains a magic number: PollToCompletion(0' 80);
Magic Number,XenAdmin.Actions.VMActions,CreateVMFastAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMFastAction.cs,Run,The following statement contains a magic number: PollToCompletion(80' 90);
Magic Number,XenAdmin.Actions.VMActions,CreateVMFastAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\CreateVMFastAction.cs,Run,The following statement contains a magic number: PollToCompletion(80' 90);
Magic Number,XenAdmin.Actions.VMActions,ResumeAndStartVMsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\ResumeAndStartVMsAction.cs,action_Changed,The following statement contains a magic number: PercentComplete = ((ActionCountCompleted * 100) + a.PercentComplete) / ActionCountTotal;
Magic Number,XenAdmin.Actions.VMActions,VMCrossPoolMigrateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMCrossPoolMigrateAction.cs,Run,The following statement contains a magic number: try              {                  PercentComplete = 0;                  Session session = Host.Connection.DuplicateSession();                  Dictionary<string' string> sendData = Host.migrate_receive(session' Host.opaque_ref'                                                                              transferNetwork.opaque_ref' new Dictionary<string' string>());                  PercentComplete = 5;                  LiveMigrateOptionsVmMapping options = new LiveMigrateOptionsVmMapping(mapping' VM);                  var _options = new Dictionary<string' string>(options.Options);                  if (copy)                      _options.Add("copy"' "true");                  RelatedTask = VM.async_migrate_send(Session' VM.opaque_ref' sendData'                                                       options.Live' options.VdiMap'                                                      options.VifMap' _options);                    PollToCompletion(PercentComplete' 100);              }              catch (CancelledException)              {                  Description = string.Format(copy ? Messages.ACTION_VM_CROSS_POOL_COPY_CANCELLED : Messages.ACTION_VM_MIGRATE_CANCELLED'                                               VM.Name());                  throw;              }              catch (Failure ex)              {                  Description = ex.Message;                  List<string> errors = ex.ErrorDescription;                  throw;              }
Magic Number,XenAdmin.Actions.VMActions,VMCrossPoolMigrateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMCrossPoolMigrateAction.cs,Run,The following statement contains a magic number: try              {                  PercentComplete = 0;                  Session session = Host.Connection.DuplicateSession();                  Dictionary<string' string> sendData = Host.migrate_receive(session' Host.opaque_ref'                                                                              transferNetwork.opaque_ref' new Dictionary<string' string>());                  PercentComplete = 5;                  LiveMigrateOptionsVmMapping options = new LiveMigrateOptionsVmMapping(mapping' VM);                  var _options = new Dictionary<string' string>(options.Options);                  if (copy)                      _options.Add("copy"' "true");                  RelatedTask = VM.async_migrate_send(Session' VM.opaque_ref' sendData'                                                       options.Live' options.VdiMap'                                                      options.VifMap' _options);                    PollToCompletion(PercentComplete' 100);              }              catch (CancelledException)              {                  Description = string.Format(copy ? Messages.ACTION_VM_CROSS_POOL_COPY_CANCELLED : Messages.ACTION_VM_MIGRATE_CANCELLED'                                               VM.Name());                  throw;              }              catch (Failure ex)              {                  Description = ex.Message;                  List<string> errors = ex.ErrorDescription;                  throw;              }
Magic Number,XenAdmin.Actions.VMActions,VMStartAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMStartAction.cs,Run,The following statement contains a magic number: StartOrResumeVmWithHa(0' 100);
Magic Number,XenAdmin.Actions.VMActions,VMStartOnAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMStartAction.cs,Run,The following statement contains a magic number: StartOrResumeVmWithHa(0' 100);
Magic Number,XenAdmin.Actions.VMActions,VMResumeAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMStartAction.cs,Run,The following statement contains a magic number: StartOrResumeVmWithHa(0' 100);
Magic Number,XenAdmin.Actions.VMActions,VMResumeOnAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMStartAction.cs,Run,The following statement contains a magic number: StartOrResumeVmWithHa(0' 100);
Magic Number,XenAdmin.Actions.VMActions,VMStartPausedAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMStartAction.cs,Run,The following statement contains a magic number: StartOrResumeVmWithHa(0' 100);
Magic Number,XenAdmin.Actions.VMActions,VMStartPausedOnAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMStartAction.cs,Run,The following statement contains a magic number: StartOrResumeVmWithHa(0' 100);
Magic Number,XenAdmin.Actions.VMActions,SuspendAndShutdownVMsAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\SuspendAndShutdownVMsAction.cs,action_Changed,The following statement contains a magic number: PercentComplete = ((ActionCountCompleted * 100) + a.PercentComplete) / ActionCountTotal;
Magic Number,XenAdmin.Actions.VMActions,VMMigrateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMMigrateAction.cs,Run,The following statement contains a magic number: try              {                  PollToCompletion();              }              catch (Failure f)              {                  if (f.ErrorDescription.Count >= 5 && f.ErrorDescription[0] == "VM_MIGRATE_FAILED"                      && f.ErrorDescription[4].Contains("VDI_MISSING"))                  {                      throw new Exception(Messages.MIGRATE_EJECT_TOOLS_ON_UPGRADE);                  }                  else                  {                      throw;                  }              }
Magic Number,XenAdmin.Actions.VMActions,VMMigrateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMMigrateAction.cs,Run,The following statement contains a magic number: try              {                  PollToCompletion();              }              catch (Failure f)              {                  if (f.ErrorDescription.Count >= 5 && f.ErrorDescription[0] == "VM_MIGRATE_FAILED"                      && f.ErrorDescription[4].Contains("VDI_MISSING"))                  {                      throw new Exception(Messages.MIGRATE_EJECT_TOOLS_ON_UPGRADE);                  }                  else                  {                      throw;                  }              }
Magic Number,XenAdmin.Actions.VMActions,VMMoveAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMMoveAction.cs,Run,The following statement contains a magic number: try              {                  var vbds = Connection.ResolveAll(VM.VBDs);                  int halfstep = (int)(90/(vbds.Count * 2));                  // move the progress bar above 0' it's more reassuring to see than a blank bar as we copy the first disk                  PercentComplete += 10;                  Exception exn = null;                    foreach (VBD oldVBD in vbds)                  {                      if (!oldVBD.GetIsOwner())                          continue;                        var curVdi = Connection.Resolve(oldVBD.VDI);                      if (curVdi == null)                          continue;                        if (StorageMapping == null || !StorageMapping.ContainsKey(oldVBD.VDI.opaque_ref))                          continue;                        SR sr = StorageMapping[oldVBD.VDI.opaque_ref];                      if (sr == null || curVdi.SR.opaque_ref == sr.opaque_ref)                          continue;                        RelatedTask = XenAPI.VDI.async_copy(Session' oldVBD.VDI.opaque_ref' sr.opaque_ref);                      PollToCompletion(PercentComplete' PercentComplete + halfstep);                      var newVDI = Connection.WaitForCache(new XenRef<VDI>(Result));                         var newVBD = new VBD                                       {                                           userdevice = oldVBD.userdevice'                                           bootable = oldVBD.bootable'                                           mode = oldVBD.mode'                                           type = oldVBD.type'                                           unpluggable = oldVBD.unpluggable'                                           other_config = oldVBD.other_config'                                           VDI = new XenRef<VDI>(newVDI.opaque_ref)'                                           VM = new XenRef<VM>(VM.opaque_ref)                                       };                      newVBD.SetIsOwner(oldVBD.GetIsOwner());                        VBD vbd = oldVBD;                      BestEffort(ref exn' () => VDI.destroy(Session' vbd.VDI.opaque_ref));                      Connection.WaitForCache<VBD>(VBD.create(Session' newVBD));                        PercentComplete += halfstep;                  }                    if (SR != null)                      VM.set_suspend_SR(Session' VM.opaque_ref' SR.opaque_ref);                    if (exn != null)                      throw exn;                }              catch (CancelledException)              {                  this.Description = string.Format(Messages.MOVE_CANCELLED' VM.Name());                  throw;              }
Magic Number,XenAdmin.Actions.VMActions,VMMoveAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMMoveAction.cs,Run,The following statement contains a magic number: try              {                  var vbds = Connection.ResolveAll(VM.VBDs);                  int halfstep = (int)(90/(vbds.Count * 2));                  // move the progress bar above 0' it's more reassuring to see than a blank bar as we copy the first disk                  PercentComplete += 10;                  Exception exn = null;                    foreach (VBD oldVBD in vbds)                  {                      if (!oldVBD.GetIsOwner())                          continue;                        var curVdi = Connection.Resolve(oldVBD.VDI);                      if (curVdi == null)                          continue;                        if (StorageMapping == null || !StorageMapping.ContainsKey(oldVBD.VDI.opaque_ref))                          continue;                        SR sr = StorageMapping[oldVBD.VDI.opaque_ref];                      if (sr == null || curVdi.SR.opaque_ref == sr.opaque_ref)                          continue;                        RelatedTask = XenAPI.VDI.async_copy(Session' oldVBD.VDI.opaque_ref' sr.opaque_ref);                      PollToCompletion(PercentComplete' PercentComplete + halfstep);                      var newVDI = Connection.WaitForCache(new XenRef<VDI>(Result));                         var newVBD = new VBD                                       {                                           userdevice = oldVBD.userdevice'                                           bootable = oldVBD.bootable'                                           mode = oldVBD.mode'                                           type = oldVBD.type'                                           unpluggable = oldVBD.unpluggable'                                           other_config = oldVBD.other_config'                                           VDI = new XenRef<VDI>(newVDI.opaque_ref)'                                           VM = new XenRef<VM>(VM.opaque_ref)                                       };                      newVBD.SetIsOwner(oldVBD.GetIsOwner());                        VBD vbd = oldVBD;                      BestEffort(ref exn' () => VDI.destroy(Session' vbd.VDI.opaque_ref));                      Connection.WaitForCache<VBD>(VBD.create(Session' newVBD));                        PercentComplete += halfstep;                  }                    if (SR != null)                      VM.set_suspend_SR(Session' VM.opaque_ref' SR.opaque_ref);                    if (exn != null)                      throw exn;                }              catch (CancelledException)              {                  this.Description = string.Format(Messages.MOVE_CANCELLED' VM.Name());                  throw;              }
Magic Number,XenAdmin.Actions.VMActions,VMMoveAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMMoveAction.cs,Run,The following statement contains a magic number: try              {                  var vbds = Connection.ResolveAll(VM.VBDs);                  int halfstep = (int)(90/(vbds.Count * 2));                  // move the progress bar above 0' it's more reassuring to see than a blank bar as we copy the first disk                  PercentComplete += 10;                  Exception exn = null;                    foreach (VBD oldVBD in vbds)                  {                      if (!oldVBD.GetIsOwner())                          continue;                        var curVdi = Connection.Resolve(oldVBD.VDI);                      if (curVdi == null)                          continue;                        if (StorageMapping == null || !StorageMapping.ContainsKey(oldVBD.VDI.opaque_ref))                          continue;                        SR sr = StorageMapping[oldVBD.VDI.opaque_ref];                      if (sr == null || curVdi.SR.opaque_ref == sr.opaque_ref)                          continue;                        RelatedTask = XenAPI.VDI.async_copy(Session' oldVBD.VDI.opaque_ref' sr.opaque_ref);                      PollToCompletion(PercentComplete' PercentComplete + halfstep);                      var newVDI = Connection.WaitForCache(new XenRef<VDI>(Result));                         var newVBD = new VBD                                       {                                           userdevice = oldVBD.userdevice'                                           bootable = oldVBD.bootable'                                           mode = oldVBD.mode'                                           type = oldVBD.type'                                           unpluggable = oldVBD.unpluggable'                                           other_config = oldVBD.other_config'                                           VDI = new XenRef<VDI>(newVDI.opaque_ref)'                                           VM = new XenRef<VM>(VM.opaque_ref)                                       };                      newVBD.SetIsOwner(oldVBD.GetIsOwner());                        VBD vbd = oldVBD;                      BestEffort(ref exn' () => VDI.destroy(Session' vbd.VDI.opaque_ref));                      Connection.WaitForCache<VBD>(VBD.create(Session' newVBD));                        PercentComplete += halfstep;                  }                    if (SR != null)                      VM.set_suspend_SR(Session' VM.opaque_ref' SR.opaque_ref);                    if (exn != null)                      throw exn;                }              catch (CancelledException)              {                  this.Description = string.Format(Messages.MOVE_CANCELLED' VM.Name());                  throw;              }
Magic Number,XenAdmin.Actions.VMActions,VMCleanShutdown,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMShutdownAction.cs,Run,The following statement contains a magic number: PollToCompletion(0' 100);
Magic Number,XenAdmin.Actions.VMActions,VMHardShutdown,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMShutdownAction.cs,Run,The following statement contains a magic number: PollToCompletion(0' 100);
Magic Number,XenAdmin.Actions.VMActions,VMSuspendAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSuspendAction.cs,Run,The following statement contains a magic number: PollToCompletion(0' 100);
Magic Number,XenAdmin.Alerts,AlertPriorityExtensions,C:\repos\xenserver_xenadmin\XenModel\Alerts\Types\Alert.cs,GetString,The following statement contains a magic number: switch (priority)              {                  case AlertPriority.Priority1:                      return 1.ToString();                  case AlertPriority.Priority2:                      return 2.ToString();                  case AlertPriority.Priority3:                      return 3.ToString();                  case AlertPriority.Priority4:                      return 4.ToString();                  case AlertPriority.Priority5:                      return 5.ToString();                  default:                      return Messages.UNKNOWN;              }
Magic Number,XenAdmin.Alerts,AlertPriorityExtensions,C:\repos\xenserver_xenadmin\XenModel\Alerts\Types\Alert.cs,GetString,The following statement contains a magic number: switch (priority)              {                  case AlertPriority.Priority1:                      return 1.ToString();                  case AlertPriority.Priority2:                      return 2.ToString();                  case AlertPriority.Priority3:                      return 3.ToString();                  case AlertPriority.Priority4:                      return 4.ToString();                  case AlertPriority.Priority5:                      return 5.ToString();                  default:                      return Messages.UNKNOWN;              }
Magic Number,XenAdmin.Alerts,AlertPriorityExtensions,C:\repos\xenserver_xenadmin\XenModel\Alerts\Types\Alert.cs,GetString,The following statement contains a magic number: switch (priority)              {                  case AlertPriority.Priority1:                      return 1.ToString();                  case AlertPriority.Priority2:                      return 2.ToString();                  case AlertPriority.Priority3:                      return 3.ToString();                  case AlertPriority.Priority4:                      return 4.ToString();                  case AlertPriority.Priority5:                      return 5.ToString();                  default:                      return Messages.UNKNOWN;              }
Magic Number,XenAdmin.Alerts,AlertPriorityExtensions,C:\repos\xenserver_xenadmin\XenModel\Alerts\Types\Alert.cs,GetString,The following statement contains a magic number: switch (priority)              {                  case AlertPriority.Priority1:                      return 1.ToString();                  case AlertPriority.Priority2:                      return 2.ToString();                  case AlertPriority.Priority3:                      return 3.ToString();                  case AlertPriority.Priority4:                      return 4.ToString();                  case AlertPriority.Priority5:                      return 5.ToString();                  default:                      return Messages.UNKNOWN;              }
Magic Number,XenAdmin.Model,HealthCheckSettings,C:\repos\xenserver_xenadmin\XenModel\HealthCheckSettings.cs,GetDefaultDay,The following statement contains a magic number: return new Random().Next(1' 7);
Magic Number,XenAdmin.Model,HealthCheckSettings,C:\repos\xenserver_xenadmin\XenModel\HealthCheckSettings.cs,GetDefaultTime,The following statement contains a magic number: return new Random().Next(1' 5);
Magic Number,XenAdmin.CustomFields,CustomField,C:\repos\xenserver_xenadmin\XenModel\CustomFields\CustomField.cs,ToArray,The following statement contains a magic number: return new object[2] { definition.Name' value };
Magic Number,XenAdmin,TimeSpanExtensions,C:\repos\xenserver_xenadmin\XenModel\TimeSpanExtensions.cs,FuzzyTime,The following statement contains a magic number: if (input.TotalDays > 60)              {                  // Show time in months                  return string.Format(Messages.TIME_MONTHS' (long)(Math.Floor(input.TotalDays / 30)));              }
Magic Number,XenAdmin,TimeSpanExtensions,C:\repos\xenserver_xenadmin\XenModel\TimeSpanExtensions.cs,FuzzyTime,The following statement contains a magic number: if (input.TotalDays > 60)              {                  // Show time in months                  return string.Format(Messages.TIME_MONTHS' (long)(Math.Floor(input.TotalDays / 30)));              }
Magic Number,XenAdmin,TimeSpanExtensions,C:\repos\xenserver_xenadmin\XenModel\TimeSpanExtensions.cs,FuzzyTime,The following statement contains a magic number: if (input.TotalDays > 2)              {                  // Show time in days                  return string.Format(Messages.TIME_DAYS' (long)input.TotalDays);              }
Magic Number,XenAdmin,TimeSpanExtensions,C:\repos\xenserver_xenadmin\XenModel\TimeSpanExtensions.cs,FuzzyTime,The following statement contains a magic number: if (input.TotalHours > 2)              {                  // Show time in hours                  return string.Format(Messages.TIME_HOURS' (long)input.TotalHours);              }
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,MemorySizeStringSuitableUnits,The following statement contains a magic number: if (bytes >= 1 * BINARY_GIGA)              {                  string format = Messages.VAL_GB_ONE_DECIMAL;                  int dp = 1;                  double valGB = bytes / BINARY_GIGA;                  if (valGB > 100)                  {                      dp = 0;                      format = Messages.VAL_GB;                  }                  if(!showPoint0Decimal)                  {                      format = Messages.VAL_GB;                  }                  return string.Format(format' Math.Round(valGB' dp' MidpointRounding.AwayFromZero));                     }              else if (bytes >= 1 * BINARY_MEGA)              {                  return string.Format(Messages.VAL_MB' Math.Round(bytes / BINARY_MEGA));              }              else if (bytes >= 1 * BINARY_KILO)              {                  return string.Format(Messages.VAL_KB' Math.Round(bytes / BINARY_KILO));              }
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,ToGB,The following statement contains a magic number: int decimalsAdjustment = (int)Math.Pow(10' dp);
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,ToUnixTime,The following statement contains a magic number: TimeSpan diff = time - new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,FromUnixTime,The following statement contains a magic number: DateTime bootTime = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,TimeString,The following statement contains a magic number: if (t >= 120)                  return string.Format(Messages.TIME_MINUTES' t / 60);
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,TimeString,The following statement contains a magic number: if (t >= 120)                  return string.Format(Messages.TIME_MINUTES' t / 60);
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,TimeRangeString,The following statement contains a magic number: return t1 > 60 && t2 > 60 ?                  string.Format(Messages.TIME_RANGE_MINUTES' t1 / 60' t2 / 60) :                  string.Format(Messages.TIME_RANGE_SECONDS' t1' t2);
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,TimeRangeString,The following statement contains a magic number: return t1 > 60 && t2 > 60 ?                  string.Format(Messages.TIME_RANGE_MINUTES' t1 / 60' t2 / 60) :                  string.Format(Messages.TIME_RANGE_SECONDS' t1' t2);
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,TimeRangeString,The following statement contains a magic number: return t1 > 60 && t2 > 60 ?                  string.Format(Messages.TIME_RANGE_MINUTES' t1 / 60' t2 / 60) :                  string.Format(Messages.TIME_RANGE_SECONDS' t1' t2);
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,TimeRangeString,The following statement contains a magic number: return t1 > 60 && t2 > 60 ?                  string.Format(Messages.TIME_RANGE_MINUTES' t1 / 60' t2 / 60) :                  string.Format(Messages.TIME_RANGE_SECONDS' t1' t2);
Magic Number,XenAdmin,Util,C:\repos\xenserver_xenadmin\XenModel\Utils\Util.cs,IsValidPort,The following statement contains a magic number: return 0 < port && port <= 65535;
Magic Number,XenAdmin.Network,Heartbeat,C:\repos\xenserver_xenadmin\XenModel\Network\Heartbeat.cs,DoHeartbeat,The following statement contains a magic number: try              {                  if (session == null)                  {                      // Try to get a new session' but only give the server one chance (otherwise we get the default 3x timeout)                      session = connection.DuplicateSession(connectionTimeout < 5000 ? 5000 : connectionTimeout);                      session.ConnectionGroupName = heartbeatConnectionGroupName; // this will force the Heartbeat session onto its own set of TCP streams (see CA-108676)                  }                    GetServerTime();                    // Now that we've successfully received a heartbeat' reset our 'second chance' for the server to timeout                  if (retrying)                      log.DebugFormat("Heartbeat for {0} has come back"' session.Url);                  retrying = false;              }              catch (TargetInvocationException exn)              {                  if (exn.InnerException is SocketException ||                      exn.InnerException is WebException)                  {                      log.Debug(exn.Message);                  }                  else                  {                      log.Error(exn);                  }                  HandleConnectionLoss();              }              catch (WebException exn)              {                  log.Error(exn);                  var webResponse = (HttpWebResponse)exn.Response;                  if (webResponse != null && webResponse.StatusCode == HttpStatusCode.ProxyAuthenticationRequired) // work-around for CA-214653                  {                      if (session == null)                          log.Debug("Heartbeat has failed due to null session; closing the main connection");                      else if (session.proxy.Proxy.Credentials == null)                          log.DebugFormat("Heartbeat for {0} has failed due to missing credentials; closing the main connection"' session.Url);                      else                          log.DebugFormat("Heartbeat for {0} has failed due to incorrect credentials; closing the main connection"' session.Url);                        connection.Interrupt();                      DropSession();                  }                  else                  {                      HandleConnectionLoss();                  }              }              catch (Exception exn)              {                  log.Error(exn);                  HandleConnectionLoss();              }
Magic Number,XenAdmin.Network,Heartbeat,C:\repos\xenserver_xenadmin\XenModel\Network\Heartbeat.cs,DoHeartbeat,The following statement contains a magic number: try              {                  if (session == null)                  {                      // Try to get a new session' but only give the server one chance (otherwise we get the default 3x timeout)                      session = connection.DuplicateSession(connectionTimeout < 5000 ? 5000 : connectionTimeout);                      session.ConnectionGroupName = heartbeatConnectionGroupName; // this will force the Heartbeat session onto its own set of TCP streams (see CA-108676)                  }                    GetServerTime();                    // Now that we've successfully received a heartbeat' reset our 'second chance' for the server to timeout                  if (retrying)                      log.DebugFormat("Heartbeat for {0} has come back"' session.Url);                  retrying = false;              }              catch (TargetInvocationException exn)              {                  if (exn.InnerException is SocketException ||                      exn.InnerException is WebException)                  {                      log.Debug(exn.Message);                  }                  else                  {                      log.Error(exn);                  }                  HandleConnectionLoss();              }              catch (WebException exn)              {                  log.Error(exn);                  var webResponse = (HttpWebResponse)exn.Response;                  if (webResponse != null && webResponse.StatusCode == HttpStatusCode.ProxyAuthenticationRequired) // work-around for CA-214653                  {                      if (session == null)                          log.Debug("Heartbeat has failed due to null session; closing the main connection");                      else if (session.proxy.Proxy.Credentials == null)                          log.DebugFormat("Heartbeat for {0} has failed due to missing credentials; closing the main connection"' session.Url);                      else                          log.DebugFormat("Heartbeat for {0} has failed due to incorrect credentials; closing the main connection"' session.Url);                        connection.Interrupt();                      DropSession();                  }                  else                  {                      HandleConnectionLoss();                  }              }              catch (Exception exn)              {                  log.Error(exn);                  HandleConnectionLoss();              }
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,XenConnection,The following statement contains a magic number: this.Port = 443;
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,GetNewSession,The following statement contains a magic number: const int DELAY = 250;
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,CompareTo,The following statement contains a magic number: int thisClass = (this.IsConnected ?                  (thisPool == null ? 2 : 1) : 3);
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,CompareTo,The following statement contains a magic number: int thisClass = (this.IsConnected ?                  (thisPool == null ? 2 : 1) : 3);
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,CompareTo,The following statement contains a magic number: int otherClass = (other.IsConnected ?                  (otherPool == null ? 2 : 1) : 3);
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,CompareTo,The following statement contains a magic number: int otherClass = (other.IsConnected ?                  (otherPool == null ? 2 : 1) : 3);
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,WaitFor,The following statement contains a magic number: try              {                  while (true)                  {                      lock (WaitForMonitor)                      {                          if (predicate() || (cancelling != null && cancelling()))                              return;                          System.Threading.Monitor.Wait(WaitForMonitor' 500);                      }                  }              }              finally              {                  lock (WaitForEventRegisteredLock)                  {                      WaitForEventRegistered--;                      if (WaitForEventRegistered == 0)                          XenObjectsUpdated -= WakeWaitFor;                  }              }
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,WaitForCache,The following statement contains a magic number: try              {                  for (int i = 0; i < 120; i++)                  {                      lock (WaitForMonitor)                      {                          T result = Resolve<T>(xenref);                          if (result != null || (cancelling != null && cancelling()))                              return result;                          System.Threading.Monitor.Wait(WaitForMonitor' 500);                      }                  }                  return null;              }              finally              {                  lock (WaitForEventRegisteredLock)                  {                      WaitForEventRegistered--;                      if (WaitForEventRegistered == 0)                          XenObjectsUpdated -= WakeWaitFor;                  }              }
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,WaitForCache,The following statement contains a magic number: try              {                  for (int i = 0; i < 120; i++)                  {                      lock (WaitForMonitor)                      {                          T result = Resolve<T>(xenref);                          if (result != null || (cancelling != null && cancelling()))                              return result;                          System.Threading.Monitor.Wait(WaitForMonitor' 500);                      }                  }                  return null;              }              finally              {                  lock (WaitForEventRegisteredLock)                  {                      WaitForEventRegistered--;                      if (WaitForEventRegistered == 0)                          XenObjectsUpdated -= WakeWaitFor;                  }              }
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,EventsPending,The following statement contains a magic number: lock (cacheUpdateTimer)              {                  if (cacheUpdaterRunning)                      updatesWaiting = true;                  else                      cacheUpdateTimer.Change(50' -1);              }
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,MarkConnectActionComplete,The following statement contains a magic number: if (ConnectAction != null && !ConnectAction.IsCompleted)              {                  string title = string.Format(Messages.CONNECTION_OK_NOTICE_TITLE' Hostname);                  string msg = string.Format(Messages.CONNECTION_OK_NOTICE_TEXT' Hostname);                  log.Info(msg);                  ConnectAction.Title = title;                  ConnectAction.Description = msg;                  SetPoolAndHostInAction(ConnectAction);                    // mark the connect action as completed                  ConnectAction.Finished = DateTime.Now;                  ConnectAction.PercentComplete = 100;                  ConnectAction.IsCompleted = true;              }
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionLost,The following statement contains a magic number: if (!EventNextBlocked && (MasterMayChange || ha_enabled) && members.Count > 1)              {                  log.DebugFormat("Will now try to connect to another pool member");                    lock (PoolMembersLock)                  {                      PoolMembers.Clear();                      PoolMembers.AddRange(members);                      PoolMemberIndex = 0;                      // Don't reconnect to the master straight away' try a slave first                      if (master != null && PoolMembers[0] == master.address && PoolMembers.Count > 1)                      {                          PoolMemberIndex = 1;                      }                  }                  FindingNewMaster = true;                  // Record the time at which we started the new master search.                  FindingNewMasterStartedAt = DateTime.Now;                  StartReconnectMasterTimer();                  description = string.Format(Messages.CONNECTION_LOST_NOTICE_MASTER_IN_X_SECONDS' LastConnectionFullName' XenConnection.SEARCH_NEW_MASTER_TIMEOUT_MS / 1000);                  log.DebugFormat("Beginning search for new master; will give up after {0} seconds"' SEARCH_NEW_MASTER_STOP_AFTER.TotalSeconds);              }              else              {                  log.DebugFormat("Will retry connection to {0} in {1} ms."' LastConnectionFullName' ReconnectHostTimeoutMs);                    StartReconnectSingleHostTimer();                    description = string.Format(Messages.CONNECTION_LOST_RECONNECT_IN_X_SECONDS' LastConnectionFullName' ReconnectHostTimeoutMs / 1000);              }
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,HandleConnectionLost,The following statement contains a magic number: if (!EventNextBlocked && (MasterMayChange || ha_enabled) && members.Count > 1)              {                  log.DebugFormat("Will now try to connect to another pool member");                    lock (PoolMembersLock)                  {                      PoolMembers.Clear();                      PoolMembers.AddRange(members);                      PoolMemberIndex = 0;                      // Don't reconnect to the master straight away' try a slave first                      if (master != null && PoolMembers[0] == master.address && PoolMembers.Count > 1)                      {                          PoolMemberIndex = 1;                      }                  }                  FindingNewMaster = true;                  // Record the time at which we started the new master search.                  FindingNewMasterStartedAt = DateTime.Now;                  StartReconnectMasterTimer();                  description = string.Format(Messages.CONNECTION_LOST_NOTICE_MASTER_IN_X_SECONDS' LastConnectionFullName' XenConnection.SEARCH_NEW_MASTER_TIMEOUT_MS / 1000);                  log.DebugFormat("Beginning search for new master; will give up after {0} seconds"' SEARCH_NEW_MASTER_STOP_AFTER.TotalSeconds);              }              else              {                  log.DebugFormat("Will retry connection to {0} in {1} ms."' LastConnectionFullName' ReconnectHostTimeoutMs);                    StartReconnectSingleHostTimer();                    description = string.Format(Messages.CONNECTION_LOST_RECONNECT_IN_X_SECONDS' LastConnectionFullName' ReconnectHostTimeoutMs / 1000);              }
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,StartReconnectMasterTimer,The following statement contains a magic number: OnConnectionMessageChanged(string.Format(Messages.CONNECTION_WILL_RETRY_SLAVE' LastConnectionFullName.Ellipsise(25) ' timeout / 1000));
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,StartReconnectMasterTimer,The following statement contains a magic number: OnConnectionMessageChanged(string.Format(Messages.CONNECTION_WILL_RETRY_SLAVE' LastConnectionFullName.Ellipsise(25) ' timeout / 1000));
Magic Number,XenAdmin.Network,XenConnection,C:\repos\xenserver_xenadmin\XenModel\Network\XenConnection.cs,ReconnectMasterTimer,The following statement contains a magic number: OnConnectionMessageChanged(string.Format(Messages.CONNECTION_RETRYING_SLAVE' LastConnectionFullName.Ellipsise(25)' Hostname));
Magic Number,XenAdmin.Network,TaskPoller,C:\repos\xenserver_xenadmin\XenModel\Network\TaskPoller.cs,PollToCompletion,The following statement contains a magic number: try              {                  DateTime startTime = DateTime.Now;                  int lastDebug = 0;                  log.DebugFormat("Polling for action {0}"' _action.Description);//log once we start                                    while (!taskCompleted)                  {                      if (AsyncAction.ForcedExiting && !_action.SafeToExit)                          throw new CancelledException();                        //then log every 30seconds                      int currDebug = (int)((DateTime.Now - startTime).TotalSeconds) / 30;                      if (currDebug > lastDebug)                      {                          lastDebug = currDebug;                          log.DebugFormat("Polling for action {0}"' _action.Description);                      }                        poll();                      Thread.Sleep(SLEEP_TIME);                  }              }              finally              {                  _action.DestroyTask();              }
Magic Number,XenAPI,HTTPHelper,C:\repos\xenserver_xenadmin\XenModel\Network\HTTPHelper.cs,Get,The following statement contains a magic number: HTTP.DataCopiedDelegate dataCopiedDelegate = delegate(long bytes)              {                  if (progressDelegate != null)                  {                      int progress = (int)(100 * (double)Task.DoWithSessionRetry(connection' ref _session'                          (Task.TaskProgressOp)Task.get_progress' task.opaque_ref));                        progressDelegate(progress);                  }                    if (dataRxDelegate != null)                      dataRxDelegate(bytes);              };
Magic Number,XenAPI,VMSS,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VMSS.cs,GetWeeklyDate,The following statement contains a magic number: if (nextDay < 0)             {                 daysOfDifference = 7 - (today - listDaysOfWeek[0]);             }             else             {                 daysOfDifference = listDaysOfWeek[nextDay] - today;                  // Today is a scheduled day: but is the time already past?                 if (daysOfDifference == 0)                 {                     var todaysScheduledTime = new DateTime(time.Year' time.Month' time.Day' hour' min' 0);                     if (time > todaysScheduledTime)                     {                         // Yes' the time is already past. Find the next day in the schedule instead.                         if (listDaysOfWeek.Count == nextDay + 1)  // we're at the last scheduled day in the week: go to next week                             daysOfDifference = 7 - (today - listDaysOfWeek[0]);                         else                             daysOfDifference = listDaysOfWeek[nextDay + 1] - today;                     }                 }             }
Magic Number,XenAPI,VMSS,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VMSS.cs,GetWeeklyDate,The following statement contains a magic number: if (nextDay < 0)             {                 daysOfDifference = 7 - (today - listDaysOfWeek[0]);             }             else             {                 daysOfDifference = listDaysOfWeek[nextDay] - today;                  // Today is a scheduled day: but is the time already past?                 if (daysOfDifference == 0)                 {                     var todaysScheduledTime = new DateTime(time.Year' time.Month' time.Day' hour' min' 0);                     if (time > todaysScheduledTime)                     {                         // Yes' the time is already past. Find the next day in the schedule instead.                         if (listDaysOfWeek.Count == nextDay + 1)  // we're at the last scheduled day in the week: go to next week                             daysOfDifference = 7 - (today - listDaysOfWeek[0]);                         else                             daysOfDifference = listDaysOfWeek[nextDay + 1] - today;                     }                 }             }
Magic Number,XenAPI,GPU_group,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\GPU_group.cs,Name,The following statement contains a magic number: if (name.StartsWith("Group of "))                  name = name.Substring(9);
Magic Number,XenAPI,Helper,C:\repos\xenserver_xenadmin\XenModel\XenAPI\ApiVersion.cs,GetAPIVersion,The following statement contains a magic number: if (version != null)              {                  string[] tokens = version.Split('.');                  int major' minor;                  if (tokens.Length == 2 && int.TryParse(tokens[0]' out major) && int.TryParse(tokens[1]' out minor))                  {                      return GetAPIVersion(major' minor);                  }              }
Magic Number,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,ParseRBACFailure,The following statement contains a magic number: failure.ErrorDescription[2] = Role.FriendlyCSVRoleList(authRoles);
Magic Number,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,ParseRBACFailure,The following statement contains a magic number: foreach (Session s in Sessions)              {                  sb.Append(string.Format(Messages.ROLE_ON_CONNECTION' s.FriendlyRoleDescription()' Helpers.GetName(s.Connection).Ellipsise(50)));                  sb.Append("' ");              }
Magic Number,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,ParseRBACFailure,The following statement contains a magic number: output = output.Substring(0' output.Length - 2);
Magic Number,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,ParseRBACFailure,The following statement contains a magic number: failure.ErrorDescription[2] = Role.FriendlyCSVRoleList(authRoles);
Magic Number,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,TryParseCslg,The following statement contains a magic number: if (ErrorDescription.Count > 2 && ErrorDescription[2] != null && ErrorDescription[0] != null && ErrorDescription[0].StartsWith("SR_BACKEND_FAILURE"))              {                  Match m = Regex.Match(ErrorDescription[2]' @"<StorageLinkServiceError>.*</StorageLinkServiceError>"' RegexOptions.Singleline);                    if (m.Success)                  {                      XmlDocument doc = new XmlDocument();                        try                      {                          doc.LoadXml(m.Value);                      }                      catch (XmlException)                      {                          return false;                      }                        XmlNodeList nodes = doc.SelectNodes("/StorageLinkServiceError/Fault");                        if (nodes != null && nodes.Count > 0 && !string.IsNullOrEmpty(nodes[0].InnerText))                      {                          if (string.IsNullOrEmpty(errorText))                          {                              errorText = nodes[0].InnerText;                          }                          else                          {                              errorText = string.Format("{0} ({1})"' errorText' nodes[0].InnerText);                          }                          return true;                      }                  }              }
Magic Number,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,TryParseCslg,The following statement contains a magic number: if (ErrorDescription.Count > 2 && ErrorDescription[2] != null && ErrorDescription[0] != null && ErrorDescription[0].StartsWith("SR_BACKEND_FAILURE"))              {                  Match m = Regex.Match(ErrorDescription[2]' @"<StorageLinkServiceError>.*</StorageLinkServiceError>"' RegexOptions.Singleline);                    if (m.Success)                  {                      XmlDocument doc = new XmlDocument();                        try                      {                          doc.LoadXml(m.Value);                      }                      catch (XmlException)                      {                          return false;                      }                        XmlNodeList nodes = doc.SelectNodes("/StorageLinkServiceError/Fault");                        if (nodes != null && nodes.Count > 0 && !string.IsNullOrEmpty(nodes[0].InnerText))                      {                          if (string.IsNullOrEmpty(errorText))                          {                              errorText = nodes[0].InnerText;                          }                          else                          {                              errorText = string.Format("{0} ({1})"' errorText' nodes[0].InnerText);                          }                          return true;                      }                  }              }
Magic Number,XenAPI,Failure,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Failure.cs,TryParseCslg,The following statement contains a magic number: if (ErrorDescription.Count > 2 && ErrorDescription[2] != null && ErrorDescription[0] != null && ErrorDescription[0].StartsWith("SR_BACKEND_FAILURE"))              {                  Match m = Regex.Match(ErrorDescription[2]' @"<StorageLinkServiceError>.*</StorageLinkServiceError>"' RegexOptions.Singleline);                    if (m.Success)                  {                      XmlDocument doc = new XmlDocument();                        try                      {                          doc.LoadXml(m.Value);                      }                      catch (XmlException)                      {                          return false;                      }                        XmlNodeList nodes = doc.SelectNodes("/StorageLinkServiceError/Fault");                        if (nodes != null && nodes.Count > 0 && !string.IsNullOrEmpty(nodes[0].InnerText))                      {                          if (string.IsNullOrEmpty(errorText))                          {                              errorText = nodes[0].InnerText;                          }                          else                          {                              errorText = string.Format("{0} ({1})"' errorText' nodes[0].InnerText);                          }                          return true;                      }                  }              }
Magic Number,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,LicenseExpiryUTC,The following statement contains a magic number: return new DateTime(2030' 1' 1);
Magic Number,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,HasRunningVMs,The following statement contains a magic number: return resident_VMs != null && resident_VMs.Count >= 2;
Magic Number,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,CheckAndPlugPBDs,The following statement contains a magic number: int timeout = 120;
Magic Number,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,CheckAndPlugPBDs,The following statement contains a magic number: do              {                  if (this.enabled)  // if the Host is not yet enabled' pbd.currently_attached may not be accurate: see CA-66496.                  {                      allPBDsReady = true;                      foreach (PBD pbd in Connection.ResolveAll(PBDs))                      {                          if (!pbd.currently_attached)                          {                              allPBDsReady = false;                              break;                          }                      }                  }                    if (!allPBDsReady)                  {                      Thread.Sleep(1000);                      timeout--;                  }              } while (!allPBDsReady && timeout > 0);
Magic Number,XenAPI,SuppPack,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,SuppPack,The following statement contains a magic number: if (splitKey.Length != 2)                      return;
Magic Number,XenAPI,SuppPack,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,SuppPack,The following statement contains a magic number: string val = value.Substring(x + 10);
Magic Number,XenAPI,SuppPack,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,SuppPack,The following statement contains a magic number: if (splitValue.Length == 0 || splitValue.Length > 3)                      return;
Magic Number,XenAPI,SuppPack,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,SuppPack,The following statement contains a magic number: if (splitValue.Length >= 2)                  {                      if (!splitValue[1].StartsWith("build "))                          return;                      build = splitValue[1].Substring(6);                  }
Magic Number,XenAPI,SuppPack,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,SuppPack,The following statement contains a magic number: if (splitValue.Length >= 2)                  {                      if (!splitValue[1].StartsWith("build "))                          return;                      build = splitValue[1].Substring(6);                  }
Magic Number,XenAPI,SuppPack,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,SuppPack,The following statement contains a magic number: if (splitValue.Length >= 3)                  {                      if (splitValue[2] != "homogeneous")                          return;                      homogeneous = true;                  }                  else                      homogeneous = false;
Magic Number,XenAPI,SuppPack,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,SuppPack,The following statement contains a magic number: if (splitValue.Length >= 3)                  {                      if (splitValue[2] != "homogeneous")                          return;                      homogeneous = true;                  }                  else                      homogeneous = false;
Magic Number,XenAPI,PBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PBD.cs,WaitForPlug,The following statement contains a magic number: int timeout = 120;
Magic Number,XenAPI,PBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PBD.cs,WaitForPlug,The following statement contains a magic number: while (timeout > 0)              {                  if (PBD.get_currently_attached(session' pbdOpaqueRef))                      return true;                  Thread.Sleep(1000);                  timeout--;              }
Magic Number,XenAPI,PBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PBD.cs,CheckAndPlugPBDsFor,The following statement contains a magic number: foreach (XenRef<VM> vmRef in vmRefs)              {                  VM vm = null;                  while ((vm = connection.Resolve<VM>(vmRef)) == null)                      Thread.Sleep(100);                    vms.Add(vm);              }
Magic Number,XenAPI,PBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PBD.cs,ParsePathCounts,The following statement contains a magic number: return match.Success && match.Groups.Count == 3 &&                  int.TryParse(match.Groups[1].Value' out currentPaths) &&                  int.TryParse(match.Groups[2].Value' out maxPaths);
Magic Number,XenAPI,PBD,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PBD.cs,ParsePathCounts,The following statement contains a magic number: return match.Success && match.Groups.Count == 3 &&                  int.TryParse(match.Groups[1].Value' out currentPaths) &&                  int.TryParse(match.Groups[2].Value' out maxPaths);
Magic Number,XenAPI,Role,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Role.cs,RoleRank,The following statement contains a magic number: switch (name_label.ToLowerInvariant())              {                  case MR_ROLE_READ_ONLY: return 0;                  case MR_ROLE_VM_OPERATOR: return 1;                  case MR_ROLE_VM_ADMIN: return 2;                  case MR_ROLE_VM_POWER_ADMIN: return 3;                  case MR_ROLE_POOL_OPERATOR: return 4;                  case MR_ROLE_POOL_ADMIN: return 5;              }
Magic Number,XenAPI,Role,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Role.cs,RoleRank,The following statement contains a magic number: switch (name_label.ToLowerInvariant())              {                  case MR_ROLE_READ_ONLY: return 0;                  case MR_ROLE_VM_OPERATOR: return 1;                  case MR_ROLE_VM_ADMIN: return 2;                  case MR_ROLE_VM_POWER_ADMIN: return 3;                  case MR_ROLE_POOL_OPERATOR: return 4;                  case MR_ROLE_POOL_ADMIN: return 5;              }
Magic Number,XenAPI,Role,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Role.cs,RoleRank,The following statement contains a magic number: switch (name_label.ToLowerInvariant())              {                  case MR_ROLE_READ_ONLY: return 0;                  case MR_ROLE_VM_OPERATOR: return 1;                  case MR_ROLE_VM_ADMIN: return 2;                  case MR_ROLE_VM_POWER_ADMIN: return 3;                  case MR_ROLE_POOL_OPERATOR: return 4;                  case MR_ROLE_POOL_ADMIN: return 5;              }
Magic Number,XenAPI,Role,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Role.cs,RoleRank,The following statement contains a magic number: switch (name_label.ToLowerInvariant())              {                  case MR_ROLE_READ_ONLY: return 0;                  case MR_ROLE_VM_OPERATOR: return 1;                  case MR_ROLE_VM_ADMIN: return 2;                  case MR_ROLE_VM_POWER_ADMIN: return 3;                  case MR_ROLE_POOL_OPERATOR: return 4;                  case MR_ROLE_POOL_ADMIN: return 5;              }
Magic Number,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,LogRequest,The following statement contains a magic number: if (methodNameStart >= 0)              {                  methodNameStart += 12;  // skip past "<methodName>"                  int methodNameEnd = xml.IndexOf('<'' methodNameStart);                  if (methodNameEnd > methodNameStart)                      methodName = xml.Substring(methodNameStart' methodNameEnd - methodNameStart);              }
Magic Number,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,UserFriendlyName,The following statement contains a magic number: if (!string.IsNullOrEmpty(CurrentUserDetails.UserDisplayName))                  return CurrentUserDetails.UserDisplayName.Ellipsise(50);
Magic Number,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,UserFriendlyName,The following statement contains a magic number: if (!string.IsNullOrEmpty(CurrentUserDetails.UserName))                  return CurrentUserDetails.UserName.Ellipsise(50);
Magic Number,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,GetUrl,The following statement contains a magic number: return string.Format("{0}://{1}:{2}"' port==8080||port == 80 ? "http" : "https"' hostname' port);
Magic Number,XenAPI,Session,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Session.cs,GetUrl,The following statement contains a magic number: return string.Format("{0}://{1}:{2}"' port==8080||port == 80 ? "http" : "https"' hostname' port);
Magic Number,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,IsFull,The following statement contains a magic number: return t != SRTypes.dummy && t != SRTypes.ebs && FreeSpace() < XenAdmin.Util.BINARY_GIGA/2;
Magic Number,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,GetScsiID,The following statement contains a magic number: if (SCSIid.StartsWith("scsi-"))                  SCSIid = SCSIid.Remove(0' 5);
Magic Number,XenAPI,SR,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\SR.cs,PercentageCommitted,The following statement contains a magic number: return (long)Math.Round(virtual_allocation/(double)physical_size*100.0);
Magic Number,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,DoWithSessionRetry,The following statement contains a magic number: int retries = 60;
Magic Number,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,DoWithSessionRetry,The following statement contains a magic number: while (true)              {                  try                  {                      object[] ps = new object[p.Length + 1];                        ps[0] = session;                        for (int i = 0; i < p.Length; i++)                      {                          ps[i + 1] = p[i];                      }                        try                      {                          return f.DynamicInvoke(ps);                      }                      catch (TargetInvocationException exn)                      {                          throw exn.InnerException;                      }                  }                  catch (WebException we)                  {                      log.ErrorFormat("WebException in DoWithSessionRetry' retry {0}"' retries);                      log.Error(we' we);                        if (retries <= 0)                          throw;                  }                  catch (Failure failure)                  {                      log.ErrorFormat("Failure in DoWithSessionRetry' retry {0}"' retries);                      log.Error(failure' failure);                        if (retries <= 0)                          throw;                        if (failure.ErrorDescription.Count < 1 || failure.ErrorDescription[0] != XenAPI.Failure.SESSION_INVALID)                          throw;                  }                    Session newSession = connection.DuplicateSession();                    try                  {                      // Try and logout the old session using the new session                      newSession.proxy.session_logout(session.uuid);                  }                  catch                  {                  }                    session = newSession;                    retries--;                    Thread.Sleep(connection.ExpectDisruption ? 500 : 100);              }
Magic Number,XenAPI,Task,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Task.cs,DoWithSessionRetry,The following statement contains a magic number: while (true)              {                  try                  {                      object[] ps = new object[p.Length + 1];                        ps[0] = session;                        for (int i = 0; i < p.Length; i++)                      {                          ps[i + 1] = p[i];                      }                        try                      {                          return f.DynamicInvoke(ps);                      }                      catch (TargetInvocationException exn)                      {                          throw exn.InnerException;                      }                  }                  catch (WebException we)                  {                      log.ErrorFormat("WebException in DoWithSessionRetry' retry {0}"' retries);                      log.Error(we' we);                        if (retries <= 0)                          throw;                  }                  catch (Failure failure)                  {                      log.ErrorFormat("Failure in DoWithSessionRetry' retry {0}"' retries);                      log.Error(failure' failure);                        if (retries <= 0)                          throw;                        if (failure.ErrorDescription.Count < 1 || failure.ErrorDescription[0] != XenAPI.Failure.SESSION_INVALID)                          throw;                  }                    Session newSession = connection.DuplicateSession();                    try                  {                      // Try and logout the old session using the new session                      newSession.proxy.session_logout(session.uuid);                  }                  catch                  {                  }                    session = newSession;                    retries--;                    Thread.Sleep(connection.ExpectDisruption ? 500 : 100);              }
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVcpuWeight,The following statement contains a magic number: if (VCPUs_params != null && VCPUs_params.ContainsKey("weight"))              {                  int weight;                  if (int.TryParse(VCPUs_params["weight"]' out weight)) // if we cant parse it we assume its because it is too large' obviously if it isnt a number (ie a string) then we will still go to the else                      return weight > 0 ? weight : 1; // because we perform a log on what is returned from this the weight must always be greater than 0                  else                      return 65536; // could not parse number' assume max              }              else                  return 256;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVcpuWeight,The following statement contains a magic number: if (VCPUs_params != null && VCPUs_params.ContainsKey("weight"))              {                  int weight;                  if (int.TryParse(VCPUs_params["weight"]' out weight)) // if we cant parse it we assume its because it is too large' obviously if it isnt a number (ie a string) then we will still go to the else                      return weight > 0 ? weight : 1; // because we perform a log on what is returned from this the weight must always be greater than 0                  else                      return 65536; // could not parse number' assume max              }              else                  return 256;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CompareTo,The following statement contains a magic number: if (is_control_domain)                  myClass = 1;              else if (is_a_snapshot)                  myClass = 3;              else if (is_a_template)                  myClass = DefaultTemplate() ? 5 : 4;              else                  myClass = 2;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CompareTo,The following statement contains a magic number: if (is_control_domain)                  myClass = 1;              else if (is_a_snapshot)                  myClass = 3;              else if (is_a_template)                  myClass = DefaultTemplate() ? 5 : 4;              else                  myClass = 2;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CompareTo,The following statement contains a magic number: if (is_control_domain)                  myClass = 1;              else if (is_a_snapshot)                  myClass = 3;              else if (is_a_template)                  myClass = DefaultTemplate() ? 5 : 4;              else                  myClass = 2;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CompareTo,The following statement contains a magic number: if (is_control_domain)                  myClass = 1;              else if (is_a_snapshot)                  myClass = 3;              else if (is_a_template)                  myClass = DefaultTemplate() ? 5 : 4;              else                  myClass = 2;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CompareTo,The following statement contains a magic number: if (other.is_control_domain)                  otherClass = 1;              else if (other.is_a_snapshot)                  otherClass = 3;              else if (other.is_a_template)                  otherClass = other.DefaultTemplate() ? 5 : 4;              else                  otherClass = 2;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CompareTo,The following statement contains a magic number: if (other.is_control_domain)                  otherClass = 1;              else if (other.is_a_snapshot)                  otherClass = 3;              else if (other.is_a_template)                  otherClass = other.DefaultTemplate() ? 5 : 4;              else                  otherClass = 2;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CompareTo,The following statement contains a magic number: if (other.is_control_domain)                  otherClass = 1;              else if (other.is_a_snapshot)                  otherClass = 3;              else if (other.is_a_template)                  otherClass = other.DefaultTemplate() ? 5 : 4;              else                  otherClass = 2;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,CompareTo,The following statement contains a magic number: if (other.is_control_domain)                  otherClass = 1;              else if (other.is_a_snapshot)                  otherClass = 3;              else if (other.is_a_template)                  otherClass = other.DefaultTemplate() ? 5 : 4;              else                  otherClass = 2;
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,SetBodgeStartupTime,The following statement contains a magic number: VirtualizationTimer = new Timer(182000) {AutoReset = false};
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVirtualisationStatusOldVM,The following statement contains a magic number: if ((DateTime.UtcNow - GetBodgeStartupTime()).TotalMinutes < 2)              {                  // check to see if the metrics object has appeared' if so cancel the timer' no need to notify the property changed as this should be picked up on vm_guest_metrics being created.                  if (vm_guest_metrics != null && vm_guest_metrics.PV_drivers_installed())                  {                      if (vm_guest_metrics.PV_drivers_up_to_date)                          return VirtualisationStatus.IO_DRIVERS_INSTALLED | VirtualisationStatus.MANAGEMENT_INSTALLED;                      else                          return VirtualisationStatus.PV_DRIVERS_OUT_OF_DATE;                  }                    return VirtualisationStatus.UNKNOWN;              }
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetVirtualisationStatusNewVM,The following statement contains a magic number: if ((DateTime.UtcNow - GetBodgeStartupTime()).TotalMinutes < 2)              {                  if (flags.HasFlag(VM.VirtualisationStatus.IO_DRIVERS_INSTALLED))                      return flags;                    return VirtualisationStatus.UNKNOWN;              }
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetOSName,The following statement contains a magic number: if (os_name.StartsWith("Microsoft®"))              {                  if (os_name != "Microsoft®")                      os_name = os_name.Substring(10).Trim();              }              else if (os_name.StartsWith("Microsoft"))              {                  if (os_name != "Microsoft")                      os_name = os_name.Substring(9).Trim();              }
Magic Number,XenAPI,VM,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\VM.cs,GetOSName,The following statement contains a magic number: if (os_name.StartsWith("Microsoft®"))              {                  if (os_name != "Microsoft®")                      os_name = os_name.Substring(10).Trim();              }              else if (os_name.StartsWith("Microsoft"))              {                  if (os_name != "Microsoft")                      os_name = os_name.Substring(9).Trim();              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,ReadHttpHeaders,The following statement contains a magic number: switch (code)              {                  case 407: // authentication error; caller must handle this case                  case 200:                      break;                    case 302:                      string url = "";                      foreach (string header in headers)                      {                          if (header.StartsWith("Location: "))                          {                              url = header.Substring(10);                              break;                          }                      }                      Uri redirect = new Uri(url.Trim());                      stream.Close();                      stream = ConnectStream(redirect' proxy' nodelay' timeout_ms);                      return true; // headers need to be sent again                    default:                      stream.Close();                      throw new BadServerResponseException(string.Format("Received error code {0} from the server"' initialLine));              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,ReadHttpHeaders,The following statement contains a magic number: switch (code)              {                  case 407: // authentication error; caller must handle this case                  case 200:                      break;                    case 302:                      string url = "";                      foreach (string header in headers)                      {                          if (header.StartsWith("Location: "))                          {                              url = header.Substring(10);                              break;                          }                      }                      Uri redirect = new Uri(url.Trim());                      stream.Close();                      stream = ConnectStream(redirect' proxy' nodelay' timeout_ms);                      return true; // headers need to be sent again                    default:                      stream.Close();                      throw new BadServerResponseException(string.Format("Received error code {0} from the server"' initialLine));              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,ReadHttpHeaders,The following statement contains a magic number: switch (code)              {                  case 407: // authentication error; caller must handle this case                  case 200:                      break;                    case 302:                      string url = "";                      foreach (string header in headers)                      {                          if (header.StartsWith("Location: "))                          {                              url = header.Substring(10);                              break;                          }                      }                      Uri redirect = new Uri(url.Trim());                      stream.Close();                      stream = ConnectStream(redirect' proxy' nodelay' timeout_ms);                      return true; // headers need to be sent again                    default:                      stream.Close();                      throw new BadServerResponseException(string.Format("Received error code {0} from the server"' initialLine));              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,ReadHttpHeaders,The following statement contains a magic number: switch (code)              {                  case 407: // authentication error; caller must handle this case                  case 200:                      break;                    case 302:                      string url = "";                      foreach (string header in headers)                      {                          if (header.StartsWith("Location: "))                          {                              url = header.Substring(10);                              break;                          }                      }                      Uri redirect = new Uri(url.Trim());                      stream.Close();                      stream = ConnectStream(redirect' proxy' nodelay' timeout_ms);                      return true; // headers need to be sent again                    default:                      stream.Close();                      throw new BadServerResponseException(string.Format("Received error code {0} from the server"' initialLine));              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,getResultCode,The following statement contains a magic number: return (bits.Length < 2 ? 0 : Int32.Parse(bits[1]));
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,CopyStream,The following statement contains a magic number: while (cancellingDelegate == null || !cancellingDelegate())              {                  int bytesRead = inStream.Read(buffer' 0' buffer.Length);                  if (bytesRead == 0)                      break;                  outStream.Write(buffer' 0' bytesRead);                  bytesWritten += bytesRead;                    if (progressDelegate != null &&                      DateTime.Now - lastUpdate > TimeSpan.FromMilliseconds(500))                  {                      progressDelegate(bytesWritten);                      lastUpdate = DateTime.Now;                  }              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,BuildUri,The following statement contains a magic number: for (int i = 0; i < flatargs.Count - 1; i += 2)              {                  string kv;                    // If the argument is null' don't include it in the URL                  if (flatargs[i + 1] == null)                      continue;                    // bools are special because some xapi calls use presence/absence and some                  // use "b=true" (not "True") and "b=false". But all accept "b=true" or absent.                  if (flatargs[i + 1] is bool)                  {                      if (!((bool)flatargs[i + 1]))                          continue;                      kv = flatargs[i] + "=true";                  }                  else                      kv = flatargs[i] + "=" + Uri.EscapeDataString(flatargs[i + 1].ToString());                    if (query.Length != 0)                      query.Append('&');                  query.Append(kv);              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,GetPartOrNull,The following statement contains a magic number: string[] parts = str.Split(new char[] { ' ' }' partIndex + 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The following statement contains a magic number: if (fields.Count > 0)              {                  // clean up (if initial server response specifies "Proxy-Connection: Close" then stream cannot be re-used)                  string field = initialResponse.Find(str => str.StartsWith("Proxy-Connection: Close"' StringComparison.CurrentCultureIgnoreCase));                  if (!string.IsNullOrEmpty(field))                  {                      stream.Close();                      Uri proxyURI = proxy.GetProxy(uri);                      stream = ConnectSocket(proxyURI' nodelay' timeout_ms);                  }                                if (proxy.Credentials == null)                      throw new BadServerResponseException(string.Format("Received error code {0} from the server"' initialResponse[0]));                  NetworkCredential credentials = proxy.Credentials.GetCredential(uri' null);                    string basicField = fields.Find(str => str.StartsWith("Proxy-Authenticate: Basic"));                  string digestField = fields.Find(str => str.StartsWith("Proxy-Authenticate: Digest"));                  if (CurrentProxyAuthenticationMethod == ProxyAuthenticationMethod.Basic)                  {                      if (string.IsNullOrEmpty(basicField))                          throw new ProxyServerAuthenticationException("Basic authentication scheme is not supported/enabled by the proxy server.");                        string authenticationFieldReply = string.Format("Proxy-Authorization: Basic {0}"'                          Convert.ToBase64String(Encoding.UTF8.GetBytes(credentials.UserName + ":" + credentials.Password)));                      WriteLine(header' stream);                      WriteLine(authenticationFieldReply' stream);                      WriteLine(stream);                  }                  else if (CurrentProxyAuthenticationMethod == ProxyAuthenticationMethod.Digest)                  {                      if (string.IsNullOrEmpty(digestField))                          throw new ProxyServerAuthenticationException("Digest authentication scheme is not supported/enabled by the proxy server.");                                            string authenticationFieldReply = string.Format(                          "Proxy-Authorization: Digest username=\"{0}\"' uri=\"{1}:{2}\""'                          credentials.UserName' uri.Host' uri.Port);                        string directiveString = digestField.Substring(27' digestField.Length - 27);                      string[] directives = directiveString.Split(new string[] { "' "' "\"" }' StringSplitOptions.RemoveEmptyEntries);                        string algorithm = null;    // optional                      string opaque = null;       // optional                      string qop = null;          // optional                      string realm = null;                      string nonce = null;                        for (int i = 0; i < directives.Length; ++i)                      {                          switch (directives[i])                          {                              case "stale=":                                  if (directives[++i].ToLower() == "true")                                      throw new ProxyServerAuthenticationException("Stale nonce in Digest authentication attempt.");                                  break;                              case "realm=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  realm = directives[i];                                  break;                              case "nonce=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  nonce = directives[i];                                  break;                              case "opaque=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  opaque = directives[i];                                  break;                              case "algorithm=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  algorithm = directives[i];                                  break;                              case "qop=":                                  List<string> qops = new List<string>(directives[++i].Split(new char[] { ''' }));                                  if (qops.Count > 0)                                  {                                      if (qops.Contains("auth"))                                          qop = "auth";                                      else if (qops.Contains("auth-int"))                                          qop = "auth-int";                                      else                                          throw new ProxyServerAuthenticationException(                                              "Digest authentication's quality-of-protection directive of is not supported.");                                      authenticationFieldReply += string.Format("' qop=\"{0}\""' qop);                                  }                                  break;                              default:                                  break;                          }                      }                        string clientNonce = "X3nC3nt3r"; // todo: generate random string                      if (qop != null)                          authenticationFieldReply += string.Format("' cnonce=\"{0}\""' clientNonce);                        string nonceCount = "00000001"; // todo: track nonces and their corresponding nonce counts                      if (qop != null)                          authenticationFieldReply += string.Format("' nc={0}"' nonceCount);                        string HA1 = "";                      string scratch = string.Format("{0}:{1}:{2}"' credentials.UserName' realm' credentials.Password);                      if (algorithm == null || algorithm == "MD5")                          HA1 = MD5Hash(scratch);                      else                          HA1 = MD5Hash(string.Format("{0}:{1}:{2}"' MD5Hash(scratch)' nonce' clientNonce));                        string HA2 = "";                      scratch = GetPartOrNull(header' 0);                      scratch = string.Format("{0}:{1}:{2}"' scratch ?? "CONNECT"' uri.Host' uri.Port);                      if (qop == null || qop == "auth")                          HA2 = MD5Hash(scratch);                      else                      {                          string entityBody = initialResponse[initialResponse.Count - 1]; // entity body should have been stored as last element of initialResponse                          string str = string.Format("{0}:{1}"' scratch' MD5Hash(entityBody));                          HA2 = MD5Hash(str);                      }                        string response = "";                      if (qop == null)                          response = MD5Hash(string.Format("{0}:{1}:{2}"' HA1' nonce' HA2));                      else                          response = MD5Hash(string.Format("{0}:{1}:{2}:{3}:{4}:{5}"' HA1' nonce' nonceCount' clientNonce' qop' HA2));                        authenticationFieldReply += string.Format("' response=\"{0}\""' response);                        WriteLine(header' stream);                      WriteLine(authenticationFieldReply' stream);                      WriteLine(stream);                  }                  else                  {                      string authType = GetPartOrNull(fields[0]' 1);                      throw new ProxyServerAuthenticationException(                          string.Format("Proxy server's {0} authentication method is not supported."' authType ?? "chosen"));                  }                    // handle authentication attempt response                  List<string> authenticatedResponse = new List<string>();                  ReadHttpHeaders(ref stream' proxy' nodelay' timeout_ms' authenticatedResponse);                  if (authenticatedResponse.Count == 0)                      throw new BadServerResponseException("No response from the proxy server after authentication attempt.");                  switch (getResultCode(authenticatedResponse[0]))                  {                      case 200:                          break;                      case 407:                          throw new ProxyServerAuthenticationException("Proxy server denied access due to wrong credentials.");                      default:                          throw new BadServerResponseException(string.Format(                              "Received error code {0} from the server"' authenticatedResponse[0]));                  }              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The following statement contains a magic number: if (fields.Count > 0)              {                  // clean up (if initial server response specifies "Proxy-Connection: Close" then stream cannot be re-used)                  string field = initialResponse.Find(str => str.StartsWith("Proxy-Connection: Close"' StringComparison.CurrentCultureIgnoreCase));                  if (!string.IsNullOrEmpty(field))                  {                      stream.Close();                      Uri proxyURI = proxy.GetProxy(uri);                      stream = ConnectSocket(proxyURI' nodelay' timeout_ms);                  }                                if (proxy.Credentials == null)                      throw new BadServerResponseException(string.Format("Received error code {0} from the server"' initialResponse[0]));                  NetworkCredential credentials = proxy.Credentials.GetCredential(uri' null);                    string basicField = fields.Find(str => str.StartsWith("Proxy-Authenticate: Basic"));                  string digestField = fields.Find(str => str.StartsWith("Proxy-Authenticate: Digest"));                  if (CurrentProxyAuthenticationMethod == ProxyAuthenticationMethod.Basic)                  {                      if (string.IsNullOrEmpty(basicField))                          throw new ProxyServerAuthenticationException("Basic authentication scheme is not supported/enabled by the proxy server.");                        string authenticationFieldReply = string.Format("Proxy-Authorization: Basic {0}"'                          Convert.ToBase64String(Encoding.UTF8.GetBytes(credentials.UserName + ":" + credentials.Password)));                      WriteLine(header' stream);                      WriteLine(authenticationFieldReply' stream);                      WriteLine(stream);                  }                  else if (CurrentProxyAuthenticationMethod == ProxyAuthenticationMethod.Digest)                  {                      if (string.IsNullOrEmpty(digestField))                          throw new ProxyServerAuthenticationException("Digest authentication scheme is not supported/enabled by the proxy server.");                                            string authenticationFieldReply = string.Format(                          "Proxy-Authorization: Digest username=\"{0}\"' uri=\"{1}:{2}\""'                          credentials.UserName' uri.Host' uri.Port);                        string directiveString = digestField.Substring(27' digestField.Length - 27);                      string[] directives = directiveString.Split(new string[] { "' "' "\"" }' StringSplitOptions.RemoveEmptyEntries);                        string algorithm = null;    // optional                      string opaque = null;       // optional                      string qop = null;          // optional                      string realm = null;                      string nonce = null;                        for (int i = 0; i < directives.Length; ++i)                      {                          switch (directives[i])                          {                              case "stale=":                                  if (directives[++i].ToLower() == "true")                                      throw new ProxyServerAuthenticationException("Stale nonce in Digest authentication attempt.");                                  break;                              case "realm=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  realm = directives[i];                                  break;                              case "nonce=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  nonce = directives[i];                                  break;                              case "opaque=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  opaque = directives[i];                                  break;                              case "algorithm=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  algorithm = directives[i];                                  break;                              case "qop=":                                  List<string> qops = new List<string>(directives[++i].Split(new char[] { ''' }));                                  if (qops.Count > 0)                                  {                                      if (qops.Contains("auth"))                                          qop = "auth";                                      else if (qops.Contains("auth-int"))                                          qop = "auth-int";                                      else                                          throw new ProxyServerAuthenticationException(                                              "Digest authentication's quality-of-protection directive of is not supported.");                                      authenticationFieldReply += string.Format("' qop=\"{0}\""' qop);                                  }                                  break;                              default:                                  break;                          }                      }                        string clientNonce = "X3nC3nt3r"; // todo: generate random string                      if (qop != null)                          authenticationFieldReply += string.Format("' cnonce=\"{0}\""' clientNonce);                        string nonceCount = "00000001"; // todo: track nonces and their corresponding nonce counts                      if (qop != null)                          authenticationFieldReply += string.Format("' nc={0}"' nonceCount);                        string HA1 = "";                      string scratch = string.Format("{0}:{1}:{2}"' credentials.UserName' realm' credentials.Password);                      if (algorithm == null || algorithm == "MD5")                          HA1 = MD5Hash(scratch);                      else                          HA1 = MD5Hash(string.Format("{0}:{1}:{2}"' MD5Hash(scratch)' nonce' clientNonce));                        string HA2 = "";                      scratch = GetPartOrNull(header' 0);                      scratch = string.Format("{0}:{1}:{2}"' scratch ?? "CONNECT"' uri.Host' uri.Port);                      if (qop == null || qop == "auth")                          HA2 = MD5Hash(scratch);                      else                      {                          string entityBody = initialResponse[initialResponse.Count - 1]; // entity body should have been stored as last element of initialResponse                          string str = string.Format("{0}:{1}"' scratch' MD5Hash(entityBody));                          HA2 = MD5Hash(str);                      }                        string response = "";                      if (qop == null)                          response = MD5Hash(string.Format("{0}:{1}:{2}"' HA1' nonce' HA2));                      else                          response = MD5Hash(string.Format("{0}:{1}:{2}:{3}:{4}:{5}"' HA1' nonce' nonceCount' clientNonce' qop' HA2));                        authenticationFieldReply += string.Format("' response=\"{0}\""' response);                        WriteLine(header' stream);                      WriteLine(authenticationFieldReply' stream);                      WriteLine(stream);                  }                  else                  {                      string authType = GetPartOrNull(fields[0]' 1);                      throw new ProxyServerAuthenticationException(                          string.Format("Proxy server's {0} authentication method is not supported."' authType ?? "chosen"));                  }                    // handle authentication attempt response                  List<string> authenticatedResponse = new List<string>();                  ReadHttpHeaders(ref stream' proxy' nodelay' timeout_ms' authenticatedResponse);                  if (authenticatedResponse.Count == 0)                      throw new BadServerResponseException("No response from the proxy server after authentication attempt.");                  switch (getResultCode(authenticatedResponse[0]))                  {                      case 200:                          break;                      case 407:                          throw new ProxyServerAuthenticationException("Proxy server denied access due to wrong credentials.");                      default:                          throw new BadServerResponseException(string.Format(                              "Received error code {0} from the server"' authenticatedResponse[0]));                  }              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The following statement contains a magic number: if (fields.Count > 0)              {                  // clean up (if initial server response specifies "Proxy-Connection: Close" then stream cannot be re-used)                  string field = initialResponse.Find(str => str.StartsWith("Proxy-Connection: Close"' StringComparison.CurrentCultureIgnoreCase));                  if (!string.IsNullOrEmpty(field))                  {                      stream.Close();                      Uri proxyURI = proxy.GetProxy(uri);                      stream = ConnectSocket(proxyURI' nodelay' timeout_ms);                  }                                if (proxy.Credentials == null)                      throw new BadServerResponseException(string.Format("Received error code {0} from the server"' initialResponse[0]));                  NetworkCredential credentials = proxy.Credentials.GetCredential(uri' null);                    string basicField = fields.Find(str => str.StartsWith("Proxy-Authenticate: Basic"));                  string digestField = fields.Find(str => str.StartsWith("Proxy-Authenticate: Digest"));                  if (CurrentProxyAuthenticationMethod == ProxyAuthenticationMethod.Basic)                  {                      if (string.IsNullOrEmpty(basicField))                          throw new ProxyServerAuthenticationException("Basic authentication scheme is not supported/enabled by the proxy server.");                        string authenticationFieldReply = string.Format("Proxy-Authorization: Basic {0}"'                          Convert.ToBase64String(Encoding.UTF8.GetBytes(credentials.UserName + ":" + credentials.Password)));                      WriteLine(header' stream);                      WriteLine(authenticationFieldReply' stream);                      WriteLine(stream);                  }                  else if (CurrentProxyAuthenticationMethod == ProxyAuthenticationMethod.Digest)                  {                      if (string.IsNullOrEmpty(digestField))                          throw new ProxyServerAuthenticationException("Digest authentication scheme is not supported/enabled by the proxy server.");                                            string authenticationFieldReply = string.Format(                          "Proxy-Authorization: Digest username=\"{0}\"' uri=\"{1}:{2}\""'                          credentials.UserName' uri.Host' uri.Port);                        string directiveString = digestField.Substring(27' digestField.Length - 27);                      string[] directives = directiveString.Split(new string[] { "' "' "\"" }' StringSplitOptions.RemoveEmptyEntries);                        string algorithm = null;    // optional                      string opaque = null;       // optional                      string qop = null;          // optional                      string realm = null;                      string nonce = null;                        for (int i = 0; i < directives.Length; ++i)                      {                          switch (directives[i])                          {                              case "stale=":                                  if (directives[++i].ToLower() == "true")                                      throw new ProxyServerAuthenticationException("Stale nonce in Digest authentication attempt.");                                  break;                              case "realm=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  realm = directives[i];                                  break;                              case "nonce=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  nonce = directives[i];                                  break;                              case "opaque=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  opaque = directives[i];                                  break;                              case "algorithm=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  algorithm = directives[i];                                  break;                              case "qop=":                                  List<string> qops = new List<string>(directives[++i].Split(new char[] { ''' }));                                  if (qops.Count > 0)                                  {                                      if (qops.Contains("auth"))                                          qop = "auth";                                      else if (qops.Contains("auth-int"))                                          qop = "auth-int";                                      else                                          throw new ProxyServerAuthenticationException(                                              "Digest authentication's quality-of-protection directive of is not supported.");                                      authenticationFieldReply += string.Format("' qop=\"{0}\""' qop);                                  }                                  break;                              default:                                  break;                          }                      }                        string clientNonce = "X3nC3nt3r"; // todo: generate random string                      if (qop != null)                          authenticationFieldReply += string.Format("' cnonce=\"{0}\""' clientNonce);                        string nonceCount = "00000001"; // todo: track nonces and their corresponding nonce counts                      if (qop != null)                          authenticationFieldReply += string.Format("' nc={0}"' nonceCount);                        string HA1 = "";                      string scratch = string.Format("{0}:{1}:{2}"' credentials.UserName' realm' credentials.Password);                      if (algorithm == null || algorithm == "MD5")                          HA1 = MD5Hash(scratch);                      else                          HA1 = MD5Hash(string.Format("{0}:{1}:{2}"' MD5Hash(scratch)' nonce' clientNonce));                        string HA2 = "";                      scratch = GetPartOrNull(header' 0);                      scratch = string.Format("{0}:{1}:{2}"' scratch ?? "CONNECT"' uri.Host' uri.Port);                      if (qop == null || qop == "auth")                          HA2 = MD5Hash(scratch);                      else                      {                          string entityBody = initialResponse[initialResponse.Count - 1]; // entity body should have been stored as last element of initialResponse                          string str = string.Format("{0}:{1}"' scratch' MD5Hash(entityBody));                          HA2 = MD5Hash(str);                      }                        string response = "";                      if (qop == null)                          response = MD5Hash(string.Format("{0}:{1}:{2}"' HA1' nonce' HA2));                      else                          response = MD5Hash(string.Format("{0}:{1}:{2}:{3}:{4}:{5}"' HA1' nonce' nonceCount' clientNonce' qop' HA2));                        authenticationFieldReply += string.Format("' response=\"{0}\""' response);                        WriteLine(header' stream);                      WriteLine(authenticationFieldReply' stream);                      WriteLine(stream);                  }                  else                  {                      string authType = GetPartOrNull(fields[0]' 1);                      throw new ProxyServerAuthenticationException(                          string.Format("Proxy server's {0} authentication method is not supported."' authType ?? "chosen"));                  }                    // handle authentication attempt response                  List<string> authenticatedResponse = new List<string>();                  ReadHttpHeaders(ref stream' proxy' nodelay' timeout_ms' authenticatedResponse);                  if (authenticatedResponse.Count == 0)                      throw new BadServerResponseException("No response from the proxy server after authentication attempt.");                  switch (getResultCode(authenticatedResponse[0]))                  {                      case 200:                          break;                      case 407:                          throw new ProxyServerAuthenticationException("Proxy server denied access due to wrong credentials.");                      default:                          throw new BadServerResponseException(string.Format(                              "Received error code {0} from the server"' authenticatedResponse[0]));                  }              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,AuthenticateProxy,The following statement contains a magic number: if (fields.Count > 0)              {                  // clean up (if initial server response specifies "Proxy-Connection: Close" then stream cannot be re-used)                  string field = initialResponse.Find(str => str.StartsWith("Proxy-Connection: Close"' StringComparison.CurrentCultureIgnoreCase));                  if (!string.IsNullOrEmpty(field))                  {                      stream.Close();                      Uri proxyURI = proxy.GetProxy(uri);                      stream = ConnectSocket(proxyURI' nodelay' timeout_ms);                  }                                if (proxy.Credentials == null)                      throw new BadServerResponseException(string.Format("Received error code {0} from the server"' initialResponse[0]));                  NetworkCredential credentials = proxy.Credentials.GetCredential(uri' null);                    string basicField = fields.Find(str => str.StartsWith("Proxy-Authenticate: Basic"));                  string digestField = fields.Find(str => str.StartsWith("Proxy-Authenticate: Digest"));                  if (CurrentProxyAuthenticationMethod == ProxyAuthenticationMethod.Basic)                  {                      if (string.IsNullOrEmpty(basicField))                          throw new ProxyServerAuthenticationException("Basic authentication scheme is not supported/enabled by the proxy server.");                        string authenticationFieldReply = string.Format("Proxy-Authorization: Basic {0}"'                          Convert.ToBase64String(Encoding.UTF8.GetBytes(credentials.UserName + ":" + credentials.Password)));                      WriteLine(header' stream);                      WriteLine(authenticationFieldReply' stream);                      WriteLine(stream);                  }                  else if (CurrentProxyAuthenticationMethod == ProxyAuthenticationMethod.Digest)                  {                      if (string.IsNullOrEmpty(digestField))                          throw new ProxyServerAuthenticationException("Digest authentication scheme is not supported/enabled by the proxy server.");                                            string authenticationFieldReply = string.Format(                          "Proxy-Authorization: Digest username=\"{0}\"' uri=\"{1}:{2}\""'                          credentials.UserName' uri.Host' uri.Port);                        string directiveString = digestField.Substring(27' digestField.Length - 27);                      string[] directives = directiveString.Split(new string[] { "' "' "\"" }' StringSplitOptions.RemoveEmptyEntries);                        string algorithm = null;    // optional                      string opaque = null;       // optional                      string qop = null;          // optional                      string realm = null;                      string nonce = null;                        for (int i = 0; i < directives.Length; ++i)                      {                          switch (directives[i])                          {                              case "stale=":                                  if (directives[++i].ToLower() == "true")                                      throw new ProxyServerAuthenticationException("Stale nonce in Digest authentication attempt.");                                  break;                              case "realm=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  realm = directives[i];                                  break;                              case "nonce=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  nonce = directives[i];                                  break;                              case "opaque=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  opaque = directives[i];                                  break;                              case "algorithm=":                                  authenticationFieldReply += string.Format("' {0}\"{1}\""' directives[i]' directives[++i]);                                  algorithm = directives[i];                                  break;                              case "qop=":                                  List<string> qops = new List<string>(directives[++i].Split(new char[] { ''' }));                                  if (qops.Count > 0)                                  {                                      if (qops.Contains("auth"))                                          qop = "auth";                                      else if (qops.Contains("auth-int"))                                          qop = "auth-int";                                      else                                          throw new ProxyServerAuthenticationException(                                              "Digest authentication's quality-of-protection directive of is not supported.");                                      authenticationFieldReply += string.Format("' qop=\"{0}\""' qop);                                  }                                  break;                              default:                                  break;                          }                      }                        string clientNonce = "X3nC3nt3r"; // todo: generate random string                      if (qop != null)                          authenticationFieldReply += string.Format("' cnonce=\"{0}\""' clientNonce);                        string nonceCount = "00000001"; // todo: track nonces and their corresponding nonce counts                      if (qop != null)                          authenticationFieldReply += string.Format("' nc={0}"' nonceCount);                        string HA1 = "";                      string scratch = string.Format("{0}:{1}:{2}"' credentials.UserName' realm' credentials.Password);                      if (algorithm == null || algorithm == "MD5")                          HA1 = MD5Hash(scratch);                      else                          HA1 = MD5Hash(string.Format("{0}:{1}:{2}"' MD5Hash(scratch)' nonce' clientNonce));                        string HA2 = "";                      scratch = GetPartOrNull(header' 0);                      scratch = string.Format("{0}:{1}:{2}"' scratch ?? "CONNECT"' uri.Host' uri.Port);                      if (qop == null || qop == "auth")                          HA2 = MD5Hash(scratch);                      else                      {                          string entityBody = initialResponse[initialResponse.Count - 1]; // entity body should have been stored as last element of initialResponse                          string str = string.Format("{0}:{1}"' scratch' MD5Hash(entityBody));                          HA2 = MD5Hash(str);                      }                        string response = "";                      if (qop == null)                          response = MD5Hash(string.Format("{0}:{1}:{2}"' HA1' nonce' HA2));                      else                          response = MD5Hash(string.Format("{0}:{1}:{2}:{3}:{4}:{5}"' HA1' nonce' nonceCount' clientNonce' qop' HA2));                        authenticationFieldReply += string.Format("' response=\"{0}\""' response);                        WriteLine(header' stream);                      WriteLine(authenticationFieldReply' stream);                      WriteLine(stream);                  }                  else                  {                      string authType = GetPartOrNull(fields[0]' 1);                      throw new ProxyServerAuthenticationException(                          string.Format("Proxy server's {0} authentication method is not supported."' authType ?? "chosen"));                  }                    // handle authentication attempt response                  List<string> authenticatedResponse = new List<string>();                  ReadHttpHeaders(ref stream' proxy' nodelay' timeout_ms' authenticatedResponse);                  if (authenticatedResponse.Count == 0)                      throw new BadServerResponseException("No response from the proxy server after authentication attempt.");                  switch (getResultCode(authenticatedResponse[0]))                  {                      case 200:                          break;                      case 407:                          throw new ProxyServerAuthenticationException("Proxy server denied access due to wrong credentials.");                      default:                          throw new BadServerResponseException(string.Format(                              "Received error code {0} from the server"' authenticatedResponse[0]));                  }              }
Magic Number,XenAPI,HTTP,C:\repos\xenserver_xenadmin\XenModel\XenAPI\HTTP.cs,Put,The following statement contains a magic number: using (Stream fileStream = new FileStream(path' FileMode.Open' FileAccess.Read)'                  requestStream = PUT(uri' proxy' fileStream.Length' timeout_ms))              {                  long len = fileStream.Length;                  DataCopiedDelegate dataCopiedDelegate = delegate(long bytes)                      {                          if (progressDelegate != null && len > 0)                              progressDelegate((int)((bytes * 100) / len));                      };                    CopyStream(fileStream' requestStream' dataCopiedDelegate' cancellingDelegate);              }
Magic Number,XenAdmin.ServerDBs,Db,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\Db.cs,UpdateRelations,The following statement contains a magic number: foreach (PropInfo propInfo in GetAllPropsWithOpaqueRefValue())              {                  foreach (KeyValuePair<Type' Relation[]> relationsPair in AllRelations)                  {                      foreach (Relation relation in relationsPair.Value)                      {                          if (relation.manyField.ToLower() == propInfo.Prop.Name.ToLower() && propInfo.Table.Name.ToLower() == relation.manyType.ToLower())                          {                              // string of the Proxy_ from the front.                              string relTypeName = relationsPair.Key.Name.Substring(6);                                if (Tables[relTypeName].Rows.ContainsKey(propInfo.PropValue))                              {                                  List<string> list = new List<string>((string[])Tables[relTypeName].Rows[propInfo.PropValue].Props[relation.field].XapiObjectValue);                                  list.Add(propInfo.RowKey);                                  Tables[relTypeName].Rows[propInfo.PropValue].Props[relation.field].XapiObjectValue = list.ToArray();                              }                          }                      }                  }              }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: if (pmi.MethodName.StartsWith("set_"))              {                  string fieldname = pmi.MethodName.Substring(4);                    // Special case: set_memory_limits is not just editing a "memory_limits" field                  if (fieldname == "memory_limits")                  {                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_min"' args[2]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_max"' args[3]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_min"' args[4]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_max"' args[5]);                  }                  else                  {                      EditObject(pmi.TypeName' (string)args[1]' fieldname' args[2]);                  }                    return new Response<string>("");              }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: if (pmi.MethodName.StartsWith("set_"))              {                  string fieldname = pmi.MethodName.Substring(4);                    // Special case: set_memory_limits is not just editing a "memory_limits" field                  if (fieldname == "memory_limits")                  {                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_min"' args[2]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_max"' args[3]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_min"' args[4]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_max"' args[5]);                  }                  else                  {                      EditObject(pmi.TypeName' (string)args[1]' fieldname' args[2]);                  }                    return new Response<string>("");              }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: if (pmi.MethodName.StartsWith("set_"))              {                  string fieldname = pmi.MethodName.Substring(4);                    // Special case: set_memory_limits is not just editing a "memory_limits" field                  if (fieldname == "memory_limits")                  {                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_min"' args[2]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_max"' args[3]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_min"' args[4]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_max"' args[5]);                  }                  else                  {                      EditObject(pmi.TypeName' (string)args[1]' fieldname' args[2]);                  }                    return new Response<string>("");              }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: if (pmi.MethodName.StartsWith("set_"))              {                  string fieldname = pmi.MethodName.Substring(4);                    // Special case: set_memory_limits is not just editing a "memory_limits" field                  if (fieldname == "memory_limits")                  {                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_min"' args[2]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_max"' args[3]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_min"' args[4]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_max"' args[5]);                  }                  else                  {                      EditObject(pmi.TypeName' (string)args[1]' fieldname' args[2]);                  }                    return new Response<string>("");              }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: if (pmi.MethodName.StartsWith("set_"))              {                  string fieldname = pmi.MethodName.Substring(4);                    // Special case: set_memory_limits is not just editing a "memory_limits" field                  if (fieldname == "memory_limits")                  {                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_min"' args[2]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_max"' args[3]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_min"' args[4]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_max"' args[5]);                  }                  else                  {                      EditObject(pmi.TypeName' (string)args[1]' fieldname' args[2]);                  }                    return new Response<string>("");              }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: if (pmi.MethodName.StartsWith("set_"))              {                  string fieldname = pmi.MethodName.Substring(4);                    // Special case: set_memory_limits is not just editing a "memory_limits" field                  if (fieldname == "memory_limits")                  {                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_min"' args[2]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_static_max"' args[3]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_min"' args[4]);                      EditObject(pmi.TypeName' (string)args[1]' "memory_dynamic_max"' args[5]);                  }                  else                  {                      EditObject(pmi.TypeName' (string)args[1]' fieldname' args[2]);                  }                    return new Response<string>("");              }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: switch (pmi.MethodName)              {                  case "Url":                      return url;// "http://XenCenter.Simulator/";                    case "get_record":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))  // tasks are kept track of separately                          {                              return new Response<Proxy_Task>(task_get_record(uuid));                          }                          return get_record(pmi.TypeName' uuid' true);                      }                    case "destroy":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))                          {                              task_destroy(uuid);                              return new Response<string>("");                          }                          break;                      }                    case "add_to_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              AddToDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]' args[3]);                          }                          return new Response<string>("");                      }                    case "remove_from_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              RemoveFromDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]);                          }                          return new Response<string>("");                      }                    case "add_to_gui_config":                      AddToDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]' args[3]);                      return new Response<string>("");                    case "remove_from_gui_config":                      RemoveFromDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]);                      return new Response<string>("");                    case "add_tags":                      AddToArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "remove_tags":                      RemoveFromArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "get_subject_information_from_identifier":                      Hashtable subjectInfo = new Hashtable();                      if ((string)args[1] == "SID1")                      {                          subjectInfo["subject-name"] = @"citrix\tu_one";                          subjectInfo["subject-displayname"] = "Test User 1";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID2")                      {                          subjectInfo["subject-name"] = @"citrix\tu_two";                          subjectInfo["subject-displayname"] = "Test User 2";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID3")                      {                          subjectInfo["subject-name"] = @"citrix\tg";                          subjectInfo["subject-displayname"] = "Test Group";                          subjectInfo["subject-is-group"] = "true";                      }                      return new Response<Object>(subjectInfo);                    // For VBDEditPage.CalculateDevicePositions()                  case "get_allowed_vbd_devices":                      return new Response<String[]>(new String[] { "0"' "1"' "2"' "3"' "4"' "5"' "6"' "7" });                    case "retrieve_wlb_recommendations":                  case "retrieve_wlb_evacuate_recommendations":                  case "retrieve_wlb_configuration":                      Hashtable tbl = new Hashtable();                      return new Response<object>(tbl);                    case "get_uncooperative_resident_vms":                      return new Response<string[]>(new string[0]);                    // For HAWizard_Pages.AssignPriorities                  case "ha_compute_hypothetical_max_host_failures_to_tolerate":                      return new Response<string>("1");                    case "get_ha_host_failures_to_tolerate":                      return new Response<string>("1");                    // For EvacuateHostDialog and RollingUpgradeWizard                  case "get_vms_which_prevent_evacuation":                      return new Response<object>(new Hashtable());                    // For RollingUpgradeWizard                  case "get_live":                      return new Response<bool>(true);                    case "get_allowed_operations":                      return new Response<string[]>(new string[0]);                    case "get_health_check_config":                      string uuid1 = (string)args[1];                      return new Response<object>(get_health_check_config(pmi.TypeName' uuid1' true));                }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: switch (pmi.MethodName)              {                  case "Url":                      return url;// "http://XenCenter.Simulator/";                    case "get_record":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))  // tasks are kept track of separately                          {                              return new Response<Proxy_Task>(task_get_record(uuid));                          }                          return get_record(pmi.TypeName' uuid' true);                      }                    case "destroy":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))                          {                              task_destroy(uuid);                              return new Response<string>("");                          }                          break;                      }                    case "add_to_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              AddToDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]' args[3]);                          }                          return new Response<string>("");                      }                    case "remove_from_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              RemoveFromDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]);                          }                          return new Response<string>("");                      }                    case "add_to_gui_config":                      AddToDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]' args[3]);                      return new Response<string>("");                    case "remove_from_gui_config":                      RemoveFromDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]);                      return new Response<string>("");                    case "add_tags":                      AddToArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "remove_tags":                      RemoveFromArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "get_subject_information_from_identifier":                      Hashtable subjectInfo = new Hashtable();                      if ((string)args[1] == "SID1")                      {                          subjectInfo["subject-name"] = @"citrix\tu_one";                          subjectInfo["subject-displayname"] = "Test User 1";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID2")                      {                          subjectInfo["subject-name"] = @"citrix\tu_two";                          subjectInfo["subject-displayname"] = "Test User 2";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID3")                      {                          subjectInfo["subject-name"] = @"citrix\tg";                          subjectInfo["subject-displayname"] = "Test Group";                          subjectInfo["subject-is-group"] = "true";                      }                      return new Response<Object>(subjectInfo);                    // For VBDEditPage.CalculateDevicePositions()                  case "get_allowed_vbd_devices":                      return new Response<String[]>(new String[] { "0"' "1"' "2"' "3"' "4"' "5"' "6"' "7" });                    case "retrieve_wlb_recommendations":                  case "retrieve_wlb_evacuate_recommendations":                  case "retrieve_wlb_configuration":                      Hashtable tbl = new Hashtable();                      return new Response<object>(tbl);                    case "get_uncooperative_resident_vms":                      return new Response<string[]>(new string[0]);                    // For HAWizard_Pages.AssignPriorities                  case "ha_compute_hypothetical_max_host_failures_to_tolerate":                      return new Response<string>("1");                    case "get_ha_host_failures_to_tolerate":                      return new Response<string>("1");                    // For EvacuateHostDialog and RollingUpgradeWizard                  case "get_vms_which_prevent_evacuation":                      return new Response<object>(new Hashtable());                    // For RollingUpgradeWizard                  case "get_live":                      return new Response<bool>(true);                    case "get_allowed_operations":                      return new Response<string[]>(new string[0]);                    case "get_health_check_config":                      string uuid1 = (string)args[1];                      return new Response<object>(get_health_check_config(pmi.TypeName' uuid1' true));                }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: switch (pmi.MethodName)              {                  case "Url":                      return url;// "http://XenCenter.Simulator/";                    case "get_record":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))  // tasks are kept track of separately                          {                              return new Response<Proxy_Task>(task_get_record(uuid));                          }                          return get_record(pmi.TypeName' uuid' true);                      }                    case "destroy":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))                          {                              task_destroy(uuid);                              return new Response<string>("");                          }                          break;                      }                    case "add_to_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              AddToDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]' args[3]);                          }                          return new Response<string>("");                      }                    case "remove_from_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              RemoveFromDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]);                          }                          return new Response<string>("");                      }                    case "add_to_gui_config":                      AddToDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]' args[3]);                      return new Response<string>("");                    case "remove_from_gui_config":                      RemoveFromDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]);                      return new Response<string>("");                    case "add_tags":                      AddToArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "remove_tags":                      RemoveFromArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "get_subject_information_from_identifier":                      Hashtable subjectInfo = new Hashtable();                      if ((string)args[1] == "SID1")                      {                          subjectInfo["subject-name"] = @"citrix\tu_one";                          subjectInfo["subject-displayname"] = "Test User 1";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID2")                      {                          subjectInfo["subject-name"] = @"citrix\tu_two";                          subjectInfo["subject-displayname"] = "Test User 2";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID3")                      {                          subjectInfo["subject-name"] = @"citrix\tg";                          subjectInfo["subject-displayname"] = "Test Group";                          subjectInfo["subject-is-group"] = "true";                      }                      return new Response<Object>(subjectInfo);                    // For VBDEditPage.CalculateDevicePositions()                  case "get_allowed_vbd_devices":                      return new Response<String[]>(new String[] { "0"' "1"' "2"' "3"' "4"' "5"' "6"' "7" });                    case "retrieve_wlb_recommendations":                  case "retrieve_wlb_evacuate_recommendations":                  case "retrieve_wlb_configuration":                      Hashtable tbl = new Hashtable();                      return new Response<object>(tbl);                    case "get_uncooperative_resident_vms":                      return new Response<string[]>(new string[0]);                    // For HAWizard_Pages.AssignPriorities                  case "ha_compute_hypothetical_max_host_failures_to_tolerate":                      return new Response<string>("1");                    case "get_ha_host_failures_to_tolerate":                      return new Response<string>("1");                    // For EvacuateHostDialog and RollingUpgradeWizard                  case "get_vms_which_prevent_evacuation":                      return new Response<object>(new Hashtable());                    // For RollingUpgradeWizard                  case "get_live":                      return new Response<bool>(true);                    case "get_allowed_operations":                      return new Response<string[]>(new string[0]);                    case "get_health_check_config":                      string uuid1 = (string)args[1];                      return new Response<object>(get_health_check_config(pmi.TypeName' uuid1' true));                }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: switch (pmi.MethodName)              {                  case "Url":                      return url;// "http://XenCenter.Simulator/";                    case "get_record":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))  // tasks are kept track of separately                          {                              return new Response<Proxy_Task>(task_get_record(uuid));                          }                          return get_record(pmi.TypeName' uuid' true);                      }                    case "destroy":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))                          {                              task_destroy(uuid);                              return new Response<string>("");                          }                          break;                      }                    case "add_to_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              AddToDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]' args[3]);                          }                          return new Response<string>("");                      }                    case "remove_from_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              RemoveFromDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]);                          }                          return new Response<string>("");                      }                    case "add_to_gui_config":                      AddToDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]' args[3]);                      return new Response<string>("");                    case "remove_from_gui_config":                      RemoveFromDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]);                      return new Response<string>("");                    case "add_tags":                      AddToArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "remove_tags":                      RemoveFromArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "get_subject_information_from_identifier":                      Hashtable subjectInfo = new Hashtable();                      if ((string)args[1] == "SID1")                      {                          subjectInfo["subject-name"] = @"citrix\tu_one";                          subjectInfo["subject-displayname"] = "Test User 1";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID2")                      {                          subjectInfo["subject-name"] = @"citrix\tu_two";                          subjectInfo["subject-displayname"] = "Test User 2";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID3")                      {                          subjectInfo["subject-name"] = @"citrix\tg";                          subjectInfo["subject-displayname"] = "Test Group";                          subjectInfo["subject-is-group"] = "true";                      }                      return new Response<Object>(subjectInfo);                    // For VBDEditPage.CalculateDevicePositions()                  case "get_allowed_vbd_devices":                      return new Response<String[]>(new String[] { "0"' "1"' "2"' "3"' "4"' "5"' "6"' "7" });                    case "retrieve_wlb_recommendations":                  case "retrieve_wlb_evacuate_recommendations":                  case "retrieve_wlb_configuration":                      Hashtable tbl = new Hashtable();                      return new Response<object>(tbl);                    case "get_uncooperative_resident_vms":                      return new Response<string[]>(new string[0]);                    // For HAWizard_Pages.AssignPriorities                  case "ha_compute_hypothetical_max_host_failures_to_tolerate":                      return new Response<string>("1");                    case "get_ha_host_failures_to_tolerate":                      return new Response<string>("1");                    // For EvacuateHostDialog and RollingUpgradeWizard                  case "get_vms_which_prevent_evacuation":                      return new Response<object>(new Hashtable());                    // For RollingUpgradeWizard                  case "get_live":                      return new Response<bool>(true);                    case "get_allowed_operations":                      return new Response<string[]>(new string[0]);                    case "get_health_check_config":                      string uuid1 = (string)args[1];                      return new Response<object>(get_health_check_config(pmi.TypeName' uuid1' true));                }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: switch (pmi.MethodName)              {                  case "Url":                      return url;// "http://XenCenter.Simulator/";                    case "get_record":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))  // tasks are kept track of separately                          {                              return new Response<Proxy_Task>(task_get_record(uuid));                          }                          return get_record(pmi.TypeName' uuid' true);                      }                    case "destroy":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))                          {                              task_destroy(uuid);                              return new Response<string>("");                          }                          break;                      }                    case "add_to_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              AddToDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]' args[3]);                          }                          return new Response<string>("");                      }                    case "remove_from_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              RemoveFromDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]);                          }                          return new Response<string>("");                      }                    case "add_to_gui_config":                      AddToDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]' args[3]);                      return new Response<string>("");                    case "remove_from_gui_config":                      RemoveFromDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]);                      return new Response<string>("");                    case "add_tags":                      AddToArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "remove_tags":                      RemoveFromArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "get_subject_information_from_identifier":                      Hashtable subjectInfo = new Hashtable();                      if ((string)args[1] == "SID1")                      {                          subjectInfo["subject-name"] = @"citrix\tu_one";                          subjectInfo["subject-displayname"] = "Test User 1";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID2")                      {                          subjectInfo["subject-name"] = @"citrix\tu_two";                          subjectInfo["subject-displayname"] = "Test User 2";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID3")                      {                          subjectInfo["subject-name"] = @"citrix\tg";                          subjectInfo["subject-displayname"] = "Test Group";                          subjectInfo["subject-is-group"] = "true";                      }                      return new Response<Object>(subjectInfo);                    // For VBDEditPage.CalculateDevicePositions()                  case "get_allowed_vbd_devices":                      return new Response<String[]>(new String[] { "0"' "1"' "2"' "3"' "4"' "5"' "6"' "7" });                    case "retrieve_wlb_recommendations":                  case "retrieve_wlb_evacuate_recommendations":                  case "retrieve_wlb_configuration":                      Hashtable tbl = new Hashtable();                      return new Response<object>(tbl);                    case "get_uncooperative_resident_vms":                      return new Response<string[]>(new string[0]);                    // For HAWizard_Pages.AssignPriorities                  case "ha_compute_hypothetical_max_host_failures_to_tolerate":                      return new Response<string>("1");                    case "get_ha_host_failures_to_tolerate":                      return new Response<string>("1");                    // For EvacuateHostDialog and RollingUpgradeWizard                  case "get_vms_which_prevent_evacuation":                      return new Response<object>(new Hashtable());                    // For RollingUpgradeWizard                  case "get_live":                      return new Response<bool>(true);                    case "get_allowed_operations":                      return new Response<string[]>(new string[0]);                    case "get_health_check_config":                      string uuid1 = (string)args[1];                      return new Response<object>(get_health_check_config(pmi.TypeName' uuid1' true));                }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: switch (pmi.MethodName)              {                  case "Url":                      return url;// "http://XenCenter.Simulator/";                    case "get_record":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))  // tasks are kept track of separately                          {                              return new Response<Proxy_Task>(task_get_record(uuid));                          }                          return get_record(pmi.TypeName' uuid' true);                      }                    case "destroy":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))                          {                              task_destroy(uuid);                              return new Response<string>("");                          }                          break;                      }                    case "add_to_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              AddToDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]' args[3]);                          }                          return new Response<string>("");                      }                    case "remove_from_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              RemoveFromDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]);                          }                          return new Response<string>("");                      }                    case "add_to_gui_config":                      AddToDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]' args[3]);                      return new Response<string>("");                    case "remove_from_gui_config":                      RemoveFromDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]);                      return new Response<string>("");                    case "add_tags":                      AddToArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "remove_tags":                      RemoveFromArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "get_subject_information_from_identifier":                      Hashtable subjectInfo = new Hashtable();                      if ((string)args[1] == "SID1")                      {                          subjectInfo["subject-name"] = @"citrix\tu_one";                          subjectInfo["subject-displayname"] = "Test User 1";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID2")                      {                          subjectInfo["subject-name"] = @"citrix\tu_two";                          subjectInfo["subject-displayname"] = "Test User 2";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID3")                      {                          subjectInfo["subject-name"] = @"citrix\tg";                          subjectInfo["subject-displayname"] = "Test Group";                          subjectInfo["subject-is-group"] = "true";                      }                      return new Response<Object>(subjectInfo);                    // For VBDEditPage.CalculateDevicePositions()                  case "get_allowed_vbd_devices":                      return new Response<String[]>(new String[] { "0"' "1"' "2"' "3"' "4"' "5"' "6"' "7" });                    case "retrieve_wlb_recommendations":                  case "retrieve_wlb_evacuate_recommendations":                  case "retrieve_wlb_configuration":                      Hashtable tbl = new Hashtable();                      return new Response<object>(tbl);                    case "get_uncooperative_resident_vms":                      return new Response<string[]>(new string[0]);                    // For HAWizard_Pages.AssignPriorities                  case "ha_compute_hypothetical_max_host_failures_to_tolerate":                      return new Response<string>("1");                    case "get_ha_host_failures_to_tolerate":                      return new Response<string>("1");                    // For EvacuateHostDialog and RollingUpgradeWizard                  case "get_vms_which_prevent_evacuation":                      return new Response<object>(new Hashtable());                    // For RollingUpgradeWizard                  case "get_live":                      return new Response<bool>(true);                    case "get_allowed_operations":                      return new Response<string[]>(new string[0]);                    case "get_health_check_config":                      string uuid1 = (string)args[1];                      return new Response<object>(get_health_check_config(pmi.TypeName' uuid1' true));                }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: switch (pmi.MethodName)              {                  case "Url":                      return url;// "http://XenCenter.Simulator/";                    case "get_record":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))  // tasks are kept track of separately                          {                              return new Response<Proxy_Task>(task_get_record(uuid));                          }                          return get_record(pmi.TypeName' uuid' true);                      }                    case "destroy":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))                          {                              task_destroy(uuid);                              return new Response<string>("");                          }                          break;                      }                    case "add_to_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              AddToDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]' args[3]);                          }                          return new Response<string>("");                      }                    case "remove_from_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              RemoveFromDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]);                          }                          return new Response<string>("");                      }                    case "add_to_gui_config":                      AddToDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]' args[3]);                      return new Response<string>("");                    case "remove_from_gui_config":                      RemoveFromDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]);                      return new Response<string>("");                    case "add_tags":                      AddToArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "remove_tags":                      RemoveFromArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "get_subject_information_from_identifier":                      Hashtable subjectInfo = new Hashtable();                      if ((string)args[1] == "SID1")                      {                          subjectInfo["subject-name"] = @"citrix\tu_one";                          subjectInfo["subject-displayname"] = "Test User 1";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID2")                      {                          subjectInfo["subject-name"] = @"citrix\tu_two";                          subjectInfo["subject-displayname"] = "Test User 2";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID3")                      {                          subjectInfo["subject-name"] = @"citrix\tg";                          subjectInfo["subject-displayname"] = "Test Group";                          subjectInfo["subject-is-group"] = "true";                      }                      return new Response<Object>(subjectInfo);                    // For VBDEditPage.CalculateDevicePositions()                  case "get_allowed_vbd_devices":                      return new Response<String[]>(new String[] { "0"' "1"' "2"' "3"' "4"' "5"' "6"' "7" });                    case "retrieve_wlb_recommendations":                  case "retrieve_wlb_evacuate_recommendations":                  case "retrieve_wlb_configuration":                      Hashtable tbl = new Hashtable();                      return new Response<object>(tbl);                    case "get_uncooperative_resident_vms":                      return new Response<string[]>(new string[0]);                    // For HAWizard_Pages.AssignPriorities                  case "ha_compute_hypothetical_max_host_failures_to_tolerate":                      return new Response<string>("1");                    case "get_ha_host_failures_to_tolerate":                      return new Response<string>("1");                    // For EvacuateHostDialog and RollingUpgradeWizard                  case "get_vms_which_prevent_evacuation":                      return new Response<object>(new Hashtable());                    // For RollingUpgradeWizard                  case "get_live":                      return new Response<bool>(true);                    case "get_allowed_operations":                      return new Response<string[]>(new string[0]);                    case "get_health_check_config":                      string uuid1 = (string)args[1];                      return new Response<object>(get_health_check_config(pmi.TypeName' uuid1' true));                }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following statement contains a magic number: switch (pmi.MethodName)              {                  case "Url":                      return url;// "http://XenCenter.Simulator/";                    case "get_record":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))  // tasks are kept track of separately                          {                              return new Response<Proxy_Task>(task_get_record(uuid));                          }                          return get_record(pmi.TypeName' uuid' true);                      }                    case "destroy":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))                          {                              task_destroy(uuid);                              return new Response<string>("");                          }                          break;                      }                    case "add_to_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              AddToDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]' args[3]);                          }                          return new Response<string>("");                      }                    case "remove_from_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              RemoveFromDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]);                          }                          return new Response<string>("");                      }                    case "add_to_gui_config":                      AddToDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]' args[3]);                      return new Response<string>("");                    case "remove_from_gui_config":                      RemoveFromDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]);                      return new Response<string>("");                    case "add_tags":                      AddToArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "remove_tags":                      RemoveFromArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "get_subject_information_from_identifier":                      Hashtable subjectInfo = new Hashtable();                      if ((string)args[1] == "SID1")                      {                          subjectInfo["subject-name"] = @"citrix\tu_one";                          subjectInfo["subject-displayname"] = "Test User 1";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID2")                      {                          subjectInfo["subject-name"] = @"citrix\tu_two";                          subjectInfo["subject-displayname"] = "Test User 2";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID3")                      {                          subjectInfo["subject-name"] = @"citrix\tg";                          subjectInfo["subject-displayname"] = "Test Group";                          subjectInfo["subject-is-group"] = "true";                      }                      return new Response<Object>(subjectInfo);                    // For VBDEditPage.CalculateDevicePositions()                  case "get_allowed_vbd_devices":                      return new Response<String[]>(new String[] { "0"' "1"' "2"' "3"' "4"' "5"' "6"' "7" });                    case "retrieve_wlb_recommendations":                  case "retrieve_wlb_evacuate_recommendations":                  case "retrieve_wlb_configuration":                      Hashtable tbl = new Hashtable();                      return new Response<object>(tbl);                    case "get_uncooperative_resident_vms":                      return new Response<string[]>(new string[0]);                    // For HAWizard_Pages.AssignPriorities                  case "ha_compute_hypothetical_max_host_failures_to_tolerate":                      return new Response<string>("1");                    case "get_ha_host_failures_to_tolerate":                      return new Response<string>("1");                    // For EvacuateHostDialog and RollingUpgradeWizard                  case "get_vms_which_prevent_evacuation":                      return new Response<object>(new Hashtable());                    // For RollingUpgradeWizard                  case "get_live":                      return new Response<bool>(true);                    case "get_allowed_operations":                      return new Response<string[]>(new string[0]);                    case "get_health_check_config":                      string uuid1 = (string)args[1];                      return new Response<object>(get_health_check_config(pmi.TypeName' uuid1' true));                }
Magic Number,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,CreateTask,The following statement contains a magic number: if (status != TaskStatus.pending)              {                  task.finished = DateTime.Now;                  task.progress = 100.0;                    if (status == TaskStatus.success)                  {                      task.result = result[0];                  }                  else                  {                      task.error_info = result;                  }              }
Magic Number,XenAdmin.ServerDBs,HighLoadEventGenerator,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\HighLoadEventGenerator.cs,GetHighLoadEvents,The following statement contains a magic number: if (HighLoadMode && DateTime.Now - lastHighLoadEvent > TimeSpan.FromSeconds(2))              {                  lastHighLoadEvent = DateTime.Now;                    foreach (string typeName in typeNames)                  {                      Response<object> resp;                      if (TryGetAllRecords(typeName' out resp))                      {                          foreach (string opaqueRef in ((Hashtable)resp.Value).Keys)                          {                              output.Add(DbProxy.MakeProxyEvent(typeName' opaqueRef' eventOperation' TypeCache.GetProxyType(typeName)' _proxy.get_record(typeName' opaqueRef' false)));                          }                      }                  }              }
Magic Number,XenAdmin.ServerDBs,ProxyMethodNameParser,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\ProxyMethodNameParser.cs,Parse,The following statement contains a magic number: if (typeName != null)              {                  MethodType fakeMethodType = proxyMethodName.StartsWith(String.Format("{0}_"' typeName)) ? MethodType.Sync : MethodType.Async;                  string methodName = fakeMethodType == MethodType.Sync ? proxyMethodName.Substring(typeName.Length + 1) : proxyMethodName.Substring(7 + typeName.Length);                    Type fakeType = Type.GetType(String.Format("XenAdmin.ServerDBs.FakeAPI.fake{0}"' typeName)' false' true) ?? typeof(fakeUnknown);                  MethodInfo fakeMethod = fakeType.GetMethod(methodName);                    if (fakeType != null && fakeMethod != null)                  {                      return new ProxyMethodInfo(methodName' typeName' fakeType' fakeMethod' fakeMethodType);                  }                    return new ProxyMethodInfo(methodName' typeName);              }
Magic Number,XenAdmin.ServerDBs,SimulatorWebStream,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\SimulatorWebStream.cs,ParseHttpHeader,The following statement contains a magic number: if (cmds.Length < 2)                  return;
Magic Number,XenAdmin.ServerDBs,SimulatorWebStream,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\SimulatorWebStream.cs,ParseHttpHeader,The following statement contains a magic number: switch (param[0])              {                  case "/pool_patch_upload":                      CycleResponse = true;                      HttpResponse = "HTTP 200 simulator\n \n";                      PoolPatchUpload(query);                      break;                    case "/rrd_updates":                      string host_ref = HostRef();                      string uuid = (string)simProxy.proxy.db.GetValue("host"' host_ref' "uuid");                      HttpResponse = string.Format(@"HTTP 200 simulator     <xport>    <meta>      <start>0</start>      <step>5</step>      <end>0</end>      <rows>1</rows>      <columns>1</columns>      <legend>        <entry>AVERAGE:host:{0}:cpu0</entry>      </legend>    </meta>    <data>      <row>        <t>{1}</t>        <v>{2}</v>      </row>    </data>  </xport>"' uuid' (long)(new TimeSpan(DateTime.Now.Ticks - new DateTime(1970' 1' 1).Ticks).TotalSeconds)' CpuStatsForHost(host_ref));                      break;                    case "/console":                      StringBuilder response = GetConsoleResponse();                      if (response != null)                      {                          CycleResponse = true;                          Start = response.Length;                          response.Append(WriteFlag(false));                          HttpResponse = response.ToString();                      }                      else                      {                          HttpResponse = " \n";                      }                      break;                    case "/host_backup":                      HttpResponse = "HTTP 200 simulator\n \n" + header;                      break;                  default:                      //Support for export                      if (param[0].StartsWith("/%3Fsession_id="))                      {                          HttpResponse = GetVMExportResponse();                      }                      else                          HttpResponse = " \n";                      break;              }
Magic Number,XenAdmin.ServerDBs,SimulatorWebStream,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\SimulatorWebStream.cs,CpuStatsForHost,The following statement contains a magic number: switch (host_ref)              {                  // hack for ExpectedResults search test                  case "OpaqueRef:d3a48ddc-8261-33df-64b2-1309e98b395d":                      return rand.Next(0' 49)/100d;                    case "OpaqueRef:83b5a7dc-4eae-ba93-f9ca-53ef5a664814":                      return rand.Next(50' 100)/100d;                    default:                      return rand.Next(0' 100)/100d;                }
Magic Number,XenAdmin.ServerDBs,SimulatorWebStream,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\SimulatorWebStream.cs,CpuStatsForHost,The following statement contains a magic number: switch (host_ref)              {                  // hack for ExpectedResults search test                  case "OpaqueRef:d3a48ddc-8261-33df-64b2-1309e98b395d":                      return rand.Next(0' 49)/100d;                    case "OpaqueRef:83b5a7dc-4eae-ba93-f9ca-53ef5a664814":                      return rand.Next(50' 100)/100d;                    default:                      return rand.Next(0' 100)/100d;                }
Magic Number,XenAdmin.ServerDBs,SimulatorWebStream,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\SimulatorWebStream.cs,CpuStatsForHost,The following statement contains a magic number: switch (host_ref)              {                  // hack for ExpectedResults search test                  case "OpaqueRef:d3a48ddc-8261-33df-64b2-1309e98b395d":                      return rand.Next(0' 49)/100d;                    case "OpaqueRef:83b5a7dc-4eae-ba93-f9ca-53ef5a664814":                      return rand.Next(50' 100)/100d;                    default:                      return rand.Next(0' 100)/100d;                }
Magic Number,XenAdmin.ServerDBs,SimulatorWebStream,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\SimulatorWebStream.cs,CpuStatsForHost,The following statement contains a magic number: switch (host_ref)              {                  // hack for ExpectedResults search test                  case "OpaqueRef:d3a48ddc-8261-33df-64b2-1309e98b395d":                      return rand.Next(0' 49)/100d;                    case "OpaqueRef:83b5a7dc-4eae-ba93-f9ca-53ef5a664814":                      return rand.Next(50' 100)/100d;                    default:                      return rand.Next(0' 100)/100d;                }
Magic Number,XenAdmin.ServerDBs,StatusReportXmlDocReader,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\StatusReportXmlDocReader.cs,PopulateDbFromXml,The following statement contains a magic number: foreach (XmlNode child in dataBaseNode.ChildNodes)              {                  if (child.Name == "table")                  {                      string tableName = child.Attributes["name"].Value.ToLower();                      Db.Table table = db.Tables.Add(tableName);                        foreach (XmlNode node in child.ChildNodes)                      {                          Db.Row row = table.Rows.Add(node.Attributes["ref"].Value);                            foreach (XmlAttribute a in node.Attributes)                          {                              string name = ParsePropertyName(a.Name' tableName);                              if(string.IsNullOrEmpty(name))                                  continue;                                row.Props.Add(name' a.Value);                          }                      }                        if (tableName == "host_metrics" && child.ChildNodes.Count == 0)  // host_metrics table used to be empty: see CA-31223                      {                          foreach (XmlNode host in hostNodes)                          {                              string opaque_ref = host.Attributes["metrics"].Value;                              if (table.Rows.ContainsKey(opaque_ref))                              {                                  // This doesn't happen with real databases' but for some of the hand-edited ones' we've got duplicate                                  // metrics opaquerefs.                                  continue;                              }                                Db.Row row = table.Rows.Add(opaque_ref);                              row.Props.Add("live"' "true");                              row.Props.Add("memory_total"' (2L * 1024 * 1024 * 1024).ToString());                              row.Props.Add("memory_free"' (1L * 1024 * 1024 * 1024).ToString());                          }                      }                  }              }
Magic Number,XenAdmin.ServerDBs,StatusReportXmlDocReader,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\StatusReportXmlDocReader.cs,PopulateDbFromXml,The following statement contains a magic number: foreach (XmlNode child in dataBaseNode.ChildNodes)              {                  if (child.Name == "table")                  {                      string tableName = child.Attributes["name"].Value.ToLower();                      Db.Table table = db.Tables.Add(tableName);                        foreach (XmlNode node in child.ChildNodes)                      {                          Db.Row row = table.Rows.Add(node.Attributes["ref"].Value);                            foreach (XmlAttribute a in node.Attributes)                          {                              string name = ParsePropertyName(a.Name' tableName);                              if(string.IsNullOrEmpty(name))                                  continue;                                row.Props.Add(name' a.Value);                          }                      }                        if (tableName == "host_metrics" && child.ChildNodes.Count == 0)  // host_metrics table used to be empty: see CA-31223                      {                          foreach (XmlNode host in hostNodes)                          {                              string opaque_ref = host.Attributes["metrics"].Value;                              if (table.Rows.ContainsKey(opaque_ref))                              {                                  // This doesn't happen with real databases' but for some of the hand-edited ones' we've got duplicate                                  // metrics opaquerefs.                                  continue;                              }                                Db.Row row = table.Rows.Add(opaque_ref);                              row.Props.Add("live"' "true");                              row.Props.Add("memory_total"' (2L * 1024 * 1024 * 1024).ToString());                              row.Props.Add("memory_free"' (1L * 1024 * 1024 * 1024).ToString());                          }                      }                  }              }
Magic Number,XenAdmin.ServerDBs,StatusReportXmlDocReader,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\StatusReportXmlDocReader.cs,PopulateDbFromXml,The following statement contains a magic number: foreach (XmlNode child in dataBaseNode.ChildNodes)              {                  if (child.Name == "table")                  {                      string tableName = child.Attributes["name"].Value.ToLower();                      Db.Table table = db.Tables.Add(tableName);                        foreach (XmlNode node in child.ChildNodes)                      {                          Db.Row row = table.Rows.Add(node.Attributes["ref"].Value);                            foreach (XmlAttribute a in node.Attributes)                          {                              string name = ParsePropertyName(a.Name' tableName);                              if(string.IsNullOrEmpty(name))                                  continue;                                row.Props.Add(name' a.Value);                          }                      }                        if (tableName == "host_metrics" && child.ChildNodes.Count == 0)  // host_metrics table used to be empty: see CA-31223                      {                          foreach (XmlNode host in hostNodes)                          {                              string opaque_ref = host.Attributes["metrics"].Value;                              if (table.Rows.ContainsKey(opaque_ref))                              {                                  // This doesn't happen with real databases' but for some of the hand-edited ones' we've got duplicate                                  // metrics opaquerefs.                                  continue;                              }                                Db.Row row = table.Rows.Add(opaque_ref);                              row.Props.Add("live"' "true");                              row.Props.Add("memory_total"' (2L * 1024 * 1024 * 1024).ToString());                              row.Props.Add("memory_free"' (1L * 1024 * 1024 * 1024).ToString());                          }                      }                  }              }
Magic Number,XenAdmin.ServerDBs,StatusReportXmlDocReader,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\StatusReportXmlDocReader.cs,PopulateDbFromXml,The following statement contains a magic number: foreach (XmlNode child in dataBaseNode.ChildNodes)              {                  if (child.Name == "table")                  {                      string tableName = child.Attributes["name"].Value.ToLower();                      Db.Table table = db.Tables.Add(tableName);                        foreach (XmlNode node in child.ChildNodes)                      {                          Db.Row row = table.Rows.Add(node.Attributes["ref"].Value);                            foreach (XmlAttribute a in node.Attributes)                          {                              string name = ParsePropertyName(a.Name' tableName);                              if(string.IsNullOrEmpty(name))                                  continue;                                row.Props.Add(name' a.Value);                          }                      }                        if (tableName == "host_metrics" && child.ChildNodes.Count == 0)  // host_metrics table used to be empty: see CA-31223                      {                          foreach (XmlNode host in hostNodes)                          {                              string opaque_ref = host.Attributes["metrics"].Value;                              if (table.Rows.ContainsKey(opaque_ref))                              {                                  // This doesn't happen with real databases' but for some of the hand-edited ones' we've got duplicate                                  // metrics opaquerefs.                                  continue;                              }                                Db.Row row = table.Rows.Add(opaque_ref);                              row.Props.Add("live"' "true");                              row.Props.Add("memory_total"' (2L * 1024 * 1024 * 1024).ToString());                              row.Props.Add("memory_free"' (1L * 1024 * 1024 * 1024).ToString());                          }                      }                  }              }
Magic Number,XenAdmin.ServerDBs,StatusReportXmlDocReader,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\StatusReportXmlDocReader.cs,PopulateDbFromXml,The following statement contains a magic number: foreach (XmlNode child in dataBaseNode.ChildNodes)              {                  if (child.Name == "table")                  {                      string tableName = child.Attributes["name"].Value.ToLower();                      Db.Table table = db.Tables.Add(tableName);                        foreach (XmlNode node in child.ChildNodes)                      {                          Db.Row row = table.Rows.Add(node.Attributes["ref"].Value);                            foreach (XmlAttribute a in node.Attributes)                          {                              string name = ParsePropertyName(a.Name' tableName);                              if(string.IsNullOrEmpty(name))                                  continue;                                row.Props.Add(name' a.Value);                          }                      }                        if (tableName == "host_metrics" && child.ChildNodes.Count == 0)  // host_metrics table used to be empty: see CA-31223                      {                          foreach (XmlNode host in hostNodes)                          {                              string opaque_ref = host.Attributes["metrics"].Value;                              if (table.Rows.ContainsKey(opaque_ref))                              {                                  // This doesn't happen with real databases' but for some of the hand-edited ones' we've got duplicate                                  // metrics opaquerefs.                                  continue;                              }                                Db.Row row = table.Rows.Add(opaque_ref);                              row.Props.Add("live"' "true");                              row.Props.Add("memory_total"' (2L * 1024 * 1024 * 1024).ToString());                              row.Props.Add("memory_free"' (1L * 1024 * 1024 * 1024).ToString());                          }                      }                  }              }
Magic Number,XenAdmin.ServerDBs,StatusReportXmlDocReader,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\StatusReportXmlDocReader.cs,PopulateDbFromXml,The following statement contains a magic number: foreach (XmlNode child in dataBaseNode.ChildNodes)              {                  if (child.Name == "table")                  {                      string tableName = child.Attributes["name"].Value.ToLower();                      Db.Table table = db.Tables.Add(tableName);                        foreach (XmlNode node in child.ChildNodes)                      {                          Db.Row row = table.Rows.Add(node.Attributes["ref"].Value);                            foreach (XmlAttribute a in node.Attributes)                          {                              string name = ParsePropertyName(a.Name' tableName);                              if(string.IsNullOrEmpty(name))                                  continue;                                row.Props.Add(name' a.Value);                          }                      }                        if (tableName == "host_metrics" && child.ChildNodes.Count == 0)  // host_metrics table used to be empty: see CA-31223                      {                          foreach (XmlNode host in hostNodes)                          {                              string opaque_ref = host.Attributes["metrics"].Value;                              if (table.Rows.ContainsKey(opaque_ref))                              {                                  // This doesn't happen with real databases' but for some of the hand-edited ones' we've got duplicate                                  // metrics opaquerefs.                                  continue;                              }                                Db.Row row = table.Rows.Add(opaque_ref);                              row.Props.Add("live"' "true");                              row.Props.Add("memory_total"' (2L * 1024 * 1024 * 1024).ToString());                              row.Props.Add("memory_free"' (1L * 1024 * 1024 * 1024).ToString());                          }                      }                  }              }
Magic Number,XenAdmin.ServerDBs,MethodImplementor,C:\repos\xenserver_xenadmin\XenModel\XenServerProxy\ClassGenerator.cs,StripGetSetPrefix,The following statement contains a magic number: if (methodName.StartsWith("get_") || methodName.StartsWith("set_"))              {                  methodName = methodName.Substring(4);              }
Magic Number,XenAdmin.ServerDBs.FakeAPI,fakeEvent,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeEvent.cs,next,The following statement contains a magic number: for (int iter = 0; iter < 600; ++iter)              {                  List<Proxy_Event> eventsAlias = null;                  lock (proxy.eventsListLock)                  {                      proxy.eventsList.AddRange(_highLoadEventGenerator.GetHighLoadEvents());                        if (proxy.eventsList.Count > 0)                      {                          eventsAlias = new List<Proxy_Event>(proxy.eventsList);                          proxy.eventsList.Clear();                      }                  }                  if (eventsAlias != null && eventsAlias.Count > 0)                  {                      Proxy_Event[] eventarr = eventsAlias.ToArray();                      return new Response<Proxy_Event[]>(eventarr);                  }                  Thread.Sleep(100);                  RunInEventLoop();              }
Magic Number,XenAdmin.ServerDBs.FakeAPI,fakeEvent,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeEvent.cs,next,The following statement contains a magic number: for (int iter = 0; iter < 600; ++iter)              {                  List<Proxy_Event> eventsAlias = null;                  lock (proxy.eventsListLock)                  {                      proxy.eventsList.AddRange(_highLoadEventGenerator.GetHighLoadEvents());                        if (proxy.eventsList.Count > 0)                      {                          eventsAlias = new List<Proxy_Event>(proxy.eventsList);                          proxy.eventsList.Clear();                      }                  }                  if (eventsAlias != null && eventsAlias.Count > 0)                  {                      Proxy_Event[] eventarr = eventsAlias.ToArray();                      return new Response<Proxy_Event[]>(eventarr);                  }                  Thread.Sleep(100);                  RunInEventLoop();              }
Magic Number,XenAdmin.ServerDBs.FakeAPI,fakeEvent,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeEvent.cs,from,The following statement contains a magic number: int iterations = (int) (_timeout < 100 ? 1 : _timeout/100);
Magic Number,XenAdmin.ServerDBs.FakeAPI,fakeEvent,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeEvent.cs,from,The following statement contains a magic number: int iterations = (int) (_timeout < 100 ? 1 : _timeout/100);
Magic Number,XenAdmin.ServerDBs.FakeAPI,fakeEvent,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeEvent.cs,from,The following statement contains a magic number: for (int iter = 0; iter < iterations; ++iter)              {                  List<Proxy_Event> eventsAlias = null;                  lock (proxy.eventsListLock)                  {                      proxy.eventsList.AddRange(_token == ""                                                    ? _highLoadEventGenerator.GetAddEvents(_classes)                                                    : _highLoadEventGenerator.GetHighLoadEvents(_classes' "mod"));                        if (proxy.eventsList.Count > 0)                      {                          eventsAlias = new List<Proxy_Event>(proxy.eventsList);                          proxy.eventsList.Clear();                      }                  }                  if (eventsAlias != null && eventsAlias.Count > 0)                  {                      Proxy_Event[] eventarr = eventsAlias.ToArray();                      var eventStruct = new Events { events = eventarr' valid_ref_counts = new object()' token = "1'1.0" };                      return new Response<Events>(eventStruct);                  }                    Thread.Sleep(100);                  RunInEventLoop();              }
Magic Number,XenAdmin.ServerDBs.FakeAPI,fakeHost,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeHost.cs,reboot,The following statement contains a magic number: Thread t = new Thread(delegate()              {                  while (proxy.MarkToDisconnect)                      Thread.Sleep(1000);                    Thread.Sleep(4000);                    proxy.EditObject_(DbProxy.EditTypes.Replace' "host_metrics"' metrics_ref' "live"' true);                  proxy.EditObject_(DbProxy.EditTypes.AddToDict' "host"' opaque_ref' "other_config"' "boot_time"' Util.ToUnixTime(DateTime.Now).ToString());                    Thread.Sleep(2000);                    enable(session' opaque_ref);              });
Magic Number,XenAdmin.ServerDBs.FakeAPI,fakeHost,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeHost.cs,reboot,The following statement contains a magic number: Thread t = new Thread(delegate()              {                  while (proxy.MarkToDisconnect)                      Thread.Sleep(1000);                    Thread.Sleep(4000);                    proxy.EditObject_(DbProxy.EditTypes.Replace' "host_metrics"' metrics_ref' "live"' true);                  proxy.EditObject_(DbProxy.EditTypes.AddToDict' "host"' opaque_ref' "other_config"' "boot_time"' Util.ToUnixTime(DateTime.Now).ToString());                    Thread.Sleep(2000);                    enable(session' opaque_ref);              });
Magic Number,XenAdmin.ServerDBs.FakeAPI,fakeHost,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeHost.cs,reboot,The following statement contains a magic number: Thread t = new Thread(delegate()              {                  while (proxy.MarkToDisconnect)                      Thread.Sleep(1000);                    Thread.Sleep(4000);                    proxy.EditObject_(DbProxy.EditTypes.Replace' "host_metrics"' metrics_ref' "live"' true);                  proxy.EditObject_(DbProxy.EditTypes.AddToDict' "host"' opaque_ref' "other_config"' "boot_time"' Util.ToUnixTime(DateTime.Now).ToString());                    Thread.Sleep(2000);                    enable(session' opaque_ref);              });
Magic Number,XenAdmin.ServerDBs.FakeAPI,fakeVM,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\FakeAPI\fakeVM.cs,get_allowed_vif_devices,The following statement contains a magic number: for (int i = 0; i < 7; i++)              {                  if (used.Contains(i.ToString()))                      continue;                    devices.Add(i.ToString());              }
Magic Number,XenAdmin.Actions.Wlb,WlbReportAction,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbReportAction.cs,Run,The following statement contains a magic number: taskThread.Name = "Progress polling thread for WLBReportAction for " + report.Ellipsise(20);
Magic Number,XenAdmin.Actions.Wlb,WlbReportAction,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbReportAction.cs,HttpGet,The following statement contains a magic number: int BUFSIZE = 1024;
Magic Number,XenAdmin.Actions.Wlb,DisableWLBAction,C:\repos\xenserver_xenadmin\XenModel\Actions\WLB\DisableWLBAction.cs,DisableWLBAction,The following statement contains a magic number: if (deconfigure)              {                  this.Title = String.Format(Messages.DECONFIGURING_WLB_ON' Helpers.GetName(pool).Ellipsise(50));                  this.Description = Messages.DECONFIGURING_WLB;              }
Magic Number,XenAdmin.Wlb,WlbConfigurationBase,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbConfigurationBase.cs,ConvertToMB,The following statement contains a magic number: return Convert.ToDecimal(byteValue / 1024 / 1024);
Magic Number,XenAdmin.Wlb,WlbConfigurationBase,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbConfigurationBase.cs,ConvertToMB,The following statement contains a magic number: return Convert.ToDecimal(byteValue / 1024 / 1024);
Magic Number,XenAdmin.Wlb,WlbConfigurationBase,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbConfigurationBase.cs,ConvertFromMB,The following statement contains a magic number: return (double)(mbyteValue * 1024 * 1024);
Magic Number,XenAdmin.Wlb,WlbConfigurationBase,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbConfigurationBase.cs,ConvertFromMB,The following statement contains a magic number: return (double)(mbyteValue * 1024 * 1024);
Magic Number,XenAdmin.Wlb,WlbConfigurationBase,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbConfigurationBase.cs,GetConfigValuePercent,The following statement contains a magic number: if (!_configuration.ContainsKey(key) || !double.TryParse(_configuration[key]' System.Globalization.NumberStyles.Any' _nfi' out floatValue))              {                  floatValue = ((double)defaultValue) / 100;              }
Magic Number,XenAdmin.Wlb,WlbConfigurationBase,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbConfigurationBase.cs,GetConfigValuePercent,The following statement contains a magic number: return (int)(floatValue * 100);
Magic Number,XenAdmin.Wlb,WlbConfigurationBase,C:\repos\xenserver_xenadmin\XenModel\WLB\WlbConfigurationBase.cs,SetConfigValuePercent,The following statement contains a magic number: double percentageValue = ((double)value) / 100;
Magic Number,XenAdmin.XenSearch,PropertyAccessors,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Common.cs,MemoryRankProperty,The following statement contains a magic number: return Switch<IComparable>(o'                  delegate(VM vm)                  {                      if (vm.not_a_real_vm() ||                          vm.power_state != vm_power_state.Running)                          return null;                        if (!vm.GetVirtualisationStatus().HasFlag(VM.VirtualisationStatus.MANAGEMENT_INSTALLED))                          return null;                        return PropertyAccessorHelper.vmMemoryUsageRank(vm);                    }'                  delegate(Host host)                  {                      if (!host.Connection.IsConnected)                          return null;                        return PropertyAccessorHelper.hostMemoryUsageRank(host);                  }'                  null'                  null'                  delegate(VDI vdi)                  {                      if (vdi.virtual_size == 0)                          return 0;                        return (int)((vdi.physical_utilisation * 100) / vdi.virtual_size);                  }'                  null);
Magic Number,XenAdmin.XenSearch,PropertyAccessors,C:\repos\xenserver_xenadmin\XenModel\XenSearch\Common.cs,SharedProperty,The following statement contains a magic number: if (vdi != null)              {                  int vms = 0;                  foreach (VBD vbd in vdi.Connection.ResolveAll(vdi.VBDs))                  {                      VM vm = vbd.Connection.Resolve(vbd.VM);                      if (vm != null)                      {                          if (++vms >= 2)                              return true;                      }                  }                  return false;              }
Magic Number,XenAdmin.XenSearch,FolderGrouping,C:\repos\xenserver_xenadmin\XenModel\XenSearch\GroupingTypes.cs,GetHashCode,The following statement contains a magic number: return 4;
Magic Number,XenAdmin.XenSearch,AllCustomFieldsGrouping,C:\repos\xenserver_xenadmin\XenModel\XenSearch\GroupingTypes.cs,GetHashCode,The following statement contains a magic number: return 17;
Magic Number,XenAdmin.XenSearch,MetricUpdater,C:\repos\xenserver_xenadmin\XenModel\XenSearch\MetricUpdater.cs,DistributeValues,The following statement contains a magic number: foreach (KeyValuePair<string' double> kvp in value)              {                  string[] bits = kvp.Key.Split(':');                  if (bits.Length < 4)                      continue;                    double currentValue = kvp.Value;                  string key = GetSetName(kvp.Key);                    if (bits[1].ToLowerInvariant() == "host")                  {                      host.Values[key] = currentValue;                  }                  else                  {                      VmMetric vm = host.GetVmByUuid(bits[2]);                      if (vm == null)                          continue;                      vm.Values[key] = currentValue;                  }              }
Magic Number,XenAdmin.XenSearch,MetricUpdater,C:\repos\xenserver_xenadmin\XenModel\XenSearch\MetricUpdater.cs,DistributeValues,The following statement contains a magic number: foreach (KeyValuePair<string' double> kvp in value)              {                  string[] bits = kvp.Key.Split(':');                  if (bits.Length < 4)                      continue;                    double currentValue = kvp.Value;                  string key = GetSetName(kvp.Key);                    if (bits[1].ToLowerInvariant() == "host")                  {                      host.Values[key] = currentValue;                  }                  else                  {                      VmMetric vm = host.GetVmByUuid(bits[2]);                      if (vm == null)                          continue;                      vm.Values[key] = currentValue;                  }              }
Magic Number,XenAdmin.XenSearch,MetricUpdater,C:\repos\xenserver_xenadmin\XenModel\XenSearch\MetricUpdater.cs,GetUri,The following statement contains a magic number: builder.Query = string.Format(RrdHostAndVmUpdatesQuery' Uri.EscapeDataString(session.uuid)' TimeUtil.TicksToSecondsSince1970(DateTime.UtcNow.Ticks - (host.Connection.ServerTimeOffset.Ticks + TicksInTenSeconds))' RrdCFAverage' 5);
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmCpuUsageStringByMetric,The following statement contains a magic number: if (total == 1)                  return String.Format(Messages.QUERY_PERCENT_OF_CPU' (sum * 100).ToString("0."));
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmCpuUsageStringByMetric,The following statement contains a magic number: return String.Format(Messages.QUERY_PERCENT_OF_CPUS' ((sum * 100) / total).ToString("0.")' total);
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmCpuUsageRank,The following statement contains a magic number: return (int)Math.Round((sum * 100.0) / (double)total);
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmMemoryUsagePercentageStringByMetric,The following statement contains a magic number: return String.Format(Messages.QUERY_MEMORY_PERCENT' ((total - (free * Util.BINARY_KILO)) / total * 100.0).ToString("0.")' Util.MemorySizeStringSuitableUnits(total' false));
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,vmMemoryUsageRank,The following statement contains a magic number: return (int)Math.Round(((total - (free * Util.BINARY_KILO)) * 100.0) / total);
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,hostCpuUsageStringByMetric,The following statement contains a magic number: if (total == 1)                  return String.Format(Messages.QUERY_PERCENT_OF_CPU' (sum * 100).ToString("0."));
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,hostCpuUsageStringByMetric,The following statement contains a magic number: return String.Format(Messages.QUERY_PERCENT_OF_CPUS' ((sum * 100) / total).ToString("0.")' total);
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,hostCpuUsageRank,The following statement contains a magic number: return (int)Math.Round((sum * 100.0) / (double)total);
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,hostMemoryUsagePercentageStringByMetric,The following statement contains a magic number: return String.Format(Messages.QUERY_MEMORY_PERCENT' ((total - free) / total * 100.0).ToString("0.")' Util.MemorySizeStringSuitableUnits(total * Util.BINARY_KILO' false));
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,hostMemoryUsageRank,The following statement contains a magic number: return (int)Math.Round(((total - free) * 100.0) / total);
Magic Number,XenAdmin.XenSearch,PropertyAccessorHelper,C:\repos\xenserver_xenadmin\XenModel\XenSearch\PropertyAccessorHelper.cs,PGPUMemoryUsageString,The following statement contains a magic number: if (total == 0 || Double.IsNaN(total) || Double.IsNaN(free))                  return Messages.HYPHEN;              else                  return String.Format(Messages.QUERY_MEMORY_USAGE' (used / (free + used) * 100).ToString("0.") + "%"' Util.MemorySizeStringSuitableUnits(free + used' false));
Magic Number,XenAdmin.XenSearch,DatePropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,DatePropertyQuery,The following statement contains a magic number: if (queryString.Length == 8)  // new style                  this.query = DateTime.ParseExact(queryString' "yyyyMMdd"' CultureInfo.InvariantCulture);              else  // old style                  this.query = TimeUtil.ParseISO8601DateTime(queryString);
Magic Number,XenAdmin.XenSearch,DatePropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,MatchDate,The following statement contains a magic number: switch (type)              {                  case PropertyQueryType.today:                      return now.Year == valueLocal.Year                          && now.DayOfYear == valueLocal.DayOfYear;                    case PropertyQueryType.yesterday:                      if (valueLocal.Year == now.Year)                          return (valueLocal.DayOfYear == now.DayOfYear - 1);                      else if (valueLocal.Year == now.Year - 1)                          return (now.DayOfYear == 1 && valueLocal.DayOfYear == DaysInYear(valueLocal.Year));                      else                          return false;                    case PropertyQueryType.thisweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else                          return false;                    case PropertyQueryType.lastweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else                          return false;                    case PropertyQueryType.before:                      return valueLocal.Date <= query.Date;                    case PropertyQueryType.after:                      return valueLocal.Date >= query.Date;                    case PropertyQueryType.exact:                      return valueLocal.Date == query.Date;                    default:                      return false;              }
Magic Number,XenAdmin.XenSearch,DatePropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,MatchDate,The following statement contains a magic number: switch (type)              {                  case PropertyQueryType.today:                      return now.Year == valueLocal.Year                          && now.DayOfYear == valueLocal.DayOfYear;                    case PropertyQueryType.yesterday:                      if (valueLocal.Year == now.Year)                          return (valueLocal.DayOfYear == now.DayOfYear - 1);                      else if (valueLocal.Year == now.Year - 1)                          return (now.DayOfYear == 1 && valueLocal.DayOfYear == DaysInYear(valueLocal.Year));                      else                          return false;                    case PropertyQueryType.thisweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else                          return false;                    case PropertyQueryType.lastweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else                          return false;                    case PropertyQueryType.before:                      return valueLocal.Date <= query.Date;                    case PropertyQueryType.after:                      return valueLocal.Date >= query.Date;                    case PropertyQueryType.exact:                      return valueLocal.Date == query.Date;                    default:                      return false;              }
Magic Number,XenAdmin.XenSearch,DatePropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,MatchDate,The following statement contains a magic number: switch (type)              {                  case PropertyQueryType.today:                      return now.Year == valueLocal.Year                          && now.DayOfYear == valueLocal.DayOfYear;                    case PropertyQueryType.yesterday:                      if (valueLocal.Year == now.Year)                          return (valueLocal.DayOfYear == now.DayOfYear - 1);                      else if (valueLocal.Year == now.Year - 1)                          return (now.DayOfYear == 1 && valueLocal.DayOfYear == DaysInYear(valueLocal.Year));                      else                          return false;                    case PropertyQueryType.thisweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else                          return false;                    case PropertyQueryType.lastweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else                          return false;                    case PropertyQueryType.before:                      return valueLocal.Date <= query.Date;                    case PropertyQueryType.after:                      return valueLocal.Date >= query.Date;                    case PropertyQueryType.exact:                      return valueLocal.Date == query.Date;                    default:                      return false;              }
Magic Number,XenAdmin.XenSearch,DatePropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,MatchDate,The following statement contains a magic number: switch (type)              {                  case PropertyQueryType.today:                      return now.Year == valueLocal.Year                          && now.DayOfYear == valueLocal.DayOfYear;                    case PropertyQueryType.yesterday:                      if (valueLocal.Year == now.Year)                          return (valueLocal.DayOfYear == now.DayOfYear - 1);                      else if (valueLocal.Year == now.Year - 1)                          return (now.DayOfYear == 1 && valueLocal.DayOfYear == DaysInYear(valueLocal.Year));                      else                          return false;                    case PropertyQueryType.thisweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else                          return false;                    case PropertyQueryType.lastweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else                          return false;                    case PropertyQueryType.before:                      return valueLocal.Date <= query.Date;                    case PropertyQueryType.after:                      return valueLocal.Date >= query.Date;                    case PropertyQueryType.exact:                      return valueLocal.Date == query.Date;                    default:                      return false;              }
Magic Number,XenAdmin.XenSearch,DatePropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,MatchDate,The following statement contains a magic number: switch (type)              {                  case PropertyQueryType.today:                      return now.Year == valueLocal.Year                          && now.DayOfYear == valueLocal.DayOfYear;                    case PropertyQueryType.yesterday:                      if (valueLocal.Year == now.Year)                          return (valueLocal.DayOfYear == now.DayOfYear - 1);                      else if (valueLocal.Year == now.Year - 1)                          return (now.DayOfYear == 1 && valueLocal.DayOfYear == DaysInYear(valueLocal.Year));                      else                          return false;                    case PropertyQueryType.thisweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else                          return false;                    case PropertyQueryType.lastweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else                          return false;                    case PropertyQueryType.before:                      return valueLocal.Date <= query.Date;                    case PropertyQueryType.after:                      return valueLocal.Date >= query.Date;                    case PropertyQueryType.exact:                      return valueLocal.Date == query.Date;                    default:                      return false;              }
Magic Number,XenAdmin.XenSearch,DatePropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,MatchDate,The following statement contains a magic number: switch (type)              {                  case PropertyQueryType.today:                      return now.Year == valueLocal.Year                          && now.DayOfYear == valueLocal.DayOfYear;                    case PropertyQueryType.yesterday:                      if (valueLocal.Year == now.Year)                          return (valueLocal.DayOfYear == now.DayOfYear - 1);                      else if (valueLocal.Year == now.Year - 1)                          return (now.DayOfYear == 1 && valueLocal.DayOfYear == DaysInYear(valueLocal.Year));                      else                          return false;                    case PropertyQueryType.thisweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 0 && diff < 7);                      }                      else                          return false;                    case PropertyQueryType.lastweek:                      if (valueLocal.Year == now.Year)                      {                          int diff = now.DayOfYear - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else if (valueLocal.Year == now.Year - 1)                      {                          int diff = now.DayOfYear + DaysInYear(valueLocal.Year) - valueLocal.DayOfYear;                          return (diff >= 7 && diff < 14);                      }                      else                          return false;                    case PropertyQueryType.before:                      return valueLocal.Date <= query.Date;                    case PropertyQueryType.after:                      return valueLocal.Date >= query.Date;                    case PropertyQueryType.exact:                      return valueLocal.Date == query.Date;                    default:                      return false;              }
Magic Number,XenAdmin.XenSearch,DatePropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,DaysInYear,The following statement contains a magic number: return (DateTime.IsLeapYear(year) ? 366 : 365);
Magic Number,XenAdmin.XenSearch,DatePropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,DaysInYear,The following statement contains a magic number: return (DateTime.IsLeapYear(year) ? 366 : 365);
Magic Number,XenAdmin.XenSearch,SearchMarshalling,C:\repos\xenserver_xenadmin\XenModel\XenSearch\SearchMarshalling.cs,LoadSearches,The following statement contains a magic number: try              {                  List<Search> result = new List<Search>();                    XmlDocument doc = new XmlDocument();                  doc.XmlResolver = new BasicXMLResolver();                  doc.LoadXml(xml);                    foreach (XmlNode search in doc.GetElementsByTagName("Search"))                  {                      result.Add(LoadSearch(search));                  }                    // Just for backwards compat.                  foreach (XmlNode search in doc.GetElementsByTagName("search"))                  {                      result.Add(LoadSearch(search));                  }                    return result;              }              catch (Exception e)              {                  log.DebugFormat("Exception parsing xml '{0}'"' xml.Substring(0' 10000));                  log.Debug(e' e);                    return null;              }
Magic Number,XenAdmin.XenSearch,SearchMarshalling,C:\repos\xenserver_xenadmin\XenModel\XenSearch\SearchMarshalling.cs,SearchesToXML,The following statement contains a magic number: try              {                  w.Formatting = Formatting.Indented;                  w.Indentation = 4;                  w.IndentChar = ' ';                    document.WriteTo(w);                  w.Flush();                    return sw.ToString();              }              finally              {                  w.Close();                  sw.Close();              }
Missing Default,XenAdmin.Actions,ApplyLicenseEditionAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\ApplyLicenseEditionAction.cs,Run,The following switch statement is missing a default case: switch (messageType)                                      {                                          case Message.MessageType.LICENSE_NOT_AVAILABLE:                                          case Message.MessageType.LICENSE_SERVER_UNREACHABLE:                                          case Message.MessageType.LICENSE_SERVER_VERSION_OBSOLETE:                                              alertText = string.Format(Message.FriendlyBody(alert.Name)' xoClosure.Name());                                              break;                                          case Message.MessageType.GRACE_LICENSE:                                              alertText = string.Empty;                                              break;                                      }
Missing Default,XenAdmin.Actions,HostBackupRestoreAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostBackupRestoreAction.cs,HostBackupRestoreAction,The following switch statement is missing a default case: switch (type)              {                  case HostBackupRestoreType.backup:                      ApiMethodsToRoleCheck.Add("http/get_host_backup");                      break;                  case HostBackupRestoreType.restore:                      ApiMethodsToRoleCheck.Add("http/put_host_restore");                      break;              }
Missing Default,XenAdmin.Actions,HostBackupRestoreAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Host\HostBackupRestoreAction.cs,Run,The following switch statement is missing a default case: switch (type)                  {                      case HostBackupRestoreType.backup:                          this.Description = String.Format(Messages.BACKINGUP_HOST_WITH_DATA' Host.Name()' Util.MemorySizeStringSuitableUnits(0' false));                            LogDescriptionChanges = false;                          try                          {                              HTTPHelper.Get(this' true' DataReceived' filename' Host.address'                                  (HTTP_actions.get_ss)HTTP_actions.get_host_backup' Session.uuid);                          }                          finally                          {                              LogDescriptionChanges = true;                          }                            this.Description = String.Format(Messages.HOST_BACKEDUP' Host.Name());                          break;                        case HostBackupRestoreType.restore:                          this.Description = String.Format(Messages.RESTORING_HOST' Host.Name());                            HTTPHelper.Put(this' true' filename' Host.address'                              (HTTP_actions.put_ss)HTTP_actions.put_host_restore' Session.uuid);                            this.Description = String.Format(Messages.HOST_RESTORED' Host.Name());                          break;                  }
Missing Default,XenAdmin.Actions,DiskSpaceRequirements,C:\repos\xenserver_xenadmin\XenModel\Actions\Pool_Patch\GetDiskSpaceRequirementsAction.cs,GetSpaceRequirementsMessage,The following switch statement is missing a default case: switch (Operation)             {                 case OperationTypes.install :                     sbMessage.AppendFormat(Messages.NOT_ENOUGH_SPACE_MESSAGE_INSTALL' Host.Name()' UpdateName);                     break;                 case OperationTypes.upload :                     sbMessage.AppendFormat(Messages.NOT_ENOUGH_SPACE_MESSAGE_UPLOAD' Host.Name()' UpdateName);                     break;                 case OperationTypes.automatedUpdates :                     sbMessage.AppendFormat(Messages.NOT_ENOUGH_SPACE_MESSAGE_AUTO_UPDATE' Host.Name());                     break;             }
Missing Default,XenAdmin.Actions,VMSnapshotCreateAction,C:\repos\xenserver_xenadmin\XenModel\Actions\VM\VMSnapshotCreateAction.cs,VMSnapshotCreateAction,The following switch statement is missing a default case: switch (type)              {                  case SnapshotType.QUIESCED_DISK:                      ApiMethodsToRoleCheck.Add("vm.snapshot_with_quiesce");                      break;                  case SnapshotType.DISK_AND_MEMORY:                      ApiMethodsToRoleCheck.Add("vm.checkpoint");                      break;                  case SnapshotType.DISK:                      ApiMethodsToRoleCheck.Add("vm.snapshot");                      break;              }
Missing Default,XenAdmin.Actions,NetworkAction,C:\repos\xenserver_xenadmin\XenModel\Actions\Network\NetworkAction.cs,Run,The following switch statement is missing a default case: switch (actionType)              {                  case network_actions.destroy:                      Description = Messages.NETWORK_ACTION_REMOVING_NETWORK;                      destroyPIFs();                      XenAPI.Network.destroy(Session' networkClone.opaque_ref);                      networkClone = null;                      Description = Messages.NETWORK_ACTION_NETWORK_REMOVED;                      break;                    case network_actions.update:                      Description = Messages.NETWORK_ACTION_UPDATING_NETWORK;                        if (changePIFs)                      {                          if (external)                          {                              //Before we do a destroy check the vlan tag is not in use on this network                              foreach (PIF p in Connection.Cache.PIFs)                              {                                  if (p.VLAN == vlan && p.device == pif.device)                                      throw new Exception(FriendlyErrorNames.PIF_VLAN_EXISTS);                              }                          }                          destroyPIFs();                          if (external)                              CreateVLAN(networkClone.opaque_ref);                      }                        Description = Messages.NETWORK_ACTION_NETWORK_UPDATED;                      break;                    case network_actions.create:                      Description = Messages.NETWORK_ACTION_CREATING_NETWORK;                        XenRef<XenAPI.Network> networkRef = XenAPI.Network.create(Session' networkClone);                      if (external)                          CreateVLAN(networkRef.opaque_ref);                        Description = Messages.NETWORK_ACTION_NETWORK_CREATED;                      break;              }
Missing Default,XenAdmin.Actions,SrAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrAction.cs,GetTitle,The following switch statement is missing a default case: switch (kind)              {                  case SrActionKind.SetAsDefault:                      return String.Format(Messages.ACTION_SR_SETTING_DEFAULT'                          sr.Name()' Helpers.GetName(sr.Connection));                    case SrActionKind.Detach:                  case SrActionKind.UnplugAndDestroyPBDs:                      return String.Format(Messages.ACTION_SR_DETACHING'                          sr.Name()' Helpers.GetName(sr.Connection));                    case SrActionKind.Destroy:                      return String.Format(Messages.ACTION_SR_DESTROYING'                          sr.Name()' Helpers.GetName(sr.Connection));                    case SrActionKind.Forget:                      return String.Format(Messages.ACTION_SR_FORGETTING'                          sr.Name()' Helpers.GetName(sr.Connection));              }
Missing Default,XenAdmin.Actions,SrAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrAction.cs,Run,The following switch statement is missing a default case: switch (kind)              {                  case SrActionKind.Detach:                      UnplugPBDs(ref inc);                      Description = string.Format(Messages.ACTION_SR_DETACH_SUCCESSFUL' SR.NameWithoutHost());                      break;                    case SrActionKind.Destroy:                      RelatedTask = XenAPI.SR.async_destroy(Session' SR.opaque_ref);                      PollToCompletion(50' 100);                      Description = Messages.ACTION_SR_DESTROY_SUCCESSFUL;                      break;                    case SrActionKind.Forget:                      Description = string.Format(Messages.FORGETTING_SR_0' SR.NameWithoutHost());                      if (!SR.allowed_operations.Contains(storage_operations.forget))                      {                          Description = Messages.ERROR_DIALOG_FORGET_SR_TITLE;                          break;                      }                                                RelatedTask = XenAPI.SR.async_forget(Session' SR.opaque_ref);                      PollToCompletion();                      Description = string.Format(Messages.SR_FORGOTTEN_0' SR.NameWithoutHost());                      break;                    case SrActionKind.SetAsDefault:                      XenRef<SR> r = new XenRef<SR>(SR);                      Pool = Helpers.GetPoolOfOne(Connection);                      Description = string.Format(Messages.ACTION_SR_SETTING_DEFAULT' SR' Pool);                      Pool poolCopy = (Pool)Pool.Clone();                      if (Pool != null)                      {                          poolCopy.crash_dump_SR = r;                          poolCopy.default_SR = r;                          poolCopy.suspend_image_SR = r;                          try                          {                              Pool.Locked = true;                              poolCopy.SaveChanges(Session);                          }                          finally                          {                              Pool.Locked = false;                          }                      }                        Description = Messages.ACTION_SR_SET_DEFAULT_SUCCESSFUL;                      break;                    case SrActionKind.UnplugAndDestroyPBDs:                      UnplugPBDs(ref inc);                      DestroyPBDs(ref inc);                      Description = string.Format(Messages.ACTION_SR_DETACH_SUCCESSFUL' SR.NameWithoutHost());                      break;                }
Missing Default,XenAdmin.Actions,SrScanAction,C:\repos\xenserver_xenadmin\XenModel\Actions\SR\SrScanAction.cs,ParseDellStoragePoolsXML,The following switch statement is missing a default case: switch(info.Name.ToLowerInvariant())                          {                              case "name":                                  Name = info.InnerText.Trim();                                  break;                                case "default":                                  bool.TryParse(info.InnerText.Trim()' out Default);                                  break;                                case "members":                                  int.TryParse(info.InnerText.Trim()' out Members);                                  break;                                case "volumes":                                  int.TryParse(info.InnerText.Trim()' out Volumes);                                  break;                                case "capacity":                                  long.TryParse(info.InnerText.Trim()' out Capacity);                                  break;                                case "freespace":                                  long.TryParse(info.InnerText.Trim()' out Freespace);                                  break;                          }
Missing Default,XenAdmin.Core,Helpers,C:\repos\xenserver_xenadmin\XenModel\Utils\Helpers.cs,XenObjectFromMessage,The following switch statement is missing a default case: switch (message.cls)              {                  case cls.Pool:                      Pool pool = message.Connection.Cache.Find_By_Uuid<Pool>(message.obj_uuid);                      if (pool != null)                          return pool;                      break;                  case cls.Host:                      Host host = message.Connection.Cache.Find_By_Uuid<Host>(message.obj_uuid);                      if (host != null)                          return host;                      break;                  case cls.VM:                      VM vm = message.Connection.Cache.Find_By_Uuid<VM>(message.obj_uuid);                      if (vm != null)                          return vm;                      break;                  case cls.SR:                      SR sr = message.Connection.Cache.Find_By_Uuid<SR>(message.obj_uuid);                      if (sr != null)                          return sr;                      break;                  case cls.VMSS:                      VMSS vmss = message.Connection.Cache.Find_By_Uuid<VMSS>(message.obj_uuid);                      if (vmss != null)                          return vmss;  					 break;					                   case cls.PVS_proxy:                      PVS_proxy proxy = message.Connection.Cache.Find_By_Uuid<PVS_proxy>(message.obj_uuid);                      if (proxy != null)                          return proxy;  					break;              }
Missing Default,XenAdmin.Model,DockerContainers,C:\repos\xenserver_xenadmin\XenModel\DockerContainers.cs,XenConnections_CollectionChanged,The following switch statement is missing a default case: switch (e.Action)                  {                      case CollectionChangeAction.Add:                          if (connection != null)                              AddConnection(connection);                          break;                        case CollectionChangeAction.Remove:                          if (connection != null)                          {                              RemoveConnection(connection);                          }                          else                          {                              var range = e.Element as List<IXenConnection>;                              if (range != null)                                  foreach (var con in range)                                      RemoveConnection(con);                          }                          break;                  }
Missing Default,XenAdmin.Model,Folders,C:\repos\xenserver_xenadmin\XenModel\Folders.cs,XenConnections_CollectionChanged,The following switch statement is missing a default case: switch (e.Action)                  {                      case CollectionChangeAction.Add:                          if (connection != null)                              AddConnection(connection);                          break;                        case CollectionChangeAction.Remove:                          if (connection != null)                          {                              RemoveConnection(connection);                          }                          else                          {                              var range = e.Element as List<IXenConnection>;                              if (range != null)                                  foreach (var con in range)                                      RemoveConnection(con);                          }                          break;                  }
Missing Default,XenAdmin,OtherConfigAndTagsWatcher,C:\repos\xenserver_xenadmin\XenModel\OtherConfigWatcher.cs,CollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case CollectionChangeAction.Add:                      xmo.PropertyChanged += PropertyChanged<T>;                      break;                  case CollectionChangeAction.Remove:                      xmo.PropertyChanged -= PropertyChanged<T>;                      break;                  case CollectionChangeAction.Refresh:                      // As of writing' ChangeableDictionary never fires a Refresh event.                      // If this changes' we need to take it into account here.                      throw new NotImplementedException("CollectionChangeAction.Refresh is unhandled!");              }
Missing Default,XenAdmin.Network,TaskPoller,C:\repos\xenserver_xenadmin\XenModel\Network\TaskPoller.cs,poll,The following switch statement is missing a default case: switch (task.status)                  {                      case XenAPI.task_status_type.failure:                          log.Warn("Action failed due to API failure:\n" + Environment.StackTrace);                          throw new XenAPI.Failure(new List<string>(task.error_info));                        case XenAPI.task_status_type.success:                          taskCompleted = true;                          _action.Result = task.result;                          // Work around CA-6597.                          if (_action.Result != "")                          {                              Match m = Regex.Match(_action.Result' "<value>(.*)</value>");                              if (m.Success)                              {                                  _action.Result = m.Groups[1].Value;                              }                          }                          break;                        case XenAPI.task_status_type.cancelled:                          log.Debug("Action cancelled");                          throw new CancelledException();                        case XenAPI.task_status_type.cancelling:                      case XenAPI.task_status_type.pending:                          break;                  }
Missing Default,XenAPI,Host,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Host.cs,SaveEvacuatedVMs,The following switch statement is missing a default case: switch (vm.power_state)                  {                      case vm_power_state.Halted:                          haltedVMs.Add(vm);                          break;                        case vm_power_state.Running:                          migratedVMs.Add(vm);                          break;                        case vm_power_state.Suspended:                          suspendedVMs.Add(vm);                          break;                  }
Missing Default,XenAPI,PIF,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\PIF.cs,LinkStatusString,The following switch statement is missing a default case: switch (linkStatus)              {                  case LinkState.Connected:                      return Messages.CONNECTED;                  case LinkState.Disconnected:                      return Messages.DISCONNECTED;                  case LinkState.Unknown:                      return Messages.UNKNOWN;              }
Missing Default,XenAPI,Role,C:\repos\xenserver_xenadmin\XenModel\XenAPI-Extensions\Role.cs,RoleRank,The following switch statement is missing a default case: switch (name_label.ToLowerInvariant())              {                  case MR_ROLE_READ_ONLY: return 0;                  case MR_ROLE_VM_OPERATOR: return 1;                  case MR_ROLE_VM_ADMIN: return 2;                  case MR_ROLE_VM_POWER_ADMIN: return 3;                  case MR_ROLE_POOL_OPERATOR: return 4;                  case MR_ROLE_POOL_ADMIN: return 5;              }
Missing Default,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,ExecuteMethod,The following switch statement is missing a default case: switch (pmi.FakeMethodType)              {                  case MethodType.Sync:                      return pmi.FakeMethod.Invoke(obj' methodArgs);                    case MethodType.Async:                      Response<string> response = (Response<string>)pmi.FakeMethod.Invoke(obj' methodArgs);                      if (response.Status == ResponseTypes.SUCCESS)                      {                          return new Response<string>(CreateTask(DbProxy.TaskStatus.success' response.Value));                      }                      else                      {                          return new Response<string>(CreateTask(DbProxy.TaskStatus.failure' response.ErrorDescription));                      }                }
Missing Default,XenAdmin.ServerDBs,DbProxy,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\DbProxy.cs,Invoke,The following switch statement is missing a default case: switch (pmi.MethodName)              {                  case "Url":                      return url;// "http://XenCenter.Simulator/";                    case "get_record":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))  // tasks are kept track of separately                          {                              return new Response<Proxy_Task>(task_get_record(uuid));                          }                          return get_record(pmi.TypeName' uuid' true);                      }                    case "destroy":                      {                          string uuid = (string)args[1];                          if (uuid.StartsWith("task"))                          {                              task_destroy(uuid);                              return new Response<string>("");                          }                          break;                      }                    case "add_to_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              AddToDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]' args[3]);                          }                          return new Response<string>("");                      }                    case "remove_from_other_config":                      {                          string uuid = (string)args[1];                          if (!uuid.StartsWith("task"))  // ignore other_config for tasks (used to keep track of meddling actions)                          {                              RemoveFromDictionary(pmi.TypeName' (string)args[1]' "other_config"' args[2]);                          }                          return new Response<string>("");                      }                    case "add_to_gui_config":                      AddToDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]' args[3]);                      return new Response<string>("");                    case "remove_from_gui_config":                      RemoveFromDictionary(pmi.TypeName' (string)args[1]' "gui_config"' args[2]);                      return new Response<string>("");                    case "add_tags":                      AddToArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "remove_tags":                      RemoveFromArray(pmi.TypeName' (string)args[1]' "tags"' args[2]);                      return new Response<string>("");                    case "get_subject_information_from_identifier":                      Hashtable subjectInfo = new Hashtable();                      if ((string)args[1] == "SID1")                      {                          subjectInfo["subject-name"] = @"citrix\tu_one";                          subjectInfo["subject-displayname"] = "Test User 1";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID2")                      {                          subjectInfo["subject-name"] = @"citrix\tu_two";                          subjectInfo["subject-displayname"] = "Test User 2";                          subjectInfo["subject-is-group"] = "false";                      }                      else if ((string)args[1] == "SID3")                      {                          subjectInfo["subject-name"] = @"citrix\tg";                          subjectInfo["subject-displayname"] = "Test Group";                          subjectInfo["subject-is-group"] = "true";                      }                      return new Response<Object>(subjectInfo);                    // For VBDEditPage.CalculateDevicePositions()                  case "get_allowed_vbd_devices":                      return new Response<String[]>(new String[] { "0"' "1"' "2"' "3"' "4"' "5"' "6"' "7" });                    case "retrieve_wlb_recommendations":                  case "retrieve_wlb_evacuate_recommendations":                  case "retrieve_wlb_configuration":                      Hashtable tbl = new Hashtable();                      return new Response<object>(tbl);                    case "get_uncooperative_resident_vms":                      return new Response<string[]>(new string[0]);                    // For HAWizard_Pages.AssignPriorities                  case "ha_compute_hypothetical_max_host_failures_to_tolerate":                      return new Response<string>("1");                    case "get_ha_host_failures_to_tolerate":                      return new Response<string>("1");                    // For EvacuateHostDialog and RollingUpgradeWizard                  case "get_vms_which_prevent_evacuation":                      return new Response<object>(new Hashtable());                    // For RollingUpgradeWizard                  case "get_live":                      return new Response<bool>(true);                    case "get_allowed_operations":                      return new Response<string[]>(new string[0]);                    case "get_health_check_config":                      string uuid1 = (string)args[1];                      return new Response<object>(get_health_check_config(pmi.TypeName' uuid1' true));                }
Missing Default,XenAdmin.ServerDBs,Parser,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\Parser.cs,DeEscapeWhiteSpace,The following switch statement is missing a default case: switch (value[i])                          {                              case '_': sb.Append("  "); break;                              case 'n': sb.Append("\n"); break;                              case 'r': sb.Append("\r"); break;                              case 't': sb.Append("\t"); break;                              case '%': sb.Append("%"); break;                          }
Missing Default,XenAdmin.ServerDBs,Parser,C:\repos\xenserver_xenadmin\XenModel\ServerDBs\Parser.cs,Tokenize,The following switch statement is missing a default case: switch (str[i])                  {                      case '(':                          if (!inStr)                          {                              yield return "(";                          }                          break;                        case ')':                          if (!inStr)                          {                              yield return ")";                          }                          break;                        case '\'':                      case '"':                          if (!inStr)                          {                              inStr = true;                              j = i;                          }                          else if (str[i - 1] != '\\')                          {                              inStr = false;                              yield return str.Substring(j + 1' i - j - 1).Replace("\\\""' "\"").Replace("\\\'"' "\'");                          }                          break;                  }
Missing Default,XenAdmin.XenSearch,IntPropertyQuery,C:\repos\xenserver_xenadmin\XenModel\XenSearch\QueryTypes.cs,MatchProperty,The following switch statement is missing a default case: switch (type)              {                  case PropertyQueryType.exactmatch:                      return o == query;                    case PropertyQueryType.gt:                      return o > query;                    case PropertyQueryType.lt:                      return o < query;              }
