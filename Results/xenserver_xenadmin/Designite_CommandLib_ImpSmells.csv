Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,CommandLib,thinCLIProtocol,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,thinCLIProtocol,The method has 9 parameters. Parameters: dGlobalError' dGlobalUsage' dGlobalDebug' dConsoleWrite' dConsoleWriteLine' dConsoleReadLine' dExit' dProgress' conf
Long Statement,CommandLib,HTTP,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,doRPC,The length of the statement  "                    tCLIprotocol.dGlobalError("Received an error message from the server doing an HTTP " + method + " " + uri.PathAndQuery + " : " + response);" is 139.
Long Statement,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,version_handshake,The length of the statement  "                tCLIprotocol.dGlobalError("Protocol version mismatch talking to server on " + tCLIprotocol.conf.hostname + ":" + tCLIprotocol.conf.port);" is 137.
Magic Number,CommandLib,Transport,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,connect,The following statement contains a magic number: if (port != 443){ 			    TcpClient client = new TcpClient(hostname' port); 			    Stream stream = client.GetStream(); 			    return stream; 		    } else {         	    TcpClient client = new TcpClient(hostname' port);         	    // Create an SSL stream that will close the client's stream.         	    SslStream sslStream = new SslStream(             	    client.GetStream()'             	    false'             	    new RemoteCertificateValidationCallback(ValidateServerCertificate)'             	    null                 );         	    try         	    {                     sslStream.AuthenticateAsClient(""' null' SslProtocols.Tls | SslProtocols.Tls11 | SslProtocols.Tls12' true);                 }         	    catch (AuthenticationException e){         		    if (tCLIprotocol.conf.debug) throw e;         		    tCLIprotocol.dGlobalError("Authentication failed - closing the connection.");             	    client.Close();             	    return null;                 } catch (Exception e) {             	    if (tCLIprotocol.conf.debug) throw e;             	    tCLIprotocol.dGlobalError("Exception during SSL auth - closing the connection.");             	    client.Close();             	    return null;                 } 			    return sslStream; 		    }
Magic Number,CommandLib,HTTP,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,getResultCode,The following statement contains a magic number: if (bits.Length < 2) return 0;
Magic Number,CommandLib,HTTP,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,doRPC,The following statement contains a magic number: switch (code)             {                 case 200:                     break;                 case 302:                     string url = "";                     while (true)                     {                         response = readLine(http);                         if (response.StartsWith("Location: "))                             url = response.Substring(10);                         if (response.Equals("\r\n") || response.Equals("")) break;                     }                     Uri redirect = new Uri(url.Trim());                     tCLIprotocol.conf.hostname = redirect.Host;                     http.Close();                     return doRPC(method' redirect' tCLIprotocol' headers);                 default:                     tCLIprotocol.dGlobalError("Received an error message from the server doing an HTTP " + method + " " + uri.PathAndQuery + " : " + response);                     http.Close();                     return null;             }
Magic Number,CommandLib,HTTP,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,doRPC,The following statement contains a magic number: switch (code)             {                 case 200:                     break;                 case 302:                     string url = "";                     while (true)                     {                         response = readLine(http);                         if (response.StartsWith("Location: "))                             url = response.Substring(10);                         if (response.Equals("\r\n") || response.Equals("")) break;                     }                     Uri redirect = new Uri(url.Trim());                     tCLIprotocol.conf.hostname = redirect.Host;                     http.Close();                     return doRPC(method' redirect' tCLIprotocol' headers);                 default:                     tCLIprotocol.dGlobalError("Received an error message from the server doing an HTTP " + method + " " + uri.PathAndQuery + " : " + response);                     http.Close();                     return null;             }
Magic Number,CommandLib,HTTP,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,doRPC,The following statement contains a magic number: switch (code)             {                 case 200:                     break;                 case 302:                     string url = "";                     while (true)                     {                         response = readLine(http);                         if (response.StartsWith("Location: "))                             url = response.Substring(10);                         if (response.Equals("\r\n") || response.Equals("")) break;                     }                     Uri redirect = new Uri(url.Trim());                     tCLIprotocol.conf.hostname = redirect.Host;                     http.Close();                     return doRPC(method' redirect' tCLIprotocol' headers);                 default:                     tCLIprotocol.dGlobalError("Received an error message from the server doing an HTTP " + method + " " + uri.PathAndQuery + " : " + response);                     http.Close();                     return null;             }
Magic Number,CommandLib,Types,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,unmarshal_int32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,CommandLib,Types,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,unmarshal_int32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,CommandLib,Types,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,unmarshal_int32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,CommandLib,Types,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_int32,The following statement contains a magic number: stream.WriteByte((byte) ((x >> 8) & mask));
Magic Number,CommandLib,Types,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_int32,The following statement contains a magic number: stream.WriteByte((byte) ((x >> 16) & mask));
Magic Number,CommandLib,Types,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_int32,The following statement contains a magic number: stream.WriteByte((byte) ((x >> 24) & mask));
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_response,The following statement contains a magic number: Types.marshal_int(stream' 4 + 4);
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_response,The following statement contains a magic number: Types.marshal_int(stream' 4 + 4);
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: try             {                 using (FileStream fs = new FileStream(filename' FileMode.Open' FileAccess.Read))                 {                     FileInfo fi = new FileInfo(filename);                     // Immediately report our success in opening the file                     marshal_response(stream' tag.OK);                      // The server doesn't like multiple chunks but this is fine for                     // Zurich/Geneva imports                     Types.marshal_int(stream' 4 + 4 + 4);                     marshal_tag(stream' tag.Blob);                     marshal_tag(stream' tag.Chunk);                     Types.marshal_int32(stream' (uint)fi.Length);                      byte[] block = new byte[tCLIprotocol.conf.block_size];                     while (true)                     {                         int n = fs.Read(block' 0' block.Length);                         if (n == 0)                         {                             Types.marshal_int(stream' 4 + 4);                             marshal_tag(stream' tag.Blob);                             marshal_tag(stream' tag.End);                             break;                         }                         stream.Write(block' 0' n);                         tCLIprotocol.dProgress(n);                     }                 }             }             catch (DirectoryNotFoundException)             {                 marshal_response(stream' tag.Failed);             }             catch (FileNotFoundException)             {                 marshal_response(stream' tag.Failed);             }
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: try             {                 using (FileStream fs = new FileStream(filename' FileMode.Open' FileAccess.Read))                 {                     FileInfo fi = new FileInfo(filename);                     // Immediately report our success in opening the file                     marshal_response(stream' tag.OK);                      // The server doesn't like multiple chunks but this is fine for                     // Zurich/Geneva imports                     Types.marshal_int(stream' 4 + 4 + 4);                     marshal_tag(stream' tag.Blob);                     marshal_tag(stream' tag.Chunk);                     Types.marshal_int32(stream' (uint)fi.Length);                      byte[] block = new byte[tCLIprotocol.conf.block_size];                     while (true)                     {                         int n = fs.Read(block' 0' block.Length);                         if (n == 0)                         {                             Types.marshal_int(stream' 4 + 4);                             marshal_tag(stream' tag.Blob);                             marshal_tag(stream' tag.End);                             break;                         }                         stream.Write(block' 0' n);                         tCLIprotocol.dProgress(n);                     }                 }             }             catch (DirectoryNotFoundException)             {                 marshal_response(stream' tag.Failed);             }             catch (FileNotFoundException)             {                 marshal_response(stream' tag.Failed);             }
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: try             {                 using (FileStream fs = new FileStream(filename' FileMode.Open' FileAccess.Read))                 {                     FileInfo fi = new FileInfo(filename);                     // Immediately report our success in opening the file                     marshal_response(stream' tag.OK);                      // The server doesn't like multiple chunks but this is fine for                     // Zurich/Geneva imports                     Types.marshal_int(stream' 4 + 4 + 4);                     marshal_tag(stream' tag.Blob);                     marshal_tag(stream' tag.Chunk);                     Types.marshal_int32(stream' (uint)fi.Length);                      byte[] block = new byte[tCLIprotocol.conf.block_size];                     while (true)                     {                         int n = fs.Read(block' 0' block.Length);                         if (n == 0)                         {                             Types.marshal_int(stream' 4 + 4);                             marshal_tag(stream' tag.Blob);                             marshal_tag(stream' tag.End);                             break;                         }                         stream.Write(block' 0' n);                         tCLIprotocol.dProgress(n);                     }                 }             }             catch (DirectoryNotFoundException)             {                 marshal_response(stream' tag.Failed);             }             catch (FileNotFoundException)             {                 marshal_response(stream' tag.Failed);             }
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: try             {                 using (FileStream fs = new FileStream(filename' FileMode.Open' FileAccess.Read))                 {                     FileInfo fi = new FileInfo(filename);                     // Immediately report our success in opening the file                     marshal_response(stream' tag.OK);                      // The server doesn't like multiple chunks but this is fine for                     // Zurich/Geneva imports                     Types.marshal_int(stream' 4 + 4 + 4);                     marshal_tag(stream' tag.Blob);                     marshal_tag(stream' tag.Chunk);                     Types.marshal_int32(stream' (uint)fi.Length);                      byte[] block = new byte[tCLIprotocol.conf.block_size];                     while (true)                     {                         int n = fs.Read(block' 0' block.Length);                         if (n == 0)                         {                             Types.marshal_int(stream' 4 + 4);                             marshal_tag(stream' tag.Blob);                             marshal_tag(stream' tag.End);                             break;                         }                         stream.Write(block' 0' n);                         tCLIprotocol.dProgress(n);                     }                 }             }             catch (DirectoryNotFoundException)             {                 marshal_response(stream' tag.Failed);             }             catch (FileNotFoundException)             {                 marshal_response(stream' tag.Failed);             }
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: try             {                 using (FileStream fs = new FileStream(filename' FileMode.Open' FileAccess.Read))                 {                     FileInfo fi = new FileInfo(filename);                     // Immediately report our success in opening the file                     marshal_response(stream' tag.OK);                      // The server doesn't like multiple chunks but this is fine for                     // Zurich/Geneva imports                     Types.marshal_int(stream' 4 + 4 + 4);                     marshal_tag(stream' tag.Blob);                     marshal_tag(stream' tag.Chunk);                     Types.marshal_int32(stream' (uint)fi.Length);                      byte[] block = new byte[tCLIprotocol.conf.block_size];                     while (true)                     {                         int n = fs.Read(block' 0' block.Length);                         if (n == 0)                         {                             Types.marshal_int(stream' 4 + 4);                             marshal_tag(stream' tag.Blob);                             marshal_tag(stream' tag.End);                             break;                         }                         stream.Write(block' 0' n);                         tCLIprotocol.dProgress(n);                     }                 }             }             catch (DirectoryNotFoundException)             {                 marshal_response(stream' tag.Failed);             }             catch (FileNotFoundException)             {                 marshal_response(stream' tag.Failed);             }
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: while (!tCLIprotocol.dropOut)             {                 Types.unmarshal_int32(stream); // total message length (unused here)	                 Messages.tag t = Messages.unmarshal_tag(stream);                 switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }             }
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: while (!tCLIprotocol.dropOut)             {                 Types.unmarshal_int32(stream); // total message length (unused here)	                 Messages.tag t = Messages.unmarshal_tag(stream);                 switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }             }
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: while (!tCLIprotocol.dropOut)             {                 Types.unmarshal_int32(stream); // total message length (unused here)	                 Messages.tag t = Messages.unmarshal_tag(stream);                 switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }             }
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: while (!tCLIprotocol.dropOut)             {                 Types.unmarshal_int32(stream); // total message length (unused here)	                 Messages.tag t = Messages.unmarshal_tag(stream);                 switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }             }
Magic Number,CommandLib,Messages,C:\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: while (!tCLIprotocol.dropOut)             {                 Types.unmarshal_int32(stream); // total message length (unused here)	                 Messages.tag t = Messages.unmarshal_tag(stream);                 switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }             }
