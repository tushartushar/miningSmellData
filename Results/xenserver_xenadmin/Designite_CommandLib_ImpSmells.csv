Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CommandLib,HTTP,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,doRPC,Cyclomatic complexity of the method is 9
Complex Method,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,Cyclomatic complexity of the method is 14
Long Parameter List,CommandLib,thinCLIProtocol,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,thinCLIProtocol,The method has 9 parameters. Parameters: dGlobalError' dGlobalUsage' dGlobalDebug' dConsoleWrite' dConsoleWriteLine' dConsoleReadLine' dExit' dProgress' conf
Long Statement,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,version_handshake,The length of the statement  "                tCLIprotocol.dGlobalError("Protocol version mismatch talking to server on " + tCLIprotocol.conf.hostname + ":" + tCLIprotocol.conf.port);" is 137.
Long Statement,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The length of the statement  "                _Hash64 = RotateLeft64(_ACC64_1' 1) + RotateLeft64(_ACC64_2' 7) + RotateLeft64(_ACC64_3' 12) + RotateLeft64(_ACC64_4' 18);" is 122.
Long Statement,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The length of the statement  "                _Hash64 = RotateLeft64_27(_Hash64 ^ Round64(0' FuncGetLittleEndianUInt64(_CurrentArray' _CurrentIndex))) * PRIME64_1 + PRIME64_4;" is 129.
Long Statement,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The length of the statement  "                _Hash64 = RotateLeft64(_Hash64 ^ Round64(0' FuncGetLittleEndianUInt64(_CurrentArray' _CurrentIndex))' 27) * PRIME64_1 + PRIME64_4;" is 130.
Long Statement,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The length of the statement  "                _Hash64 = RotateLeft64_23(_Hash64 ^ (FuncGetLittleEndianUInt32(_CurrentArray' _CurrentIndex) * PRIME64_1)) * PRIME64_2 + PRIME64_3;" is 131.
Long Statement,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The length of the statement  "                _Hash64 = RotateLeft64(_Hash64 ^ (FuncGetLittleEndianUInt32(_CurrentArray' _CurrentIndex) * PRIME64_1)' 23) * PRIME64_2 + PRIME64_3;" is 132.
Magic Number,CommandLib,Transport,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,connect,The following statement contains a magic number: port != 443
Magic Number,CommandLib,HTTP,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,getResultCode,The following statement contains a magic number: bits.Length < 2
Magic Number,CommandLib,HTTP,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,doRPC,The following statement contains a magic number: switch (code)             {                 case 200:                     break;                 case 302:                     string url = "";                     while (true)                     {                         response = readLine(http);                         if (response.StartsWith("Location: "))                             url = response.Substring(10);                         if (response.Equals("\r\n") || response.Equals("")) break;                     }                     Uri redirect = new Uri(url.Trim());                     tCLIprotocol.conf.hostname = redirect.Host;                     http.Close();                     return doRPC(method' redirect' tCLIprotocol' headers);                 default:                     tCLIprotocol.dGlobalError(string.Format("Received error code {0} from the server doing an HTTP {1}"' code' method));                     http.Close();                     return null;             }
Magic Number,CommandLib,HTTP,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,doRPC,The following statement contains a magic number: switch (code)             {                 case 200:                     break;                 case 302:                     string url = "";                     while (true)                     {                         response = readLine(http);                         if (response.StartsWith("Location: "))                             url = response.Substring(10);                         if (response.Equals("\r\n") || response.Equals("")) break;                     }                     Uri redirect = new Uri(url.Trim());                     tCLIprotocol.conf.hostname = redirect.Host;                     http.Close();                     return doRPC(method' redirect' tCLIprotocol' headers);                 default:                     tCLIprotocol.dGlobalError(string.Format("Received error code {0} from the server doing an HTTP {1}"' code' method));                     http.Close();                     return null;             }
Magic Number,CommandLib,HTTP,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,doRPC,The following statement contains a magic number: switch (code)             {                 case 200:                     break;                 case 302:                     string url = "";                     while (true)                     {                         response = readLine(http);                         if (response.StartsWith("Location: "))                             url = response.Substring(10);                         if (response.Equals("\r\n") || response.Equals("")) break;                     }                     Uri redirect = new Uri(url.Trim());                     tCLIprotocol.conf.hostname = redirect.Host;                     http.Close();                     return doRPC(method' redirect' tCLIprotocol' headers);                 default:                     tCLIprotocol.dGlobalError(string.Format("Received error code {0} from the server doing an HTTP {1}"' code' method));                     http.Close();                     return null;             }
Magic Number,CommandLib,Types,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,unmarshal_int32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,CommandLib,Types,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,unmarshal_int32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,CommandLib,Types,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,unmarshal_int32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,CommandLib,Types,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_int32,The following statement contains a magic number: stream.WriteByte((byte) ((x >> 8) & mask));
Magic Number,CommandLib,Types,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_int32,The following statement contains a magic number: stream.WriteByte((byte) ((x >> 16) & mask));
Magic Number,CommandLib,Types,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_int32,The following statement contains a magic number: stream.WriteByte((byte) ((x >> 24) & mask));
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_response,The following statement contains a magic number: Types.marshal_int(stream' 4 + 4);
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,marshal_response,The following statement contains a magic number: Types.marshal_int(stream' 4 + 4);
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: Types.marshal_int(stream' 4 + 4 + 4);
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: Types.marshal_int(stream' 4 + 4 + 4);
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: Types.marshal_int(stream' 4 + 4 + 4);
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: Types.marshal_int(stream' 4 + 4);
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,load,The following statement contains a magic number: Types.marshal_int(stream' 4 + 4);
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }
Magic Number,CommandLib,Messages,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\thinCLIProtocol.cs,interpreter,The following statement contains a magic number: switch (t)                 {                     case Messages.tag.Command:                         t = Messages.unmarshal_tag(stream);                         switch (t)                         {                             case Messages.tag.Print:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Print: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.PrintStderr:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: PrintStderr: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                  break;                             case Messages.tag.Debug:                                 msg = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Debug: " + msg' tCLIprotocol);                                 tCLIprotocol.dConsoleWriteLine(msg);                                 break;                             case Messages.tag.Exit:                                 int code = Types.unmarshal_int(stream);                                 tCLIprotocol.dGlobalDebug("Read: Command Exit " + code' tCLIprotocol);                                 tCLIprotocol.dExit(code);                                 break;                             case Messages.tag.Error:                                 tCLIprotocol.dGlobalDebug("Read: Command Error"' tCLIprotocol);                                 string err_code = Types.unmarshal_string(stream);                                 tCLIprotocol.dConsoleWriteLine("Error code: " + err_code);                                 tCLIprotocol.dConsoleWrite("Error params: ");                                 int length = Types.unmarshal_int(stream);                                 for (int i = 0; i < length; i++)                                 {                                     string param = Types.unmarshal_string(stream);                                     tCLIprotocol.dConsoleWrite(param);                                     if (i != (length - 1)) tCLIprotocol.dConsoleWrite("' ");                                 }                                 tCLIprotocol.dConsoleWriteLine("");                                 break;                             case Messages.tag.Prompt:                                 tCLIprotocol.dGlobalDebug("Read: Command Prompt"' tCLIprotocol);                                 string response = tCLIprotocol.dConsoleReadLine(); 				tCLIprotocol.dConsoleWriteLine("Read "+response); 				/* NB' 4+4+4 here for the blob' chunk and string length' put in by the marshal_string 				function. A franken-marshal. */                                 Types.marshal_int(stream' 4 + 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.Chunk);                                 Types.marshal_string(stream' response);                                 Types.marshal_int(stream' 4 + 4); // length                                 Messages.marshal_tag(stream' Messages.tag.Blob);                                 Messages.marshal_tag(stream' Messages.tag.End);                                 break;                             case Messages.tag.Load:                                 filename = Types.unmarshal_string(stream);                                 tCLIprotocol.dGlobalDebug("Read: Load " + filename' tCLIprotocol);                                 Messages.load(stream' filename' tCLIprotocol);                                 break;                             case Messages.tag.HttpPut:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 Uri uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpPut " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_put(stream' filename' uri' tCLIprotocol);                                 break;                             case Messages.tag.HttpGet:                                 filename = Types.unmarshal_string(stream);                                 path = Types.unmarshal_string(stream);                                 uri = ParseUri(path' tCLIprotocol);                                 tCLIprotocol.dGlobalDebug("Read: HttpGet " + filename + " -> " + uri' tCLIprotocol);                                 Messages.http_get(stream' filename' uri' tCLIprotocol);                                 break;                             default:                                 Messages.protocol_failure("Command"' t' tCLIprotocol);                                 break;                         }                         break;                     default:                         Messages.protocol_failure("Message"' t' tCLIprotocol);                         break;                 }
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,XXHash64,The following statement contains a magic number: FuncGetFinalHashUInt64 = new Func<ulong' ulong>(i => (i & 0x00000000000000FFUL) << 56 | (i & 0x000000000000FF00UL) << 40 | (i & 0x0000000000FF0000UL) << 24 | (i & 0x00000000FF000000UL) << 8 | (i & 0x000000FF00000000UL) >> 8 | (i & 0x0000FF0000000000UL) >> 24 | (i & 0x00FF000000000000UL) >> 40 | (i & 0xFF00000000000000UL) >> 56);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,XXHash64,The following statement contains a magic number: FuncGetFinalHashUInt64 = new Func<ulong' ulong>(i => (i & 0x00000000000000FFUL) << 56 | (i & 0x000000000000FF00UL) << 40 | (i & 0x0000000000FF0000UL) << 24 | (i & 0x00000000FF000000UL) << 8 | (i & 0x000000FF00000000UL) >> 8 | (i & 0x0000FF0000000000UL) >> 24 | (i & 0x00FF000000000000UL) >> 40 | (i & 0xFF00000000000000UL) >> 56);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,XXHash64,The following statement contains a magic number: FuncGetFinalHashUInt64 = new Func<ulong' ulong>(i => (i & 0x00000000000000FFUL) << 56 | (i & 0x000000000000FF00UL) << 40 | (i & 0x0000000000FF0000UL) << 24 | (i & 0x00000000FF000000UL) << 8 | (i & 0x000000FF00000000UL) >> 8 | (i & 0x0000FF0000000000UL) >> 24 | (i & 0x00FF000000000000UL) >> 40 | (i & 0xFF00000000000000UL) >> 56);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,XXHash64,The following statement contains a magic number: FuncGetFinalHashUInt64 = new Func<ulong' ulong>(i => (i & 0x00000000000000FFUL) << 56 | (i & 0x000000000000FF00UL) << 40 | (i & 0x0000000000FF0000UL) << 24 | (i & 0x00000000FF000000UL) << 8 | (i & 0x000000FF00000000UL) >> 8 | (i & 0x0000FF0000000000UL) >> 24 | (i & 0x00FF000000000000UL) >> 40 | (i & 0xFF00000000000000UL) >> 56);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,XXHash64,The following statement contains a magic number: FuncGetFinalHashUInt64 = new Func<ulong' ulong>(i => (i & 0x00000000000000FFUL) << 56 | (i & 0x000000000000FF00UL) << 40 | (i & 0x0000000000FF0000UL) << 24 | (i & 0x00000000FF000000UL) << 8 | (i & 0x000000FF00000000UL) >> 8 | (i & 0x0000FF0000000000UL) >> 24 | (i & 0x00FF000000000000UL) >> 40 | (i & 0xFF00000000000000UL) >> 56);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,XXHash64,The following statement contains a magic number: FuncGetFinalHashUInt64 = new Func<ulong' ulong>(i => (i & 0x00000000000000FFUL) << 56 | (i & 0x000000000000FF00UL) << 40 | (i & 0x0000000000FF0000UL) << 24 | (i & 0x00000000FF000000UL) << 8 | (i & 0x000000FF00000000UL) >> 8 | (i & 0x0000FF0000000000UL) >> 24 | (i & 0x00FF000000000000UL) >> 40 | (i & 0xFF00000000000000UL) >> 56);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,XXHash64,The following statement contains a magic number: FuncGetFinalHashUInt64 = new Func<ulong' ulong>(i => (i & 0x00000000000000FFUL) << 56 | (i & 0x000000000000FF00UL) << 40 | (i & 0x0000000000FF0000UL) << 24 | (i & 0x00000000FF000000UL) << 8 | (i & 0x000000FF00000000UL) >> 8 | (i & 0x0000FF0000000000UL) >> 24 | (i & 0x00FF000000000000UL) >> 40 | (i & 0xFF00000000000000UL) >> 56);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,XXHash64,The following statement contains a magic number: FuncGetFinalHashUInt64 = new Func<ulong' ulong>(i => (i & 0x00000000000000FFUL) << 56 | (i & 0x000000000000FF00UL) << 40 | (i & 0x0000000000FF0000UL) << 24 | (i & 0x00000000FF000000UL) << 8 | (i & 0x000000FF00000000UL) >> 8 | (i & 0x0000FF0000000000UL) >> 24 | (i & 0x00FF000000000000UL) >> 40 | (i & 0xFF00000000000000UL) >> 56);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashCore,The following statement contains a magic number: _RemainingLength = size & 31;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashCore,The following statement contains a magic number: ibStart += 8;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashCore,The following statement contains a magic number: ibStart += 8;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashCore,The following statement contains a magic number: ibStart += 8;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashCore,The following statement contains a magic number: ibStart += 8;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashCore,The following statement contains a magic number: cbSize >= 32
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _Hash64 = RotateLeft64(_ACC64_1' 1) + RotateLeft64(_ACC64_2' 7) + RotateLeft64(_ACC64_3' 12) + RotateLeft64(_ACC64_4' 18);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _Hash64 = RotateLeft64(_ACC64_1' 1) + RotateLeft64(_ACC64_2' 7) + RotateLeft64(_ACC64_3' 12) + RotateLeft64(_ACC64_4' 18);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _Hash64 = RotateLeft64(_ACC64_1' 1) + RotateLeft64(_ACC64_2' 7) + RotateLeft64(_ACC64_3' 12) + RotateLeft64(_ACC64_4' 18);
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _TotalLength >= 32
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _Hash64 = RotateLeft64(_Hash64 ^ Round64(0' FuncGetLittleEndianUInt64(_CurrentArray' _CurrentIndex))' 27) * PRIME64_1 + PRIME64_4;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _CurrentIndex += 8;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _RemainingLength -= 8;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _RemainingLength >= 8
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _Hash64 = RotateLeft64(_Hash64 ^ (FuncGetLittleEndianUInt32(_CurrentArray' _CurrentIndex) * PRIME64_1)' 23) * PRIME64_2 + PRIME64_3;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _CurrentIndex += 4;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _RemainingLength -= 4;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _RemainingLength >= 4
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _Hash64 = RotateLeft64(_Hash64 ^ (_CurrentArray[_CurrentIndex++] * PRIME64_5)' 11) * PRIME64_1;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _Hash64 = (_Hash64 ^ (_Hash64 >> 33)) * PRIME64_2;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _Hash64 = (_Hash64 ^ (_Hash64 >> 29)) * PRIME64_3;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,HashFinal,The following statement contains a magic number: _Hash64 ^= _Hash64 >> 32;
Magic Number,YYProject.XXHash,XXHash64,D:\research\architectureSmells\repos\xenserver_xenadmin\CommandLib\XXHash.cs,Initialize,The following statement contains a magic number: HashSizeValue = 64;
