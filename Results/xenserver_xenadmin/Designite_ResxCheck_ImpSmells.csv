Implementation smell,Namespace,Class,File,Method,Description
Long Method,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,TrimJaResxs,The method has 129 lines of code.
Complex Method,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,FindUnusedMessages,Cyclomatic complexity of the method is 13
Complex Method,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,TrimJaResxs,Cyclomatic complexity of the method is 21
Long Statement,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,FindUnusedMessages,The length of the statement  "            Console.WriteLine(string.Format("FriendlyNames.resx: {0}/{1} are unused"' friendlyErrorNames' totalFriendlyErrorNames));" is 120.
Long Statement,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,TrimJaResxs,The length of the statement  "                            Console.WriteLine(string.Format("{0} is missing. Tag {1} needs i18n. Copying en resx across."' jaFilename' enNode.Attributes["name"].Value));" is 141.
Long Statement,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,CheckNotBorked,The length of the statement  "            origXml.LoadXml(File.ReadAllText(@"C:\Documents and Settings\hwarrington\xenadmin-unstable.hg\XenAdmin\XenAPI\FriendlyNames.resx"));" is 132.
Long Statement,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,CheckNotBorked,The length of the statement  "            newXml.LoadXml(File.ReadAllText(@"Q:\local\scratch-2\hwarrington\build.hg\myrepos\api.hg\ocaml\idl\csharp_backend\autogen-gui\FriendlyNames.resx"));" is 148.
Long Statement,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,CheckAIncludesB,The length of the statement  "                    throw new Exception(String.Format("Node with name {0} has value {1} in old but {2} in new!"' name' oldValue' newValue));" is 120.
Magic Number,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,FindUnusedMessages,The following statement contains a magic number: if (removeUnused)             {                 Console.WriteLine("Removing unused messages from Messages.resx");                  List<string> unusedFromMessages = new List<string>();                 foreach (string line in resources)                 {                     if (line.StartsWith("Messages."))                     {                         unusedFromMessages.Add(line.Substring(9));                     }                 }                  string path = Path.Combine(rootDir' "Messages.resx");                 XmlDocument doc = new XmlDocument();                 doc.LoadXml(File.ReadAllText(path));                  List<XmlNode> nodesToRemove = new List<XmlNode>();                 foreach (XmlNode node in doc.GetElementsByTagName("data"))                 {                     if (unusedFromMessages.Contains(node.Attributes["name"].Value))                     {                         nodesToRemove.Add(node);                     }                 }                  foreach (XmlNode node in nodesToRemove)                 {                     doc.ChildNodes[1].RemoveChild(node);                 }                  doc.Save(path);             }
Magic Number,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,FindNodesInJaButNotEn,The following statement contains a magic number: foreach (FileInfo enResxFile in enResxFiles)             {                 string enResxPath = enResxFile.FullName;                 XmlDocument enXml = new XmlDocument();                 enXml.LoadXml(File.ReadAllText(enResxPath));                  string jaFilename = enResxPath.Substring(rootDir.Length);                 jaFilename = jaFilename.Insert(jaFilename.Length - 5' ".ja");                 string jaResxPath = rootDir + "\\i18n\\ja" + jaFilename;                 XmlDocument jaXml = new XmlDocument();                 if (!File.Exists(jaResxPath))                 {                     continue;                 }                 jaXml.LoadXml(File.ReadAllText(jaResxPath));                  XmlNodeList enDataNodes = enXml.GetElementsByTagName("data");                 XmlNodeList jaDataNodes = jaXml.GetElementsByTagName("data");                  List<XmlNode> jaDataNodeList = new List<XmlNode>();                 foreach (XmlNode jaNode in jaDataNodes)                 {                     jaDataNodeList.Add(jaNode);                 }                  List<XmlNode> inJaButNotEn = jaDataNodeList.FindAll((Predicate<XmlNode>)delegate(XmlNode jaNode)                 {                     string jaDataName = jaNode.Attributes["name"].Value;                     foreach (XmlNode enNode in enDataNodes)                     {                         if (enNode.Attributes["name"].Value == jaDataName)                         {                             return enNode.InnerXml != jaNode.InnerXml;                         }                     }                     return true;                 });                  foreach (XmlNode node in inJaButNotEn)                 {                     System.Console.WriteLine(string.Format("'{0}' is in '{1}' but not in '{2}'"'                         node.Attributes["name"].Value'                         jaResxPath'                         enResxFile.Name));                 }             }
Magic Number,ResxCheck,ResxCheck,C:\repos\xenserver_xenadmin\devtools\ResxCheck\ResxCheck.cs,TrimJaResxs,The following statement contains a magic number: foreach (FileInfo enResxFile in enResxFiles)             {                 if (ExcludeResx(enResxFile.FullName))                 {                     continue;                 }                  // Load the en resx                 string enResxPath = enResxFile.FullName;                 XmlDocument enXml = new XmlDocument();                 enXml.LoadXml(File.ReadAllText(enResxPath));                 XmlNodeList enDataNodes = enXml.GetElementsByTagName("data");                  // Find the ja resx                 string jaFilename = enResxPath.Substring(rootDir.Length);                 jaFilename = jaFilename.Insert(jaFilename.Length - 5' ".ja");                 string jaResxPath = rootDir + "\\i18n\\ja" + jaFilename;                                  if (!File.Exists(jaResxPath))                 {                     // There is no ja resx file corresponding to the en resx. We need to check there are no i18nable tags                     // in the en resx.                     bool i18nRequired = false;                     foreach (XmlNode enNode in enDataNodes)                     {                         if (IsI18nableProperty(enResxFile.Name' enNode.Attributes["name"].Value))                         {                             Console.WriteLine(string.Format("{0} is missing. Tag {1} needs i18n. Copying en resx across."' jaFilename' enNode.Attributes["name"].Value));                             Directory.CreateDirectory(Path.GetDirectoryName(jaResxPath));                             File.Copy(enResxPath' jaResxPath);                             i18nRequired = true;                             break;                         }                     }                     if (!i18nRequired)                     {                         continue;                     }                 }                  // Load the ja resx                 XmlDocument jaXml = new XmlDocument();                 jaXml.LoadXml(File.ReadAllText(jaResxPath));                 XmlNodeList jaDataNodes = jaXml.GetElementsByTagName("data");                 // Take a copy of the jaDataNodes                 List<XmlNode> jaDataNodeList = new List<XmlNode>();                 foreach (XmlNode node in jaDataNodes)                 {                     jaDataNodeList.Add(node);                 }                  // Go through all the ja nodes' keeping only the ones where their values differ from the en original                 // Don't bother to do this for the messages files.                 if (enResxFile.Name != "Messages.resx" && enResxFile.Name != "FriendlyNames.resx" &&                     enResxFile.Name != "FriendlyNames.resx")                 {                     foreach (XmlNode jaNode in jaDataNodeList)                     {                         string jaDataName = jaNode.Attributes["name"].Value;                          if (!IsI18nableProperty(jaFilename' jaDataName))                         {                             // Delete node                             jaXml.GetElementsByTagName("root")[0].RemoveChild(jaNode);                             continue;                         }                          foreach (XmlNode enNode in enDataNodes)                         {                             if (enNode.Attributes["name"].Value == jaDataName)                             {                                 if (enNode.InnerXml == jaNode.InnerXml)                                 {                                     // If node unchanged' delete it                                     jaXml.GetElementsByTagName("root")[0].RemoveChild(jaNode);                                     break;                                 }                             }                         }                     }                 }                  // Now add any nodes that are in en but not ja (as long as they are of the i18nable types).                 foreach (XmlNode enNode in enDataNodes)                 {                     bool needToAdd = true;                      foreach (XmlNode jaNode in jaDataNodes)                     {                         if (enNode.Attributes["name"].Value == jaNode.Attributes["name"].Value)                         {                             needToAdd = false;                             break;                         }                     }                      if (needToAdd && IsI18nableProperty(enResxFile.Name' enNode.Attributes["name"].Value))                     {                         XmlNode n = jaXml.GetElementsByTagName("root")[0].AppendChild(jaXml.ImportNode(enNode' true));                         foreach (XmlNode child in n.ChildNodes)                         {                             if (child is XmlWhitespace)                                 continue;                             if (child is XmlSignificantWhitespace)                                 continue;                             else                                 child.InnerText += " (ja)";                         }                     }                 }                  XmlWriterSettings settings = new XmlWriterSettings();                 settings.CloseOutput = true;                 settings.Indent = true;                 XmlWriter writer = XmlWriter.Create(jaResxPath' settings);                 jaXml.WriteContentTo(writer);                 writer.Flush();                 writer.Close();             }
