Implementation smell,Namespace,Class,File,Method,Description
Long Method,XenServerHealthCheck,XenServerHealthCheckBugTool,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBugTool.cs,RunBugtool,The method has 111 lines of code.
Long Method,XenServerHealthCheck,XenServerHealthCheckBundleUpload,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,runUpload,The method has 113 lines of code.
Complex Method,XenServerHealthCheck,XenServerHealthCheckBugTool,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBugTool.cs,RunBugtool,Cyclomatic complexity of the method is 17
Complex Method,XenServerHealthCheck,XenServerHealthCheckBundleUpload,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,runUpload,Cyclomatic complexity of the method is 9
Complex Method,XenServerHealthCheck,RequestUploadTask,C:\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,Request,Cyclomatic complexity of the method is 14
Long Identifier,XenServerHealthCheck,Registry,C:\repos\xenserver_xenadmin\XenServerHealthCheck\Registry.cs,,The length of the parameter HEALTH_CHECK_UPLOAD_DOMAIN_NAME is 31.
Long Identifier,XenServerHealthCheck,ProjectInstaller,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ProjectInstaller.cs,,The length of the parameter XenServerHealthCheckProcessInstaller is 36.
Long Statement,XenServerHealthCheck,CredentialReceiver,C:\repos\xenserver_xenadmin\XenServerHealthCheck\CredentialReceiver.cs,Init,The length of the statement  "                pipeServer = new NamedPipeServerStream(HealthCheckSettings.HEALTH_CHECK_PIPE' PipeDirection.In' 1' PipeTransmissionMode.Message' PipeOptions.Asynchronous' 0' 0' sec); " is 166.
Long Statement,XenServerHealthCheck,CredentialReceiver,C:\repos\xenserver_xenadmin\XenServerHealthCheck\CredentialReceiver.cs,reInitPipe,The length of the statement  "            pipeServer = new NamedPipeServerStream(HealthCheckSettings.HEALTH_CHECK_PIPE' PipeDirection.In' 1' PipeTransmissionMode.Message' PipeOptions.Asynchronous' 0' 0' sec); " is 166.
Long Statement,XenServerHealthCheck,XenServerHealthCheckBugTool,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBugTool.cs,RunBugtool,The length of the statement  "                SingleHostStatusAction statAction = new SingleHostStatusAction(hostWithStatus' reportIncluded' filepath' timestring + "-" + ++i);" is 129.
Long Statement,XenServerHealthCheck,XenServerHealthCheckBundleUpload,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,runUpload,The length of the statement  "                session.login_with_password(connection.Username' connection.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent); " is 134.
Long Statement,XenServerHealthCheck,XenServerHealthCheckBundleUpload,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,updateHealthCheckSettings,The length of the statement  "            session.login_with_password(connection.Username' connection.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent); " is 134.
Long Statement,XenServerHealthCheck,XenServerHealthCheckBundleUpload,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,updateHealthCheckSettings,The length of the statement  "                if (HealthCheckSettings.TryParseStringToDateTime(config[HealthCheckSettings.NEW_UPLOAD_REQUEST]' out newUploadRequestTime)) " is 123.
Long Statement,XenServerHealthCheck,XenServerHealthCheckBundleUpload,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,bundleUpload,The length of the statement  "            XenServerHealthCheckUpload upload = new XenServerHealthCheckUpload(uploadToken' VERBOSITY_LEVEL' upload_url' connection); " is 121.
Long Statement,XenServerHealthCheck,ProjectInstaller,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ProjectInstaller.cs,InitializeComponent,The length of the statement  "            this.XenServerHealthCheckInstaller.Description = Branding.COMPANY_NAME_SHORT + " " + Branding.PRODUCT_BRAND + " Health Check"; " is 126.
Long Statement,XenServerHealthCheck,ProjectInstaller,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ProjectInstaller.cs,InitializeComponent,The length of the statement  "            this.XenServerHealthCheckInstaller.DisplayName = Branding.COMPANY_NAME_SHORT + " " + Branding.PRODUCT_BRAND + " Health Check"; " is 126.
Long Statement,XenServerHealthCheck,ProjectInstaller,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ProjectInstaller.cs,InitializeComponent,The length of the statement  "            this.XenServerHealthCheckInstaller.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.XenServerHealthCheckInstaller_AfterInstall); " is 153.
Long Statement,XenServerHealthCheck,ProjectInstaller,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ProjectInstaller.cs,InitializeComponent,The length of the statement  "            this.XenServerHealthCheckProcessInstaller.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.XenServerHealthCheckProcessInstaller_AfterInstall); " is 167.
Long Statement,XenServerHealthCheck,RequestUploadTask,C:\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,Request,The length of the statement  "            int intervalInDays = IntKey(config' HealthCheckSettings.INTERVAL_IN_DAYS' HealthCheckSettings.DEFAULT_INTERVAL_IN_DAYS); " is 120.
Long Statement,XenServerHealthCheck,RequestUploadTask,C:\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,Request,The length of the statement  "                log.InfoFormat("Upload schedule for {0} is {1}:{2}' meet current time {3}"' connection.Hostname' dayOfWeek' TimeOfDay' currentTime.ToString()); " is 143.
Long Statement,XenServerHealthCheck,RequestUploadTask,C:\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,OnDemandRequest,The length of the statement  "                DateTime newUploadRequestDueTime = newUploadRequestTime.AddMinutes(HealthCheckSettings.UPLOAD_REQUEST_VALIDITY_INTERVAL); " is 121.
Long Statement,XenServerHealthCheck,RequestUploadTask,C:\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,OnDemandRequest,The length of the statement  "                    log.InfoFormat("Will report on demand for XenServer {0} since the demand was requested on {1} (UTC time)"' connection.Hostname' newUploadRequestTime); " is 150.
Long Statement,XenServerHealthCheck,RequestUploadTask,C:\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,OnDemandRequest,The length of the statement  "                    log.InfoFormat("Will not report on demand for XenServer {0} since the demand requested on {1} (UTC time) expired after {2} minutes"' " is 132.
Long Statement,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The length of the statement  "            if (decryptCredentialComps.Length == 3 && (string.IsNullOrEmpty(decryptCredentialComps[1]) || string.IsNullOrEmpty(decryptCredentialComps[2]))) " is 143.
Long Statement,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The length of the statement  "                        Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7])); " is 128.
Long Statement,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The length of the statement  "                        Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8])); " is 128.
Long Statement,XenServerHealthCheck,XenServerHealthCheckService,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The length of the statement  "                    session.login_with_password(server.UserName' server.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent); " is 126.
Long Statement,XenServerHealthCheck,XenServerHealthCheckService,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The length of the statement  "                        session.login_with_password(server.UserName' server.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent); " is 126.
Complex Conditional,XenServerHealthCheck,XenServerHealthCheckService,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnStop,The conditional expression  "server.task != null && !(server.task.IsCompleted || server.task.IsCanceled || server.task.IsFaulted)"  is complex.
Complex Conditional,XenServerHealthCheck,XenServerHealthCheckService,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The conditional expression  "server.task != null && (!server.task.IsCompleted || !server.task.IsCanceled || !server.task.IsFaulted)"  is complex.
Magic Number,XenServerHealthCheck,XenServerHealthCheckBundleUpload,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,runUpload,The following statement contains a magic number: Session session = new Session(connection.Hostname' 80);
Magic Number,XenServerHealthCheck,XenServerHealthCheckBundleUpload,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,updateHealthCheckSettings,The following statement contains a magic number: Session session = new Session(connection.Hostname' 80);
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,Init,The following statement contains a magic number: lock (serverListLock)              {                  serverList = new List<ServerInfo>();                  string[] encServerList = Properties.Settings.Default.ServerList ?? new string[0];                  foreach (string encServer in encServerList)                  {                      string decryptCredential = EncryptionUtils.Unprotect(encServer);                      string[] decryptCredentialComps = decryptCredential.Split(SEPARATOR);                      ServerInfo connection = new ServerInfo();                      connection.HostName = decryptCredentialComps[0];                      connection.UserName = decryptCredentialComps[1];                      connection.Password = decryptCredentialComps[2];                      connection.task = null;                      serverList.Add(connection);                  }              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: if (decryptCredentialComps.Length != 1 && decryptCredentialComps.Length != 3)                  return;
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: if (decryptCredentialComps.Length == 3 && (string.IsNullOrEmpty(decryptCredentialComps[1]) || string.IsNullOrEmpty(decryptCredentialComps[2])))                  return;
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: if (decryptCredentialComps.Length == 3 && (string.IsNullOrEmpty(decryptCredentialComps[1]) || string.IsNullOrEmpty(decryptCredentialComps[2])))                  return;
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: lock (serverListLock)              {                  if (decryptCredentialComps.Length == 3)                  {//Add credential                      System.Threading.Tasks.Task originalTask = null;                      foreach (ServerInfo connection in serverList)                      {                          if (connection.HostName == decryptCredentialComps[0])                          {                              originalTask = connection.task;                              serverList.Remove(connection);                              log.Info("Refresh credential");                              break;                          }                      }                      ServerInfo newConnection = new ServerInfo();                      newConnection.HostName = decryptCredentialComps[0];                      newConnection.UserName = decryptCredentialComps[1];                      newConnection.Password = decryptCredentialComps[2];                      newConnection.task = originalTask;                      serverList.Add(newConnection);                      log.InfoFormat("Add credential' current credential size is {0}"' serverList.Count);                  }                  else if (decryptCredentialComps.Length == 1)                  {//remove credential                      foreach (ServerInfo connection in serverList)                      {                          if (connection.HostName == decryptCredentialComps[0])                          {                              serverList.Remove(connection);                              log.InfoFormat("Remove credential' current credential size is {0}"' serverList.Count);                              break;                          }                      }                  }                    updateServerList();              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: lock (serverListLock)              {                  if (decryptCredentialComps.Length == 3)                  {//Add credential                      System.Threading.Tasks.Task originalTask = null;                      foreach (ServerInfo connection in serverList)                      {                          if (connection.HostName == decryptCredentialComps[0])                          {                              originalTask = connection.task;                              serverList.Remove(connection);                              log.Info("Refresh credential");                              break;                          }                      }                      ServerInfo newConnection = new ServerInfo();                      newConnection.HostName = decryptCredentialComps[0];                      newConnection.UserName = decryptCredentialComps[1];                      newConnection.Password = decryptCredentialComps[2];                      newConnection.task = originalTask;                      serverList.Add(newConnection);                      log.InfoFormat("Add credential' current credential size is {0}"' serverList.Count);                  }                  else if (decryptCredentialComps.Length == 1)                  {//remove credential                      foreach (ServerInfo connection in serverList)                      {                          if (connection.HostName == decryptCredentialComps[0])                          {                              serverList.Remove(connection);                              log.InfoFormat("Remove credential' current credential size is {0}"' serverList.Count);                              break;                          }                      }                  }                    updateServerList();              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: try              {                  string[] proxySettings = proxy.Split(SEPARATOR);                  if (proxySettings.Length < 2)                      return;                    HTTPHelper.ProxyStyle proxyStyle = (HTTPHelper.ProxyStyle)Int32.Parse(proxySettings[1]);                    switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }                    Properties.Settings.Default.Save();                  XenServerHealthCheckService.ReconfigureConnectionSettings();              }              catch (Exception e)              {                  log.Error("Error parsing 'ProxySetting' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: try              {                  string[] proxySettings = proxy.Split(SEPARATOR);                  if (proxySettings.Length < 2)                      return;                    HTTPHelper.ProxyStyle proxyStyle = (HTTPHelper.ProxyStyle)Int32.Parse(proxySettings[1]);                    switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }                    Properties.Settings.Default.Save();                  XenServerHealthCheckService.ReconfigureConnectionSettings();              }              catch (Exception e)              {                  log.Error("Error parsing 'ProxySetting' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: try              {                  string[] proxySettings = proxy.Split(SEPARATOR);                  if (proxySettings.Length < 2)                      return;                    HTTPHelper.ProxyStyle proxyStyle = (HTTPHelper.ProxyStyle)Int32.Parse(proxySettings[1]);                    switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }                    Properties.Settings.Default.Save();                  XenServerHealthCheckService.ReconfigureConnectionSettings();              }              catch (Exception e)              {                  log.Error("Error parsing 'ProxySetting' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: try              {                  string[] proxySettings = proxy.Split(SEPARATOR);                  if (proxySettings.Length < 2)                      return;                    HTTPHelper.ProxyStyle proxyStyle = (HTTPHelper.ProxyStyle)Int32.Parse(proxySettings[1]);                    switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }                    Properties.Settings.Default.Save();                  XenServerHealthCheckService.ReconfigureConnectionSettings();              }              catch (Exception e)              {                  log.Error("Error parsing 'ProxySetting' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: try              {                  string[] proxySettings = proxy.Split(SEPARATOR);                  if (proxySettings.Length < 2)                      return;                    HTTPHelper.ProxyStyle proxyStyle = (HTTPHelper.ProxyStyle)Int32.Parse(proxySettings[1]);                    switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }                    Properties.Settings.Default.Save();                  XenServerHealthCheckService.ReconfigureConnectionSettings();              }              catch (Exception e)              {                  log.Error("Error parsing 'ProxySetting' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: try              {                  string[] proxySettings = proxy.Split(SEPARATOR);                  if (proxySettings.Length < 2)                      return;                    HTTPHelper.ProxyStyle proxyStyle = (HTTPHelper.ProxyStyle)Int32.Parse(proxySettings[1]);                    switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }                    Properties.Settings.Default.Save();                  XenServerHealthCheckService.ReconfigureConnectionSettings();              }              catch (Exception e)              {                  log.Error("Error parsing 'ProxySetting' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: try              {                  string[] proxySettings = proxy.Split(SEPARATOR);                  if (proxySettings.Length < 2)                      return;                    HTTPHelper.ProxyStyle proxyStyle = (HTTPHelper.ProxyStyle)Int32.Parse(proxySettings[1]);                    switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }                    Properties.Settings.Default.Save();                  XenServerHealthCheckService.ReconfigureConnectionSettings();              }              catch (Exception e)              {                  log.Error("Error parsing 'ProxySetting' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: try              {                  string[] proxySettings = proxy.Split(SEPARATOR);                  if (proxySettings.Length < 2)                      return;                    HTTPHelper.ProxyStyle proxyStyle = (HTTPHelper.ProxyStyle)Int32.Parse(proxySettings[1]);                    switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }                    Properties.Settings.Default.Save();                  XenServerHealthCheckService.ReconfigureConnectionSettings();              }              catch (Exception e)              {                  log.Error("Error parsing 'ProxySetting' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: try              {                  string[] proxySettings = proxy.Split(SEPARATOR);                  if (proxySettings.Length < 2)                      return;                    HTTPHelper.ProxyStyle proxyStyle = (HTTPHelper.ProxyStyle)Int32.Parse(proxySettings[1]);                    switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }                    Properties.Settings.Default.Save();                  XenServerHealthCheckService.ReconfigureConnectionSettings();              }              catch (Exception e)              {                  log.Error("Error parsing 'ProxySetting' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,ServerListHelper,C:\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateXenCenterMetadata,The following statement contains a magic number: try              {                  string[] metadata = message.Split(SEPARATOR);                  if (metadata.Length != 2)                       return;                  Properties.Settings.Default.XenCenterMetadata = EncryptionUtils.UnprotectForLocalMachine(metadata[1]);                  Properties.Settings.Default.Save();              }              catch (Exception e)              {                  log.Error("Error parsing 'XenCenterMetadata' from XenCenter"' e);              }
Magic Number,XenServerHealthCheck,XenServerHealthCheckService,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnStart,The following statement contains a magic number: try              {                  initConfig();                  CredentialReceiver.instance.Init();                  ServerListHelper.instance.Init();                  System.Timers.Timer timer = new System.Timers.Timer();                  timer.Interval = Registry.HealthCheckTimeInterval * 60000;                  log.InfoFormat("XenServer Health Check Service will be scheduled every {0} milliseconds"' timer.Interval);                  timer.Elapsed += new System.Timers.ElapsedEventHandler(this.OnTimer);                  timer.Start();              }              catch (Exception exp)              {                  EventLog.WriteEntry(exp.Message' System.Diagnostics.EventLogEntryType.FailureAudit);                  Stop();              }
Magic Number,XenServerHealthCheck,XenServerHealthCheckService,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnStop,The following statement contains a magic number: do              {                  canStop = true;                  List<ServerInfo> servers = ServerListHelper.instance.GetServerList();                  foreach (ServerInfo server in servers)                  {                      if (server.task != null && !(server.task.IsCompleted || server.task.IsCanceled || server.task.IsFaulted))                          canStop = false;                  }                  if(canStop == false)                      Thread.Sleep(1000);              } while (canStop == false);
Magic Number,XenServerHealthCheck,XenServerHealthCheckService,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The following statement contains a magic number: foreach (ServerInfo server in servers)              {                  if (server.task != null && (!server.task.IsCompleted || !server.task.IsCanceled || !server.task.IsFaulted))                  {                      continue;                  }                    bool needReconnect = false;                    log.InfoFormat("Check server {0} with user {1}"' server.HostName' server.UserName);                                    Session session = new Session(server.HostName' 80);                  session.APIVersion = API_Version.LATEST;                  try                  {                      session.login_with_password(server.UserName' server.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent);                  }                  catch (Exception exn)                  {                      if (exn is Failure && ((Failure)exn).ErrorDescription[0] == Failure.HOST_IS_SLAVE)                      {                          string masterName = ((Failure)exn).ErrorDescription[1];                          if (ServerListHelper.instance.UpdateServerCredential(server' masterName))                          {                              log.InfoFormat("Refresh credential to master {0} need refresh connection"' masterName);                              server.HostName = masterName;                              needReconnect = true;                          }                          else                          {                              log.InfoFormat("Remove credential since it is the slave of master {0}"' masterName);                              if (session != null)                                  session.logout();                              log.Error(exn' exn);                              continue;                          }                      }                      else                      {                          if (session != null)                              session.logout();                          log.Error(exn' exn);                          continue;                      }                  }                    try                  {                      if (needReconnect)                      {                          if (session != null)                              session.logout();                          log.InfoFormat("Reconnect to master {0}"' server.HostName);                          session = new Session(server.HostName' 80);                          session.APIVersion = API_Version.LATEST;                          session.login_with_password(server.UserName' server.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent);                      }                      XenConnection connectionInfo = new XenConnection();                      connectionInfo.Hostname = server.HostName;                      connectionInfo.Username = server.UserName;                      connectionInfo.Password = server.Password;                      connectionInfo.LoadCache(session);                      if (RequestUploadTask.Request(connectionInfo' session) || RequestUploadTask.OnDemandRequest(connectionInfo' session))                      {                          // Create a task to collect server status report and upload to CIS server                          log.InfoFormat("Start to upload server status report for XenServer {0}"' connectionInfo.Hostname);                            XenServerHealthCheckBundleUpload upload = new XenServerHealthCheckBundleUpload(connectionInfo);                          Action uploadAction = delegate()                          {                              upload.runUpload(cts.Token);                          };                          System.Threading.Tasks.Task task = new System.Threading.Tasks.Task(uploadAction);                          task.Start();                            server.task = task;                          ServerListHelper.instance.UpdateServerInfo(server);                      }                      session.logout();                      session = null;                  }                  catch (Exception exn)                  {                      if (session != null)                          session.logout();                      log.Error(exn' exn);                  }              }
Magic Number,XenServerHealthCheck,XenServerHealthCheckService,C:\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The following statement contains a magic number: foreach (ServerInfo server in servers)              {                  if (server.task != null && (!server.task.IsCompleted || !server.task.IsCanceled || !server.task.IsFaulted))                  {                      continue;                  }                    bool needReconnect = false;                    log.InfoFormat("Check server {0} with user {1}"' server.HostName' server.UserName);                                    Session session = new Session(server.HostName' 80);                  session.APIVersion = API_Version.LATEST;                  try                  {                      session.login_with_password(server.UserName' server.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent);                  }                  catch (Exception exn)                  {                      if (exn is Failure && ((Failure)exn).ErrorDescription[0] == Failure.HOST_IS_SLAVE)                      {                          string masterName = ((Failure)exn).ErrorDescription[1];                          if (ServerListHelper.instance.UpdateServerCredential(server' masterName))                          {                              log.InfoFormat("Refresh credential to master {0} need refresh connection"' masterName);                              server.HostName = masterName;                              needReconnect = true;                          }                          else                          {                              log.InfoFormat("Remove credential since it is the slave of master {0}"' masterName);                              if (session != null)                                  session.logout();                              log.Error(exn' exn);                              continue;                          }                      }                      else                      {                          if (session != null)                              session.logout();                          log.Error(exn' exn);                          continue;                      }                  }                    try                  {                      if (needReconnect)                      {                          if (session != null)                              session.logout();                          log.InfoFormat("Reconnect to master {0}"' server.HostName);                          session = new Session(server.HostName' 80);                          session.APIVersion = API_Version.LATEST;                          session.login_with_password(server.UserName' server.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent);                      }                      XenConnection connectionInfo = new XenConnection();                      connectionInfo.Hostname = server.HostName;                      connectionInfo.Username = server.UserName;                      connectionInfo.Password = server.Password;                      connectionInfo.LoadCache(session);                      if (RequestUploadTask.Request(connectionInfo' session) || RequestUploadTask.OnDemandRequest(connectionInfo' session))                      {                          // Create a task to collect server status report and upload to CIS server                          log.InfoFormat("Start to upload server status report for XenServer {0}"' connectionInfo.Hostname);                            XenServerHealthCheckBundleUpload upload = new XenServerHealthCheckBundleUpload(connectionInfo);                          Action uploadAction = delegate()                          {                              upload.runUpload(cts.Token);                          };                          System.Threading.Tasks.Task task = new System.Threading.Tasks.Task(uploadAction);                          task.Start();                            server.task = task;                          ServerListHelper.instance.UpdateServerInfo(server);                      }                      session.logout();                      session = null;                  }                  catch (Exception exn)                  {                      if (session != null)                          session.logout();                      log.Error(exn' exn);                  }              }
