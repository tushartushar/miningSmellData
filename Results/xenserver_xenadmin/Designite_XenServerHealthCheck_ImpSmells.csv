Implementation smell,Namespace,Class,File,Method,Description
Long Method,XenServerHealthCheck,XenServerHealthCheckBugTool,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBugTool.cs,RunBugtool,The method has 110 lines of code.
Long Method,XenServerHealthCheck,XenServerHealthCheckBundleUpload,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,runUpload,The method has 113 lines of code.
Complex Method,XenServerHealthCheck,XenServerHealthCheckBugTool,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBugTool.cs,RunBugtool,Cyclomatic complexity of the method is 17
Complex Method,XenServerHealthCheck,XenServerHealthCheckBundleUpload,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,runUpload,Cyclomatic complexity of the method is 9
Complex Method,XenServerHealthCheck,RequestUploadTask,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,Request,Cyclomatic complexity of the method is 13
Complex Method,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,Cyclomatic complexity of the method is 9
Long Identifier,XenServerHealthCheck,Registry,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\Registry.cs,,The length of the parameter HEALTH_CHECK_UPLOAD_DOMAIN_NAME is 31.
Long Identifier,XenServerHealthCheck,ProjectInstaller,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ProjectInstaller.cs,,The length of the parameter XenServerHealthCheckProcessInstaller is 36.
Long Statement,XenServerHealthCheck,CredentialReceiver,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\CredentialReceiver.cs,Init,The length of the statement  "                pipeServer = new NamedPipeServerStream(HealthCheckSettings.HEALTH_CHECK_PIPE' PipeDirection.In' 1' PipeTransmissionMode.Message' PipeOptions.Asynchronous' 0' 0' sec); " is 166.
Long Statement,XenServerHealthCheck,CredentialReceiver,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\CredentialReceiver.cs,reInitPipe,The length of the statement  "            pipeServer = new NamedPipeServerStream(HealthCheckSettings.HEALTH_CHECK_PIPE' PipeDirection.In' 1' PipeTransmissionMode.Message' PipeOptions.Asynchronous' 0' 0' sec); " is 166.
Long Statement,XenServerHealthCheck,XenServerHealthCheckBundleUpload,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,runUpload,The length of the statement  "                session.login_with_password(connection.Username' connection.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent); " is 134.
Long Statement,XenServerHealthCheck,XenServerHealthCheckBundleUpload,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,updateHealthCheckSettings,The length of the statement  "            session.login_with_password(connection.Username' connection.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent); " is 134.
Long Statement,XenServerHealthCheck,XenServerHealthCheckBundleUpload,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,updateHealthCheckSettings,The length of the statement  "                if (HealthCheckSettings.TryParseStringToDateTime(config[HealthCheckSettings.NEW_UPLOAD_REQUEST]' out newUploadRequestTime)) " is 123.
Long Statement,XenServerHealthCheck,ProjectInstaller,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ProjectInstaller.cs,InitializeComponent,The length of the statement  "            this.XenServerHealthCheckInstaller.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.XenServerHealthCheckInstaller_AfterInstall); " is 153.
Long Statement,XenServerHealthCheck,ProjectInstaller,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ProjectInstaller.cs,InitializeComponent,The length of the statement  "            this.XenServerHealthCheckProcessInstaller.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.XenServerHealthCheckProcessInstaller_AfterInstall); " is 167.
Long Statement,XenServerHealthCheck,RequestUploadTask,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,Request,The length of the statement  "            int intervalInDays = IntKey(config' HealthCheckSettings.INTERVAL_IN_DAYS' HealthCheckSettings.DEFAULT_INTERVAL_IN_DAYS); " is 120.
Long Statement,XenServerHealthCheck,RequestUploadTask,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,Request,The length of the statement  "                log.InfoFormat("Upload schedule for {0} is {1}:{2}' meet current time {3}"' connection.Hostname' dayOfWeek' TimeOfDay' currentTime.ToString()); " is 143.
Long Statement,XenServerHealthCheck,RequestUploadTask,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,OnDemandRequest,The length of the statement  "                DateTime newUploadRequestDueTime = newUploadRequestTime.AddMinutes(HealthCheckSettings.UPLOAD_REQUEST_VALIDITY_INTERVAL); " is 121.
Long Statement,XenServerHealthCheck,RequestUploadTask,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,OnDemandRequest,The length of the statement  "                    log.InfoFormat("Will report on demand for XenServer {0} since the demand was requested on {1} (UTC time)"' connection.Hostname' newUploadRequestTime); " is 150.
Long Statement,XenServerHealthCheck,RequestUploadTask,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\RequestUploadTask.cs,OnDemandRequest,The length of the statement  "                    log.InfoFormat("Will not report on demand for XenServer {0} since the demand requested on {1} (UTC time) expired after {2} minutes"' " is 132.
Long Statement,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The length of the statement  "            if (decryptCredentialComps.Length == 3 && (string.IsNullOrEmpty(decryptCredentialComps[1]) || string.IsNullOrEmpty(decryptCredentialComps[2]))) " is 143.
Long Statement,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The length of the statement  "                        Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7])); " is 128.
Long Statement,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The length of the statement  "                        Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8])); " is 128.
Long Statement,XenServerHealthCheck,XenServerHealthCheckService,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The length of the statement  "                    session.login_with_password(server.UserName' server.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent); " is 126.
Long Statement,XenServerHealthCheck,XenServerHealthCheckService,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The length of the statement  "                        session.login_with_password(server.UserName' server.Password' Helper.APIVersionString(API_Version.LATEST)' Session.UserAgent); " is 126.
Complex Conditional,XenServerHealthCheck,XenServerHealthCheckService,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnStop,The conditional expression  "server.task != null && !(server.task.IsCompleted || server.task.IsCanceled || server.task.IsFaulted)"  is complex.
Complex Conditional,XenServerHealthCheck,XenServerHealthCheckService,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The conditional expression  "server.task != null && (!server.task.IsCompleted || !server.task.IsCanceled || !server.task.IsFaulted)"  is complex.
Magic Number,XenServerHealthCheck,XenServerHealthCheckBundleUpload,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,runUpload,The following statement contains a magic number: Session session = new Session(connection.Hostname' 80);
Magic Number,XenServerHealthCheck,XenServerHealthCheckBundleUpload,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckBundleUpload.cs,updateHealthCheckSettings,The following statement contains a magic number: Session session = new Session(connection.Hostname' 80);
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,Init,The following statement contains a magic number: connection.Password = decryptCredentialComps[2];
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: decryptCredentialComps.Length != 1 && decryptCredentialComps.Length != 3
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: decryptCredentialComps.Length == 3 && (string.IsNullOrEmpty(decryptCredentialComps[1]) || string.IsNullOrEmpty(decryptCredentialComps[2]))
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: decryptCredentialComps.Length == 3 && (string.IsNullOrEmpty(decryptCredentialComps[1]) || string.IsNullOrEmpty(decryptCredentialComps[2]))
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: newConnection.Password = decryptCredentialComps[2];
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateServerCredential,The following statement contains a magic number: decryptCredentialComps.Length == 3
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: proxySettings.Length < 2
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateProxy,The following statement contains a magic number: switch (proxyStyle)                  {                      case HTTPHelper.ProxyStyle.SpecifiedProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          Properties.Settings.Default.ProxyAddress = proxySettings[2];                          Properties.Settings.Default.ProxyPort = Int32.Parse(proxySettings[3]);                          Properties.Settings.Default.ConnectionTimeout = Int32.Parse(proxySettings[4]);                          Properties.Settings.Default.BypassProxyForServers = bool.Parse(proxySettings[5]);                          Properties.Settings.Default.ProvideProxyAuthentication = bool.Parse(proxySettings[6]);                          Properties.Settings.Default.ProxyUsername = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[7]));                          Properties.Settings.Default.ProxyPassword = EncryptionUtils.Protect(EncryptionUtils.UnprotectForLocalMachine(proxySettings[8]));                          Properties.Settings.Default.ProxyAuthenticationMethod = Int32.Parse(proxySettings[9]);                          break;                        case HTTPHelper.ProxyStyle.SystemProxy:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                        default:                          Properties.Settings.Default.ProxySetting = (Int32)proxyStyle;                          break;                  }
Magic Number,XenServerHealthCheck,ServerListHelper,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\ServerListHelper.cs,UpdateXenCenterMetadata,The following statement contains a magic number: metadata.Length != 2
Magic Number,XenServerHealthCheck,XenServerHealthCheckService,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnStart,The following statement contains a magic number: timer.Interval = Registry.HealthCheckTimeInterval * 60000;
Magic Number,XenServerHealthCheck,XenServerHealthCheckService,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnStop,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,XenServerHealthCheck,XenServerHealthCheckService,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The following statement contains a magic number: Session session = new Session(server.HostName' 80);
Magic Number,XenServerHealthCheck,XenServerHealthCheckService,D:\research\architectureSmells\repos\xenserver_xenadmin\XenServerHealthCheck\XenServerHealthCheckService.cs,OnTimer,The following statement contains a magic number: session = new Session(server.HostName' 80);
