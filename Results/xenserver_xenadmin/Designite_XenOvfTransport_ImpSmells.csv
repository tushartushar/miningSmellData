Implementation smell,Namespace,Class,File,Method,Description
Long Method,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The method has 275 lines of code.
Long Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The method has 233 lines of code.
Long Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The method has 246 lines of code.
Long Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The method has 156 lines of code.
Long Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The method has 552 lines of code.
Complex Method,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,Cyclomatic complexity of the method is 40
Complex Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,Cyclomatic complexity of the method is 42
Complex Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,Cyclomatic complexity of the method is 25
Complex Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,Cyclomatic complexity of the method is 19
Complex Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,Cyclomatic complexity of the method is 65
Complex Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,Cyclomatic complexity of the method is 10
Complex Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,Cyclomatic complexity of the method is 16
Complex Method,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindReferenceVHD,Cyclomatic complexity of the method is 10
Complex Method,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Connect,Cyclomatic complexity of the method is 10
Complex Method,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,Cyclomatic complexity of the method is 8
Complex Method,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,WimCopy,Cyclomatic complexity of the method is 9
Long Parameter List,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Put,The method has 7 parameters. Parameters: readstream' serverUri' p2vUri' headers' offset' filesize' isChunked
Long Parameter List,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The method has 10 parameters. Parameters: xenSession' vmname' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid
Long Parameter List,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSI,The method has 7 parameters. Parameters: xenSession' sruuid' label' filestream' capacity' description' vdiuuid
Long Parameter List,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The method has 9 parameters. Parameters: xenSession' sruuid' label' wimDisk' imageindex' capacity' wimFileCount' arch' description
Long Parameter List,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,CreateVDI,The method has 5 parameters. Parameters: xenSession' sruuid' label' capacity' description
Long Parameter List,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The method has 6 parameters. Parameters: xenSession' sruuid' label' filestream' capacity' description
Long Parameter List,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The method has 8 parameters. Parameters: xenSession' vmRef' rasd' pathToOvf' filename' compression' version' passcode
Long Parameter List,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,WimCopy,The method has 6 parameters. Parameters: source' destination' filename' close' fileindex' filecount
Long Parameter List,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,ConfigureTvmNetwork,The method has 5 parameters. Parameters: networkUuid' isIpStatic' ip' mask' gateway
Long Parameter List,XenOvfTransport,XenOvfTransportBase,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\XenOvfTransportBase.cs,SetTvmNetwork,The method has 5 parameters. Parameters: networkUuid' isTvmIpStatic' tvmIpAddress' tvmSubnetMask' tvmGateway
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                                    version = string.Format(OVF.GetContentMessage("SECTION_OPERATINGSYSTEM_VERSION")' vmgm.os_version["major"]' vmgm.os_version["minor"]); " is 134.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                OVF.AddVirtualSystemSettingData(ovfEnv' vsId' vhsId' vm.name_label' OVF.GetContentMessage("VSSD_CAPTION")' vm.name_description' Guid.NewGuid().ToString()' vmtype); " is 163.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                        string rasdid = OVF.AddCDROM(ovfEnv' vsId' vbd.uuid' OVF.GetContentMessage("RASD_16_CAPTION")' OVF.GetContentMessage("RASD_16_DESCRIPTION")); " is 141.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                                OVF.AddDisk(ovfEnv' vsId' diskid' Path.GetFileName(destinationFilename)' vbd.bootable' diskName' lVdi.name_description' (ulong)lVdi.physical_utilisation' (ulong)lVdi.virtual_size); " is 180.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "HVM_boot_params"' string.Join(";"' _params.Select(kvp => string.Format("{0}={1}"' kvp.Key' kvp.Value)))' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_6")); " is 211.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "HVM_boot_policy"' vm.HVM_boot_policy' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_2")); " is 144.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "HVM_shadow_multiplier"' Convert.ToString(vm.HVM_shadow_multiplier)' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 174.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "platform"' string.Join(";"' platform.Select(kvp => string.Format("{0}={1}"' kvp.Key' kvp.Value)))' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_3")); " is 205.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "NVRAM"' string.Join(";"' nvram.Select(kvp => string.Format("{0}={1}"' kvp.Key' kvp.Value)))' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_7")); " is 199.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_args"' vm.PV_args' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 128.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_bootloader"' vm.PV_bootloader' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 140.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_bootloader_args"' vm.PV_bootloader_args' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 150.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_kernel"' vm.PV_kernel' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 132.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_legacy_args"' vm.PV_legacy_args' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 142.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_ramdisk"' vm.PV_ramdisk' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 134.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "hardware_platform_version"' vm.hardware_platform_version.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 175.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "recommendations"' vm.recommendations.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 155.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "VM_has_vendor_device"' vm.has_vendor_device.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 162.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                        OVF.AddOtherSystemSettingData(ovfEnv' vsId' "vgpu"' sb.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_4")' true); " is 134.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "pvssite"' sb.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_5")); " is 131.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                            destinationFilename = Path.Combine(targetPath' string.Format(@"{0}_{1}.vhd"' uuid' Thread.CurrentThread.ManagedThreadId)); " is 122.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                            OVF.UpdateFilename(ovfEnv' string.Format(@"{0}.vhd"' uuid)' string.Format(@"{0}_{1}.vhd"' uuid' Thread.CurrentThread.ManagedThreadId)); " is 135.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Export' string.Format(Messages.FILES_TRANSPORT_SETUP' uuid + ".vhd"))); " is 123.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                                using (DiscUtils.Vhd.Disk destination = DiscUtils.Vhd.Disk.InitializeDynamic(fs' Ownership.None' source.Length' geometry)) " is 122.
Long Statement,XenOvfTransport,Export,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Export' string.Format(Messages.FILES_TRANSPORT_CLEANUP' uuid + ".vhd"))); " is 125.
Long Statement,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Connect,The length of the statement  "                SslStream sslStream = new SslStream(stream' false' new RemoteCertificateValidationCallback(ValidateServerCertificate)' null); " is 125.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "                                AdditionalSpace = OVF.ComputeCapacity(Convert.ToInt64(vdisk.capacity)' vdisk.capacityAllocationUnits);  // used in Wim file imports only. " is 137.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "								AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode); " is 158.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "							AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode); " is 158.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "			//added check again as Delete needs write permissions and even if the file does not exist import will fail if the user has read only permissions " is 144.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,HandleInstallSection,The length of the statement  "            // Configure for XenServer as requested by OVF.SetRunOnceBootCDROM() with the presence of a post install operation that is specific to XenServer. " is 145.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,HandleInstallSection,The length of the statement  "            // Run the VM for the requested duration if this appliance had its own install section -- one not added to fixup for XenServer. " is 127.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The length of the statement  "            TransferType useTransport = (TransferType)Enum.Parse(typeof(TransferType)' Properties.Settings.Default.TransferType' true); " is 123.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The length of the statement  "                            DiscUtils.Xva.VirtualMachine vm = new DiscUtils.Xva.VirtualMachine(new FileStream(sourcefile' FileMode.Open' FileAccess.Read)); " is 127.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The length of the statement  "                                dataCapacity = dataStream.Length + (512 * KB);  // Xen does 512KB rounding this is to ensure it doesn't round down below size. " is 126.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSI,The length of the statement  "            OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' string.Format(Messages.FILES_TRANSPORT_SETUP' _currentfilename))); " is 126.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSI,The length of the statement  "                OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' string.Format(Messages.FILES_TRANSPORT_CLEANUP'_currentfilename))); " is 127.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The length of the statement  "            log.Debug($"OVF.Import.UploadiSCSIbyWimFile SRUUID: {sruuid}' Label: {label}' ImageIndex: {imageindex}' Capacity: {capacity}"); " is 127.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The length of the statement  "            OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' string.Format(Messages.FILES_TRANSPORT_SETUP' _currentfilename))); " is 126.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The length of the statement  "                //AddBootMgr(ntfs' bootmgr);  // If it's not there it'll be created if it is it will not.. not below filecopy will overwrite if one it exists. " is 142.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The length of the statement  "                OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' string.Format(Messages.FILES_TRANSPORT_CLEANUP' _currentfilename))); " is 128.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The length of the statement  "            string p2VUri = string.Format("/import_raw_vdi?session_id={0}&task_id={1}&vdi={2}"' xenSession.opaque_ref' taskRef.opaque_ref' vdiRef.opaque_ref); " is 146.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The length of the statement  "							newVm.HVM_boot_params = xcsdValue.IndexOf('=') > -1 ? SplitStringIntoDictionary(xcsdValue) : new Dictionary<string' string> { { "order"' xcsdValue } }; " is 151.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The length of the statement  "                        if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0) " is 132.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The length of the statement  "                                    vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid); " is 126.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The length of the statement  "                                       _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0)); " is 136.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The length of the statement  "                                    _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) }; " is 131.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DownloadFileAsync,The length of the statement  "                OnUpdate(new XenOvfTransportEventArgs(TransportStep.Download' downloadupdatemsg' _filedownloadsize' _filedownloadsize)); " is 120.
Long Statement,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,wc_DownloadProgressChanged,The length of the statement  "            OnUpdate(new XenOvfTransportEventArgs(TransportStep.Download' downloadupdatemsg' (ulong)e.BytesReceived' (ulong)_filedownloadsize)); " is 132.
Complex Conditional,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The conditional expression  "(Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))"  is complex.
Complex Conditional,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The conditional expression  "rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null"  is complex.
Complex Conditional,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareConnectedDisks,The conditional expression  "rasd1.AddressOnParent != null &&                  rasd1.AddressOnParent.Value != null &&                  rasd2.AddressOnParent != null &&                  rasd2.AddressOnParent.Value != null"  is complex.
Complex Conditional,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareConnectedDisks,The conditional expression  "rasd1.Address != null &&                      rasd1.Address.Value != null &&                      rasd2.Address != null &&                      rasd2.Address.Value != null"  is complex.
Empty Catch Block,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The method has an empty catch block.
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Get,The following statement contains a magic number: switch (code)                      {                          case 302:                              string url = "";                              while (true)                              {                                  response = ReadLine(http);                                  if (response.StartsWith("Location: "))                                      url = response.Substring(10);                                  if (response.Equals("\r\n") || response.Equals("")) break;                              }                              Uri redirect = new Uri(url.Trim());                              http.Close();                              Get(filename' redirect' p2vUri);                              break;                          default:                              http.Close();                              return;                      }
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Get,The following statement contains a magic number: switch (code)                      {                          case 302:                              string url = "";                              while (true)                              {                                  response = ReadLine(http);                                  if (response.StartsWith("Location: "))                                      url = response.Substring(10);                                  if (response.Equals("\r\n") || response.Equals("")) break;                              }                              Uri redirect = new Uri(url.Trim());                              http.Close();                              Get(filename' redirect' p2vUri);                              break;                          default:                              http.Close();                              return;                      }
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,DoHttp,The following statement contains a magic number: code = 200;
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,DoHttp,The following statement contains a magic number: code != 200
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendTestData,The following statement contains a magic number: (i % 10) == 0
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendTestData,The following statement contains a magic number: i < 1024
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendChunkedData,The following statement contains a magic number: byte[] datablock = new byte[2 * MB];
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendChunkedData,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendChunkedData,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,ReadLine,The following statement contains a magic number: stream.ReadTimeout = 10000;
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,GetResultCode,The following statement contains a magic number: bits.Length < 2
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalResponse,The following statement contains a magic number: MarshalBaseTypes.MarshalInt(stream' 4 + 4);
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalResponse,The following statement contains a magic number: MarshalBaseTypes.MarshalInt(stream' 4 + 4);
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Connect,The following statement contains a magic number: tcpClient.LingerState = new LingerOption(true' 10);
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Connect,The following statement contains a magic number: tcpClient.SendTimeout = 50000;
Magic Number,XenOvfTransport,Http,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Connect,The following statement contains a magic number: port == 443
Magic Number,XenOvfTransport,MarshalBaseTypes,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,UnmarshalInt32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,XenOvfTransport,MarshalBaseTypes,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,UnmarshalInt32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,XenOvfTransport,MarshalBaseTypes,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,UnmarshalInt32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,XenOvfTransport,MarshalBaseTypes,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalInt32,The following statement contains a magic number: stream.WriteByte((byte)((x >> 8) & mask));
Magic Number,XenOvfTransport,MarshalBaseTypes,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalInt32,The following statement contains a magic number: stream.WriteByte((byte)((x >> 16) & mask));
Magic Number,XenOvfTransport,MarshalBaseTypes,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalInt32,The following statement contains a magic number: stream.WriteByte((byte)((x >> 24) & mask));
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The following statement contains a magic number: rasd.ResourceType.Value == 17 || rasd.ResourceType.Value == 19 || rasd.ResourceType.Value == 21
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The following statement contains a magic number: rasd.ResourceType.Value == 17 || rasd.ResourceType.Value == 19 || rasd.ResourceType.Value == 21
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The following statement contains a magic number: rasd.ResourceType.Value == 17 || rasd.ResourceType.Value == 19 || rasd.ResourceType.Value == 21
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,InstallSectionStartVirtualMachine,The following statement contains a magic number: int bootStopDelayAsMs = initialBootStopDelayAsSeconds * 1000;
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The following statement contains a magic number: VDI vdi = new VDI              {                  uuid = Guid.NewGuid().ToString()'                  name_label = label'                  name_description = description'                  SR = sruuid.ToLower().StartsWith("opaque") ? new XenRef<SR>(sruuid) : SR.get_by_uuid(xenSession' sruuid)'                  // Add 2MB' VDIs appear to round down making it too small.                  virtual_size = capacity + 2*MB'                  physical_utilisation = capacity + 2*MB'                  type = vdi_type.user'                  sharable = false'                  read_only = false'                  storage_lock = false'                  managed = true'                  is_a_snapshot = false              };
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The following statement contains a magic number: VDI vdi = new VDI              {                  uuid = Guid.NewGuid().ToString()'                  name_label = label'                  name_description = description'                  SR = sruuid.ToLower().StartsWith("opaque") ? new XenRef<SR>(sruuid) : SR.get_by_uuid(xenSession' sruuid)'                  // Add 2MB' VDIs appear to round down making it too small.                  virtual_size = capacity + 2*MB'                  physical_utilisation = capacity + 2*MB'                  type = vdi_type.user'                  sharable = false'                  read_only = false'                  storage_lock = false'                  managed = true'                  is_a_snapshot = false              };
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The following statement contains a magic number: Thread.Sleep(new TimeSpan(0' 0' 5));
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: ulong memorySize = 512 * MB;
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: RASD_Type[] rasds = OVF.FindRasdByType(system' 4);
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: double memoryPower = 20.0;
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: double memoryRaise = 2.0;
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: memoryPower = Convert.ToDouble(a1[2]);
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: a1.Length == 3
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: rasds = OVF.FindRasdByType(system' 3);
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindGpuGroupAndVgpuType,The following statement contains a magic number: string vendorName = m.Groups[2].Value;
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindGpuGroupAndVgpuType,The following statement contains a magic number: string modelName = m.Groups[3].Value;
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SplitStringIntoDictionary,The following statement contains a magic number: return inputStr.Split(new[] {';'}' StringSplitOptions.RemoveEmptyEntries).Select(o => o.Split(new[] { '=' }' 2))  				.ToDictionary(o => o.FirstOrDefault()' o => o.LastOrDefault());
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split('=');                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                            VIF vif = new VIF                          {                              uuid = Guid.NewGuid().ToString()'                              allowed_operations = new List<vif_operations> {vif_operations.attach}'                              device = Convert.ToString(vifDeviceIndex++)'                              network = net'                              VM = vmRef'                              MTU = 1500'                              locking_mode = vif_locking_mode.network_default                          };                            // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vif.MAC = networkAddress.ToString();                          }                            try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.Error("Failed to create a virtual network interface (VIF). "' ex);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currently Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRefs = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region FIND THE ISO SR MAPPED IN THE OVF                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(''');                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  var srToFind = vset.Substring(vset.LastIndexOf('=') + 1);                                                    try                                                  {                                                      XenRef<SR> srRef = SR.get_by_uuid(xenSession' srToFind);                                                      if (srRef != null && srRef != Helper.NullOpaqueRef)                                                      {                                                          isoUuid = srToFind;                                                          break;                                                      }                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                  }                                                    try                                                  {                                                      var srRecords = SR.get_all_records(xenSession);                                                        isoUuid = (from SR sr in srRecords.Values                                                          where sr.name_label == srToFind                                                          select sr.uuid).FirstOrDefault();                                                  }                                                  catch                                                  {                                                      log.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                  }                                                    break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRefs.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRefs = ImportFile(xenSession' filename' pathToOvf' filename' compression' version' passcode' isoUuid' ""' null);                                          }                                          catch (Exception ex)                                          {                                              if (ex is OperationCanceledException)                                                  throw;                                              var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.Error("Failed to add resource ISO."' ex);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRefs == null || vdiRefs.Count <= 0)                                              {                                                  log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' isoUuid);                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRefs.Add(XenRef<VDI>.Create(string.Empty));                              }                                #region CREATE VBD CONNECTION                                                         foreach (XenRef<VDI> currentVDI in vdiRefs)                              {                                  var hashtable = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(''');                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split('=');                                          string name = namevalue[0].ToLower();                                            switch (name)                                          {                                              case "sr":                                              case "vdi":                                                  continue;                                              case "device":                                                  hashtable.Add("userdevice"' namevalue[1]);                                                  break;                                              default:                                                  hashtable.Add(namevalue[0]' namevalue[1]);                                                  break;                                          }                                      }                                  }                                    VBD vbd = new VBD                                  {                                      VM = vmRef'                                      mode = vbd_mode.RO'                                      userdevice = "3"'                                      type = vbd_type.CD'                                      storage_lock = false'                                      status_code = 0                                  };                                    vbd.UpdateFrom(hashtable);                                    if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      vbd.VDI = currentVDI;                                      vbd.empty = false;                                      vbd.bootable = true;                                      vbd.unpluggable = true;                                  }                                  else                                  {                                      vbd.empty = true;                                  }                                    vbd.userdevice = VerifyUserDevice(xenSession' vmRef' vbd.userdevice);                                  vbd.other_config = new Dictionary<string' string> { { "owner"' "true" } };                                    if (!vbd.userdevice.EndsWith("+"))                                  {                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.Error("Import.AddResourceSettingData: "' ex);                                      }                                  }                                  else                                  {                                      log.WarnFormat(                                          "Import:  ================== ATTENTION NEEDED =======================" +                                          "Import:  Could not determine appropriate number of device placement." +                                          "Import:  Please Start' Logon' Shut down' System ({0})" +                                          "Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +." +                                          "Import:  ==========================================================="' vmRef);                                        OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.CdDvdDrive'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string vmName = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          vbd_mode mode = vbd_mode.RW;                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split('='' ''');                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              log.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error("The SR was not found and a default was not assigned.");                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error("The SR was not found and a default was not assigned.");                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"' vmName' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFile(xenSession' disklabel' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid);                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.Error("Failed to add resource Hard Disk Image."' ex);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	log.ErrorFormat("Failed to import virtual disk from file {0} to storage repository {1}."' filename' sruuid);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData counts {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      VBD vbd = new VBD                                      {                                          userdevice = VerifyUserDevice(xenSession' vmRef' userdeviceid ?? "99")'                                          bootable = isbootable'                                          VDI = currentVDI'                                          mode = mode'                                          uuid = Guid.NewGuid().ToString()'                                          VM = vmRef'                                          empty = false'                                          type = vbd_type.Disk'                                          currently_attached = false'                                          storage_lock = false'                                          status_code = 0'                                          // below other_config keys XS to delete the disk along with the VM.                                          other_config = new Dictionary<string' string> {{"owner"' "true"}}                                      };                                        if (!vbd.userdevice.EndsWith("+"))                                      {                                          try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.Error("Failed to create a virtual block device (VBD)."' ex);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat(                                              "Import:  ================== ATTENTION NEEDED =======================" +                                              "Import:  Could not determine appropriate number for device placement." +                                              "Import:  Please Start' Logon' Shut down' System ({0})" +                                              "Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}" +                                              "Import:  ==========================================================="'                                              vmName);                                          OnUpdate(new XenOvfTransportEventArgs(TransportStep.Import' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                          }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: int[] connections = new int[16];
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,The following statement contains a magic number: (rasd.ResourceType.Value == 21 ||                      rasd.ResourceType.Value == 5) &&                      rasd.Address.Value == "0"
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,The following statement contains a magic number: (rasd.ResourceType.Value == 21 ||                      rasd.ResourceType.Value == 5) &&                      rasd.Address.Value == "0"
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,The following statement contains a magic number: (rasd.ResourceType.Value == 17 ||                      rasd.ResourceType.Value == 19) &&                      rasd.AddressOnParent.Value == "0"
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,The following statement contains a magic number: (rasd.ResourceType.Value == 17 ||                      rasd.ResourceType.Value == 19) &&                      rasd.AddressOnParent.Value == "0"
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindReferenceVHD,The following statement contains a magic number: assempath.Length > 3
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: int left = (rasd1.ResourceType.Value * 10) + address1;
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: int right = (rasd2.ResourceType.Value * 10) + address2;
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null
Magic Number,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null
Magic Number,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,The following statement contains a magic number: hashAlgorithm.TransformBlock(_buffer' 0' bytesRead / 2' _buffer' 0);
Magic Number,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,The following statement contains a magic number: hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2 + bytesRead % 2);
Magic Number,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,The following statement contains a magic number: hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2 + bytesRead % 2);
Magic Number,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,The following statement contains a magic number: hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2 + bytesRead % 2);
Magic Number,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Verify,The following statement contains a magic number: hashAlgorithm.TransformBlock(_buffer' 0' bytesRead / 2' _buffer' 0);
Magic Number,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Verify,The following statement contains a magic number: hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2 + bytesRead % 2);
Magic Number,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Verify,The following statement contains a magic number: hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2 + bytesRead % 2);
Magic Number,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Verify,The following statement contains a magic number: hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2 + bytesRead % 2);
Magic Number,XenOvfTransport,iSCSI,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,WimCopy,The following statement contains a magic number: byte[] block = new byte[2 * MB];
Missing Default,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following switch statement is missing a default case: switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = vbd_mode.RO;                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }
Missing Default,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following switch statement is missing a default case: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Missing Default,XenOvfTransport,Import,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following switch statement is missing a default case: switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }
