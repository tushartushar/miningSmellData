Implementation smell,Namespace,Class,File,Method,Description
Long Method,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The method has 277 lines of code.
Long Method,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The method has 222 lines of code.
Long Method,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The method has 238 lines of code.
Long Method,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The method has 187 lines of code.
Long Method,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The method has 595 lines of code.
Complex Method,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,Cyclomatic complexity of the method is 38
Complex Method,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,Cyclomatic complexity of the method is 40
Complex Method,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,Cyclomatic complexity of the method is 15
Complex Method,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,Cyclomatic complexity of the method is 11
Complex Method,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,Cyclomatic complexity of the method is 15
Complex Method,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindReferenceVHD,Cyclomatic complexity of the method is 9
Complex Method,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Connect,Cyclomatic complexity of the method is 10
Complex Method,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,WimCopy,Cyclomatic complexity of the method is 9
Long Parameter List,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Put,The method has 7 parameters. Parameters: readstream' serverUri' p2vUri' headers' offset' filesize' isChunked
Long Parameter List,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The method has 10 parameters. Parameters: xenSession' vmname' pathToOvf' filename' compression' version' passcode' sruuid' description' vdiuuid
Long Parameter List,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSI,The method has 7 parameters. Parameters: xenSession' sruuid' label' filestream' capacity' description' vdiuuid
Long Parameter List,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The method has 9 parameters. Parameters: xenSession' sruuid' label' wimDisk' imageindex' capacity' wimFileCount' arch' description
Long Parameter List,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,CreateVDI,The method has 5 parameters. Parameters: xenSession' sruuid' label' capacity' description
Long Parameter List,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The method has 6 parameters. Parameters: xenSession' sruuid' label' filestream' capacity' description
Long Parameter List,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The method has 8 parameters. Parameters: xenSession' vmRef' rasd' pathToOvf' filename' compression' version' passcode
Long Parameter List,XenOvfTransport,TaskInfo,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,TaskInfo,The method has 11 parameters. Parameters: xensession' import' namelabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid
Long Parameter List,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,WimCopy,The method has 6 parameters. Parameters: source' destination' filename' close' fileindex' filecount
Long Parameter List,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,ConfigureTvmNetwork,The method has 5 parameters. Parameters: networkUuid' isIpStatic' ip' mask' gateway
Long Parameter List,XenOvfTransport,XenOvfTransportBase,C:\repos\xenserver_xenadmin\XenOvfTransport\XenOvfTransportBase.cs,SetTvmNetwork,The method has 5 parameters. Parameters: networkUuid' isTvmIpStatic' tvmIpAddress' tvmSubnetMask' tvmGateway
Long Parameter List,XenOvfTransport,XenOvfTranportEventArgs,C:\repos\xenserver_xenadmin\XenOvfTransport\XenOvfTransportEvent.cs,XenOvfTranportEventArgs,The method has 5 parameters. Parameters: type' target' message' transfered' total
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,Process,The length of the statement  "        	OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ExportThreadComplete' "Export"' Messages.COMPLETED_EXPORT)); " is 121.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                                    version = string.Format(OVF.GetContentMessage("SECTION_OPERATINGSYSTEM_VERSION")' vmgm.os_version["major"]' vmgm.os_version["minor"]); " is 134.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                OVF.AddVirtualSystemSettingData(ovfEnv' vsId' vhsId' vm.name_label' OVF.GetContentMessage("VSSD_CAPTION")' vm.name_description' Guid.NewGuid().ToString()' vmtype); " is 163.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                        string rasdid = OVF.AddCDROM(ovfEnv' vsId' vbd.uuid' OVF.GetContentMessage("RASD_16_CAPTION")' OVF.GetContentMessage("RASD_16_DESCRIPTION")); " is 141.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                                OVF.AddDisk(ovfEnv' vsId' diskid' Path.GetFileName(destinationFilename)' vbd.bootable' diskName' lVdi.name_description' (ulong)lVdi.physical_utilisation' (ulong)lVdi.virtual_size); " is 180.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                            OVF.AddOtherSystemSettingData(ovfEnv' vsId' "HVM_boot_params"' _params[key]' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 138.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "HVM_boot_policy"' vm.HVM_boot_policy' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_2")); " is 144.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "HVM_shadow_multiplier"' Convert.ToString(vm.HVM_shadow_multiplier)' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 174.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "platform"' sb.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_3")); " is 132.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_args"' vm.PV_args' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 128.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_bootloader"' vm.PV_bootloader' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 140.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_bootloader_args"' vm.PV_bootloader_args' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 150.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_kernel"' vm.PV_kernel' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 132.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_legacy_args"' vm.PV_legacy_args' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 142.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "					OVF.AddOtherSystemSettingData(ovfEnv' vsId' "PV_ramdisk"' vm.PV_ramdisk' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 134.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "hardware_platform_version"' vm.hardware_platform_version.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 175.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "VM_has_vendor_device"' vm.has_vendor_device.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_1")); " is 162.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                        OVF.AddOtherSystemSettingData(ovfEnv' vsId' "vgpu"' sb.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_4")); " is 128.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_export,The length of the statement  "                    OVF.AddOtherSystemSettingData(ovfEnv' vsId' "pvssite"' sb.ToString()' OVF.GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_5")); " is 131.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                            destinationFilename = Path.Combine(targetPath' string.Format(@"{0}_{1}.vhd"' uuid' Thread.CurrentThread.ManagedThreadId)); " is 122.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                            OVF.UpdateFilename(ovfEnv' string.Format(@"{0}.vhd"' uuid)' string.Format(@"{0}_{1}.vhd"' uuid' Thread.CurrentThread.ManagedThreadId)); " is 135.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                        OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOn' "Export"' string.Format(Messages.FILES_TRANSPORT_SETUP' uuid + ".vhd"))); " is 145.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                                using (DiscUtils.Vhd.Disk destination = DiscUtils.Vhd.Disk.InitializeDynamic(fs' Ownership.None' source.Length' geometry)) " is 122.
Long Statement,XenOvfTransport,Export,C:\repos\xenserver_xenadmin\XenOvfTransport\Export.cs,_copydisks,The length of the statement  "                        OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOn' "Export"' string.Format(Messages.FILES_TRANSPORT_CLEANUP' uuid + ".vhd"))); " is 147.
Long Statement,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendChunkedData,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileStart' "SendData Start"' "Disk Copy"' (ulong)offset' (ulong)filesize)); " is 136.
Long Statement,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendChunkedData,The length of the statement  "                            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' "Disk Copy"' (ulong)bytessent' (ulong)filesize)); " is 142.
Long Statement,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendChunkedData,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileComplete' "SendData Completed"' "Disk Copy"' (ulong)bytessent' (ulong)filesize)); " is 146.
Long Statement,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendData,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileStart' "SendData Start"' "Disk Copy"' 0' (ulong)filesize)); " is 124.
Long Statement,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendData,The length of the statement  "                    OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' "Disk Copy"' p' (ulong)filesize)); " is 127.
Long Statement,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendData,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileComplete' "SendData Completed"' "Disk Copy"' p' (ulong)filesize)); " is 131.
Long Statement,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Connect,The length of the statement  "                SslStream sslStream = new SslStream(stream' false' new RemoteCertificateValidationCallback(ValidateServerCertificate)' null); " is 125.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "                                AdditionalSpace = OVF.ComputeCapacity(Convert.ToInt64(vdisk.capacity)' vdisk.capacityAllocationUnits);  // used in Wim file imports only. " is 137.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "								AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode); " is 158.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "							AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode); " is 158.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "                        OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOn' "Import"' Messages.START_POST_INSTALL_INSTRUCTIONS)); " is 125.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "                        OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "Import"' Messages.START_POST_INSTALL_INSTRUCTIONS)); " is 130.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "			//added check again as Delete needs write permissions and even if the file does not exist import will fail if the user has read only permissions " is 144.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportThreadComplete' "Import"' Messages.COMPLETED_IMPORT)); " is 121.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,HandleInstallSection,The length of the statement  "            // Configure for XenServer as requested by OVF.SetRunOnceBootCDROM() with the presence of a post install operation that is specific to XenServer. " is 145.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,HandleInstallSection,The length of the statement  "            // Run the VM for the requested duration if this appliance had its own install section -- one not added to fixup for XenServer. " is 127.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The length of the statement  "            TransferType useTransport = (TransferType)Enum.Parse(typeof(TransferType)' Properties.Settings.Default.TransferType' true); " is 123.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The length of the statement  "                            DiscUtils.Xva.VirtualMachine vm = new DiscUtils.Xva.VirtualMachine(new FileStream(sourcefile' FileMode.Open' FileAccess.Read)); " is 127.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The length of the statement  "                                dataCapacity = dataStream.Length + (512 * KB);  // Xen does 512KB rounding this is to ensure it doesn't round down below size. " is 126.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSI,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileStart' "Import"' string.Format(Messages.FILES_TRANSPORT_SETUP' _currentfilename))); " is 148.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSI,The length of the statement  "                OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileStart' "Import"' string.Format(Messages.FILES_TRANSPORT_CLEANUP'_currentfilename))); " is 149.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileStart' "Import"' string.Format(Messages.FILES_TRANSPORT_SETUP' _currentfilename))); " is 148.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The length of the statement  "                    OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileStart' "Import"' Messages.WARNING_TARGET_NOT_BOOTABLE)); " is 121.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The length of the statement  "                //AddBootMgr(ntfs' bootmgr);  // If it's not there it'll be created if it is it will not.. not below filecopy will overwrite if one it exists. " is 142.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadiSCSIbyWimFile,The length of the statement  "                OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileStart' "Import"' string.Format(Messages.FILES_TRANSPORT_CLEANUP' _currentfilename))); " is 150.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The length of the statement  "            vdiHash.Add("virtual_size"' Convert.ToString(capacity + (2 * MB))); // Add 2MB' VDIs appear to round down making it too small. " is 126.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The length of the statement  "			string p2VUri = string.Format("/import_raw_vdi?session_id={0}&task_id={1}&vdi={2}"' xenSession.uuid' taskRef.opaque_ref' vdiRef.opaque_ref); " is 140.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The length of the statement  "                                            vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null)); " is 138.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The length of the statement  "                        if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0) " is 132.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The length of the statement  "                                    vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid)); " is 150.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The length of the statement  "                                        log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]); " is 140.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The length of the statement  "                                       _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0)); " is 136.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The length of the statement  "                                    _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) }; " is 131.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFileProc,The length of the statement  "                log.InfoFormat("Import.ImportFileProc: ThreadID: {0}[{1}]"' Thread.CurrentThread.Name' Thread.CurrentThread.ManagedThreadId); " is 125.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFileProc,The length of the statement  "                    vdiRef = ((Import)ti._import).ImportFile(ti.xenSession' ti.NameLabel' ti.PathToOvf' ti.Filename' ti.Compression' ti.Version' ti.Passcode' ti.SRuuid' ti.Description' ti.VDIuuid); " is 177.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,IsGUID,The length of the statement  "                Regex guidRegEx = new Regex(@"^(\{{0'1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0'1})$"); " is 136.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DownloadFileAsync,The length of the statement  "                OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileStart' "Web Download Start"' downloadupdatemsg' 0' _filedownloadsize)); " is 136.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DownloadFileAsync,The length of the statement  "                OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileComplete' "Web Download Completed"' downloadupdatemsg' _filedownloadsize' _filedownloadsize)); " is 159.
Long Statement,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,wc_DownloadProgressChanged,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "Web Download Update"' downloadupdatemsg' (ulong)e.BytesReceived' (ulong)_filedownloadsize)); " is 168.
Long Statement,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,The length of the statement  "                        OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' updatemsg' _bytescopied' _bytestotal)); " is 132.
Long Statement,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileComplete' "SendData Completed"' updatemsg' _bytescopied' _bytestotal)); " is 136.
Long Statement,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Verify,The length of the statement  "                        OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' updatemsg' (ulong)offset' (ulong)limit)); " is 134.
Long Statement,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Verify,The length of the statement  "            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileComplete' "SendData Completed"' updatemsg' (ulong)offset' (ulong)limit)); " is 138.
Long Statement,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,WimCopy,The length of the statement  "                    OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' updatemsg' _bytescopied' _bytestotal)); " is 132.
Long Statement,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,WimCopy,The length of the statement  "			OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileComplete' "SendData Completed"' updatemsg' _bytescopied' _bytestotal)); " is 136.
Complex Conditional,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The conditional expression  "(Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))"  is complex.
Complex Conditional,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The conditional expression  "rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null"  is complex.
Complex Conditional,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareConnectedDisks,The conditional expression  "rasd1.AddressOnParent != null &&                  rasd1.AddressOnParent.Value != null &&                  rasd2.AddressOnParent != null &&                  rasd2.AddressOnParent.Value != null"  is complex.
Complex Conditional,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareConnectedDisks,The conditional expression  "rasd1.Address != null &&                      rasd1.Address.Value != null &&                      rasd2.Address != null &&                      rasd2.Address.Value != null"  is complex.
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Get,The following statement contains a magic number: try              {                  using (FileStream fs = new FileStream(filename' FileMode.Create' FileAccess.Write))                  {                      Stream http = Connect(serverUri.Host' serverUri.Port);                      String header = "GET " + p2vUri + " HTTP/1.0\r\n\r\n";                      WriteLine(http' header);                      String response = ReadLine(http);                      int code = GetResultCode(response);                      switch (code)                      {                          case 302:                              string url = "";                              while (true)                              {                                  response = ReadLine(http);                                  if (response.StartsWith("Location: "))                                      url = response.Substring(10);                                  if (response.Equals("\r\n") || response.Equals("")) break;                              }                              Uri redirect = new Uri(url.Trim());                              http.Close();                              Get(filename' redirect' p2vUri);                              break;                          default:                              http.Close();                              return;                      }                        while (true)                      {                          response = ReadLine(http);                          if (response.Equals("\r\n") || response.Equals("")) break;                      }                      // Stream should be positioned after the headers                  }              }              catch (EndOfStreamException eof)              {                  log.DebugFormat("Get::No Data: {0}"' eof.Message);              }              catch (Exception ex)              {                  //marshal_response(http' tag.Failed);                                  log.ErrorFormat("Get::Exception: {0}"' ex.Message);              }
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Get,The following statement contains a magic number: try              {                  using (FileStream fs = new FileStream(filename' FileMode.Create' FileAccess.Write))                  {                      Stream http = Connect(serverUri.Host' serverUri.Port);                      String header = "GET " + p2vUri + " HTTP/1.0\r\n\r\n";                      WriteLine(http' header);                      String response = ReadLine(http);                      int code = GetResultCode(response);                      switch (code)                      {                          case 302:                              string url = "";                              while (true)                              {                                  response = ReadLine(http);                                  if (response.StartsWith("Location: "))                                      url = response.Substring(10);                                  if (response.Equals("\r\n") || response.Equals("")) break;                              }                              Uri redirect = new Uri(url.Trim());                              http.Close();                              Get(filename' redirect' p2vUri);                              break;                          default:                              http.Close();                              return;                      }                        while (true)                      {                          response = ReadLine(http);                          if (response.Equals("\r\n") || response.Equals("")) break;                      }                      // Stream should be positioned after the headers                  }              }              catch (EndOfStreamException eof)              {                  log.DebugFormat("Get::No Data: {0}"' eof.Message);              }              catch (Exception ex)              {                  //marshal_response(http' tag.Failed);                                  log.ErrorFormat("Get::Exception: {0}"' ex.Message);              }
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,CheckResponse,The following statement contains a magic number: switch (code)              {                  case 0:                      {                          log.Debug("No Return data at this time.");                          code = 200;                          break;                      }                  case 200:                      {                          log.Debug("200 OK");                          break;                      }                  case 403:                      {                          log.Debug("403 FORBIDDEN' handler was not found");                          break;                      }                  default:                      {                          log.DebugFormat("ERROR Returned: {0}"' code);                          break;                      }              }
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,CheckResponse,The following statement contains a magic number: switch (code)              {                  case 0:                      {                          log.Debug("No Return data at this time.");                          code = 200;                          break;                      }                  case 200:                      {                          log.Debug("200 OK");                          break;                      }                  case 403:                      {                          log.Debug("403 FORBIDDEN' handler was not found");                          break;                      }                  default:                      {                          log.DebugFormat("ERROR Returned: {0}"' code);                          break;                      }              }
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,CheckResponse,The following statement contains a magic number: switch (code)              {                  case 0:                      {                          log.Debug("No Return data at this time.");                          code = 200;                          break;                      }                  case 200:                      {                          log.Debug("200 OK");                          break;                      }                  case 403:                      {                          log.Debug("403 FORBIDDEN' handler was not found");                          break;                      }                  default:                      {                          log.DebugFormat("ERROR Returned: {0}"' code);                          break;                      }              }
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendTestData,The following statement contains a magic number: for (int i = 0; i < 1024; i++)              {                  if ((i % 10) == 0)                  {                      x = 0x70;                      y = 0;                  }                  testBuffer[i] = (byte)(x + y++);              }
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendTestData,The following statement contains a magic number: for (int i = 0; i < 1024; i++)              {                  if ((i % 10) == 0)                  {                      x = 0x70;                      y = 0;                  }                  testBuffer[i] = (byte)(x + y++);              }
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendChunkedData,The following statement contains a magic number: byte[] datablock = new byte[2 * MB];
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendChunkedData,The following statement contains a magic number: while (true)              {                  // Form: chunked                  // size\r\ndata\r\n\r\nsize\r\n\r\n0\r\n                  // 1234                  // asdfasdfasdfasdfsdfd                  //                  // 1234                  // asdfasdfasdfasdfasdf                  //                  // 0                  //                  fullblock.Clear();                  bool IsAllZeros = true;                  int n = filestream.Read(datablock' 0' datablock.Length);                  if (n <= 0) break;                  sizeblock = Encoding.UTF8.GetBytes(string.Format("{0}\r\n"' n));                  try                  {                      for (int j = 0; j < datablock.Length; j++)                      {                          if (!datablock[j].Equals(Zero))                          {                              IsAllZeros = false;                              break;                          }                      }                      if (!IsAllZeros)                      {                          if (!skipblock)                          {                              fullblock.AddRange(sizeblock);                              fullblock.AddRange(datablock);                              fullblock.AddRange(endblock);                              http.Write(fullblock.ToArray()' 0' fullblock.Count);                              bytessent += n;                              OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' "Disk Copy"' (ulong)bytessent' (ulong)filesize));                              Thread.Sleep(100);                          }                          else                          {                              Exception ex = new Exception("Skipped Empty");                              throw new ReConnectException(string.Format("{0}"' bytessent)' ex);                          }                      }                      else                      {                          bytessent += n;                          skipblock = true;                      }                  }                  catch (Exception ex)                  {                      log.DebugFormat("EXCEPTION: {0} : {1}"' ex.GetType()' ex.Message);                      throw new ReConnectException(string.Format("{0}"' bytessent)' ex);                  }                    string str1 = string.Format(">>> {0} <<< Block {1} : Total {2} : Full {3} Skipped: {4}\r"'                                             i++'                                             n.ToString("N0"' CultureInfo.InvariantCulture)'                                             bytessent.ToString("N0"' CultureInfo.InvariantCulture)'                                             filesize.ToString("N0"' CultureInfo.InvariantCulture)'                                             skipblock);                  log.Debug(Encoding.ASCII.GetString(Encoding.UTF8.GetBytes(str1)));                    Thread.Sleep(100);              }
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,SendChunkedData,The following statement contains a magic number: while (true)              {                  // Form: chunked                  // size\r\ndata\r\n\r\nsize\r\n\r\n0\r\n                  // 1234                  // asdfasdfasdfasdfsdfd                  //                  // 1234                  // asdfasdfasdfasdfasdf                  //                  // 0                  //                  fullblock.Clear();                  bool IsAllZeros = true;                  int n = filestream.Read(datablock' 0' datablock.Length);                  if (n <= 0) break;                  sizeblock = Encoding.UTF8.GetBytes(string.Format("{0}\r\n"' n));                  try                  {                      for (int j = 0; j < datablock.Length; j++)                      {                          if (!datablock[j].Equals(Zero))                          {                              IsAllZeros = false;                              break;                          }                      }                      if (!IsAllZeros)                      {                          if (!skipblock)                          {                              fullblock.AddRange(sizeblock);                              fullblock.AddRange(datablock);                              fullblock.AddRange(endblock);                              http.Write(fullblock.ToArray()' 0' fullblock.Count);                              bytessent += n;                              OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' "Disk Copy"' (ulong)bytessent' (ulong)filesize));                              Thread.Sleep(100);                          }                          else                          {                              Exception ex = new Exception("Skipped Empty");                              throw new ReConnectException(string.Format("{0}"' bytessent)' ex);                          }                      }                      else                      {                          bytessent += n;                          skipblock = true;                      }                  }                  catch (Exception ex)                  {                      log.DebugFormat("EXCEPTION: {0} : {1}"' ex.GetType()' ex.Message);                      throw new ReConnectException(string.Format("{0}"' bytessent)' ex);                  }                    string str1 = string.Format(">>> {0} <<< Block {1} : Total {2} : Full {3} Skipped: {4}\r"'                                             i++'                                             n.ToString("N0"' CultureInfo.InvariantCulture)'                                             bytessent.ToString("N0"' CultureInfo.InvariantCulture)'                                             filesize.ToString("N0"' CultureInfo.InvariantCulture)'                                             skipblock);                  log.Debug(Encoding.ASCII.GetString(Encoding.UTF8.GetBytes(str1)));                    Thread.Sleep(100);              }
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,ReadLine,The following statement contains a magic number: do              {                  stream.ReadTimeout = 10000;                  try                  {                      int i = stream.ReadByte();                      if (i > 0)                      {                          char b = (char)i;                          messageData.Append(b);                          if (b == '\n') break;                      }                  }                  catch                  {                      break;                  }              } while (true);
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,GetResultCode,The following statement contains a magic number: if (bits.Length < 2) return 0;
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalResponse,The following statement contains a magic number: MarshalBaseTypes.MarshalInt(stream' 4 + 4);
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalResponse,The following statement contains a magic number: MarshalBaseTypes.MarshalInt(stream' 4 + 4);
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Connect,The following statement contains a magic number: tcpClient.LingerState = new LingerOption(true' 10);
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Connect,The following statement contains a magic number: tcpClient.SendTimeout = 50000;
Magic Number,XenOvfTransport,Http,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,Connect,The following statement contains a magic number: if (port == 443)              {                  // Create an SSL stream that will close the client's stream.                  SslStream sslStream = new SslStream(stream' false' new RemoteCertificateValidationCallback(ValidateServerCertificate)' null);                  try                  {                      sslStream.AuthenticateAsClient(""' null' SslProtocols.Tls | SslProtocols.Tls11 | SslProtocols.Tls12' true);                  }                  catch                  {                      if (tcpClient != null)                          tcpClient.Close();                      return null;                  }                  return sslStream;              }
Magic Number,XenOvfTransport,MarshalBaseTypes,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,UnmarshalInt32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,XenOvfTransport,MarshalBaseTypes,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,UnmarshalInt32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,XenOvfTransport,MarshalBaseTypes,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,UnmarshalInt32,The following statement contains a magic number: return (a << 0) | (b << 8) | (c << 16) | (d << 24);
Magic Number,XenOvfTransport,MarshalBaseTypes,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalInt32,The following statement contains a magic number: stream.WriteByte((byte)((x >> 8) & mask));
Magic Number,XenOvfTransport,MarshalBaseTypes,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalInt32,The following statement contains a magic number: stream.WriteByte((byte)((x >> 16) & mask));
Magic Number,XenOvfTransport,MarshalBaseTypes,C:\repos\xenserver_xenadmin\XenOvfTransport\Http.cs,MarshalInt32,The following statement contains a magic number: stream.WriteByte((byte)((x >> 24) & mask));
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The following statement contains a magic number: foreach (VirtualSystem_Type vSystem in ((VirtualSystemCollection_Type)ovfObj.Item).Content)              {                 //FIND/SET THE NAME OF THE VM  				ovfname = OVF.FindSystemName(ovfObj' vSystem.id);                  auditLog.DebugFormat("Import: {0}' {1}"' ovfname' pathToOvf);    				VirtualHardwareSection_Type vhs = OVF.FindVirtualHardwareSectionByAffinity(ovfObj' vSystem.id' "xen");                    XenRef<VM> vmRef = DefineSystem(xenSession' vhs' ovfname);                  if (vmRef == null)                  {                      log.Error(Messages.ERROR_CREATE_VM_FAILED);                      throw new ImportException(Messages.ERROR_CREATE_VM_FAILED);  				}    				HideSystem(xenSession' vmRef);                  log.DebugFormat("OVF.Import.Process: DefineSystem completed ({0})"' VM.get_name_label(xenSession' vmRef));  				  				#region Set appliance  				if (applRef != null)  					VM.set_appliance(xenSession' vmRef.opaque_ref' applRef.opaque_ref);    				if (ovfObj.Sections != null)  				{  					StartupSection_Type[] startUpArray = OVF.FindSections<StartupSection_Type>(ovfObj.Sections);  					if (startUpArray != null && startUpArray.Length > 0)  					{  						var startupSection = startUpArray[0];  						var itemList = startupSection.Item;    						if (itemList != null)  						{  							var item = itemList.FirstOrDefault(it => it.id == vSystem.id);    							if (item != null)  							{  								VM.set_start_delay(xenSession' vmRef.opaque_ref' item.startDelay);  								VM.set_shutdown_delay(xenSession' vmRef.opaque_ref' item.stopDelay);  								VM.set_order(xenSession' vmRef.opaque_ref' item.order);  							}  						}  					}  				}                	#endregion                    #region set has_vendor_device                    if (Helpers.DundeeOrGreater(xenSession.Connection))                  {                      var data = vhs.VirtualSystemOtherConfigurationData;                      if (data != null)                      {                          var datum = data.FirstOrDefault(s => s.Name == "VM_has_vendor_device");                          if (datum != null)                          {                              bool hasVendorDevice;                              if (bool.TryParse(datum.Value.Value' out hasVendorDevice) && hasVendorDevice)                                  VM.set_has_vendor_device(xenSession' vmRef.opaque_ref' hasVendorDevice);                          }                      }                  }                    #endregion                    #region Set vgpu                                    GPU_group gpuGroup;                                VGPU_type vgpuType;                  FindGpuGroupAndVgpuType(xenSession' vhs' out gpuGroup' out vgpuType);                    if (gpuGroup != null)                  {                      var other_config = new Dictionary<string' string>();                        if (Helpers.FeatureForbidden(xenSession' Host.RestrictVgpu))                          VGPU.create(xenSession' vmRef.opaque_ref' gpuGroup.opaque_ref' "0"' other_config);                      else if (vgpuType != null)                          VGPU.create(xenSession' vmRef.opaque_ref' gpuGroup.opaque_ref' "0"' other_config' vgpuType.opaque_ref);                  }                    #endregion                    SetDeviceConnections(ovfObj' vhs);                  try                  {                      foreach (RASD_Type rasd in vhs.Item)                      {                          string thisPassCode = null;                          // Check to see if THIS rasd is encrypted' if so' set the passcode.                          if (OVF.IsThisEncrypted(ovfObj' rasd))                              thisPassCode = passcode;                            string compression = "None";                          if (rasd.ResourceType.Value == 17 || rasd.ResourceType.Value == 19 || rasd.ResourceType.Value == 21)                          {  							bool skip = Tools.ValidateProperty("Caption"' rasd) &&  								 (  								  rasd.Caption.Value.ToUpper().Contains("COM") ||  								  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||  								  rasd.Caption.Value.ToUpper().Contains("ISO")  								 );                                if (!skip)                              {                                  File_Type file = OVF.FindFileReferenceByRASD(ovfObj' rasd);  								if (file == null)  									continue;                                    								if (IsKnownURIType(file.href))                                      _filedownloadsize = file.size;                                    VirtualDiskDesc_Type vdisk = OVF.FindDiskReference(ovfObj' rasd);  								SetIfDeviceIsBootable(ovfObj' rasd);                                  AdditionalSpace = OVF.ComputeCapacity(Convert.ToInt64(vdisk.capacity)' vdisk.capacityAllocationUnits);  // used in Wim file imports only.  								AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode);                              }                          }                          else                          {  							AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode);                          }                      }                        InstallSection_Type[] installSection = OVF.FindSections<InstallSection_Type>(vSystem.Items);                        if (installSection != null && installSection.Length == 1)                      {                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOn' "Import"' Messages.START_POST_INSTALL_INSTRUCTIONS));                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "Import"' Messages.START_POST_INSTALL_INSTRUCTIONS));                          HandleInstallSection(xenSession' vmRef' installSection[0]);                      }                      ShowSystem(xenSession' vmRef);                        #region PVS Proxy                      var site = FindPvsSite(xenSession' vhs);                        if (site != null)                      {                          var vm =  xenSession.Connection.Resolve(vmRef);                          if (vm != null)                          {                              var vifs = xenSession.Connection.ResolveAll(vm.VIFs);                              var firstVif = vifs.FirstOrDefault(v => v.device.Equals("0"));                                if (firstVif != null)                              {                                  var foundSite = PVS_site.get_by_uuid(xenSession' site.uuid);                                    if (foundSite != null)                                  {                                      PVS_proxy.create(xenSession' foundSite.opaque_ref' firstVif.opaque_ref);                                  }                              }                          }                      }                      #endregion                  }                  catch (Exception ex)                  {  					if (ex is OperationCanceledException)  						throw;                      log.Error(Messages.ERROR_IMPORT_FAILED);                      throw new Exception(Messages.ERROR_IMPORT_FAILED' ex);                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The following statement contains a magic number: foreach (VirtualSystem_Type vSystem in ((VirtualSystemCollection_Type)ovfObj.Item).Content)              {                 //FIND/SET THE NAME OF THE VM  				ovfname = OVF.FindSystemName(ovfObj' vSystem.id);                  auditLog.DebugFormat("Import: {0}' {1}"' ovfname' pathToOvf);    				VirtualHardwareSection_Type vhs = OVF.FindVirtualHardwareSectionByAffinity(ovfObj' vSystem.id' "xen");                    XenRef<VM> vmRef = DefineSystem(xenSession' vhs' ovfname);                  if (vmRef == null)                  {                      log.Error(Messages.ERROR_CREATE_VM_FAILED);                      throw new ImportException(Messages.ERROR_CREATE_VM_FAILED);  				}    				HideSystem(xenSession' vmRef);                  log.DebugFormat("OVF.Import.Process: DefineSystem completed ({0})"' VM.get_name_label(xenSession' vmRef));  				  				#region Set appliance  				if (applRef != null)  					VM.set_appliance(xenSession' vmRef.opaque_ref' applRef.opaque_ref);    				if (ovfObj.Sections != null)  				{  					StartupSection_Type[] startUpArray = OVF.FindSections<StartupSection_Type>(ovfObj.Sections);  					if (startUpArray != null && startUpArray.Length > 0)  					{  						var startupSection = startUpArray[0];  						var itemList = startupSection.Item;    						if (itemList != null)  						{  							var item = itemList.FirstOrDefault(it => it.id == vSystem.id);    							if (item != null)  							{  								VM.set_start_delay(xenSession' vmRef.opaque_ref' item.startDelay);  								VM.set_shutdown_delay(xenSession' vmRef.opaque_ref' item.stopDelay);  								VM.set_order(xenSession' vmRef.opaque_ref' item.order);  							}  						}  					}  				}                	#endregion                    #region set has_vendor_device                    if (Helpers.DundeeOrGreater(xenSession.Connection))                  {                      var data = vhs.VirtualSystemOtherConfigurationData;                      if (data != null)                      {                          var datum = data.FirstOrDefault(s => s.Name == "VM_has_vendor_device");                          if (datum != null)                          {                              bool hasVendorDevice;                              if (bool.TryParse(datum.Value.Value' out hasVendorDevice) && hasVendorDevice)                                  VM.set_has_vendor_device(xenSession' vmRef.opaque_ref' hasVendorDevice);                          }                      }                  }                    #endregion                    #region Set vgpu                                    GPU_group gpuGroup;                                VGPU_type vgpuType;                  FindGpuGroupAndVgpuType(xenSession' vhs' out gpuGroup' out vgpuType);                    if (gpuGroup != null)                  {                      var other_config = new Dictionary<string' string>();                        if (Helpers.FeatureForbidden(xenSession' Host.RestrictVgpu))                          VGPU.create(xenSession' vmRef.opaque_ref' gpuGroup.opaque_ref' "0"' other_config);                      else if (vgpuType != null)                          VGPU.create(xenSession' vmRef.opaque_ref' gpuGroup.opaque_ref' "0"' other_config' vgpuType.opaque_ref);                  }                    #endregion                    SetDeviceConnections(ovfObj' vhs);                  try                  {                      foreach (RASD_Type rasd in vhs.Item)                      {                          string thisPassCode = null;                          // Check to see if THIS rasd is encrypted' if so' set the passcode.                          if (OVF.IsThisEncrypted(ovfObj' rasd))                              thisPassCode = passcode;                            string compression = "None";                          if (rasd.ResourceType.Value == 17 || rasd.ResourceType.Value == 19 || rasd.ResourceType.Value == 21)                          {  							bool skip = Tools.ValidateProperty("Caption"' rasd) &&  								 (  								  rasd.Caption.Value.ToUpper().Contains("COM") ||  								  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||  								  rasd.Caption.Value.ToUpper().Contains("ISO")  								 );                                if (!skip)                              {                                  File_Type file = OVF.FindFileReferenceByRASD(ovfObj' rasd);  								if (file == null)  									continue;                                    								if (IsKnownURIType(file.href))                                      _filedownloadsize = file.size;                                    VirtualDiskDesc_Type vdisk = OVF.FindDiskReference(ovfObj' rasd);  								SetIfDeviceIsBootable(ovfObj' rasd);                                  AdditionalSpace = OVF.ComputeCapacity(Convert.ToInt64(vdisk.capacity)' vdisk.capacityAllocationUnits);  // used in Wim file imports only.  								AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode);                              }                          }                          else                          {  							AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode);                          }                      }                        InstallSection_Type[] installSection = OVF.FindSections<InstallSection_Type>(vSystem.Items);                        if (installSection != null && installSection.Length == 1)                      {                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOn' "Import"' Messages.START_POST_INSTALL_INSTRUCTIONS));                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "Import"' Messages.START_POST_INSTALL_INSTRUCTIONS));                          HandleInstallSection(xenSession' vmRef' installSection[0]);                      }                      ShowSystem(xenSession' vmRef);                        #region PVS Proxy                      var site = FindPvsSite(xenSession' vhs);                        if (site != null)                      {                          var vm =  xenSession.Connection.Resolve(vmRef);                          if (vm != null)                          {                              var vifs = xenSession.Connection.ResolveAll(vm.VIFs);                              var firstVif = vifs.FirstOrDefault(v => v.device.Equals("0"));                                if (firstVif != null)                              {                                  var foundSite = PVS_site.get_by_uuid(xenSession' site.uuid);                                    if (foundSite != null)                                  {                                      PVS_proxy.create(xenSession' foundSite.opaque_ref' firstVif.opaque_ref);                                  }                              }                          }                      }                      #endregion                  }                  catch (Exception ex)                  {  					if (ex is OperationCanceledException)  						throw;                      log.Error(Messages.ERROR_IMPORT_FAILED);                      throw new Exception(Messages.ERROR_IMPORT_FAILED' ex);                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,Process,The following statement contains a magic number: foreach (VirtualSystem_Type vSystem in ((VirtualSystemCollection_Type)ovfObj.Item).Content)              {                 //FIND/SET THE NAME OF THE VM  				ovfname = OVF.FindSystemName(ovfObj' vSystem.id);                  auditLog.DebugFormat("Import: {0}' {1}"' ovfname' pathToOvf);    				VirtualHardwareSection_Type vhs = OVF.FindVirtualHardwareSectionByAffinity(ovfObj' vSystem.id' "xen");                    XenRef<VM> vmRef = DefineSystem(xenSession' vhs' ovfname);                  if (vmRef == null)                  {                      log.Error(Messages.ERROR_CREATE_VM_FAILED);                      throw new ImportException(Messages.ERROR_CREATE_VM_FAILED);  				}    				HideSystem(xenSession' vmRef);                  log.DebugFormat("OVF.Import.Process: DefineSystem completed ({0})"' VM.get_name_label(xenSession' vmRef));  				  				#region Set appliance  				if (applRef != null)  					VM.set_appliance(xenSession' vmRef.opaque_ref' applRef.opaque_ref);    				if (ovfObj.Sections != null)  				{  					StartupSection_Type[] startUpArray = OVF.FindSections<StartupSection_Type>(ovfObj.Sections);  					if (startUpArray != null && startUpArray.Length > 0)  					{  						var startupSection = startUpArray[0];  						var itemList = startupSection.Item;    						if (itemList != null)  						{  							var item = itemList.FirstOrDefault(it => it.id == vSystem.id);    							if (item != null)  							{  								VM.set_start_delay(xenSession' vmRef.opaque_ref' item.startDelay);  								VM.set_shutdown_delay(xenSession' vmRef.opaque_ref' item.stopDelay);  								VM.set_order(xenSession' vmRef.opaque_ref' item.order);  							}  						}  					}  				}                	#endregion                    #region set has_vendor_device                    if (Helpers.DundeeOrGreater(xenSession.Connection))                  {                      var data = vhs.VirtualSystemOtherConfigurationData;                      if (data != null)                      {                          var datum = data.FirstOrDefault(s => s.Name == "VM_has_vendor_device");                          if (datum != null)                          {                              bool hasVendorDevice;                              if (bool.TryParse(datum.Value.Value' out hasVendorDevice) && hasVendorDevice)                                  VM.set_has_vendor_device(xenSession' vmRef.opaque_ref' hasVendorDevice);                          }                      }                  }                    #endregion                    #region Set vgpu                                    GPU_group gpuGroup;                                VGPU_type vgpuType;                  FindGpuGroupAndVgpuType(xenSession' vhs' out gpuGroup' out vgpuType);                    if (gpuGroup != null)                  {                      var other_config = new Dictionary<string' string>();                        if (Helpers.FeatureForbidden(xenSession' Host.RestrictVgpu))                          VGPU.create(xenSession' vmRef.opaque_ref' gpuGroup.opaque_ref' "0"' other_config);                      else if (vgpuType != null)                          VGPU.create(xenSession' vmRef.opaque_ref' gpuGroup.opaque_ref' "0"' other_config' vgpuType.opaque_ref);                  }                    #endregion                    SetDeviceConnections(ovfObj' vhs);                  try                  {                      foreach (RASD_Type rasd in vhs.Item)                      {                          string thisPassCode = null;                          // Check to see if THIS rasd is encrypted' if so' set the passcode.                          if (OVF.IsThisEncrypted(ovfObj' rasd))                              thisPassCode = passcode;                            string compression = "None";                          if (rasd.ResourceType.Value == 17 || rasd.ResourceType.Value == 19 || rasd.ResourceType.Value == 21)                          {  							bool skip = Tools.ValidateProperty("Caption"' rasd) &&  								 (  								  rasd.Caption.Value.ToUpper().Contains("COM") ||  								  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||  								  rasd.Caption.Value.ToUpper().Contains("ISO")  								 );                                if (!skip)                              {                                  File_Type file = OVF.FindFileReferenceByRASD(ovfObj' rasd);  								if (file == null)  									continue;                                    								if (IsKnownURIType(file.href))                                      _filedownloadsize = file.size;                                    VirtualDiskDesc_Type vdisk = OVF.FindDiskReference(ovfObj' rasd);  								SetIfDeviceIsBootable(ovfObj' rasd);                                  AdditionalSpace = OVF.ComputeCapacity(Convert.ToInt64(vdisk.capacity)' vdisk.capacityAllocationUnits);  // used in Wim file imports only.  								AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode);                              }                          }                          else                          {  							AddResourceSettingData(xenSession' vmRef' rasd' pathToOvf' OVF.FindRasdFileName(ovfObj' rasd' out compression)' compression' encryptionVersion' thisPassCode);                          }                      }                        InstallSection_Type[] installSection = OVF.FindSections<InstallSection_Type>(vSystem.Items);                        if (installSection != null && installSection.Length == 1)                      {                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOn' "Import"' Messages.START_POST_INSTALL_INSTRUCTIONS));                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "Import"' Messages.START_POST_INSTALL_INSTRUCTIONS));                          HandleInstallSection(xenSession' vmRef' installSection[0]);                      }                      ShowSystem(xenSession' vmRef);                        #region PVS Proxy                      var site = FindPvsSite(xenSession' vhs);                        if (site != null)                      {                          var vm =  xenSession.Connection.Resolve(vmRef);                          if (vm != null)                          {                              var vifs = xenSession.Connection.ResolveAll(vm.VIFs);                              var firstVif = vifs.FirstOrDefault(v => v.device.Equals("0"));                                if (firstVif != null)                              {                                  var foundSite = PVS_site.get_by_uuid(xenSession' site.uuid);                                    if (foundSite != null)                                  {                                      PVS_proxy.create(xenSession' foundSite.opaque_ref' firstVif.opaque_ref);                                  }                              }                          }                      }                      #endregion                  }                  catch (Exception ex)                  {  					if (ex is OperationCanceledException)  						throw;                      log.Error(Messages.ERROR_IMPORT_FAILED);                      throw new Exception(Messages.ERROR_IMPORT_FAILED' ex);                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,InstallSectionStartVirtualMachine,The following statement contains a magic number: int bootStopDelayAsMs = initialBootStopDelayAsSeconds * 1000;
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ImportFile,The following statement contains a magic number: if (filename != null)              {                  if (IsKnownURIType(filename))                  {                      Uri fileUri = new Uri(filename);                      filename = DownloadFileAsync(fileUri' 0);                      sourcefile = filename;                  }                    if (File.Exists(filename))                  {                      string ext = Path.GetExtension(filename);                        try                      {                          encryptfilename = "enc_" + filename;                          uncompressedfilename = "unc_" + filename;                          // OK.. lets see is the file encrypted?                          #region ENCRYPTION                          if (passcode != null)                          {                              var statusMessage = string.Format(Messages.START_FILE_DECRYPTION' filename);                              OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOn' "Security"' statusMessage));                              log.Debug(statusMessage);                              OVF.DecryptToTempFile(EncryptionClass' filename' version' passcode' encryptfilename);                              sourcefile = encryptfilename;                              statusMessage += Messages.COMPLETE;                              OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOff' "Security"' statusMessage));                          }                          #endregion                             #region COMPRESSION                          // Identity == no compression' it is meant when a URL is used to identify the compression during transport.                          if (compression != null &&                               !compression.ToLower().Equals("none") &&                               !compression.ToLower().Equals("identity"))                          {                              // gz is the only understood 'compressed' format' strip it..                              // the OVF is marked with "compressed=gzip" therefor it will get decompress                              // correctly and use with its disk extension (vmdk/vhd/vdi)...                              if (ext.ToLower().EndsWith(".gz"))                              {                                  string newfilename = Path.GetFileNameWithoutExtension(uncompressedfilename);                                  uncompressedfilename = newfilename;                                  ext = Path.GetExtension(uncompressedfilename);                              }                              var statusMessage = string.Format(Messages.START_FILE_EXPANSION' filename);                              OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOn' "Compression"' statusMessage));                          	var ovfCompressor = new OvfCompressor();  							ovfCompressor.UncompressFile(sourcefile' uncompressedfilename' compression);                              if (File.Exists(encryptfilename)) { File.Delete(encryptfilename); }                              sourcefile = uncompressedfilename;                              statusMessage += Messages.COMPLETE;                              OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.MarqueeOff' "Compression"' statusMessage));                          }                          #endregion                            #region DISK SELECTION                          bool knownDisk = false;                          foreach (string diskext in VirtualDisk.SupportedDiskFormats)                          {                              if (ext.ToLower().Contains(diskext.ToLower()))                              {                                  knownDisk = true;                                  break;                              }                          }                          if (knownDisk)                          {                              log.DebugFormat("Found file {0} using {1} Stream"' filename' ext);                              vhdDisk = VirtualDisk.OpenDisk(sourcefile' FileAccess.Read);                              dataStream = vhdDisk.Content;                              dataCapacity = vhdDisk.Capacity;                          }                          else if (ext.ToLower().Contains("wim"))                          {                              log.WarnFormat("EXPERIMENTAL CODE: Found file {0} using WIM file structure"' filename);                              wimDisk = new DiscUtils.Wim.WimFile(new FileStream(sourcefile' FileMode.Open' FileAccess.Read));                              //wimFS = wimDisk.GetImage(wimDisk.BootImage);                                dataStream = null;                                string manifest = wimDisk.Manifest;                              Wim_Manifest wimManifest = (Wim_Manifest)Tools.Deserialize(manifest' typeof(Wim_Manifest));                              ulong imagesize = wimManifest.Image[wimDisk.BootImage].TotalBytes; // <----<<< Image data size                              wimFileCount = wimManifest.Image[wimDisk.BootImage].FileCount;                              dataCapacity = (long)(imagesize + AdditionalSpace);                              useTransferMethod = TransferMethod.Files;                          }                          else if (ext.ToLower().Contains("xva"))                          {                              log.WarnFormat("EXPERIMENTAL CODE: Found file {0} using XVA Stream (DISK {1} is being imported)."' filename' xvadisk);                              DiscUtils.Xva.VirtualMachine vm = new DiscUtils.Xva.VirtualMachine(new FileStream(sourcefile' FileMode.Open' FileAccess.Read));                              int i = 0;                              foreach (DiscUtils.Xva.Disk d in vm.Disks)                              {                                  if (i == xvadisk)                                  {                                      vhdDisk = d;                                      break;                                  }                              }                              dataStream = vhdDisk.Content;                              dataCapacity = vhdDisk.Capacity;                          }                          else if (ext.ToLower().EndsWith("iso"))                          {                              if (string.IsNullOrEmpty(sruuid))                              {                                  useTransport = TransferType.Skip;                              }                              else                              {                                  //DiscUtils.Iso9660.CDReader cdr = new DiscUtils.Iso9660.CDReader(File.OpenRead(filename)' true);                                  dataStream = File.OpenRead(filename);                                  dataCapacity = dataStream.Length + (512 * KB);  // Xen does 512KB rounding this is to ensure it doesn't round down below size.                              }                          }                          #endregion                      }                      catch (Exception ex)                      {                          log.Error(Messages.ISCSI_ERROR_CANNOT_OPEN_DISK);                          throw new Exception(Messages.ISCSI_ERROR_CANNOT_OPEN_DISK' ex);                      }                  }                  else                  {                      throw new FileNotFoundException(string.Format(Messages.FILE_MISSING' filename));                  }              }              else              {                  log.Error(Messages.ERROR_FILE_NAME_NULL);                  throw new InvalidDataException(Messages.ERROR_FILE_NAME_NULL);              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The following statement contains a magic number: vdiHash.Add("virtual_size"' Convert.ToString(capacity + (2 * MB)));
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The following statement contains a magic number: vdiHash.Add("physical_utilisation"' Convert.ToString(capacity + (2 * MB)));
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,UploadRawVDI,The following statement contains a magic number: Thread.Sleep(new TimeSpan(0' 0' 5));
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: ulong memorySize = 512 * MB;
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: RASD_Type[] rasds = OVF.FindRasdByType(system' 4);
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: if (rasds != null && rasds.Length > 0)              {                  // hopefully only one. but if more ... then deal with it.                  memorySize = 0;                  // These are Default to MB... if other ensure RASD is correct.                  double memoryPower = 20.0;                  double memoryRaise = 2.0;                                   foreach (RASD_Type rasd in rasds)                  {                      if (rasd.AllocationUnits.Value.ToLower().StartsWith("bytes"))                      {                          // Format:  Bytes * 2 ^ 20                          string[] a1 = rasd.AllocationUnits.Value.Split(new char[] { '*'' '^' });                          if (a1.Length == 3)                          {                              memoryRaise = Convert.ToDouble(a1[1]);                              memoryPower = Convert.ToDouble(a1[2]);                          }                      }                      double memoryMultiplier = Math.Pow(memoryRaise'memoryPower);                      memorySize += rasd.VirtualQuantity.Value * Convert.ToUInt64(memoryMultiplier);                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: if (rasds != null && rasds.Length > 0)              {                  // hopefully only one. but if more ... then deal with it.                  memorySize = 0;                  // These are Default to MB... if other ensure RASD is correct.                  double memoryPower = 20.0;                  double memoryRaise = 2.0;                                   foreach (RASD_Type rasd in rasds)                  {                      if (rasd.AllocationUnits.Value.ToLower().StartsWith("bytes"))                      {                          // Format:  Bytes * 2 ^ 20                          string[] a1 = rasd.AllocationUnits.Value.Split(new char[] { '*'' '^' });                          if (a1.Length == 3)                          {                              memoryRaise = Convert.ToDouble(a1[1]);                              memoryPower = Convert.ToDouble(a1[2]);                          }                      }                      double memoryMultiplier = Math.Pow(memoryRaise'memoryPower);                      memorySize += rasd.VirtualQuantity.Value * Convert.ToUInt64(memoryMultiplier);                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: if (rasds != null && rasds.Length > 0)              {                  // hopefully only one. but if more ... then deal with it.                  memorySize = 0;                  // These are Default to MB... if other ensure RASD is correct.                  double memoryPower = 20.0;                  double memoryRaise = 2.0;                                   foreach (RASD_Type rasd in rasds)                  {                      if (rasd.AllocationUnits.Value.ToLower().StartsWith("bytes"))                      {                          // Format:  Bytes * 2 ^ 20                          string[] a1 = rasd.AllocationUnits.Value.Split(new char[] { '*'' '^' });                          if (a1.Length == 3)                          {                              memoryRaise = Convert.ToDouble(a1[1]);                              memoryPower = Convert.ToDouble(a1[2]);                          }                      }                      double memoryMultiplier = Math.Pow(memoryRaise'memoryPower);                      memorySize += rasd.VirtualQuantity.Value * Convert.ToUInt64(memoryMultiplier);                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: if (rasds != null && rasds.Length > 0)              {                  // hopefully only one. but if more ... then deal with it.                  memorySize = 0;                  // These are Default to MB... if other ensure RASD is correct.                  double memoryPower = 20.0;                  double memoryRaise = 2.0;                                   foreach (RASD_Type rasd in rasds)                  {                      if (rasd.AllocationUnits.Value.ToLower().StartsWith("bytes"))                      {                          // Format:  Bytes * 2 ^ 20                          string[] a1 = rasd.AllocationUnits.Value.Split(new char[] { '*'' '^' });                          if (a1.Length == 3)                          {                              memoryRaise = Convert.ToDouble(a1[1]);                              memoryPower = Convert.ToDouble(a1[2]);                          }                      }                      double memoryMultiplier = Math.Pow(memoryRaise'memoryPower);                      memorySize += rasd.VirtualQuantity.Value * Convert.ToUInt64(memoryMultiplier);                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,DefineSystem,The following statement contains a magic number: rasds = OVF.FindRasdByType(system' 3);
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindGpuGroupAndVgpuType,The following statement contains a magic number: string vendorName = m.Groups[2].Value;
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindGpuGroupAndVgpuType,The following statement contains a magic number: string modelName = m.Groups[3].Value;
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,MakePlatformHash,The following statement contains a magic number: for (int i = 0; i < platformArray.Length - 1; i += 2)              {                  string identifier = platformArray[i].Trim();                  string identvalue = platformArray[i + 1].Trim();                  hPlatform.Add(identifier' identvalue);              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: int[] connections = new int[16];
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: foreach (RASD_Type rasd in rasdList)              {                  switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: foreach (RASD_Type rasd in rasdList)              {                  switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: foreach (RASD_Type rasd in rasdList)              {                  switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: foreach (RASD_Type rasd in rasdList)              {                  switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: foreach (RASD_Type rasd in rasdList)              {                  switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: foreach (RASD_Type rasd in rasdList)              {                  switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: foreach (RASD_Type rasd in rasdList)              {                  switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following statement contains a magic number: foreach (RASD_Type rasd in rasdList)              {                  switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: foreach (RASD_Type rasd in rasds)              {                  if (rasd.Parent != null && !string.IsNullOrEmpty(rasd.Parent.Value) )                  {                      string parent = rasd.Parent.Value.Replace(@"\"' "");                      string instance = instanceId.Replace(@"\"' "");                      if (parent.Contains(instance))                      {                          switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }                      }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: foreach (RASD_Type rasd in rasds)              {                  if (rasd.Parent != null && !string.IsNullOrEmpty(rasd.Parent.Value) )                  {                      string parent = rasd.Parent.Value.Replace(@"\"' "");                      string instance = instanceId.Replace(@"\"' "");                      if (parent.Contains(instance))                      {                          switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }                      }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: foreach (RASD_Type rasd in rasds)              {                  if (rasd.Parent != null && !string.IsNullOrEmpty(rasd.Parent.Value) )                  {                      string parent = rasd.Parent.Value.Replace(@"\"' "");                      string instance = instanceId.Replace(@"\"' "");                      if (parent.Contains(instance))                      {                          switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }                      }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: foreach (RASD_Type rasd in rasds)              {                  if (rasd.Parent != null && !string.IsNullOrEmpty(rasd.Parent.Value) )                  {                      string parent = rasd.Parent.Value.Replace(@"\"' "");                      string instance = instanceId.Replace(@"\"' "");                      if (parent.Contains(instance))                      {                          switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }                      }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: foreach (RASD_Type rasd in rasds)              {                  if (rasd.Parent != null && !string.IsNullOrEmpty(rasd.Parent.Value) )                  {                      string parent = rasd.Parent.Value.Replace(@"\"' "");                      string instance = instanceId.Replace(@"\"' "");                      if (parent.Contains(instance))                      {                          switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }                      }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following statement contains a magic number: foreach (RASD_Type rasd in rasds)              {                  if (rasd.Parent != null && !string.IsNullOrEmpty(rasd.Parent.Value) )                  {                      string parent = rasd.Parent.Value.Replace(@"\"' "");                      string instance = instanceId.Replace(@"\"' "");                      if (parent.Contains(instance))                      {                          switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }                      }                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,The following statement contains a magic number: if (Tools.ValidateProperty("Address"' rasd))              {                  if ((rasd.ResourceType.Value == 21 ||                      rasd.ResourceType.Value == 5) &&                      rasd.Address.Value == "0")                  {                      isBootable = true;                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,The following statement contains a magic number: if (Tools.ValidateProperty("Address"' rasd))              {                  if ((rasd.ResourceType.Value == 21 ||                      rasd.ResourceType.Value == 5) &&                      rasd.Address.Value == "0")                  {                      isBootable = true;                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,The following statement contains a magic number: if (Tools.ValidateProperty("AddressOnParent"' rasd))              {                  if ((rasd.ResourceType.Value == 17 ||                      rasd.ResourceType.Value == 19) &&                      rasd.AddressOnParent.Value == "0")                  {                      isBootable = true;                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetIfDeviceIsBootable,The following statement contains a magic number: if (Tools.ValidateProperty("AddressOnParent"' rasd))              {                  if ((rasd.ResourceType.Value == 17 ||                      rasd.ResourceType.Value == 19) &&                      rasd.AddressOnParent.Value == "0")                  {                      isBootable = true;                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ExtractBCDFromVHD,The following statement contains a magic number: if (arch == 0) { architecture = "x86"; }              else if (arch == 9) { architecture = "x64"; }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,ExtractBootmgrFromVHD,The following statement contains a magic number: if (arch == 0)  { architecture = "x86"; }              else if (arch == 9) { architecture = "x64"; }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindReferenceVHD,The following statement contains a magic number: if (!File.Exists(refVHD))              {                    string apath = Assembly.GetExecutingAssembly().Location;                  string assempath = Path.GetDirectoryName(apath);                  while (assempath.Length > 3)                  {                      string testPath = Path.Combine(assempath' referenceVHD);                      if (File.Exists(testPath))                      {                          refVHD = testPath;                          break;                      }                      else if (File.Exists(testPath + bzip2ext))                      {                          refVHD = testPath + bzip2ext;                          break;                      }                      assempath = Path.GetDirectoryName(assempath);                  }                    if (Path.GetExtension(refVHD) == bzip2ext)                  {                      string outfile = Path.Combine(datapath' Path.GetFileNameWithoutExtension(refVHD));                      if (!File.Exists(outfile))                      {                          try                          {                              using (CompressionStream bzos = CompressionFactory.Writer(CompressionFactory.Type.Bz2' File.OpenWrite(outfile)))                              {                                  bzos.BufferedWrite(File.OpenRead(refVHD));                              }                          }                          finally { }                      }                      refVHD = outfile;                      log.Info("A Compressed Reference VHD was found and uncompressed.");                  }              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: if (rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null)              {                  ushort address1 = Convert.ToUInt16(rasd1.Address.Value);                  ushort address2 = Convert.ToUInt16(rasd2.Address.Value);                  int left = (rasd1.ResourceType.Value * 10) + address1;                  int right = (rasd2.ResourceType.Value * 10) + address2;                  return (left).CompareTo(right);              }              else              {                  return rasd1.ResourceType.Value.CompareTo(rasd2.ResourceType.Value);              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: if (rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null)              {                  ushort address1 = Convert.ToUInt16(rasd1.Address.Value);                  ushort address2 = Convert.ToUInt16(rasd2.Address.Value);                  int left = (rasd1.ResourceType.Value * 10) + address1;                  int right = (rasd2.ResourceType.Value * 10) + address2;                  return (left).CompareTo(right);              }              else              {                  return rasd1.ResourceType.Value.CompareTo(rasd2.ResourceType.Value);              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: if (rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null)              {                  ushort address1 = Convert.ToUInt16(rasd1.Address.Value);                  ushort address2 = Convert.ToUInt16(rasd2.Address.Value);                  int left = (rasd1.ResourceType.Value * 10) + address1;                  int right = (rasd2.ResourceType.Value * 10) + address2;                  return (left).CompareTo(right);              }              else              {                  return rasd1.ResourceType.Value.CompareTo(rasd2.ResourceType.Value);              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: if (rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null)              {                  ushort address1 = Convert.ToUInt16(rasd1.Address.Value);                  ushort address2 = Convert.ToUInt16(rasd2.Address.Value);                  int left = (rasd1.ResourceType.Value * 10) + address1;                  int right = (rasd2.ResourceType.Value * 10) + address2;                  return (left).CompareTo(right);              }              else              {                  return rasd1.ResourceType.Value.CompareTo(rasd2.ResourceType.Value);              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: if (rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null)              {                  ushort address1 = Convert.ToUInt16(rasd1.Address.Value);                  ushort address2 = Convert.ToUInt16(rasd2.Address.Value);                  int left = (rasd1.ResourceType.Value * 10) + address1;                  int right = (rasd2.ResourceType.Value * 10) + address2;                  return (left).CompareTo(right);              }              else              {                  return rasd1.ResourceType.Value.CompareTo(rasd2.ResourceType.Value);              }
Magic Number,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,compareControllerRasd,The following statement contains a magic number: if (rasd1.ResourceType.Value >= 5 &&                  rasd1.ResourceType.Value <= 9 &&                  rasd2.ResourceType.Value >= 5 &&                  rasd2.ResourceType.Value <= 9 &&                   rasd1.Address != null &&                  rasd1.Address.Value != null &&                  rasd2.Address != null &&                  rasd2.Address.Value != null)              {                  ushort address1 = Convert.ToUInt16(rasd1.Address.Value);                  ushort address2 = Convert.ToUInt16(rasd2.Address.Value);                  int left = (rasd1.ResourceType.Value * 10) + address1;                  int right = (rasd2.ResourceType.Value * 10) + address2;                  return (left).CompareTo(right);              }              else              {                  return rasd1.ResourceType.Value.CompareTo(rasd2.ResourceType.Value);              }
Magic Number,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Connect,The following statement contains a magic number: while (!iSCSIConnected && iSCSIConnectRetry > 0)              {  				if (Cancel)  					throw new OperationCanceledException();                    try                  {                      log.DebugFormat(Messages.FILES_TRANSPORT_SETUP' vdiuuid);                      TargetAddress ta = new TargetAddress(ipaddress' ipport' targetGroupTag);                      TargetInfo[] targets = initiator.GetTargets(ta);                      log.InfoFormat("iSCSI.Connect found {0} targets' connecting to: {1}"' targets.Length' targets[0].Name);                      _iscsisession = initiator.ConnectTo(targets[0]);                      iSCSIConnected = true;                  }                  catch (Exception ex)                  {                      log.ErrorFormat("{0} {1}"' Messages.ISCSI_ERROR' ex.Message);                      Thread.Sleep(new TimeSpan(0' 0' 5));                      iSCSIConnectRetry--;                  }              }
Magic Number,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,The following statement contains a magic number: using (var hashAlgorithm = System.Security.Cryptography.HashAlgorithm.Create(_hashAlgorithmName))              {                  while (offset < limit)                  {                      if (Cancel)                      {                          log.InfoFormat(Messages.ISCSI_COPY_CANCELLED' filename);                          throw new OperationCanceledException(string.Format(Messages.ISCSI_COPY_CANCELLED' filename));                      }                        try                      {                          bytesRead = source.Read(_buffer' 0' _buffer.Length);                            if (bytesRead <= 0)                              break;                            if (!IsZeros(_buffer))                          {                              // This block has content.                              // Seek the same position in the destination.                              destination.Seek(offset' SeekOrigin.Begin);                                destination.Write(_buffer' 0' bytesRead);                                if ((offset + bytesRead) < limit)                              {                                  // This is not the last block.                                  // Compute the partial hash.                                  if (shouldHash)                                      hashAlgorithm.TransformBlock(_buffer' 0' bytesRead' _buffer' 0);                              }                          }                            offset += bytesRead;                            _bytescopied = (ulong)offset;                            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' updatemsg' _bytescopied' _bytestotal));                      }                      catch (Exception ex)                      {                          var message = string.Format(Messages.ISCSI_COPY_ERROR' filename);                          log.Warn(message);                          throw new Exception(message' ex);                      }                  }                    if (shouldHash)                  {                      // It is necessary to call TransformBlock at least once and TransformFinalBlock only once before getting the hash.                      // If only the last buffer had content' then TransformBlock would not have been called at least once.                      // So' split the last buffer and hash it even if it is empty.                      // Note: TransformBlock will accept an "inputCount" that is zero.                      hashAlgorithm.TransformBlock(_buffer' 0' bytesRead / 2' _buffer' 0);                        // Compute the final hash.                      hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2);                        _copyHash = hashAlgorithm.Hash;                  }              }
Magic Number,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,The following statement contains a magic number: using (var hashAlgorithm = System.Security.Cryptography.HashAlgorithm.Create(_hashAlgorithmName))              {                  while (offset < limit)                  {                      if (Cancel)                      {                          log.InfoFormat(Messages.ISCSI_COPY_CANCELLED' filename);                          throw new OperationCanceledException(string.Format(Messages.ISCSI_COPY_CANCELLED' filename));                      }                        try                      {                          bytesRead = source.Read(_buffer' 0' _buffer.Length);                            if (bytesRead <= 0)                              break;                            if (!IsZeros(_buffer))                          {                              // This block has content.                              // Seek the same position in the destination.                              destination.Seek(offset' SeekOrigin.Begin);                                destination.Write(_buffer' 0' bytesRead);                                if ((offset + bytesRead) < limit)                              {                                  // This is not the last block.                                  // Compute the partial hash.                                  if (shouldHash)                                      hashAlgorithm.TransformBlock(_buffer' 0' bytesRead' _buffer' 0);                              }                          }                            offset += bytesRead;                            _bytescopied = (ulong)offset;                            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' updatemsg' _bytescopied' _bytestotal));                      }                      catch (Exception ex)                      {                          var message = string.Format(Messages.ISCSI_COPY_ERROR' filename);                          log.Warn(message);                          throw new Exception(message' ex);                      }                  }                    if (shouldHash)                  {                      // It is necessary to call TransformBlock at least once and TransformFinalBlock only once before getting the hash.                      // If only the last buffer had content' then TransformBlock would not have been called at least once.                      // So' split the last buffer and hash it even if it is empty.                      // Note: TransformBlock will accept an "inputCount" that is zero.                      hashAlgorithm.TransformBlock(_buffer' 0' bytesRead / 2' _buffer' 0);                        // Compute the final hash.                      hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2);                        _copyHash = hashAlgorithm.Hash;                  }              }
Magic Number,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Copy,The following statement contains a magic number: using (var hashAlgorithm = System.Security.Cryptography.HashAlgorithm.Create(_hashAlgorithmName))              {                  while (offset < limit)                  {                      if (Cancel)                      {                          log.InfoFormat(Messages.ISCSI_COPY_CANCELLED' filename);                          throw new OperationCanceledException(string.Format(Messages.ISCSI_COPY_CANCELLED' filename));                      }                        try                      {                          bytesRead = source.Read(_buffer' 0' _buffer.Length);                            if (bytesRead <= 0)                              break;                            if (!IsZeros(_buffer))                          {                              // This block has content.                              // Seek the same position in the destination.                              destination.Seek(offset' SeekOrigin.Begin);                                destination.Write(_buffer' 0' bytesRead);                                if ((offset + bytesRead) < limit)                              {                                  // This is not the last block.                                  // Compute the partial hash.                                  if (shouldHash)                                      hashAlgorithm.TransformBlock(_buffer' 0' bytesRead' _buffer' 0);                              }                          }                            offset += bytesRead;                            _bytescopied = (ulong)offset;                            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' updatemsg' _bytescopied' _bytestotal));                      }                      catch (Exception ex)                      {                          var message = string.Format(Messages.ISCSI_COPY_ERROR' filename);                          log.Warn(message);                          throw new Exception(message' ex);                      }                  }                    if (shouldHash)                  {                      // It is necessary to call TransformBlock at least once and TransformFinalBlock only once before getting the hash.                      // If only the last buffer had content' then TransformBlock would not have been called at least once.                      // So' split the last buffer and hash it even if it is empty.                      // Note: TransformBlock will accept an "inputCount" that is zero.                      hashAlgorithm.TransformBlock(_buffer' 0' bytesRead / 2' _buffer' 0);                        // Compute the final hash.                      hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2);                        _copyHash = hashAlgorithm.Hash;                  }              }
Magic Number,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Verify,The following statement contains a magic number: using (var hashAlgorithm = System.Security.Cryptography.HashAlgorithm.Create(_hashAlgorithmName))              {                  while (offset < limit)                  {                      if (Cancel)                      {                          log.Info(Messages.ISCSI_VERIFY_CANCELLED);                          throw new OperationCanceledException(Messages.ISCSI_VERIFY_CANCELLED);                      }                        try                      {                          bytesRead = target.Read(_buffer' 0' _buffer.Length);                            if (bytesRead <= 0)                              break;                            if (!IsZeros(_buffer))                          {                              if ((offset + bytesRead) < limit)                              {                                  // This is not the last block.                                  // Compute the partial hash.                                  hashAlgorithm.TransformBlock(_buffer' 0' bytesRead' _buffer' 0);                              }                          }                            offset += bytesRead;                            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' updatemsg' (ulong)offset' (ulong)limit));                      }                      catch (Exception ex)                      {                          var message = string.Format(Messages.ISCSI_VERIFY_ERROR' filename);                          log.WarnFormat("{0} {1}"' message' ex.Message);                          throw new Exception(message' ex);                      }                  }                    // It is necessary to call TransformBlock at least once and TransformFinalBlock only once before getting the hash.                  // If only the last buffer had content' then TransformBlock would not have been called at least once.                  // So' split the last buffer and hash it even if it is empty.                  // Note: TransformBlock will accept an "inputCount" that is zero.                  hashAlgorithm.TransformBlock(_buffer' 0' bytesRead / 2' _buffer' 0);                    // Compute the final hash.                  hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2);                    // Compare targetHash with copyHash.                  if (!System.Linq.Enumerable.SequenceEqual(_copyHash' hashAlgorithm.Hash))                  {                      log.Error(Messages.ISCSI_VERIFY_INVALID);                      throw new Exception(Messages.ISCSI_VERIFY_INVALID);                  }              }
Magic Number,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Verify,The following statement contains a magic number: using (var hashAlgorithm = System.Security.Cryptography.HashAlgorithm.Create(_hashAlgorithmName))              {                  while (offset < limit)                  {                      if (Cancel)                      {                          log.Info(Messages.ISCSI_VERIFY_CANCELLED);                          throw new OperationCanceledException(Messages.ISCSI_VERIFY_CANCELLED);                      }                        try                      {                          bytesRead = target.Read(_buffer' 0' _buffer.Length);                            if (bytesRead <= 0)                              break;                            if (!IsZeros(_buffer))                          {                              if ((offset + bytesRead) < limit)                              {                                  // This is not the last block.                                  // Compute the partial hash.                                  hashAlgorithm.TransformBlock(_buffer' 0' bytesRead' _buffer' 0);                              }                          }                            offset += bytesRead;                            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' updatemsg' (ulong)offset' (ulong)limit));                      }                      catch (Exception ex)                      {                          var message = string.Format(Messages.ISCSI_VERIFY_ERROR' filename);                          log.WarnFormat("{0} {1}"' message' ex.Message);                          throw new Exception(message' ex);                      }                  }                    // It is necessary to call TransformBlock at least once and TransformFinalBlock only once before getting the hash.                  // If only the last buffer had content' then TransformBlock would not have been called at least once.                  // So' split the last buffer and hash it even if it is empty.                  // Note: TransformBlock will accept an "inputCount" that is zero.                  hashAlgorithm.TransformBlock(_buffer' 0' bytesRead / 2' _buffer' 0);                    // Compute the final hash.                  hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2);                    // Compare targetHash with copyHash.                  if (!System.Linq.Enumerable.SequenceEqual(_copyHash' hashAlgorithm.Hash))                  {                      log.Error(Messages.ISCSI_VERIFY_INVALID);                      throw new Exception(Messages.ISCSI_VERIFY_INVALID);                  }              }
Magic Number,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,Verify,The following statement contains a magic number: using (var hashAlgorithm = System.Security.Cryptography.HashAlgorithm.Create(_hashAlgorithmName))              {                  while (offset < limit)                  {                      if (Cancel)                      {                          log.Info(Messages.ISCSI_VERIFY_CANCELLED);                          throw new OperationCanceledException(Messages.ISCSI_VERIFY_CANCELLED);                      }                        try                      {                          bytesRead = target.Read(_buffer' 0' _buffer.Length);                            if (bytesRead <= 0)                              break;                            if (!IsZeros(_buffer))                          {                              if ((offset + bytesRead) < limit)                              {                                  // This is not the last block.                                  // Compute the partial hash.                                  hashAlgorithm.TransformBlock(_buffer' 0' bytesRead' _buffer' 0);                              }                          }                            offset += bytesRead;                            OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.FileProgress' "SendData Start"' updatemsg' (ulong)offset' (ulong)limit));                      }                      catch (Exception ex)                      {                          var message = string.Format(Messages.ISCSI_VERIFY_ERROR' filename);                          log.WarnFormat("{0} {1}"' message' ex.Message);                          throw new Exception(message' ex);                      }                  }                    // It is necessary to call TransformBlock at least once and TransformFinalBlock only once before getting the hash.                  // If only the last buffer had content' then TransformBlock would not have been called at least once.                  // So' split the last buffer and hash it even if it is empty.                  // Note: TransformBlock will accept an "inputCount" that is zero.                  hashAlgorithm.TransformBlock(_buffer' 0' bytesRead / 2' _buffer' 0);                    // Compute the final hash.                  hashAlgorithm.TransformFinalBlock(_buffer' bytesRead / 2' bytesRead / 2);                    // Compare targetHash with copyHash.                  if (!System.Linq.Enumerable.SequenceEqual(_copyHash' hashAlgorithm.Hash))                  {                      log.Error(Messages.ISCSI_VERIFY_INVALID);                      throw new Exception(Messages.ISCSI_VERIFY_INVALID);                  }              }
Magic Number,XenOvfTransport,iSCSI,C:\repos\xenserver_xenadmin\XenOvfTransport\iSCSI.cs,WimCopy,The following statement contains a magic number: byte[] block = new byte[2 * MB];
Missing Default,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following switch statement is missing a default case: switch (rasd.ResourceType.Value)              {                  case 3: // Processor: Already set in DefineSystem                  case 4: // Memory: Already set in DefineSystem                  case 5: // Internal Disk Controller of one type or another.                  case 6:                  case 7:                  case 8:                  case 9:                      {                          // For Xen really nothing to do here' does not support the different                          // controller types' therefore we must ensure                          // via positional on controllers.                          // IDE - #1                          // SCSI - #2                          // IDE 0 Disk  0 Goes to Xen: userdevice=0                          // IDE 0 Disk  1 Goes to Xen: userdevice=1                           // IDE 1 Disk  0 Goes to Xen: userdevice=2                          // IDE 1 CDDVD 1 Goes to Xen: userdevice=3                          // SCSI 0 Disk 0 Goes to Xen: userdevice=4                          // SCSI 0 Disk 1 Goes to Xen: userdevice=5                          // and so forth.                          break;                      }                  case 10: // Network                      {                          XenRef<Network> net = null;                          XenRef<Network> netDefault = null;                          string netuuid = null;                            #region SELECT NETWORK                          Dictionary<XenRef<Network>' Network> networks = Network.get_all_records(xenSession);                          if (rasd.Connection != null && rasd.Connection.Length > 0)                          {                              if (!string.IsNullOrEmpty(rasd.Connection[0].Value))                              {                                  // Ignore the NetworkSection/Network                                  // During Network Selection the UUID for Network was set in Connection Field                                  // Makes data self contained here.                                    if (rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkKey) ||                                      rasd.Connection[0].Value.Contains(Properties.Settings.Default.xenNetworkUuidKey))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          if (s[i].StartsWith(Properties.Settings.Default.xenNetworkKey) ||                                              s[i].StartsWith(Properties.Settings.Default.xenNetworkUuidKey))                                          {                                              string[] s1 = s[i].Split(new char[] { '=' } );                                              netuuid = s1[1];                                          }                                      }                                  }                                  foreach (XenRef<Network> netRef in networks.Keys)                                  {                                      // if its a UUID and we find it... use it..                                      if (net == null && netuuid != null &&                                           netuuid.Equals(networks[netRef].uuid))                                      {                                          net = netRef;                                      }                                      // Ok second is to match it as a NAME_LABEL                                      else if (net == null && netuuid != null &&                                           networks[netRef].name_label.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // hhmm neither... is it a BRIDGE name?                                      else if (net == null && netuuid != null &&                                           networks[netRef].bridge.ToLower().Contains(netuuid))                                      {                                          net = netRef;                                      }                                      // ok find the default.                                      if (networks[netRef].bridge.ToLower().Contains(Properties.Settings.Default.xenDefaultNetwork))                                      {                                          netDefault = netRef;                                      }                                  }                                  if (net == null)                                  {                                      net = netDefault;                                  }                              }                          }                          #endregion                            #region ATTACH NETWORK TO VM                          Hashtable vifHash = new Hashtable();                          // This is MAC address if available use it.                          // needs to be in form:  00:00:00:00:00:00                          if (Tools.ValidateProperty("Address"' rasd))                          {                              StringBuilder networkAddress = new StringBuilder();                              if (!rasd.Address.Value.Contains(":"))                              {                                  for (int i = 0; i < rasd.Address.Value.Length; i++)                                  {                                      if ((i > 0) && (i % 2) == 0)                                      {                                          networkAddress.Append(":");                                      }                                      networkAddress.Append(rasd.Address.Value[i]);                                  }                              }                              if (networkAddress.Length == 0)                              {                                  networkAddress.Append(rasd.Address.Value);                              }                              vifHash.Add("MAC"' networkAddress.ToString());                          }                          vifHash.Add("uuid"' Guid.NewGuid().ToString());                          vifHash.Add("allowed_operations"' new string[] { "attach" });                          vifHash.Add("device"' Convert.ToString(vifDeviceIndex++));  						vifHash.Add("network"' net.opaque_ref);  						vifHash.Add("VM"' vmRef.opaque_ref);                          vifHash.Add("MTU"' "1500");                          vifHash.Add("locking_mode"' "network_default");                          VIF vif = new VIF(vifHash);                          try                          {                              xenSession.Connection.WaitForCache(VIF.create(xenSession' vif));                          }                          catch (Exception ex)                          {                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VIF_FAILED' ex.Message);                              throw new Exception(Messages.ERROR_CREATE_VIF_FAILED' ex);                          }                          #endregion                          log.Debug("OVF.Import.AddResourceSettingData: Network Added");                            break;                      }                  case 15: // CD Drive                  case 16: // DVD Drive                      {                          // We always attach as "EMPTY".                          // Currenlty Xen Server can only have ONE CD' so we must                           // Skip the others.                          // If it's not necessary.. skip it.                            #region Attach DVD to VM                          bool SkipCD = false;                          List<XenRef<VBD>> vbds = VM.get_VBDs(xenSession' vmRef);                          foreach (XenRef<VBD> vbd in vbds)                          {                              vbd_type vbdType = VBD.get_type(xenSession' vbd);                              if (vbdType == vbd_type.CD)                              {                                  SkipCD = true;                                  break;                              }                          }                            if (!SkipCD)                          {                              List<XenRef<VDI>> vdiRef = new List<XenRef<VDI>>();                              if (filename != null)                              {                                  #region IS THE ISO SR IN THE OVF?                                  string isoUuid = null;                                  if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      if (rasd.Connection[0].Value.ToLower().Contains("sr="))                                      {                                          string[] vpairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                          foreach (string vset in vpairs)                                          {                                              if (vset.ToLower().StartsWith("sr="))                                              {                                                  isoUuid = vset.Substring(vset.LastIndexOf('=') + 1);                                                  try                                                  {                                                      #region TRY IT AS UUID                                                      try                                                      {                                                          XenRef<SR> srref = SR.get_by_uuid(xenSession' isoUuid);                                                          if (srref == null)                                                          {                                                              isoUuid = null;                                                          }                                                          else                                                          {                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' trying name_label");                                                      }                                                      #endregion                                                        #region TRY IT AS NAME_LABEL                                                      try                                                      {                                                          List<XenRef<SR>> srrefList = SR.get_by_name_label(xenSession' isoUuid);                                                          if (srrefList != null && srrefList.Count > 0)                                                          {                                                              isoUuid = SR.get_uuid(xenSession' srrefList[0]);                                                              break;                                                          }                                                      }                                                      catch                                                      {                                                          traceLog.Debug("Import.AddResourceSettingData: iso sr uuid not found' looking for vdi...");                                                      }                                                      #endregion                                                  }                                                  catch (Exception ex)                                                  {                                                      log.WarnFormat("Import.AddResourceSettingData: could not find SR: {0}"' ex.Message);                                                      isoUuid = null;                                                  }                                                  break;                                              }                                          }                                      }                                  }                                  #endregion                                    // VDI trumps SR                                  List<XenRef<VDI>> isoVDIlist = VDI.get_by_name_label(xenSession' filename);                                  if (isoVDIlist.Count > 0)                                  {                                      vdiRef.Add(isoVDIlist[0]);                                  }                                  else                                  {                                      #region LAST CHANCE USE XENTOOLS ISO SR                                      if (isoUuid == null)                                      {                                          Dictionary<XenRef<SR>' SR> srDictionary = SR.get_all_records(xenSession);                                          foreach (XenRef<SR> key in srDictionary.Keys)                                          {                                              if (srDictionary[key].content_type.ToLower() == "iso" && srDictionary[key].type.ToLower() == "iso")                                              {                                                  if (srDictionary[key].name_label.ToLower().Equals(Properties.Settings.Default.xenTools.ToLower()))                                                  {                                                      isoUuid = srDictionary[key].uuid;                                                      break;                                                  }                                              }                                          }                                      }                                      #endregion                                        #region DO IMPORT ISO FILE                                      if (isoUuid != null && !MetaDataOnly)                                      {                                          _currentfilename = filename;                                          try                                          {                                              vdiRef = ImportFileProc(new TaskInfo(xenSession' this' filename' pathToOvf' filename' isoUuid' version' passcode' compression' ""' null));                                          }                                          catch (Exception ex)                                          {  											if (ex is OperationCanceledException)  												throw;                                          	var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.ISO);                                              log.ErrorFormat("{0}' {1}"' msg' ex.Message);                                              throw new Exception(msg' ex);                                          }                                          finally                                          {                                              if (vdiRef == null || vdiRef.Count <= 0)                                              {                                                  log.Error(string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' isoUuid));                                                  RemoveSystem(xenSession' vmRef);                                              }                                          }                                      }                                      #endregion                                  }                              }                              else                              {                                  vdiRef.Add(XenRef<VDI>.Create(string.Empty));                                                                  }                                #region CREATE VBD CONNECTION                              string booleans = "empty'bootable'unpluggable'attachable'storage-lock";                              string skipvalues = "sr'vdi";                                                              foreach (XenRef<VDI> currentVDI in vdiRef)                              {                                  Hashtable vbdHash = new Hashtable();                                    if (rasd.Connection != null && rasd.Connection.Length > 0)                                  {                                      string[] valuepairs = rasd.Connection[0].Value.Split(new char[] { ''' });                                        foreach (string valuepair in valuepairs)                                      {                                          string[] namevalue = valuepair.Split(new char[] { '=' });                                          if (!skipvalues.ToLower().Contains(namevalue[0].ToLower()))                                          {                                              string name = namevalue[0];                                              if (name.ToLower().Equals("device"))                                              {                                                  name = "userdevice";                                              }                                              if (booleans.Contains(name))                                              {                                                  vbdHash.Add(name' Convert.ToBoolean(namevalue[1]));                                              }                                              else                                              {                                                  vbdHash.Add(name' namevalue[1]);                                              }                                          }                                      }                                  }                                  if (!vbdHash.ContainsKey("vm-name-label")) vbdHash.Add("vm-name-label"' VM.get_name_label(xenSession' vmRef));  								if (!vbdHash.ContainsKey("VM")) vbdHash.Add("VM"' vmRef.opaque_ref);  								if (currentVDI != null && !string.IsNullOrEmpty(currentVDI.opaque_ref))                                  {                                      // Override values.  									if (!vbdHash.ContainsKey("VDI")) vbdHash.Add("VDI"' currentVDI.opaque_ref);  									else vbdHash["VDI"] = currentVDI.opaque_ref;                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' false);                                      else vbdHash["empty"] = false;                                      if (!vbdHash.ContainsKey("bootable")) vbdHash.Add("bootable"' true);                                      else vbdHash["bootable"] = true;                                      if (!vbdHash.ContainsKey("unpluggable")) vbdHash.Add("unpluggable"' true);                                      else vbdHash["unpluggable"] = true;                                  }                                  else                                  {                                      // Override.                                      if (!vbdHash.ContainsKey("empty")) vbdHash.Add("empty"' true);                                      else vbdHash["empty"] = true;                                  }                                  if (!vbdHash.ContainsKey("mode")) vbdHash.Add("mode"' "RO");                                  if (!vbdHash.ContainsKey("userdevice")) vbdHash.Add("userdevice"' "3");                                  if (!vbdHash.ContainsKey("type")) vbdHash.Add("type"' "CD");                                  if (!vbdHash.ContainsKey("attachable")) vbdHash.Add("attachable"' true);                                  if (!vbdHash.ContainsKey("storage-lock")) vbdHash.Add("storage-lock"' false);                                  if (!vbdHash.ContainsKey("status-code")) vbdHash.Add("status-code"' "0");                                    vbdHash["userdevice"] = VerifyUserDevice(xenSession' vmRef' (string)vbdHash["userdevice"]);                                    Hashtable hOtherConfig = new Hashtable();                                  hOtherConfig.Add("owner"' "true");                                  vbdHash.Add("other_config"' hOtherConfig);                                    if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                  {                                      VBD vbd = new VBD(vbdHash);                                      try                                      {                                          VBD.create(xenSession' vbd);                                      }                                      catch (Exception ex)                                      {                                          log.ErrorFormat("Import.AddResourceSettingData: {0}"' ex.Message);                                      }                                  }                                  else                                  {                                      log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                      log.WarnFormat("Import:  Could not determine appropriate number of device placement.");                                      log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                      log.WarnFormat("Import:  Then attach disks with labels ending with \"+\" to the device number defined before the +.");                                      log.Warn("Import:  ===========================================================");                                      OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                  }                              }                              #endregion                            }                          #endregion                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.ImportProgress' "CD/DVD Drive"'  							string.Format(Messages.DEVICE_ATTACHED' Messages.CD_DVD_DEVICE)));                          log.Debug("Import.AddResourceSettingData: CD/DVD ROM Added");                            break;                      }                  case 17: // Disk Drive                  case 19: // Storage Extent                  case 21: // Microsoft: Harddisk/Floppy/ISO                      {                          #region ADD DISK                          if (filename == null) // NO disk is available' why import RASD?                          {                              log.WarnFormat("No file available to import' skipping: RASD{0}: {1}"' rasd.ResourceType.Value' rasd.InstanceID.Value);                              break;                          }                          string sruuid = null;                          string vdiuuid = null;                          string userdeviceid = null;                          string namelabel = VM.get_name_label(xenSession' vmRef);                          bool isbootable = false;                          string mode = "RW";                            bool importThisRasd = true;                          if (Tools.ValidateProperty("Caption"' rasd)) // rasd.Caption != null && rasd.Caption.Value != null && rasd.Caption.Value.Length > 0)                          {                              if (                                  rasd.Caption.Value.ToUpper().Contains("COM") ||                                  rasd.Caption.Value.ToUpper().Contains("FLOPPY") ||                                  rasd.Caption.Value.ToUpper().Contains("ISO")                                  )                              {                                  importThisRasd = false;                              }                          }                            if (importThisRasd)                          {                              #region IMPORT DISKS                              if (!MetaDataOnly)                              {                                  _currentfilename = filename;                                    List<XenRef<VDI>> vdiRef = null;                                    #region PARSE CONNECTION                                  if (Tools.ValidateProperty("Connection"' rasd))                                  {                                      string[] s = rasd.Connection[0].Value.Split(new char[] { '='' ''' });                                      for (int i = 0; i < s.Length; i++)                                      {                                          string checkme = s[i].ToLower().Trim();                                          switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }                                      }                                  }                                  #endregion                                    #region VERIFY SR UUID                                  if (!string.IsNullOrEmpty(sruuid))                                  {                                      XenRef<SR> srref = null;                                      try                                      {                                          srref = SR.get_by_uuid(xenSession' sruuid);                                      }                                      catch                                      {                                          traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                      }                                      if (srref == null)                                      {                                          List<XenRef<SR>> srlist = null;                                          try                                          {                                              srlist = SR.get_by_name_label(xenSession' sruuid);                                          }                                          catch                                          {                                              traceLog.Debug("Import.AddResourceSettingData: SR missing... still looking..");                                          }                                          if (srlist != null && srlist.Count > 0)                                          {                                              sruuid = SR.get_uuid(xenSession' srlist[0]);                                          }                                      }                                  }                                  else                                  {                                      sruuid = null;                                  }                                  #endregion                                    #region LAST CHANGE TO FIND SR                                  if (sruuid == null)                                  {                                      if (DefaultSRUUID == null)                                      {                                          log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                          throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                      }                                        Dictionary<XenRef<SR>' SR> srDict = SR.get_all_records(xenSession);                                      if (vdiuuid != null)                                      {                                          //Try and get the SR that belongs to the VDI attached                                          XenRef<VDI> tempVDI = VDI.get_by_uuid(xenSession' vdiuuid);                                          if (tempVDI == null)                                          {                                              log.Error(Messages.ERROR_COULD_NOT_FIND_SR);                                              throw new InvalidDataException(Messages.ERROR_COULD_NOT_FIND_SR);                                          }                                            XenRef<SR> tempSR = VDI.get_SR(xenSession' tempVDI.opaque_ref);                                          sruuid = srDict[tempSR].uuid;                                      }                                      else                                          sruuid = srDict[DefaultSRUUID].uuid;                                  }                                  #endregion                                    try                                  {                                      string disklabel = string.Format("{0}_{1}"'namelabel' userdeviceid);                                        if ((rasd.ElementName != null) && (!string.IsNullOrEmpty(rasd.ElementName.Value)))                                          disklabel = rasd.ElementName.Value;                                        string description = "";                                        if ((rasd.Description != null) && (!string.IsNullOrEmpty(rasd.Description.Value)))                                          description = rasd.Description.Value;                                        vdiRef = ImportFileProc(new TaskInfo(xenSession' this' disklabel' pathToOvf' filename' sruuid' version' passcode' compression' description' vdiuuid));                                  }                                  catch (Exception ex)                                  {  									if (ex is OperationCanceledException)  										throw;  									var msg = string.Format(Messages.ERROR_ADDRESOURCESETTINGDATA_FAILED' Messages.DISK_DEVICE);                                      log.ErrorFormat("{0} {1}"' msg' ex.Message);                                      throw new InvalidDataException(msg' ex);                                  }                                  finally                                  {                                      if (vdiRef == null)                                      {                                      	var msg = string.Format(Messages.ERROR_IMPORT_DISK_FAILED' filename' sruuid);                                          log.Error(msg);                                          RemoveSystem(xenSession' vmRef);                                      }                                  }                                    log.DebugFormat("Import.AddResourceSettingData coung {0} VDIs"' vdiRef.Count);                                      foreach (XenRef<VDI> currentVDI in vdiRef)                                  {                                      Hashtable vbdHash = new Hashtable();                                      if (userdeviceid != null)                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' userdeviceid));                                      }                                      else                                      {                                          vbdHash.Add("userdevice"' VerifyUserDevice(xenSession' vmRef' "99"));                                      }                                      vbdHash.Add("bootable"' isbootable);  									vbdHash.Add("VDI"' currentVDI.opaque_ref);                                      vbdHash.Add("mode"' mode);                                      vbdHash.Add("uuid"' Guid.NewGuid().ToString());                                      vbdHash.Add("vm_name_label"' namelabel);  									vbdHash.Add("VM"' vmRef.opaque_ref);                                      vbdHash.Add("empty"' false);                                      vbdHash.Add("type"' "Disk");                                      vbdHash.Add("currently_attached"' false);                                      vbdHash.Add("attachable"' true);                                      vbdHash.Add("storage_lock"' false);                                      vbdHash.Add("status_code"' "0");                                        #region SET OTHER_CONFIG STUFF HERE !                                      //                                      // below other_config keys XS to delete the disk along with the VM.                                      //                                      Hashtable hOtherConfig = new Hashtable();                                      hOtherConfig.Add("owner"' "true");                                      vbdHash.Add("other_config"' hOtherConfig);                                      #endregion                                          if (!((string)vbdHash["userdevice"]).EndsWith("+"))                                      {                                          VBD vbd = new VBD(vbdHash);                                            try                                          {                                              VBD.create(xenSession' vbd);                                          }                                          catch (Exception ex)                                          {                                              log.ErrorFormat("{0} {1}"' Messages.ERROR_CREATE_VBD_FAILED' ex.Message);                                              throw new Exception(Messages.ERROR_CREATE_VBD_FAILED' ex);                                          }                                      }                                      else                                      {                                          log.WarnFormat("Import:  ================== ATTENTION NEEDED =======================");                                          log.WarnFormat("Import:  Could not determine appropriate number for device placement.");                                          log.WarnFormat("Import:  Please Start' Logon' Shut down' System ({0})"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  Then manually attach disks with labels with {0}_# that are not attached to {0}"' (string)vbdHash["vm_name_label"]);                                          log.WarnFormat("Import:  ===========================================================");                                          OnUpdate(new XenOvfTranportEventArgs(XenOvfTranportEventType.Progress' "Import"' Messages.WARNING_ADMIN_REQUIRED));                                      }                                  }                              }                              else                              {                                  log.InfoFormat("Import: FILE SKIPPED (METADATA ONLY SELECTED)  {0}"' _currentfilename);                              }                              #endregion                              }                          log.Debug("Import.AddResourceSettingData: Hard Disk Image Added");                          break;                          #endregion                      }              }
Missing Default,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,AddResourceSettingData,The following switch statement is missing a default case: switch (checkme)                                          {                                              case "device":                                                  {                                                      userdeviceid = s[++i];                                                      break;                                                  }                                              case "bootable":                                                  {                                                      isbootable = Convert.ToBoolean(s[++i]);                                                      break;                                                  }                                              case "mode":                                                  {                                                      if (s[++i].Equals("r"))                                                      {                                                          mode = "RO";                                                      }                                                      break;                                                  }                                              case "vdi":                                                  {                                                      vdiuuid = s[++i];                                                      break;                                                  }                                              case "sr":                                                  {                                                      sruuid = s[++i];                                                      break;                                                  }                                          }
Missing Default,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,SetDeviceConnections,The following switch statement is missing a default case: switch (rasd.ResourceType.Value)                  {                      case 5:  // IDE Controller #1                      case 6:  // Parallel SCSI HBA #2                      case 7:  // FC HBA #3                      case 8:  // iSCSI HBA #4                      case 9:  // IB HCA #5                          {                              List<RASD_Type> connectedrasds = FindConnectedItems(rasd.InstanceID.Value' vhs.Item' null);                              foreach (RASD_Type _rasd in connectedrasds)                              {                                  //if (_rasd.Connection != null &&                                  //    _rasd.Connection.Length > 0 &&                                  //    _rasd.Connection[0] != null &&                                  //    _rasd.Connection[0].Value != null &&                                  //    _rasd.Connection[0].Value.Length > 0)                                  if (_rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16)                                  {                                      deviceoffset = 2;                                  }                                  else                                  {                                      deviceoffset = 0;                                  }                                  if (Tools.ValidateProperty("Connection"' _rasd))                                  {                                      if (!_rasd.Connection[0].Value.ToLower().Contains("device="))                                      {                                         _rasd.Connection[0].Value = string.Format("{0}'device={1}"' _rasd.Connection[0].Value' FindNextAvailable(deviceoffset' connections' 0));                                      }                                  }                                  else                                  {                                      _rasd.Connection = new cimString[] { new cimString(string.Format("device={0}"' FindNextAvailable(deviceoffset' connections' 0))) };                                  }                              }                              break;                          }                  }
Missing Default,XenOvfTransport,Import,C:\repos\xenserver_xenadmin\XenOvfTransport\Import.cs,FindConnectedItems,The following switch statement is missing a default case: switch (rasd.ResourceType.Value)                          {                              case 15:                              case 16:                                  {                                      connectedRasds.Add(rasd);                                      break;                                  }                              case 22: // Check to see if it's Microsoft Synthetic Disk Drive                                  {                                      if (Tools.ValidateProperty("ResourceSubType"' rasd) &&                                           rasd.ResourceSubType.Value.ToLower().Contains("synthetic")                                          )                                      {                                          connectedRasds.AddRange(FindConnectedItems(rasd.InstanceID.Value' rasds' rasd.Address.Value));                                      }                                      break;                                  }                              case 17: // VMware Hard Disk                              case 19: // XenServer/XenConvert Storage Extent                              case 21: // Microsoft Hard Disk Image                                  {                                      if ((Tools.ValidateProperty("ElementName"' rasd) && rasd.ElementName.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().Contains("hard disk")) ||                                          (Tools.ValidateProperty("Caption"' rasd) && rasd.Caption.Value.ToLower().StartsWith("disk"))                                          )                                      {                                          if (value22 != null)                                          {                                              rasd.Address = new cimString(value22);                                          }                                          if (!connectedRasds.Contains(rasd))                                              connectedRasds.Add(rasd);                                      }                                      break;                                  }                          }
