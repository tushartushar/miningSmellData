Implementation smell,Namespace,Class,File,Method,Description
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The method has 163 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The method has 223 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The method has 163 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The method has 121 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The method has 104 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CollectInformation,The method has 205 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The method has 409 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindSizes,The method has 116 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Merge,The method has 121 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoFileWrapper,The method has 172 lines of code.
Long Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Validate,The method has 109 lines of code.
Complex Method,XenOvf,OvfCompressor,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Compression.cs,ProcessCompression,Cyclomatic complexity of the method is 9
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertOVFtoOVA,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVA,Cyclomatic complexity of the method is 25
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,Cyclomatic complexity of the method is 31
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,Cyclomatic complexity of the method is 9
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,Cyclomatic complexity of the method is 27
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,Cyclomatic complexity of the method is 27
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,Cyclomatic complexity of the method is 14
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CollectInformation,Cyclomatic complexity of the method is 10
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddNetworks,Cyclomatic complexity of the method is 17
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,Cyclomatic complexity of the method is 73
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDisk,Cyclomatic complexity of the method is 9
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddFileReference,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddNetwork,Cyclomatic complexity of the method is 10
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddToStringSection,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,RemoveNetwork,Cyclomatic complexity of the method is 9
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDisk,Cyclomatic complexity of the method is 20
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateFileSizes,Cyclomatic complexity of the method is 10
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdatePostInstallOperationCommand,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateStringSection,Cyclomatic complexity of the method is 9
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindRasdFileName,Cyclomatic complexity of the method is 14
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindStringsMessage,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindSystemName,Cyclomatic complexity of the method is 9
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindDiskRASDByDiskType,Cyclomatic complexity of the method is 10
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindSizes,Cyclomatic complexity of the method is 24
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindSections,Cyclomatic complexity of the method is 14
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindVirtualHardwareSection,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindVirtualHardwareSectionByAffinity,Cyclomatic complexity of the method is 14
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetMemory,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,Cyclomatic complexity of the method is 12
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,Cyclomatic complexity of the method is 17
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Merge,Cyclomatic complexity of the method is 24
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Split,Cyclomatic complexity of the method is 14
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDeviceBootable,Cyclomatic complexity of the method is 20
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsBootDisk,Cyclomatic complexity of the method is 13
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CheckPassword,Cyclomatic complexity of the method is 9
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CalculateStrength,Cyclomatic complexity of the method is 9
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoFileWrapper,Cyclomatic complexity of the method is 23
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CheckSecurityVersion,Cyclomatic complexity of the method is 13
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Validate,Cyclomatic complexity of the method is 18
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateVersion,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateFiles,Cyclomatic complexity of the method is 16
Complex Method,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateNetworks,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,TarPackage,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Package.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,ValidateProperty,Cyclomatic complexity of the method is 13
Complex Method,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,DeserializeContent,Cyclomatic complexity of the method is 11
Complex Method,XenOvf.Utilities,ValueMaps,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\ValueMaps.cs,LoadMap,Cyclomatic complexity of the method is 8
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertXVAtoOVF,The method has 5 parameters. Parameters: vhdExports' ovaxml' ovfFilePath' ovfName' lang
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The method has 5 parameters. Parameters: xenxva' vhdExports' ovfFilePath' ovfname' lang
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_Network,The method has 5 parameters. Parameters: env' vsId' lang' refId' vmstruct
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VDI,The method has 6 parameters. Parameters: env' vsId' lang' refId' di' vmstruct
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddAnnotation,The method has 5 parameters. Parameters: ovfObj' vsId' lang' info' annotation
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddCDROM,The method has 5 parameters. Parameters: ovfObj' vsId' cdId' caption' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddCDROM,The method has 6 parameters. Parameters: ovfObj' vsId' lang' cdId' caption' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddController,The method has 5 parameters. Parameters: ovfObj' vsId' type' deviceId' iteration
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddController,The method has 6 parameters. Parameters: ovfObj' vsId' lang' type' deviceId' iteration
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddControllerToVHS,The method has 5 parameters. Parameters: vhsObj' lang' type' deviceId' iteration
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDeploymentOption,The method has 5 parameters. Parameters: env' lang' label' description' isdefault
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDeviceToController,The method has 5 parameters. Parameters: ovfObj' vsId' deviceInstanceId' controllerInstanceId' AddressOnController
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDeviceToController,The method has 6 parameters. Parameters: ovfObj' vsId' lang' deviceInstanceId' controllerInstanceId' AddressOnController
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDisk,The method has 9 parameters. Parameters: ovfObj' vsId' diskId' vhdFileName' bootable' name' description' filesize' capacity
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDisk,The method has 10 parameters. Parameters: ovfEnv' vsId' diskId' lang' vhdFileName' bootable' name' description' filesize' capacity
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddFileReference,The method has 5 parameters. Parameters: ovfObj' filename' id' capacity' format
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddFileReference,The method has 6 parameters. Parameters: env' lang' filename' id' capacity' format
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddInstallSection,The method has 5 parameters. Parameters: ovfObj' vsId' bootStopDelay' lang' info
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddNetwork,The method has 6 parameters. Parameters: ovfObj' vsId' netId' netName' networkDescription' macAddress
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddNetwork,The method has 7 parameters. Parameters: ovfEnv' vsId' lang' netId' netName' networkDescription' macAddress
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddOperatingSystemSection,The method has 5 parameters. Parameters: ovfObj' vsId' lang' description' osInfo
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddOperatingSystemSection,The method has 5 parameters. Parameters: ovfObj' vsId' description' osInfo' osid
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddOperatingSystemSection,The method has 6 parameters. Parameters: ovfEnv' vsId' lang' description' osInfo' osid
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddOtherSystemSettingData,The method has 6 parameters. Parameters: ovfObj' vsId' name' value' description' permitMultiple
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddOtherSystemSettingData,The method has 7 parameters. Parameters: ovfObj' vsId' lang' name' value' description' permitMultiple
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddProductSection,The method has 8 parameters. Parameters: ovfObj' nameSpace' info' product' vendor' version' producturl' vendorurl
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddProductSection,The method has 9 parameters. Parameters: env' lang' nameSpace' info' product' vendor' version' producturl' vendorurl
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddProductSectionProperty,The method has 8 parameters. Parameters: ovfObj' psId' category' key' type' userConfig' label' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddProductSectionProperty,The method has 9 parameters. Parameters: env' psId' lang' category' key' type' userConfig' label' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddResourceAllocationSection,The method has 5 parameters. Parameters: ovfObj' lang' info' required' rasd
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddStartupSection,The method has 6 parameters. Parameters: env' required' vsId' order' startdelay' stopdelay
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddStartupSection,The method has 7 parameters. Parameters: env' required' lang' vsId' order' startdelay' stopdelay
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddVirtualSystemSettingData,The method has 8 parameters. Parameters: ovfObj' vsId' vhsId' name' caption' description' identifier' systemtype
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddVirtualSystemSettingData,The method has 9 parameters. Parameters: ovfObj' vsId' vhsId' lang' name' caption' description' identifier' systemtype
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateOvfEnvelope,The method has 10 parameters. Parameters: vmName' cpuCount' memory' bootParams' platformSettings' diskCapacity' isWim' additionalSpace' diskPath' imageLength
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,RemovePostOperationCommand,The method has 5 parameters. Parameters: ovfObj' vsId' installId' operationId' commandId
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateAnnotation,The method has 5 parameters. Parameters: ovfObj' vsId' annotationId' info' annotation
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateAnnotation,The method has 6 parameters. Parameters: ovfObj' vsId' annotationId' lang' info' annotation
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateCDROM,The method has 5 parameters. Parameters: ovfObj' vsId' cdId' caption' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateCDROM,The method has 6 parameters. Parameters: ovfObj' vsId' lang' cdId' caption' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateController,The method has 5 parameters. Parameters: ovfObj' vsId' type' deviceId' iteration
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateController,The method has 6 parameters. Parameters: ovfObj' vsId' lang' deviceId' type' iteration
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDeploymentOption,The method has 5 parameters. Parameters: ovfObj' id' label' description' isdefault
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDeploymentOption,The method has 6 parameters. Parameters: env' id' lang' label' description' isdefault
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDisk,The method has 8 parameters. Parameters: ovfObj' vsId' instanceID' description' vhdFileName' filesize' capacity' freespace
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDisk,The method has 9 parameters. Parameters: ovfEnv' vsId' lang' instanceID' description' vhdFileName' filesize' capacity' freespace
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateInstallSection,The method has 5 parameters. Parameters: ovfObj' vsId' insId' bootStopDelay' info
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateInstallSection,The method has 6 parameters. Parameters: ovfObj' vsId' insId' bootStopDelay' lang' info
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateNetwork,The method has 5 parameters. Parameters: ovfObj' vsId' lang' instanceID' macAddress
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateOperatingSystemSection,The method has 5 parameters. Parameters: ovfEnv' vsId' description' osInfo' osid
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateOperatingSystemSection,The method has 6 parameters. Parameters: ovfEnv' vsId' lang' description' osInfo' osid
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateOtherSystemSettingData,The method has 6 parameters. Parameters: ovfObj' vsId' ossdId' name' value' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateOtherSystemSettingData,The method has 7 parameters. Parameters: ovfObj' vsId' ossdId' lang' name' value' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdatePostInstallOperation,The method has 5 parameters. Parameters: ovfObj' vsId' postId' lang' message
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdatePostInstallOperationCommand,The method has 7 parameters. Parameters: ovfObj' vsId' postId' operId' order' operation' value
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdatePostInstallOperationCommand,The method has 8 parameters. Parameters: ovfObj' vsId' lang' postId' operId' order' operation' value
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateProductSection,The method has 9 parameters. Parameters: ovfObj' prodId' nameSpace' info' product' vendor' version' producturl' vendorurl
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateProductSection,The method has 10 parameters. Parameters: ovfObj' prodId' lang' nameSpace' info' product' vendor' version' producturl' vendorurl
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateProductSectionProperty,The method has 9 parameters. Parameters: ovfObj' psId' propId' category' key' type' userConfig' label' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateProductSectionProperty,The method has 10 parameters. Parameters: ovfObj' psId' propId' lang' category' key' type' userConfig' label' description
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateResourceAllocationSection,The method has 5 parameters. Parameters: ovfObj' id' info' required' rasd
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateResourceAllocationSection,The method has 6 parameters. Parameters: ovfObj' id' lang' info' required' rasd
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateResourceAllocationSettingData,The method has 5 parameters. Parameters: ovfObj' vsId' rasdId' fieldname' value
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateResourceAllocationSettingData,The method has 6 parameters. Parameters: ovfObj' vsId' lang' rasdId' fieldname' value
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateStartupSection,The method has 5 parameters. Parameters: ovfObj' vsId' ssId' required' message
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateStartupSection,The method has 6 parameters. Parameters: ovfObj' vsId' ssId' required' lang' message
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateStartupSectionItem,The method has 9 parameters. Parameters: ovfObj' vsId' ssId' order' startdelay' stopdelay' startaction' stopaction' waitforguest
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateStartupSectionItem,The method has 10 parameters. Parameters: ovfObj' vsId' ssId' lang' order' startdelay' stopdelay' startaction' stopaction' waitforguest
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateVirtualSystem,The method has 5 parameters. Parameters: ovfObj' vsId' lang' name' info
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateVirtualSystemSettingData,The method has 5 parameters. Parameters: ovfObj' vsId' lang' fieldname' value
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateVirtualSystemSettingData,The method has 6 parameters. Parameters: ovfObj' vsId' vhsId' lang' fieldname' value
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetConnectionInRASD,The method has 5 parameters. Parameters: ovfObj' vsId' rasdId' prompt' uuid
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,The method has 5 parameters. Parameters: ovfObj' vsId' lang' ovfPath' isofilename
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,DecryptToTempFile,The method has 5 parameters. Parameters: classname' filename' version' password' tempfile
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoElement,The method has 5 parameters. Parameters: element' original' cryptoclassname' version' password
Long Parameter List,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateFiles,The method has 6 parameters. Parameters: ovfpath' files' disks' rasds' validationFlags' validationErrorMessages
Long Parameter List,XenOvf,OvfEventArgs,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\OvfEventArgs.cs,OvfEventArgs,The method has 5 parameters. Parameters: type' target' message' transfered' total
Long Parameter List,XenOvf.Definitions.VMC,Ms_ParameterValue_Type,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Definitions\Microsoft.cs,Ms_ParameterValue_Type,The method has 5 parameters. Parameters: name' prop' type' value' qualifier
Long Parameter List,XenOvf.Definitions.VMC,Ms_QualifierInfo_Type,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Definitions\Microsoft.cs,Ms_QualifierInfo_Type,The method has 5 parameters. Parameters: name' prop' type' toinstance' value
Long Identifier,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,,The length of the parameter Win32_DiskDriveToDiskPartition is 30.
Long Identifier,XenOvf.Definitions,VirtualHardwareSection_Type,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Definitions\ovfEnvelope.cs,,The length of the parameter virtualSystemOtherConfigurationDataField is 40.
Long Identifier,XenOvf.Definitions,CIM_VirtualSystemSettingData_Type,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Definitions\ovfEnvelope.cs,,The length of the parameter automaticStartupActionDelayField is 32.
Long Identifier,XenOvf.Definitions,CIM_VirtualSystemSettingData_Type,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Definitions\ovfEnvelope.cs,,The length of the parameter automaticStartupActionSequenceNumberField is 41.
Long Statement,XenOvf,OvfCompressor,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Compression.cs,ProcessCompression,The length of the statement  "                            log.ErrorFormat("Invalid compression method File: {0} Method: {1}' must be Gzip or BZip2"' file.href' file.compression); " is 120.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertVPCtoOVF,The length of the statement  "            vpcstring = vpcstring.Replace("utf-16"' "utf-8").Replace("UTF-16"' "UTF-8"); // fails if we don't do this. (not nice need to figure real answer) " is 144.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "                AddVirtualSystemSettingData(env' vsId' vhsId' xenxva.vm.label.Trim()' xenxva.vm.label.Trim()' _ovfrm.GetString("CONVERT_XVA_VSSD_CAPTION")' Guid.NewGuid().ToString()' Properties.Settings.Default.xenDefaultVirtualSystemType); " is 224.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "                AddOtherSystemSettingData(env' vsId' lang' "HVM_boot_policy"' Properties.Settings.Default.xenBootOptions' _ovfrm.GetString("XENSERVER_SPECIFIC_DESCRIPTION")); " is 158.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "                AddOtherSystemSettingData(env' vsId' lang' "HVM_boot_params"' Properties.Settings.Default.xenBootParams' _ovfrm.GetString("XENSERVER_SPECIFIC_DESCRIPTION")); " is 157.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "                AddOtherSystemSettingData(env' vsId' lang' "platform"' Properties.Settings.Default.xenPlatformSetting' _ovfrm.GetString("XENSERVER_PLATFORM_DESCRIPTION")); " is 155.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "                AddVirtualSystemSettingData(env' vsId' vhsId' xenxva.vm.label.Trim()' xenxva.vm.label.Trim()' _ovfrm.GetString("CONVERT_XVA_VSSD_CAPTION")' Guid.NewGuid().ToString()' Properties.Settings.Default.xenDefaultPVVirtualSystemType); " is 226.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "                AddOtherSystemSettingData(env' vsId' lang' "PV_bootloader"' Properties.Settings.Default.xenPVBootloader' _ovfrm.GetString("XENSERVER_SPECIFIC_DESCRIPTION")); " is 157.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "                AddOtherSystemSettingData(env' vsId' lang' "PV_kernel"' Properties.Settings.Default.xenKernelOptions' _ovfrm.GetString("XENSERVER_SPECIFIC_DESCRIPTION")); " is 154.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "                AddOtherSystemSettingData(env' vsId' lang' "platform"' Properties.Settings.Default.xenPVPlatformSetting' _ovfrm.GetString("XENSERVER_PLATFORM_DESCRIPTION")); " is 157.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "                AddDisk(env' vsId' di.DriveId' lang' di.VhdFileName' true' _ovfrm.GetString("RASD_19_CAPTION")' _ovfrm.GetString("RASD_19_DESCRIPTION")' Convert.ToUInt64(di.PhysicalSize)' Convert.ToUInt64(di.CapacitySize)); " is 207.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The length of the statement  "                        AddVirtualSystemSettingData(env' systemId' vhsid' ElementName' ElementName' ElementName' InstanceId' VirtualSystemType); " is 120.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "            AddVirtualSystemSettingData(env' vsId' vhsId' vpcName' vpcName' _ovfrm.GetString("CONVERT_VPC_VSSD_CAPTION")' Guid.NewGuid().ToString()' Properties.Settings.Default.xenDefaultVirtualSystemType); " is 194.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "            AddOtherSystemSettingData(env' vsId' lang' "HVM_boot_policy"' Properties.Settings.Default.xenBootOptions' _ovfrm.GetString("XENSERVER_SPECIFIC_DESCRIPTION")); " is 158.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "            AddOtherSystemSettingData(env' vsId' lang' "HVM_boot_params"' Properties.Settings.Default.xenBootParams' _ovfrm.GetString("XENSERVER_SPECIFIC_DESCRIPTION")); " is 157.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "            AddOtherSystemSettingData(env' vsId' lang' "platform"' Properties.Settings.Default.xenPlatformSetting' _ovfrm.GetString("XENSERVER_PLATFORM_DESCRIPTION")); " is 155.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "                    AddNetwork(env' vsId' lang' ec.virtual_network.id.value' ec.virtual_network.name.value' ec.ethernet_card_address.value); " is 120.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "                            AddDisk(env' vsId' lang' diskId' Path.GetFileName(loc.pathname.absolute.value)' true' _ovfrm.GetString("RASD_19_CAPTION")' _ovfrm.GetString("RASD_19_DESCRIPTION")' 0' 0); " is 170.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "                                AddFileReference(env' lang' Path.GetFileName(loc.pathname.absolute.value)' diskId' 0' Properties.Settings.Default.isoFileFormatURI); " is 132.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "                                UpdateResourceAllocationSettingData(env' vsId' diskId' "HostResource"' string.Format(Properties.Settings.Default.hostresource' diskId)); " is 136.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "                                    AddFileReference(env' lang' Path.GetFileName(vmxcfg[filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI); " is 120.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "                                    UpdateResourceAllocationSettingData(env' vsId' diskId' "HostResource"' string.Format(Properties.Settings.Default.hostresource' diskId)); " is 136.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "                                    AddDisk(env' vsId' diskId' lang' Path.GetFileName(vmxcfg[filekey])' true' _ovfrm.GetString("RASD_19_CAPTION")' _ovfrm.GetString("RASD_19_DESCRIPTION")' 0' 0); " is 158.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "                                AddDisk(env' vsId' diskId' lang' Path.GetFileName(vmxcfg[filekey])' true' _ovfrm.GetString("RASD_19_CAPTION")' _ovfrm.GetString("RASD_19_DESCRIPTION")' 0' 0); " is 158.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "                                    AddFileReference(env' lang' Path.GetFileName(vmxcfg[filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI); " is 120.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "                                    UpdateResourceAllocationSettingData(env' vsId' diskId' "HostResource"' string.Format(Properties.Settings.Default.hostresource' diskId)); " is 136.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "                                    AddDisk(env' vsId' diskId' lang' Path.GetFileName(vmxcfg[filekey])' true' _ovfrm.GetString("RASD_19_CAPTION")' _ovfrm.GetString("RASD_19_DESCRIPTION")' 0' 0); " is 158.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "                                AddDisk(env' vsId' diskId' lang' Path.GetFileName(vmxcfg[filekey])' true' _ovfrm.GetString("RASD_19_CAPTION")' _ovfrm.GetString("RASD_19_DESCRIPTION")' 0' 0); " is 158.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "            AddVirtualSystemSettingData(env' vsId' vhsId' vmxName' vmxName' _ovfrm.GetString("CONVERT_VMX_VSSD_CAPTION")' Guid.NewGuid().ToString()' Properties.Settings.Default.xenDefaultVirtualSystemType); " is 194.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "            AddOtherSystemSettingData(env' vsId' lang' "HVM_boot_policy"' Properties.Settings.Default.xenBootOptions' _ovfrm.GetString("XENSERVER_SPECIFIC_DESCRIPTION")); " is 158.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "            AddOtherSystemSettingData(env' vsId' lang' "HVM_boot_params"' Properties.Settings.Default.xenBootParams' _ovfrm.GetString("XENSERVER_SPECIFIC_DESCRIPTION")); " is 157.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "            AddOtherSystemSettingData(env' vsId' lang' "platform"' Properties.Settings.Default.xenPlatformSetting' _ovfrm.GetString("XENSERVER_PLATFORM_DESCRIPTION")); " is 155.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The length of the statement  "                        AddOtherSystemSettingData(env' vsId' lang' n.xenname' (string)n.xenvalue' _ovfrm.GetString("XENSERVER_SPECIFIC_DESCRIPTION")); " is 126.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The length of the statement  "                        AddOtherSystemSettingData(env' vsId' lang' n.xenname' p.ToString().Trim()' _ovfrm.GetString("XENSERVER_PLATFORM_DESCRIPTION")); " is 127.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CollectInformation,The length of the statement  "                log.WarnFormat("OVF.CollectionInformation: call for Win32_DiskDriveToDiskPartition failed' Exception: {0}"' ex.Message); " is 120.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddVssd,The length of the statement  "                    "301"); // 301 == Microsoft (source)' hvm-3.0-unknown == (xen source) Microsoft && Linux NOT PV'd' xen-3.0-unknown == PV'd " is 122.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddNetworks,The length of the statement  "                log.Warn("No networks defined' If a network interface is required' the administrator will need to add it after import of OVF/OVA Package."); " is 140.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "                                        log.WarnFormat("OVF.CreateConnectedDevices: CDROM [{0}] controller connection could not be identified' skipped."' _pnpdeviceid); " is 128.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "                                            string _description = string.Format(_ovfrm.GetString("RASD_CONTROLLER_SCSI_DESCRIPTION")' __scsibus' __scsilogicalunit' __scsiport' __scsitargetid); " is 148.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "                                            AddDisk(ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString("RASD_19_CAPTION")' _description' Convert.ToUInt64(di.PhysicalSize)' Convert.ToUInt64(di.CapacitySize)); " is 191.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "                                    string caption = string.Format(_ovfrm.GetString("RASD_CONTROLLER_SCSI_DESCRIPTION")' __scsibus' __scsilogicalunit' __scsiport' __scsitargetid); " is 143.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "                    AddDisk(ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString("RASD_19_CAPTION")' _mediatype' Convert.ToUInt64(di.PhysicalSize)' Convert.ToUInt64(di.CapacitySize)); " is 189.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "                    AddDisk(ovfEnv' vsId' Guid.NewGuid().ToString()' lang' di.VhdFileName' false' _ovfrm.GetString("RASD_19_CAPTION")' _ovfrm.GetString("RASD_19_DESCRIPTION")' Convert.ToUInt64(di.PhysicalSize)' Convert.ToUInt64(di.CapacitySize)); " is 226.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "                    log.WarnFormat("CreateConnectedDevices: {0} ({1}) NOT FOUND' added as Unknown with 0 Size"' di.DriveId' di.VhdFileName); " is 120.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SaveAs,The length of the statement  "            string oldfile = string.Format(@"{0}_ovf.old"' Path.Combine(Path.GetDirectoryName(filename)' Path.GetFileNameWithoutExtension(filename))); " is 138.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddControllerToVHS,The length of the statement  "            rasd.ElementName = new cimString(string.Format(_ovfrm.GetString("RASD_CONTROLLER_ELEMENTNAME")' controllername' iteration)); " is 124.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDeviceToController,The length of the statement  "            AddDeviceToController(ovfObj' vsId' Properties.Settings.Default.Language' deviceInstanceId' controllerInstanceId' AddressOnController); " is 135.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDisk,The length of the statement  "            AddDisk(ovfObj' vsId' diskId' Properties.Settings.Default.Language' vhdFileName' bootable' name' description' filesize' capacity); " is 130.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddOtherSystemSettingData,The length of the statement  "            return AddOtherSystemSettingData(ovfObj' vsId' Properties.Settings.Default.Language' name' value' description' permitMultiple); " is 127.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddProductSection,The length of the statement  "            return AddProductSection(ovfObj' Properties.Settings.Default.Language' nameSpace' info' product' vendor' version' producturl' vendorurl); " is 137.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddProductSectionProperty,The length of the statement  "            return AddProductSectionProperty(ovfObj' psId' Properties.Settings.Default.Language' category' key' type' userConfig' label' description); " is 138.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddVirtualHardwareSection,The length of the statement  "            vhs.Info = new Msg_Type(AddToStringSection(ovfEnv' lang' Properties.Settings.Default.vhsSettings)' Properties.Settings.Default.vhsSettings); " is 140.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddVirtualSystemSettingData,The length of the statement  "            AddVirtualSystemSettingData(ovfObj' vsId' vhsId' Properties.Settings.Default.Language' name' caption' description' identifier' systemtype); " is 139.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateOvfEnvelope,The length of the statement  "            AddVirtualSystemSettingData(env' systemID' hdwareSectionId' env.Name' Messages.VIRTUAL_MACHINE' Messages.OVF_CREATED' guid' "hvm-3.0-unknown"); " is 143.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateOvfEnvelope,The length of the statement  "            AddOtherSystemSettingData(env' systemID' "HVM_boot_policy"' Properties.Settings.Default.xenBootOptions' GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_2")); " is 161.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateOvfEnvelope,The length of the statement  "            AddOtherSystemSettingData(env' systemID' "HVM_boot_params"' bootParams' GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_6")); " is 129.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateOvfEnvelope,The length of the statement  "            AddOtherSystemSettingData(env' systemID' "platform"' platformSetting' GetContentMessage("OTHER_SYSTEM_SETTING_DESCRIPTION_3")); " is 127.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,RemovePostOperationCommand,The length of the statement  "                    foreach (Xen_PostInstallOperationCommand_Type xencmd in installSection.PostInstallOperations.PostInstallOperationCommand) " is 121.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDisk,The length of the statement  "            UpdateDisk(ovfObj' vsId' Properties.Settings.Default.Language' instanceID' description' vhdFileName' filesize' capacity' freespace); " is 132.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateFilename,The length of the statement  "                log.ErrorFormat("Cannot replace {0} with {1} because OVF does not contain a References Section."' oldfilename' newfilename); " is 124.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdatePostInstallOperationCommand,The length of the statement  "            UpdatePostInstallOperationCommand(ovfObj' vsId' Properties.Settings.Default.Language' postId' operId' order' operation' value); " is 127.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateProductSection,The length of the statement  "            UpdateProductSection(ovfObj' prodId' Properties.Settings.Default.Language' nameSpace' info' product' vendor' version' producturl' vendorurl); " is 141.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateProductSectionProperty,The length of the statement  "            UpdateProductSectionProperty(ovfObj' psId' propId' Properties.Settings.Default.Language' category' key' type' userConfig' label' description); " is 142.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateStartupSectionItem,The length of the statement  "            UpdateStartupSectionItem(ovfObj' vsId' ssId' Properties.Settings.Default.Language' order' startdelay' stopdelay' startaction' stopaction' waitforguest); " is 152.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindSystemName,The length of the statement  "            // VirtualHardwareSection_Type.VirtualSystemIdentifier is next preference because Virtual Box will also set this property to the VM name. " is 137.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindSizes,The length of the statement  "                                        log.DebugFormat("OVF.FindSizes: Id {0} Size {1} Type {2}"' diskDetails.DriveId' diskDetails.CapacitySize' (diskDetails.DiskType == 0) ? "HDD" : "CD/DVD/Other"); " is 160.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindVirtualHardwareSectionByAffinity,The length of the statement  "                    log.InfoFormat("Import.Process: Found closest affinity Virtual Hardware Section (Rating: 0) [{0}]"' _vhs.System.VirtualSystemType.Value); " is 137.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindVirtualHardwareSectionByAffinity,The length of the statement  "                        log.InfoFormat("Import.Process: Found a XEN PV'd Virtual Hardware Section (Rating: 1) [{0}]"' _vhs.System.VirtualSystemType.Value); " is 131.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindVirtualHardwareSectionByAffinity,The length of the statement  "                        log.InfoFormat("Import.Process: Found a XEN Non-PV'd Virtual Hardware Section (Rating: 2) [{0}]"' _vhs.System.VirtualSystemType.Value); " is 135.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindVirtualHardwareSectionByAffinity,The length of the statement  "                    log.InfoFormat("Import.Process: Found a Microsoft Virtual Hardware Section (Rating: 3) [{0}]"' _vhs.System.VirtualSystemType.Value); " is 132.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindVirtualHardwareSectionByAffinity,The length of the statement  "                        log.InfoFormat("Import.Process: Found a VMWare Virtual Hardware Section (Rating: 4) [{0}]"' _vhs.System.VirtualSystemType.Value); " is 129.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,The length of the statement  "                    AddOtherSystemSettingData(ovfObj' vsId' "HVM_boot_policy"' Properties.Settings.Default.xenBootOptions' _ovfrm.GetString("OTHER_SYSTEM_SETTING_DESCRIPTION_2")); " is 159.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,The length of the statement  "                    AddOtherSystemSettingData(ovfObj' vsId' "HVM_boot_params"' "dnc"' _ovfrm.GetString("OTHER_SYSTEM_SETTING_DESCRIPTION_6")); " is 122.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,The length of the statement  "                    AddOtherSystemSettingData(ovfObj' vsId' "platform"' Properties.Settings.Default.xenPlatformSetting' _ovfrm.GetString("OTHER_SYSTEM_SETTING_DESCRIPTION_3")); " is 156.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,The length of the statement  "                // Indicate the need to configure a VM for XenServer during import with just the presence of a post install operation that is specific to XenServer. " is 148.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,The length of the statement  "                // This is an overly complicated flag but simplification would require much more refactoring at the time of this change. " is 120.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,The length of the statement  "                    vhs.Info.Value = string.Format(_ovfrm.GetString("VIRTUAL_HARDWARE_SECTION_INFO")' memCount' cpuCount' dskCount' ethCount); " is 122.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDiskRasd,The length of the statement  "            string[] rejectArray = _ovfrm.GetString("IS_DISK_RASD_FILTER").Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries); " is 128.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsGUID,The length of the statement  "                Regex guidRegEx = new Regex(@"^(\{{0'1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0'1})$"); " is 136.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Manifest,The length of the statement  "        	string manifest = Path.Combine(pathToOvf' string.Format("{0}{1}"' Path.GetFileNameWithoutExtension(ovfFileName)' Properties.Settings.Default.manifestFileExtension)); " is 165.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoFileWrapper,The length of the statement  "                string cryptoclassname = (string)AlgorithmMap((Properties.Settings.Default.encryptAlgorithmURI.Split(new char[] { '#' }))[1].ToLower().Replace('-'' '_')); " is 154.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoStreamWrapper,The length of the statement  "                string cryptoclassname = (string)AlgorithmMap((Properties.Settings.Default.encryptAlgorithmURI.Split(new char[] { '#' }))[1].ToLower().Replace('-'' '_')); " is 154.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoSetup,The length of the statement  "                if (!string.IsNullOrEmpty(version) && (CheckSecurityVersion(version' Properties.Settings.Default.securityVersion) >= 0)) " is 120.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoFile,The length of the statement  "            OnChanged(new OvfEventArgs(OvfEventType.Start' "Crypto: Start: "' fullPathToFileName' (ulong)0' (ulong)inputFile.Length)); " is 122.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoFile,The length of the statement  "            OnChanged(new OvfEventArgs(OvfEventType.End' "Crypto: Completed"' fullPathToFileName' (ulong)0' (ulong)inputFile.Length)); " is 122.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,DeprecatedCryptoFile,The length of the statement  "            OnChanged(new OvfEventArgs(OvfEventType.Start' "Crypto: Start: "' fullPathToFileName' (ulong)0' (ulong)inputFile.Length)); " is 122.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,DeprecatedCryptoFile,The length of the statement  "                OnChanged(new OvfEventArgs(OvfEventType.Progress' "Crypto: Continue"' fullPathToFileName' (ulong)totalRead' (ulong)inputFile.Length)); " is 134.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,DeprecatedCryptoFile,The length of the statement  "            OnChanged(new OvfEventArgs(OvfEventType.End' "Crypto: Completed"' fullPathToFileName' (ulong)totalRead' (ulong)inputFile.Length)); " is 130.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateVHD,The length of the statement  "				if (ext == Properties.Settings.Default.manifestFileExtension || ext == Properties.Settings.Default.certificateFileExtension) " is 124.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateFiles,The length of the statement  "						if (ext == Properties.Settings.Default.manifestFileExtension || ext == Properties.Settings.Default.certificateFileExtension) " is 124.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCpu,The length of the statement  "                            var message = string.Format(Messages.VALIDATION_INVALID_CPU_EXCEEDS_LIMIT' rasd.VirtualQuantity.Value' rasd.Limit.Value); " is 121.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The length of the statement  "                                    var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value); " is 130.
Long Statement,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateVHS,The length of the statement  "                    if (vhs.System != null && vhs.System.VirtualSystemIdentifier != null && vhs.System.VirtualSystemIdentifier.Value != null) " is 121.
Long Statement,XenOvf,TarPackage,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Package.cs,VerifyManifest,The length of the statement  "                        log.ErrorFormat("File {0} contained in the appliance is not listed in the manifest."' _archiveIterator.CurrentFileName()); " is 122.
Long Statement,XenOvf,Package,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Package.cs,VerifySignature,The length of the statement  "                    if (!StreamUtilities.VerifyAgainstDigest(stream' stream.Length' fileDigest.AlgorithmName' fileDigest.Digest' certificate.PublicKey.Key as RSACryptoServiceProvider)) " is 164.
Long Statement,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "                settings.DtdProcessing = DtdProcessing.Parse; //Upgrading to .Net 4.0: ProhibitDtd=false is obsolete' this line is the replacement according to: http://msdn.microsoft.com/en-us/library/system.xml.xmlreadersettings.prohibitdtd%28v=vs.100%29.aspx " is 244.
Long Statement,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "                    settings.Schemas.Add("http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData"' cimVSSDSchemaFilename); " is 126.
Long Statement,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "                    settings.Schemas.Add("http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData"' cimRASDSchemaFilename); " is 131.
Long Statement,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "                    settings.Schemas.Add("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"' wsseSchemaFilename); " is 126.
Long Statement,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "                    settings.Schemas.Add("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"' wsuSchemaFilename); " is 126.
Long Statement,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,ValidateProperty,The length of the statement  "                                // The outertype is likely a standard .Net type like String and not an alias for a type like XenOvf.Definitions.CimString. " is 122.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertHyperVtoOVF,The conditional expression  "hvobj != null &&                  hvobj.declgroups != null &&                  hvobj.declgroups.Count > 0 &&                  hvobj.declgroups[0].values != null &&                  hvobj.declgroups[0].values.Count > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower().Equals("class") &&                                      xmm.xenvalue != null &&                                      xmm.xenvalue is string &&                                      ((string)xmm.xenvalue).Length > 0 &&                                      ((string)xmm.xenvalue).ToLower().Equals("vm")"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower().Equals("class") &&                                           xmm.xenvalue != null &&                                           xmm.xenvalue is string &&                                           ((string)xmm.xenvalue).Length > 0 &&                                           ((string)xmm.xenvalue).ToLower().Equals("vbd")"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower().Equals("class") &&                                           xmm.xenvalue != null &&                                           xmm.xenvalue is string &&                                           ((string)xmm.xenvalue).Length > 0 &&                                           ((string)xmm.xenvalue).ToLower().Equals("vif")"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower().Equals("class") &&                                           xmm.xenvalue != null &&                                           xmm.xenvalue is string &&                                           ((string)xmm.xenvalue).Length > 0 &&                                           ((string)xmm.xenvalue).ToLower().Equals("network")"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower().Equals("class") &&                                           xmm.xenvalue != null &&                                           xmm.xenvalue is string &&                                           ((string)xmm.xenvalue).Length > 0 &&                                           ((string)xmm.xenvalue).ToLower().Equals("vdi")"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower().Equals("class") &&                                           xmm.xenvalue != null &&                                           xmm.xenvalue is string &&                                           ((string)xmm.xenvalue).Length > 0 &&                                           ((string)xmm.xenvalue).ToLower().Equals("sr")"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The conditional expression  "ovfname == null ||                  xenxva == null ||                  xenxva.vm == null ||                  xenxva.vm.config == null ||                  xenxva.vm.hacks == null ||                  xenxva.vm.vbd == null ||                  xenxva.vm.label == null ||                  xenxva.vm.label.Length <= 0 ||                  vhdExports == null ||                  vhdExports.Length <= 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The conditional expression  "n.xenname.ToLower().Equals("pv_bootloader") ||                      n.xenname.ToLower().Equals("pv_kernel") ||                      n.xenname.ToLower().Equals("pv_ramdisk") ||                      n.xenname.ToLower().Equals("pv_args") ||                      n.xenname.ToLower().Equals("pv_bootloader_args") ||                      n.xenname.ToLower().Equals("pv_legacy_args") ||                      n.xenname.ToLower().Equals("hvm_boot_policy") ||                      n.xenname.ToLower().Equals("hvm_shadow_multiplier")"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower().Equals("uuid") &&                      n.xenvalue != null &&                      n.xenvalue is string &&                      ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower().Equals("vdi") &&                           n.xenvalue != null &&                           n.xenvalue is string &&                           ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower().Equals("userdevice") &&                           n.xenvalue != null &&                           n.xenvalue is string &&                           ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower().Equals("bootable") &&                           n.xenvalue != null &&                           n.xenvalue is string &&                           ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower().Equals("mode") &&                           n.xenvalue != null &&                           n.xenvalue is string &&                           ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower().Equals("type") &&                           n.xenvalue != null &&                           n.xenvalue is string &&                           ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,The conditional expression  "n.xenname.ToLower().Equals("uuid") &&                      n.xenvalue != null &&                      n.xenvalue is string &&                      ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,The conditional expression  "n.xenname.ToLower().Equals("network") &&                           n.xenvalue != null &&                           n.xenvalue is string &&                           ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,The conditional expression  "n.xenname.ToLower().Equals("mac") &&                           n.xenvalue != null &&                           n.xenvalue is string &&                           ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_Network,The conditional expression  "n.xenname.ToLower().Equals("name_label") &&                      n.xenvalue != null &&                      n.xenvalue is string &&                      ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddOtherSystemSettingData,The conditional expression  "_vhs.System != null && _vhs.System.VirtualSystemType != null &&                      !(string.IsNullOrEmpty(_vhs.System.VirtualSystemType.Value)) &&                      (_vhs.System.VirtualSystemType.Value.ToLower().StartsWith("xen") ||                       _vhs.System.VirtualSystemType.Value.ToLower().StartsWith("hvm"))"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,RemoveConnectionInRASD,The conditional expression  "rasd.Connection != null && rasd.Connection.Length > 0 &&                  rasd.Connection[0] != null && !string.IsNullOrEmpty(rasd.Connection[0].Value)"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDisk,The conditional expression  "rasdList.Count > 0 && disk != null && ovfEnv.References.File != null && ovfEnv.References.File.Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDisk,The conditional expression  "capacity != 0 && freespace != 0 &&                  freespace < capacity && popsize > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindSizes,The conditional expression  "xmm.xenname.ToLower().Equals("class") &&                                      xmm.xenvalue != null &&                                      xmm.xenvalue is string &&                                      ((string)xmm.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetConnectionInRASD,The conditional expression  "rasd.Connection != null && rasd.Connection.Length > 0 &&                  rasd.Connection[0] != null && !string.IsNullOrEmpty(rasd.Connection[0].Value)"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDiskRasd,The conditional expression  "rasd.ResourceType.Value == 17 ||                  rasd.ResourceType.Value == 19 ||                  rasd.ResourceType.Value == 20 ||                  rasd.ResourceType.Value == 21"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Manifest,The conditional expression  "ovfenv != null && ovfenv.References != null && ovfenv.References.File != null && ovfenv.References.File.Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Validate,The conditional expression  "(!ValidateFiles(ovfpath' files' disks' rasds' validationFlags' ref validationErrorMessages)) ||  								(!ValidateCpu(rasds' validationFlags' ref validationErrorMessages)) ||  								(!ValidateMemory(rasds' validationFlags' ref validationErrorMessages)) ||  								(!ValidateNetworks(networks' rasds' validationFlags' ref validationErrorMessages)) ||  								(!ValidateCapability(rasds' validationFlags' ref validationErrorMessages))"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateFiles,The conditional expression  "rasd.ResourceType.Value == 17 ||                                          rasd.ResourceType.Value == 19 ||                                          rasd.ResourceType.Value == 20 ||                                          rasd.ResourceType.Value == 21"  is complex.
Complex Conditional,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateNetworks,The conditional expression  "(rasd.Connection != null && rasd.Connection.Length > 0 &&                                   net.name == rasd.Connection[0].Value) ||                                  (net.Description.msgid == rasd.InstanceID.Value)"  is complex.
Complex Conditional,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,LoadOvfXml,The conditional expression  "(String.Compare(extension' ".gz"' true) == 0) ||                  (String.Compare(extension' ".bz2"' true) == 0) ||                  (String.Compare(extension' ".ova"' true) == 0) ||                  (String.Compare(extension' ".tar"' true) == 0)"  is complex.
Complex Conditional,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,DeserializeOvfXml,The conditional expression  "xa.Prefix.ToLower().Equals(Properties.Settings.Default.vmwNamespacePrefix) ||                          xa.NamespaceURI.Equals(Properties.Settings.Default.vmwNameSpace) ||                          xa.Prefix.ToLower() == Properties.Settings.Default.VMwareNamespacePrefix ||                          xa.NamespaceURI == Properties.Settings.Default.VMwareNamespace"  is complex.
Complex Conditional,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,ValidateProperty,The conditional expression  "!(strvalue != null &&                                    strvalue.Length > 0 &&                                    strvalue[0] != null &&                                    !string.IsNullOrEmpty(strvalue[0].Value))"  is complex.
Complex Conditional,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,ValidateProperty,The conditional expression  "!(msgtype != null &&                                    msgtype.Length > 0 &&                                    msgtype[0] != null &&                                    !string.IsNullOrEmpty(msgtype[0].Value))"  is complex.
Empty Catch Block,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertOVAtoOVF,The method has an empty catch block.
Empty Catch Block,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddFileToArchiveWriter,The method has an empty catch block.
Magic Number,XenOvf,OvfCompressor,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Compression.cs,StreamCopy,The following statement contains a magic number: int bufsize = 2 * MB;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: switch (wrap.instance.className)                  {                          #region CASE: Msvm_VirtualSystemSettingData                        case "Msvm_VirtualSystemSettingData":                      {                          string ElementName = null;                          string InstanceId = null;                          string SystemName = null;                          string VirtualSystemType = null;                          foreach (Ms_Property_Base_Type prop in wrap.instance.Properties)                          {                              switch (prop.Name)                              {                                  case "ElementName":                                  {                                      ElementName = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                                  case "InstanceID":                                  {                                      InstanceId = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                                  case "SystemName":                                  {                                      SystemName = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                                  case "VirtualSystemType":                                  {                                      VirtualSystemType = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                              }                          }                          AddVirtualSystemSettingData(env' systemId' vhsid' ElementName' ElementName' ElementName' InstanceId' VirtualSystemType);                          UpdateVirtualSystemName(env' systemId' lang' ElementName);                          break;                      }                            #endregion                            #region CASE: ResourceAllocationSettingData                        case "Msvm_ProcessorSettingData":                      case "Msvm_MemorySettingData":                      case "Msvm_SyntheticEthernetPortSettingData":                      case "Msvm_ResourceAllocationSettingData":                      {                          foreach (Ms_Property_Base_Type prop in wrap.instance.Properties)                          {                              if (prop is Ms_ParameterValue_Type)                              {                                  if (((Ms_ParameterValue_Type)prop).Value == null ||                                      ((Ms_ParameterValue_Type)prop).Value.Length <= 0)                                  {                                      continue;                                  }                              }                              else if (prop is Ms_ParameterValueArray_Type)                              {                                  if (((Ms_ParameterValueArray_Type)prop).Values == null ||                                      ((Ms_ParameterValueArray_Type)prop).Values.Length <= 0)                                  {                                      continue;                                  }                              }                                PropertyInfo[] properties = rasd.GetType().GetProperties();                              foreach (PropertyInfo pi in properties)                              {                                  if (pi.Name.ToLower().Equals(prop.Name.ToLower()))                                  {                                      object newvalue = null;                                      if (prop is Ms_ParameterValue_Type)                                      {                                          switch (prop.Type.ToLower())                                          {                                              case "string":                                              {                                                  newvalue = new cimString((string)((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "boolean":                                              {                                                  newvalue = new cimBoolean();                                                  ((cimBoolean)newvalue).Value = Convert.ToBoolean(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "uint16":                                              {                                                  newvalue = new cimUnsignedShort();                                                  ((cimUnsignedShort)newvalue).Value = Convert.ToUInt16(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "uint32":                                              {                                                  newvalue = new cimUnsignedInt();                                                  ((cimUnsignedInt)newvalue).Value = Convert.ToUInt32(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "uint64":                                              {                                                  newvalue = new cimUnsignedLong();                                                  ((cimUnsignedLong)newvalue).Value = Convert.ToUInt64(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                          }                                      }                                      else if (prop is Ms_ParameterValueArray_Type)                                      {                                          switch (prop.Type.ToLower())                                          {                                              case "string":                                              {                                                  List<cimString> sarray = new List<cimString>();                                                  foreach (Ms_ParameterValue_Type svalue in ((Ms_ParameterValueArray_Type)prop).Values)                                                  {                                                      sarray.Add(new cimString(svalue.Value));                                                  }                                                  newvalue = sarray.ToArray();                                                  break;                                              }                                          }                                      }                                        object tmpobject = null;                                      switch (pi.Name.ToLower())                                      {                                          case "caption":                                          {                                              newvalue = new Caption(((cimString)newvalue).Value);                                              break;                                          }                                          case "changeabletype":                                          {                                              tmpobject = newvalue;                                              newvalue = new ChangeableType();                                              ((ChangeableType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;                                              break;                                          }                                          case "consumervisibility":                                          {                                              tmpobject = newvalue;                                              newvalue = new ConsumerVisibility();                                              ((ConsumerVisibility)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;                                              break;                                          }                                          case "mappingbehavior":                                          {                                              tmpobject = newvalue;                                              newvalue = new MappingBehavior();                                              ((MappingBehavior)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;                                              break;                                          }                                          case "resourcetype":                                          {                                              tmpobject = newvalue;                                              newvalue = new ResourceType();                                              ((ResourceType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;                                              break;                                          }                                          case "connection":                                          case "hostresource":                                          default:                                          {                                              break;                                          }                                        }                                      pi.SetValue(rasd' newvalue' null);                                  }                              }                          }                          if (rasd != null)                          {                              if (FillEmptyRequiredFields(rasd))                              {                                  if (rasd.ResourceType.Value == 21 &&                                      rasd.Caption.Value.ToLower().StartsWith(_ovfrm.GetString("RASD_19_CAPTION").ToLower()))                                  {                                      string filename = Path.GetFileName(rasd.Connection[0].Value);                                      AddFileReference(env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);                                      AddRasd(env' systemId' rasd);                                  }                                  else if (rasd.ResourceType.Value == 10)                                  {                                      AddNetwork(env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);                                  }                                  else                                  {                                      AddRasd(env' systemId' rasd);                                  }                              }                          }                          break;                      }                            #endregion                            #region CASE: Msvm_VLANEndpointSettingData                        case "Msvm_VLANEndpointSettingData":                            #endregion                            #region CASE: SKIPPED / DEFAULT                        case "Msvm_VirtualSystemExportSettingData":                      case "Msvm_VirtualSystemGlobalSettingData":                      case "Msvm_HeartbeatComponentSettingData":                      case "Msvm_KvpExchangeComponentSettingData":                      case "Msvm_ShutdownComponentSettingData":                      case "Msvm_TimeSyncComponentSettingData":                      case "Msvm_VssComponentSettingData":                      case "Msvm_SwitchPort":                      case "Msvm_VirtualSwitch":                      default:                      {                          break;                      }                            #endregion                  }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: switch (wrap.instance.className)                  {                          #region CASE: Msvm_VirtualSystemSettingData                        case "Msvm_VirtualSystemSettingData":                      {                          string ElementName = null;                          string InstanceId = null;                          string SystemName = null;                          string VirtualSystemType = null;                          foreach (Ms_Property_Base_Type prop in wrap.instance.Properties)                          {                              switch (prop.Name)                              {                                  case "ElementName":                                  {                                      ElementName = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                                  case "InstanceID":                                  {                                      InstanceId = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                                  case "SystemName":                                  {                                      SystemName = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                                  case "VirtualSystemType":                                  {                                      VirtualSystemType = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                              }                          }                          AddVirtualSystemSettingData(env' systemId' vhsid' ElementName' ElementName' ElementName' InstanceId' VirtualSystemType);                          UpdateVirtualSystemName(env' systemId' lang' ElementName);                          break;                      }                            #endregion                            #region CASE: ResourceAllocationSettingData                        case "Msvm_ProcessorSettingData":                      case "Msvm_MemorySettingData":                      case "Msvm_SyntheticEthernetPortSettingData":                      case "Msvm_ResourceAllocationSettingData":                      {                          foreach (Ms_Property_Base_Type prop in wrap.instance.Properties)                          {                              if (prop is Ms_ParameterValue_Type)                              {                                  if (((Ms_ParameterValue_Type)prop).Value == null ||                                      ((Ms_ParameterValue_Type)prop).Value.Length <= 0)                                  {                                      continue;                                  }                              }                              else if (prop is Ms_ParameterValueArray_Type)                              {                                  if (((Ms_ParameterValueArray_Type)prop).Values == null ||                                      ((Ms_ParameterValueArray_Type)prop).Values.Length <= 0)                                  {                                      continue;                                  }                              }                                PropertyInfo[] properties = rasd.GetType().GetProperties();                              foreach (PropertyInfo pi in properties)                              {                                  if (pi.Name.ToLower().Equals(prop.Name.ToLower()))                                  {                                      object newvalue = null;                                      if (prop is Ms_ParameterValue_Type)                                      {                                          switch (prop.Type.ToLower())                                          {                                              case "string":                                              {                                                  newvalue = new cimString((string)((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "boolean":                                              {                                                  newvalue = new cimBoolean();                                                  ((cimBoolean)newvalue).Value = Convert.ToBoolean(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "uint16":                                              {                                                  newvalue = new cimUnsignedShort();                                                  ((cimUnsignedShort)newvalue).Value = Convert.ToUInt16(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "uint32":                                              {                                                  newvalue = new cimUnsignedInt();                                                  ((cimUnsignedInt)newvalue).Value = Convert.ToUInt32(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "uint64":                                              {                                                  newvalue = new cimUnsignedLong();                                                  ((cimUnsignedLong)newvalue).Value = Convert.ToUInt64(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                          }                                      }                                      else if (prop is Ms_ParameterValueArray_Type)                                      {                                          switch (prop.Type.ToLower())                                          {                                              case "string":                                              {                                                  List<cimString> sarray = new List<cimString>();                                                  foreach (Ms_ParameterValue_Type svalue in ((Ms_ParameterValueArray_Type)prop).Values)                                                  {                                                      sarray.Add(new cimString(svalue.Value));                                                  }                                                  newvalue = sarray.ToArray();                                                  break;                                              }                                          }                                      }                                        object tmpobject = null;                                      switch (pi.Name.ToLower())                                      {                                          case "caption":                                          {                                              newvalue = new Caption(((cimString)newvalue).Value);                                              break;                                          }                                          case "changeabletype":                                          {                                              tmpobject = newvalue;                                              newvalue = new ChangeableType();                                              ((ChangeableType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;                                              break;                                          }                                          case "consumervisibility":                                          {                                              tmpobject = newvalue;                                              newvalue = new ConsumerVisibility();                                              ((ConsumerVisibility)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;                                              break;                                          }                                          case "mappingbehavior":                                          {                                              tmpobject = newvalue;                                              newvalue = new MappingBehavior();                                              ((MappingBehavior)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;                                              break;                                          }                                          case "resourcetype":                                          {                                              tmpobject = newvalue;                                              newvalue = new ResourceType();                                              ((ResourceType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;                                              break;                                          }                                          case "connection":                                          case "hostresource":                                          default:                                          {                                              break;                                          }                                        }                                      pi.SetValue(rasd' newvalue' null);                                  }                              }                          }                          if (rasd != null)                          {                              if (FillEmptyRequiredFields(rasd))                              {                                  if (rasd.ResourceType.Value == 21 &&                                      rasd.Caption.Value.ToLower().StartsWith(_ovfrm.GetString("RASD_19_CAPTION").ToLower()))                                  {                                      string filename = Path.GetFileName(rasd.Connection[0].Value);                                      AddFileReference(env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);                                      AddRasd(env' systemId' rasd);                                  }                                  else if (rasd.ResourceType.Value == 10)                                  {                                      AddNetwork(env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);                                  }                                  else                                  {                                      AddRasd(env' systemId' rasd);                                  }                              }                          }                          break;                      }                            #endregion                            #region CASE: Msvm_VLANEndpointSettingData                        case "Msvm_VLANEndpointSettingData":                            #endregion                            #region CASE: SKIPPED / DEFAULT                        case "Msvm_VirtualSystemExportSettingData":                      case "Msvm_VirtualSystemGlobalSettingData":                      case "Msvm_HeartbeatComponentSettingData":                      case "Msvm_KvpExchangeComponentSettingData":                      case "Msvm_ShutdownComponentSettingData":                      case "Msvm_TimeSyncComponentSettingData":                      case "Msvm_VssComponentSettingData":                      case "Msvm_SwitchPort":                      case "Msvm_VirtualSwitch":                      default:                      {                          break;                      }                            #endregion                  }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: SetMemory(env' vsId' 512' "MB");
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: char i = key[8];
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: int networkIdx = (int)i - 48;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddMemory,The following statement contains a magic number: ulong divisor = 1024*1024;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddMemory,The following statement contains a magic number: ulong divisor = 1024*1024;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddMemory,The following statement contains a magic number: ulong totalphysicalmemory = divisor*512;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: tmp.Length >= 2
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddCDROM,The following statement contains a magic number: rasd.ConsumerVisibility.Value = 3;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddCDROM,The following statement contains a magic number: rasd.ResourceType.Value = 16;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddControllerToVHS,The following statement contains a magic number: rasd.ConsumerVisibility.Value = 3;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddControllerToVHS,The following statement contains a magic number: rasd.Limit.Value = 2;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDisk,The following statement contains a magic number: rasd.ConsumerVisibility.Value = 3;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDisk,The following statement contains a magic number: rasd.ResourceType.Value = 19;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddDisk,The following statement contains a magic number: rasd.Weight.Value = 100;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddNetwork,The following statement contains a magic number: rasd.ConsumerVisibility.Value = 3;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddNetwork,The following statement contains a magic number: rasd.ResourceType.Value = 10;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,AddPostInstallOperation,The following statement contains a magic number: installSection = AddInstallSection(ovfObj' vsId' 600' Properties.Settings.Default.Language' "ConfigureForXenServer");
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,RemoveNetwork,The following statement contains a magic number: RASD_Type[] netrasds = FindRasdByType(ovfObj' vsId' 10);
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDisk,The following statement contains a magic number: _rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,UpdateDisk,The following statement contains a magic number: _rasd.ResourceType.Value == 15 || _rasd.ResourceType.Value == 16
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindDiskRASDByDiskType,The following statement contains a magic number: rasdArray.AddRange(FindRasdByType(ovfObj' vsId' 15));
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindDiskRASDByDiskType,The following statement contains a magic number: rasdArray.AddRange(FindRasdByType(ovfObj' vsId' 16));
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindVirtualHardwareSectionByAffinity,The following statement contains a magic number: int priority = 99;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FindVirtualHardwareSectionByAffinity,The following statement contains a magic number: priority = 5;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetCPUs,The following statement contains a magic number: _rasd.ResourceType.Value == 3
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetCPUs,The following statement contains a magic number: rasd.Limit.Value = 100000;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetCPUs,The following statement contains a magic number: rasd.ResourceType.Value = 3;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetCPUs,The following statement contains a magic number: rasd.Weight.Value = 100;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetMemory,The following statement contains a magic number: _rasd.ResourceType.Value == 4
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetMemory,The following statement contains a magic number: rasd.ConsumerVisibility.Value = 2;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetMemory,The following statement contains a magic number: rasd.Limit.Value = 128;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetMemory,The following statement contains a magic number: rasd.ResourceType.Value = 4;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetTargetDeviceInRASD,The following statement contains a magic number: nbr < 0 || nbr > 15
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,The following statement contains a magic number: cdroms.AddRange(FindRasdByType(ovfObj' vsId' 16));
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,The following statement contains a magic number: cdroms.AddRange(FindRasdByType(ovfObj' vsId' 15));
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,SetRunOnceBootCDROM,The following statement contains a magic number: cdroms.AddRange(FindRasdByType(ovfObj' vsId' 16));
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 3: //CPU                                  {                                      cpuCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 4: //Memory                                  {                                      memCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 10: // Ethernet                                  {                                      ethCount++;                                      break;                                  }                              case 17: // Disks                              case 19:                              case 20:                              case 21:                                  {                                      bool continueWithDisk = false;                                      if (rasd.Caption != null && rasd.Caption.Value != null)                                      {                                          continueWithDisk = IsDiskRasd(rasd);                                      }                                      else if (rasd.AllocationUnits != null &&                                          rasd.AllocationUnits.Value != null &&                                          rasd.AllocationUnits.Value.Contains(_ovfrm.GetString("RASD_19_ALLOCATIONUNITS")))                                      {                                          continueWithDisk = true;                                      }                                      if (continueWithDisk)                                      {                                          dskCount++;                                      }                                      break;                                  }                          }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 3: //CPU                                  {                                      cpuCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 4: //Memory                                  {                                      memCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 10: // Ethernet                                  {                                      ethCount++;                                      break;                                  }                              case 17: // Disks                              case 19:                              case 20:                              case 21:                                  {                                      bool continueWithDisk = false;                                      if (rasd.Caption != null && rasd.Caption.Value != null)                                      {                                          continueWithDisk = IsDiskRasd(rasd);                                      }                                      else if (rasd.AllocationUnits != null &&                                          rasd.AllocationUnits.Value != null &&                                          rasd.AllocationUnits.Value.Contains(_ovfrm.GetString("RASD_19_ALLOCATIONUNITS")))                                      {                                          continueWithDisk = true;                                      }                                      if (continueWithDisk)                                      {                                          dskCount++;                                      }                                      break;                                  }                          }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 3: //CPU                                  {                                      cpuCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 4: //Memory                                  {                                      memCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 10: // Ethernet                                  {                                      ethCount++;                                      break;                                  }                              case 17: // Disks                              case 19:                              case 20:                              case 21:                                  {                                      bool continueWithDisk = false;                                      if (rasd.Caption != null && rasd.Caption.Value != null)                                      {                                          continueWithDisk = IsDiskRasd(rasd);                                      }                                      else if (rasd.AllocationUnits != null &&                                          rasd.AllocationUnits.Value != null &&                                          rasd.AllocationUnits.Value.Contains(_ovfrm.GetString("RASD_19_ALLOCATIONUNITS")))                                      {                                          continueWithDisk = true;                                      }                                      if (continueWithDisk)                                      {                                          dskCount++;                                      }                                      break;                                  }                          }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 3: //CPU                                  {                                      cpuCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 4: //Memory                                  {                                      memCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 10: // Ethernet                                  {                                      ethCount++;                                      break;                                  }                              case 17: // Disks                              case 19:                              case 20:                              case 21:                                  {                                      bool continueWithDisk = false;                                      if (rasd.Caption != null && rasd.Caption.Value != null)                                      {                                          continueWithDisk = IsDiskRasd(rasd);                                      }                                      else if (rasd.AllocationUnits != null &&                                          rasd.AllocationUnits.Value != null &&                                          rasd.AllocationUnits.Value.Contains(_ovfrm.GetString("RASD_19_ALLOCATIONUNITS")))                                      {                                          continueWithDisk = true;                                      }                                      if (continueWithDisk)                                      {                                          dskCount++;                                      }                                      break;                                  }                          }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 3: //CPU                                  {                                      cpuCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 4: //Memory                                  {                                      memCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 10: // Ethernet                                  {                                      ethCount++;                                      break;                                  }                              case 17: // Disks                              case 19:                              case 20:                              case 21:                                  {                                      bool continueWithDisk = false;                                      if (rasd.Caption != null && rasd.Caption.Value != null)                                      {                                          continueWithDisk = IsDiskRasd(rasd);                                      }                                      else if (rasd.AllocationUnits != null &&                                          rasd.AllocationUnits.Value != null &&                                          rasd.AllocationUnits.Value.Contains(_ovfrm.GetString("RASD_19_ALLOCATIONUNITS")))                                      {                                          continueWithDisk = true;                                      }                                      if (continueWithDisk)                                      {                                          dskCount++;                                      }                                      break;                                  }                          }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 3: //CPU                                  {                                      cpuCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 4: //Memory                                  {                                      memCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 10: // Ethernet                                  {                                      ethCount++;                                      break;                                  }                              case 17: // Disks                              case 19:                              case 20:                              case 21:                                  {                                      bool continueWithDisk = false;                                      if (rasd.Caption != null && rasd.Caption.Value != null)                                      {                                          continueWithDisk = IsDiskRasd(rasd);                                      }                                      else if (rasd.AllocationUnits != null &&                                          rasd.AllocationUnits.Value != null &&                                          rasd.AllocationUnits.Value.Contains(_ovfrm.GetString("RASD_19_ALLOCATIONUNITS")))                                      {                                          continueWithDisk = true;                                      }                                      if (continueWithDisk)                                      {                                          dskCount++;                                      }                                      break;                                  }                          }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,The following statement contains a magic number: switch (rasd.ResourceType.Value)                          {                              case 3: //CPU                                  {                                      cpuCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 4: //Memory                                  {                                      memCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 10: // Ethernet                                  {                                      ethCount++;                                      break;                                  }                              case 17: // Disks                              case 19:                              case 20:                              case 21:                                  {                                      bool continueWithDisk = false;                                      if (rasd.Caption != null && rasd.Caption.Value != null)                                      {                                          continueWithDisk = IsDiskRasd(rasd);                                      }                                      else if (rasd.AllocationUnits != null &&                                          rasd.AllocationUnits.Value != null &&                                          rasd.AllocationUnits.Value.Contains(_ovfrm.GetString("RASD_19_ALLOCATIONUNITS")))                                      {                                          continueWithDisk = true;                                      }                                      if (continueWithDisk)                                      {                                          dskCount++;                                      }                                      break;                                  }                          }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Split,The following statement contains a magic number: cdroms.AddRange(FindRasdByType(vhs' 15));
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,Split,The following statement contains a magic number: cdroms.AddRange(FindRasdByType(vhs' 16));
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDiskRasd,The following statement contains a magic number: rasd.ResourceType.Value == 17 ||                  rasd.ResourceType.Value == 19 ||                  rasd.ResourceType.Value == 20 ||                  rasd.ResourceType.Value == 21
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDiskRasd,The following statement contains a magic number: rasd.ResourceType.Value == 17 ||                  rasd.ResourceType.Value == 19 ||                  rasd.ResourceType.Value == 20 ||                  rasd.ResourceType.Value == 21
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDiskRasd,The following statement contains a magic number: rasd.ResourceType.Value == 17 ||                  rasd.ResourceType.Value == 19 ||                  rasd.ResourceType.Value == 20 ||                  rasd.ResourceType.Value == 21
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDiskRasd,The following statement contains a magic number: rasd.ResourceType.Value == 17 ||                  rasd.ResourceType.Value == 19 ||                  rasd.ResourceType.Value == 20 ||                  rasd.ResourceType.Value == 21
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ComputeCapacity,The following statement contains a magic number: multiplier = Math.Pow(Convert.ToDouble(allocunits[1])' Convert.ToDouble(allocunits[2]));
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ComputeCapacity,The following statement contains a magic number: allocunits.Length == 3
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDeviceBootable,The following statement contains a magic number: (rasd.ResourceType.Value == 21 ||                          rasd.ResourceType.Value == 5) &&                          rasd.Address.Value == "0"
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDeviceBootable,The following statement contains a magic number: (rasd.ResourceType.Value == 21 ||                          rasd.ResourceType.Value == 5) &&                          rasd.Address.Value == "0"
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDeviceBootable,The following statement contains a magic number: (rasd.ResourceType.Value == 17 ||                          rasd.ResourceType.Value == 19) &&                          rasd.AddressOnParent.Value == "0"
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDeviceBootable,The following statement contains a magic number: (rasd.ResourceType.Value == 17 ||                          rasd.ResourceType.Value == 19) &&                          rasd.AddressOnParent.Value == "0"
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsDeviceBootable,The following statement contains a magic number: parent.ResourceType.Value != 5
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsThisEncrypted,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 15:                  case 16:                  case 17:                  case 19:                  case 20:                      {                          File_Type file = FindFileReferenceByRASD(ovfObj' rasd);                          if (file != null)                          {                              if (!string.IsNullOrEmpty(file.Id))                              {                                  _isEncrypted = IsThisIdEncrypted(ovfObj' file.Id);                              }                          }                          break;                      }                  default:                      {                          // currently encrypted RASD or Elements' isn't being done' but this can check it.                          if (rasd.AnyAttr != null && rasd.AnyAttr.Length > 0)                          {                              foreach (XmlAttribute xa in rasd.AnyAttr)                              {                                  if (xa.Name.ToLower().Equals("xenc:id"))                                  {                                      _isEncrypted = IsThisIdEncrypted(ovfObj' xa.Value);                                      break;                                  }                              }                          }                          break;                      }              }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsThisEncrypted,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 15:                  case 16:                  case 17:                  case 19:                  case 20:                      {                          File_Type file = FindFileReferenceByRASD(ovfObj' rasd);                          if (file != null)                          {                              if (!string.IsNullOrEmpty(file.Id))                              {                                  _isEncrypted = IsThisIdEncrypted(ovfObj' file.Id);                              }                          }                          break;                      }                  default:                      {                          // currently encrypted RASD or Elements' isn't being done' but this can check it.                          if (rasd.AnyAttr != null && rasd.AnyAttr.Length > 0)                          {                              foreach (XmlAttribute xa in rasd.AnyAttr)                              {                                  if (xa.Name.ToLower().Equals("xenc:id"))                                  {                                      _isEncrypted = IsThisIdEncrypted(ovfObj' xa.Value);                                      break;                                  }                              }                          }                          break;                      }              }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsThisEncrypted,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 15:                  case 16:                  case 17:                  case 19:                  case 20:                      {                          File_Type file = FindFileReferenceByRASD(ovfObj' rasd);                          if (file != null)                          {                              if (!string.IsNullOrEmpty(file.Id))                              {                                  _isEncrypted = IsThisIdEncrypted(ovfObj' file.Id);                              }                          }                          break;                      }                  default:                      {                          // currently encrypted RASD or Elements' isn't being done' but this can check it.                          if (rasd.AnyAttr != null && rasd.AnyAttr.Length > 0)                          {                              foreach (XmlAttribute xa in rasd.AnyAttr)                              {                                  if (xa.Name.ToLower().Equals("xenc:id"))                                  {                                      _isEncrypted = IsThisIdEncrypted(ovfObj' xa.Value);                                      break;                                  }                              }                          }                          break;                      }              }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsThisEncrypted,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 15:                  case 16:                  case 17:                  case 19:                  case 20:                      {                          File_Type file = FindFileReferenceByRASD(ovfObj' rasd);                          if (file != null)                          {                              if (!string.IsNullOrEmpty(file.Id))                              {                                  _isEncrypted = IsThisIdEncrypted(ovfObj' file.Id);                              }                          }                          break;                      }                  default:                      {                          // currently encrypted RASD or Elements' isn't being done' but this can check it.                          if (rasd.AnyAttr != null && rasd.AnyAttr.Length > 0)                          {                              foreach (XmlAttribute xa in rasd.AnyAttr)                              {                                  if (xa.Name.ToLower().Equals("xenc:id"))                                  {                                      _isEncrypted = IsThisIdEncrypted(ovfObj' xa.Value);                                      break;                                  }                              }                          }                          break;                      }              }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,IsThisEncrypted,The following statement contains a magic number: switch (rasd.ResourceType.Value)              {                  case 15:                  case 16:                  case 17:                  case 19:                  case 20:                      {                          File_Type file = FindFileReferenceByRASD(ovfObj' rasd);                          if (file != null)                          {                              if (!string.IsNullOrEmpty(file.Id))                              {                                  _isEncrypted = IsThisIdEncrypted(ovfObj' file.Id);                              }                          }                          break;                      }                  default:                      {                          // currently encrypted RASD or Elements' isn't being done' but this can check it.                          if (rasd.AnyAttr != null && rasd.AnyAttr.Length > 0)                          {                              foreach (XmlAttribute xa in rasd.AnyAttr)                              {                                  if (xa.Name.ToLower().Equals("xenc:id"))                                  {                                      _isEncrypted = IsThisIdEncrypted(ovfObj' xa.Value);                                      break;                                  }                              }                          }                          break;                      }              }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CalculateStrength,The following statement contains a magic number: charSet += 10;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CalculateStrength,The following statement contains a magic number: charSet += 26;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CalculateStrength,The following statement contains a magic number: charSet += 26;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CalculateStrength,The following statement contains a magic number: charSet += 31;
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CalculateStrength,The following statement contains a magic number: double result = Math.Log(Math.Pow(charSet' password.Length)) / Math.Log(2);
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CalculateStrength,The following statement contains a magic number: result <= 32
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoSetup,The following statement contains a magic number: byte[] Key = new byte[24];
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CryptoSetup,The following statement contains a magic number: byte[] IV = new byte[16];
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,DeprecatedCryptoFile,The following statement contains a magic number: byte[] inputarray = new byte[MB * 2];
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CheckSecurityVersion,The following statement contains a magic number: tstversion.Length >= 2
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CheckSecurityVersion,The following statement contains a magic number: tstversion.Length >= 3
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CheckSecurityVersion,The following statement contains a magic number: curversion.Length >= 2
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CheckSecurityVersion,The following statement contains a magic number: curversion.Length >= 3
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateFiles,The following statement contains a magic number: rasd.ResourceType.Value == 17 ||                                          rasd.ResourceType.Value == 19 ||                                          rasd.ResourceType.Value == 20 ||                                          rasd.ResourceType.Value == 21
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateFiles,The following statement contains a magic number: rasd.ResourceType.Value == 17 ||                                          rasd.ResourceType.Value == 19 ||                                          rasd.ResourceType.Value == 20 ||                                          rasd.ResourceType.Value == 21
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateFiles,The following statement contains a magic number: rasd.ResourceType.Value == 17 ||                                          rasd.ResourceType.Value == 19 ||                                          rasd.ResourceType.Value == 20 ||                                          rasd.ResourceType.Value == 21
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateFiles,The following statement contains a magic number: rasd.ResourceType.Value == 17 ||                                          rasd.ResourceType.Value == 19 ||                                          rasd.ResourceType.Value == 20 ||                                          rasd.ResourceType.Value == 21
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCpu,The following statement contains a magic number: rasd.ResourceType.Value == 3
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateMemory,The following statement contains a magic number: rasd.ResourceType.Value == 4
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateNetworks,The following statement contains a magic number: rasd.ResourceType.Value == 10
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ValidateCapability,The following statement contains a magic number: switch (rasd.ResourceType.Value)                      {                          // CIM SCHEMA 2.19.0                          case 3:  // Processor                          case 4:  // Memory                          case 5:  // IDE Controller                          case 6:  // Parallel SCSI HBA                          case 7:  // FC HBA                          case 8:  // iSCSI HBA                          case 9:  // IB HCA                          case 10: // Ehternet Adapter                          case 15: // CD Drive                          case 16: // DVD Drive                          case 17: // Disk Drive                          case 19: // Storage Extent                          case 20: // Other storage Device                          case 21: // Serial Port  // Microsoft uses this for Hard Disk Image also' based on an OLDER schema                              {                                  if (rasd.required)                                  {                                      isValid = true;                                  }                                  break;                              }                          case 1:  // Other                          case 2:  // Computer System                          case 11: // Other Network Adapter                          case 12: // I/O Slot                          case 13: // I/O Device                          case 14: // Floppy Drive                          case 18: // Tape Drive                          case 22: // Parallel Port                          case 23: // USB Controller                          case 24: // Graphics Controller                          case 25: // IEEE 1394 Controller                          case 26: // Partitionable Unit                          case 27: // Base Partitionable Unit                          case 28: // Power                          case 29: // Cooling Capacity                          case 30: // Ethernet Switch Port                          case 31: // Logical Disk                          case 32: // Storage Volume                          case 33: // Ethernet Connection                          default:                              {                                  if (rasd.required)                                  {                                      var message = string.Format(Messages.VALIDATION_REQUIRED_ELEMENT_NOT_RECOGNIZED' rasd.ResourceType.Value' rasd.ElementName.Value);                                      log.Error(message);                                      validationErrorMessages.Add(message);                                      isValid = false;                                  }                                  break;                              }                      }
Magic Number,XenOvf,FileDigest,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: HexString.Length % 2 > 0
Magic Number,XenOvf,FileDigest,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: var array = new byte[HexString.Length / 2];
Magic Number,XenOvf,FileDigest,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: array[i / 2] = byte.Parse(HexString.Substring(i' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,XenOvf,FileDigest,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: array[i / 2] = byte.Parse(HexString.Substring(i' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,XenOvf.Utilities,Tools,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Utilities\Utilities.cs,StreamCopy,The following statement contains a magic number: long bufsize = 2 * MB;
Duplicate Code,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The method contains a code clone-set at the following line numbers (starting from the method definition): ((69' 97)' (124' 152))
Duplicate Code,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,CreateConnectedDevices,The method contains a code clone-set at the following line numbers (starting from the method definition): ((267' 292)' (337' 362))
Missing Default,XenOvf,OvfCompressor,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Compression.cs,UncompressFileStream,The following switch statement is missing a default case: switch (method.ToLower())          	{          		case "gzip":                      return CompressionFactory.Reader(CompressionFactory.Type.Gz' inputstream);          		case "bzip2":                      return CompressionFactory.Reader(CompressionFactory.Type.Bz2' inputstream);          	}
Missing Default,XenOvf,OvfCompressor,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Compression.cs,CompressFileStream,The following switch statement is missing a default case: switch (method.ToLower())          	{          		case "gzip":          			return CompressionFactory.Writer(CompressionFactory.Type.Gz' inputstream);          		case "bzip2":          			return CompressionFactory.Writer(CompressionFactory.Type.Bz2' inputstream);          	}
Missing Default,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following switch statement is missing a default case: switch (prop.Name)                              {                                  case "ElementName":                                  {                                      ElementName = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                                  case "InstanceID":                                  {                                      InstanceId = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                                  case "SystemName":                                  {                                      SystemName = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                                  case "VirtualSystemType":                                  {                                      VirtualSystemType = ((Ms_ParameterValue_Type)prop).Value;                                      break;                                  }                              }
Missing Default,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following switch statement is missing a default case: switch (prop.Type.ToLower())                                          {                                              case "string":                                              {                                                  newvalue = new cimString((string)((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "boolean":                                              {                                                  newvalue = new cimBoolean();                                                  ((cimBoolean)newvalue).Value = Convert.ToBoolean(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "uint16":                                              {                                                  newvalue = new cimUnsignedShort();                                                  ((cimUnsignedShort)newvalue).Value = Convert.ToUInt16(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "uint32":                                              {                                                  newvalue = new cimUnsignedInt();                                                  ((cimUnsignedInt)newvalue).Value = Convert.ToUInt32(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                              case "uint64":                                              {                                                  newvalue = new cimUnsignedLong();                                                  ((cimUnsignedLong)newvalue).Value = Convert.ToUInt64(((Ms_ParameterValue_Type)prop).Value);                                                  break;                                              }                                          }
Missing Default,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following switch statement is missing a default case: switch (prop.Type.ToLower())                                          {                                              case "string":                                              {                                                  List<cimString> sarray = new List<cimString>();                                                  foreach (Ms_ParameterValue_Type svalue in ((Ms_ParameterValueArray_Type)prop).Values)                                                  {                                                      sarray.Add(new cimString(svalue.Value));                                                  }                                                  newvalue = sarray.ToArray();                                                  break;                                              }                                          }
Missing Default,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The following switch statement is missing a default case: switch (loc.drive_type.value)                      {                          case "0":                          {                              continue;                          } // when 0 location appears empty                          case "1": // when 1 VHD                          {                              AddDisk(env' vsId' lang' diskId' Path.GetFileName(loc.pathname.absolute.value)' true' _ovfrm.GetString("RASD_19_CAPTION")' _ovfrm.GetString("RASD_19_DESCRIPTION")' 0' 0);                              break;                          }                          case "2": // when 2 ISO                          {                              AddCDROM(env' vsId' diskId' _ovfrm.GetString("RASD_16_CAPTION")' _ovfrm.GetString("RASD_16_ELEMENTNAME"));                              if (loc.pathname != null &&                                  loc.pathname.absolute != null &&                                  !string.IsNullOrEmpty(loc.pathname.absolute.value))                              {                                  AddFileReference(env' lang' Path.GetFileName(loc.pathname.absolute.value)' diskId' 0' Properties.Settings.Default.isoFileFormatURI);                                  UpdateResourceAllocationSettingData(env' vsId' diskId' "HostResource"' string.Format(Properties.Settings.Default.hostresource' diskId));                              }                              break;                          }                      }
Missing Default,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The following switch statement is missing a default case: switch (((string)n.xenvalue).ToUpper())                      {                          case "CD":                          {                              isDisk = false;                              caption = _ovfrm.GetString("RASD_16_CAPTION");                              description = _ovfrm.GetString("RASD_16_DESCRIPTION");                              break;                          }                          case "DISK":                          {                              caption = _ovfrm.GetString("RASD_19_CAPTION");                              description = _ovfrm.GetString("RASD_19_DESCRIPTION");                              isDisk = true;                              break;                          }                      }
Missing Default,XenOvf,OVF,D:\research\architectureSmells\repos\xenserver_xenadmin\XenOvfApi\Conversions.cs,FinalizeEnvelope,The following switch statement is missing a default case: switch (rasd.ResourceType.Value)                          {                              case 3: //CPU                                  {                                      cpuCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 4: //Memory                                  {                                      memCount += rasd.VirtualQuantity.Value;                                      break;                                  }                              case 10: // Ethernet                                  {                                      ethCount++;                                      break;                                  }                              case 17: // Disks                              case 19:                              case 20:                              case 21:                                  {                                      bool continueWithDisk = false;                                      if (rasd.Caption != null && rasd.Caption.Value != null)                                      {                                          continueWithDisk = IsDiskRasd(rasd);                                      }                                      else if (rasd.AllocationUnits != null &&                                          rasd.AllocationUnits.Value != null &&                                          rasd.AllocationUnits.Value.Contains(_ovfrm.GetString("RASD_19_ALLOCATIONUNITS")))                                      {                                          continueWithDisk = true;                                      }                                      if (continueWithDisk)                                      {                                          dskCount++;                                      }                                      break;                                  }                          }
