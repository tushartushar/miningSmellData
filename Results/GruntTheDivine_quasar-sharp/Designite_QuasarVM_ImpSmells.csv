Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,RecieveData,Cyclomatic complexity of the method is 15
Complex Method,GruntXProductions.Quasar.VM,MainClass,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Main.cs,Main,Cyclomatic complexity of the method is 10
Complex Method,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,cpuTick,Cyclomatic complexity of the method is 9
Complex Method,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,decodeInstruction,Cyclomatic complexity of the method is 62
Complex Method,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,Cyclomatic complexity of the method is 13
Complex Method,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,RecieveData,Cyclomatic complexity of the method is 11
Complex Method,GruntXProductions.Quasar.VM,InterruptController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\InterruptController.cs,RecieveData,Cyclomatic complexity of the method is 9
Complex Method,GruntXProductions.Quasar.VM,DeviceSerialController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceSerialController.cs,interpretCommand,Cyclomatic complexity of the method is 12
Long Parameter List,GruntXProductions.Quasar.VM.Debugger,PacketRequest,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\PacketRequest.cs,PacketRequest,The method has 6 parameters.
Long Parameter List,GruntXProductions.Quasar.VM.Debugger,PacketEvent,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\PacketEvent.cs,PacketEvent,The method has 6 parameters.
Long Parameter List,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,Write,The method has 5 parameters.
Long Parameter List,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,Read,The method has 5 parameters.
Long Parameter List,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,Instruction,The method has 6 parameters.
Long Statement,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The length of the statement  "				sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] { " is 120.
Long Statement,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,Trap,The length of the statement  "	Console.Error.WriteLine ("CPU triggered exception {0} with errorcode {1}!!!"' exception.ToString ("x2")' errorcode.ToString ("x8")); " is 132.
Long Statement,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,decodeInstruction,The length of the statement  "	if (((controlRegister & 0x1) != 0 && privillagedInstruction (ins.OperationCode)) || ((controlRegister & 0x3) == 3 && (memory.GetPagePermissions (GetGeneralPurposeRegister (Register.R15)) & Page.EXECUTE) == 0)) " is 209.
Long Statement,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,Init,The length of the statement  "	videoFirmware = System.Reflection.Assembly.GetExecutingAssembly ().GetManifestResourceStream ("GruntXProductions.Quasar.VM.ROM.video.bin"); " is 139.
Long Statement,GruntXProductions.Quasar.VM,ScreenForm,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\GUI\ScreenForm.cs,OnPaint,The length of the statement  "		e.Graphics.DrawImage (this.buffer' new Rectangle (0' 0' this.Width' this.Height)' new Rectangle (Point.Empty' buffer.Size)' GraphicsUnit.Pixel); " is 144.
Complex Conditional,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,decodeInstruction,The conditional expression  "((controlRegister & 0x1) != 0 && privillagedInstruction (ins.OperationCode)) || ((controlRegister & 0x3) == 3 && (memory.GetPagePermissions (GetGeneralPurposeRegister (Register.R15)) & Page.EXECUTE) == 0)"  is complex.
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugServer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugServer.cs,DebugServer,The following statement contains a magic number: this.tcpListener = new TcpListener (IPAddress.Loopback' 6969);  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: new Thread (() =>  {  	while (true) {  		PacketRequest req = new PacketRequest ();  		req.Recieve (this.stream);  		switch (req.Request) {  		case DebugRequest.BREAK:  			this.host.Halt ();  			sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    			}));  			break;  		case DebugRequest.REGISTERS:  			sendRegisters ();  			break;  		case DebugRequest.STEP:  			this.host.Step ();  			uint pc = host.GetGeneralPurposeRegister (Register.R15);  			sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  				host.Memory [pc]'  				host.Memory [pc + 1]'  				host.Memory [pc + 2]'  				host.Memory [pc + 3]'  				host.Memory [pc + 4]'  				host.Memory [pc + 5]'  				host.Memory [pc + 6]'  				host.Memory [pc + 7]'  				host.Memory [pc + 8]'  				host.Memory [pc + 9]'  				host.Memory [pc + 10]'  				host.Memory [pc + 11]  			}));  			break;  		}  	}  }).Start ();  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: while (true) {  	PacketRequest req = new PacketRequest ();  	req.Recieve (this.stream);  	switch (req.Request) {  	case DebugRequest.BREAK:  		this.host.Halt ();  		sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    		}));  		break;  	case DebugRequest.REGISTERS:  		sendRegisters ();  		break;  	case DebugRequest.STEP:  		this.host.Step ();  		uint pc = host.GetGeneralPurposeRegister (Register.R15);  		sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  			host.Memory [pc]'  			host.Memory [pc + 1]'  			host.Memory [pc + 2]'  			host.Memory [pc + 3]'  			host.Memory [pc + 4]'  			host.Memory [pc + 5]'  			host.Memory [pc + 6]'  			host.Memory [pc + 7]'  			host.Memory [pc + 8]'  			host.Memory [pc + 9]'  			host.Memory [pc + 10]'  			host.Memory [pc + 11]  		}));  		break;  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]'  	host.Memory [pc + 4]'  	host.Memory [pc + 5]'  	host.Memory [pc + 6]'  	host.Memory [pc + 7]'  	host.Memory [pc + 8]'  	host.Memory [pc + 9]'  	host.Memory [pc + 10]'  	host.Memory [pc + 11]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Update,The following statement contains a magic number: if (breakPoints.Contains (pc)) {  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' pc' 0' 0' 4' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]  	}));  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Update,The following statement contains a magic number: if (breakPoints.Contains (pc)) {  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' pc' 0' 0' 4' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]  	}));  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Update,The following statement contains a magic number: if (breakPoints.Contains (pc)) {  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' pc' 0' 0' 4' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]  	}));  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Update,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.BREAK' pc' 0' 0' 4' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Update,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.BREAK' pc' 0' 0' 4' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Update,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.BREAK' pc' 0' 0' 4' new byte[] {  	host.Memory [pc]'  	host.Memory [pc + 1]'  	host.Memory [pc + 2]'  	host.Memory [pc + 3]  }));  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,sendRegisters,The following statement contains a magic number: using (BinaryWriter bw = new BinaryWriter (ms)) {  	for (int i = 0; i < 15; i++) {  		bw.Write (String.Format ("r{0}"' i));  		bw.Write (host.GetGeneralPurposeRegister ((Register)i));  	}  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,sendRegisters,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	bw.Write (String.Format ("r{0}"' i));  	bw.Write (host.GetGeneralPurposeRegister ((Register)i));  }  
Magic Number,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,sendRegisters,The following statement contains a magic number: sendPacket (new PacketEvent (DebugEvent.RCV_DATA' 2' 0' 0' (uint)bytes.Length' bytes));  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,Init,The following statement contains a magic number: lastMillisecond = (ulong)(DateTime.UtcNow - new DateTime (1970' 1' 1)).TotalMilliseconds;  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,Update,The following statement contains a magic number: if ((controlRegister & TIMER_ENABLED) != 0) {  	ulong elapsed = (ulong)(DateTime.UtcNow - new DateTime (1970' 1' 1)).TotalMilliseconds - lastMillisecond;  	if (elapsed >= interval) {  		lastMillisecond = (ulong)(DateTime.UtcNow - new DateTime (1970' 1' 1)).TotalMilliseconds;  		emu.InterruptController.InterruptRequest (0x0F);  	}  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,Update,The following statement contains a magic number: if ((controlRegister & TIMER_ENABLED) != 0) {  	ulong elapsed = (ulong)(DateTime.UtcNow - new DateTime (1970' 1' 1)).TotalMilliseconds - lastMillisecond;  	if (elapsed >= interval) {  		lastMillisecond = (ulong)(DateTime.UtcNow - new DateTime (1970' 1' 1)).TotalMilliseconds;  		emu.InterruptController.InterruptRequest (0x0F);  	}  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,Update,The following statement contains a magic number: if (elapsed >= interval) {  	lastMillisecond = (ulong)(DateTime.UtcNow - new DateTime (1970' 1' 1)).TotalMilliseconds;  	emu.InterruptController.InterruptRequest (0x0F);  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,Update,The following statement contains a magic number: lastMillisecond = (ulong)(DateTime.UtcNow - new DateTime (1970' 1' 1)).TotalMilliseconds;  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,RecieveData,The following statement contains a magic number: switch (port) {  case 0x110:  	controlRegister = (byte)data;  	break;  case 0x111:  	this.interval |= data;  	break;  case 0x112:  	this.interval |= data << 8;  	break;  case 0x113:  	this.interval |= data << 16;  	break;  case 0x114:  	this.interval |= data << 24;  	break;  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,RecieveData,The following statement contains a magic number: switch (port) {  case 0x110:  	controlRegister = (byte)data;  	break;  case 0x111:  	this.interval |= data;  	break;  case 0x112:  	this.interval |= data << 8;  	break;  case 0x113:  	this.interval |= data << 16;  	break;  case 0x114:  	this.interval |= data << 24;  	break;  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,RecieveData,The following statement contains a magic number: switch (port) {  case 0x110:  	controlRegister = (byte)data;  	break;  case 0x111:  	this.interval |= data;  	break;  case 0x112:  	this.interval |= data << 8;  	break;  case 0x113:  	this.interval |= data << 16;  	break;  case 0x114:  	this.interval |= data << 24;  	break;  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,RecieveData,The following statement contains a magic number: this.interval |= data << 8;  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,RecieveData,The following statement contains a magic number: this.interval |= data << 16;  
Magic Number,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,RecieveData,The following statement contains a magic number: this.interval |= data << 24;  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,WriteInt32,The following statement contains a magic number: Write (address' 4' 0' BitConverter.GetBytes (i)' physical);  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,WriteInt8,The following statement contains a magic number: if (!this.pagingEnabled || physical)  	this [address] = b;  else {  	uint vaddr_pa = address & 0xFFFFF000;  	if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  		uint vaddr = address / 0x1000;  		uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  		lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  	}  	uint page = lookasideBuffer [vaddr_pa];  	if ((page & Page.PRESENT) == 0)  		throw new PageFaultException (address);  	uint phys = (lookasideBuffer [vaddr_pa] & 0xFFFF000) | (address & 0xFFF);  	this [phys] = b;  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,WriteInt8,The following statement contains a magic number: if (!this.pagingEnabled || physical)  	this [address] = b;  else {  	uint vaddr_pa = address & 0xFFFFF000;  	if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  		uint vaddr = address / 0x1000;  		uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  		lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  	}  	uint page = lookasideBuffer [vaddr_pa];  	if ((page & Page.PRESENT) == 0)  		throw new PageFaultException (address);  	uint phys = (lookasideBuffer [vaddr_pa] & 0xFFFF000) | (address & 0xFFF);  	this [phys] = b;  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,WriteInt8,The following statement contains a magic number: if (!this.pagingEnabled || physical)  	this [address] = b;  else {  	uint vaddr_pa = address & 0xFFFFF000;  	if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  		uint vaddr = address / 0x1000;  		uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  		lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  	}  	uint page = lookasideBuffer [vaddr_pa];  	if ((page & Page.PRESENT) == 0)  		throw new PageFaultException (address);  	uint phys = (lookasideBuffer [vaddr_pa] & 0xFFFF000) | (address & 0xFFF);  	this [phys] = b;  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,WriteInt8,The following statement contains a magic number: if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  	uint vaddr = address / 0x1000;  	uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  	lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,WriteInt8,The following statement contains a magic number: if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  	uint vaddr = address / 0x1000;  	uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  	lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,WriteInt8,The following statement contains a magic number: if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  	uint vaddr = address / 0x1000;  	uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  	lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,WriteInt8,The following statement contains a magic number: lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,WriteInt8,The following statement contains a magic number: lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,ReadInt32,The following statement contains a magic number: Read (address' 4' 0' data' physical);  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,ReadInt8,The following statement contains a magic number: if (!this.pagingEnabled || physical)  	return this [address];  else {  	uint vaddr_pa = address & 0xFFFFF000;  	if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  		uint vaddr = address / 0x1000;  		uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  		lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  	}  	uint page = lookasideBuffer [vaddr_pa];  	if ((page & Page.PRESENT) == 0) {  		throw new PageFaultException (address);  	}  	uint phys = (lookasideBuffer [vaddr_pa] & 0xFFFF000) | (address & 0xFFF);  	uint attr = lookasideBuffer [vaddr_pa] & 0xFFF;  	return this [phys];  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,ReadInt8,The following statement contains a magic number: if (!this.pagingEnabled || physical)  	return this [address];  else {  	uint vaddr_pa = address & 0xFFFFF000;  	if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  		uint vaddr = address / 0x1000;  		uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  		lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  	}  	uint page = lookasideBuffer [vaddr_pa];  	if ((page & Page.PRESENT) == 0) {  		throw new PageFaultException (address);  	}  	uint phys = (lookasideBuffer [vaddr_pa] & 0xFFFF000) | (address & 0xFFF);  	uint attr = lookasideBuffer [vaddr_pa] & 0xFFF;  	return this [phys];  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,ReadInt8,The following statement contains a magic number: if (!this.pagingEnabled || physical)  	return this [address];  else {  	uint vaddr_pa = address & 0xFFFFF000;  	if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  		uint vaddr = address / 0x1000;  		uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  		lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  	}  	uint page = lookasideBuffer [vaddr_pa];  	if ((page & Page.PRESENT) == 0) {  		throw new PageFaultException (address);  	}  	uint phys = (lookasideBuffer [vaddr_pa] & 0xFFFF000) | (address & 0xFFF);  	uint attr = lookasideBuffer [vaddr_pa] & 0xFFF;  	return this [phys];  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,ReadInt8,The following statement contains a magic number: if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  	uint vaddr = address / 0x1000;  	uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  	lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,ReadInt8,The following statement contains a magic number: if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  	uint vaddr = address / 0x1000;  	uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  	lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,ReadInt8,The following statement contains a magic number: if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  	uint vaddr = address / 0x1000;  	uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  	lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,ReadInt8,The following statement contains a magic number: lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,ReadInt8,The following statement contains a magic number: lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,GetPagePermissions,The following statement contains a magic number: if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  	uint vaddr = address / 0x1000;  	uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  	lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,GetPagePermissions,The following statement contains a magic number: if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  	uint vaddr = address / 0x1000;  	uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  	lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,GetPagePermissions,The following statement contains a magic number: if (!lookasideBuffer.ContainsKey (vaddr_pa)) {  	uint vaddr = address / 0x1000;  	uint table = this.ReadInt32 (pageDirectory + (vaddr / 1024)' true);  	lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  }  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,GetPagePermissions,The following statement contains a magic number: lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  
Magic Number,GruntXProductions.Quasar.VM,QuasarRam,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\QuasarRam.cs,GetPagePermissions,The following statement contains a magic number: lookasideBuffer.Add (vaddr_pa' this.ReadInt32 (table + 4 * (vaddr % 1024)' true));  
Magic Number,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,Emulate,The following statement contains a magic number: clock = new System.Timers.Timer (100);  
Magic Number,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,cpuTick,The following statement contains a magic number: try {  	for (int i = 0; i < this.instructionsPerSecond / 100; i++) {  		updateDevices ();  		if (!halted) {  			uint pc = GetGeneralPurposeRegister (Register.R15);  			Instruction ins = Instruction.Fetch (this.memory' pc);  			Console.WriteLine (ins.OperationCode);  			pc += (uint)ins.Size;  			SetGeneralPurposeRegister (Register.R15' pc);  			decodeInstruction (ins);  		}  	}  }  catch (DivideByZeroException) {  	Trap (0x01);  }  catch (InvalidOpcodeException) {  	Trap (0x02);  }  catch (SegmentationFaultException ex) {  	Trap (0x03' ex.FaultingAddress);  }  catch (PageFaultException ex) {  	Trap (0x04' ex.FaultingAddress);  }  catch (GeneralProtectionException ex) {  	Trap (0x05' (uint)ex.Opcode);  }  catch (Exception ex) {  	fatalException (ex.Message);  }  
Magic Number,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,cpuTick,The following statement contains a magic number: for (int i = 0; i < this.instructionsPerSecond / 100; i++) {  	updateDevices ();  	if (!halted) {  		uint pc = GetGeneralPurposeRegister (Register.R15);  		Instruction ins = Instruction.Fetch (this.memory' pc);  		Console.WriteLine (ins.OperationCode);  		pc += (uint)ins.Size;  		SetGeneralPurposeRegister (Register.R15' pc);  		decodeInstruction (ins);  	}  }  
Magic Number,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,fatalException,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	Console.WriteLine ("r{0}:\t0x{1:X8}"' i' GetGeneralPurposeRegister ((Register)i));  }  
Magic Number,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,Interrupt,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	stack.PushInt32 (GetGeneralPurposeRegister ((Register)i));  
Magic Number,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,Interrupt,The following statement contains a magic number: SetGeneralPurposeRegister (Register.R15' memory.ReadInt32 (ivtRegister + (uint)(intnum * 4)));  
Magic Number,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,Interrupt,The following statement contains a magic number: Console.WriteLine ("i {0:x8}"' memory.ReadInt32 (ivtRegister + (uint)(intnum * 4)));  
Magic Number,GruntXProductions.Quasar.VM,Emulator,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Emulator.cs,decodeInstruction,The following statement contains a magic number: if (((controlRegister & 0x1) != 0 && privillagedInstruction (ins.OperationCode)) || ((controlRegister & 0x3) == 3 && (memory.GetPagePermissions (GetGeneralPurposeRegister (Register.R15)) & Page.EXECUTE) == 0))  	throw new GeneralProtectionException (ins.OperationCode);  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,Fetch,The following statement contains a magic number: if (hasOperands) {  	byte descr = memory [address++];  	am1 = (AddressingMode)(descr & 0x0F);  	am2 = (AddressingMode)((descr & 0xF0) >> 4);  	object op1 = ReadOperand (memory' ref address' am1);  	object op2 = ReadOperand (memory' ref address' am2);  	int size = (int)(address - org_add);  	return new Instruction (op' size' am1' op1' am2' op2);  }  else  	return new Instruction (op);  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,Fetch,The following statement contains a magic number: am2 = (AddressingMode)((descr & 0xF0) >> 4);  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following statement contains a magic number: switch (am) {  case AddressingMode.DIRECT_REGISTER:  	address++;  	return (Register)memory [address - 1];  case AddressingMode.CONDITION_CODE:  	address++;  	return (byte)memory [address - 1];  case AddressingMode.INDIRECT_REG8:  case AddressingMode.INDIRECT_REG16:  case AddressingMode.INDIRECT_REG32:  	Register reg = (Register)memory [address];  	byte[] bytes = new byte[2];  	memory.Read (address + 1' 2' 0' bytes);  	address += 3;  	return new IndirectOffset (reg' BitConverter.ToInt16 (bytes' 0));  case AddressingMode.IMMEDIATE_32:  	address += 4;  	return memory.ReadInt32 (address - 4);  }  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following statement contains a magic number: switch (am) {  case AddressingMode.DIRECT_REGISTER:  	address++;  	return (Register)memory [address - 1];  case AddressingMode.CONDITION_CODE:  	address++;  	return (byte)memory [address - 1];  case AddressingMode.INDIRECT_REG8:  case AddressingMode.INDIRECT_REG16:  case AddressingMode.INDIRECT_REG32:  	Register reg = (Register)memory [address];  	byte[] bytes = new byte[2];  	memory.Read (address + 1' 2' 0' bytes);  	address += 3;  	return new IndirectOffset (reg' BitConverter.ToInt16 (bytes' 0));  case AddressingMode.IMMEDIATE_32:  	address += 4;  	return memory.ReadInt32 (address - 4);  }  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following statement contains a magic number: switch (am) {  case AddressingMode.DIRECT_REGISTER:  	address++;  	return (Register)memory [address - 1];  case AddressingMode.CONDITION_CODE:  	address++;  	return (byte)memory [address - 1];  case AddressingMode.INDIRECT_REG8:  case AddressingMode.INDIRECT_REG16:  case AddressingMode.INDIRECT_REG32:  	Register reg = (Register)memory [address];  	byte[] bytes = new byte[2];  	memory.Read (address + 1' 2' 0' bytes);  	address += 3;  	return new IndirectOffset (reg' BitConverter.ToInt16 (bytes' 0));  case AddressingMode.IMMEDIATE_32:  	address += 4;  	return memory.ReadInt32 (address - 4);  }  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following statement contains a magic number: switch (am) {  case AddressingMode.DIRECT_REGISTER:  	address++;  	return (Register)memory [address - 1];  case AddressingMode.CONDITION_CODE:  	address++;  	return (byte)memory [address - 1];  case AddressingMode.INDIRECT_REG8:  case AddressingMode.INDIRECT_REG16:  case AddressingMode.INDIRECT_REG32:  	Register reg = (Register)memory [address];  	byte[] bytes = new byte[2];  	memory.Read (address + 1' 2' 0' bytes);  	address += 3;  	return new IndirectOffset (reg' BitConverter.ToInt16 (bytes' 0));  case AddressingMode.IMMEDIATE_32:  	address += 4;  	return memory.ReadInt32 (address - 4);  }  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following statement contains a magic number: switch (am) {  case AddressingMode.DIRECT_REGISTER:  	address++;  	return (Register)memory [address - 1];  case AddressingMode.CONDITION_CODE:  	address++;  	return (byte)memory [address - 1];  case AddressingMode.INDIRECT_REG8:  case AddressingMode.INDIRECT_REG16:  case AddressingMode.INDIRECT_REG32:  	Register reg = (Register)memory [address];  	byte[] bytes = new byte[2];  	memory.Read (address + 1' 2' 0' bytes);  	address += 3;  	return new IndirectOffset (reg' BitConverter.ToInt16 (bytes' 0));  case AddressingMode.IMMEDIATE_32:  	address += 4;  	return memory.ReadInt32 (address - 4);  }  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following statement contains a magic number: memory.Read (address + 1' 2' 0' bytes);  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following statement contains a magic number: address += 3;  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following statement contains a magic number: address += 4;  
Magic Number,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following statement contains a magic number: return memory.ReadInt32 (address - 4);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (mode == VideoMode.TEXTMODE_80x25) {  	if (address % 2 == 0)  		drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  	else  		drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (mode == VideoMode.TEXTMODE_80x25) {  	if (address % 2 == 0)  		drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  	else  		drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (mode == VideoMode.TEXTMODE_80x25) {  	if (address % 2 == 0)  		drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  	else  		drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (mode == VideoMode.TEXTMODE_80x25) {  	if (address % 2 == 0)  		drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  	else  		drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (mode == VideoMode.TEXTMODE_80x25) {  	if (address % 2 == 0)  		drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  	else  		drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (address % 2 == 0)  	drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  else  	drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (address % 2 == 0)  	drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  else  	drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (address % 2 == 0)  	drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  else  	drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (address % 2 == 0)  	drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  else  	drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: if (address % 2 == 0)  	drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  else  	drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: drawCharacter ((char)data' videoMemory [pos + 1]' pos2 % 80' pos2 / 80);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,writeCallback,The following statement contains a magic number: drawCharacter ((char)videoMemory [pos - 1]' data' pos2 % 80' pos2 / 80);  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,drawCharacter,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	int pixels = fontMap [start + y];  	for (int r = 0; r < 8; r++) {  		if (((1 << r) & pixels) != 0)  			display.SetPixel (xP + r' yP + y' (int)colors [fg]);  		else  			display.SetPixel (xP + r' yP + y' (int)colors [bg]);  	}  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,drawCharacter,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	int pixels = fontMap [start + y];  	for (int r = 0; r < 8; r++) {  		if (((1 << r) & pixels) != 0)  			display.SetPixel (xP + r' yP + y' (int)colors [fg]);  		else  			display.SetPixel (xP + r' yP + y' (int)colors [bg]);  	}  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,drawCharacter,The following statement contains a magic number: for (int r = 0; r < 8; r++) {  	if (((1 << r) & pixels) != 0)  		display.SetPixel (xP + r' yP + y' (int)colors [fg]);  	else  		display.SetPixel (xP + r' yP + y' (int)colors [bg]);  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,drawCursor,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	int pixels = fontMap [start + y];  	for (int r = 0; r < 8; r++) {  		if (((1 << r) & pixels) != 0)  			display.SetPixel (xP + r' yP + y' (int)colors [bg]);  		else  			display.SetPixel (xP + r' yP + y' (int)colors [fg]);  	}  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,drawCursor,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	int pixels = fontMap [start + y];  	for (int r = 0; r < 8; r++) {  		if (((1 << r) & pixels) != 0)  			display.SetPixel (xP + r' yP + y' (int)colors [bg]);  		else  			display.SetPixel (xP + r' yP + y' (int)colors [fg]);  	}  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,drawCursor,The following statement contains a magic number: for (int r = 0; r < 8; r++) {  	if (((1 << r) & pixels) != 0)  		display.SetPixel (xP + r' yP + y' (int)colors [bg]);  	else  		display.SetPixel (xP + r' yP + y' (int)colors [fg]);  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,clearCursor,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	int pixels = fontMap [start + y];  	for (int r = 0; r < 8; r++) {  		if (((1 << r) & pixels) != 0)  			display.SetPixel (xP + r' yP + y' (int)colors [fg]);  		else  			display.SetPixel (xP + r' yP + y' (int)colors [bg]);  	}  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,clearCursor,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	int pixels = fontMap [start + y];  	for (int r = 0; r < 8; r++) {  		if (((1 << r) & pixels) != 0)  			display.SetPixel (xP + r' yP + y' (int)colors [fg]);  		else  			display.SetPixel (xP + r' yP + y' (int)colors [bg]);  	}  }  
Magic Number,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,clearCursor,The following statement contains a magic number: for (int r = 0; r < 8; r++) {  	if (((1 << r) & pixels) != 0)  		display.SetPixel (xP + r' yP + y' (int)colors [fg]);  	else  		display.SetPixel (xP + r' yP + y' (int)colors [bg]);  }  
Magic Number,GruntXProductions.Quasar.VM,ScreenForm,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\GUI\ScreenForm.cs,ScreenForm,The following statement contains a magic number: this.SetResolution (new Resolution (720' 400));  
Magic Number,GruntXProductions.Quasar.VM,ScreenForm,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\GUI\ScreenForm.cs,ScreenForm,The following statement contains a magic number: this.SetResolution (new Resolution (720' 400));  
Magic Number,GruntXProductions.Quasar.VM,ScreenForm,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\GUI\ScreenForm.cs,ScreenForm,The following statement contains a magic number: this.refreshTimer.Interval = 100;  
Magic Number,GruntXProductions.Quasar.VM,ScreenForm,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\GUI\ScreenForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (442' 349);  
Magic Number,GruntXProductions.Quasar.VM,ScreenForm,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\GUI\ScreenForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (442' 349);  
Magic Number,GruntXProductions.Quasar.VM,InterruptController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\InterruptController.cs,Update,The following statement contains a magic number: if (!interruptInProgress && irqQueue.Count != 0) {  	byte intr = irqQueue.Dequeue ();  	if (((1 >> 8) & irqMaskRegister) == 0) {  		this.interruptInProgress = true;  		Console.WriteLine ("IRQ! {0}"' intr);  		this.host.Interrupt (intr);  	}  }  else if (irqQueue.Count != 0)  	Console.WriteLine ("IRQ blocked");  
Magic Number,GruntXProductions.Quasar.VM,InterruptController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\InterruptController.cs,Update,The following statement contains a magic number: if (((1 >> 8) & irqMaskRegister) == 0) {  	this.interruptInProgress = true;  	Console.WriteLine ("IRQ! {0}"' intr);  	this.host.Interrupt (intr);  }  
Magic Number,GruntXProductions.Quasar.VM,Stack,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Memory\Stack.cs,PushInt32,The following statement contains a magic number: host.SetGeneralPurposeRegister (Register.R14' sp - 4);  
Magic Number,GruntXProductions.Quasar.VM,DeviceSerialController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceSerialController.cs,interpretCommand,The following statement contains a magic number: switch (command) {  case 0:  	selectedPort = dataRegister;  	break;  case 1:  	if (streams [selectedPort] != null) {  		Stream str = streams [selectedPort] as Stream;  		str.WriteByte (dataRegister);  		this.statusRegister = STATUS_SUCCESS;  	}  	else  		this.statusRegister = STATUS_ERR;  	break;  case 2:  	if (streams [selectedPort] != null) {  		Stream str = streams [selectedPort] as Stream;  		int data = str.ReadByte ();  		if (data == -1)  			this.statusRegister = STATUS_EMPTY;  		else {  			this.statusRegister = STATUS_SUCCESS;  			this.dataRegister = (byte)data;  		}  	}  	else  		this.statusRegister = STATUS_ERR;  	break;  }  
Missing Default,GruntXProductions.Quasar.VM.Debugger,DebugConnection,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Debugger\DebugConnection.cs,Listen,The following switch statement is missing a default case: switch (req.Request) {  case DebugRequest.BREAK:  	this.host.Halt ();  	sendPacket (new PacketEvent (DebugEvent.BREAK' this.host.GetGeneralPurposeRegister (Register.R15)' 0' 0' 0' new byte[] {    	}));  	break;  case DebugRequest.REGISTERS:  	sendRegisters ();  	break;  case DebugRequest.STEP:  	this.host.Step ();  	uint pc = host.GetGeneralPurposeRegister (Register.R15);  	sendPacket (new PacketEvent (DebugEvent.STEP_NEXT' pc' 0' 0' 12' new byte[] {  		host.Memory [pc]'  		host.Memory [pc + 1]'  		host.Memory [pc + 2]'  		host.Memory [pc + 3]'  		host.Memory [pc + 4]'  		host.Memory [pc + 5]'  		host.Memory [pc + 6]'  		host.Memory [pc + 7]'  		host.Memory [pc + 8]'  		host.Memory [pc + 9]'  		host.Memory [pc + 10]'  		host.Memory [pc + 11]  	}));  	break;  }  
Missing Default,GruntXProductions.Quasar.VM,DeviceIntervalTimer,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceIntervalTimer.cs,RecieveData,The following switch statement is missing a default case: switch (port) {  case 0x110:  	controlRegister = (byte)data;  	break;  case 0x111:  	this.interval |= data;  	break;  case 0x112:  	this.interval |= data << 8;  	break;  case 0x113:  	this.interval |= data << 16;  	break;  case 0x114:  	this.interval |= data << 24;  	break;  }  
Missing Default,GruntXProductions.Quasar.VM,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Emulator\Instruction.cs,ReadOperand,The following switch statement is missing a default case: switch (am) {  case AddressingMode.DIRECT_REGISTER:  	address++;  	return (Register)memory [address - 1];  case AddressingMode.CONDITION_CODE:  	address++;  	return (byte)memory [address - 1];  case AddressingMode.INDIRECT_REG8:  case AddressingMode.INDIRECT_REG16:  case AddressingMode.INDIRECT_REG32:  	Register reg = (Register)memory [address];  	byte[] bytes = new byte[2];  	memory.Read (address + 1' 2' 0' bytes);  	address += 3;  	return new IndirectOffset (reg' BitConverter.ToInt16 (bytes' 0));  case AddressingMode.IMMEDIATE_32:  	address += 4;  	return memory.ReadInt32 (address - 4);  }  
Missing Default,GruntXProductions.Quasar.VM,DeviceTextScreen,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceTextScreen.cs,RecieveData,The following switch statement is missing a default case: switch (port) {  case 0x100:  	this.mode = (VideoMode)data;  	break;  case 0x101:  	this.clearCursor (this.cursorPosition);  	this.cursorPosition = (int)data;  	break;  case 0x102:  	this.enableCursor = data != 0;  	this.clearCursor (this.cursorPosition);  	break;  }  
Missing Default,GruntXProductions.Quasar.VM,InterruptController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\InterruptController.cs,RecieveData,The following switch statement is missing a default case: switch (port) {  case 0x00:  	this.statusRegister = (byte)data;  	break;  case 0x01:  	this.irqMaskRegister = (byte)data;  	break;  case 0x02:  	this.interruptInProgress = (data != 0);  	break;  }  
Missing Default,GruntXProductions.Quasar.VM,InterruptController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\InterruptController.cs,RequestData,The following switch statement is missing a default case: switch (port) {  case 0x00:  	return this.statusRegister;  case 0x01:  	return this.irqMaskRegister;  case 0x02:  	return this.interruptInServiceRegister;  }  
Missing Default,GruntXProductions.Quasar.VM,DeviceSerialController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceSerialController.cs,RecieveData,The following switch statement is missing a default case: switch (port) {  case 0x05:  	this.dataRegister = (byte)data;  	break;  case 0x06:  	interpretCommand ((byte)data);  	break;  }  
Missing Default,GruntXProductions.Quasar.VM,DeviceSerialController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceSerialController.cs,RequestData,The following switch statement is missing a default case: switch (port) {  case 0x05:  	return this.dataRegister;  case 0x07:  	return this.statusRegister;  }  
Missing Default,GruntXProductions.Quasar.VM,DeviceSerialController,C:\repos\GruntTheDivine_quasar-sharp\src\QuasarVM\Hardware\Devices\DeviceSerialController.cs,interpretCommand,The following switch statement is missing a default case: switch (command) {  case 0:  	selectedPort = dataRegister;  	break;  case 1:  	if (streams [selectedPort] != null) {  		Stream str = streams [selectedPort] as Stream;  		str.WriteByte (dataRegister);  		this.statusRegister = STATUS_SUCCESS;  	}  	else  		this.statusRegister = STATUS_ERR;  	break;  case 2:  	if (streams [selectedPort] != null) {  		Stream str = streams [selectedPort] as Stream;  		int data = str.ReadByte ();  		if (data == -1)  			this.statusRegister = STATUS_EMPTY;  		else {  			this.statusRegister = STATUS_SUCCESS;  			this.dataRegister = (byte)data;  		}  	}  	else  		this.statusRegister = STATUS_ERR;  	break;  }  
