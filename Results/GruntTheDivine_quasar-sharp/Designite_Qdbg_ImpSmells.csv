Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,ToString,Cyclomatic complexity of the method is 12
Long Parameter List,GruntXProductions.Quasar.Debugger,PacketEvent,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\PacketEvent.cs,PacketEvent,The method has 6 parameters.
Long Parameter List,GruntXProductions.Quasar.Debugger,PacketRequest,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\PacketRequest.cs,PacketRequest,The method has 6 parameters.
Long Parameter List,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,Instruction,The method has 5 parameters.
Long Parameter List,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,Instruction,The method has 7 parameters.
Long Statement,GruntXProductions.Phosphorus,Operand,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Operand.cs,GetBytes,The length of the statement  "	if (OperandAddressingMode == AddressingMode.INDIRECT_REG32 || (OperandAddressingMode == AddressingMode.INDIRECT_REG16 || (OperandAddressingMode == AddressingMode.INDIRECT_REG8))) { " is 180.
Magic Number,GruntXProductions.Quasar.Debugger,DebugClient,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\DebugClient.cs,DebugClient,The following statement contains a magic number: client.Connect (addr' 6969);  
Magic Number,GruntXProductions.Quasar.Debugger.Commands,RegisterCommand,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Commands\RegisterCommand.cs,Execute,The following statement contains a magic number: if (!client.IsRunning) {  	client.SendPacket (new PacketRequest (DebugRequest.REGISTERS' 0' 0' 0' 0' new byte[] {    	}));  	PacketEvent e = client.WaitForEvent ();  	using (BinaryReader br = new BinaryReader (new MemoryStream (e.Data))) {  		while (br.BaseStream.Position < br.BaseStream.Length)  			Console.WriteLine ("{0}  =   0x{1:X8}"' br.ReadString ().PadRight (4)' br.ReadUInt32 ());  	}  }  
Magic Number,GruntXProductions.Quasar.Debugger.Commands,RegisterCommand,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Commands\RegisterCommand.cs,Execute,The following statement contains a magic number: using (BinaryReader br = new BinaryReader (new MemoryStream (e.Data))) {  	while (br.BaseStream.Position < br.BaseStream.Length)  		Console.WriteLine ("{0}  =   0x{1:X8}"' br.ReadString ().PadRight (4)' br.ReadUInt32 ());  }  
Magic Number,GruntXProductions.Quasar.Debugger.Commands,RegisterCommand,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Commands\RegisterCommand.cs,Execute,The following statement contains a magic number: while (br.BaseStream.Position < br.BaseStream.Length)  	Console.WriteLine ("{0}  =   0x{1:X8}"' br.ReadString ().PadRight (4)' br.ReadUInt32 ());  
Magic Number,GruntXProductions.Quasar.Debugger.Commands,RegisterCommand,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Commands\RegisterCommand.cs,Execute,The following statement contains a magic number: Console.WriteLine ("{0}  =   0x{1:X8}"' br.ReadString ().PadRight (4)' br.ReadUInt32 ());  
Magic Number,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,MachineCode,The following statement contains a magic number: try {  	if (this.size == 1 || this.operand1.OperandAddressingMode == AddressingMode.NONE)  		return ((byte)this.opcode).ToString ("x2");  	else {  		StringBuilder sb = new StringBuilder ();  		byte am1 = (byte)this.operand1.OperandAddressingMode;  		byte am2 = (byte)this.operand2.OperandAddressingMode;  		byte descr = (byte)(am1 | (am2 << 4));  		sb.Append (((byte)this.opcode).ToString ("x2") + " ");  		sb.Append (descr.ToString ("x2") + " ");  		foreach (byte b in operand1.GetBytes ())  			sb.Append (b.ToString ("x2") + " ");  		foreach (byte b in operand2.GetBytes ())  			sb.Append (b.ToString ("x2") + " ");  		return sb.ToString ();  	}  }  catch (Exception ex) {  	return "???";  }  
Magic Number,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,MachineCode,The following statement contains a magic number: if (this.size == 1 || this.operand1.OperandAddressingMode == AddressingMode.NONE)  	return ((byte)this.opcode).ToString ("x2");  else {  	StringBuilder sb = new StringBuilder ();  	byte am1 = (byte)this.operand1.OperandAddressingMode;  	byte am2 = (byte)this.operand2.OperandAddressingMode;  	byte descr = (byte)(am1 | (am2 << 4));  	sb.Append (((byte)this.opcode).ToString ("x2") + " ");  	sb.Append (descr.ToString ("x2") + " ");  	foreach (byte b in operand1.GetBytes ())  		sb.Append (b.ToString ("x2") + " ");  	foreach (byte b in operand2.GetBytes ())  		sb.Append (b.ToString ("x2") + " ");  	return sb.ToString ();  }  
Magic Number,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,Fetch,The following statement contains a magic number: using (MemoryStream str = new MemoryStream (code)) {  	BinaryReader br = new BinaryReader (str);  	byte original = br.ReadByte ();  	Opcode op = (Opcode)(original & 0x7f);  	AddressingMode am1 = AddressingMode.NONE;  	AddressingMode am2 = AddressingMode.NONE;  	bool hasOperands = ((int)original & 128) == 0;  	if (hasOperands) {  		byte descr = br.ReadByte ();  		am1 = (AddressingMode)(descr & 0x0F);  		am2 = (AddressingMode)((descr & 0xF0) >> 4);  		object op1 = ReadOperand (br' am1);  		object op2 = ReadOperand (br' am2);  		int size = (int)(str.Position - org_add);  		return new Instruction (op' size' org_add' am1' op1' am2' op2);  	}  	else  		return new Instruction (op' 1' org_add' AddressingMode.NONE' null);  }  
Magic Number,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,Fetch,The following statement contains a magic number: using (MemoryStream str = new MemoryStream (code)) {  	BinaryReader br = new BinaryReader (str);  	byte original = br.ReadByte ();  	Opcode op = (Opcode)(original & 0x7f);  	AddressingMode am1 = AddressingMode.NONE;  	AddressingMode am2 = AddressingMode.NONE;  	bool hasOperands = ((int)original & 128) == 0;  	if (hasOperands) {  		byte descr = br.ReadByte ();  		am1 = (AddressingMode)(descr & 0x0F);  		am2 = (AddressingMode)((descr & 0xF0) >> 4);  		object op1 = ReadOperand (br' am1);  		object op2 = ReadOperand (br' am2);  		int size = (int)(str.Position - org_add);  		return new Instruction (op' size' org_add' am1' op1' am2' op2);  	}  	else  		return new Instruction (op' 1' org_add' AddressingMode.NONE' null);  }  
Magic Number,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,Fetch,The following statement contains a magic number: if (hasOperands) {  	byte descr = br.ReadByte ();  	am1 = (AddressingMode)(descr & 0x0F);  	am2 = (AddressingMode)((descr & 0xF0) >> 4);  	object op1 = ReadOperand (br' am1);  	object op2 = ReadOperand (br' am2);  	int size = (int)(str.Position - org_add);  	return new Instruction (op' size' org_add' am1' op1' am2' op2);  }  else  	return new Instruction (op' 1' org_add' AddressingMode.NONE' null);  
Magic Number,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,Fetch,The following statement contains a magic number: am2 = (AddressingMode)((descr & 0xF0) >> 4);  
Magic Number,GruntXProductions.Phosphorus,Operand,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Operand.cs,GetBytes,The following statement contains a magic number: if (OperandAddressingMode == AddressingMode.INDIRECT_REG32 || (OperandAddressingMode == AddressingMode.INDIRECT_REG16 || (OperandAddressingMode == AddressingMode.INDIRECT_REG8))) {  	IndirectOffset off = Value as IndirectOffset;  	return new byte[] {  		(byte)off.Register'  		(byte)(off.Offset & 0xFF)'  		(byte)((off.Offset & 0xFF00) >> 8)  	};  }  else if (OperandAddressingMode == AddressingMode.IMMEDIATE_32)  	return BitConverter.GetBytes ((uint)Value);  else if (OperandAddressingMode == AddressingMode.DIRECT_REGISTER)  	return BitConverter.GetBytes ((byte)(Register)Value);  else if (OperandAddressingMode == AddressingMode.CONDITION_CODE)  	return new byte[] {  		(byte)Value  	};  else  	return new byte[] {    	};  
Magic Number,GruntXProductions.Phosphorus,Operand,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Operand.cs,GetBytes,The following statement contains a magic number: return new byte[] {  	(byte)off.Register'  	(byte)(off.Offset & 0xFF)'  	(byte)((off.Offset & 0xFF00) >> 8)  };  
Missing Default,GruntXProductions.Quasar.Debugger,DebugClient,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\DebugClient.cs,handleEvent,The following switch statement is missing a default case: switch (e.Event) {  case DebugEvent.BREAK:  	this.running = false;  	break;  case DebugEvent.STEP_NEXT:  	this.running = false;  	break;  }  
Missing Default,GruntXProductions.Phosphorus,Instruction,C:\repos\GruntTheDivine_quasar-sharp\src\Qdbg\Disassembler\Instruction.cs,ReadOperand,The following switch statement is missing a default case: switch (am) {  case AddressingMode.DIRECT_REGISTER:  	return (Register)br.ReadByte ();  case AddressingMode.CONDITION_CODE:  	return (byte)br.ReadByte ();  case AddressingMode.INDIRECT_REG32:  case AddressingMode.INDIRECT_REG16:  case AddressingMode.INDIRECT_REG8:  	return new IndirectOffset ((Register)br.ReadByte ()' br.ReadInt16 ());  case AddressingMode.IMMEDIATE_32:  	return br.ReadUInt32 ();  }  
