Implementation smell,Namespace,Class,File,Method,Description
Long Method,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The method has 184 lines of code.
Long Method,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The method has 101 lines of code.
Complex Method,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,Cyclomatic complexity of the method is 42
Complex Method,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,ThriftSharp.Benchmarking.Models.Thrift,PersonAvailability,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\PersonAvailability.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,ThriftSharp.Benchmarking.Models.Thrift,TimePeriod,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\TimePeriod.cs,Read,Cyclomatic complexity of the method is 12
Long Parameter List,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,AllTypesContainer,The method has 12 parameters. Parameters: value1' value2' value3' value4' value5' value6' value7' value8' value9' value10' value11' value12
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                Value1 = iprot.ReadBool();                isset_value1 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Byte) {                Value2 = iprot.ReadByte();                isset_value2 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Value3 = iprot.ReadDouble();                isset_value3 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I16) {                Value4 = iprot.ReadI16();                isset_value4 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Value5 = iprot.ReadI32();                isset_value5 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                Value6 = iprot.ReadI64();                isset_value6 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                Value7 = iprot.ReadBinary();                isset_value7 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Value8 = iprot.ReadString();                isset_value8 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Struct) {                Value9 = new EmptyStruct();                Value9.Read(iprot);                isset_value9 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Map) {                {                  Value10 = new Dictionary<int' int>();                  TMap _map25 = iprot.ReadMapBegin();                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)                  {                    int _key27;                    int _val28;                    _key27 = iprot.ReadI32();                    _val28 = iprot.ReadI32();                    Value10[_key27] = _val28;                  }                  iprot.ReadMapEnd();                }                isset_value10 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Set) {                {                  Value11 = new THashSet<int>();                  TSet _set29 = iprot.ReadSetBegin();                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)                  {                    int _elem31;                    _elem31 = iprot.ReadI32();                    Value11.Add(_elem31);                  }                  iprot.ReadSetEnd();                }                isset_value11 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Value12 = new List<int>();                  TList _list32 = iprot.ReadListBegin();                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)                  {                    int _elem34;                    _elem34 = iprot.ReadI32();                    Value12.Add(_elem34);                  }                  iprot.ReadListEnd();                }                isset_value12 = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,AllTypesContainer,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\AllTypesContainer.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                FirstName = iprot.ReadString();                isset_firstName = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  MiddleNames = new List<string>();                  TList _list13 = iprot.ReadListBegin();                  for( int _i14 = 0; _i14 < _list13.Count; ++_i14)                  {                    string _elem15;                    _elem15 = iprot.ReadString();                    MiddleNames.Add(_elem15);                  }                  iprot.ReadListEnd();                }                isset_middleNames = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                LastName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Age = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Email = iprot.ReadString();                isset_email = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Websites = new List<string>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    string _elem18;                    _elem18 = iprot.ReadString();                    Websites.Add(_elem18);                  }                  iprot.ReadListEnd();                }                isset_websites = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                FirstName = iprot.ReadString();                isset_firstName = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  MiddleNames = new List<string>();                  TList _list13 = iprot.ReadListBegin();                  for( int _i14 = 0; _i14 < _list13.Count; ++_i14)                  {                    string _elem15;                    _elem15 = iprot.ReadString();                    MiddleNames.Add(_elem15);                  }                  iprot.ReadListEnd();                }                isset_middleNames = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                LastName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Age = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Email = iprot.ReadString();                isset_email = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Websites = new List<string>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    string _elem18;                    _elem18 = iprot.ReadString();                    Websites.Add(_elem18);                  }                  iprot.ReadListEnd();                }                isset_websites = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                FirstName = iprot.ReadString();                isset_firstName = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  MiddleNames = new List<string>();                  TList _list13 = iprot.ReadListBegin();                  for( int _i14 = 0; _i14 < _list13.Count; ++_i14)                  {                    string _elem15;                    _elem15 = iprot.ReadString();                    MiddleNames.Add(_elem15);                  }                  iprot.ReadListEnd();                }                isset_middleNames = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                LastName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Age = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Email = iprot.ReadString();                isset_email = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Websites = new List<string>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    string _elem18;                    _elem18 = iprot.ReadString();                    Websites.Add(_elem18);                  }                  iprot.ReadListEnd();                }                isset_websites = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                FirstName = iprot.ReadString();                isset_firstName = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  MiddleNames = new List<string>();                  TList _list13 = iprot.ReadListBegin();                  for( int _i14 = 0; _i14 < _list13.Count; ++_i14)                  {                    string _elem15;                    _elem15 = iprot.ReadString();                    MiddleNames.Add(_elem15);                  }                  iprot.ReadListEnd();                }                isset_middleNames = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                LastName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Age = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Email = iprot.ReadString();                isset_email = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Websites = new List<string>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    string _elem18;                    _elem18 = iprot.ReadString();                    Websites.Add(_elem18);                  }                  iprot.ReadListEnd();                }                isset_websites = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                FirstName = iprot.ReadString();                isset_firstName = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  MiddleNames = new List<string>();                  TList _list13 = iprot.ReadListBegin();                  for( int _i14 = 0; _i14 < _list13.Count; ++_i14)                  {                    string _elem15;                    _elem15 = iprot.ReadString();                    MiddleNames.Add(_elem15);                  }                  iprot.ReadListEnd();                }                isset_middleNames = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                LastName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Age = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Email = iprot.ReadString();                isset_email = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Websites = new List<string>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    string _elem18;                    _elem18 = iprot.ReadString();                    Websites.Add(_elem18);                  }                  iprot.ReadListEnd();                }                isset_websites = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,Person,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\Person.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,PersonAvailability,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\PersonAvailability.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Person = new Person();                Person.Read(iprot);                isset_person = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  Periods = new List<TimePeriod>();                  TList _list21 = iprot.ReadListBegin();                  for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                  {                    TimePeriod _elem23;                    _elem23 = new TimePeriod();                    _elem23.Read(iprot);                    Periods.Add(_elem23);                  }                  iprot.ReadListEnd();                }                isset_periods = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,PersonAvailability,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\PersonAvailability.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,TimePeriod,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\TimePeriod.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                From = iprot.ReadI64();                isset_from = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                To = iprot.ReadI64();                isset_to = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                Available = iprot.ReadBool();                isset_available = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,TimePeriod,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\TimePeriod.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                From = iprot.ReadI64();                isset_from = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                To = iprot.ReadI64();                isset_to = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                Available = iprot.ReadBool();                isset_available = true;              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,TimePeriod,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\TimePeriod.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,ThriftSharp.Benchmarking.Models.Thrift,TimePeriod,D:\research\architectureSmells\repos1\SolalPirelli_ThriftSharp\benchmarks\Models\Thrift\TimePeriod.cs,Write,The following statement contains a magic number: field.ID = 3;
