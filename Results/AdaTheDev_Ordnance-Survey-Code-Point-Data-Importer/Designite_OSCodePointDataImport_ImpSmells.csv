Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,Cyclomatic complexity of the method is 13
Complex Method,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,LoadData,Cyclomatic complexity of the method is 9
Long Parameter List,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The method has 6 parameters. Parameters: serverName' databaseName' schemaName' tableName' dataFileDirectory' columnHeadersCsvFile
Long Parameter List,OSCodePointDataImport,OSDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\OSDataImporter.cs,SetForeignKey,The method has 6 parameters. Parameters: connection' schemaName' primaryKeyTableName' primaryKeyColumnName' foreignKeyTableName' foreignKeyColumnName
Long Parameter List,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,LoadData,The method has 7 parameters. Parameters: serverName' databaseName' schemaName' tableName' dataFile' countyLookupTableName' featureLookupTableName
Long Parameter List,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,PrepareTable,The method has 5 parameters. Parameters: connection' schemaName' tableName' countyTableName' featureTableName
Long Identifier,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,ReadDataFromFiles,The length of the parameter positionalQualityIndicatorColumnIndex is 37.
Long Identifier,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,,The length of the parameter PositionalQualityIndicatorColumnsCode is 37.
Long Identifier,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,,The length of the parameter PositionalQualityIndicatesNoCoordinates is 39.
Long Statement,OSCodePointDataImport,CodePointArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CodePointArgParser.cs,Validate,The length of the statement  "            if (String.IsNullOrWhiteSpace(DataFileDirectory)) throw new ArgumentException("DataFileDirectory argument must be supplied"); " is 125.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "            if (String.IsNullOrWhiteSpace(databaseName)) throw new ArgumentException("DatabaseName must be supplied"' "databaseName"); " is 122.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "            if (String.IsNullOrWhiteSpace(dataFileDirectory)) throw new ArgumentException("DataFileDirectory must be supplied"' "dataFileDirectory"); " is 137.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "            if (String.IsNullOrWhiteSpace(columnHeadersCsvFile)) throw new ArgumentException("ColumnHeadersCsvFile must be supplied"' "columnHeadersCsvFile"); " is 146.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "            if (!columns.ContainsKey(PostCodeColumnCode)) throw new Exception("Could not find PostCode column in ColumnHeadersCsvFile"); " is 124.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "            if (!columns.ContainsKey(EastingColumnCode)) throw new Exception("Could not find Easting column in ColumnHeadersCsvFile"); " is 122.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "            if (!columns.ContainsKey(NorthingColumnCode)) throw new Exception("Could not find Northing column in ColumnHeadersCsvFile"); " is 124.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "            if (!columns.ContainsKey(PositionalQualityIndicatorColumnsCode)) throw new Exception("Could not find Positional Quality Indicator column in ColumnHeadersCsvFile"); " is 163.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "            using (SqlConnection connection = new SqlConnection(String.Format("Data Source={0};Initial Catalog={1};Integrated Security=SSPI;"' serverName' databaseName))) " is 158.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "                // Create the table to import the data into. If it already exists' or the schema is not valid this will throw an exception. " is 123.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,ReadColumnHeaders,The length of the statement  "                    headers.Where(x => { return !String.IsNullOrEmpty(x); }).Select((header' index) => new { Header = header' Index = index }).ToDictionary(x => x.Header' x => x.Index); " is 165.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,LoadData,The length of the statement  "            return LoadData(options.ServerName' options.DBName' options.SchemaName' options.TableName' options.DataFileDirectory' options.ColumnHeadersCsvFile); " is 148.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,PrepareTable,The length of the statement  "                   String.Format(@"IF NOT EXISTS(SELECT * FROM sys.tables t JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.name = @TableName AND s.name = @SchemaName) " is 156.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,PrepareTable,The length of the statement  "                throw new Exception(String.Format("Error attemping to create table to load data into [{0}].[{1}]: {2}"'schemaName' tableName' ex.Message)' ex); " is 143.
Long Statement,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,ReadDataFromFiles,The length of the statement  "            Console.WriteLine("Done! {0} rows of data prepared ({1} postcodes ignored due to no coordinates)"' data.Rows.Count.ToString()' ignoredDueToNoCoordinates.ToString()); " is 165.
Long Statement,OSCodePointDataImport,OSDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\OSDataImporter.cs,SetGeoColumn,The length of the statement  "            ExecCommand(connection' String.Format(@"UPDATE [{0}].[{1}] SET GeoLocation = geography::Point([Latitude]' [Longitude]' 4326);"' " is 127.
Long Statement,OSCodePointDataImport,OSDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\OSDataImporter.cs,SetForeignKey,The length of the statement  "            ExecCommand(connection' String.Format("ALTER TABLE [{0}].[{1}] ADD CONSTRAINT [FK_{1}_{2}] FOREIGN KEY ([{3}]) REFERENCES [{0}].{2}({4});"' " is 139.
Long Statement,OSCodePointDataImport,OSDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\OSDataImporter.cs,CreateSpatialIndex,The length of the statement  "            ExecCommand(connection' String.Format("CREATE SPATIAL INDEX [IX_{0}_GeoLocation] ON [{1}].[{0}] ([GeoLocation]);"' tableName' schemaName)); " is 139.
Long Statement,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Validate,The length of the statement  "            if (String.IsNullOrWhiteSpace(_options.CountyLookupTableName)) throw new ArgumentException("CountyLookupTableName argument must be supplied"); " is 142.
Long Statement,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Validate,The length of the statement  "            if (String.IsNullOrWhiteSpace(_options.FeatureLookupTableName)) throw new ArgumentException("FeatureLookupTableName argument must be supplied"); " is 144.
Long Statement,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Validate,The length of the statement  "            if (String.IsNullOrWhiteSpace(_options.DataFileName)) throw new ArgumentException("Datafile argument must be supplied"); " is 120.
Long Statement,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Validate,The length of the statement  "            if (!File.Exists(_options.DataFileName)) throw new ArgumentException("Datafile argument is not valid. File does not exist");             " is 124.
Long Statement,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,LoadData,The length of the statement  "            return LoadData(options.ServerName' options.DBName' options.SchemaName' options.TableName' options.DataFileName' options.CountyLookupTableName' options.FeatureLookupTableName); " is 176.
Long Statement,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,LoadData,The length of the statement  "            if (String.IsNullOrWhiteSpace(databaseName)) throw new ArgumentException("DatabaseName must be supplied"' "databaseName"); " is 122.
Long Statement,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,LoadData,The length of the statement  "            if (String.IsNullOrWhiteSpace(countyLookupTableName)) throw new ArgumentException("CountyLookupTableName must be supplied"' "countyLookupTableName"); " is 149.
Long Statement,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,LoadData,The length of the statement  "            if (String.IsNullOrWhiteSpace(featureLookupTableName)) throw new ArgumentException("FeatureLookupTableName must be supplied"' "featureLookupTableName"); " is 152.
Long Statement,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,LoadData,The length of the statement  "            using (SqlConnection connection = new SqlConnection(String.Format("Data Source={0};Initial Catalog={1};Integrated Security=SSPI;"' serverName' databaseName))) " is 158.
Long Statement,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,LoadData,The length of the statement  "                // Create the table to import the data into. If it already exists' or the schema is not valid this will throw an exception. " is 123.
Long Statement,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The length of the statement  "            Console.WriteLine("Done! {0} point data rows and {1} county data rows of data prepared"' pointData.Rows.Count.ToString()' countyData.Rows.Count.ToString()); " is 156.
Long Statement,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,PrepareTable,The length of the statement  "                   String.Format(@"IF NOT EXISTS(SELECT * FROM sys.tables t JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.name IN (@TableName' @CountyTableName' @FeatureTableName) AND s.name = @SchemaName) " is 196.
Long Statement,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,PrepareTable,The length of the statement  "                throw new Exception(String.Format("Error attemping to create table to load data into [{0}].[{1}]: {2}"' schemaName' tableName' ex.Message)' ex); " is 144.
Magic Number,OSCodePointDataImport,CodePointArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CodePointArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 6) ImportOptions.DataFileDirectory = args[5];
Magic Number,OSCodePointDataImport,CodePointArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CodePointArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 6) ImportOptions.DataFileDirectory = args[5];
Magic Number,OSCodePointDataImport,CodePointArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CodePointArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 7) ImportOptions.ColumnHeadersCsvFile = args[6];
Magic Number,OSCodePointDataImport,CodePointArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CodePointArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 7) ImportOptions.ColumnHeadersCsvFile = args[6];
Magic Number,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,PrepareTable,The following statement contains a magic number: try              {                  using (SqlCommand cmd = new SqlCommand())                  {                      cmd.Connection = connection;                                      cmd.CommandText =                     String.Format(@"IF NOT EXISTS(SELECT * FROM sys.tables t JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.name = @TableName AND s.name = @SchemaName)                          BEGIN                              CREATE TABLE [{0}].[{1}]                              (                                  OutwardCode VARCHAR(4) NOT NULL'                                  InwardCode VARCHAR(3) NOT NULL'                                  Longitude FLOAT'                                  Latitude FLOAT'                                  GeoLocation GEOGRAPHY                              )                              SET @Created = 1                          END"' schemaName' tableName);                      cmd.Parameters.Add("@TableName"' System.Data.SqlDbType.NVarChar'128).Value = tableName;                      cmd.Parameters.Add("@SchemaName"' System.Data.SqlDbType.NVarChar'128).Value = schemaName;                      cmd.Parameters.Add("@Created"' System.Data.SqlDbType.Bit' 1).Direction = ParameterDirection.Output;                      cmd.ExecuteNonQuery();                      if (cmd.Parameters["@Created"].Value == DBNull.Value)                      {                          throw new Exception("Cannot create new table to load to because the table already exists");                      }                  }              }              catch (Exception ex)              {                  throw new Exception(String.Format("Error attemping to create table to load data into [{0}].[{1}]: {2}"'schemaName' tableName' ex.Message)' ex);              }
Magic Number,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,PrepareTable,The following statement contains a magic number: try              {                  using (SqlCommand cmd = new SqlCommand())                  {                      cmd.Connection = connection;                                      cmd.CommandText =                     String.Format(@"IF NOT EXISTS(SELECT * FROM sys.tables t JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.name = @TableName AND s.name = @SchemaName)                          BEGIN                              CREATE TABLE [{0}].[{1}]                              (                                  OutwardCode VARCHAR(4) NOT NULL'                                  InwardCode VARCHAR(3) NOT NULL'                                  Longitude FLOAT'                                  Latitude FLOAT'                                  GeoLocation GEOGRAPHY                              )                              SET @Created = 1                          END"' schemaName' tableName);                      cmd.Parameters.Add("@TableName"' System.Data.SqlDbType.NVarChar'128).Value = tableName;                      cmd.Parameters.Add("@SchemaName"' System.Data.SqlDbType.NVarChar'128).Value = schemaName;                      cmd.Parameters.Add("@Created"' System.Data.SqlDbType.Bit' 1).Direction = ParameterDirection.Output;                      cmd.ExecuteNonQuery();                      if (cmd.Parameters["@Created"].Value == DBNull.Value)                      {                          throw new Exception("Cannot create new table to load to because the table already exists");                      }                  }              }              catch (Exception ex)              {                  throw new Exception(String.Format("Error attemping to create table to load data into [{0}].[{1}]: {2}"'schemaName' tableName' ex.Message)' ex);              }
Magic Number,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,ReadDataFromFiles,The following statement contains a magic number: foreach (string fileName in Directory.GetFiles(directory' "*.csv"))              {                  string[] lineData;                                  using (StreamReader stream = new StreamReader(fileName))                  {                      while (stream.Peek() >= 0)                      {                                                 lineData = stream.ReadLine().Split(''');                          positionalQualityIndicator = int.Parse(lineData[positionalQualityIndicatorColumnIndex]);                          postCode = lineData[postCodeColumnIndex].Replace("\""' "");                            if (positionalQualityIndicator == PositionalQualityIndicatesNoCoordinates)                          {                              ignoredDueToNoCoordinates++;                              Console.WriteLine("Ignoring postcode due to no positional coordinates: " + postCode);                              continue;                          }                                                    easting = long.Parse(lineData[eastingColumnIndex]);                          northing = long.Parse(lineData[northingColumnIndex]);                            polarCoord = ConvertToLonLat(northing' easting);                          row = data.NewRow();                                                            // 1st column is the PostCode and is contained within double quotes (remove them).                          if (postCode.Contains(' '))                          {                              outwardCode = postCode.Substring(0' postCode.IndexOf(' '));                              inwardCode = postCode.Substring(postCode.LastIndexOf(' ') + 1);                          }                          else                          {                              outwardCode = postCode.Substring(0' 4);                              inwardCode = postCode.Substring(4' 3);                          }                            row["OutwardCode"] = outwardCode;                          row["InwardCode"] = inwardCode;                          row["Longitude"] = polarCoord.Lon;                          row["Latitude"] = polarCoord.Lat;                          data.Rows.Add(row);                                              }                  }              }
Magic Number,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,ReadDataFromFiles,The following statement contains a magic number: foreach (string fileName in Directory.GetFiles(directory' "*.csv"))              {                  string[] lineData;                                  using (StreamReader stream = new StreamReader(fileName))                  {                      while (stream.Peek() >= 0)                      {                                                 lineData = stream.ReadLine().Split(''');                          positionalQualityIndicator = int.Parse(lineData[positionalQualityIndicatorColumnIndex]);                          postCode = lineData[postCodeColumnIndex].Replace("\""' "");                            if (positionalQualityIndicator == PositionalQualityIndicatesNoCoordinates)                          {                              ignoredDueToNoCoordinates++;                              Console.WriteLine("Ignoring postcode due to no positional coordinates: " + postCode);                              continue;                          }                                                    easting = long.Parse(lineData[eastingColumnIndex]);                          northing = long.Parse(lineData[northingColumnIndex]);                            polarCoord = ConvertToLonLat(northing' easting);                          row = data.NewRow();                                                            // 1st column is the PostCode and is contained within double quotes (remove them).                          if (postCode.Contains(' '))                          {                              outwardCode = postCode.Substring(0' postCode.IndexOf(' '));                              inwardCode = postCode.Substring(postCode.LastIndexOf(' ') + 1);                          }                          else                          {                              outwardCode = postCode.Substring(0' 4);                              inwardCode = postCode.Substring(4' 3);                          }                            row["OutwardCode"] = outwardCode;                          row["InwardCode"] = inwardCode;                          row["Longitude"] = polarCoord.Lon;                          row["Latitude"] = polarCoord.Lat;                          data.Rows.Add(row);                                              }                  }              }
Magic Number,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,ReadDataFromFiles,The following statement contains a magic number: foreach (string fileName in Directory.GetFiles(directory' "*.csv"))              {                  string[] lineData;                                  using (StreamReader stream = new StreamReader(fileName))                  {                      while (stream.Peek() >= 0)                      {                                                 lineData = stream.ReadLine().Split(''');                          positionalQualityIndicator = int.Parse(lineData[positionalQualityIndicatorColumnIndex]);                          postCode = lineData[postCodeColumnIndex].Replace("\""' "");                            if (positionalQualityIndicator == PositionalQualityIndicatesNoCoordinates)                          {                              ignoredDueToNoCoordinates++;                              Console.WriteLine("Ignoring postcode due to no positional coordinates: " + postCode);                              continue;                          }                                                    easting = long.Parse(lineData[eastingColumnIndex]);                          northing = long.Parse(lineData[northingColumnIndex]);                            polarCoord = ConvertToLonLat(northing' easting);                          row = data.NewRow();                                                            // 1st column is the PostCode and is contained within double quotes (remove them).                          if (postCode.Contains(' '))                          {                              outwardCode = postCode.Substring(0' postCode.IndexOf(' '));                              inwardCode = postCode.Substring(postCode.LastIndexOf(' ') + 1);                          }                          else                          {                              outwardCode = postCode.Substring(0' 4);                              inwardCode = postCode.Substring(4' 3);                          }                            row["OutwardCode"] = outwardCode;                          row["InwardCode"] = inwardCode;                          row["Longitude"] = polarCoord.Lon;                          row["Latitude"] = polarCoord.Lat;                          data.Rows.Add(row);                                              }                  }              }
Magic Number,OSCodePointDataImport,CodePointDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\CodePointDataImporter.cs,CalculateDistrictsAndSectors,The following statement contains a magic number: using (SqlCommand cmd = new SqlCommand())              {                  cmd.Connection = connection;                  cmd.CommandTimeout = 600;                  Console.WriteLine("Calculating averages for postcode districts and sectors...");                  cmd.CommandText = String.Format(@";WITH CTEDistrictsAndSectors AS                      (  	                    SELECT OutwardCode' '' AS InwardCode' AVG(Longitude) AS AvgLongitude' AVG(Latitude) AS AvgLatitude  	                    FROM [{0}].[{1}]  	                    GROUP BY OutwardCode  	                    UNION ALL  	                    SELECT OutwardCode' LEFT(InwardCode' 1)' AVG(Longitude)' AVG(Latitude)  	                    FROM [{0}].[{1}]  	                    GROUP BY OutwardCode' LEFT(InwardCode' 1)                      )                      INSERT [{0}].[{1}] (OutwardCode' InwardCode' Longitude' Latitude' GeoLocation)                      SELECT OutwardCode' InwardCode' AvgLongitude' AvgLatitude' geography::Point(AvgLatitude' AvgLongitude' 4326)                      FROM CTEDistrictsAndSectors"' schemaName' tableName);                  cmd.ExecuteNonQuery();                  Console.WriteLine("Done!");              }
Magic Number,OSCodePointDataImport,CommandLineArgParser<T>,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CommandLineArgParser.cs,Parse,The following statement contains a magic number: if (numOfArgs >= 2) ImportOptions.DBName = args[2];
Magic Number,OSCodePointDataImport,CommandLineArgParser<T>,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CommandLineArgParser.cs,Parse,The following statement contains a magic number: if (numOfArgs >= 2) ImportOptions.DBName = args[2];
Magic Number,OSCodePointDataImport,CommandLineArgParser<T>,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CommandLineArgParser.cs,Parse,The following statement contains a magic number: if (numOfArgs >= 3) ImportOptions.SchemaName = args[3];
Magic Number,OSCodePointDataImport,CommandLineArgParser<T>,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CommandLineArgParser.cs,Parse,The following statement contains a magic number: if (numOfArgs >= 3) ImportOptions.SchemaName = args[3];
Magic Number,OSCodePointDataImport,CommandLineArgParser<T>,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CommandLineArgParser.cs,Parse,The following statement contains a magic number: if (numOfArgs >= 4) ImportOptions.TableName = args[4];
Magic Number,OSCodePointDataImport,CommandLineArgParser<T>,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\CommandLineArgParser.cs,Parse,The following statement contains a magic number: if (numOfArgs >= 4) ImportOptions.TableName = args[4];
Magic Number,OSCodePointDataImport,OSDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\OSDataImporter.cs,LoadRowsToDatabase,The following statement contains a magic number: using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection' SqlBulkCopyOptions.TableLock' null))              {                  bulkCopy.BulkCopyTimeout = 600;                  bulkCopy.DestinationTableName = String.Format("[{0}].[{1}]"' schemaName' tableName);                  foreach(DataColumn column in data.Columns)                  {                      bulkCopy.ColumnMappings.Add(column.ColumnName' column.ColumnName);                  }                  bulkCopy.WriteToServer(data);              }
Magic Number,OSCodePointDataImport,OSDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\OSDataImporter.cs,ExecCommand,The following statement contains a magic number: using (SqlCommand cmd = new SqlCommand())              {                  cmd.Connection = connection;                  cmd.CommandTimeout = 600;                                    cmd.CommandText = commandText;                  cmd.ExecuteNonQuery();                  Console.WriteLine("Done!");              }
Magic Number,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 6) _options.CountyLookupTableName = args[5];
Magic Number,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 6) _options.CountyLookupTableName = args[5];
Magic Number,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 7) _options.FeatureLookupTableName = args[6];
Magic Number,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 7) _options.FeatureLookupTableName = args[6];
Magic Number,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 8) _options.DataFileName = args[7];
Magic Number,OSCodePointDataImport,ScaleGazetteerArgParser,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\ArgumentParsers\ScaleGazetteerArgParser.cs,Parse,The following statement contains a magic number: if (args.Length >= 8) _options.DataFileName = args[7];
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,ReadDataFromFile,The following statement contains a magic number: using (StreamReader stream = new StreamReader(dataFile' Encoding.UTF7))              {                  while (stream.Peek() >= 0)                  {                      lineData = stream.ReadLine().Split(':');                      sequenceNumber = int.Parse(lineData[0]);                      placeName = lineData[2];                      latDegrees = double.Parse(lineData[4]);                      latMinutes = double.Parse(lineData[5]);                      lonDegrees = double.Parse(lineData[6]);                      lonMinutes = double.Parse(lineData[7]);                                          gmt = lineData[10];                      countyCode = lineData[11];                      countyName = lineData[13];                      featureCode = lineData[14];                        latitude = latDegrees + ((latMinutes != 0) ? latMinutes / 60.0 : 0.0);                      longitude = lonDegrees + ((lonMinutes != 0) ? lonMinutes / 60.0 : 0.0);                                                                row = pointData.NewRow();                      row["SeqNo"] = int.Parse(lineData[0]);                      row["PlaceName"] = lineData[2];                      row["CountyCode"] = countyCode;                      row["FeatureCode"] = lineData[14];                      row["Latitude"] = latitude;                      row["Longitude"] = (String.Compare(gmt'"W") == 0) ? -longitude : longitude;                                          pointData.Rows.Add(row);                        // Maintain a distinct list of county codes & names                      if (!counties.ContainsKey(countyCode))                                            counties.Add(countyCode' countyName);                                      }              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,PrepareTable,The following statement contains a magic number: try              {                  using (SqlCommand cmd = new SqlCommand())                  {                      cmd.Connection = connection;                      cmd.CommandText =                     String.Format(@"IF NOT EXISTS(SELECT * FROM sys.tables t JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.name IN (@TableName' @CountyTableName' @FeatureTableName) AND s.name = @SchemaName)                          BEGIN                              CREATE TABLE [{0}].[{1}]                              (                                  SeqNo INTEGER NOT NULL'                                  PlaceName VARCHAR(60) NOT NULL'                                  CountyCode CHAR(2) NOT NULL'                                  FeatureCode VARCHAR(3) NOT NULL'                                  Longitude FLOAT'                                  Latitude FLOAT'                                  GeoLocation GEOGRAPHY                              );                              CREATE TABLE [{0}].[{2}]                              (                                  Code CHAR(2) NOT NULL'                                  Name VARCHAR(60) NOT NULL                              );                              CREATE TABLE [{0}].[{3}]                              (                                  Code VARCHAR(3) NOT NULL'                                  Description VARCHAR(50) NOT NULL                              )                                                 SET @Created = 1                          END;"' schemaName' tableName' countyTableName' featureTableName);                      cmd.Parameters.Add("@TableName"' System.Data.SqlDbType.NVarChar' 128).Value = tableName;                      cmd.Parameters.Add("@SchemaName"' System.Data.SqlDbType.NVarChar' 128).Value = schemaName;                      cmd.Parameters.Add("@CountyTableName"' System.Data.SqlDbType.NVarChar' 128).Value = countyTableName;                      cmd.Parameters.Add("@FeatureTableName"' System.Data.SqlDbType.NVarChar' 128).Value = featureTableName;                      cmd.Parameters.Add("@Created"' System.Data.SqlDbType.Bit' 1).Direction = ParameterDirection.Output;                      cmd.ExecuteNonQuery();                      if (cmd.Parameters["@Created"].Value == DBNull.Value)                      {                          throw new Exception("Cannot create new table to load to because the table already exists");                      }                  }              }              catch (Exception ex)              {                  throw new Exception(String.Format("Error attemping to create table to load data into [{0}].[{1}]: {2}"' schemaName' tableName' ex.Message)' ex);              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,PrepareTable,The following statement contains a magic number: try              {                  using (SqlCommand cmd = new SqlCommand())                  {                      cmd.Connection = connection;                      cmd.CommandText =                     String.Format(@"IF NOT EXISTS(SELECT * FROM sys.tables t JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.name IN (@TableName' @CountyTableName' @FeatureTableName) AND s.name = @SchemaName)                          BEGIN                              CREATE TABLE [{0}].[{1}]                              (                                  SeqNo INTEGER NOT NULL'                                  PlaceName VARCHAR(60) NOT NULL'                                  CountyCode CHAR(2) NOT NULL'                                  FeatureCode VARCHAR(3) NOT NULL'                                  Longitude FLOAT'                                  Latitude FLOAT'                                  GeoLocation GEOGRAPHY                              );                              CREATE TABLE [{0}].[{2}]                              (                                  Code CHAR(2) NOT NULL'                                  Name VARCHAR(60) NOT NULL                              );                              CREATE TABLE [{0}].[{3}]                              (                                  Code VARCHAR(3) NOT NULL'                                  Description VARCHAR(50) NOT NULL                              )                                                 SET @Created = 1                          END;"' schemaName' tableName' countyTableName' featureTableName);                      cmd.Parameters.Add("@TableName"' System.Data.SqlDbType.NVarChar' 128).Value = tableName;                      cmd.Parameters.Add("@SchemaName"' System.Data.SqlDbType.NVarChar' 128).Value = schemaName;                      cmd.Parameters.Add("@CountyTableName"' System.Data.SqlDbType.NVarChar' 128).Value = countyTableName;                      cmd.Parameters.Add("@FeatureTableName"' System.Data.SqlDbType.NVarChar' 128).Value = featureTableName;                      cmd.Parameters.Add("@Created"' System.Data.SqlDbType.Bit' 1).Direction = ParameterDirection.Output;                      cmd.ExecuteNonQuery();                      if (cmd.Parameters["@Created"].Value == DBNull.Value)                      {                          throw new Exception("Cannot create new table to load to because the table already exists");                      }                  }              }              catch (Exception ex)              {                  throw new Exception(String.Format("Error attemping to create table to load data into [{0}].[{1}]: {2}"' schemaName' tableName' ex.Message)' ex);              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,PrepareTable,The following statement contains a magic number: try              {                  using (SqlCommand cmd = new SqlCommand())                  {                      cmd.Connection = connection;                      cmd.CommandText =                     String.Format(@"IF NOT EXISTS(SELECT * FROM sys.tables t JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.name IN (@TableName' @CountyTableName' @FeatureTableName) AND s.name = @SchemaName)                          BEGIN                              CREATE TABLE [{0}].[{1}]                              (                                  SeqNo INTEGER NOT NULL'                                  PlaceName VARCHAR(60) NOT NULL'                                  CountyCode CHAR(2) NOT NULL'                                  FeatureCode VARCHAR(3) NOT NULL'                                  Longitude FLOAT'                                  Latitude FLOAT'                                  GeoLocation GEOGRAPHY                              );                              CREATE TABLE [{0}].[{2}]                              (                                  Code CHAR(2) NOT NULL'                                  Name VARCHAR(60) NOT NULL                              );                              CREATE TABLE [{0}].[{3}]                              (                                  Code VARCHAR(3) NOT NULL'                                  Description VARCHAR(50) NOT NULL                              )                                                 SET @Created = 1                          END;"' schemaName' tableName' countyTableName' featureTableName);                      cmd.Parameters.Add("@TableName"' System.Data.SqlDbType.NVarChar' 128).Value = tableName;                      cmd.Parameters.Add("@SchemaName"' System.Data.SqlDbType.NVarChar' 128).Value = schemaName;                      cmd.Parameters.Add("@CountyTableName"' System.Data.SqlDbType.NVarChar' 128).Value = countyTableName;                      cmd.Parameters.Add("@FeatureTableName"' System.Data.SqlDbType.NVarChar' 128).Value = featureTableName;                      cmd.Parameters.Add("@Created"' System.Data.SqlDbType.Bit' 1).Direction = ParameterDirection.Output;                      cmd.ExecuteNonQuery();                      if (cmd.Parameters["@Created"].Value == DBNull.Value)                      {                          throw new Exception("Cannot create new table to load to because the table already exists");                      }                  }              }              catch (Exception ex)              {                  throw new Exception(String.Format("Error attemping to create table to load data into [{0}].[{1}]: {2}"' schemaName' tableName' ex.Message)' ex);              }
Magic Number,OSCodePointDataImport,ScaleGazetteerDataImporter,C:\repos\AdaTheDev_Ordnance-Survey-Code-Point-Data-Importer\OSCodePointDataImport\Importers\ScaleGazetteerDataImporter.cs,PrepareTable,The following statement contains a magic number: try              {                  using (SqlCommand cmd = new SqlCommand())                  {                      cmd.Connection = connection;                      cmd.CommandText =                     String.Format(@"IF NOT EXISTS(SELECT * FROM sys.tables t JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE t.name IN (@TableName' @CountyTableName' @FeatureTableName) AND s.name = @SchemaName)                          BEGIN                              CREATE TABLE [{0}].[{1}]                              (                                  SeqNo INTEGER NOT NULL'                                  PlaceName VARCHAR(60) NOT NULL'                                  CountyCode CHAR(2) NOT NULL'                                  FeatureCode VARCHAR(3) NOT NULL'                                  Longitude FLOAT'                                  Latitude FLOAT'                                  GeoLocation GEOGRAPHY                              );                              CREATE TABLE [{0}].[{2}]                              (                                  Code CHAR(2) NOT NULL'                                  Name VARCHAR(60) NOT NULL                              );                              CREATE TABLE [{0}].[{3}]                              (                                  Code VARCHAR(3) NOT NULL'                                  Description VARCHAR(50) NOT NULL                              )                                                 SET @Created = 1                          END;"' schemaName' tableName' countyTableName' featureTableName);                      cmd.Parameters.Add("@TableName"' System.Data.SqlDbType.NVarChar' 128).Value = tableName;                      cmd.Parameters.Add("@SchemaName"' System.Data.SqlDbType.NVarChar' 128).Value = schemaName;                      cmd.Parameters.Add("@CountyTableName"' System.Data.SqlDbType.NVarChar' 128).Value = countyTableName;                      cmd.Parameters.Add("@FeatureTableName"' System.Data.SqlDbType.NVarChar' 128).Value = featureTableName;                      cmd.Parameters.Add("@Created"' System.Data.SqlDbType.Bit' 1).Direction = ParameterDirection.Output;                      cmd.ExecuteNonQuery();                      if (cmd.Parameters["@Created"].Value == DBNull.Value)                      {                          throw new Exception("Cannot create new table to load to because the table already exists");                      }                  }              }              catch (Exception ex)              {                  throw new Exception(String.Format("Error attemping to create table to load data into [{0}].[{1}]: {2}"' schemaName' tableName' ex.Message)' ex);              }
