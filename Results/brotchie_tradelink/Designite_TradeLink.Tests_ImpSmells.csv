Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,SendOrder,The method has 8 parameters. Parameters: sym' side' size' limit' stop' id' account' dest
Long Statement,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,ExecutionPerformance,The length of the statement  "            rt.d("Execution " + ((double)tickcount / time).ToString("N0") + " ticks/sec.  " + ((double)fillcount / time).ToString("N0") + " fills/sec"); " is 140.
Long Statement,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The length of the statement  "                imbs[j] = new ImbalanceImpl(syms[j]' "NYSE"' r.Next(-1000' 1000) * r.Next(1000)' 1550' r.Next(-1000' 1000) * r.Next(1000)' 1540' 0); " is 132.
Long Statement,TestTradeLink,TestRandomSymbol,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestRandomSymbol.cs,Basics,The length of the statement  "                v &= (sym.Length > 0) && (System.Text.RegularExpressions.Regex.Replace(sym' "[a-z]"' ""' System.Text.RegularExpressions.RegexOptions.IgnoreCase).Length == 0); " is 158.
Long Statement,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The length of the statement  "            System.Collections.Generic.List<TradeLink.API.Trade> fills = new System.Collections.Generic.List<TradeLink.API.Trade>(); " is 120.
Long Statement,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,DecimalPerformance,The length of the statement  "            Console.WriteLine("DecimalPerformance (expected): " + time.ToString("N2") + "s (" + EXPECT.ToString("N2") + ")' reps/sec: " + (REPS / time).ToString("N0")); " is 156.
Long Statement,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,IntPerformance,The length of the statement  "            Console.WriteLine("IntPerformance (expected): " + time.ToString("N2") + "s (" + EXPECT.ToString("N2") + ")' reps/sec: " + (REPS / time).ToString("N0")); " is 152.
Long Statement,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,ExecutionPerformance,The length of the statement  "            rt.d("Execution " + ((double)tickcount / time).ToString("N0") + " ticks/sec.  " + ((double)fillcount / time).ToString("N0") + " fills/sec"); " is 140.
Long Statement,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,start,The length of the statement  "            c = new TLClient_IP(TLClient_IP.GetEndpoints(s.Port'new string[] { System.Net.IPAddress.Loopback.ToString() })'0'"tlclient"'0'0'debugc'true); " is 141.
Long Statement,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,start,The length of the statement  "            //c2 = new TLClient_IP(TLClient_IP.GetEndpoints(IPUtil.TLDEFAULTTESTPORT' new string[] { System.Net.IPAddress.Loopback.ToString() })' 0' "tlclient2"' 0' 0' debug); " is 163.
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,SeveralTicks,The following statement contains a magic number: tks.SendOrderTIF(new BuyLimit(sym' 100' p)' 2);
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,SeveralTicks,The following statement contains a magic number: tks.SendOrderTIF(new BuyLimit(sym' 100' p)' 2);
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,SeveralTicks,The following statement contains a magic number: tks.newTick(TickImpl.NewTrade(sym' p' 100));
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,SeveralTicks,The following statement contains a magic number: tks.newTick(TickImpl.NewTrade(sym' p' 100));
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,IOC,The following statement contains a magic number: tks.SendOrderTIF(new BuyLimit(sym' 100' p)' 1);
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,IOC,The following statement contains a magic number: tks.newTick(TickImpl.NewBid(sym' p' 100));
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,IOC,The following statement contains a magic number: tks.newTick(TickImpl.NewBid(sym' p' 100));
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,IOC,The following statement contains a magic number: tks.newTick(TickImpl.NewBid(sym' p' 100));
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,IOC,The following statement contains a magic number: tks.newTick(TickImpl.NewBid(sym' p' 100));
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,IOC,The following statement contains a magic number: tks.newTick(TickImpl.NewAsk(sym' p' 100));
Magic Number,TestTradeLink,TestTifTracker_Ticks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTifTracker_Ticks.cs,IOC,The following statement contains a magic number: tks.newTick(TickImpl.NewTrade(sym' p' 100));
Magic Number,TestTradeLink,TestResults,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResults.cs,RoundTurnStat,The following statement contains a magic number: Trade[] fills = new TradeImpl[] {                  // go long                  new TradeImpl(sym'p's)'                  // increase bet                  new TradeImpl(sym'p+inc's*2)'                  // take some profits                  new TradeImpl(sym'p+inc*2's*-1)'                  // go flat (round turn)                  new TradeImpl(sym'p+inc*2's*-2)'                  // go short                  new TradeImpl(sym'p's*-2)'                  // decrease bet                  new TradeImpl(sym'p's)'                  // exit (round turn)                  new TradeImpl(sym'p+inc's)'                  // do another entry                  new TradeImpl(sym'p's)              };
Magic Number,TestTradeLink,TestResults,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResults.cs,RoundTurnStat,The following statement contains a magic number: Trade[] fills = new TradeImpl[] {                  // go long                  new TradeImpl(sym'p's)'                  // increase bet                  new TradeImpl(sym'p+inc's*2)'                  // take some profits                  new TradeImpl(sym'p+inc*2's*-1)'                  // go flat (round turn)                  new TradeImpl(sym'p+inc*2's*-2)'                  // go short                  new TradeImpl(sym'p's*-2)'                  // decrease bet                  new TradeImpl(sym'p's)'                  // exit (round turn)                  new TradeImpl(sym'p+inc's)'                  // do another entry                  new TradeImpl(sym'p's)              };
Magic Number,TestTradeLink,TestResults,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResults.cs,RoundTurnStat,The following statement contains a magic number: Trade[] fills = new TradeImpl[] {                  // go long                  new TradeImpl(sym'p's)'                  // increase bet                  new TradeImpl(sym'p+inc's*2)'                  // take some profits                  new TradeImpl(sym'p+inc*2's*-1)'                  // go flat (round turn)                  new TradeImpl(sym'p+inc*2's*-2)'                  // go short                  new TradeImpl(sym'p's*-2)'                  // decrease bet                  new TradeImpl(sym'p's)'                  // exit (round turn)                  new TradeImpl(sym'p+inc's)'                  // do another entry                  new TradeImpl(sym'p's)              };
Magic Number,TestTradeLink,TestResults,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResults.cs,RoundTurnStat,The following statement contains a magic number: Trade[] fills = new TradeImpl[] {                  // go long                  new TradeImpl(sym'p's)'                  // increase bet                  new TradeImpl(sym'p+inc's*2)'                  // take some profits                  new TradeImpl(sym'p+inc*2's*-1)'                  // go flat (round turn)                  new TradeImpl(sym'p+inc*2's*-2)'                  // go short                  new TradeImpl(sym'p's*-2)'                  // decrease bet                  new TradeImpl(sym'p's)'                  // exit (round turn)                  new TradeImpl(sym'p+inc's)'                  // do another entry                  new TradeImpl(sym'p's)              };
Magic Number,TestTradeLink,TestResults,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResults.cs,RoundTurnStat,The following statement contains a magic number: Trade[] fills = new TradeImpl[] {                  // go long                  new TradeImpl(sym'p's)'                  // increase bet                  new TradeImpl(sym'p+inc's*2)'                  // take some profits                  new TradeImpl(sym'p+inc*2's*-1)'                  // go flat (round turn)                  new TradeImpl(sym'p+inc*2's*-2)'                  // go short                  new TradeImpl(sym'p's*-2)'                  // decrease bet                  new TradeImpl(sym'p's)'                  // exit (round turn)                  new TradeImpl(sym'p+inc's)'                  // do another entry                  new TradeImpl(sym'p's)              };
Magic Number,TestTradeLink,TestResults,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResults.cs,RoundTurnStat,The following statement contains a magic number: Assert.AreEqual(2' rt.RoundTurns' "missing round turns");
Magic Number,TestTradeLink,TestResults,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResults.cs,RoundTurnStat,The following statement contains a magic number: Assert.AreEqual(2' rt.Winners'"missing trade winner");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,FixSentOnUnknown,The following statement contains a magic number: o = new BuyLimit(sym' 100' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,FixSentOnUnknown,The following statement contains a magic number: o = new BuyLimit(sym' 100' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,FixSentOnUnknown,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 100' 100))' "order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,FixSentOnUnknown,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 100' 100))' "order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,FixSentOnUnknown,The following statement contains a magic number: Assert.AreEqual(100' ot.Sent(id - 1)' "not sent buy");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,FixSentOnUnknown,The following statement contains a magic number: Assert.AreEqual(100' ot.Filled(id - 1)' "incorrect fill size buy");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Sent,The following statement contains a magic number: ot.GotOrder(new BuyLimit(sym' 100' 100' id++));
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Sent,The following statement contains a magic number: ot.GotOrder(new BuyLimit(sym' 100' 100' id++));
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Sent,The following statement contains a magic number: Assert.AreEqual(100' ot.Sent(id-1)' "not sent");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Sent,The following statement contains a magic number: ot.GotOrder(new SellLimit(sym' 100' 100' id++));
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Sent,The following statement contains a magic number: ot.GotOrder(new SellLimit(sym' 100' 100' id++));
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Sent,The following statement contains a magic number: Assert.AreEqual(-100' ot.Sent(id - 1)' "not sent");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: o = new BuyLimit(sym' 100' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: o = new BuyLimit(sym' 100' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym'100'100))'"order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym'100'100))'"order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: Assert.AreEqual(100' ot.Sent(id - 1)' "not sent buy");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: Assert.AreEqual(100' ot.Filled(id - 1)' "incorrect fill size buy");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: o = new SellLimit(sym' 100' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: o = new SellLimit(sym' 100' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 100' 100))' "order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 100' 100))' "order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: Assert.AreEqual(-100' ot.Filled(id - 1)' "incorrect fill size sell");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Fill,The following statement contains a magic number: Assert.AreEqual(-100' ot.Sent(id - 1)' "not sent sell");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: o = new BuyLimit(sym' 200' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: o = new BuyLimit(sym' 200' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 100' 100))' "order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 100' 100))' "order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: Assert.AreEqual(200' ot.Sent(id - 1)' "not sent buy");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: Assert.AreEqual(100' ot.Filled(id - 1)' "incorrect fill size buy");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: o = new SellLimit(sym' 200' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: o = new SellLimit(sym' 200' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 100' 100))' "order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 100' 100))' "order did not fill");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: Assert.AreEqual(-100' ot.Filled(id - 1)' "incorrect fill size sell");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,PartialFill,The following statement contains a magic number: Assert.AreEqual(-200' ot.Sent(id - 1)' "not sent sell");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Cancel,The following statement contains a magic number: o = new BuyLimit(sym' 200' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Cancel,The following statement contains a magic number: o = new BuyLimit(sym' 200' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Cancel,The following statement contains a magic number: Assert.AreEqual(200' ot.Sent(id - 1)' "not sent buy");
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Cancel,The following statement contains a magic number: o = new SellLimit(sym' 200' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Cancel,The following statement contains a magic number: o = new SellLimit(sym' 200' 100' id++);
Magic Number,TestTradeLink,TestOrderTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrderTracker.cs,Cancel,The following statement contains a magic number: Assert.AreEqual(-200' ot.Sent(id - 1)' "not sent sell");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: sho.GotPosition(new PositionImpl(sym' 89.7m' 100));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: sho.GotPosition(new PositionImpl(sym' 89.7m' 100));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellStop(sym' 100' 89.65m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellStop(sym' 100' 89.65m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellLimit(sym' 100' 89.75m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellLimit(sym' 100' 89.75m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellStop(sym' 100' 89.65m' stop1);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellStop(sym' 100' 89.65m' stop1);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o.Fill(TickImpl.NewTrade(sym'89.62m'100));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o.Fill(TickImpl.NewTrade(sym'89.62m'100));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new BuyMarket(sym'100);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o.Fill(TickImpl.NewTrade(sym' 89.64m' 100));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o.Fill(TickImpl.NewTrade(sym' 89.64m' 100));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellStop(sym' 100' 89.65m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellStop(sym' 100' 89.65m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellLimit(sym' 100' 89.75m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,DoubleBasicWithFlat,The following statement contains a magic number: o = new SellLimit(sym' 100' 89.75m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,Basic,The following statement contains a magic number: sho.GotPosition(new PositionImpl(sym'100'300));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,Basic,The following statement contains a magic number: sho.GotPosition(new PositionImpl(sym'100'300));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,Basic,The following statement contains a magic number: o = new SellLimit(sym' 100' 200' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,Basic,The following statement contains a magic number: o = new SellLimit(sym' 100' 200' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,Basic,The following statement contains a magic number: o = new SellLimit(sym' 200' 105' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,Basic,The following statement contains a magic number: o = new SellLimit(sym' 200' 105' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,Basic,The following statement contains a magic number: o = new SellStop(sym' 300' 99);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,Basic,The following statement contains a magic number: o = new SellStop(sym' 300' 99);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillPendTest,The following statement contains a magic number: o = new BuyLimit(sym' 100' 10' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillPendTest,The following statement contains a magic number: o = new BuyLimit(sym' 100' 10' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillPendTest,The following statement contains a magic number: Assert.AreEqual(100' pendingsize(sym)'"missing pending size");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillPendTest,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym'10'100))'"no fill");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillPendTest,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym'10'100))'"no fill");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: so(new SellLimit(sym' 100' 25.83m' id++));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: so(new SellLimit(sym' 100' 25.83m' id++));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: so(new SellStop(sym' 100' 25.83m' id++));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: so(new SellStop(sym' 100' 25.83m' id++));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: o = new SellStop(sym' 200' 25.83m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: o = new SellStop(sym' 200' 25.83m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 25.80m' 200))' "missing initial fill");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 25.80m' 200))' "missing initial fill");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: o = new BuyLimit(sym' 100' 25.83m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: o = new BuyLimit(sym' 100' 25.83m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 25.80m' 100))' "unable to fill order");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym' 25.80m' 100))' "unable to fill order");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: o = new SellStop(sym' 100' 21.09m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: o = new SellStop(sym' 100' 21.09m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: o = new SellLimit(sym' 100' 21.19m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,FillThenStopAndLimitOversell,The following statement contains a magic number: o = new SellLimit(sym' 100' 21.19m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicStopAndLimit,The following statement contains a magic number: o = new BuyLimit(sym' 100' 21.18m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicStopAndLimit,The following statement contains a magic number: o = new BuyLimit(sym' 100' 21.18m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicStopAndLimit,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym'21.14m'100))'"unable to fill order");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicStopAndLimit,The following statement contains a magic number: Assert.IsTrue(o.Fill(TickImpl.NewTrade(sym'21.14m'100))'"unable to fill order");
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicStopAndLimit,The following statement contains a magic number: o = new SellStop(sym' 100' 21.09m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicStopAndLimit,The following statement contains a magic number: o = new SellStop(sym' 100' 21.09m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicStopAndLimit,The following statement contains a magic number: o = new SellLimit(sym' 100' 21.19m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicStopAndLimit,The following statement contains a magic number: o = new SellLimit(sym' 100' 21.19m' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicWithAccount,The following statement contains a magic number: sho.GotPosition(new PositionImpl(sym' 100' 300'0'ACCT));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicWithAccount,The following statement contains a magic number: sho.GotPosition(new PositionImpl(sym' 100' 300'0'ACCT));
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicWithAccount,The following statement contains a magic number: o = new SellLimit(sym' 100' 200' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicWithAccount,The following statement contains a magic number: o = new SellLimit(sym' 100' 200' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicWithAccount,The following statement contains a magic number: o = new SellLimit(sym' 200' 105' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicWithAccount,The following statement contains a magic number: o = new SellLimit(sym' 200' 105' id++);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicWithAccount,The following statement contains a magic number: o = new SellStop(sym' 300' 99);
Magic Number,TestTradeLink,TestREGSHOTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestREGSHOTracker.cs,BasicWithAccount,The following statement contains a magic number: o = new SellStop(sym' 300' 99);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitWithPartialFillRoundMinsize100,The following statement contains a magic number: ost.MinLotSize = 100;
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitWithPartialFillRoundMinsize100,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 58));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitWithPartialFillRoundMinsize100,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 58));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitWithPartialFillRoundMinsize100,The following statement contains a magic number: Order o = new SellMarket("TST"' 100);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitWithPartialFillRoundMinsize100,The following statement contains a magic number: Assert.AreEqual(-100' lasto.size);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestNormalEntry,The following statement contains a magic number: ost.sendorder(new SellMarket("TST"' 500));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestNormalEntry,The following statement contains a magic number: Assert.AreEqual(-500' lasto.size);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestNormalExit,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"'100'500));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestNormalExit,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"'100'500));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestNormalExit,The following statement contains a magic number: ost.sendorder(new SellMarket("TST"' 500));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestNormalExit,The following statement contains a magic number: Assert.AreEqual(-500' lasto.size);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Order o = new SellMarket("TST"' 500);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: o.id = 5;
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(2' oc);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(-200' lasto.size);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: ost.sendcancel(5);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(2' cancels.Count);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(5' cancels[0]);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreNotEqual(5' cancels[1]);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: o = new SellMarket("TST"' 500);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: o.id = 10;
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(4' oc);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(-200' lasto.size);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(2' cancels.Count);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: ost.sendcancel(10);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(4' cancels.Count);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(10' cancels[2]);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreEqual(10' cancels[2]);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreNotEqual(10' cancels[3]);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,SplitCancelCopy,The following statement contains a magic number: Assert.AreNotEqual(10' cancels[3]);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverSellDrop,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverSellDrop,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverSellDrop,The following statement contains a magic number: ost.sendorder(new SellMarket("TST"' 500));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverSellDrop,The following statement contains a magic number: Assert.AreEqual(-300' lasto.size);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverCoverDrop,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' -300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverCoverDrop,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' -300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverCoverDrop,The following statement contains a magic number: ost.sendorder(new BuyMarket("TST"' 500));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverCoverDrop,The following statement contains a magic number: Assert.AreEqual(300' lasto.size);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverSellAdjust,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverSellAdjust,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' 300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverSellAdjust,The following statement contains a magic number: ost.sendorder(new SellMarket("TST"' 500));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverSellAdjust,The following statement contains a magic number: Assert.AreEqual(2' oc);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverSellAdjust,The following statement contains a magic number: Assert.AreEqual(-200' lasto.size);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverBuyAdjust,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' -300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverBuyAdjust,The following statement contains a magic number: ost.GotPosition(new PositionImpl("TST"' 100' -300));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverBuyAdjust,The following statement contains a magic number: ost.sendorder(new BuyMarket("TST"' 500));
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverBuyAdjust,The following statement contains a magic number: Assert.AreEqual(2' oc);
Magic Number,TestTradeLink,TestOverSell,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOversell.cs,TestOverBuyAdjust,The following statement contains a magic number: Assert.AreEqual(200' lasto.size);
Magic Number,TestTradeLink,TestIndication,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIndicationHaltResume.cs,SerializeDeserilize,The following statement contains a magic number: const int t = 092500;
Magic Number,TestTradeLink,TestIndication,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIndicationHaltResume.cs,SerializeDeserilize,The following statement contains a magic number: const decimal h = 128.08m;
Magic Number,TestTradeLink,TestIndication,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIndicationHaltResume.cs,SerializeDeserilize,The following statement contains a magic number: const decimal l = 126.25m;
Magic Number,TestTradeLink,TestHaltResume,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIndicationHaltResume.cs,SerializeDeserilize,The following statement contains a magic number: const int t = 092500;
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,MultipleMessages,The following statement contains a magic number: Tick k2 = TickImpl.NewTrade(sym' p*2' size*2);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,MultipleMessages,The following statement contains a magic number: Tick k2 = TickImpl.NewTrade(sym' p*2' size*2);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,MultipleMessages,The following statement contains a magic number: Tick k3 = TickImpl.NewTrade(sym' p*3' size*3);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,MultipleMessages,The following statement contains a magic number: Tick k3 = TickImpl.NewTrade(sym' p*3' size*3);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,MultipleMessages,The following statement contains a magic number: Assert.AreEqual(3' msgs.Length);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,MultipleMessages,The following statement contains a magic number: Assert.AreEqual(MessageTypes.TICKNOTIFY' msgs[2].Type);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,MultipleMessages,The following statement contains a magic number: Tick c3 = TickImpl.Deserialize(msgs[2].Content);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,PartialMessage,The following statement contains a magic number: Tick k2 = TickImpl.NewTrade(sym' p * 2' size * 2);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,PartialMessage,The following statement contains a magic number: Tick k2 = TickImpl.NewTrade(sym' p * 2' size * 2);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,PartialMessage,The following statement contains a magic number: Tick k3 = TickImpl.NewTrade(sym' p * 3' size * 3);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,PartialMessage,The following statement contains a magic number: Tick k3 = TickImpl.NewTrade(sym' p * 3' size * 3);
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,PartialMessage,The following statement contains a magic number: const int PARTIALSIZE = 8;
Magic Number,TestTradeLink,TestMessage,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMessage.cs,PartialMessage,The following statement contains a magic number: Assert.AreEqual(2' msgs.Length);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawSingle,The following statement contains a magic number: Assert.Greater(tickcount' 40000);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformance,The following statement contains a magic number: rawbase("raw performance multi"'3'h);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformance,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformance,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformance,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformance,The following statement contains a magic number: Assert.AreEqual(20080318155843' lasttime);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,rawbase,The following statement contains a magic number: EXPECTRAW *= 2.5;
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,rawbase,The following statement contains a magic number: Assert.Less((tickcount - h.TicksPresent) / h.TicksPresent' .01);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: rawbase("raw performance multi w/load"' 3' h);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(20080318155843' lasttime);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(20080318155843' lasttime);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,bw_DoWork,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,bw_DoWork,The following statement contains a magic number: loadcount % 1000 == 0
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,ExecutionPerformance,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,ExecutionPerformance,The following statement contains a magic number: EXPECTEX *= 2.5;
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,execute_GotTick,The following statement contains a magic number: bool side = fillcount % 2 == 0;
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,execute_GotTick,The following statement contains a magic number: SimBroker.SendOrderStatus(new MarketOrder(t.symbol' side' 100));
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,execute_GotTick,The following statement contains a magic number: tickcount % 50 == 0
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,BarPerformance,The following statement contains a magic number: EXPECTBARS *= 2.5;
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,BarPerformance,The following statement contains a magic number: Assert.GreaterOrEqual(tickcount' 50000);
Magic Number,TestTradeLink,TestMulti,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestMultiSim.cs,BarPerformance,The following statement contains a magic number: Assert.AreEqual(3' bt.SymbolCount);
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestTradeFill,The following statement contains a magic number: ptt.sendorder(new BuyMarket(SYM' 1000));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestTradeFill,The following statement contains a magic number: ptt.newTick(TickImpl.NewTrade(SYM' 10' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestTradeFill,The following statement contains a magic number: ptt.newTick(TickImpl.NewTrade(SYM' 10' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestTradeFill,The following statement contains a magic number: Assert.AreEqual(100' pt[SYM].Size);
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.sendorder(new BuyMarket(SYM' 1000));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewTrade(SYM' 10' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewTrade(SYM' 10' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewBid(SYM' 10' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewBid(SYM' 10' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: Assert.AreEqual(100' pt[SYM].Size);
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: Assert.AreEqual(10' fills);
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: Assert.AreEqual(1000' pt[SYM].Size);
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: ptt.newTick(TickImpl.NewAsk(SYM' 12' 100));
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: Assert.AreEqual(10' fills);
Magic Number,TestTradeLink,TestPapertradeTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPapertradeTracker.cs,TestBidAsk,The following statement contains a magic number: Assert.AreEqual(1000' pt[SYM].Size);
Magic Number,TestTradeLink,TestAsyncResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestAsyncResponse.cs,TickTest,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,TestTradeLink,TestAsyncResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestAsyncResponse.cs,TickTest,The following statement contains a magic number: waits++ % 50 == 0
Magic Number,TestTradeLink,TestAsyncResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestAsyncResponse.cs,TickTest,The following statement contains a magic number: (waits * 10) > sent.Length
Magic Number,TestTradeLink,TestAsyncResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestAsyncResponse.cs,ImbalanceTest,The following statement contains a magic number: sent.Add(new ImbalanceImpl(SYM' "NYSE"' r.Next(-1000000' 1000000)' i' 0' 0' 0));
Magic Number,TestTradeLink,TestAsyncResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestAsyncResponse.cs,ImbalanceTest,The following statement contains a magic number: sent.Add(new ImbalanceImpl(SYM' "NYSE"' r.Next(-1000000' 1000000)' i' 0' 0' 0));
Magic Number,TestTradeLink,TestAsyncResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestAsyncResponse.cs,ImbalanceTest,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,TestTradeLink,TestAsyncResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestAsyncResponse.cs,ImbalanceTest,The following statement contains a magic number: (waits++ % 50) == 0
Magic Number,TestTradeLink,TestAsyncResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestAsyncResponse.cs,ImbalanceTest,The following statement contains a magic number: (waits * 10) > sent.Count
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,Construction,The following statement contains a magic number: Assert.That(b.Volume == 200);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,Construction,The following statement contains a magic number: b.newTick(TickImpl.NewQuote(sym'd't'10m'11m'1'1'x'x));
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,Construction,The following statement contains a magic number: b.newTick(TickImpl.NewQuote(sym'd't'10m'11m'1'1'x'x));
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,Construction,The following statement contains a magic number: Assert.That(b.TradeCount == 2);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarIntervals,The following statement contains a magic number: Assert.AreEqual(5' accepts);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarIntervals,The following statement contains a magic number: Assert.AreEqual(9' accepts);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarIntervals,The following statement contains a magic number: Assert.AreEqual(2'accepts);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: Bar b = new BarImpl(1' 1' 1' 1' 1' 20100302' 93533' "IBM"' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: Bar b = new BarImpl(1' 1' 1' 1' 1' 20100302' 93533' "IBM"' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: Assert.AreEqual(93500' b.Bartime);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: Assert.AreEqual(93533' b.time);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: b = new BarImpl(1' 1' 1' 1' 1' 20100302' 93533' "IBM"' (int)BarInterval.Hour);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: b = new BarImpl(1' 1' 1' 1' 1' 20100302' 93533' "IBM"' (int)BarInterval.Hour);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: Assert.AreEqual(90000' b.Bartime);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: Assert.AreEqual(93533' b.time);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: b = new BarImpl(1' 1' 1' 1' 1' 20100302' 95504' "IBM"' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: b = new BarImpl(1' 1' 1' 1' 1' 20100302' 95504' "IBM"' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: Assert.AreEqual(95500' b.Bartime);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarTime,The following statement contains a magic number: Assert.AreEqual(95504' b.time);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,SerializeDeseralize,The following statement contains a magic number: Bar b = new BarImpl(1' 1' 1' 1' 1' 20100302' 93533' "IBM"' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,SerializeDeseralize,The following statement contains a magic number: Bar b = new BarImpl(1' 1' 1' 1' 1' 20100302' 93533' "IBM"' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarsBack,The following statement contains a magic number: DateTime past = BarImpl.DateFromBarsBack(5' BarInterval.FiveMin' present);
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarsBack,The following statement contains a magic number: Assert.AreEqual(20100103' Util.ToTLDate(past));
Magic Number,TestTradeLink,TestBar,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBar.cs,BarsBack,The following statement contains a magic number: Assert.AreEqual(143500' Util.ToTLTime(past));
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,ReadAndOverwrite,The following statement contains a magic number: Assert                  .IsTrue(BarListImpl.ChartSave(bl' Environment.CurrentDirectory' 20070926)' "error saving new data");
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,FiveMin,The following statement contains a magic number: Assert.AreEqual(3'newbars);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,PointFiveMin,The following statement contains a magic number: Assert.AreEqual(3' bl.Count);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,OneMinute,The following statement contains a magic number: Assert.AreEqual(9' newbars);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,PointMinute,The following statement contains a magic number: Assert.AreEqual(9' newbars);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: const int d = 20070517;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: const int t = 93500;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,SampleData,The following statement contains a magic number: Tick[] tape = new Tick[] {                   TickImpl.NewTrade(sym'd't'10'100'x)' // new on all intervals                  TickImpl.NewTrade(sym'd't+100'10'100'x)' // new on 1min                  TickImpl.NewTrade(sym'd't+200'10'100'x)'                  TickImpl.NewTrade(sym'd't+300'10'100'x)'                  TickImpl.NewTrade(sym'd't+400'15'100'x)'                   TickImpl.NewTrade(sym'd't+500'16'100'x)' //new on 5min                  TickImpl.NewTrade(sym'd't+600'16'100'x)'                  TickImpl.NewTrade(sym'd't+700'10'100'x)'                   TickImpl.NewTrade(sym'd't+710'10'100'x)'                   TickImpl.NewTrade(sym'd't+10000'10'100'x)' // new on hour interval              };
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,BarMath,The following statement contains a magic number: Assert.AreEqual(16' Calc.HH(bl));
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,BarMath,The following statement contains a magic number: Assert.AreEqual(10' Calc.LL(bl));
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,BarMath,The following statement contains a magic number: Assert.AreEqual(11.888888888888888888888888889m' Calc.Avg(bl.Open()));
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,HourTest,The following statement contains a magic number: Assert.AreEqual(2' newbars);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,PointHour,The following statement contains a magic number: Assert.AreEqual(2' bl.Count);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,DefaultIntervalAndReset,The following statement contains a magic number: Assert.AreEqual(2' bl.Count);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,DefaultIntervalAndReset,The following statement contains a magic number: Assert.AreEqual(3' bl.Count);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_NoexistingBars,The following statement contains a magic number: int d = 20070926;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_NoexistingBars,The following statement contains a magic number: Bar insert = new BarImpl(30'30'30'30'10000'd'75500'sym'(int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_NoexistingBars,The following statement contains a magic number: Bar insert = new BarImpl(30'30'30'30'10000'd'75500'sym'(int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_NoexistingBars,The following statement contains a magic number: Bar insert = new BarImpl(30'30'30'30'10000'd'75500'sym'(int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_NoexistingBars,The following statement contains a magic number: Bar insert = new BarImpl(30'30'30'30'10000'd'75500'sym'(int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_NoexistingBars,The following statement contains a magic number: Bar insert = new BarImpl(30'30'30'30'10000'd'75500'sym'(int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_NoexistingBars,The following statement contains a magic number: Bar insert = new BarImpl(30'30'30'30'10000'd'75500'sym'(int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: int d = 20070926;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: int h = 7;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: int m = 55;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: int t = h*10000+m*100;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: int t = h*10000+m*100;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: Bar insert = new BarImpl(30' 30' 30' 30' 10000' d' t' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: Bar insert = new BarImpl(30' 30' 30' 30' 10000' d' t' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: Bar insert = new BarImpl(30' 30' 30' 30' 10000' d' t' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: Bar insert = new BarImpl(30' 30' 30' 30' 10000' d' t' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: Bar insert = new BarImpl(30' 30' 30' 30' 10000' d' t' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: m += 5;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: h += m / 60;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: m = m % 60;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: m >= 60
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: i < 10
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_MultipleInsert,The following statement contains a magic number: Assert.AreEqual(orgcount+10' org.Count' "total element count after insertion");
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalBarsPresent,The following statement contains a magic number: int d = 20070926;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalPlusNewBarsPresent,The following statement contains a magic number: int d = 20070926;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalPlusNewBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalPlusNewBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalPlusNewBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalPlusNewBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalPlusNewBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,InsertBar_HistoricalPlusNewBarsPresent,The following statement contains a magic number: var insert = new BarImpl(30' 30' 30' 30' 10000' d' 75500' sym' (int)BarInterval.FiveMin);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NewBarEvent,The following statement contains a magic number: Assert.AreEqual(2' newbars);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,FromEPF,The following statement contains a magic number: Assert.AreEqual(83' bl.Count);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,FromTIK,The following statement contains a magic number: Assert.Greater(bl.Count'82'"not enough bars from: "+tf);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,FromGoogle,The following statement contains a magic number: Assert.GreaterOrEqual(bl.Count'199);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(83' bl.Count);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].High' bl[77].High);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].High' bl[77].High);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Open' bl[77].Open);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Open' bl[77].Open);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Low' bl[77].Low);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Low' bl[77].Low);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Close' bl[77].Close);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Close' bl[77].Close);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Bardate' bl[77].Bardate);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Bardate' bl[77].Bardate);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Bartime' bl[77].Bartime);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,NegativeBars,The following statement contains a magic number: Assert.AreEqual(bl[-5].Bartime' bl[77].Bartime);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,CustomInterval,The following statement contains a magic number: const int MYINTERVAL = 5;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,CustomInterval,The following statement contains a magic number: Assert.AreEqual(10' bl.Count);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,TickInterval,The following statement contains a magic number: const int MYINTERVAL = 2;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,TickInterval,The following statement contains a magic number: Assert.AreEqual(5' bl.Count);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,VolInterval,The following statement contains a magic number: const int MYINTERVAL = 300;
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,VolInterval,The following statement contains a magic number: Assert.AreEqual(4' bl.Count);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,AsyncFromGoogle,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TestTradeLink,TestBarList,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarList.cs,AsyncFromGoogle,The following statement contains a magic number: Assert.GreaterOrEqual(blt.Count' 199);
Magic Number,TestTradeLink,TestBarListTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarListTracker.cs,DefaultInt,The following statement contains a magic number: Assert.AreEqual(2' syms.Count);
Magic Number,TestTradeLink,TestBarListTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarListTracker.cs,DefaultInt,The following statement contains a magic number: Assert.AreEqual(9' blt["TST"].IntervalCount(BarInterval.Minute));
Magic Number,TestTradeLink,TestBarListTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarListTracker.cs,DefaultInt,The following statement contains a magic number: Assert.AreEqual(3' blt["TST"].IntervalCount(BarInterval.FiveMin));
Magic Number,TestTradeLink,TestBarListTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarListTracker.cs,TickInt,The following statement contains a magic number: BarListTracker blt = new BarListTracker(new[] { 3 }' new BarInterval[] { BarInterval.CustomTicks });
Magic Number,TestTradeLink,TestBarListTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBarListTracker.cs,TickInt,The following statement contains a magic number: Assert.AreEqual(4'blt[tape[0].symbol].Count);
Magic Number,TestTradeLink,TestGenericTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGenericTracker.cs,Basics,The following statement contains a magic number: Assert.AreEqual(4' newtxt);
Magic Number,TestTradeLink,TestGenericTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGenericTracker.cs,Basics,The following statement contains a magic number: Assert.AreEqual("GOOG"' gt.getlabel(3));
Magic Number,TestTradeLink,TestGenericTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGenericTracker.cs,Importing,The following statement contains a magic number: Assert.AreEqual(4' sym.Count);
Magic Number,TestTradeLink,TestGenericTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGenericTracker.cs,Importing,The following statement contains a magic number: Assert.AreEqual(4' price1.Count);
Magic Number,TestTradeLink,TestGenericTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGenericTracker.cs,Importing,The following statement contains a magic number: Assert.IsTrue(GenericTracker.CSVCOL2Generic<decimal>(FILE' ref price2' 3));
Magic Number,TestTradeLink,TestGenericTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGenericTracker.cs,Importing,The following statement contains a magic number: Assert.IsTrue(GenericTracker.CSVCOL2Generic<bool>(FILE' ref special' 4));
Magic Number,TestTradeLink,TestGenericTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGenericTracker.cs,Importing,The following statement contains a magic number: Assert.AreEqual(10' price1["IBM"]);
Magic Number,TestTradeLink,TestGenericTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGenericTracker.cs,Importing,The following statement contains a magic number: Assert.AreEqual(20' price2["IBM"]);
Magic Number,TestTradeLink,TestGZip,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGZip.cs,CompressDecompress,The following statement contains a magic number: int parts = r.Next(100' 300);
Magic Number,TestTradeLink,TestGZip,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGZip.cs,CompressDecompress,The following statement contains a magic number: int parts = r.Next(100' 300);
Magic Number,TestTradeLink,TestGZip,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGZip.cs,CompressDecompress,The following statement contains a magic number: int reps = r.Next(5' 50);
Magic Number,TestTradeLink,TestGZip,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGZip.cs,CompressDecompress,The following statement contains a magic number: int reps = r.Next(5' 50);
Magic Number,TestTradeLink,TestGZip,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGZip.cs,CompressDecompress,The following statement contains a magic number: char c = (char)(r.Next(1' 26) + 64);
Magic Number,TestTradeLink,TestGZip,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestGZip.cs,CompressDecompress,The following statement contains a magic number: char c = (char)(r.Next(1' 26) + 64);
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,VirtualIds,The following statement contains a magic number: const int BOX1ID = 22;
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,VirtualIds,The following statement contains a magic number: const int BOX2ID = 23;
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,VirtualIds,The following statement contains a magic number: const int ATTEMPTS = 1000;
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,NamedIds,The following statement contains a magic number: var entry = new MarketOrder(sym' 100' idt[id1]);
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,NamedIds,The following statement contains a magic number: var lmt = new LimitOrder(sym' 100' 11' idt[id2]);
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,NamedIds,The following statement contains a magic number: var lmt = new LimitOrder(sym' 100' 11' idt[id2]);
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,NamedIds,The following statement contains a magic number: var exit = new StopOrder(sym' 100' 9' idt[id3]);
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,NamedIds,The following statement contains a magic number: var exit = new StopOrder(sym' 100' 9' idt[id3]);
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,SymbolNamedIds,The following statement contains a magic number: var entry = new MarketOrder(sym' 100' idt[sym'id1]);
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,SymbolNamedIds,The following statement contains a magic number: var entry2 = new MarketOrder(sym' 100' idt[sym2' id1]);
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,SymbolNamedIds,The following statement contains a magic number: Assert.AreEqual(IdTracker.UNKNOWN_IDNAME' idt.getidname(2));
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,MaxNamedAssigns,The following statement contains a magic number: var entry = new MarketOrder(sym' 100' idt[sym' id1]);
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,MaxNamedAssigns,The following statement contains a magic number: idt.MaxNamedAssigns = 2;
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,MaxNamedAssigns,The following statement contains a magic number: Assert.AreEqual(2' idt.AssignCount(id1' sym)' "wrong assignment count 3");
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,MaxNamedAssigns,The following statement contains a magic number: Assert.AreEqual(2' idt.AssignCount(id1' sym)' "wrong assignment count 4");
Magic Number,TestTradeLink,TestIdTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestIdTracker.cs,MaxNamedAssigns,The following statement contains a magic number: Assert.AreEqual(2' idt.AssignCount(id1' sym)' "wrong assignment count 5");
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SerializeDeserilize,The following statement contains a magic number: const int x = 500000;
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SerializeDeserilize,The following statement contains a magic number: const int t = 1550;
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SerializeDeserilize,The following statement contains a magic number: const int p = 1540;
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SerializeDeserilize,The following statement contains a magic number: const int px = 400000;
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SerializeDeserilize,The following statement contains a magic number: Imbalance i = new ImbalanceImpl(s' e' x' t' px' p'999);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The following statement contains a magic number: string[] syms = TradeLink.Research.RandomSymbol.GetSymbols((int)DateTime.Now.Ticks' 4'count);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The following statement contains a magic number: imbs[j] = new ImbalanceImpl(syms[j]' "NYSE"' r.Next(-1000' 1000) * r.Next(1000)' 1550' r.Next(-1000' 1000) * r.Next(1000)' 1540' 0);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The following statement contains a magic number: imbs[j] = new ImbalanceImpl(syms[j]' "NYSE"' r.Next(-1000' 1000) * r.Next(1000)' 1550' r.Next(-1000' 1000) * r.Next(1000)' 1540' 0);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The following statement contains a magic number: imbs[j] = new ImbalanceImpl(syms[j]' "NYSE"' r.Next(-1000' 1000) * r.Next(1000)' 1550' r.Next(-1000' 1000) * r.Next(1000)' 1540' 0);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The following statement contains a magic number: imbs[j] = new ImbalanceImpl(syms[j]' "NYSE"' r.Next(-1000' 1000) * r.Next(1000)' 1550' r.Next(-1000' 1000) * r.Next(1000)' 1540' 0);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The following statement contains a magic number: imbs[j] = new ImbalanceImpl(syms[j]' "NYSE"' r.Next(-1000' 1000) * r.Next(1000)' 1550' r.Next(-1000' 1000) * r.Next(1000)' 1540' 0);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The following statement contains a magic number: imbs[j] = new ImbalanceImpl(syms[j]' "NYSE"' r.Next(-1000' 1000) * r.Next(1000)' 1550' r.Next(-1000' 1000) * r.Next(1000)' 1540' 0);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The following statement contains a magic number: imbs[j] = new ImbalanceImpl(syms[j]' "NYSE"' r.Next(-1000' 1000) * r.Next(1000)' 1550' r.Next(-1000' 1000) * r.Next(1000)' 1540' 0);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,SampleImbalanceData,The following statement contains a magic number: imbs[j] = new ImbalanceImpl(syms[j]' "NYSE"' r.Next(-1000' 1000) * r.Next(1000)' 1550' r.Next(-1000' 1000) * r.Next(1000)' 1540' 0);
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,Performance,The following statement contains a magic number: const int OPS = 10000;
Magic Number,TestTradeLink,TestImbalance,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestImbalance.cs,Performance,The following statement contains a magic number: Assert.LessOrEqual(time'.15);
Magic Number,TestTradeLink,TestLatencyTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestLatencyTracker.cs,Test,The following statement contains a magic number: Order o = new BuyMarket(sym' 2*size);
Magic Number,TestTradeLink,TestLatencyTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestLatencyTracker.cs,Test,The following statement contains a magic number: o.Fill(TickImpl.NewTrade(sym' 100' size));
Magic Number,TestTradeLink,TestLatencyTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestLatencyTracker.cs,Test,The following statement contains a magic number: System.Threading.Thread.Sleep(50);
Magic Number,TestTradeLink,TestOffsetInfo,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetInfo.cs,SerializeDeserialize,The following statement contains a magic number: OffsetInfo oi = new OffsetInfo(2' 1);
Magic Number,TestTradeLink,TestOffsetInfo,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetInfo.cs,SerializeDeserialize,The following statement contains a magic number: Assert.AreEqual(2'oi.ProfitDist);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: const decimal pdist = .03m;
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: fill(new TradeImpl(sym' 128.85m' -10));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: fill(new TradeImpl(sym' 128.85m' -10));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: Assert.AreEqual(-10' ot.PositionTracker[sym].Size);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: Assert.AreEqual(128.82m' profit.price);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: Assert.AreEqual(10' profit.size);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: Assert.IsTrue(profit.Fill(TickImpl.NewTrade(sym' 128.82m' 10)));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: Assert.IsTrue(profit.Fill(TickImpl.NewTrade(sym' 128.82m' 10)));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: ot.newTick(TickImpl.NewTrade(sym'128.82m'100));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: ot.newTick(TickImpl.NewTrade(sym'128.82m'100));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: fill(new TradeImpl(sym' 128.86m' -10));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: fill(new TradeImpl(sym' 128.86m' -10));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: Assert.AreEqual(-10' ot.PositionTracker[sym].Size);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: Assert.AreEqual(128.83m' profit.price);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ResendTest2,The following statement contains a magic number: Assert.AreEqual(10' profit.size);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,CustomOffsets,The following statement contains a magic number: ot[SYMB] = new OffsetInfo(POFFSET * 2' SOFFSET * 2' .5m' .5m'true'100);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,CustomOffsets,The following statement contains a magic number: ot[SYMB] = new OffsetInfo(POFFSET * 2' SOFFSET * 2' .5m' .5m'true'100);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,CustomOffsets,The following statement contains a magic number: ot[SYMB] = new OffsetInfo(POFFSET * 2' SOFFSET * 2' .5m' .5m'true'100);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,CustomOffsets,The following statement contains a magic number: ot[SYMB] = new OffsetInfo(POFFSET * 2' SOFFSET * 2' .5m' .5m'true'100);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,CustomOffsets,The following statement contains a magic number: ot[SYMB] = new OffsetInfo(POFFSET * 2' SOFFSET * 2' .5m' .5m'true'100);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,CustomOffsets,The following statement contains a magic number: Assert.AreEqual(ot.DefaultOffset.ProfitPercent/2' ot[SYMB].ProfitPercent);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,CustomOffsets,The following statement contains a magic number: Assert.AreEqual(ot.DefaultOffset.StopPercent/2' ot[SYMB].StopPercent);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,CustomOffsets,The following statement contains a magic number: Assert.AreEqual(ot.DefaultOffset.ProfitDist*2' ot[SYMB].ProfitDist);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,CustomOffsets,The following statement contains a magic number: Assert.AreEqual(ot.DefaultOffset.StopDist*2' ot[SYMB].StopDist);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfit,The following statement contains a magic number: ot.Adjust(new TradeImpl(SYM' PRICE+2' SIZE));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfit,The following statement contains a magic number: Assert.AreEqual(SIZE*2' profit.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfit,The following statement contains a magic number: Assert.AreEqual(SIZE*2' stop.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,NoResendPartial,The following statement contains a magic number: ot.Adjust(new TradeImpl(SYM' PRICE + 2' SIZE));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,NoResendPartial,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' profit.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,NoResendPartial,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' stop.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,HitAndResend,The following statement contains a magic number: ot.Adjust(new TradeImpl(SYM' PRICE + 2' -1 * SIZE));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,HitAndResend,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' profit.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,HitAndResend,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' stop.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,HitAndResend,The following statement contains a magic number: fill(new TradeImpl(SYM' PRICE + 1' SIZE * 2)'profit.id);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfitShort,The following statement contains a magic number: ot.Adjust(new TradeImpl(SYM' PRICE + 2' -1*SIZE));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfitShort,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' profit.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfitShort,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' stop.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfitShortFlat,The following statement contains a magic number: ot.Adjust(new TradeImpl(SYM' PRICE + 2' -1 * SIZE));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfitShortFlat,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' profit.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfitShortFlat,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' stop.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopAndProfitShortFlat,The following statement contains a magic number: fill(new TradeImpl(SYM' PRICE + 1' SIZE*2)'profit.id);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopOnly,The following statement contains a magic number: ot.Adjust(new TradeImpl(SYM' PRICE + 2' SIZE));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,StopOnly,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' stop.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ProfitOnly,The following statement contains a magic number: ot.Adjust(new TradeImpl(SYM' PRICE + 2' SIZE));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,ProfitOnly,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' profit.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,NoSimulataneous,The following statement contains a magic number: fill(new TradeImpl(SYM' PRICE + 2' SIZE));
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,NoSimulataneous,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' profit.UnsignedSize);
Magic Number,TestTradeLink,TestOffsetTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOffsetTracker.cs,NoSimulataneous,The following statement contains a magic number: Assert.AreEqual(SIZE * 2' stop.UnsignedSize);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,Adjust,The following statement contains a magic number: TradeImpl t1 = new TradeImpl(s' 100' 100);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,Adjust,The following statement contains a magic number: TradeImpl t1 = new TradeImpl(s' 100' 100);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,Adjust,The following statement contains a magic number: Assert.AreEqual(200' pt[t1.symbol].Size);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,NewPosition,The following statement contains a magic number: Position p = new PositionImpl(s'80'500);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,NewPosition,The following statement contains a magic number: Position p = new PositionImpl(s'80'500);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,NewPosition,The following statement contains a magic number: Assert.AreEqual(500' pt[s].Size);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,InitAndAdjust,The following statement contains a magic number: Trade fill = new TradeImpl(sym'100' 100);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,InitAndAdjust,The following statement contains a magic number: Trade fill = new TradeImpl(sym'100' 100);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,InitAndAdjust,The following statement contains a magic number: Assert.AreEqual(100' pt[sym].Size);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,InitAndAdjust,The following statement contains a magic number: Assert.AreEqual(100' pt2[sym].Size);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,BlankPositionReq,The following statement contains a magic number: int s = 100;
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,MultipleAccount,The following statement contains a magic number: int s1 = 300;
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,MultipleAccount,The following statement contains a magic number: int s2 = 500;
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,MultipleAccount,The following statement contains a magic number: decimal p = 100m;
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,MultipleAccount,The following statement contains a magic number: Assert.AreEqual(s1*2' pt[sym' a1].Size);
Magic Number,TestTradeLink,TestPositionTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPositionTracker.cs,MultipleAccount,The following statement contains a magic number: Assert.AreEqual(s2*2' pt[sym' a2].Size);
Magic Number,TestTradeLink,TestRandomSymbol,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestRandomSymbol.cs,Basics,The following statement contains a magic number: string [] syms = RandomSymbol.GetSymbols((int)DateTime.Now.Ticks' 4' 100);
Magic Number,TestTradeLink,TestRandomSymbol,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestRandomSymbol.cs,Basics,The following statement contains a magic number: string [] syms = RandomSymbol.GetSymbols((int)DateTime.Now.Ticks' 4' 100);
Magic Number,TestTradeLink,TestRandomTicks,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestRandomTicks.cs,Basics,The following statement contains a magic number: Tick[] ticks = RandomTicks.GenerateSymbol("TST"' 1000);
Magic Number,TestTradeLink,TestResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResponse.cs,AlwaysEnter,The following statement contains a magic number: Assert.That(b.MinSize == 100);
Magic Number,TestTradeLink,TestResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResponse.cs,AlwaysEnter,The following statement contains a magic number: Assert.AreEqual(4' good);
Magic Number,TestTradeLink,TestResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResponse.cs,AlwaysEnter,The following statement contains a magic number: Assert.AreEqual(4' debugs);
Magic Number,TestTradeLink,TestResponse,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestResponse.cs,NewsTest,The following statement contains a magic number: Assert.AreEqual(4' good);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Setup,The following statement contains a magic number: lc = new TradeImpl(stock' last' lsize / -2);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,OpenPL,The following statement contains a magic number: decimal pl = .98m;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ClosePL,The following statement contains a magic number: decimal pl = .98m;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ClosePL,The following statement contains a magic number: Assert.AreEqual(pl*(lsize/2)'Calc.ClosePL(lp' lc));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: TradeImpl t = new TradeImpl(sym'10'100);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: TradeImpl t = new TradeImpl(sym'10'100);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: t = new TradeImpl(sym' 11' -100);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: t = new TradeImpl(sym' 11' -100);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: t = new TradeImpl(sym' 11' -100);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: t = new TradeImpl(sym' 11' -100);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: t = new TradeImpl(sym' 13' 100);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: t = new TradeImpl(sym' 13' 100);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: Assert.AreEqual(-300'maxdd);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: Assert.AreEqual(-.18m'Math.Round(maxddp'2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,MaxDD,The following statement contains a magic number: Assert.AreEqual(-.18m'Math.Round(maxddp'2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(15'Calc.Sum(a1' 2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(15'Calc.Sum(a1' 2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(16' Calc.Sum(a1));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(45' Calc.Sum(a1' 1' 3));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(45' Calc.Sum(a1' 1' 3));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(15.7m' Calc.Sum(a2' 2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(15.7m' Calc.Sum(a2' 2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(17.6' Calc.Sum(a2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(45.4' Calc.Sum(a2' 1' 3));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,Sums,The following statement contains a magic number: Assert.AreEqual(45.4' Calc.Sum(a2' 1' 3));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(113' Calc.SumSquares(a1' 2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(113' Calc.SumSquares(a1' 2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(3842' Calc.SumSquares(a1));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(1193' Calc.SumSquares(a1' 1' 3));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(1193' Calc.SumSquares(a1' 1' 3));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: decimal[] a2 = new decimal[] { 6.5m' 10.3m' 33.1m' 2' -50' 7.7m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(123.29m' Calc.SumSquares(a2' 2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(123.29m' Calc.SumSquares(a2' 2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(3871.24m' Calc.SumSquares(a2));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(1205.7m' Calc.SumSquares(a2' 1' 3));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,SumSquares,The following statement contains a magic number: Assert.AreEqual(1205.7m' Calc.SumSquares(a2' 1' 3));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: Assert.AreEqual(2.2857142857142857142857142857m' Calc.Avg(a1));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: Assert.AreEqual(2.5185714285714285714285714286m' Calc.Avg(b1));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: Assert.AreEqual(23.315931314473m' Calc.StdDev(a1));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: Assert.AreEqual(23.3946162479267m' Calc.StdDev(b1));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: Assert.AreEqual(25.1840788564133m' Calc.StdDevSam(a1));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,AvgAndStd,The following statement contains a magic number: Assert.AreEqual(25.2690694320904m' Calc.StdDevSam(b1));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a2 = new int[] { 4'0'-3'-2'0'3'2};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a2 = new int[] { 4'0'-3'-2'0'3'2};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a2 = new int[] { 4'0'-3'-2'0'3'2};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a2 = new int[] { 4'0'-3'-2'0'3'2};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: int[] a2 = new int[] { 4'0'-3'-2'0'3'2};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(20' Calc.Sum(Calc.Add(a1' a2)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(12' Calc.Sum(Calc.Subtract(a1' a2)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(-42' Calc.Sum(Calc.Product(a1'a2)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(-4.16666666666666666666666'Calc.Sum(Calc.Divide(a1'a2)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b2 = new decimal[] { 4.1m'0'-3'-2'0'3'2.7m};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b2 = new decimal[] { 4.1m'0'-3'-2'0'3'2.7m};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b2 = new decimal[] { 4.1m'0'-3'-2'0'3'2.7m};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b2 = new decimal[] { 4.1m'0'-3'-2'0'3'2.7m};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: decimal [] b2 = new decimal[] { 4.1m'0'-3'-2'0'3'2.7m};
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(2243' Math.Round(Calc.Sum(Calc.Add(b1' b2))*100));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(2243' Math.Round(Calc.Sum(Calc.Add(b1' b2))*100));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(1283' Math.Round(Calc.Sum(Calc.Subtract(b1' b2))*100));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(1283' Math.Round(Calc.Sum(Calc.Subtract(b1' b2))*100));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(-3625' Math.Round(Calc.Sum(Calc.Product(b1' b2)) * 100));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(-3625' Math.Round(Calc.Sum(Calc.Product(b1' b2)) * 100));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(-557'Math.Round(Calc.Sum(Calc.Divide(b1'b2))*100));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayArrayMath,The following statement contains a magic number: Assert.AreEqual(-557'Math.Round(Calc.Sum(Calc.Divide(b1'b2))*100));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(51' Calc.Sum(Calc.Add(a1' 5)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(51' Calc.Sum(Calc.Add(a1' 5)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(-19' Calc.Sum(Calc.Subtract(a1' 5)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(-19' Calc.Sum(Calc.Subtract(a1' 5)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(80' Calc.Sum(Calc.Product(a1' 5)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(80' Calc.Sum(Calc.Product(a1' 5)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(3.2m' Calc.Sum(Calc.Divide(a1' 5)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(3.2m' Calc.Sum(Calc.Divide(a1' 5)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(56.13m' Calc.Sum(Calc.Add(b1' 5.5m)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(56.13m' Calc.Sum(Calc.Add(b1' 5.5m)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(-20.87m' Calc.Sum(Calc.Subtract(b1' 5.5m)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(-20.87m' Calc.Sum(Calc.Subtract(b1' 5.5m)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(96.965m' Calc.Sum(Calc.Product(b1' 5.5m)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(96.965m' Calc.Sum(Calc.Product(b1' 5.5m)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(3.2054545454545454545454545454m' Calc.Sum(Calc.Divide(b1' 5.5m)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArrayScalarMath,The following statement contains a magic number: Assert.AreEqual(3.2054545454545454545454545454m' Calc.Sum(Calc.Divide(b1' 5.5m)));
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: int[] a1 = new int[] { 6' 10' 33' 2' -50' 7' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: decimal[] b1 = new decimal[] { 6.4m' 10.1m' 33.33m' 2.7m' -50' 7.1m' 8 };
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: const int len = 5;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,ArraySlices,The following statement contains a magic number: decimal[] b3 = Calc.EndSlice(b1' 200);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,DecimalPerformance,The following statement contains a magic number: const int SIZE = 250;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,DecimalPerformance,The following statement contains a magic number: const int REPS = 250;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,DecimalPerformance,The following statement contains a magic number: double EXPECT = .5;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,DecimalPerformance,The following statement contains a magic number: EXPECT = .8;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,IntPerformance,The following statement contains a magic number: const int SIZE = 500;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,IntPerformance,The following statement contains a magic number: const int REPS = 500;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,IntPerformance,The following statement contains a magic number: const double EXPECT = .25;
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,init,The following statement contains a magic number: a[i] = r.Next(0'1000);
Magic Number,TestTradeLink,TestCalc,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestCalc.cs,init,The following statement contains a magic number: a[i] = (decimal)r.NextDouble()*1000;
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: o = new BuyMarket(s' 100);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: Assert.That(broker.Execute(TickImpl.NewTrade(s'10'200)) == 1);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: Assert.That(broker.Execute(TickImpl.NewTrade(s'10'200)) == 1);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: o = new BuyLimit(s' 100' 9);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: o = new BuyLimit(s' 100' 9);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: Assert.AreEqual(0' broker.Execute(TickImpl.NewTrade(s' 10' 100)));
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: Assert.AreEqual(0' broker.Execute(TickImpl.NewTrade(s' 10' 100)));
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: Assert.AreEqual(1' broker.Execute(TickImpl.NewTrade(s' 8' 100)));
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: Assert.AreEqual(1' broker.Execute(TickImpl.NewTrade(s' 8' 100)));
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: Assert.That(fills == 2);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: o = new SellLimit(s' 100' 11);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: o = new SellLimit(s' 100' 11);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: x = new BuyMarket(s' 100);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: Assert.AreEqual(3' fills);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: o = new SellMarket(s' 100);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,Basics,The following statement contains a magic number: Assert.AreEqual(3' fills);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,BBO,The following statement contains a magic number: const decimal p1 = 10m;
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,BBO,The following statement contains a magic number: const decimal p2 = 11m;
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,BBO,The following statement contains a magic number: const int x = 100;
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,BBO,The following statement contains a magic number: o = new BuyLimit(s' x' p2'2);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,BBO,The following statement contains a magic number: Assert.AreEqual(x*2' bid.size);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,BBO,The following statement contains a magic number: broker.CancelOrder(2);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,MultiAccount,The following statement contains a magic number: const int od = 20070926;
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,MultiAccount,The following statement contains a magic number: const int ot = 95400;
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,MultiAccount,The following statement contains a magic number: OrderImpl oa = new BuyMarket(sym'100);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,MultiAccount,The following statement contains a magic number: OrderImpl ob = new BuyMarket(sym' 100);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,MultiAccount,The following statement contains a magic number: t.trade = 100m;
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,MultiAccount,The following statement contains a magic number: t.size = 200;
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,MultiAccount,The following statement contains a magic number: Assert.AreEqual(2'broker.Execute(t));
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,MultiAccount,The following statement contains a magic number: Assert.AreEqual(100'apos.Size);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,MultiAccount,The following statement contains a magic number: Assert.AreEqual(100'bpos.Size);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: OrderImpl opg = new BuyOPG(s' 200' 10);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: OrderImpl opg = new BuyOPG(s' 200' 10);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: TickImpl it = TickImpl.NewTrade(s' 9' 100);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: TickImpl it = TickImpl.NewTrade(s' 9' 100);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: TickImpl nt = TickImpl.NewTrade(s' 9' 10000);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: TickImpl nt = TickImpl.NewTrade(s' 9' 10000);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: TickImpl next = TickImpl.NewTrade(s' 9' 2000);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: TickImpl next = TickImpl.NewTrade(s' 9' 2000);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: OrderImpl late = new BuyOPG(s' 200' 10);
Magic Number,TestTradeLink,TestBroker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBroker.cs,OPGs,The following statement contains a magic number: OrderImpl late = new BuyOPG(s' 200' 10);
Magic Number,TestTradeLink,TesteSigTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TesteSigTick.cs,Hours,The following statement contains a magic number: Assert.AreEqual(20070926041502' k.datetime);
Magic Number,TestTradeLink,TesteSigTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TesteSigTick.cs,Hours,The following statement contains a magic number: Assert.AreEqual(20070926' k.date);
Magic Number,TestTradeLink,TesteSigTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TesteSigTick.cs,Hours,The following statement contains a magic number: Assert.AreEqual(041502' k.time);
Magic Number,TestTradeLink,TesteSigTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TesteSigTick.cs,Hours,The following statement contains a magic number: Assert.AreEqual(43.81m' k.bid);
Magic Number,TestTradeLink,TesteSigTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TesteSigTick.cs,Hours,The following statement contains a magic number: Assert.AreEqual(51.2m' k.ask);
Magic Number,TestTradeLink,TesteSigTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TesteSigTick.cs,Hours,The following statement contains a magic number: Assert.AreEqual(4'bl.Count);
Magic Number,TestTradeLink,TestBasket,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBasket.cs,SymbolTrimming,The following statement contains a magic number: Assert.AreEqual(5' r.Length'string.Join("."'r));
Magic Number,TestTradeLink,TestBasket,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBasket.cs,BasketBasics,The following statement contains a magic number: Assert.That(newbasket.Count==3);
Magic Number,TestTradeLink,TestBasket,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBasket.cs,Multiple,The following statement contains a magic number: Assert.That(mb.Count == 3'mb.Count.ToString());
Magic Number,TestTradeLink,TestBasket,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBasket.cs,Multiple,The following statement contains a magic number: Assert.AreEqual(2' cb.Count);
Magic Number,TestTradeLink,TestBasket,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBasket.cs,Multiple,The following statement contains a magic number: Assert.AreEqual(2' cb.Count);
Magic Number,TestTradeLink,TestBasket,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBasket.cs,Enumeration,The following statement contains a magic number: string[] l = new string[4];
Magic Number,TestTradeLink,TestBasket,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestBasket.cs,Enumeration,The following statement contains a magic number: Assert.AreEqual(4' i);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAskPartial,The following statement contains a magic number: Order o = new MarketOrder("IBM"' side' 1000);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAskPartial,The following statement contains a magic number: Tick k = TickImpl.NewQuote("IBM"' 100' 101' 400' 400' ""' "");
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAskPartial,The following statement contains a magic number: Tick k = TickImpl.NewQuote("IBM"' 100' 101' 400' 400' ""' "");
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAskPartial,The following statement contains a magic number: Tick k = TickImpl.NewQuote("IBM"' 100' 101' 400' 400' ""' "");
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAskPartial,The following statement contains a magic number: Tick k = TickImpl.NewQuote("IBM"' 100' 101' 400' 400' ""' "");
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,MarketOrder,The following statement contains a magic number: OrderImpl o = new OrderImpl(s'100);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: OrderImpl o = new BuyMarket(s' 100);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewBid(s' 8' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewBid(s' 8' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(o.Fill(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: Assert.That(!o.Fill(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyMarket(s' 100);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyLimit(s' 100' 10);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyLimit(s' 100' 10);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: x = new BuyMarket(s' 100);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: x = new SellMarket(s'100);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: x = new SellMarket(s' 100);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: x = new SellLimit(s' 100' 11);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: x = new SellLimit(s' 100' 11);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyLimit(s' 100' 10);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new BuyLimit(s' 100' 10);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: x = new SellLimit(s' 100' 10);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: x = new SellLimit(s' 100' 10);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellStop(s' 100' 10);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: o = new SellStop(s' 100' 10);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,Fill,The following statement contains a magic number: x = new BuyMarket(s' 100);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: OrderImpl o = new BuyMarket(s' 100);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewAsk(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewAsk(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewBid(s' 8' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewBid(s' 8' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new BuyLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new BuyLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewAsk(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewAsk(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new BuyLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new BuyLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewAsk(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewAsk(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewBid(s' 10' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewBid(s' 10' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new SellLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new SellLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewBid(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewBid(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new SellLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new SellLimit(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new BuyStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new BuyStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewAsk(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewAsk(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new BuyStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new BuyStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new SellStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new SellStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewBid(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(o.FillBidAsk(TickImpl.NewBid(s' 9' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new SellStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new SellStop(s' 100' 10m);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: Assert.That(!o.FillBidAsk(TickImpl.NewTrade(s' 11' 100)));
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,FillBidAsk,The following statement contains a magic number: o = new BuyMarket(s' 100);
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,SerializationAndDeserialization,The following statement contains a magic number: const decimal p = 10;
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,SerializationAndDeserialization,The following statement contains a magic number: const int z = 100;
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,SerializationAndDeserialization,The following statement contains a magic number: o.date = 20080718;
Magic Number,TestTradeLink,TestOrder,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestOrder.cs,SerializationAndDeserialization,The following statement contains a magic number: o.time = 94800;
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: PositionImpl p2 = new PositionImpl(s' 10' 100'0);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: PositionImpl p2 = new PositionImpl(s' 10' 100'0);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: Assert.That(p.Size == 100);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: Assert.That(p.AvgPrice == 10);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: p3 = new PositionImpl(s' 0' 100' 0);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: p3 = new PositionImpl(s' 12' 100'0);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: p3 = new PositionImpl(s' 12' 100'0);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: Assert.AreEqual(11'p.AvgPrice);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: Assert.That(p.Size == 200);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: p.Adjust(new TradeImpl(s' 13' -100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: p.Adjust(new TradeImpl(s' 13' -100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: Assert.That(p.AvgPrice == 11);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: Assert.That(p.Size == 100);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: TradeImpl lasttrade = new TradeImpl(s' 12' -100'dt);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,Basics,The following statement contains a magic number: TradeImpl lasttrade = new TradeImpl(s' 12' -100'dt);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,PositionAccountTest,The following statement contains a magic number: TradeImpl t = new TradeImpl("TST"' 100' 100);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,PositionAccountTest,The following statement contains a magic number: TradeImpl t = new TradeImpl("TST"' 100' 100);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,PositionAccountTest,The following statement contains a magic number: TradeImpl t2 = new TradeImpl("TST"' 200' 200);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,PositionAccountTest,The following statement contains a magic number: TradeImpl t2 = new TradeImpl("TST"' 200' 200);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,FlipSideInOneTrade,The following statement contains a magic number: PositionImpl p = new PositionImpl(s' 100m'200);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,FlipSideInOneTrade,The following statement contains a magic number: PositionImpl p = new PositionImpl(s' 100m'200);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,FlipSideInOneTrade,The following statement contains a magic number: TradeImpl flip = new TradeImpl(s' 99' -400);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,FlipSideInOneTrade,The following statement contains a magic number: TradeImpl flip = new TradeImpl(s' 99' -400);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,FlipSideInOneTrade,The following statement contains a magic number: Assert.AreEqual(-200' cpl);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,FlipSideInOneTrade,The following statement contains a magic number: Assert.AreEqual(-200' p.Size);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,FlipSideInOneTrade,The following statement contains a magic number: Assert.AreEqual(99' p.AvgPrice);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: PositionImpl p = new PositionImpl(new TradeImpl(s' 80' 100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: PositionImpl p = new PositionImpl(new TradeImpl(s' 80' 100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: Assert.That(p.Size == 100);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: decimal pl = p.Adjust(new TradeImpl(s' 84' -100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: decimal pl = p.Adjust(new TradeImpl(s' 84' -100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: Assert.AreEqual((84 - 80) * 100'pl);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: Assert.AreEqual((84 - 80) * 100'pl);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: Assert.AreEqual((84 - 80) * 100'pl);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: p = new PositionImpl(new TradeImpl(s' 84' -100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: p = new PositionImpl(new TradeImpl(s' 84' -100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: Assert.That(p.Size == -100);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: pl = p.Adjust(new TradeImpl(s' 80' 100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: pl = p.Adjust(new TradeImpl(s' 80' 100'dt));
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: Assert.That(pl == (84 - 80) * 100);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: Assert.That(pl == (84 - 80) * 100);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,UsingTrades,The following statement contains a magic number: Assert.That(pl == (84 - 80) * 100);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,SerializeDeserialize,The following statement contains a magic number: const decimal x = 10m;
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,SerializeDeserialize,The following statement contains a magic number: const int z = -100;
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,SerializeDeserialize,The following statement contains a magic number: const decimal cpl = 5.05m;
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,ClosedPL,The following statement contains a magic number: Position p = new PositionImpl(sym' 44.39m' 800' 0);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,ClosedPL,The following statement contains a magic number: Position p = new PositionImpl(sym' 44.39m' 800' 0);
Magic Number,TestTradeLink,TestPosition,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestPosition.cs,ClosedPL,The following statement contains a magic number: Assert.AreEqual(-66' pt[sym].ClosedPL);
Magic Number,TestTradeLink,TestSecurity,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSecurity.cs,OptionOSIParse,The following statement contains a magic number: Assert.AreEqual(20100416' sec.Date'"date incorrect");
Magic Number,TestTradeLink,TestSecurity,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSecurity.cs,OptionOSIParse,The following statement contains a magic number: Assert.AreEqual(20' sec.Strike'"strike incorrect");
Magic Number,TestTradeLink,TestSecurity,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSecurity.cs,Parsing,The following statement contains a magic number: Assert.AreEqual(100' opt.Strike);
Magic Number,TestTradeLink,TestSecurity,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSecurity.cs,Parsing,The following statement contains a magic number: Assert.AreEqual(201004' opt.Date);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawSingle,The following statement contains a magic number: Assert.Greater(tickcount' 40000);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformance,The following statement contains a magic number: rawbase("raw performance multi"'3'h);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformance,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformance,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformance,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformance,The following statement contains a magic number: Assert.AreEqual(20080318155843' lasttime);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,rawbase,The following statement contains a magic number: EXPECTRAW *= 2.5;
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,rawbase,The following statement contains a magic number: Assert.Less((tickcount - h.TicksPresent) / h.TicksPresent' .01);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: rawbase("raw performance multi w/load"' 3' h);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(20080318155843' lasttime);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(42610 + 4991 + 8041' tickcount);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,RawPerformanceWithLoad,The following statement contains a magic number: Assert.AreEqual(20080318155843' lasttime);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,bw_DoWork,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,bw_DoWork,The following statement contains a magic number: loadcount % 1000 == 0
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,ExecutionPerformance,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,ExecutionPerformance,The following statement contains a magic number: EXPECTEX *= 2.5;
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,execute_GotTick,The following statement contains a magic number: bool side = fillcount % 2 == 0;
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,execute_GotTick,The following statement contains a magic number: h.SimBroker.SendOrderStatus(new MarketOrder(t.symbol' side' 100));
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,execute_GotTick,The following statement contains a magic number: tickcount % 50 == 0
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,BarPerformance,The following statement contains a magic number: EXPECTBARS *= 2.5;
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,BarPerformance,The following statement contains a magic number: Assert.GreaterOrEqual(tickcount' 50000);
Magic Number,TestTradeLink,TestSingleSim,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSingleSim.cs,BarPerformance,The following statement contains a magic number: Assert.AreEqual(3' bt.SymbolCount);
Magic Number,TestTradeLink,TestSkin,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSkin.cs,SerializationDeserialization,The following statement contains a magic number: rt.EntrySize = 333;
Magic Number,TestTradeLink,TestSkin,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestSkin.cs,SerializationDeserialization,The following statement contains a magic number: Assert.AreEqual(333' rt.EntrySize);
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Basics,The following statement contains a magic number: t.size = 100;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Basics,The following statement contains a magic number: t.TradeSize = 100;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Basics,The following statement contains a magic number: Assert.That(t.TradeSize == t.ts * 100' t.TradeSize.ToString());
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Basics,The following statement contains a magic number: t.BidSize = 200;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Basics,The following statement contains a magic number: Assert.That(t.BidSize == t.bs * 100' t.BidSize.ToString());
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Basics,The following statement contains a magic number: t.AskSize = 300;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Basics,The following statement contains a magic number: Assert.That(t.AskSize == t.os*100' t.AskSize.ToString());
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,StaticFactories,The following statement contains a magic number: const decimal p = 13m;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,StaticFactories,The following statement contains a magic number: const int z = 400;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,StaticFactories,The following statement contains a magic number: Assert.That(t.os == (int)(z / 100)' t.os.ToString());
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,StaticFactories,The following statement contains a magic number: Assert.That(t.bs == (int)(z / 100)' t.bs.ToString());
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,StaticFactories,The following statement contains a magic number: Assert.That(t.ts == (int)(z / 100)' t.ts.ToString());
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Serialization,The following statement contains a magic number: const decimal p = 10m;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Serialization,The following statement contains a magic number: const int s = 300;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Serialization,The following statement contains a magic number: const int date = 20080702;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Serialization,The following statement contains a magic number: const int time = 93503;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,Serialization,The following statement contains a magic number: pre.depth = 5;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,SerializationPerformance,The following statement contains a magic number: const int OPS = 10000;
Magic Number,TestTradeLink,TestTick,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTick.cs,SerializationPerformance,The following statement contains a magic number: Assert.LessOrEqual(time' .20);
Magic Number,TestTradeLink,TestTickArchiver,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickArchiver.cs,Multiday,The following statement contains a magic number: int d = 20100223;
Magic Number,TestTradeLink,TestTickArchiver,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickArchiver.cs,Multiday,The following statement contains a magic number: int t = 235900;
Magic Number,TestTradeLink,TestTickArchiver,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickArchiver.cs,Multiday,The following statement contains a magic number: const decimal p = 50;
Magic Number,TestTradeLink,TestTickArchiver,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickArchiver.cs,Multiday,The following statement contains a magic number: int s = 100;
Magic Number,TestTradeLink,TestTickArchiver,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickArchiver.cs,Multiday,The following statement contains a magic number: Assert.AreEqual(5'readdata2.Count);
Magic Number,TestTradeLink,TestTickArchiver,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickArchiver.cs,Multiday,The following statement contains a magic number: Assert.AreEqual(5' readdata.Count);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,Basics,The following statement contains a magic number: Assert.AreEqual(2'result.Length);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,Basics,The following statement contains a magic number: Assert.AreEqual(result[1]' filenames[4]);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,Basics,The following statement contains a magic number: tff.DateFilter(20070000' DateMatchType.Year);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,Basics,The following statement contains a magic number: Assert.AreEqual(3' result.Length);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,Basics,The following statement contains a magic number: Assert.AreEqual(filenames[3]' result[2]);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,Basics,The following statement contains a magic number: Assert.AreEqual(filenames[3]' result[2]);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,AndTest,The following statement contains a magic number: tff.DateFilter(20070000' DateMatchType.Year);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,AndTest,The following statement contains a magic number: tff.DateFilter(600' DateMatchType.Month);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,AndTest,The following statement contains a magic number: Assert.AreEqual(3' result.Length);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,AndTest,The following statement contains a magic number: Assert.AreEqual(2' result.Length);
Magic Number,TestTradeLink,TestTickFileFilter,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickFileFilter.cs,SerializeDeserialize,The following statement contains a magic number: tff.DateFilter(20070000' DateMatchType.Year);
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: const int y = 2008;
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: TickImpl t = TickImpl.NewTrade(sym'date'130000'100m'100'"");
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: TickImpl t = TickImpl.NewTrade(sym'date'130000'100m'100'"");
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: TickImpl t = TickImpl.NewTrade(sym'date'130000'100m'100'"");
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: tw.AlertThreshold= 300;
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: Assert.That(tw.AlertThreshold== 300);
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: t2.time = 130458;
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: tw.SendAlerts(new DateTime(y'm'd' 13' 4' 0));
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: tw.SendAlerts(new DateTime(y'm'd' 13' 4' 0));
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: t3.time = 131000;
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: DateTime iswaylate = new DateTime(y'm'd' 14' 0' 1);
Magic Number,TestTradeLink,TestTickWatcher,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTickWatcher.cs,WatcherTest,The following statement contains a magic number: Assert.AreEqual(2'alertssent);
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewBid(SYM' 10' 100));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewBid(SYM' 10' 100));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewAsk(SYM' 11' 200));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewAsk(SYM' 11' 200));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewQuote(SYM' DATE'93000'10' 11'300'300'"NYSE"'"ARCA"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewQuote(SYM' DATE'93000'10' 11'300'300'"NYSE"'"ARCA"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewQuote(SYM' DATE'93000'10' 11'300'300'"NYSE"'"ARCA"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewQuote(SYM' DATE'93000'10' 11'300'300'"NYSE"'"ARCA"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewQuote(SYM' DATE'93000'10' 11'300'300'"NYSE"'"ARCA"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewTrade(SYM' DATE'93100'10' 400'"NYSE"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewTrade(SYM' DATE'93100'10' 400'"NYSE"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: data.Add(TickImpl.NewTrade(SYM' DATE'93100'10' 400'"NYSE"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: Tick full = TickImpl.Copy((TickImpl)data[2]' (TickImpl)data[3]);
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikTypes,The following statement contains a magic number: Tick full = TickImpl.Copy((TickImpl)data[2]' (TickImpl)data[3]);
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,WriteandRead,The following statement contains a magic number: double rate = TICKCOUNT/(elapms/1000);
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,WriteandRead,The following statement contains a magic number: Assert.GreaterOrEqual(rate' 90000);
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,FilenameTest,The following statement contains a magic number: const int SHORTTEST = 1000;
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,FilenameTestOption,The following statement contains a magic number: const int SHORTTEST = 1000;
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,writeandread,The following statement contains a magic number: Console.WriteLine("write speed (ticks/sec): " + (data.Length / (elapms / 1000)).ToString("n0"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,writeandread,The following statement contains a magic number: Console.WriteLine("read speed (ticks/sec): " + (data.Length/(elapms/1000)).ToString("n0"));
Magic Number,TestTradeLink,TestTikWriterReader,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTikWriterReader.cs,TikFromTick,The following statement contains a magic number: Tick[] data =                  TradeLink.Research.RandomTicks.GenerateSymbol(SYM' 10);
Magic Number,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,OrderPrecision,The following statement contains a magic number: double p = r.NextDouble() * 1000000 / 100;
Magic Number,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,OrderPrecision,The following statement contains a magic number: double p = r.NextDouble() * 1000000 / 100;
Magic Number,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,OrderPrecision,The following statement contains a magic number: int err = SendOrder("TST"' true' 300' p' 0' 1' string.Empty' string.Empty);
Magic Number,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,OrderPrecision,The following statement contains a magic number: double expect = Math.Round(p' 5);
Magic Number,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,OrderPrecision,The following statement contains a magic number: double actual = (double)Math.Round(last.price' 5);
Magic Number,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,InterOpSpeed,The following statement contains a magic number: const int TESTSIZE = 100;
Magic Number,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,InterOpSpeed,The following statement contains a magic number: int err = SendOrder(sym' true' 300' (double)data[i].trade' 0' 1' "TESTACCOUNT"' "TESTDEST");
Magic Number,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,InterOpSpeed,The following statement contains a magic number: double elap = (double)elapms/1000;
Magic Number,TestTradeLink,TestTLFastInterop,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTLFastInterop.cs,InterOpSpeed,The following statement contains a magic number: Assert.LessOrEqual(elap' .5);
Magic Number,TestTradeLink,TestTrade,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrade.cs,Construction,The following statement contains a magic number: TradeImpl t = new TradeImpl("TST"'10'100'DateTime.Now);
Magic Number,TestTradeLink,TestTrade,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrade.cs,Construction,The following statement contains a magic number: TradeImpl t = new TradeImpl("TST"'10'100'DateTime.Now);
Magic Number,TestTradeLink,TestTrade,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrade.cs,Construction,The following statement contains a magic number: t.xdate = 20081205;
Magic Number,TestTradeLink,TestTrade,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrade.cs,SerializeDeserialize,The following statement contains a magic number: decimal price = 10;
Magic Number,TestTradeLink,TestTrade,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrade.cs,SerializeDeserialize,The following statement contains a magic number: int size = 100;
Magic Number,TestTradeLink,TestTrade,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrade.cs,SerializeDeserialize,The following statement contains a magic number: long magicid = 555;
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,start,The following statement contains a magic number: s = new TLServer_IP(IPUtil.LOCALHOST' IPUtil.TLDEFAULTTESTPORT' 0' 100000);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,start,The following statement contains a magic number: s.Start(5'200'true);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,start,The following statement contains a magic number: s.Start(5'200'true);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,start,The following statement contains a magic number: sleep(50);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,FeatureTests,The following statement contains a magic number: sleep(200);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,TickPerformance,The following statement contains a magic number: const decimal EXPECT = .8m;
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ServerDisconnect,The following statement contains a magic number: sleep(50);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ServerDisconnect,The following statement contains a magic number: sleep(10);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ServerDisconnect,The following statement contains a magic number: sleep(10);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ServerDisconnect,The following statement contains a magic number: const decimal FAILMULT = 2;
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ServerDisconnect,The following statement contains a magic number: sentticks % 100 == 0
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ServerDisconnect,The following statement contains a magic number: sleep(50);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ClientDisconnect,The following statement contains a magic number: sleep(50);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ClientDisconnect,The following statement contains a magic number: sleep(10);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ClientDisconnect,The following statement contains a magic number: sleep(10);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ClientDisconnect,The following statement contains a magic number: const decimal FAILMULT = 2;
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ClientDisconnect,The following statement contains a magic number: sentticks % 100 == 0
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,ClientDisconnect,The following statement contains a magic number: sleep(50);
Magic Number,TestTradeLink,TestTradeLink_IP,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_IP.cs,bw_DoWork,The following statement contains a magic number: i % 250 == 0
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,Imbalance,The following statement contains a magic number: s.newImbalance(new ImbalanceImpl(SYM' "NYSE"' 100000' 154000' 0' 0'0));
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,Imbalance,The following statement contains a magic number: s.newImbalance(new ImbalanceImpl(SYM' "NYSE"' 100000' 154000' 0' 0'0));
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,TickTests,The following statement contains a magic number: TickImpl t = TickImpl.NewTrade(SYM' 10' 100);
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,TickTests,The following statement contains a magic number: TickImpl t = TickImpl.NewTrade(SYM' 10' 100);
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,OrderTests,The following statement contains a magic number: OrderImpl o = new OrderImpl(SYM' 100);
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,FillTests,The following statement contains a magic number: TradeImpl t = new TradeImpl(SYM' 100' 300' DateTime.Now);
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,FillTests,The following statement contains a magic number: TradeImpl t = new TradeImpl(SYM' 100' 300' DateTime.Now);
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,ImbalancePerformance,The following statement contains a magic number: const int OPS = 1000;
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,ImbalancePerformance,The following statement contains a magic number: Assert.LessOrEqual(time' .05);
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,TickPerformance,The following statement contains a magic number: const decimal EXPECT = .10m;
Magic Number,TestTradeLink,TestTradeLink_WM,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTradeLink_WM.cs,TickPerformance,The following statement contains a magic number: const int TICKSENT = 1000;
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,SampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,Basics,The following statement contains a magic number: tt.DefaultTrail = new OffsetInfo(0'.15m);
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,Basics,The following statement contains a magic number: Assert.AreEqual(.15m'tt.DefaultTrail.StopDist);
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,Basics,The following statement contains a magic number: b.SendOrderStatus(new MarketOrder(SYM' 100));
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,Basics,The following statement contains a magic number: k.date = 20070926;
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,Basics,The following statement contains a magic number: k.time = 95500;
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,TrailStartedAfterFirePoint,The following statement contains a magic number: tt.DefaultTrail = new OffsetInfo(0' .15m);
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,TrailStartedAfterFirePoint,The following statement contains a magic number: Assert.AreEqual(.15m' tt.DefaultTrail.StopDist);
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,TrailStartedAfterFirePoint,The following statement contains a magic number: tt.Adjust(new PositionImpl(SYM' 11.00m' 100' 0m'acct));
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,TrailStartedAfterFirePoint,The following statement contains a magic number: tt.Adjust(new PositionImpl(SYM' 11.00m' 100' 0m'acct));
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,TrailStartedAfterFirePoint,The following statement contains a magic number: tt[SYM] = new OffsetInfo(0m' .25m);
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,TrailStartedAfterFirePoint,The following statement contains a magic number: Assert.AreEqual(.25m' tt[SYM].StopDist);
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,TrailStartedAfterFirePoint,The following statement contains a magic number: k.date = 20070926;
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,TrailStartedAfterFirePoint,The following statement contains a magic number: k.time = 95500;
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFire,The following statement contains a magic number: tt.DefaultTrail = new OffsetInfo(0' .15m'0'.5m);
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFire,The following statement contains a magic number: tt.DefaultTrail = new OffsetInfo(0' .15m'0'.5m);
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFire,The following statement contains a magic number: Assert.AreEqual(.15m' tt.DefaultTrail.StopDist);
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFire,The following statement contains a magic number: b.SendOrderStatus(new MarketOrder(SYM' 400));
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFire,The following statement contains a magic number: k.date = 20070926;
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFire,The following statement contains a magic number: k.time = 95500;
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFire,The following statement contains a magic number: Assert.AreEqual(200'p.UnsignedSize' "position is not flat: " + p.ToString());
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestTrailTracker,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestTrailTracker.cs,MultiFireSampleData,The following statement contains a magic number: return new Tick[] {                  TickImpl.NewTrade(SYM'10'100)' // get fill for initial position                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                  TickImpl.NewTrade(SYM'10'100)'                   TickImpl.NewTrade(SYM'10.8m'100)'  // new high                  TickImpl.NewTrade(SYM'10.75m'100)'                  TickImpl.NewTrade(SYM'11'100)'  // new high                  TickImpl.NewTrade(SYM'10.50m'100)' // retrace... FLAT!                  TickImpl.NewTrade(SYM'10.50m'1)' // not enough to fill flat order                  TickImpl.NewTrade(SYM'10.50m'100)' // flat order should be completely filled here                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)' // want to make sure we are not oversold                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'100)'                                  TickImpl.NewTrade(SYM'10.50m'100)'                  TickImpl.NewTrade(SYM'10.50m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'10.40m'200)'                                  TickImpl.NewTrade(SYM'10.40m'200)'                  TickImpl.NewTrade(SYM'9'100)'                                    TickImpl.NewTrade(SYM'9'100)'                                                    TickImpl.NewTrade(SYM'9'100)'              };
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TLDatematch,The following statement contains a magic number: int dd = 20070601;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TLDatematch,The following statement contains a magic number: int m = 20071201;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TLDatematch,The following statement contains a magic number: int m2 = 20060131;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Year == 2007);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Month == 7);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Day == 31);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Hour == 9);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Minute == 31);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Year == 2007);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Month == 7);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Day == 31);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Hour == 14);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,Date,The following statement contains a magic number: Assert.That(d.Second == 45);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TradesToClosedPLString,The following statement contains a magic number: tradelist.Add(new TradeImpl(s' 47.04m' 300));
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TradesToClosedPLString,The following statement contains a magic number: tradelist.Add(new TradeImpl(s' 47.04m' 300));
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TradesToClosedPLString,The following statement contains a magic number: tradelist.Add(new TradeImpl(s' 47.31m' 500));
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TradesToClosedPLString,The following statement contains a magic number: tradelist.Add(new TradeImpl(s' 47.31m' 500));
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TradesToClosedPLString,The following statement contains a magic number: tradelist.Add(new TradeImpl(s' 47.74m' -800));
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TradesToClosedPLString,The following statement contains a magic number: tradelist.Add(new TradeImpl(s' 47.74m' -800));
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TradesToClosedPLString,The following statement contains a magic number: switch (i)                  {                      case 0 :                          Assert.That(plrec[(int)TradePLField.OpenPL] == "0.00"'plrec[(int)TradePLField.OpenPL] );                          Assert.That(plrec[(int)TradePLField.ClosedPL] == "0.00"'plrec[(int)TradePLField.ClosedPL] );                          Assert.That(plrec[(int)TradePLField.OpenSize] == "300"' plrec[(int)TradePLField.OpenSize]);                          Assert.That(plrec[(int)TradePLField.ClosedSize] == "0"' plrec[(int)TradePLField.ClosedSize]);                          Assert.That(plrec[(int)TradePLField.AvgPrice] == "47.04"' plrec[(int)TradePLField.AvgPrice]);                          break;                      case 1 :                          Assert.That(plrec[(int)TradePLField.OpenPL] == "81.00"' plrec[(int)TradePLField.OpenPL]);                          Assert.That(plrec[(int)TradePLField.ClosedPL] == "0.00"' plrec[(int)TradePLField.ClosedPL]);                          Assert.That(plrec[(int)TradePLField.OpenSize] == "800"' plrec[(int)TradePLField.OpenSize]);                          Assert.That(plrec[(int)TradePLField.ClosedSize] == "0"' plrec[(int)TradePLField.ClosedSize]);                          Assert.That(plrec[(int)TradePLField.AvgPrice] == "47.21"' plrec[(int)TradePLField.AvgPrice]);                          break;                      case 2 :                          Assert.That(plrec[(int)TradePLField.OpenPL] == "0.00"' plrec[(int)TradePLField.OpenPL]);                          Assert.That(plrec[(int)TradePLField.ClosedPL] == "425.00"' plrec[(int)TradePLField.ClosedPL]);                          Assert.That(plrec[(int)TradePLField.OpenSize] == "0"' plrec[(int)TradePLField.OpenSize]);                          Assert.That(plrec[(int)TradePLField.ClosedSize] == "-800"' plrec[(int)TradePLField.ClosedSize]);                          Assert.That(plrec[(int)TradePLField.AvgPrice] == "0.00"' plrec[(int)TradePLField.AvgPrice]);                          break;                  }
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: int h = 23;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: int m = 59;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: int s = 48;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(235948' ft);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(h * 60 * 60 + m * 60 + s' span);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(h * 60 * 60 + m * 60 + s' span);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(h * 60 * 60 + m * 60 + s' span);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: int t1 = 115100;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: int t2 = 231408;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(11*60*60+23*60+8' span);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(11*60*60+23*60+8' span);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(11*60*60+23*60+8' span);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(11*60*60+23*60+8' span);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(11*60*60+23*60+8' span);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(11*60*60+23*60+8' span);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: t1 = 133709;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: span = 300 * 60;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: span = 300 * 60;
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,FastTime,The following statement contains a magic number: Assert.AreEqual(183709' endtime);
Magic Number,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TickIndex,The following statement contains a magic number: Assert.AreEqual(2' idx.GetLength(1));
Magic Number,TestTradeLink,TestWMUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestWMUtil.cs,Packing,The following statement contains a magic number: decimal normal = 37.56m;
Missing Default,TestTradeLink,TestUtil,D:\research\architectureSmells\repos\brotchie_tradelink\TradeLinkTests\TestUtil.cs,TradesToClosedPLString,The following switch statement is missing a default case: switch (i)                  {                      case 0 :                          Assert.That(plrec[(int)TradePLField.OpenPL] == "0.00"'plrec[(int)TradePLField.OpenPL] );                          Assert.That(plrec[(int)TradePLField.ClosedPL] == "0.00"'plrec[(int)TradePLField.ClosedPL] );                          Assert.That(plrec[(int)TradePLField.OpenSize] == "300"' plrec[(int)TradePLField.OpenSize]);                          Assert.That(plrec[(int)TradePLField.ClosedSize] == "0"' plrec[(int)TradePLField.ClosedSize]);                          Assert.That(plrec[(int)TradePLField.AvgPrice] == "47.04"' plrec[(int)TradePLField.AvgPrice]);                          break;                      case 1 :                          Assert.That(plrec[(int)TradePLField.OpenPL] == "81.00"' plrec[(int)TradePLField.OpenPL]);                          Assert.That(plrec[(int)TradePLField.ClosedPL] == "0.00"' plrec[(int)TradePLField.ClosedPL]);                          Assert.That(plrec[(int)TradePLField.OpenSize] == "800"' plrec[(int)TradePLField.OpenSize]);                          Assert.That(plrec[(int)TradePLField.ClosedSize] == "0"' plrec[(int)TradePLField.ClosedSize]);                          Assert.That(plrec[(int)TradePLField.AvgPrice] == "47.21"' plrec[(int)TradePLField.AvgPrice]);                          break;                      case 2 :                          Assert.That(plrec[(int)TradePLField.OpenPL] == "0.00"' plrec[(int)TradePLField.OpenPL]);                          Assert.That(plrec[(int)TradePLField.ClosedPL] == "425.00"' plrec[(int)TradePLField.ClosedPL]);                          Assert.That(plrec[(int)TradePLField.OpenSize] == "0"' plrec[(int)TradePLField.OpenSize]);                          Assert.That(plrec[(int)TradePLField.ClosedSize] == "-800"' plrec[(int)TradePLField.ClosedSize]);                          Assert.That(plrec[(int)TradePLField.AvgPrice] == "0.00"' plrec[(int)TradePLField.AvgPrice]);                          break;                  }
