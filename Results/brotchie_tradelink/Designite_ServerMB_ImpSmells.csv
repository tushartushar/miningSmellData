Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_Hist_OnDataEvent,The method has 105 lines of code.
Long Method,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,tl_newSendOrderRequest,The method has 116 lines of code.
Long Method,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The method has 150 lines of code.
Complex Method,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_Hist_OnDataEvent,Cyclomatic complexity of the method is 8
Complex Method,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_OrderClient_OnHistoryAdded,Cyclomatic complexity of the method is 8
Complex Method,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,tl_newOrderCancelRequest,Cyclomatic complexity of the method is 9
Complex Method,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,tl_newSendOrderRequest,Cyclomatic complexity of the method is 11
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The length of the statement  "                    moDayBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate); " is 121.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The length of the statement  "                    moMinBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate); " is 121.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The length of the statement  "                    moTickBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate); " is 122.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,OnPositionChanged,The length of the statement  "                ? (decimal)(((pPos.IntradayPosition * pPos.IntradayPrice) + (pPos.OvernightPosition * pPos.OvernightPrice)) / (pPos.IntradayPrice + pPos.OvernightPosition)) " is 156.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_OrderClient_OnHistoryAdded,The length of the statement  "            debug(String.Format("OnHistoryAdded {0} {1} {2} {3} {4} {5} {6}"' pHist.Symbol' pHist.Event' pHist.OrderNumber' tlid' price' pHist.Quantity' pHist.Message)); " is 157.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,test,The length of the statement  "                    if (m_OrderClient.Accounts[i].Account != null && tlAcct == m_OrderClient.Accounts[i].Account && m_OrderClient.Accounts[i].State == enumAcctState.asLoaded) " is 154.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,test,The length of the statement  "                if (m_OrderClient.Accounts.DefaultAccount != null && m_OrderClient.Accounts.DefaultAccount.State == enumAcctState.asLoaded) " is 123.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,tl_newOrderCancelRequest,The length of the statement  "                    debug(String.Format("WARNING: Repeated cancel request for order {0} received from TradeLink. MBT Order is {1}. Checking if complete"' tlid' bid)); " is 146.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,tl_newOrderCancelRequest,The length of the statement  "                        debug(String.Format("WARNING: Repeated cancel request for order that no longer exists: {0} received from TradeLink. MBT Order was {1}. Checking if complete"' tlid' bid)); " is 170.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,tl_newOrderCancelRequest,The length of the statement  "                debug(String.Format("WARNING: Repeated cancel request for completely canceled order {0} received from TradeLink. No current MBT Order exists for it"' tlid)); " is 157.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,tl_newSendOrderRequest,The length of the statement  "            //bool good = m_OrderClient.Submit(side' o.UnsignedSize' o.symbol' (double)o.price' (double)o.stopp' tif' 0' otype' voltype' 0' m_account' route' ""' 0' 0' dt' dt' 0' 0' 0' 0' 0' ref res); " is 188.
Long Statement,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,getaccount,The length of the statement  "{ foreach (MbtAccount a in m_OrderClient.Accounts) if (a.Account == name) return a; return m_OrderClient.Accounts.DefaultAccount; }" is 131.
Long Statement,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ServerMBMain)); " is 132.
Long Statement,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The length of the statement  "            this.toolTip1.SetToolTip(this._loginbut' "if you experience problems using MBTrading' please email tradelink-users@googlegr" + " is 126.
Long Statement,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The length of the statement  "            this._verbon.DataBindings.Add(new System.Windows.Forms.Binding("Checked"' global::ServerMB.Properties.Settings.Default' "VerboseDebugging"' true' System.Windows.Forms.DataSourceUpdateMode.OnPropertyChanged)); " is 208.
Long Statement,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The length of the statement  "            this._id.DataBindings.Add(new System.Windows.Forms.Binding("Value"' global::ServerMB.Properties.Settings.Default' "memberid"' true' System.Windows.Forms.DataSourceUpdateMode.OnPropertyChanged)); " is 194.
Long Statement,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The length of the statement  "            this._pass.DataBindings.Add(new System.Windows.Forms.Binding("Text"' global::ServerMB.Properties.Settings.Default' "password"' true' System.Windows.Forms.DataSourceUpdateMode.OnPropertyChanged)); " is 195.
Long Statement,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The length of the statement  "            this._user.DataBindings.Add(new System.Windows.Forms.Binding("Text"' global::ServerMB.Properties.Settings.Default' "username"' true' System.Windows.Forms.DataSourceUpdateMode.OnPropertyChanged)); " is 195.
Empty Catch Block,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,ServerMBMain_FormClosing,The method has an empty catch block.
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The following statement contains a magic number: int lRequestID = (int)br.Interval % 100;
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The following statement contains a magic number: int lPeriod = (int)br.Interval / 100;
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The following statement contains a magic number: int lMaxRecs = br.CustomInterval / 10;
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The following statement contains a magic number: bool bUpdate = (br.CustomInterval % 10 == 0) ? false : true;
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The following statement contains a magic number: int lRequestType = lRequestID % 10;
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The following statement contains a magic number: switch (lRequestType)              {                  case 1:                      MbtHistDayBar moDayBar = m_Hist.CreateHistDayBar();                      moDayBar.Clear();                      debug(symbol + " " + lRequestID + " " + lPeriod + " " + dtStart + " " + dtEnd + " " + lMaxRecs + " " + bUpdate);                      moDayBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate);                      break;                  case 2:                      MbtHistMinBar moMinBar = m_Hist.CreateHistMinBar();                      moMinBar.Clear();                      debug(symbol + " " + lRequestID + " " + lPeriod + " " + dtStart + " " + dtEnd + " " + lMaxRecs + " " + bUpdate);                      moMinBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate);                      break;                  case 3:                      MbtHistTick moTickBar = m_Hist.CreateHistTick();                      moTickBar.Clear();                      moTickBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate);                      break;              }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The following statement contains a magic number: switch (lRequestType)              {                  case 1:                      MbtHistDayBar moDayBar = m_Hist.CreateHistDayBar();                      moDayBar.Clear();                      debug(symbol + " " + lRequestID + " " + lPeriod + " " + dtStart + " " + dtEnd + " " + lMaxRecs + " " + bUpdate);                      moDayBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate);                      break;                  case 2:                      MbtHistMinBar moMinBar = m_Hist.CreateHistMinBar();                      moMinBar.Clear();                      debug(symbol + " " + lRequestID + " " + lPeriod + " " + dtStart + " " + dtEnd + " " + lMaxRecs + " " + bUpdate);                      moMinBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate);                      break;                  case 3:                      MbtHistTick moTickBar = m_Hist.CreateHistTick();                      moTickBar.Clear();                      moTickBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate);                      break;              }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,MbtDayInt2CustInt,The following statement contains a magic number: switch (lPeriod)              {                  case -3:                      return 365 * (int)BarInterval.Day; break;                  case -2:                      return 30 * (int)BarInterval.Day; break;                  case -1:                      return 7 * (int)BarInterval.Day; break;                  case 0: return (int)BarInterval.Day; break;                  default: return lPeriod * (int)BarInterval.Day; break;                }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,MbtDayInt2CustInt,The following statement contains a magic number: switch (lPeriod)              {                  case -3:                      return 365 * (int)BarInterval.Day; break;                  case -2:                      return 30 * (int)BarInterval.Day; break;                  case -1:                      return 7 * (int)BarInterval.Day; break;                  case 0: return (int)BarInterval.Day; break;                  default: return lPeriod * (int)BarInterval.Day; break;                }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,MbtDayInt2CustInt,The following statement contains a magic number: switch (lPeriod)              {                  case -3:                      return 365 * (int)BarInterval.Day; break;                  case -2:                      return 30 * (int)BarInterval.Day; break;                  case -1:                      return 7 * (int)BarInterval.Day; break;                  case 0: return (int)BarInterval.Day; break;                  default: return lPeriod * (int)BarInterval.Day; break;                }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,MbtDayInt2CustInt,The following statement contains a magic number: switch (lPeriod)              {                  case -3:                      return 365 * (int)BarInterval.Day; break;                  case -2:                      return 30 * (int)BarInterval.Day; break;                  case -1:                      return 7 * (int)BarInterval.Day; break;                  case 0: return (int)BarInterval.Day; break;                  default: return lPeriod * (int)BarInterval.Day; break;                }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,MbtDayInt2CustInt,The following statement contains a magic number: switch (lPeriod)              {                  case -3:                      return 365 * (int)BarInterval.Day; break;                  case -2:                      return 30 * (int)BarInterval.Day; break;                  case -1:                      return 7 * (int)BarInterval.Day; break;                  case 0: return (int)BarInterval.Day; break;                  default: return lPeriod * (int)BarInterval.Day; break;                }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_Hist_OnDataEvent,The following statement contains a magic number: int lRequestType = lRequestId % 10;
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_Hist_OnDataEvent,The following statement contains a magic number: switch (lRequestType)              {                  case 1:                      debug("number of client");                      MbtHistDayBar mhd = pHist as MbtHistDayBar;                      mhd.Last();                          while (!mhd.Bof)                      {                          debug("number of client");                          open = Convert.ToDecimal(mhd.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhd.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhd.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhd.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhd.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhd.CloseDate);                          time = 0;                          MbtCustInt = MbtDayInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhd.Symbol' MbtCustInt);                            debug("number of client" + tl.NumClients);                            debug("bar" + BarImpl.Serialize(b));                          tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhd.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                      break;                    case 2:                        MbtHistMinBar mhm = pHist as MbtHistMinBar;                        mhm.Last();                        while (!mhm.Bof)                      {                          open = Convert.ToDecimal(mhm.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhm.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhm.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhm.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhm.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhm.LocalDateTime);                          time = Util.ToTLTime(mhm.LocalDateTime);                          MbtCustInt = MbtMinInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhm.Symbol' MbtCustInt);                            tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhm.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                        break;                        case 3:                        MbtHistTick mht = pHist as MbtHistTick;                      TickImpl k = new TickImpl(mht.Symbol);                      //MBT default tick data is trade data                      int lTickFilter = 1;                      mht.First();                        switch (lTickFilter)                      {                          case 1:                                while (!mht.Bof)                              {                                  k.trade = Convert.ToDecimal(mht.Price);                                  k.ex = mht.Exchange;                                  k.size = mht.Volume;                                  k.date = Util.ToTLDate(mht.LocalDateTime);                                  k.time = Util.ToTLTime(mht.LocalDateTime);                                  SendNewTick(k);                                  mht.Previous();                              }                              ; break;                        }                      break;              }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_Hist_OnDataEvent,The following statement contains a magic number: switch (lRequestType)              {                  case 1:                      debug("number of client");                      MbtHistDayBar mhd = pHist as MbtHistDayBar;                      mhd.Last();                          while (!mhd.Bof)                      {                          debug("number of client");                          open = Convert.ToDecimal(mhd.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhd.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhd.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhd.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhd.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhd.CloseDate);                          time = 0;                          MbtCustInt = MbtDayInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhd.Symbol' MbtCustInt);                            debug("number of client" + tl.NumClients);                            debug("bar" + BarImpl.Serialize(b));                          tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhd.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                      break;                    case 2:                        MbtHistMinBar mhm = pHist as MbtHistMinBar;                        mhm.Last();                        while (!mhm.Bof)                      {                          open = Convert.ToDecimal(mhm.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhm.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhm.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhm.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhm.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhm.LocalDateTime);                          time = Util.ToTLTime(mhm.LocalDateTime);                          MbtCustInt = MbtMinInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhm.Symbol' MbtCustInt);                            tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhm.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                        break;                        case 3:                        MbtHistTick mht = pHist as MbtHistTick;                      TickImpl k = new TickImpl(mht.Symbol);                      //MBT default tick data is trade data                      int lTickFilter = 1;                      mht.First();                        switch (lTickFilter)                      {                          case 1:                                while (!mht.Bof)                              {                                  k.trade = Convert.ToDecimal(mht.Price);                                  k.ex = mht.Exchange;                                  k.size = mht.Volume;                                  k.date = Util.ToTLDate(mht.LocalDateTime);                                  k.time = Util.ToTLTime(mht.LocalDateTime);                                  SendNewTick(k);                                  mht.Previous();                              }                              ; break;                        }                      break;              }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_Hist_OnDataEvent,The following statement contains a magic number: switch (lRequestType)              {                  case 1:                      debug("number of client");                      MbtHistDayBar mhd = pHist as MbtHistDayBar;                      mhd.Last();                          while (!mhd.Bof)                      {                          debug("number of client");                          open = Convert.ToDecimal(mhd.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhd.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhd.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhd.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhd.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhd.CloseDate);                          time = 0;                          MbtCustInt = MbtDayInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhd.Symbol' MbtCustInt);                            debug("number of client" + tl.NumClients);                            debug("bar" + BarImpl.Serialize(b));                          tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhd.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                      break;                    case 2:                        MbtHistMinBar mhm = pHist as MbtHistMinBar;                        mhm.Last();                        while (!mhm.Bof)                      {                          open = Convert.ToDecimal(mhm.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhm.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhm.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhm.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhm.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhm.LocalDateTime);                          time = Util.ToTLTime(mhm.LocalDateTime);                          MbtCustInt = MbtMinInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhm.Symbol' MbtCustInt);                            tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhm.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                        break;                        case 3:                        MbtHistTick mht = pHist as MbtHistTick;                      TickImpl k = new TickImpl(mht.Symbol);                      //MBT default tick data is trade data                      int lTickFilter = 1;                      mht.First();                        switch (lTickFilter)                      {                          case 1:                                while (!mht.Bof)                              {                                  k.trade = Convert.ToDecimal(mht.Price);                                  k.ex = mht.Exchange;                                  k.size = mht.Volume;                                  k.date = Util.ToTLDate(mht.LocalDateTime);                                  k.time = Util.ToTLTime(mht.LocalDateTime);                                  SendNewTick(k);                                  mht.Previous();                              }                              ; break;                        }                      break;              }
Magic Number,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_Hist_OnDataEvent,The following statement contains a magic number: switch (lRequestType)              {                  case 1:                      debug("number of client");                      MbtHistDayBar mhd = pHist as MbtHistDayBar;                      mhd.Last();                          while (!mhd.Bof)                      {                          debug("number of client");                          open = Convert.ToDecimal(mhd.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhd.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhd.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhd.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhd.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhd.CloseDate);                          time = 0;                          MbtCustInt = MbtDayInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhd.Symbol' MbtCustInt);                            debug("number of client" + tl.NumClients);                            debug("bar" + BarImpl.Serialize(b));                          tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhd.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                      break;                    case 2:                        MbtHistMinBar mhm = pHist as MbtHistMinBar;                        mhm.Last();                        while (!mhm.Bof)                      {                          open = Convert.ToDecimal(mhm.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhm.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhm.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhm.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhm.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhm.LocalDateTime);                          time = Util.ToTLTime(mhm.LocalDateTime);                          MbtCustInt = MbtMinInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhm.Symbol' MbtCustInt);                            tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhm.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                        break;                        case 3:                        MbtHistTick mht = pHist as MbtHistTick;                      TickImpl k = new TickImpl(mht.Symbol);                      //MBT default tick data is trade data                      int lTickFilter = 1;                      mht.First();                        switch (lTickFilter)                      {                          case 1:                                while (!mht.Bof)                              {                                  k.trade = Convert.ToDecimal(mht.Price);                                  k.ex = mht.Exchange;                                  k.size = mht.Volume;                                  k.date = Util.ToTLDate(mht.LocalDateTime);                                  k.time = Util.ToTLTime(mht.LocalDateTime);                                  SendNewTick(k);                                  mht.Previous();                              }                              ; break;                        }                      break;              }
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(37' 66);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(37' 66);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(87' 20);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(87' 20);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(42' 99);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(42' 99);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(82' 20);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(82' 20);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 4;
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._loginbut.Location = new System.Drawing.Point(86' 140);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._loginbut.Location = new System.Drawing.Point(86' 140);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._loginbut.Size = new System.Drawing.Size(92' 29);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._loginbut.Size = new System.Drawing.Size(92' 29);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._loginbut.TabIndex = 5;
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(39' 34);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(39' 34);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(85' 20);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(85' 20);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 7;
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._report.Location = new System.Drawing.Point(238' 140);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._report.Location = new System.Drawing.Point(238' 140);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._report.Size = new System.Drawing.Size(32' 27);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._report.Size = new System.Drawing.Size(32' 27);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._report.TabIndex = 12;
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._togmsg.Location = new System.Drawing.Point(196' 140);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._togmsg.Location = new System.Drawing.Point(196' 140);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._togmsg.Size = new System.Drawing.Size(35' 27);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._togmsg.Size = new System.Drawing.Size(35' 27);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._togmsg.TabIndex = 11;
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._verbon.Location = new System.Drawing.Point(164' 177);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._verbon.Location = new System.Drawing.Point(164' 177);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._verbon.Size = new System.Drawing.Size(79' 30);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._verbon.Size = new System.Drawing.Size(79' 30);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._verbon.TabIndex = 13;
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._id.Location = new System.Drawing.Point(131' 34);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._id.Location = new System.Drawing.Point(131' 34);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._id.Maximum = new decimal(new int[] {              -727379968'              232'              0'              0});
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._id.Maximum = new decimal(new int[] {              -727379968'              232'              0'              0});
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._id.Size = new System.Drawing.Size(99' 26);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._id.Size = new System.Drawing.Size(99' 26);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._id.TabIndex = 8;
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._pass.Location = new System.Drawing.Point(130' 99);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._pass.Location = new System.Drawing.Point(130' 99);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._pass.Size = new System.Drawing.Size(100' 26);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._pass.Size = new System.Drawing.Size(100' 26);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._pass.TabIndex = 3;
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._user.Location = new System.Drawing.Point(131' 66);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._user.Location = new System.Drawing.Point(131' 66);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._user.Size = new System.Drawing.Size(100' 26);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this._user.Size = new System.Drawing.Size(100' 26);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(9F' 20F);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(9F' 20F);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(299' 213);
Magic Number,ServerMB,ServerMBMain,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMBMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(299' 213);
Missing Default,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,tl_newUnknownRequest,The following switch statement is missing a default case: switch (t)              {                  case MessageTypes.BARREQUEST:                      {                          debug("got barrequest: " + msg);                          try                          {                              BarRequest br = BarImpl.ParseBarRequest(msg);                              if (waitforhistorical2complete) _barrequests.Write(br);                                else submitBarRequest(br);                              }                          catch (Exception ex)                          {                              debug("error parsing bar request: " + msg);                              debug(ex.Message + ex.StackTrace);                          }                          return 0;                      }              }
Missing Default,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,submitBarRequest,The following switch statement is missing a default case: switch (lRequestType)              {                  case 1:                      MbtHistDayBar moDayBar = m_Hist.CreateHistDayBar();                      moDayBar.Clear();                      debug(symbol + " " + lRequestID + " " + lPeriod + " " + dtStart + " " + dtEnd + " " + lMaxRecs + " " + bUpdate);                      moDayBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate);                      break;                  case 2:                      MbtHistMinBar moMinBar = m_Hist.CreateHistMinBar();                      moMinBar.Clear();                      debug(symbol + " " + lRequestID + " " + lPeriod + " " + dtStart + " " + dtEnd + " " + lMaxRecs + " " + bUpdate);                      moMinBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate);                      break;                  case 3:                      MbtHistTick moTickBar = m_Hist.CreateHistTick();                      moTickBar.Clear();                      moTickBar.SendRequest(symbol' lRequestID' lPeriod' dtStart.ToUniversalTime()' dtEnd.ToUniversalTime()' lMaxRecs' bUpdate);                      break;              }
Missing Default,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_Hist_OnDataEvent,The following switch statement is missing a default case: switch (lRequestType)              {                  case 1:                      debug("number of client");                      MbtHistDayBar mhd = pHist as MbtHistDayBar;                      mhd.Last();                          while (!mhd.Bof)                      {                          debug("number of client");                          open = Convert.ToDecimal(mhd.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhd.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhd.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhd.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhd.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhd.CloseDate);                          time = 0;                          MbtCustInt = MbtDayInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhd.Symbol' MbtCustInt);                            debug("number of client" + tl.NumClients);                            debug("bar" + BarImpl.Serialize(b));                          tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhd.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                      break;                    case 2:                        MbtHistMinBar mhm = pHist as MbtHistMinBar;                        mhm.Last();                        while (!mhm.Bof)                      {                          open = Convert.ToDecimal(mhm.Open' System.Globalization.CultureInfo.InvariantCulture);                          high = Convert.ToDecimal(mhm.High' System.Globalization.CultureInfo.InvariantCulture);                          low = Convert.ToDecimal(mhm.Low' System.Globalization.CultureInfo.InvariantCulture);                          close = Convert.ToDecimal(mhm.Close' System.Globalization.CultureInfo.InvariantCulture);                          vol = Convert.ToInt64(mhm.TotalVolume' System.Globalization.CultureInfo.InvariantCulture);                          date = Util.ToTLDate(mhm.LocalDateTime);                          time = Util.ToTLTime(mhm.LocalDateTime);                          MbtCustInt = MbtMinInt2CustInt((int)br.Interval / 100);                          b = new BarImpl(open' high' low' close' vol' date' time' mhm.Symbol' MbtCustInt);                            tl.TLSend(BarImpl.Serialize(b)' MessageTypes.BARRESPONSE' br.Client);                            mhm.Previous();                      }                      //use this mesage to inform that the data for requestID is compeleted                      tl.TLSend(Convert.ToString(lRequestId)' MessageTypes.CUSTOM40' br.Client);                        break;                        case 3:                        MbtHistTick mht = pHist as MbtHistTick;                      TickImpl k = new TickImpl(mht.Symbol);                      //MBT default tick data is trade data                      int lTickFilter = 1;                      mht.First();                        switch (lTickFilter)                      {                          case 1:                                while (!mht.Bof)                              {                                  k.trade = Convert.ToDecimal(mht.Price);                                  k.ex = mht.Exchange;                                  k.size = mht.Volume;                                  k.date = Util.ToTLDate(mht.LocalDateTime);                                  k.time = Util.ToTLTime(mht.LocalDateTime);                                  SendNewTick(k);                                  mht.Previous();                              }                              ; break;                        }                      break;              }
Missing Default,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,m_Hist_OnDataEvent,The following switch statement is missing a default case: switch (lTickFilter)                      {                          case 1:                                while (!mht.Bof)                              {                                  k.trade = Convert.ToDecimal(mht.Price);                                  k.ex = mht.Exchange;                                  k.size = mht.Volume;                                  k.date = Util.ToTLDate(mht.LocalDateTime);                                  k.time = Util.ToTLTime(mht.LocalDateTime);                                  SendNewTick(k);                                  mht.Previous();                              }                              ; break;                        }
Missing Default,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,OnTSData,The following switch statement is missing a default case: switch (tt)              {                  case enumTickType.ttAskTick:                      k.ask = (decimal)pRec.dPrice;                      k.oe = pRec.bstrExchange;                      k.os = pRec.lSize;                      break;                  case enumTickType.ttBidTick:                      k.bid = (decimal)pRec.dPrice;                      k.be = pRec.bstrExchange;                      k.bs = pRec.lSize;                      break;                  case enumTickType.ttTradeTick:                      k.trade = (decimal)pRec.dPrice;                      k.ex = pRec.bstrExchange;                      k.size = pRec.lSize;                      break;              }
Missing Default,ServerMB,ServerMB,D:\research\architectureSmells\repos\brotchie_tradelink\ServerMB\ServerMB.cs,OnLevel2Data,The following switch statement is missing a default case: switch (ems)              {                  case enumMarketSide.msAsk:                      k.ask = (decimal)pRec.dPrice;                      k.oe = pRec.bstrSource;                      k.os = k.AskSize = pRec.lSize;                      k.trade = k.ask;                      k.size = k.AskSize;                      break;                  case enumMarketSide.msBid:                      k.bid = (decimal)pRec.dPrice;                      k.be = pRec.bstrSource;                      k.bs = k.BidSize = pRec.lSize;                      k.trade = k.bid;                      k.size = k.BidSize;                      break;              }
