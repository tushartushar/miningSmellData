Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,Timer_Tick,Cyclomatic complexity of the method is 9
Long Parameter List,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,SetBinding,The method has 5 parameters. Parameters: path' dobj' property' viewModel' mode
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new HelixToolkit.Wpf.SharpDX.PerspectiveCamera              {                  Position = new Media3D.Point3D(10' 10' 10)'                  LookDirection = new Media3D.Vector3D(-10' -10' -10)'                  UpDirection = new Media3D.Vector3D(0' 1' 0)              };
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new HelixToolkit.Wpf.SharpDX.PerspectiveCamera              {                  Position = new Media3D.Point3D(10' 10' 10)'                  LookDirection = new Media3D.Vector3D(-10' -10' -10)'                  UpDirection = new Media3D.Vector3D(0' 1' 0)              };
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new HelixToolkit.Wpf.SharpDX.PerspectiveCamera              {                  Position = new Media3D.Point3D(10' 10' 10)'                  LookDirection = new Media3D.Vector3D(-10' -10' -10)'                  UpDirection = new Media3D.Vector3D(0' 1' 0)              };
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new HelixToolkit.Wpf.SharpDX.PerspectiveCamera              {                  Position = new Media3D.Point3D(10' 10' 10)'                  LookDirection = new Media3D.Vector3D(-10' -10' -10)'                  UpDirection = new Media3D.Vector3D(0' 1' 0)              };
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new HelixToolkit.Wpf.SharpDX.PerspectiveCamera              {                  Position = new Media3D.Point3D(10' 10' 10)'                  LookDirection = new Media3D.Vector3D(-10' -10' -10)'                  UpDirection = new Media3D.Vector3D(0' 1' 0)              };
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new HelixToolkit.Wpf.SharpDX.PerspectiveCamera              {                  Position = new Media3D.Point3D(10' 10' 10)'                  LookDirection = new Media3D.Vector3D(-10' -10' -10)'                  UpDirection = new Media3D.Vector3D(0' 1' 0)              };
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Light1Direction = new Vector3(-10' -10' -10);
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Light1Direction = new Vector3(-10' -10' -10);
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Light1Direction = new Vector3(-10' -10' -10);
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: b2.AddSphere(new Vector3(0f' 0f' 0f)' 4' 64' 64);
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: b2.AddSphere(new Vector3(0f' 0f' 0f)' 4' 64' 64);
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: b2.AddSphere(new Vector3(0f' 0f' 0f)' 4' 64' 64);
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds(16);
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,Timer_Tick,The following statement contains a magic number: if (DynamicVertices)              {                  var positions = new Vector3Collection(initialPosition);                  for (int i = 0; i < positions.Count; ++i)                  {                      positions[i] = positions[i] * (float)rnd.Next(95' 105) / 100;                  }                  Model.Normals = MeshGeometryHelper.CalculateNormals(positions' Model.Indices);                  InnerModel.Normals = new Vector3Collection(Model.Normals.Select(x => { return x * -1; }));                  Model.Positions = positions;                  InnerModel.Positions = positions;                  //Alternative implementation                  //Floor.DisablePropertyChangedEvent = true;                  //Floor.Positions = positions;                  //Floor.CalculateNormals();                  //Floor.DisablePropertyChangedEvent = false;                  //Floor.UpdateVertex();              }
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,Timer_Tick,The following statement contains a magic number: if (DynamicVertices)              {                  var positions = new Vector3Collection(initialPosition);                  for (int i = 0; i < positions.Count; ++i)                  {                      positions[i] = positions[i] * (float)rnd.Next(95' 105) / 100;                  }                  Model.Normals = MeshGeometryHelper.CalculateNormals(positions' Model.Indices);                  InnerModel.Normals = new Vector3Collection(Model.Normals.Select(x => { return x * -1; }));                  Model.Positions = positions;                  InnerModel.Positions = positions;                  //Alternative implementation                  //Floor.DisablePropertyChangedEvent = true;                  //Floor.Positions = positions;                  //Floor.CalculateNormals();                  //Floor.DisablePropertyChangedEvent = false;                  //Floor.UpdateVertex();              }
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,Timer_Tick,The following statement contains a magic number: if (DynamicVertices)              {                  var positions = new Vector3Collection(initialPosition);                  for (int i = 0; i < positions.Count; ++i)                  {                      positions[i] = positions[i] * (float)rnd.Next(95' 105) / 100;                  }                  Model.Normals = MeshGeometryHelper.CalculateNormals(positions' Model.Indices);                  InnerModel.Normals = new Vector3Collection(Model.Normals.Select(x => { return x * -1; }));                  Model.Positions = positions;                  InnerModel.Positions = positions;                  //Alternative implementation                  //Floor.DisablePropertyChangedEvent = true;                  //Floor.Positions = positions;                  //Floor.CalculateNormals();                  //Floor.DisablePropertyChangedEvent = false;                  //Floor.UpdateVertex();              }
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,Timer_Tick,The following statement contains a magic number: if (DynamicTriangles)              {                  var indices = new IntCollection(initialIndicies);                  if (isRemoving)                  {                      removedIndex += 3 * 8;                      if (removedIndex >= initialIndicies.Count)                      {                          removedIndex = initialIndicies.Count;                          isRemoving = false;                      }                  }                  else                  {                      removedIndex -= 3 * 8;                      if (removedIndex <= 0)                      {                          isRemoving = true;                          removedIndex = 0;                      }                  }                  indices.RemoveRange(0' removedIndex);                  Model.Indices = indices;                  InnerModel.Indices = indices;              }
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,Timer_Tick,The following statement contains a magic number: if (DynamicTriangles)              {                  var indices = new IntCollection(initialIndicies);                  if (isRemoving)                  {                      removedIndex += 3 * 8;                      if (removedIndex >= initialIndicies.Count)                      {                          removedIndex = initialIndicies.Count;                          isRemoving = false;                      }                  }                  else                  {                      removedIndex -= 3 * 8;                      if (removedIndex <= 0)                      {                          isRemoving = true;                          removedIndex = 0;                      }                  }                  indices.RemoveRange(0' removedIndex);                  Model.Indices = indices;                  InnerModel.Indices = indices;              }
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,Timer_Tick,The following statement contains a magic number: if (DynamicTriangles)              {                  var indices = new IntCollection(initialIndicies);                  if (isRemoving)                  {                      removedIndex += 3 * 8;                      if (removedIndex >= initialIndicies.Count)                      {                          removedIndex = initialIndicies.Count;                          isRemoving = false;                      }                  }                  else                  {                      removedIndex -= 3 * 8;                      if (removedIndex <= 0)                      {                          isRemoving = true;                          removedIndex = 0;                      }                  }                  indices.RemoveRange(0' removedIndex);                  Model.Indices = indices;                  InnerModel.Indices = indices;              }
Magic Number,DynamicTextureDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\DynamicTextureDemo\MainViewModel.cs,Timer_Tick,The following statement contains a magic number: if (DynamicTriangles)              {                  var indices = new IntCollection(initialIndicies);                  if (isRemoving)                  {                      removedIndex += 3 * 8;                      if (removedIndex >= initialIndicies.Count)                      {                          removedIndex = initialIndicies.Count;                          isRemoving = false;                      }                  }                  else                  {                      removedIndex -= 3 * 8;                      if (removedIndex <= 0)                      {                          isRemoving = true;                          removedIndex = 0;                      }                  }                  indices.RemoveRange(0' removedIndex);                  Model.Indices = indices;                  InnerModel.Indices = indices;              }
