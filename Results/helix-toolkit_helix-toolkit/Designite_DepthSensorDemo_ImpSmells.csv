Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,ShowStatus,Cyclomatic complexity of the method is 9
Complex Method,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnDepthFrameReady,Cyclomatic complexity of the method is 10
Long Statement,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnColorFrameReady,The length of the statement  "			this.outputImage.WritePixels (new Int32Rect (0' 0' imageFrame.Width' imageFrame.Height)' this.colorPixelData' imageFrame.Width * Bgr32BytesPerPixel' 0); " is 152.
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnColorFrameReady,The following statement contains a magic number: using (var imageFrame = e.OpenColorImageFrame ()) {  	if (imageFrame != null) {  		// Detect if the format has changed.  		bool haveNewFormat = this.lastColorImageFormat != imageFrame.Format;  		if (haveNewFormat) {  			this.colorPixelData = new byte[imageFrame.PixelDataLength];  		}  		imageFrame.CopyPixelDataTo (this.colorPixelData);  		// A WriteableBitmap is a WPF construct that enables resetting the Bits of the image.  		// This is more efficient than creating a new Bitmap every frame.  		if (haveNewFormat) {  			this.outputImage = new WriteableBitmap (imageFrame.Width' imageFrame.Height' 96' // DpiX  			96' // DpiY  			PixelFormats.Bgr32' null);  		}  		this.outputImage.WritePixels (new Int32Rect (0' 0' imageFrame.Width' imageFrame.Height)' this.colorPixelData' imageFrame.Width * Bgr32BytesPerPixel' 0);  		this.lastColorImageFormat = imageFrame.Format;  		// update the material of the mesh  		var material = new DiffuseMaterial (new ImageBrush (this.outputImage));  		this.Model.Material = this.Model.BackMaterial = material;  	}  }  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnColorFrameReady,The following statement contains a magic number: using (var imageFrame = e.OpenColorImageFrame ()) {  	if (imageFrame != null) {  		// Detect if the format has changed.  		bool haveNewFormat = this.lastColorImageFormat != imageFrame.Format;  		if (haveNewFormat) {  			this.colorPixelData = new byte[imageFrame.PixelDataLength];  		}  		imageFrame.CopyPixelDataTo (this.colorPixelData);  		// A WriteableBitmap is a WPF construct that enables resetting the Bits of the image.  		// This is more efficient than creating a new Bitmap every frame.  		if (haveNewFormat) {  			this.outputImage = new WriteableBitmap (imageFrame.Width' imageFrame.Height' 96' // DpiX  			96' // DpiY  			PixelFormats.Bgr32' null);  		}  		this.outputImage.WritePixels (new Int32Rect (0' 0' imageFrame.Width' imageFrame.Height)' this.colorPixelData' imageFrame.Width * Bgr32BytesPerPixel' 0);  		this.lastColorImageFormat = imageFrame.Format;  		// update the material of the mesh  		var material = new DiffuseMaterial (new ImageBrush (this.outputImage));  		this.Model.Material = this.Model.BackMaterial = material;  	}  }  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnColorFrameReady,The following statement contains a magic number: if (imageFrame != null) {  	// Detect if the format has changed.  	bool haveNewFormat = this.lastColorImageFormat != imageFrame.Format;  	if (haveNewFormat) {  		this.colorPixelData = new byte[imageFrame.PixelDataLength];  	}  	imageFrame.CopyPixelDataTo (this.colorPixelData);  	// A WriteableBitmap is a WPF construct that enables resetting the Bits of the image.  	// This is more efficient than creating a new Bitmap every frame.  	if (haveNewFormat) {  		this.outputImage = new WriteableBitmap (imageFrame.Width' imageFrame.Height' 96' // DpiX  		96' // DpiY  		PixelFormats.Bgr32' null);  	}  	this.outputImage.WritePixels (new Int32Rect (0' 0' imageFrame.Width' imageFrame.Height)' this.colorPixelData' imageFrame.Width * Bgr32BytesPerPixel' 0);  	this.lastColorImageFormat = imageFrame.Format;  	// update the material of the mesh  	var material = new DiffuseMaterial (new ImageBrush (this.outputImage));  	this.Model.Material = this.Model.BackMaterial = material;  }  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnColorFrameReady,The following statement contains a magic number: if (imageFrame != null) {  	// Detect if the format has changed.  	bool haveNewFormat = this.lastColorImageFormat != imageFrame.Format;  	if (haveNewFormat) {  		this.colorPixelData = new byte[imageFrame.PixelDataLength];  	}  	imageFrame.CopyPixelDataTo (this.colorPixelData);  	// A WriteableBitmap is a WPF construct that enables resetting the Bits of the image.  	// This is more efficient than creating a new Bitmap every frame.  	if (haveNewFormat) {  		this.outputImage = new WriteableBitmap (imageFrame.Width' imageFrame.Height' 96' // DpiX  		96' // DpiY  		PixelFormats.Bgr32' null);  	}  	this.outputImage.WritePixels (new Int32Rect (0' 0' imageFrame.Width' imageFrame.Height)' this.colorPixelData' imageFrame.Width * Bgr32BytesPerPixel' 0);  	this.lastColorImageFormat = imageFrame.Format;  	// update the material of the mesh  	var material = new DiffuseMaterial (new ImageBrush (this.outputImage));  	this.Model.Material = this.Model.BackMaterial = material;  }  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnColorFrameReady,The following statement contains a magic number: if (haveNewFormat) {  	this.outputImage = new WriteableBitmap (imageFrame.Width' imageFrame.Height' 96' // DpiX  	96' // DpiY  	PixelFormats.Bgr32' null);  }  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnColorFrameReady,The following statement contains a magic number: if (haveNewFormat) {  	this.outputImage = new WriteableBitmap (imageFrame.Width' imageFrame.Height' 96' // DpiX  	96' // DpiY  	PixelFormats.Bgr32' null);  }  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnColorFrameReady,The following statement contains a magic number: this.outputImage = new WriteableBitmap (imageFrame.Width' imageFrame.Height' 96' // DpiX  96' // DpiY  PixelFormats.Bgr32' null);  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,OnColorFrameReady,The following statement contains a magic number: this.outputImage = new WriteableBitmap (imageFrame.Width' imageFrame.Height' 96' // DpiX  96' // DpiY  PixelFormats.Bgr32' null);  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,ConvertRawDepthToMeters,The following statement contains a magic number: if (rawDepth < 2047) {  	return 1.0 / (rawDepth * -0.0030711016 + 3.3309495161);  }  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,ConvertRawDepthToMeters,The following statement contains a magic number: if (rawDepth < 2047) {  	return 1.0 / (rawDepth * -0.0030711016 + 3.3309495161);  }  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,ConvertRawDepthToMeters,The following statement contains a magic number: if (rawDepth < 2047) {  	return 1.0 / (rawDepth * -0.0030711016 + 3.3309495161);  }  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,ConvertRawDepthToMeters,The following statement contains a magic number: return 1.0 / (rawDepth * -0.0030711016 + 3.3309495161);  
Magic Number,DepthSensorDemo,MainWindow,F:\newReposMay17\helix-toolkit_helix-toolkit\Source\Examples\Kinect\DepthSensorDemo\MainWindow.xaml.cs,ConvertRawDepthToMeters,The following statement contains a magic number: return 1.0 / (rawDepth * -0.0030711016 + 3.3309495161);  
